
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b74  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d4  08018e24  08018e24  00028e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0801a6f8  0801a6f8  0002a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801a710  0801a710  0009fbb8  2**0
                  CONTENTS
  5 .ARM          00000000  0801a710  0801a710  0009fbb8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801a710  0801a710  0009fbb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0801a710  0801a710  0002a710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0801a724  0801a724  0002a724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  0801a72c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000af78  24000110  0801a83c  00030110  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b088  0801a83c  0003b088  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009fbb8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00040000  2**2
                  ALLOC
 14 FontFlashSection 000001a8  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000010  900001a8  900001a8  000401a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005fa00  900001b8  900001b8  000401b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0004dfcb  00000000  00000000  0009fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0009d030  00000000  00000000  000edbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00010df1  00000000  00000000  0018abe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003110  00000000  00000000  0019b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016ded6  00000000  00000000  0019eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003238  00000000  00000000  0030c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0002d0a6  00000000  00000000  0030fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003da61  00000000  00000000  0033cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0037a6ff  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000091ec  00000000  00000000  0037a7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018e0c 	.word	0x08018e0c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08018e0c 	.word	0x08018e0c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f004 fac1 	bl	8004940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f017 fd49 	bl	8017e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f001 fc5b 	bl	8001c7c <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0801a72c 	.word	0x0801a72c
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 80003d8:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 80003dc:	2400b088 	.word	0x2400b088

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80003e2:	4770      	bx	lr

080003e4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003e4:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80003e6:	f000 ff4f 	bl	8001288 <touchgfx_init>
}
 80003ea:	bd08      	pop	{r3, pc}

080003ec <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80003ec:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80003ee:	f000 ffc5 	bl	800137c <touchgfx_taskEntry>
}
 80003f2:	bd08      	pop	{r3, pc}

080003f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80003f4:	4a02      	ldr	r2, [pc, #8]	; (8000400 <_ZN20STM32TouchControllerD1Ev+0xc>)
 80003f6:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 80003f8:	4a02      	ldr	r2, [pc, #8]	; (8000404 <_ZN20STM32TouchControllerD1Ev+0x10>)
 80003fa:	6002      	str	r2, [r0, #0]
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	08018e84 	.word	0x08018e84
 8000404:	08018e6c 	.word	0x08018e6c

08000408 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000408:	b500      	push	{lr}
 800040a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800040c:	2308      	movs	r3, #8
 800040e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000410:	2000      	movs	r0, #0
 8000412:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <_ZN20STM32TouchController4initEv+0x24>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <_ZN20STM32TouchController4initEv+0x28>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000420:	4669      	mov	r1, sp
 8000422:	f004 f999 	bl	8004758 <BSP_TS_Init>
}
 8000426:	b005      	add	sp, #20
 8000428:	f85d fb04 	ldr.w	pc, [sp], #4
 800042c:	2400adfe 	.word	0x2400adfe
 8000430:	2400ae00 	.word	0x2400ae00

08000434 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	b085      	sub	sp, #20
 8000438:	460d      	mov	r5, r1
 800043a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800043c:	2000      	movs	r0, #0
 800043e:	9001      	str	r0, [sp, #4]
 8000440:	9002      	str	r0, [sp, #8]
 8000442:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000444:	a901      	add	r1, sp, #4
 8000446:	f004 f9f7 	bl	8004838 <BSP_TS_GetState>
 800044a:	b140      	cbz	r0, 800045e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800044c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000450:	f383 8811 	msr	BASEPRI, r3
 8000454:	f3bf 8f6f 	isb	sy
 8000458:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800045c:	e7fe      	b.n	800045c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	b913      	cbnz	r3, 8000468 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000462:	2000      	movs	r0, #0
}
 8000464:	b005      	add	sp, #20
 8000466:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000468:	9b02      	ldr	r3, [sp, #8]
 800046a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800046c:	9b03      	ldr	r3, [sp, #12]
 800046e:	6023      	str	r3, [r4, #0]
        return true;
 8000470:	2001      	movs	r0, #1
 8000472:	e7f7      	b.n	8000464 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

08000474 <_ZN20STM32TouchControllerD0Ev>:
 8000474:	b510      	push	{r4, lr}
 8000476:	4604      	mov	r4, r0
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <_ZN20STM32TouchControllerD0Ev+0x18>)
 800047a:	6003      	str	r3, [r0, #0]
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 800047e:	6003      	str	r3, [r0, #0]
 8000480:	2104      	movs	r1, #4
 8000482:	f017 fb78 	bl	8017b76 <_ZdlPvj>
 8000486:	4620      	mov	r0, r4
 8000488:	bd10      	pop	{r4, pc}
 800048a:	bf00      	nop
 800048c:	08018e84 	.word	0x08018e84
 8000490:	08018e6c 	.word	0x08018e6c

08000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000494:	b508      	push	{r3, lr}
    switch (id)
 8000496:	2803      	cmp	r0, #3
 8000498:	d80e      	bhi.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 800049a:	e8df f000 	tbb	[pc, r0]
 800049e:	0e02      	.short	0x0e02
 80004a0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004a4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	0952      	lsrs	r2, r2, #5
 80004ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b2:	4815      	ldr	r0, [pc, #84]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004b4:	f004 ff20 	bl	80052f8 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004b8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004bc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	0952      	lsrs	r2, r2, #5
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	480f      	ldr	r0, [pc, #60]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004cc:	f004 ff14 	bl	80052f8 <HAL_GPIO_WritePin>
        break;
 80004d0:	e7f2      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 80004e4:	f004 ff08 	bl	80052f8 <HAL_GPIO_WritePin>
        break;
 80004e8:	e7e6      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f004 fefc 	bl	80052f8 <HAL_GPIO_WritePin>
}
 8000500:	e7da      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000502:	bf00      	nop
 8000504:	2400012c 	.word	0x2400012c
 8000508:	58021c00 	.word	0x58021c00
 800050c:	58022000 	.word	0x58022000

08000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000510:	b508      	push	{r3, lr}
    switch (id)
 8000512:	2803      	cmp	r0, #3
 8000514:	d80e      	bhi.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000516:	e8df f000 	tbb	[pc, r0]
 800051a:	0e02      	.short	0x0e02
 800051c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000520:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000524:	b103      	cbz	r3, 8000528 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000526:	2001      	movs	r0, #1
 8000528:	4602      	mov	r2, r0
 800052a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052e:	4816      	ldr	r0, [pc, #88]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000530:	f004 fee2 	bl	80052f8 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000534:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000538:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800053c:	b903      	cbnz	r3, 8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800053e:	2000      	movs	r0, #0
 8000540:	4602      	mov	r2, r0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000548:	f004 fed6 	bl	80052f8 <HAL_GPIO_WritePin>
        break;
 800054c:	e7f2      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b133      	cbz	r3, 8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800055e:	f004 fecb 	bl	80052f8 <HAL_GPIO_WritePin>
        break;
 8000562:	e7e7      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000564:	2200      	movs	r2, #0
 8000566:	e7f7      	b.n	8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800056a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056e:	b133      	cbz	r3, 800057e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f004 febe 	bl	80052f8 <HAL_GPIO_WritePin>
}
 800057c:	e7da      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	2200      	movs	r2, #0
 8000580:	e7f7      	b.n	8000572 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 8000582:	bf00      	nop
 8000584:	2400012c 	.word	0x2400012c
 8000588:	58021c00 	.word	0x58021c00
 800058c:	58022000 	.word	0x58022000

08000590 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8000590:	b508      	push	{r3, lr}
    switch (id)
 8000592:	2803      	cmp	r0, #3
 8000594:	d808      	bhi.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 8000596:	e8df f000 	tbb	[pc, r0]
 800059a:	0802      	.short	0x0802
 800059c:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	480b      	ldr	r0, [pc, #44]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005a4:	f004 feae 	bl	8005304 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005a8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005b0:	f004 fea8 	bl	8005304 <HAL_GPIO_TogglePin>
        break;
 80005b4:	e7f8      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005bc:	f004 fea2 	bl	8005304 <HAL_GPIO_TogglePin>
        break;
 80005c0:	e7f2      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005c8:	f004 fe9c 	bl	8005304 <HAL_GPIO_TogglePin>
}
 80005cc:	e7ec      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005ce:	bf00      	nop
 80005d0:	58021c00 	.word	0x58021c00
 80005d4:	58022000 	.word	0x58022000

080005d8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 80005d8:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80005dc:	2301      	movs	r3, #1
 80005de:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80005e2:	4770      	bx	lr

080005e4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80005e4:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 80005e6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80005ea:	b123      	cbz	r3, 80005f6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 80005ec:	6840      	ldr	r0, [r0, #4]
 80005ee:	6803      	ldr	r3, [r0, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 80005f4:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 80005f6:	2000      	movs	r0, #0
 80005f8:	e7fc      	b.n	80005f4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

080005fa <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80005fa:	2000      	movs	r0, #0
 80005fc:	4770      	bx	lr
	...

08000600 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000600:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000602:	3900      	subs	r1, #0
 8000604:	bf18      	it	ne
 8000606:	2101      	movne	r1, #1
 8000608:	4b01      	ldr	r3, [pc, #4]	; (8000610 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800060a:	7019      	strb	r1, [r3, #0]
    }
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2400ae03 	.word	0x2400ae03

08000614 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000614:	2000      	movs	r0, #0
 8000616:	4770      	bx	lr

08000618 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000618:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800061a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800061c:	b10b      	cbz	r3, 8000622 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800061e:	4608      	mov	r0, r1
 8000620:	4798      	blx	r3
        }
    }
 8000622:	bd08      	pop	{r3, pc}

08000624 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000624:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000628:	4770      	bx	lr

0800062a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800062a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800062c:	6840      	ldr	r0, [r0, #4]
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4798      	blx	r3
    }
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000638:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800063c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000640:	429a      	cmp	r2, r3
 8000642:	d00c      	beq.n	800065e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b9ab      	cbnz	r3, 8000676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800064a:	4a0c      	ldr	r2, [pc, #48]	; (800067c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800064c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000650:	8818      	ldrh	r0, [r3, #0]
 8000652:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000654:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b143      	cbz	r3, 8000676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000666:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800066a:	8818      	ldrh	r0, [r3, #0]
 800066c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800066e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
        }
    }
 8000676:	4770      	bx	lr
 8000678:	2400adfc 	.word	0x2400adfc
 800067c:	2400adfa 	.word	0x2400adfa
 8000680:	2400adf8 	.word	0x2400adf8

08000684 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <_ZN11TouchGFXHALD1Ev+0x10>)
 8000686:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <_ZN11TouchGFXHALD1Ev+0x14>)
 800068a:	6002      	str	r2, [r0, #0]
    {
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <_ZN11TouchGFXHALD1Ev+0x18>)
 800068e:	6002      	str	r2, [r0, #0]
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	08019014 	.word	0x08019014
 8000698:	08019614 	.word	0x08019614
 800069c:	0801a04c 	.word	0x0801a04c

080006a0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006a0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006a2:	f000 fffb 	bl	800169c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006a6:	bd08      	pop	{r3, pc}

080006a8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006a8:	b508      	push	{r3, lr}
 80006aa:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006ac:	6803      	ldr	r3, [r0, #0]
 80006ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006b2:	4798      	blx	r3
    enableInterrupts();
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006b8:	4620      	mov	r0, r4
 80006ba:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006bc:	f000 f91e 	bl	80008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006c4:	4620      	mov	r0, r4
 80006c6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <_ZN11TouchGFXHAL9taskEntryEv+0x50>)
 80006ce:	f004 fe13 	bl	80052f8 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80006d2:	4d0a      	ldr	r5, [pc, #40]	; (80006fc <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	2104      	movs	r1, #4
 80006d8:	4628      	mov	r0, r5
 80006da:	f004 fe0d 	bl	80052f8 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	4628      	mov	r0, r5
 80006e4:	f004 fe08 	bl	80052f8 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80006e8:	f000 f908 	bl	80008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f0:	4620      	mov	r0, r4
 80006f2:	4798      	blx	r3
    for (;;)
 80006f4:	e7f8      	b.n	80006e8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
 80006f6:	bf00      	nop
 80006f8:	58022800 	.word	0x58022800
 80006fc:	58020000 	.word	0x58020000

08000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000700:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000702:	f000 ff57 	bl	80015b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 8000706:	bd08      	pop	{r3, pc}

08000708 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000708:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800070a:	f000 ff59 	bl	80015c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800070e:	bd08      	pop	{r3, pc}

08000710 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000710:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000712:	f000 ffeb 	bl	80016ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000722:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000726:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800072a:	e000      	b.n	800072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800072c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800072e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000732:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000736:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800073a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800073e:	4907      	ldr	r1, [pc, #28]	; (800075c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000740:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000744:	4613      	mov	r3, r2
 8000746:	3a01      	subs	r2, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f2      	bne.n	8000732 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 800074c:	1e43      	subs	r3, r0, #1
 800074e:	2800      	cmp	r0, #0
 8000750:	d1ec      	bne.n	800072c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000752:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000756:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800075a:	bd10      	pop	{r4, pc}
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000760:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000762:	f000 fee5 	bl	8001530 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000766:	bd08      	pop	{r3, pc}

08000768 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000768:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800076a:	f000 feeb 	bl	8001544 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800076e:	bd08      	pop	{r3, pc}

08000770 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000770:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000772:	f000 fef1 	bl	8001558 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000776:	bd08      	pop	{r3, pc}

08000778 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000778:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800077a:	f000 ff01 	bl	8001580 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800077e:	bd08      	pop	{r3, pc}

08000780 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000780:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000782:	b161      	cbz	r1, 800079e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000784:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000786:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000788:	3a00      	subs	r2, #0
 800078a:	bf18      	it	ne
 800078c:	2201      	movne	r2, #1
 800078e:	4907      	ldr	r1, [pc, #28]	; (80007ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 8000790:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 8000792:	6802      	ldr	r2, [r0, #0]
 8000794:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8000798:	4619      	mov	r1, r3
 800079a:	4790      	blx	r2
    }
 800079c:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007a2:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007a8:	f017 fa14 	bl	8017bd4 <__assert_func>
 80007ac:	2400ae02 	.word	0x2400ae02
 80007b0:	08018e94 	.word	0x08018e94
 80007b4:	08018ecc 	.word	0x08018ecc
 80007b8:	08018f1c 	.word	0x08018f1c

080007bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007bc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	428b      	cmp	r3, r1
 80007c4:	d808      	bhi.n	80007d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d804      	bhi.n	80007d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80007d0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80007d4:	801a      	strh	r2, [r3, #0]
    }
 80007d6:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80007dc:	219e      	movs	r1, #158	; 0x9e
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80007e0:	f017 f9f8 	bl	8017bd4 <__assert_func>
 80007e4:	2400adf8 	.word	0x2400adf8
 80007e8:	2400adfa 	.word	0x2400adfa
 80007ec:	2400adfe 	.word	0x2400adfe
 80007f0:	2400ae00 	.word	0x2400ae00
 80007f4:	08018f64 	.word	0x08018f64
 80007f8:	08018fc8 	.word	0x08018fc8
 80007fc:	08018f1c 	.word	0x08018f1c

08000800 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000800:	b510      	push	{r4, lr}
 8000802:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000804:	f00b f9e4 	bl	800bbd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800080e:	4620      	mov	r0, r4
 8000810:	4798      	blx	r3
    }
 8000812:	bd10      	pop	{r4, pc}

08000814 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000814:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000816:	f00a fc27 	bl	800b068 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800081a:	bd08      	pop	{r3, pc}

0800081c <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800081c:	b510      	push	{r4, lr}
 800081e:	4604      	mov	r4, r0
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000822:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <_ZN11TouchGFXHALD0Ev+0x20>)
 8000826:	6003      	str	r3, [r0, #0]
    {
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <_ZN11TouchGFXHALD0Ev+0x24>)
 800082a:	6003      	str	r3, [r0, #0]
 800082c:	217c      	movs	r1, #124	; 0x7c
 800082e:	f017 f9a2 	bl	8017b76 <_ZdlPvj>
 8000832:	4620      	mov	r0, r4
 8000834:	bd10      	pop	{r4, pc}
 8000836:	bf00      	nop
 8000838:	08019014 	.word	0x08019014
 800083c:	08019614 	.word	0x08019614
 8000840:	0801a04c 	.word	0x0801a04c

08000844 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000844:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000846:	2200      	movs	r2, #0
 8000848:	2101      	movs	r1, #1
 800084a:	4608      	mov	r0, r1
 800084c:	f007 fefe 	bl	800864c <osSemaphoreNew>
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000852:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000854:	b140      	cbz	r0, 8000868 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000856:	2200      	movs	r2, #0
 8000858:	2104      	movs	r1, #4
 800085a:	2001      	movs	r0, #1
 800085c:	f007 ffb5 	bl	80087ca <osMessageQueueNew>
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000862:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000864:	b130      	cbz	r0, 8000874 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 8000866:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800086c:	2128      	movs	r1, #40	; 0x28
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000870:	f017 f9b0 	bl	8017bd4 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000878:	212c      	movs	r1, #44	; 0x2c
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800087c:	f017 f9aa 	bl	8017bd4 <__assert_func>
 8000880:	24000140 	.word	0x24000140
 8000884:	2400013c 	.word	0x2400013c
 8000888:	080190e4 	.word	0x080190e4
 800088c:	08019130 	.word	0x08019130
 8000890:	08019160 	.word	0x08019160
 8000894:	080191c0 	.word	0x080191c0

08000898 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8000898:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800089a:	f04f 31ff 	mov.w	r1, #4294967295
 800089e:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f007 ff2f 	bl	8008704 <osSemaphoreAcquire>
}
 80008a6:	bd08      	pop	{r3, pc}
 80008a8:	24000140 	.word	0x24000140

080008ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008ac:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008ae:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f007 ff5b 	bl	800876c <osSemaphoreRelease>
}
 80008b6:	bd08      	pop	{r3, pc}
 80008b8:	24000140 	.word	0x24000140

080008bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008bc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	f007 ff1e 	bl	8008704 <osSemaphoreAcquire>
}
 80008c8:	bd08      	pop	{r3, pc}
 80008ca:	bf00      	nop
 80008cc:	24000140 	.word	0x24000140

080008d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80008d0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f007 ff49 	bl	800876c <osSemaphoreRelease>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000140 	.word	0x24000140

080008e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80008e0:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80008e2:	2300      	movs	r3, #0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4903      	ldr	r1, [pc, #12]	; (80008f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80008ea:	6800      	ldr	r0, [r0, #0]
 80008ec:	f007 ffb9 	bl	8008862 <osMessageQueuePut>
}
 80008f0:	bd08      	pop	{r3, pc}
 80008f2:	bf00      	nop
 80008f4:	24000004 	.word	0x24000004
 80008f8:	2400013c 	.word	0x2400013c

080008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000900:	4c07      	ldr	r4, [pc, #28]	; (8000920 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000902:	2300      	movs	r3, #0
 8000904:	461a      	mov	r2, r3
 8000906:	a901      	add	r1, sp, #4
 8000908:	6820      	ldr	r0, [r4, #0]
 800090a:	f007 ffea 	bl	80088e2 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	2200      	movs	r2, #0
 8000914:	a901      	add	r1, sp, #4
 8000916:	6820      	ldr	r0, [r4, #0]
 8000918:	f007 ffe3 	bl	80088e2 <osMessageQueueGet>
}
 800091c:	b002      	add	sp, #8
 800091e:	bd10      	pop	{r4, pc}
 8000920:	2400013c 	.word	0x2400013c

08000924 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000924:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 8000926:	6803      	ldr	r3, [r0, #0]
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4798      	blx	r3
    }
 800092c:	bd08      	pop	{r3, pc}

0800092e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800092e:	2001      	movs	r0, #1
 8000930:	4770      	bx	lr

08000932 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000932:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000934:	6803      	ldr	r3, [r0, #0]
 8000936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000938:	4798      	blx	r3
    }
 800093a:	bd08      	pop	{r3, pc}

0800093c <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800093c:	b508      	push	{r3, lr}
        return instance;
 800093e:	4b03      	ldr	r3, [pc, #12]	; (800094c <DMA2D_XferCpltCallback+0x10>)
 8000940:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000942:	6858      	ldr	r0, [r3, #4]
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800094a:	bd08      	pop	{r3, pc}
 800094c:	2400ae04 	.word	0x2400ae04

08000950 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000950:	4a08      	ldr	r2, [pc, #32]	; (8000974 <_ZN8STM32DMAD1Ev+0x24>)
 8000952:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <_ZN8STM32DMAD1Ev+0x28>)
 8000956:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800095a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800095e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000962:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_ZN8STM32DMAD1Ev+0x2c>)
 8000968:	60c2      	str	r2, [r0, #12]
    {
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <_ZN8STM32DMAD1Ev+0x30>)
 800096c:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_ZN8STM32DMAD1Ev+0x34>)
 8000970:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8000972:	4770      	bx	lr
 8000974:	080193a0 	.word	0x080193a0
 8000978:	e000e100 	.word	0xe000e100
 800097c:	0801a174 	.word	0x0801a174
 8000980:	0801937c 	.word	0x0801937c
 8000984:	0801a124 	.word	0x0801a124

08000988 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8000988:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <_ZN8STM32DMA10initializeEv+0x40>)
 800098c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8000990:	f042 0210 	orr.w	r2, r2, #16
 8000994:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8000998:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800099c:	f002 0210 	and.w	r2, r2, #16
 80009a0:	9201      	str	r2, [sp, #4]
 80009a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009a6:	f042 0210 	orr.w	r2, r2, #16
 80009aa:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009ae:	f022 0210 	bic.w	r2, r2, #16
 80009b2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <_ZN8STM32DMA10initializeEv+0x44>)
 80009b6:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <_ZN8STM32DMA10initializeEv+0x48>)
 80009b8:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c0:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009c2:	b002      	add	sp, #8
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	24001234 	.word	0x24001234
 80009d0:	0800093d 	.word	0x0800093d
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80009d8:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80009dc:	4770      	bx	lr

080009de <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80009de:	b510      	push	{r4, lr}
 80009e0:	4604      	mov	r4, r0
}
 80009e2:	f7ff ffb5 	bl	8000950 <_ZN8STM32DMAD1Ev>
 80009e6:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80009ea:	4620      	mov	r0, r4
 80009ec:	f017 f8c3 	bl	8017b76 <_ZdlPvj>
 80009f0:	4620      	mov	r0, r4
 80009f2:	bd10      	pop	{r4, pc}

080009f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80009f4:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80009f6:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 80009f8:	2b0a      	cmp	r3, #10
 80009fa:	d809      	bhi.n	8000a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 80009fc:	e8df f003 	tbb	[pc, r3]
 8000a00:	080e1006 	.word	0x080e1006
 8000a04:	10080808 	.word	0x10080808
 8000a08:	1010      	.short	0x1010
 8000a0a:	10          	.byte	0x10
 8000a0b:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a0c:	2002      	movs	r0, #2
        break;
 8000a0e:	e008      	b.n	8000a22 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a14:	2187      	movs	r1, #135	; 0x87
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a18:	f017 f8dc 	bl	8017bd4 <__assert_func>
    switch (format)
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	e000      	b.n	8000a22 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a20:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a24:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a26:	8aca      	ldrh	r2, [r1, #22]
 8000a28:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a2c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a32:	690a      	ldr	r2, [r1, #16]
 8000a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a36:	8b4a      	ldrh	r2, [r1, #26]
 8000a38:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a3c:	eba2 020c 	sub.w	r2, r2, ip
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a42:	680b      	ldr	r3, [r1, #0]
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d008      	beq.n	8000a5a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a4a:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a50:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a56:	601a      	str	r2, [r3, #0]
    }
}
 8000a58:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a5a:	8b4a      	ldrh	r2, [r1, #26]
 8000a5c:	8a8b      	ldrh	r3, [r1, #20]
 8000a5e:	1ad2      	subs	r2, r2, r3
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a62:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a64:	8b4a      	ldrh	r2, [r1, #26]
 8000a66:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a6a:	eba2 020c 	sub.w	r2, r2, ip
 8000a6e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000a70:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000a72:	7f08      	ldrb	r0, [r1, #28]
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000a76:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000a7a:	61da      	str	r2, [r3, #28]
 8000a7c:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000a7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a80:	690a      	ldr	r2, [r1, #16]
 8000a82:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a84:	690a      	ldr	r2, [r1, #16]
 8000a86:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	e7e4      	b.n	8000a58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000a8e:	bf00      	nop
 8000a90:	08019204 	.word	0x08019204
 8000a94:	08019220 	.word	0x08019220
 8000a98:	0801926c 	.word	0x0801926c
 8000a9c:	52001000 	.word	0x52001000
 8000aa0:	00030201 	.word	0x00030201
 8000aa4:	00010009 	.word	0x00010009
 8000aa8:	00020201 	.word	0x00020201

08000aac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000aac:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000aae:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ab0:	2b0b      	cmp	r3, #11
 8000ab2:	d815      	bhi.n	8000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ab4:	e8df f003 	tbb	[pc, r3]
 8000ab8:	141a1c06 	.word	0x141a1c06
 8000abc:	12141414 	.word	0x12141414
 8000ac0:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000ac4:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ac6:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000ac8:	2b0b      	cmp	r3, #11
 8000aca:	d820      	bhi.n	8000b0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000acc:	e8df f003 	tbb	[pc, r3]
 8000ad0:	1f252712 	.word	0x1f252712
 8000ad4:	1d1f1f1f 	.word	0x1d1f1f1f
 8000ad8:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000adc:	2005      	movs	r0, #5
        break;
 8000ade:	e7f2      	b.n	8000ac6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000ae0:	4b75      	ldr	r3, [pc, #468]	; (8000cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000ae2:	4a76      	ldr	r2, [pc, #472]	; (8000cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000ae4:	2166      	movs	r1, #102	; 0x66
 8000ae6:	4876      	ldr	r0, [pc, #472]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000ae8:	f017 f874 	bl	8017bd4 <__assert_func>
    switch (format)
 8000aec:	2000      	movs	r0, #0
 8000aee:	e7ea      	b.n	8000ac6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000af0:	2001      	movs	r0, #1
 8000af2:	e7e8      	b.n	8000ac6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af4:	2402      	movs	r4, #2
    switch (format)
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d815      	bhi.n	8000b26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000afa:	e8df f003 	tbb	[pc, r3]
 8000afe:	1c12      	.short	0x1c12
 8000b00:	1414141a 	.word	0x1414141a
 8000b04:	1c1c1c14 	.word	0x1c1c1c14
 8000b08:	1c          	.byte	0x1c
 8000b09:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b0a:	2405      	movs	r4, #5
        break;
 8000b0c:	e7f3      	b.n	8000af6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b0e:	4b6a      	ldr	r3, [pc, #424]	; (8000cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b10:	4a6a      	ldr	r2, [pc, #424]	; (8000cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b12:	2166      	movs	r1, #102	; 0x66
 8000b14:	486a      	ldr	r0, [pc, #424]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b16:	f017 f85d 	bl	8017bd4 <__assert_func>
    switch (format)
 8000b1a:	2400      	movs	r4, #0
 8000b1c:	e7eb      	b.n	8000af6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b1e:	2401      	movs	r4, #1
 8000b20:	e7e9      	b.n	8000af6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b22:	2502      	movs	r5, #2
        break;
 8000b24:	e008      	b.n	8000b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b26:	4b64      	ldr	r3, [pc, #400]	; (8000cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b28:	4a66      	ldr	r2, [pc, #408]	; (8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b2a:	2187      	movs	r1, #135	; 0x87
 8000b2c:	4864      	ldr	r0, [pc, #400]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b2e:	f017 f851 	bl	8017bd4 <__assert_func>
    switch (format)
 8000b32:	2500      	movs	r5, #0
 8000b34:	e000      	b.n	8000b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b36:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b38:	8b4a      	ldrh	r2, [r1, #26]
 8000b3a:	8a8b      	ldrh	r3, [r1, #20]
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4b62      	ldr	r3, [pc, #392]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b42:	8b4a      	ldrh	r2, [r1, #26]
 8000b44:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b48:	eba2 020c 	sub.w	r2, r2, ip
 8000b4c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b4e:	8b0a      	ldrh	r2, [r1, #24]
 8000b50:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b54:	eba2 020c 	sub.w	r2, r2, ip
 8000b58:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b5a:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b5c:	8aca      	ldrh	r2, [r1, #22]
 8000b5e:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b62:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b68:	690a      	ldr	r2, [r1, #16]
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000b6c:	684a      	ldr	r2, [r1, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000b70:	680b      	ldr	r3, [r1, #0]
 8000b72:	2b80      	cmp	r3, #128	; 0x80
 8000b74:	d036      	beq.n	8000be4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000b76:	d813      	bhi.n	8000ba0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000b78:	2b20      	cmp	r3, #32
 8000b7a:	d07c      	beq.n	8000c76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000b7c:	2b40      	cmp	r3, #64	; 0x40
 8000b7e:	d07a      	beq.n	8000c76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	f040 8085 	bne.w	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000b86:	7f0b      	ldrb	r3, [r1, #28]
 8000b88:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b8c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000b90:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b92:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000b94:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b96:	690a      	ldr	r2, [r1, #16]
 8000b98:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000b9a:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000b9c:	601a      	str	r2, [r3, #0]
        break;
 8000b9e:	e020      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba4:	d010      	beq.n	8000bc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000baa:	d171      	bne.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bac:	7f0b      	ldrb	r3, [r1, #28]
 8000bae:	4a48      	ldr	r2, [pc, #288]	; (8000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000bb0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bb4:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bb6:	61da      	str	r2, [r3, #28]
 8000bb8:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bba:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bbc:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bbe:	690a      	ldr	r2, [r1, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bc2:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bc4:	601a      	str	r2, [r3, #0]
        break;
 8000bc6:	e00c      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bc8:	7f0b      	ldrb	r3, [r1, #28]
 8000bca:	4a42      	ldr	r2, [pc, #264]	; (8000cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000bcc:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bd6:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bd8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bda:	690a      	ldr	r2, [r1, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bde:	4a3b      	ldr	r2, [pc, #236]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000be0:	601a      	str	r2, [r3, #0]
}
 8000be2:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000be4:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be6:	7f0b      	ldrb	r3, [r1, #28]
 8000be8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bec:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bf2:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf4:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf6:	6908      	ldr	r0, [r1, #16]
 8000bf8:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000bfa:	1d10      	adds	r0, r2, #4
 8000bfc:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000bfe:	7813      	ldrb	r3, [r2, #0]
 8000c00:	b18b      	cbz	r3, 8000c26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d12c      	bne.n	8000c60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c06:	7f0b      	ldrb	r3, [r1, #28]
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	d027      	beq.n	8000c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c0c:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c0e:	482e      	ldr	r0, [pc, #184]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c10:	69c4      	ldr	r4, [r0, #28]
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c14:	4023      	ands	r3, r4
 8000c16:	8852      	ldrh	r2, [r2, #2]
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	61c3      	str	r3, [r0, #28]
                break;
 8000c24:	e009      	b.n	8000c3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c26:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c28:	69c8      	ldr	r0, [r1, #28]
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c2c:	4003      	ands	r3, r0
 8000c2e:	8852      	ldrh	r2, [r2, #2]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c36:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c38:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c3c:	69d3      	ldr	r3, [r2, #28]
 8000c3e:	f043 0320 	orr.w	r3, r3, #32
 8000c42:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	f013 0f20 	tst.w	r3, #32
 8000c4c:	d1fa      	bne.n	8000c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c50:	2210      	movs	r2, #16
 8000c52:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c54:	b159      	cbz	r1, 8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c56:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e7c2      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e7d6      	b.n	8000c0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c64:	f240 1101 	movw	r1, #257	; 0x101
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c6a:	f016 ffb3 	bl	8017bd4 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e7b5      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c76:	7f0b      	ldrb	r3, [r1, #28]
 8000c78:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c7c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c82:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c84:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c86:	690a      	ldr	r2, [r1, #16]
 8000c88:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
        break;
 8000c8e:	e7a8      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c90:	7f0b      	ldrb	r3, [r1, #28]
 8000c92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c96:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c9c:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000c9e:	7f4a      	ldrb	r2, [r1, #29]
 8000ca0:	7f8b      	ldrb	r3, [r1, #30]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d003      	beq.n	8000cae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e799      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb0:	f240 2201 	movw	r2, #513	; 0x201
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	e794      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cb8:	08019204 	.word	0x08019204
 8000cbc:	080192cc 	.word	0x080192cc
 8000cc0:	0801926c 	.word	0x0801926c
 8000cc4:	08019220 	.word	0x08019220
 8000cc8:	52001000 	.word	0x52001000
 8000ccc:	00020201 	.word	0x00020201
 8000cd0:	00020009 	.word	0x00020009
 8000cd4:	0002000a 	.word	0x0002000a
 8000cd8:	ffff00ef 	.word	0xffff00ef
 8000cdc:	08019318 	.word	0x08019318
 8000ce0:	08019334 	.word	0x08019334
 8000ce4:	00010201 	.word	0x00010201

08000ce8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <_ZN8STM32DMAC1Ev+0x38>)
 8000cee:	f840 3b0c 	str.w	r3, [r0], #12
 8000cf2:	6068      	str	r0, [r5, #4]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	722b      	strb	r3, [r5, #8]
 8000cf8:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000cfa:	462c      	mov	r4, r5
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <_ZN8STM32DMAC1Ev+0x3c>)
 8000cfe:	f844 3b20 	str.w	r3, [r4], #32
 8000d02:	2260      	movs	r2, #96	; 0x60
 8000d04:	4621      	mov	r1, r4
 8000d06:	f00b f8a5 	bl	800be54 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d0a:	235f      	movs	r3, #95	; 0x5f
 8000d0c:	e003      	b.n	8000d16 <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60e2      	str	r2, [r4, #12]
 8000d12:	3424      	adds	r4, #36	; 0x24
 8000d14:	3b01      	subs	r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	daf9      	bge.n	8000d0e <_ZN8STM32DMAC1Ev+0x26>
}
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	bf00      	nop
 8000d20:	0801a124 	.word	0x0801a124
 8000d24:	080193a0 	.word	0x080193a0

08000d28 <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d2a:	6003      	str	r3, [r0, #0]
    }
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	08019404 	.word	0x08019404

08000d34 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d34:	4770      	bx	lr

08000d36 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d36:	4770      	bx	lr

08000d38 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d38:	4770      	bx	lr

08000d3a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d3a:	4770      	bx	lr

08000d3c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d3c:	4770      	bx	lr

08000d3e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d3e:	4770      	bx	lr

08000d40 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d40:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d42:	6003      	str	r3, [r0, #0]
    }
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	08019414 	.word	0x08019414

08000d4c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d4c:	4770      	bx	lr

08000d4e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d4e:	4770      	bx	lr

08000d50 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d50:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d54:	6808      	ldr	r0, [r1, #0]
 8000d56:	6849      	ldr	r1, [r1, #4]
 8000d58:	c303      	stmia	r3!, {r0, r1}
    }
 8000d5a:	4770      	bx	lr

08000d5c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000d60:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000d64:	b158      	cbz	r0, 8000d7e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000d66:	6803      	ldr	r3, [r0, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4798      	blx	r3
 8000d6c:	b138      	cbz	r0, 8000d7e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000d6e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000d72:	6803      	ldr	r3, [r0, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000d82:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000d86:	6002      	str	r2, [r0, #0]
    {
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000d8a:	6002      	str	r2, [r0, #0]
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	08019454 	.word	0x08019454
 8000d94:	0801a2c4 	.word	0x0801a2c4
 8000d98:	08019414 	.word	0x08019414

08000d9c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000d9e:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000da2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000da8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dae:	6002      	str	r2, [r0, #0]
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000db2:	6002      	str	r2, [r0, #0]
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000db6:	6002      	str	r2, [r0, #0]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	080194b8 	.word	0x080194b8
 8000dc0:	080194a0 	.word	0x080194a0
 8000dc4:	0801943c 	.word	0x0801943c
 8000dc8:	08019454 	.word	0x08019454
 8000dcc:	0801a2c4 	.word	0x0801a2c4
 8000dd0:	08019414 	.word	0x08019414

08000dd4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <_ZN19FrontendApplicationD1Ev+0x24>)
 8000dd6:	6002      	str	r2, [r0, #0]
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <_ZN19FrontendApplicationD1Ev+0x28>)
 8000dda:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000dde:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000de4:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <_ZN19FrontendApplicationD1Ev+0x34>)
 8000dea:	6002      	str	r2, [r0, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <_ZN19FrontendApplicationD1Ev+0x38>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	08019504 	.word	0x08019504
 8000dfc:	080194b8 	.word	0x080194b8
 8000e00:	080194a0 	.word	0x080194a0
 8000e04:	0801943c 	.word	0x0801943c
 8000e08:	08019454 	.word	0x08019454
 8000e0c:	0801a2c4 	.word	0x0801a2c4
 8000e10:	08019414 	.word	0x08019414

08000e14 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e14:	4a02      	ldr	r2, [pc, #8]	; (8000e20 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e16:	6002      	str	r2, [r0, #0]
    {
 8000e18:	4a02      	ldr	r2, [pc, #8]	; (8000e24 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e1a:	6002      	str	r2, [r0, #0]
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	08019550 	.word	0x08019550
 8000e24:	08019404 	.word	0x08019404

08000e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e28:	4a02      	ldr	r2, [pc, #8]	; (8000e34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e2a:	6002      	str	r2, [r0, #0]
    {
 8000e2c:	4a02      	ldr	r2, [pc, #8]	; (8000e38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e2e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	080194a0 	.word	0x080194a0
 8000e38:	0801943c 	.word	0x0801943c

08000e3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4770      	bx	lr

08000e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e40:	200c      	movs	r0, #12
 8000e42:	4770      	bx	lr

08000e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e48:	0089      	lsls	r1, r1, #2
 8000e4a:	3108      	adds	r1, #8
    }
 8000e4c:	4408      	add	r0, r1
 8000e4e:	4770      	bx	lr

08000e50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e54:	0089      	lsls	r1, r1, #2
 8000e56:	3108      	adds	r1, #8
    }
 8000e58:	4408      	add	r0, r1
 8000e5a:	4770      	bx	lr

08000e5c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	4770      	bx	lr

08000e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e60:	2098      	movs	r0, #152	; 0x98
 8000e62:	4770      	bx	lr

08000e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e64:	2398      	movs	r3, #152	; 0x98
 8000e66:	fb03 f101 	mul.w	r1, r3, r1
 8000e6a:	3108      	adds	r1, #8
    }
 8000e6c:	4408      	add	r0, r1
 8000e6e:	4770      	bx	lr

08000e70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e70:	2398      	movs	r3, #152	; 0x98
 8000e72:	fb03 f101 	mul.w	r1, r3, r1
 8000e76:	3108      	adds	r1, #8
    }
 8000e78:	4408      	add	r0, r1
 8000e7a:	4770      	bx	lr

08000e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e80:	2010      	movs	r0, #16
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e84:	0109      	lsls	r1, r1, #4
 8000e86:	3108      	adds	r1, #8
    }
 8000e88:	4408      	add	r0, r1
 8000e8a:	4770      	bx	lr

08000e8c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e8c:	0109      	lsls	r1, r1, #4
 8000e8e:	3108      	adds	r1, #8
    }
 8000e90:	4408      	add	r0, r1
 8000e92:	4770      	bx	lr

08000e94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000e94:	b508      	push	{r3, lr}
 8000e96:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000e98:	6841      	ldr	r1, [r0, #4]
 8000e9a:	68c2      	ldr	r2, [r0, #12]
 8000e9c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ea0:	f012 0f01 	tst.w	r2, #1
 8000ea4:	d102      	bne.n	8000eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4798      	blx	r3
    }
 8000eaa:	bd08      	pop	{r3, pc}
 8000eac:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000eb0:	f851 200c 	ldr.w	r2, [r1, ip]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	58d3      	ldr	r3, [r2, r3]
 8000eb8:	e7f6      	b.n	8000ea8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000eba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000eba:	6843      	ldr	r3, [r0, #4]
 8000ebc:	b14b      	cbz	r3, 8000ed2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000ebe:	6883      	ldr	r3, [r0, #8]
 8000ec0:	b10b      	cbz	r3, 8000ec6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4770      	bx	lr
 8000ec6:	68c3      	ldr	r3, [r0, #12]
 8000ec8:	f013 0f01 	tst.w	r3, #1
 8000ecc:	d003      	beq.n	8000ed6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4770      	bx	lr
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	4770      	bx	lr
 8000ed6:	2000      	movs	r0, #0
    }
 8000ed8:	4770      	bx	lr
	...

08000edc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000edc:	b510      	push	{r4, lr}
 8000ede:	4604      	mov	r4, r0
    {
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000ee2:	6003      	str	r3, [r0, #0]
    }
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	f016 fe46 	bl	8017b76 <_ZdlPvj>
 8000eea:	4620      	mov	r0, r4
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	bf00      	nop
 8000ef0:	08019414 	.word	0x08019414

08000ef4 <_ZN16FrontendHeapBaseD0Ev>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000efa:	6003      	str	r3, [r0, #0]
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000efe:	6003      	str	r3, [r0, #0]
 8000f00:	2114      	movs	r1, #20
 8000f02:	f016 fe38 	bl	8017b76 <_ZdlPvj>
 8000f06:	4620      	mov	r0, r4
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08019550 	.word	0x08019550
 8000f10:	08019404 	.word	0x08019404

08000f14 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f14:	b510      	push	{r4, lr}
 8000f16:	4604      	mov	r4, r0
    {
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f1a:	6003      	str	r3, [r0, #0]
    }
 8000f1c:	2114      	movs	r1, #20
 8000f1e:	f016 fe2a 	bl	8017b76 <_ZdlPvj>
 8000f22:	4620      	mov	r0, r4
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	bf00      	nop
 8000f28:	08019404 	.word	0x08019404

08000f2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f2c:	b510      	push	{r4, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f32:	6003      	str	r3, [r0, #0]
    {
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f36:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f38:	2110      	movs	r1, #16
 8000f3a:	f016 fe1c 	bl	8017b76 <_ZdlPvj>
 8000f3e:	4620      	mov	r0, r4
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	bf00      	nop
 8000f44:	080194a0 	.word	0x080194a0
 8000f48:	0801943c 	.word	0x0801943c

08000f4c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000f52:	6003      	str	r3, [r0, #0]
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000f56:	6003      	str	r3, [r0, #0]
    {
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000f5a:	6003      	str	r3, [r0, #0]
 8000f5c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f60:	f016 fe09 	bl	8017b76 <_ZdlPvj>
 8000f64:	4620      	mov	r0, r4
 8000f66:	bd10      	pop	{r4, pc}
 8000f68:	08019454 	.word	0x08019454
 8000f6c:	0801a2c4 	.word	0x0801a2c4
 8000f70:	08019414 	.word	0x08019414

08000f74 <_ZN23FrontendApplicationBaseD0Ev>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	4604      	mov	r4, r0
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000f7a:	6003      	str	r3, [r0, #0]
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000f7e:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000f84:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000f8a:	6003      	str	r3, [r0, #0]
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000f8e:	6003      	str	r3, [r0, #0]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000f92:	6003      	str	r3, [r0, #0]
 8000f94:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000f98:	f016 fded 	bl	8017b76 <_ZdlPvj>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	bd10      	pop	{r4, pc}
 8000fa0:	080194b8 	.word	0x080194b8
 8000fa4:	080194a0 	.word	0x080194a0
 8000fa8:	0801943c 	.word	0x0801943c
 8000fac:	08019454 	.word	0x08019454
 8000fb0:	0801a2c4 	.word	0x0801a2c4
 8000fb4:	08019414 	.word	0x08019414

08000fb8 <_ZN19FrontendApplicationD0Ev>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <_ZN19FrontendApplicationD0Ev+0x30>)
 8000fbe:	6003      	str	r3, [r0, #0]
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <_ZN19FrontendApplicationD0Ev+0x34>)
 8000fc2:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <_ZN19FrontendApplicationD0Ev+0x38>)
 8000fc6:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8000fcc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <_ZN19FrontendApplicationD0Ev+0x40>)
 8000fd2:	6003      	str	r3, [r0, #0]
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN19FrontendApplicationD0Ev+0x44>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN19FrontendApplicationD0Ev+0x48>)
 8000fda:	6003      	str	r3, [r0, #0]
 8000fdc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000fe0:	f016 fdc9 	bl	8017b76 <_ZdlPvj>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd10      	pop	{r4, pc}
 8000fe8:	08019504 	.word	0x08019504
 8000fec:	080194b8 	.word	0x080194b8
 8000ff0:	080194a0 	.word	0x080194a0
 8000ff4:	0801943c 	.word	0x0801943c
 8000ff8:	08019454 	.word	0x08019454
 8000ffc:	0801a2c4 	.word	0x0801a2c4
 8001000:	08019414 	.word	0x08019414

08001004 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001004:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 8001006:	4608      	mov	r0, r1
 8001008:	f001 fa24 	bl	8002454 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 800100c:	bd08      	pop	{r3, pc}

0800100e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800100e:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 8001010:	f001 fa20 	bl	8002454 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001014:	bd08      	pop	{r3, pc}

08001016 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001016:	b510      	push	{r4, lr}
 8001018:	4604      	mov	r4, r0
    {
        model.tick();
 800101a:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800101e:	f001 fea6 	bl	8002d6e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001022:	4620      	mov	r0, r4
 8001024:	f00b ff30 	bl	800ce88 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001028:	bd10      	pop	{r4, pc}
	...

0800102c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001032:	6003      	str	r3, [r0, #0]
 8001034:	f009 fd62 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001038:	4620      	mov	r0, r4
 800103a:	bd10      	pop	{r4, pc}
 800103c:	080195cc 	.word	0x080195cc

08001040 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001040:	b510      	push	{r4, lr}
 8001042:	4604      	mov	r4, r0
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001046:	6003      	str	r3, [r0, #0]
 8001048:	f009 fd58 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800104c:	2114      	movs	r1, #20
 800104e:	4620      	mov	r0, r4
 8001050:	f016 fd91 	bl	8017b76 <_ZdlPvj>
 8001054:	4620      	mov	r0, r4
 8001056:	bd10      	pop	{r4, pc}
 8001058:	080195cc 	.word	0x080195cc

0800105c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800105c:	b510      	push	{r4, lr}
 800105e:	4604      	mov	r4, r0
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001062:	6003      	str	r3, [r0, #0]
 8001064:	f009 fd4a 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001068:	4620      	mov	r0, r4
 800106a:	bd10      	pop	{r4, pc}
 800106c:	08019598 	.word	0x08019598

08001070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001070:	b510      	push	{r4, lr}
 8001072:	4604      	mov	r4, r0
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001076:	6003      	str	r3, [r0, #0]
 8001078:	f009 fd40 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800107c:	21a0      	movs	r1, #160	; 0xa0
 800107e:	4620      	mov	r0, r4
 8001080:	f016 fd79 	bl	8017b76 <_ZdlPvj>
 8001084:	4620      	mov	r0, r4
 8001086:	bd10      	pop	{r4, pc}
 8001088:	08019598 	.word	0x08019598

0800108c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800108c:	b510      	push	{r4, lr}
 800108e:	4604      	mov	r4, r0
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001092:	6003      	str	r3, [r0, #0]
 8001094:	f009 fd32 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001098:	4620      	mov	r0, r4
 800109a:	bd10      	pop	{r4, pc}
 800109c:	08019564 	.word	0x08019564

080010a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010a0:	b510      	push	{r4, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010a6:	6003      	str	r3, [r0, #0]
 80010a8:	f009 fd28 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010ac:	2118      	movs	r1, #24
 80010ae:	4620      	mov	r0, r4
 80010b0:	f016 fd61 	bl	8017b76 <_ZdlPvj>
 80010b4:	4620      	mov	r0, r4
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	08019564 	.word	0x08019564

080010bc <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80010bc:	b510      	push	{r4, lr}
 80010be:	4604      	mov	r4, r0
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <_ZN12FrontendHeapD1Ev+0x60>)
 80010c2:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <_ZN12FrontendHeapD1Ev+0x64>)
 80010c6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    virtual ~FrontendApplicationBase() { }
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <_ZN12FrontendHeapD1Ev+0x68>)
 80010cc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_ZN12FrontendHeapD1Ev+0x6c>)
 80010d2:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_ZN12FrontendHeapD1Ev+0x70>)
 80010d8:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <_ZN12FrontendHeapD1Ev+0x74>)
 80010de:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <_ZN12FrontendHeapD1Ev+0x78>)
 80010e4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_ZN12FrontendHeapD1Ev+0x7c>)
 80010ea:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <_ZN12FrontendHeapD1Ev+0x80>)
 80010f0:	f840 3fcc 	str.w	r3, [r0, #204]!
 80010f4:	f009 fd02 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010f8:	4620      	mov	r0, r4
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_ZN12FrontendHeapD1Ev+0x84>)
 80010fc:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001100:	f009 fcfc 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001104:	4620      	mov	r0, r4
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <_ZN12FrontendHeapD1Ev+0x88>)
 8001108:	f840 3f14 	str.w	r3, [r0, #20]!
 800110c:	f009 fcf6 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <_ZN12FrontendHeapD1Ev+0x8c>)
 8001112:	6023      	str	r3, [r4, #0]
    {
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <_ZN12FrontendHeapD1Ev+0x90>)
 8001116:	6023      	str	r3, [r4, #0]
 8001118:	4620      	mov	r0, r4
 800111a:	bd10      	pop	{r4, pc}
 800111c:	08019600 	.word	0x08019600
 8001120:	08019504 	.word	0x08019504
 8001124:	080194b8 	.word	0x080194b8
 8001128:	080194a0 	.word	0x080194a0
 800112c:	0801943c 	.word	0x0801943c
 8001130:	08019454 	.word	0x08019454
 8001134:	0801a2c4 	.word	0x0801a2c4
 8001138:	08019414 	.word	0x08019414
 800113c:	080195cc 	.word	0x080195cc
 8001140:	08019598 	.word	0x08019598
 8001144:	08019564 	.word	0x08019564
 8001148:	08019550 	.word	0x08019550
 800114c:	08019404 	.word	0x08019404

08001150 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001150:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 8001152:	4c17      	ldr	r4, [pc, #92]	; (80011b0 <__tcf_0+0x60>)
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <__tcf_0+0x64>)
 8001156:	6023      	str	r3, [r4, #0]
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <__tcf_0+0x68>)
 800115a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <__tcf_0+0x6c>)
 8001160:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <__tcf_0+0x70>)
 8001166:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    {
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <__tcf_0+0x74>)
 800116c:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <__tcf_0+0x78>)
 8001172:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <__tcf_0+0x7c>)
 8001178:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <__tcf_0+0x80>)
 800117e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001182:	4620      	mov	r0, r4
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <__tcf_0+0x84>)
 8001186:	f840 3fcc 	str.w	r3, [r0, #204]!
 800118a:	f009 fcb7 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800118e:	4620      	mov	r0, r4
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <__tcf_0+0x88>)
 8001192:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001196:	f009 fcb1 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800119a:	4620      	mov	r0, r4
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <__tcf_0+0x8c>)
 800119e:	f840 3f14 	str.w	r3, [r0, #20]!
 80011a2:	f009 fcab 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <__tcf_0+0x90>)
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <__tcf_0+0x94>)
 80011ac:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 80011ae:	bd10      	pop	{r4, pc}
 80011b0:	24000148 	.word	0x24000148
 80011b4:	08019600 	.word	0x08019600
 80011b8:	08019504 	.word	0x08019504
 80011bc:	080194b8 	.word	0x080194b8
 80011c0:	080194a0 	.word	0x080194a0
 80011c4:	0801943c 	.word	0x0801943c
 80011c8:	08019454 	.word	0x08019454
 80011cc:	0801a2c4 	.word	0x0801a2c4
 80011d0:	08019414 	.word	0x08019414
 80011d4:	080195cc 	.word	0x080195cc
 80011d8:	08019598 	.word	0x08019598
 80011dc:	08019564 	.word	0x08019564
 80011e0:	08019550 	.word	0x08019550
 80011e4:	08019404 	.word	0x08019404

080011e8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80011e8:	b510      	push	{r4, lr}
 80011ea:	4604      	mov	r4, r0
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <_ZN12FrontendHeapD0Ev+0x6c>)
 80011ee:	6003      	str	r3, [r0, #0]
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <_ZN12FrontendHeapD0Ev+0x70>)
 80011f2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <_ZN12FrontendHeapD0Ev+0x74>)
 80011f8:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <_ZN12FrontendHeapD0Ev+0x78>)
 80011fe:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001204:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <_ZN12FrontendHeapD0Ev+0x80>)
 800120a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <_ZN12FrontendHeapD0Ev+0x84>)
 8001210:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <_ZN12FrontendHeapD0Ev+0x88>)
 8001216:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <_ZN12FrontendHeapD0Ev+0x8c>)
 800121c:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001220:	f009 fc6c 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001224:	4620      	mov	r0, r4
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <_ZN12FrontendHeapD0Ev+0x90>)
 8001228:	f840 3f2c 	str.w	r3, [r0, #44]!
 800122c:	f009 fc66 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001230:	4620      	mov	r0, r4
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <_ZN12FrontendHeapD0Ev+0x94>)
 8001234:	f840 3f14 	str.w	r3, [r0, #20]!
 8001238:	f009 fc60 	bl	800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_ZN12FrontendHeapD0Ev+0x98>)
 800123e:	6023      	str	r3, [r4, #0]
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_ZN12FrontendHeapD0Ev+0x9c>)
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8001248:	4620      	mov	r0, r4
 800124a:	f016 fc94 	bl	8017b76 <_ZdlPvj>
 800124e:	4620      	mov	r0, r4
 8001250:	bd10      	pop	{r4, pc}
 8001252:	bf00      	nop
 8001254:	08019600 	.word	0x08019600
 8001258:	08019504 	.word	0x08019504
 800125c:	080194b8 	.word	0x080194b8
 8001260:	080194a0 	.word	0x080194a0
 8001264:	0801943c 	.word	0x0801943c
 8001268:	08019454 	.word	0x08019454
 800126c:	0801a2c4 	.word	0x0801a2c4
 8001270:	08019414 	.word	0x08019414
 8001274:	080195cc 	.word	0x080195cc
 8001278:	08019598 	.word	0x08019598
 800127c:	08019564 	.word	0x08019564
 8001280:	08019550 	.word	0x08019550
 8001284:	08019404 	.word	0x08019404

08001288 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800128c:	f001 f840 	bl	8002310 <_ZN14BitmapDatabase11getInstanceEv>
 8001290:	4605      	mov	r5, r0
 8001292:	f001 f841 	bl	8002318 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001296:	4601      	mov	r1, r0
 8001298:	2400      	movs	r4, #0
 800129a:	9400      	str	r4, [sp, #0]
 800129c:	4623      	mov	r3, r4
 800129e:	4622      	mov	r2, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	f00e fb79 	bl	800f998 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <touchgfx_init+0xc0>)
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <touchgfx_init+0xc4>)
 80012aa:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80012ac:	4620      	mov	r0, r4
 80012ae:	f001 fb93 	bl	80029d8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80012b2:	4827      	ldr	r0, [pc, #156]	; (8001350 <touchgfx_init+0xc8>)
 80012b4:	f00e fa28 	bl	800f708 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <touchgfx_init+0xcc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f3bf 8f5b 	dmb	ish
 80012c0:	f013 0f01 	tst.w	r3, #1
 80012c4:	d004      	beq.n	80012d0 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80012c6:	4824      	ldr	r0, [pc, #144]	; (8001358 <touchgfx_init+0xd0>)
 80012c8:	f7ff f9ea 	bl	80006a0 <_ZN11TouchGFXHAL10initializeEv>
}
 80012cc:	b003      	add	sp, #12
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d0:	4820      	ldr	r0, [pc, #128]	; (8001354 <touchgfx_init+0xcc>)
 80012d2:	f016 fc52 	bl	8017b7a <__cxa_guard_acquire>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d0f5      	beq.n	80012c6 <touchgfx_init+0x3e>
          frontendApplication(app)
 80012da:	4c20      	ldr	r4, [pc, #128]	; (800135c <touchgfx_init+0xd4>)
 80012dc:	4620      	mov	r0, r4
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <touchgfx_init+0xd8>)
 80012e0:	f840 3b14 	str.w	r3, [r0], #20
 80012e4:	6060      	str	r0, [r4, #4]
 80012e6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80012ea:	60a7      	str	r7, [r4, #8]
 80012ec:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
 80012f0:	60e6      	str	r6, [r4, #12]
 80012f2:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
 80012f6:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <touchgfx_init+0xdc>)
 80012fa:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <touchgfx_init+0xe0>)
 80012fe:	6023      	str	r3, [r4, #0]
 8001300:	f009 fbfe 	bl	800ab00 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <touchgfx_init+0xe4>)
 8001306:	6163      	str	r3, [r4, #20]
 8001308:	4638      	mov	r0, r7
 800130a:	f009 fbf9 	bl	800ab00 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <touchgfx_init+0xe8>)
 8001310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001312:	4630      	mov	r0, r6
 8001314:	f009 fbf4 	bl	800ab00 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <touchgfx_init+0xec>)
 800131a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 800131e:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8001322:	4630      	mov	r0, r6
 8001324:	f001 fd20 	bl	8002d68 <_ZN5ModelC1Ev>
 8001328:	4622      	mov	r2, r4
 800132a:	4631      	mov	r1, r6
 800132c:	4628      	mov	r0, r5
 800132e:	f001 fd11 	bl	8002d54 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 8001332:	4628      	mov	r0, r5
 8001334:	f001 f88e 	bl	8002454 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <touchgfx_init+0xf0>)
 800133a:	f016 fc69 	bl	8017c10 <atexit>
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <touchgfx_init+0xcc>)
 8001340:	f016 fc27 	bl	8017b92 <__cxa_guard_release>
 8001344:	e7bf      	b.n	80012c6 <touchgfx_init+0x3e>
 8001346:	bf00      	nop
 8001348:	2400ae60 	.word	0x2400ae60
 800134c:	240011a4 	.word	0x240011a4
 8001350:	24000008 	.word	0x24000008
 8001354:	24000144 	.word	0x24000144
 8001358:	24001128 	.word	0x24001128
 800135c:	24000148 	.word	0x24000148
 8001360:	08019404 	.word	0x08019404
 8001364:	08019550 	.word	0x08019550
 8001368:	08019600 	.word	0x08019600
 800136c:	08019564 	.word	0x08019564
 8001370:	08019598 	.word	0x08019598
 8001374:	080195cc 	.word	0x080195cc
 8001378:	08001151 	.word	0x08001151

0800137c <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 800137c:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800137e:	4802      	ldr	r0, [pc, #8]	; (8001388 <touchgfx_taskEntry+0xc>)
 8001380:	f7ff f992 	bl	80006a8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8001384:	bd08      	pop	{r3, pc}
 8001386:	bf00      	nop
 8001388:	24001128 	.word	0x24001128

0800138c <_Z41__static_initialization_and_destruction_0ii>:
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001390:	4604      	mov	r4, r0
 8001392:	460d      	mov	r5, r1
 8001394:	2801      	cmp	r0, #1
 8001396:	d006      	beq.n	80013a6 <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8001398:	b91c      	cbnz	r4, 80013a2 <_Z41__static_initialization_and_destruction_0ii+0x16>
 800139a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139e:	429d      	cmp	r5, r3
 80013a0:	d076      	beq.n	8001490 <_Z41__static_initialization_and_destruction_0ii+0x104>
}
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013aa:	4299      	cmp	r1, r3
 80013ac:	d1f4      	bne.n	8001398 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchController
 80013ae:	4e45      	ldr	r6, [pc, #276]	; (80014c4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80013b2:	6033      	str	r3, [r6, #0]
{
public:

    STM32TouchController() {}
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80013b6:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80013b8:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001510 <_Z41__static_initialization_and_destruction_0ii+0x184>
 80013bc:	4640      	mov	r0, r8
 80013be:	f7ff fc93 	bl	8000ce8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80013c2:	4f43      	ldr	r7, [pc, #268]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80013c4:	4638      	mov	r0, r7
 80013c6:	f010 fd01 	bl	8011dcc <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f8c3 8004 	str.w	r8, [r3, #4]
 80013d4:	609f      	str	r7, [r3, #8]
 80013d6:	60de      	str	r6, [r3, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80013e0:	839a      	strh	r2, [r3, #28]
 80013e2:	83da      	strh	r2, [r3, #30]
 80013e4:	841a      	strh	r2, [r3, #32]
 80013e6:	845a      	strh	r2, [r3, #34]	; 0x22
 80013e8:	849a      	strh	r2, [r3, #36]	; 0x24
 80013ea:	84da      	strh	r2, [r3, #38]	; 0x26
 80013ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80013ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f4:	861a      	strh	r2, [r3, #48]	; 0x30
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
 8001402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001406:	2101      	movs	r1, #1
 8001408:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
 800140c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001410:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001414:	64da      	str	r2, [r3, #76]	; 0x4c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001416:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800141a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800141e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001422:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8001426:	659a      	str	r2, [r3, #88]	; 0x58
 8001428:	65da      	str	r2, [r3, #92]	; 0x5c
 800142a:	661a      	str	r2, [r3, #96]	; 0x60
 800142c:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8001430:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001434:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001438:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 800143c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001440:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001444:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001448:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800144c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001450:	671a      	str	r2, [r3, #112]	; 0x70
 8001452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001456:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800145a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800145e:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
 8001462:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8001466:	491d      	ldr	r1, [pc, #116]	; (80014dc <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001468:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800146a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800146e:	481c      	ldr	r0, [pc, #112]	; (80014e0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001470:	8001      	strh	r1, [r0, #0]
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001474:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001476:	f44f 7188 	mov.w	r1, #272	; 0x110
 800147a:	481b      	ldr	r0, [pc, #108]	; (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800147c:	8001      	strh	r1, [r0, #0]
 800147e:	481b      	ldr	r0, [pc, #108]	; (80014ec <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8001480:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001482:	491b      	ldr	r1, [pc, #108]	; (80014f0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8001484:	700a      	strb	r2, [r1, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8001486:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8001488:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800148c:	601a      	str	r2, [r3, #0]
    }
 800148e:	e783      	b.n	8001398 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8001494:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8001498:	601a      	str	r2, [r3, #0]
    {
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800149c:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80014a2:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80014a6:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80014ac:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80014b0:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 80014b2:	4817      	ldr	r0, [pc, #92]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80014b4:	f7ff fa4c 	bl	8000950 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80014bc:	601a      	str	r2, [r3, #0]
    {
 80014be:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	e76e      	b.n	80013a2 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80014c4:	24000384 	.word	0x24000384
 80014c8:	08018e6c 	.word	0x08018e6c
 80014cc:	08018e84 	.word	0x08018e84
 80014d0:	240011a8 	.word	0x240011a8
 80014d4:	24001128 	.word	0x24001128
 80014d8:	0801a04c 	.word	0x0801a04c
 80014dc:	2400ae04 	.word	0x2400ae04
 80014e0:	2400adf8 	.word	0x2400adf8
 80014e4:	2400adfe 	.word	0x2400adfe
 80014e8:	2400adfa 	.word	0x2400adfa
 80014ec:	2400ae00 	.word	0x2400ae00
 80014f0:	2400adfc 	.word	0x2400adfc
 80014f4:	08019614 	.word	0x08019614
 80014f8:	08019014 	.word	0x08019014
 80014fc:	24000008 	.word	0x24000008
 8001500:	0801974c 	.word	0x0801974c
 8001504:	080193f0 	.word	0x080193f0
 8001508:	0801a5d0 	.word	0x0801a5d0
 800150c:	0801a26c 	.word	0x0801a26c
 8001510:	24000388 	.word	0x24000388

08001514 <_GLOBAL__sub_I_touchgfx_init>:
 8001514:	b508      	push	{r3, lr}
 8001516:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff ff36 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 8001520:	bd08      	pop	{r3, pc}

08001522 <_GLOBAL__sub_D_touchgfx_init>:
 8001522:	b508      	push	{r3, lr}
 8001524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ff2f 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 800152e:	bd08      	pop	{r3, pc}

08001530 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001532:	2290      	movs	r2, #144	; 0x90
 8001534:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8001538:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8001546:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001550:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800155a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800155e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800156e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001572:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001576:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001582:	68d3      	ldr	r3, [r2, #12]
 8001584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001588:	3b01      	subs	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800158e:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001590:	6911      	ldr	r1, [r2, #16]
 8001592:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001596:	3901      	subs	r1, #1
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 800159a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800159e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80015a6:	4770      	bx	lr
 80015a8:	50001000 	.word	0x50001000
 80015ac:	24001204 	.word	0x24001204
 80015b0:	24001202 	.word	0x24001202

080015b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80015b6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 80015ba:	4770      	bx	lr
 80015bc:	50001000 	.word	0x50001000

080015c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80015c2:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80015c6:	2201      	movs	r2, #1
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015ca:	4770      	bx	lr
 80015cc:	50001000 	.word	0x50001000

080015d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015d8:	d025      	beq.n	8001626 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 80015da:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015e4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80015e8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015ec:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80015f0:	e000      	b.n	80015f4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 80015f2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015f4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80015f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015fc:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001600:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001604:	4908      	ldr	r1, [pc, #32]	; (8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001606:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800160a:	4613      	mov	r3, r2
 800160c:	3a01      	subs	r2, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f2      	bne.n	80015f8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001612:	1e43      	subs	r3, r0, #1
 8001614:	2800      	cmp	r0, #0
 8001616:	d1ec      	bne.n	80015f2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 8001618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800161c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001634:	d025      	beq.n	8001682 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8001636:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001640:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001644:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001648:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800164c:	e000      	b.n	8001650 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 800164e:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001650:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001654:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001658:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800165c:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001660:	4908      	ldr	r1, [pc, #32]	; (8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001662:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001666:	4613      	mov	r3, r2
 8001668:	3a01      	subs	r2, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f2      	bne.n	8001654 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 800166e:	1e43      	subs	r3, r0, #1
 8001670:	2800      	cmp	r0, #0
 8001672:	d1ec      	bne.n	800164e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001678:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800167c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <_ZN20TouchGFXGeneratedHALD1Ev>:
 8001688:	4a02      	ldr	r2, [pc, #8]	; (8001694 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 800168a:	6002      	str	r2, [r0, #0]
 800168c:	4a02      	ldr	r2, [pc, #8]	; (8001698 <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 800168e:	6002      	str	r2, [r0, #0]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	08019614 	.word	0x08019614
 8001698:	0801a04c 	.word	0x0801a04c

0800169c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4604      	mov	r4, r0
    HAL::initialize();
 80016a0:	f009 fd37 	bl	800b112 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80016a8:	f00b fd40 	bl	800d12c <_ZN8touchgfx11Application11getInstanceEv>
 80016ac:	4601      	mov	r1, r0
 80016ae:	4620      	mov	r0, r4
 80016b0:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80016b8:	2300      	movs	r3, #0
 80016ba:	4a02      	ldr	r2, [pc, #8]	; (80016c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 80016bc:	4902      	ldr	r1, [pc, #8]	; (80016c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 80016be:	4620      	mov	r0, r4
 80016c0:	47a8      	blx	r5
}
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	2409fa00 	.word	0x2409fa00
 80016c8:	24040000 	.word	0x24040000

080016cc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 80016cc:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 80016ce:	f009 fd07 	bl	800b0e0 <_ZN8touchgfx3HAL10beginFrameEv>
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80016d4:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 80016d6:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80016da:	b113      	cbz	r3, 80016e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80016e2:	f009 fd09 	bl	800b0f8 <_ZN8touchgfx3HAL8endFrameEv>
}
 80016e6:	bd08      	pop	{r3, pc}
 80016e8:	24001200 	.word	0x24001200

080016ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 80016ec:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 80016ee:	f009 fcc1 	bl	800b074 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80016fa:	d021      	beq.n	8001740 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001704:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001708:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800170c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001710:	e000      	b.n	8001714 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001712:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001714:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001718:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800171c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001720:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001726:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800172a:	4613      	mov	r3, r2
 800172c:	3a01      	subs	r2, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f2      	bne.n	8001718 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8001732:	1e43      	subs	r3, r0, #1
 8001734:	2800      	cmp	r0, #0
 8001736:	d1ec      	bne.n	8001712 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 8001738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800173c:	f3bf 8f6f 	isb	sy
}
 8001740:	bd10      	pop	{r4, pc}
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 8001748:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800174a:	f009 fdfc 	bl	800b346 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 800174e:	bd08      	pop	{r3, pc}

08001750 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8001750:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8001752:	f009 fc89 	bl	800b068 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001756:	bd08      	pop	{r3, pc}

08001758 <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001758:	b510      	push	{r4, lr}
 800175a:	4604      	mov	r4, r0
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 800175e:	6003      	str	r3, [r0, #0]
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8001762:	6003      	str	r3, [r0, #0]
 8001764:	217c      	movs	r1, #124	; 0x7c
 8001766:	f016 fa06 	bl	8017b76 <_ZdlPvj>
 800176a:	4620      	mov	r0, r4
 800176c:	bd10      	pop	{r4, pc}
 800176e:	bf00      	nop
 8001770:	08019614 	.word	0x08019614
 8001774:	0801a04c 	.word	0x0801a04c

08001778 <HAL_LTDC_LineEventCallback>:
        return instance;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_LTDC_LineEventCallback+0x54>)
 800177a:	681b      	ldr	r3, [r3, #0]

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
 800177c:	b32b      	cbz	r3, 80017ca <HAL_LTDC_LineEventCallback+0x52>
    {
 800177e:	b510      	push	{r4, lr}
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_LTDC_LineEventCallback+0x58>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_LTDC_LineEventCallback+0x5c>)
 8001786:	8811      	ldrh	r1, [r2, #0]
 8001788:	428b      	cmp	r3, r1
 800178a:	d00a      	beq.n	80017a2 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800178c:	f004 fc12 	bl	8005fb4 <HAL_LTDC_ProgramLineEvent>
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_LTDC_LineEventCallback+0x54>)
 8001792:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8001794:	6803      	ldr	r3, [r0, #0]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 800179a:	2000      	movs	r0, #0
 800179c:	f7fe feb8 	bl	8000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 80017a0:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_LTDC_LineEventCallback+0x60>)
 80017a4:	8819      	ldrh	r1, [r3, #0]
 80017a6:	f004 fc05 	bl	8005fb4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80017aa:	4c08      	ldr	r4, [pc, #32]	; (80017cc <HAL_LTDC_LineEventCallback+0x54>)
 80017ac:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80017ae:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80017b2:	3301      	adds	r3, #1
 80017b4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80017b8:	f7ff f892 	bl	80008e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f00a fa07 	bl	800bbd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7fe fe66 	bl	8000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80017c8:	e7ea      	b.n	80017a0 <HAL_LTDC_LineEventCallback+0x28>
 80017ca:	4770      	bx	lr
 80017cc:	2400ae04 	.word	0x2400ae04
 80017d0:	50001000 	.word	0x50001000
 80017d4:	24001204 	.word	0x24001204
 80017d8:	24001202 	.word	0x24001202

080017dc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80017dc:	b530      	push	{r4, r5, lr}
 80017de:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017e0:	2400      	movs	r4, #0
 80017e2:	9400      	str	r4, [sp, #0]
 80017e4:	9401      	str	r4, [sp, #4]
 80017e6:	9402      	str	r4, [sp, #8]
 80017e8:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017ea:	f003 f9a3 	bl	8004b34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017ee:	2501      	movs	r5, #1
 80017f0:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017f4:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80017f8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80017fc:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80017fe:	231b      	movs	r3, #27
 8001800:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001804:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001808:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800180c:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001810:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001814:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001818:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800181c:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001820:	4668      	mov	r0, sp
 8001822:	f003 f9a5 	bl	8004b70 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001826:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800182a:	2319      	movs	r3, #25
 800182c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001830:	2403      	movs	r4, #3
 8001832:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001836:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800183a:	4668      	mov	r0, sp
 800183c:	f003 f998 	bl	8004b70 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001840:	2302      	movs	r3, #2
 8001842:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001846:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800184a:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800184c:	2313      	movs	r3, #19
 800184e:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001852:	4668      	mov	r0, sp
 8001854:	f003 f98c 	bl	8004b70 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001858:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800185c:	2311      	movs	r3, #17
 800185e:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001862:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001866:	4668      	mov	r0, sp
 8001868:	f003 f982 	bl	8004b70 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800186c:	2004      	movs	r0, #4
 800186e:	f003 f96f 	bl	8004b50 <HAL_MPU_Enable>

}
 8001872:	b005      	add	sp, #20
 8001874:	bd30      	pop	{r4, r5, pc}
	...

08001878 <MX_CRC_Init>:
{
 8001878:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_CRC_Init+0x1c>)
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_CRC_Init+0x20>)
 800187e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001884:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001886:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001888:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800188a:	2301      	movs	r3, #1
 800188c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800188e:	f003 f99f 	bl	8004bd0 <HAL_CRC_Init>
}
 8001892:	bd08      	pop	{r3, pc}
 8001894:	24001210 	.word	0x24001210
 8001898:	40023000 	.word	0x40023000

0800189c <MX_GPIO_Init>:
{
 800189c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018a0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	2400      	movs	r4, #0
 80018a4:	9407      	str	r4, [sp, #28]
 80018a6:	9408      	str	r4, [sp, #32]
 80018a8:	9409      	str	r4, [sp, #36]	; 0x24
 80018aa:	940a      	str	r4, [sp, #40]	; 0x28
 80018ac:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <MX_GPIO_Init+0x190>)
 80018b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018c0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80018c4:	9200      	str	r2, [sp, #0]
 80018c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018d8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018e0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80018f4:	9202      	str	r2, [sp, #8]
 80018f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001900:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001904:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001908:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800190c:	9203      	str	r2, [sp, #12]
 800190e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001910:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001918:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800191c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001920:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001924:	9204      	str	r2, [sp, #16]
 8001926:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800192c:	f042 0208 	orr.w	r2, r2, #8
 8001930:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001934:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001938:	f002 0208 	and.w	r2, r2, #8
 800193c:	9205      	str	r2, [sp, #20]
 800193e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800194c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	9306      	str	r3, [sp, #24]
 8001956:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001958:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001a38 <MX_GPIO_Init+0x19c>
 800195c:	4622      	mov	r2, r4
 800195e:	f640 0104 	movw	r1, #2052	; 0x804
 8001962:	4648      	mov	r0, r9
 8001964:	f003 fcc8 	bl	80052f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001968:	4f31      	ldr	r7, [pc, #196]	; (8001a30 <MX_GPIO_Init+0x194>)
 800196a:	4622      	mov	r2, r4
 800196c:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8001970:	4638      	mov	r0, r7
 8001972:	f003 fcc1 	bl	80052f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001976:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001a3c <MX_GPIO_Init+0x1a0>
 800197a:	4622      	mov	r2, r4
 800197c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001980:	4640      	mov	r0, r8
 8001982:	f003 fcb9 	bl	80052f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8001986:	4e2b      	ldr	r6, [pc, #172]	; (8001a34 <MX_GPIO_Init+0x198>)
 8001988:	4622      	mov	r2, r4
 800198a:	2106      	movs	r1, #6
 800198c:	4630      	mov	r0, r6
 800198e:	f003 fcb3 	bl	80052f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001992:	f640 0304 	movw	r3, #2052	; 0x804
 8001996:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2501      	movs	r5, #1
 800199a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a0:	a907      	add	r1, sp, #28
 80019a2:	4648      	mov	r0, r9
 80019a4:	f003 faf0 	bl	8004f88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80019a8:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80019ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	f04f 0903 	mov.w	r9, #3
 80019b6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ba:	a907      	add	r1, sp, #28
 80019bc:	4638      	mov	r0, r7
 80019be:	f003 fae3 	bl	8004f88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 80019c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80019d0:	a907      	add	r1, sp, #28
 80019d2:	4640      	mov	r0, r8
 80019d4:	f003 fad8 	bl	8004f88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019d8:	f04f 0804 	mov.w	r8, #4
 80019dc:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e6:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019e8:	a907      	add	r1, sp, #28
 80019ea:	4638      	mov	r0, r7
 80019ec:	f003 facc 	bl	8004f88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019f0:	2302      	movs	r3, #2
 80019f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019fa:	a907      	add	r1, sp, #28
 80019fc:	4630      	mov	r0, r6
 80019fe:	f003 fac3 	bl	8004f88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001a02:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a08:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	a907      	add	r1, sp, #28
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f003 faba 	bl	8004f88 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001a14:	4622      	mov	r2, r4
 8001a16:	2105      	movs	r1, #5
 8001a18:	2008      	movs	r0, #8
 8001a1a:	f003 f835 	bl	8004a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a1e:	2008      	movs	r0, #8
 8001a20:	f003 f868 	bl	8004af4 <HAL_NVIC_EnableIRQ>
}
 8001a24:	b00d      	add	sp, #52	; 0x34
 8001a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a2a:	bf00      	nop
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	58021c00 	.word	0x58021c00
 8001a34:	58020000 	.word	0x58020000
 8001a38:	58021800 	.word	0x58021800
 8001a3c:	58022000 	.word	0x58022000

08001a40 <MX_DMA2D_Init>:
{
 8001a40:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8001a42:	4c0b      	ldr	r4, [pc, #44]	; (8001a70 <MX_DMA2D_Init+0x30>)
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_DMA2D_Init+0x34>)
 8001a46:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a50:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a52:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001a54:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a56:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a58:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001a5a:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001a5c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001a5e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a60:	4620      	mov	r0, r4
 8001a62:	f003 f92d 	bl	8004cc0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a66:	2101      	movs	r1, #1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f003 fa0b 	bl	8004e84 <HAL_DMA2D_ConfigLayer>
}
 8001a6e:	bd10      	pop	{r4, pc}
 8001a70:	24001234 	.word	0x24001234
 8001a74:	52001000 	.word	0x52001000

08001a78 <MX_LTDC_Init>:
{
 8001a78:	b530      	push	{r4, r5, lr}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a7c:	2234      	movs	r2, #52	; 0x34
 8001a7e:	2100      	movs	r1, #0
 8001a80:	a801      	add	r0, sp, #4
 8001a82:	f016 fa2d 	bl	8017ee0 <memset>
  hltdc.Instance = LTDC;
 8001a86:	4c23      	ldr	r4, [pc, #140]	; (8001b14 <MX_LTDC_Init+0x9c>)
 8001a88:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <MX_LTDC_Init+0xa0>)
 8001a8a:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a90:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a92:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a94:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8001a96:	2328      	movs	r3, #40	; 0x28
 8001a98:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001a9e:	232a      	movs	r3, #42	; 0x2a
 8001aa0:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001aa2:	230b      	movs	r3, #11
 8001aa4:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001aa6:	f240 230a 	movw	r3, #522	; 0x20a
 8001aaa:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001aac:	f240 131b 	movw	r3, #283	; 0x11b
 8001ab0:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8001ab2:	f240 232a 	movw	r3, #554	; 0x22a
 8001ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ab8:	f240 131d 	movw	r3, #285	; 0x11d
 8001abc:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001abe:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ac2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ac6:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001aca:	4620      	mov	r0, r4
 8001acc:	f004 f954 	bl	8005d78 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8001ad0:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001ad2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ad6:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001ad8:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001ada:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001ade:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001ae4:	23ff      	movs	r3, #255	; 0xff
 8001ae6:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001ae8:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001aea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aee:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001af0:	2005      	movs	r0, #5
 8001af2:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001af4:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001af6:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001af8:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001afa:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001afe:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b02:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b06:	462a      	mov	r2, r5
 8001b08:	a901      	add	r1, sp, #4
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f004 fa1d 	bl	8005f4a <HAL_LTDC_ConfigLayer>
}
 8001b10:	b00f      	add	sp, #60	; 0x3c
 8001b12:	bd30      	pop	{r4, r5, pc}
 8001b14:	240012e8 	.word	0x240012e8
 8001b18:	50001000 	.word	0x50001000

08001b1c <MX_I2C4_Init>:
{
 8001b1c:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8001b1e:	4c0d      	ldr	r4, [pc, #52]	; (8001b54 <MX_I2C4_Init+0x38>)
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <MX_I2C4_Init+0x3c>)
 8001b22:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <MX_I2C4_Init+0x40>)
 8001b26:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001b28:	2500      	movs	r5, #0
 8001b2a:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001b32:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b34:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b36:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b38:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f003 fdbc 	bl	80056b8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b44:	4620      	mov	r0, r4
 8001b46:	f003 ffe0 	bl	8005b0a <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f004 f80a 	bl	8005b66 <HAL_I2CEx_ConfigDigitalFilter>
}
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
 8001b54:	2400129c 	.word	0x2400129c
 8001b58:	58001c00 	.word	0x58001c00
 8001b5c:	30808bd0 	.word	0x30808bd0

08001b60 <MX_OCTOSPI1_Init>:
{
 8001b60:	b530      	push	{r4, r5, lr}
 8001b62:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_OCTOSPI1_Init+0x58>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_OCTOSPI1_Init+0x5c>)
 8001b68:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b6a:	2501      	movs	r5, #1
 8001b6c:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b6e:	2400      	movs	r4, #0
 8001b70:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001b72:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 8001b74:	231a      	movs	r3, #26
 8001b76:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001b7c:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001b7e:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001b80:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8001b82:	2303      	movs	r3, #3
 8001b84:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001b86:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001b88:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001b8a:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001b90:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001b92:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001b94:	f004 fe8c 	bl	80068b0 <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001b98:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001b9c:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f002 fcc3 	bl	800452c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8001ba6:	a901      	add	r1, sp, #4
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f002 fd39 	bl	8004620 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f002 fc64 	bl	800447c <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8001bb4:	b003      	add	sp, #12
 8001bb6:	bd30      	pop	{r4, r5, pc}
 8001bb8:	24001390 	.word	0x24001390
 8001bbc:	52005000 	.word	0x52005000

08001bc0 <StartDefaultTask>:
{
 8001bc0:	b508      	push	{r3, lr}
    osDelay(100);
 8001bc2:	2064      	movs	r0, #100	; 0x64
 8001bc4:	f006 fd34 	bl	8008630 <osDelay>
  for(;;)
 8001bc8:	e7fb      	b.n	8001bc2 <StartDefaultTask+0x2>
	...

08001bcc <SystemClock_Config>:
{
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd0:	224c      	movs	r2, #76	; 0x4c
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	a809      	add	r0, sp, #36	; 0x24
 8001bd6:	f016 f983 	bl	8017ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bda:	2220      	movs	r2, #32
 8001bdc:	2100      	movs	r1, #0
 8001bde:	a801      	add	r0, sp, #4
 8001be0:	f016 f97e 	bl	8017ee0 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <SystemClock_Config+0xa8>)
 8001be6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001bee:	2004      	movs	r0, #4
 8001bf0:	f004 fee2 	bl	80069b8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <SystemClock_Config+0xac>)
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c00:	619a      	str	r2, [r3, #24]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <SystemClock_Config+0xac>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001c14:	d0fa      	beq.n	8001c0c <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <SystemClock_Config+0xa8>)
 8001c18:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c2c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c32:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001c34:	220c      	movs	r2, #12
 8001c36:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001c38:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c3c:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c3e:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c40:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c42:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001c44:	2304      	movs	r3, #4
 8001c46:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c48:	2400      	movs	r4, #0
 8001c4a:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c4c:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	a809      	add	r0, sp, #36	; 0x24
 8001c50:	f004 fefc 	bl	8006a4c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c54:	233f      	movs	r3, #63	; 0x3f
 8001c56:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c58:	2103      	movs	r1, #3
 8001c5a:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c5c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c5e:	2308      	movs	r3, #8
 8001c60:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c62:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001c64:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001c66:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c68:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c6a:	a801      	add	r0, sp, #4
 8001c6c:	f005 fafa 	bl	8007264 <HAL_RCC_ClockConfig>
}
 8001c70:	b01c      	add	sp, #112	; 0x70
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58024800 	.word	0x58024800

08001c7c <main>:
{
 8001c7c:	b508      	push	{r3, lr}
  MPU_Config();
 8001c7e:	f7ff fdad 	bl	80017dc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <main+0xe0>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c8a:	d113      	bne.n	8001cb4 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <main+0xe0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ca0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001caa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001cb4:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <main+0xe0>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cbc:	d127      	bne.n	8001d0e <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <main+0xe0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001cca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cce:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001cd2:	e000      	b.n	8001cd6 <main+0x5a>
    } while(sets-- != 0U);
 8001cd4:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cd6:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001cda:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001cde:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001ce2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001ce6:	491d      	ldr	r1, [pc, #116]	; (8001d5c <main+0xe0>)
 8001ce8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001cec:	4613      	mov	r3, r2
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f2      	bne.n	8001cda <main+0x5e>
    } while(sets-- != 0U);
 8001cf4:	1e43      	subs	r3, r0, #1
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <main+0x58>
 8001cfa:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cfe:	694b      	ldr	r3, [r1, #20]
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	614b      	str	r3, [r1, #20]
 8001d06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001d0e:	f002 fe55 	bl	80049bc <HAL_Init>
  SystemClock_Config();
 8001d12:	f7ff ff5b 	bl	8001bcc <SystemClock_Config>
  MX_CRC_Init();
 8001d16:	f7ff fdaf 	bl	8001878 <MX_CRC_Init>
  MX_GPIO_Init();
 8001d1a:	f7ff fdbf 	bl	800189c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001d1e:	f7ff fe8f 	bl	8001a40 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001d22:	f7ff fea9 	bl	8001a78 <MX_LTDC_Init>
  MX_I2C4_Init();
 8001d26:	f7ff fef9 	bl	8001b1c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8001d2a:	f7ff ff19 	bl	8001b60 <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 8001d2e:	f7fe fb59 	bl	80003e4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001d32:	f7fe fb56 	bl	80003e2 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001d36:	f006 fbef 	bl	8008518 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <main+0xe4>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4809      	ldr	r0, [pc, #36]	; (8001d64 <main+0xe8>)
 8001d40:	f006 fc18 	bl	8008574 <osThreadNew>
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <main+0xec>)
 8001d46:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001d48:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <main+0xf0>)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4808      	ldr	r0, [pc, #32]	; (8001d70 <main+0xf4>)
 8001d4e:	f006 fc11 	bl	8008574 <osThreadNew>
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <main+0xf8>)
 8001d54:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001d56:	f006 fbf1 	bl	800853c <osKernelStart>
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <main+0xde>
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	08019720 	.word	0x08019720
 8001d64:	08001bc1 	.word	0x08001bc1
 8001d68:	2400120c 	.word	0x2400120c
 8001d6c:	080196fc 	.word	0x080196fc
 8001d70:	080003ed 	.word	0x080003ed
 8001d74:	24001208 	.word	0x24001208

08001d78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d7a:	6802      	ldr	r2, [r0, #0]
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d000      	beq.n	8001d84 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d82:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001d84:	f002 fe48 	bl	8004a18 <HAL_IncTick>
}
 8001d88:	e7fb      	b.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001d8a:	bf00      	nop
 8001d8c:	40001000 	.word	0x40001000

08001d90 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b500      	push	{lr}
 8001d96:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_MspInit+0x30>)
 8001d9a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001d9e:	f042 0202 	orr.w	r2, r2, #2
 8001da2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8001da6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	210f      	movs	r1, #15
 8001db6:	f06f 0001 	mvn.w	r0, #1
 8001dba:	f002 fe65 	bl	8004a88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	b003      	add	sp, #12
 8001dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dc4:	58024400 	.word	0x58024400

08001dc8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001dc8:	6802      	ldr	r2, [r0, #0]
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_CRC_MspInit+0x2c>)
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d000      	beq.n	8001dd2 <HAL_CRC_MspInit+0xa>
 8001dd0:	4770      	bx	lr
{
 8001dd2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_CRC_MspInit+0x30>)
 8001dd6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8001de2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001dee:	b002      	add	sp, #8
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023000 	.word	0x40023000
 8001df8:	58024400 	.word	0x58024400

08001dfc <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001dfc:	6802      	ldr	r2, [r0, #0]
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_DMA2D_MspInit+0x40>)
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d000      	beq.n	8001e06 <HAL_DMA2D_MspInit+0xa>
 8001e04:	4770      	bx	lr
{
 8001e06:	b500      	push	{lr}
 8001e08:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_DMA2D_MspInit+0x44>)
 8001e0c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001e10:	f042 0210 	orr.w	r2, r2, #16
 8001e14:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8001e18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2105      	movs	r1, #5
 8001e28:	205a      	movs	r0, #90	; 0x5a
 8001e2a:	f002 fe2d 	bl	8004a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e2e:	205a      	movs	r0, #90	; 0x5a
 8001e30:	f002 fe60 	bl	8004af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e34:	b003      	add	sp, #12
 8001e36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e3a:	bf00      	nop
 8001e3c:	52001000 	.word	0x52001000
 8001e40:	58024400 	.word	0x58024400

08001e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e44:	b510      	push	{r4, lr}
 8001e46:	b0b6      	sub	sp, #216	; 0xd8
 8001e48:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	9131      	str	r1, [sp, #196]	; 0xc4
 8001e4e:	9132      	str	r1, [sp, #200]	; 0xc8
 8001e50:	9133      	str	r1, [sp, #204]	; 0xcc
 8001e52:	9134      	str	r1, [sp, #208]	; 0xd0
 8001e54:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e56:	22b8      	movs	r2, #184	; 0xb8
 8001e58:	a803      	add	r0, sp, #12
 8001e5a:	f016 f841 	bl	8017ee0 <memset>
  if(hi2c->Instance==I2C4)
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_I2C_MspInit+0x8c>)
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e66:	b036      	add	sp, #216	; 0xd8
 8001e68:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6e:	a803      	add	r0, sp, #12
 8001e70:	f005 fcbe 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e74:	bb40      	cbnz	r0, 8001ec8 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e76:	4c17      	ldr	r4, [pc, #92]	; (8001ed4 <HAL_I2C_MspInit+0x90>)
 8001e78:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8001e84:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001e90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e94:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e96:	2312      	movs	r3, #18
 8001e98:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea6:	a931      	add	r1, sp, #196	; 0xc4
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <HAL_I2C_MspInit+0x94>)
 8001eaa:	f003 f86d 	bl	8004f88 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001eae:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb6:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8001eba:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	9b02      	ldr	r3, [sp, #8]
}
 8001ec6:	e7ce      	b.n	8001e66 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001ec8:	f7ff ff62 	bl	8001d90 <Error_Handler>
 8001ecc:	e7d3      	b.n	8001e76 <HAL_I2C_MspInit+0x32>
 8001ece:	bf00      	nop
 8001ed0:	58001c00 	.word	0x58001c00
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	58020c00 	.word	0x58020c00

08001edc <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8001edc:	6802      	ldr	r2, [r0, #0]
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_I2C_MspDeInit+0x34>)
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d000      	beq.n	8001ee6 <HAL_I2C_MspDeInit+0xa>
 8001ee4:	4770      	bx	lr
{
 8001ee6:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_I2C_MspDeInit+0x38>)
 8001eea:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8001eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8001ef6:	4c08      	ldr	r4, [pc, #32]	; (8001f18 <HAL_I2C_MspDeInit+0x3c>)
 8001ef8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efc:	4620      	mov	r0, r4
 8001efe:	f003 f953 	bl	80051a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f06:	4620      	mov	r0, r4
 8001f08:	f003 f94e 	bl	80051a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001f0c:	bd10      	pop	{r4, pc}
 8001f0e:	bf00      	nop
 8001f10:	58001c00 	.word	0x58001c00
 8001f14:	58024400 	.word	0x58024400
 8001f18:	58020c00 	.word	0x58020c00

08001f1c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	b0b8      	sub	sp, #224	; 0xe0
 8001f20:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	2100      	movs	r1, #0
 8001f24:	9133      	str	r1, [sp, #204]	; 0xcc
 8001f26:	9134      	str	r1, [sp, #208]	; 0xd0
 8001f28:	9135      	str	r1, [sp, #212]	; 0xd4
 8001f2a:	9136      	str	r1, [sp, #216]	; 0xd8
 8001f2c:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2e:	22b8      	movs	r2, #184	; 0xb8
 8001f30:	a805      	add	r0, sp, #20
 8001f32:	f015 ffd5 	bl	8017ee0 <memset>
  if(hltdc->Instance==LTDC)
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_LTDC_MspInit+0x114>)
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f3e:	b038      	add	sp, #224	; 0xe0
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f46:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001f48:	2318      	movs	r3, #24
 8001f4a:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8001f4c:	23c9      	movs	r3, #201	; 0xc9
 8001f4e:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f54:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8001f56:	2315      	movs	r3, #21
 8001f58:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f5e:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8001f60:	f241 5356 	movw	r3, #5462	; 0x1556
 8001f64:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f66:	a805      	add	r0, sp, #20
 8001f68:	f005 fc42 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d15c      	bne.n	800202a <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_LTDC_MspInit+0x118>)
 8001f72:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8001f7e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001f82:	f002 0208 	and.w	r2, r2, #8
 8001f86:	9201      	str	r2, [sp, #4]
 8001f88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f8a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001f8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f92:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001f96:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001f9a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001f9e:	9202      	str	r2, [sp, #8]
 8001fa0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fa2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001faa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001fae:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fb2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001fb6:	9203      	str	r2, [sp, #12]
 8001fb8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fba:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001fc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	9304      	str	r3, [sp, #16]
 8001fd0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8001fd2:	23ff      	movs	r3, #255	; 0xff
 8001fd4:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2602      	movs	r6, #2
 8001fd8:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2400      	movs	r4, #0
 8001fdc:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fe0:	250e      	movs	r5, #14
 8001fe2:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001fe4:	a933      	add	r1, sp, #204	; 0xcc
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <HAL_LTDC_MspInit+0x11c>)
 8001fe8:	f002 ffce 	bl	8004f88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8001fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff0:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ff8:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ffa:	a933      	add	r1, sp, #204	; 0xcc
 8001ffc:	480f      	ldr	r0, [pc, #60]	; (800203c <HAL_LTDC_MspInit+0x120>)
 8001ffe:	f002 ffc3 	bl	8004f88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8002002:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002006:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800200e:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002010:	a933      	add	r1, sp, #204	; 0xcc
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <HAL_LTDC_MspInit+0x124>)
 8002014:	f002 ffb8 	bl	8004f88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002018:	4622      	mov	r2, r4
 800201a:	2105      	movs	r1, #5
 800201c:	2058      	movs	r0, #88	; 0x58
 800201e:	f002 fd33 	bl	8004a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002022:	2058      	movs	r0, #88	; 0x58
 8002024:	f002 fd66 	bl	8004af4 <HAL_NVIC_EnableIRQ>
}
 8002028:	e789      	b.n	8001f3e <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 800202a:	f7ff feb1 	bl	8001d90 <Error_Handler>
 800202e:	e79f      	b.n	8001f70 <HAL_LTDC_MspInit+0x54>
 8002030:	50001000 	.word	0x50001000
 8002034:	58024400 	.word	0x58024400
 8002038:	58022800 	.word	0x58022800
 800203c:	58022400 	.word	0x58022400
 8002040:	58022000 	.word	0x58022000

08002044 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002044:	b510      	push	{r4, lr}
 8002046:	b0b0      	sub	sp, #192	; 0xc0
 8002048:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204a:	22b8      	movs	r2, #184	; 0xb8
 800204c:	2100      	movs	r1, #0
 800204e:	a802      	add	r0, sp, #8
 8002050:	f015 ff46 	bl	8017ee0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_OSPI_MspInit+0x8c>)
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800205c:	b030      	add	sp, #192	; 0xc0
 800205e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002064:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8002066:	2318      	movs	r3, #24
 8002068:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800206a:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800206e:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002070:	2302      	movs	r3, #2
 8002072:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002074:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002076:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002078:	2320      	movs	r3, #32
 800207a:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800207c:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207e:	a802      	add	r0, sp, #8
 8002080:	f005 fbb6 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8002084:	bb08      	cbnz	r0, 80020ca <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_OSPI_MspInit+0x90>)
 8002088:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800208c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002090:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002094:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002098:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80020a0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020a8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80020ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80020b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2105      	movs	r1, #5
 80020bc:	205c      	movs	r0, #92	; 0x5c
 80020be:	f002 fce3 	bl	8004a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80020c2:	205c      	movs	r0, #92	; 0x5c
 80020c4:	f002 fd16 	bl	8004af4 <HAL_NVIC_EnableIRQ>
}
 80020c8:	e7c8      	b.n	800205c <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80020ca:	f7ff fe61 	bl	8001d90 <Error_Handler>
 80020ce:	e7da      	b.n	8002086 <HAL_OSPI_MspInit+0x42>
 80020d0:	52005000 	.word	0x52005000
 80020d4:	58024400 	.word	0x58024400

080020d8 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80020d8:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80020da:	6802      	ldr	r2, [r0, #0]
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_OSPI_MspDeInit+0x30>)
 80020de:	429a      	cmp	r2, r3
 80020e0:	d000      	beq.n	80020e4 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80020e2:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_OSPI_MspDeInit+0x34>)
 80020e6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020ea:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80020ee:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80020f2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020fa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 80020fe:	205c      	movs	r0, #92	; 0x5c
 8002100:	f002 fd06 	bl	8004b10 <HAL_NVIC_DisableIRQ>
}
 8002104:	e7ed      	b.n	80020e2 <HAL_OSPI_MspDeInit+0xa>
 8002106:	bf00      	nop
 8002108:	52005000 	.word	0x52005000
 800210c:	58024400 	.word	0x58024400

08002110 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002110:	280f      	cmp	r0, #15
 8002112:	d901      	bls.n	8002118 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002116:	4770      	bx	lr
{
 8002118:	b510      	push	{r4, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800211e:	2200      	movs	r2, #0
 8002120:	4601      	mov	r1, r0
 8002122:	2036      	movs	r0, #54	; 0x36
 8002124:	f002 fcb0 	bl	8004a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002128:	2036      	movs	r0, #54	; 0x36
 800212a:	f002 fce3 	bl	8004af4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_InitTick+0x88>)
 8002130:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_InitTick+0x8c>)
 8002134:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002138:	f042 0210 	orr.w	r2, r2, #16
 800213c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002140:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214c:	a901      	add	r1, sp, #4
 800214e:	a802      	add	r0, sp, #8
 8002150:	f005 fa18 	bl	8007584 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002154:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002156:	b9bb      	cbnz	r3, 8002188 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002158:	f005 f9f0 	bl	800753c <HAL_RCC_GetPCLK1Freq>
 800215c:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800215e:	4810      	ldr	r0, [pc, #64]	; (80021a0 <HAL_InitTick+0x90>)
 8002160:	fba0 2303 	umull	r2, r3, r0, r3
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 8002168:	480e      	ldr	r0, [pc, #56]	; (80021a4 <HAL_InitTick+0x94>)
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_InitTick+0x98>)
 800216c:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800216e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002172:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002174:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800217c:	f006 f98c 	bl	8008498 <HAL_TIM_Base_Init>
 8002180:	b130      	cbz	r0, 8002190 <HAL_InitTick+0x80>
  return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
}
 8002184:	b00a      	add	sp, #40	; 0x28
 8002186:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002188:	f005 f9d8 	bl	800753c <HAL_RCC_GetPCLK1Freq>
 800218c:	0043      	lsls	r3, r0, #1
 800218e:	e7e6      	b.n	800215e <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <HAL_InitTick+0x94>)
 8002192:	f005 ffe5 	bl	8008160 <HAL_TIM_Base_Start_IT>
 8002196:	e7f5      	b.n	8002184 <HAL_InitTick+0x74>
 8002198:	24000048 	.word	0x24000048
 800219c:	58024400 	.word	0x58024400
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	240013ec 	.word	0x240013ec
 80021a8:	40001000 	.word	0x40001000

080021ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ac:	4770      	bx	lr

080021ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <HardFault_Handler>

080021b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler>

080021b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <BusFault_Handler>

080021b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler>

080021b6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	4770      	bx	lr

080021b8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80021ba:	2004      	movs	r0, #4
 80021bc:	f003 f8ac 	bl	8005318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021c0:	bd08      	pop	{r3, pc}
	...

080021c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021c6:	4802      	ldr	r0, [pc, #8]	; (80021d0 <TIM6_DAC_IRQHandler+0xc>)
 80021c8:	f006 f816 	bl	80081f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021cc:	bd08      	pop	{r3, pc}
 80021ce:	bf00      	nop
 80021d0:	240013ec 	.word	0x240013ec

080021d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80021d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80021d6:	4802      	ldr	r0, [pc, #8]	; (80021e0 <LTDC_IRQHandler+0xc>)
 80021d8:	f003 fe4a 	bl	8005e70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80021dc:	bd08      	pop	{r3, pc}
 80021de:	bf00      	nop
 80021e0:	240012e8 	.word	0x240012e8

080021e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80021e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80021e6:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA2D_IRQHandler+0xc>)
 80021e8:	f002 fdae 	bl	8004d48 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80021ec:	bd08      	pop	{r3, pc}
 80021ee:	bf00      	nop
 80021f0:	24001234 	.word	0x24001234

080021f4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80021f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80021f6:	4802      	ldr	r0, [pc, #8]	; (8002200 <OCTOSPI1_IRQHandler+0xc>)
 80021f8:	f004 fa44 	bl	8006684 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80021fc:	bd08      	pop	{r3, pc}
 80021fe:	bf00      	nop
 8002200:	24001390 	.word	0x24001390

08002204 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002204:	2001      	movs	r0, #1
 8002206:	4770      	bx	lr

08002208 <_kill>:

int _kill(int pid, int sig)
{
 8002208:	b508      	push	{r3, lr}
	errno = EINVAL;
 800220a:	f015 fd15 	bl	8017c38 <__errno>
 800220e:	2316      	movs	r3, #22
 8002210:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002212:	f04f 30ff 	mov.w	r0, #4294967295
 8002216:	bd08      	pop	{r3, pc}

08002218 <_exit>:

void _exit (int status)
{
 8002218:	b508      	push	{r3, lr}
	_kill(status, -1);
 800221a:	f04f 31ff 	mov.w	r1, #4294967295
 800221e:	f7ff fff3 	bl	8002208 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002222:	e7fe      	b.n	8002222 <_exit+0xa>

08002224 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002224:	b570      	push	{r4, r5, r6, lr}
 8002226:	460c      	mov	r4, r1
 8002228:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	2500      	movs	r5, #0
 800222c:	e006      	b.n	800223c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800222e:	f3af 8000 	nop.w
 8002232:	4621      	mov	r1, r4
 8002234:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800223a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	42b5      	cmp	r5, r6
 800223e:	dbf6      	blt.n	800222e <_read+0xa>
	}

return len;
}
 8002240:	4630      	mov	r0, r6
 8002242:	bd70      	pop	{r4, r5, r6, pc}

08002244 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	460c      	mov	r4, r1
 8002248:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	2500      	movs	r5, #0
 800224c:	e004      	b.n	8002258 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800224e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002252:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	3501      	adds	r5, #1
 8002258:	42b5      	cmp	r5, r6
 800225a:	dbf8      	blt.n	800224e <_write+0xa>
	}
	return len;
}
 800225c:	4630      	mov	r0, r6
 800225e:	bd70      	pop	{r4, r5, r6, pc}

08002260 <_close>:

int _close(int file)
{
	return -1;
}
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	4770      	bx	lr

08002266 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800226c:	2000      	movs	r0, #0
 800226e:	4770      	bx	lr

08002270 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002270:	2001      	movs	r0, #1
 8002272:	4770      	bx	lr

08002274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002274:	2000      	movs	r0, #0
 8002276:	4770      	bx	lr

08002278 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002278:	b508      	push	{r3, lr}
 800227a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <_sbrk+0x34>)
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	b142      	cbz	r2, 8002294 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <_sbrk+0x34>)
 8002284:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002286:	4403      	add	r3, r0
 8002288:	466a      	mov	r2, sp
 800228a:	4293      	cmp	r3, r2
 800228c:	d806      	bhi.n	800229c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <_sbrk+0x34>)
 8002290:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002292:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002294:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x34>)
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <_sbrk+0x38>)
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	e7f2      	b.n	8002282 <_sbrk+0xa>
		errno = ENOMEM;
 800229c:	f015 fccc 	bl	8017c38 <__errno>
 80022a0:	230c      	movs	r3, #12
 80022a2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	e7f3      	b.n	8002292 <_sbrk+0x1a>
 80022aa:	bf00      	nop
 80022ac:	24001438 	.word	0x24001438
 80022b0:	2400b088 	.word	0x2400b088

080022b4 <_ZN23ApplicationFontProviderD1Ev>:
 80022b4:	4a02      	ldr	r2, [pc, #8]	; (80022c0 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 80022b6:	6002      	str	r2, [r0, #0]
 80022b8:	4a02      	ldr	r2, [pc, #8]	; (80022c4 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80022ba:	6002      	str	r2, [r0, #0]
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	0801974c 	.word	0x0801974c
 80022c4:	080193f0 	.word	0x080193f0

080022c8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80022c8:	b508      	push	{r3, lr}
    switch (typography)
 80022ca:	2901      	cmp	r1, #1
 80022cc:	d008      	beq.n	80022e0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
 80022ce:	2902      	cmp	r1, #2
 80022d0:	d00a      	beq.n	80022e8 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80022d2:	b109      	cbz	r1, 80022d8 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 80022d4:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80022d6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80022d8:	f000 fbd6 	bl	8002a88 <_ZN17TypedTextDatabase8getFontsEv>
 80022dc:	6800      	ldr	r0, [r0, #0]
 80022de:	e7fa      	b.n	80022d6 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80022e0:	f000 fbd2 	bl	8002a88 <_ZN17TypedTextDatabase8getFontsEv>
 80022e4:	6840      	ldr	r0, [r0, #4]
 80022e6:	e7f6      	b.n	80022d6 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80022e8:	f000 fbce 	bl	8002a88 <_ZN17TypedTextDatabase8getFontsEv>
 80022ec:	6880      	ldr	r0, [r0, #8]
 80022ee:	e7f2      	b.n	80022d6 <_ZN23ApplicationFontProvider7getFontEt+0xe>

080022f0 <_ZN23ApplicationFontProviderD0Ev>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	4604      	mov	r4, r0
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 80022f6:	6003      	str	r3, [r0, #0]
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 80022fa:	6003      	str	r3, [r0, #0]
 80022fc:	2104      	movs	r1, #4
 80022fe:	f015 fc3a 	bl	8017b76 <_ZdlPvj>
 8002302:	4620      	mov	r0, r4
 8002304:	bd10      	pop	{r4, pc}
 8002306:	bf00      	nop
 8002308:	0801974c 	.word	0x0801974c
 800230c:	080193f0 	.word	0x080193f0

08002310 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002310:	4800      	ldr	r0, [pc, #0]	; (8002314 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002312:	4770      	bx	lr
 8002314:	08019758 	.word	0x08019758

08002318 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002318:	2001      	movs	r0, #1
 800231a:	4770      	bx	lr

0800231c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 800231c:	b169      	cbz	r1, 800233a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800231e:	b510      	push	{r4, lr}
 8002320:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002326:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800232a:	6803      	ldr	r3, [r0, #0]
 800232c:	689c      	ldr	r4, [r3, #8]
 800232e:	f10d 0303 	add.w	r3, sp, #3
 8002332:	aa01      	add	r2, sp, #4
 8002334:	47a0      	blx	r4
        return glyph;
    }
 8002336:	b002      	add	sp, #8
 8002338:	bd10      	pop	{r4, pc}
            return 0;
 800233a:	2000      	movs	r0, #0
    }
 800233c:	4770      	bx	lr

0800233e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800233e:	8940      	ldrh	r0, [r0, #10]
 8002340:	4770      	bx	lr

08002342 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002342:	8980      	ldrh	r0, [r0, #12]
 8002344:	4770      	bx	lr

08002346 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002346:	8880      	ldrh	r0, [r0, #4]
 8002348:	4770      	bx	lr

0800234a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800234a:	8883      	ldrh	r3, [r0, #4]
 800234c:	7980      	ldrb	r0, [r0, #6]
 800234e:	4418      	add	r0, r3
    }
 8002350:	b280      	uxth	r0, r0
 8002352:	4770      	bx	lr

08002354 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002354:	79c0      	ldrb	r0, [r0, #7]
    }
 8002356:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800235a:	4770      	bx	lr

0800235c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800235c:	79c0      	ldrb	r0, [r0, #7]
    }
 800235e:	09c0      	lsrs	r0, r0, #7
 8002360:	4770      	bx	lr
	...

08002364 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8002364:	4b01      	ldr	r3, [pc, #4]	; (800236c <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8002366:	6003      	str	r3, [r0, #0]
    }
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	08019aa0 	.word	0x08019aa0

08002370 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8002370:	4770      	bx	lr

08002372 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002372:	4770      	bx	lr

08002374 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002374:	4770      	bx	lr

08002376 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002376:	6041      	str	r1, [r0, #4]
    }
 8002378:	4770      	bx	lr

0800237a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800237a:	2301      	movs	r3, #1
 800237c:	7203      	strb	r3, [r0, #8]
    }
 800237e:	4770      	bx	lr

08002380 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002380:	4a02      	ldr	r2, [pc, #8]	; (800238c <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8002382:	6002      	str	r2, [r0, #0]
    {
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 8002386:	6002      	str	r2, [r0, #0]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	08019ac4 	.word	0x08019ac4
 8002390:	08019aa0 	.word	0x08019aa0

08002394 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002394:	b510      	push	{r4, lr}
 8002396:	4604      	mov	r4, r0
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 800239a:	6003      	str	r3, [r0, #0]
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 800239e:	6003      	str	r3, [r0, #0]
 80023a0:	210c      	movs	r1, #12
 80023a2:	f015 fbe8 	bl	8017b76 <_ZdlPvj>
 80023a6:	4620      	mov	r0, r4
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	bf00      	nop
 80023ac:	08019ac4 	.word	0x08019ac4
 80023b0:	08019aa0 	.word	0x08019aa0

080023b4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4604      	mov	r4, r0
    {
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <_ZN8touchgfx10TransitionD0Ev+0x14>)
 80023ba:	6003      	str	r3, [r0, #0]
    }
 80023bc:	210c      	movs	r1, #12
 80023be:	f015 fbda 	bl	8017b76 <_ZdlPvj>
 80023c2:	4620      	mov	r0, r4
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	bf00      	nop
 80023c8:	08019aa0 	.word	0x08019aa0

080023cc <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80023cc:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80023ce:	f00a fead 	bl	800d12c <_ZN8touchgfx11Application11getInstanceEv>
 80023d2:	f00b fa51 	bl	800d878 <_ZN8touchgfx11Application10invalidateEv>
    }
 80023d6:	bd08      	pop	{r3, pc}

080023d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
 80023de:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 80023e0:	f00a fec6 	bl	800d170 <_ZN8touchgfx11ApplicationC1Ev>
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80023e6:	6023      	str	r3, [r4, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 80023ee:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
        instance = this;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>)
 80023f4:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 80023f8:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 80023fc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8002402:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002406:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 800240a:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 800240e:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 8002412:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 8002416:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
        return instance;
 800241a:	4d0d      	ldr	r5, [pc, #52]	; (8002450 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800241c:	6828      	ldr	r0, [r5, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800241e:	6803      	ldr	r3, [r0, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002424:	682b      	ldr	r3, [r5, #0]
 8002426:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800242a:	b10a      	cbz	r2, 8002430 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
 800242c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800242e:	b900      	cbnz	r0, 8002432 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5a>
        return instance->lcdRef;
 8002430:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002432:	f010 fd7c 	bl	8012f2e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002436:	4620      	mov	r0, r4
 8002438:	bd70      	pop	{r4, r5, r6, pc}
 800243a:	bf00      	nop
 800243c:	08019454 	.word	0x08019454
 8002440:	2400ae50 	.word	0x2400ae50
 8002444:	080194b8 	.word	0x080194b8
 8002448:	0801943c 	.word	0x0801943c
 800244c:	080194a0 	.word	0x080194a0
 8002450:	2400ae04 	.word	0x2400ae04

08002454 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 8002454:	b410      	push	{r4}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 800245c:	9206      	str	r2, [sp, #24]
 800245e:	2200      	movs	r2, #0
 8002460:	9207      	str	r2, [sp, #28]
 8002462:	46ec      	mov	ip, sp
 8002464:	aa08      	add	r2, sp, #32
 8002466:	e912 0003 	ldmdb	r2, {r0, r1}
 800246a:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 800246e:	4c0c      	ldr	r4, [pc, #48]	; (80024a0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8002470:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8002474:	9202      	str	r2, [sp, #8]
 8002476:	9303      	str	r3, [sp, #12]
 8002478:	aa04      	add	r2, sp, #16
 800247a:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800247e:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8002482:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8002486:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 800248a:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 800248c:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8002490:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8002494:	b009      	add	sp, #36	; 0x24
 8002496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	080025f9 	.word	0x080025f9
 80024a0:	0801943c 	.word	0x0801943c
 80024a4:	080194a0 	.word	0x080194a0

080024a8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80024a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ac:	4607      	mov	r7, r0
 80024ae:	4688      	mov	r8, r1
 80024b0:	4615      	mov	r5, r2
 80024b2:	4699      	mov	r9, r3
 80024b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80024b8:	6890      	ldr	r0, [r2, #8]
 80024ba:	6803      	ldr	r3, [r0, #0]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4798      	blx	r3
 80024c0:	2897      	cmp	r0, #151	; 0x97
 80024c2:	d976      	bls.n	80025b2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80024c4:	6868      	ldr	r0, [r5, #4]
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4798      	blx	r3
 80024cc:	280f      	cmp	r0, #15
 80024ce:	d976      	bls.n	80025be <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80024d0:	68e8      	ldr	r0, [r5, #12]
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4798      	blx	r3
 80024d8:	280b      	cmp	r0, #11
 80024da:	d976      	bls.n	80025ca <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
    Application::getInstance()->clearAllTimerWidgets();
 80024dc:	f00a fe26 	bl	800d12c <_ZN8touchgfx11Application11getInstanceEv>
 80024e0:	f00a fe2a 	bl	800d138 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80024e4:	f8d9 0000 	ldr.w	r0, [r9]
 80024e8:	b110      	cbz	r0, 80024f0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x48>
        (*currentTrans)->tearDown();
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	4798      	blx	r3
    if (*currentTrans)
 80024f0:	f8d9 0000 	ldr.w	r0, [r9]
 80024f4:	b110      	cbz	r0, 80024fc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
        (*currentTrans)->~Transition();
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4798      	blx	r3
    if (*currentScreen)
 80024fc:	6838      	ldr	r0, [r7, #0]
 80024fe:	b110      	cbz	r0, 8002506 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5e>
        (*currentScreen)->tearDownScreen();
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	4798      	blx	r3
    if (*currentPresenter)
 8002506:	f8d8 0000 	ldr.w	r0, [r8]
 800250a:	b110      	cbz	r0, 8002512 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6a>
        (*currentPresenter)->deactivate();
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4798      	blx	r3
    if (*currentScreen)
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	b110      	cbz	r0, 800251c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentScreen)->~Screen();
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4798      	blx	r3
    if (*currentPresenter)
 800251c:	f8d8 0000 	ldr.w	r0, [r8]
 8002520:	b110      	cbz	r0, 8002528 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
        (*currentPresenter)->~Presenter();
 8002522:	6803      	ldr	r3, [r0, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002528:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800252a:	6803      	ldr	r3, [r0, #0]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2100      	movs	r1, #0
 8002530:	4798      	blx	r3
 8002532:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002536:	6003      	str	r3, [r0, #0]
 8002538:	f04f 0b00 	mov.w	fp, #0
 800253c:	f8c0 b004 	str.w	fp, [r0, #4]
 8002540:	f880 b008 	strb.w	fp, [r0, #8]
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002546:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002548:	68a8      	ldr	r0, [r5, #8]
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	4659      	mov	r1, fp
 8002550:	4798      	blx	r3
 8002552:	4606      	mov	r6, r0
 8002554:	f000 fd08 	bl	8002f68 <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002558:	6868      	ldr	r0, [r5, #4]
 800255a:	6803      	ldr	r3, [r0, #0]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	4659      	mov	r1, fp
 8002560:	4798      	blx	r3
 8002562:	4605      	mov	r5, r0
 8002564:	4631      	mov	r1, r6
 8002566:	f000 fc87 	bl	8002e78 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 800256a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800256e:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8002572:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002574:	2d00      	cmp	r5, #0
 8002576:	d02e      	beq.n	80025d6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8002578:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800257a:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800257e:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002582:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8002584:	6833      	ldr	r3, [r6, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4630      	mov	r0, r6
 800258a:	4798      	blx	r3
    newPresenter->activate();
 800258c:	682b      	ldr	r3, [r5, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4628      	mov	r0, r5
 8002592:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002594:	4621      	mov	r1, r4
 8002596:	4630      	mov	r0, r6
 8002598:	f00c f9ae 	bl	800e8f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4620      	mov	r0, r4
 80025a2:	4798      	blx	r3
    newTransition->invalidate();
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	4620      	mov	r0, r4
 80025aa:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80025ac:	4628      	mov	r0, r5
 80025ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025b6:	21a3      	movs	r1, #163	; 0xa3
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025ba:	f015 fb0b 	bl	8017bd4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025c2:	21a4      	movs	r1, #164	; 0xa4
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025c6:	f015 fb05 	bl	8017bd4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025ce:	21a5      	movs	r1, #165	; 0xa5
 80025d0:	4806      	ldr	r0, [pc, #24]	; (80025ec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025d2:	f015 faff 	bl	8017bd4 <__assert_func>
    model->bind(newPresenter);
 80025d6:	462b      	mov	r3, r5
 80025d8:	e7cf      	b.n	800257a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 80025da:	bf00      	nop
 80025dc:	08019aa0 	.word	0x08019aa0
 80025e0:	08019ac4 	.word	0x08019ac4
 80025e4:	0801976c 	.word	0x0801976c
 80025e8:	080197fc 	.word	0x080197fc
 80025ec:	08019908 	.word	0x08019908
 80025f0:	08019950 	.word	0x08019950
 80025f4:	080199f4 	.word	0x080199f4

080025f8 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 80025f8:	b500      	push	{lr}
 80025fa:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80025fc:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8002604:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002608:	f500 719c 	add.w	r1, r0, #312	; 0x138
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 800260e:	f7ff ff4b 	bl	80024a8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002612:	b003      	add	sp, #12
 8002614:	f85d fb04 	ldr.w	pc, [sp], #4
 8002618:	2400ae44 	.word	0x2400ae44
 800261c:	2400ae40 	.word	0x2400ae40

08002620 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002620:	6a00      	ldr	r0, [r0, #32]
 8002622:	4770      	bx	lr

08002624 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002624:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002626:	4770      	bx	lr

08002628 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 800262a:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800262c:	4a03      	ldr	r2, [pc, #12]	; (800263c <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 800262e:	6002      	str	r2, [r0, #0]
    {
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8002632:	6002      	str	r2, [r0, #0]
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	08019ae8 	.word	0x08019ae8
 800263c:	0801a378 	.word	0x0801a378
 8002640:	08019d28 	.word	0x08019d28

08002644 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8002644:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002646:	888b      	ldrh	r3, [r1, #4]
 8002648:	0adb      	lsrs	r3, r3, #11
 800264a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800264e:	680b      	ldr	r3, [r1, #0]
}
 8002650:	4418      	add	r0, r3
 8002652:	4770      	bx	lr

08002654 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8002654:	4694      	mov	ip, r2
 8002656:	b1da      	cbz	r2, 8002690 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8002658:	7b13      	ldrb	r3, [r2, #12]
 800265a:	b1db      	cbz	r3, 8002694 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800265c:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800265e:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8002662:	0200      	lsls	r0, r0, #8
 8002664:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002668:	f89c c00b 	ldrb.w	ip, [ip, #11]
 800266c:	ea40 000c 	orr.w	r0, r0, ip
 8002670:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002674:	b29b      	uxth	r3, r3
 8002676:	b17b      	cbz	r3, 8002698 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002678:	8810      	ldrh	r0, [r2, #0]
 800267a:	4288      	cmp	r0, r1
 800267c:	d005      	beq.n	800268a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 800267e:	4288      	cmp	r0, r1
 8002680:	d80c      	bhi.n	800269c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002682:	3b01      	subs	r3, #1
 8002684:	b29b      	uxth	r3, r3
 8002686:	3204      	adds	r2, #4
 8002688:	e7f5      	b.n	8002676 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 800268a:	f992 0002 	ldrsb.w	r0, [r2, #2]
 800268e:	4770      	bx	lr
        return 0;
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr
 8002694:	2000      	movs	r0, #0
 8002696:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8002698:	2000      	movs	r0, #0
 800269a:	4770      	bx	lr
 800269c:	2000      	movs	r0, #0
}
 800269e:	4770      	bx	lr

080026a0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80026a0:	b510      	push	{r4, lr}
 80026a2:	4604      	mov	r4, r0
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 80026a6:	6003      	str	r3, [r0, #0]
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 80026aa:	6003      	str	r3, [r0, #0]
    {
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 80026ae:	6003      	str	r3, [r0, #0]
 80026b0:	2128      	movs	r1, #40	; 0x28
 80026b2:	f015 fa60 	bl	8017b76 <_ZdlPvj>
 80026b6:	4620      	mov	r0, r4
 80026b8:	bd10      	pop	{r4, pc}
 80026ba:	bf00      	nop
 80026bc:	08019ae8 	.word	0x08019ae8
 80026c0:	0801a378 	.word	0x0801a378
 80026c4:	08019d28 	.word	0x08019d28

080026c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80026c8:	b530      	push	{r4, r5, lr}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80026ce:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80026d2:	9506      	str	r5, [sp, #24]
 80026d4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80026d8:	9505      	str	r5, [sp, #20]
 80026da:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80026de:	9504      	str	r5, [sp, #16]
 80026e0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80026e4:	9503      	str	r5, [sp, #12]
 80026e6:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80026ea:	9502      	str	r5, [sp, #8]
 80026ec:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80026f0:	9501      	str	r5, [sp, #4]
 80026f2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80026f6:	9500      	str	r5, [sp, #0]
 80026f8:	f00b fd5e 	bl	800e1b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 80026fe:	6023      	str	r3, [r4, #0]
 8002700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002702:	61a3      	str	r3, [r4, #24]
 8002704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002706:	61e3      	str	r3, [r4, #28]
 8002708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800270a:	6223      	str	r3, [r4, #32]
 800270c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800270e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002710:	4620      	mov	r0, r4
 8002712:	b009      	add	sp, #36	; 0x24
 8002714:	bd30      	pop	{r4, r5, pc}
 8002716:	bf00      	nop
 8002718:	08019ae8 	.word	0x08019ae8

0800271c <__tcf_0>:
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <__tcf_0+0x10>)
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__tcf_0+0x14>)
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__tcf_0+0x18>)
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	4a04      	ldr	r2, [pc, #16]	; (8002738 <__tcf_0+0x1c>)
 8002728:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800272a:	4770      	bx	lr
 800272c:	24001440 	.word	0x24001440
 8002730:	08019ae8 	.word	0x08019ae8
 8002734:	0801a378 	.word	0x0801a378
 8002738:	08019d28 	.word	0x08019d28

0800273c <_Z23getFont_verdana_10_4bppv>:
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <_Z23getFont_verdana_10_4bppv+0x60>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f3bf 8f5b 	dmb	ish
 8002744:	f013 0f01 	tst.w	r3, #1
 8002748:	d001      	beq.n	800274e <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 800274a:	4815      	ldr	r0, [pc, #84]	; (80027a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800274c:	4770      	bx	lr
{
 800274e:	b500      	push	{lr}
 8002750:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002752:	4812      	ldr	r0, [pc, #72]	; (800279c <_Z23getFont_verdana_10_4bppv+0x60>)
 8002754:	f015 fa11 	bl	8017b7a <__cxa_guard_acquire>
 8002758:	b918      	cbnz	r0, 8002762 <_Z23getFont_verdana_10_4bppv+0x26>
}
 800275a:	4811      	ldr	r0, [pc, #68]	; (80027a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800275c:	b00d      	add	sp, #52	; 0x34
 800275e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002762:	2300      	movs	r3, #0
 8002764:	930a      	str	r3, [sp, #40]	; 0x28
 8002766:	9309      	str	r3, [sp, #36]	; 0x24
 8002768:	9308      	str	r3, [sp, #32]
 800276a:	223f      	movs	r2, #63	; 0x3f
 800276c:	9207      	str	r2, [sp, #28]
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002770:	9206      	str	r2, [sp, #24]
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002774:	9205      	str	r2, [sp, #20]
 8002776:	9304      	str	r3, [sp, #16]
 8002778:	9303      	str	r3, [sp, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	9202      	str	r2, [sp, #8]
 800277e:	2104      	movs	r1, #4
 8002780:	9101      	str	r1, [sp, #4]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	230a      	movs	r3, #10
 8002786:	4909      	ldr	r1, [pc, #36]	; (80027ac <_Z23getFont_verdana_10_4bppv+0x70>)
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800278a:	f7ff ff9d 	bl	80026c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800278e:	4808      	ldr	r0, [pc, #32]	; (80027b0 <_Z23getFont_verdana_10_4bppv+0x74>)
 8002790:	f015 fa3e 	bl	8017c10 <atexit>
 8002794:	4801      	ldr	r0, [pc, #4]	; (800279c <_Z23getFont_verdana_10_4bppv+0x60>)
 8002796:	f015 f9fc 	bl	8017b92 <__cxa_guard_release>
 800279a:	e7de      	b.n	800275a <_Z23getFont_verdana_10_4bppv+0x1e>
 800279c:	2400143c 	.word	0x2400143c
 80027a0:	24001440 	.word	0x24001440
 80027a4:	0801a6f8 	.word	0x0801a6f8
 80027a8:	0801a704 	.word	0x0801a704
 80027ac:	90000178 	.word	0x90000178
 80027b0:	0800271d 	.word	0x0800271d

080027b4 <__tcf_0>:
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <__tcf_0+0x10>)
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__tcf_0+0x14>)
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <__tcf_0+0x18>)
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__tcf_0+0x1c>)
 80027c0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80027c2:	4770      	bx	lr
 80027c4:	2400146c 	.word	0x2400146c
 80027c8:	08019ae8 	.word	0x08019ae8
 80027cc:	0801a378 	.word	0x0801a378
 80027d0:	08019d28 	.word	0x08019d28

080027d4 <_Z23getFont_verdana_20_4bppv>:
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <_Z23getFont_verdana_20_4bppv+0x60>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f3bf 8f5b 	dmb	ish
 80027dc:	f013 0f01 	tst.w	r3, #1
 80027e0:	d001      	beq.n	80027e6 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 80027e2:	4815      	ldr	r0, [pc, #84]	; (8002838 <_Z23getFont_verdana_20_4bppv+0x64>)
 80027e4:	4770      	bx	lr
{
 80027e6:	b500      	push	{lr}
 80027e8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80027ea:	4812      	ldr	r0, [pc, #72]	; (8002834 <_Z23getFont_verdana_20_4bppv+0x60>)
 80027ec:	f015 f9c5 	bl	8017b7a <__cxa_guard_acquire>
 80027f0:	b918      	cbnz	r0, 80027fa <_Z23getFont_verdana_20_4bppv+0x26>
}
 80027f2:	4811      	ldr	r0, [pc, #68]	; (8002838 <_Z23getFont_verdana_20_4bppv+0x64>)
 80027f4:	b00d      	add	sp, #52	; 0x34
 80027f6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80027fa:	2300      	movs	r3, #0
 80027fc:	930a      	str	r3, [sp, #40]	; 0x28
 80027fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002800:	9308      	str	r3, [sp, #32]
 8002802:	223f      	movs	r2, #63	; 0x3f
 8002804:	9207      	str	r2, [sp, #28]
 8002806:	4a0d      	ldr	r2, [pc, #52]	; (800283c <_Z23getFont_verdana_20_4bppv+0x68>)
 8002808:	9206      	str	r2, [sp, #24]
 800280a:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800280c:	9205      	str	r2, [sp, #20]
 800280e:	9304      	str	r3, [sp, #16]
 8002810:	9303      	str	r3, [sp, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	9202      	str	r2, [sp, #8]
 8002816:	2104      	movs	r1, #4
 8002818:	9101      	str	r1, [sp, #4]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2314      	movs	r3, #20
 800281e:	4909      	ldr	r1, [pc, #36]	; (8002844 <_Z23getFont_verdana_20_4bppv+0x70>)
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002822:	f7ff ff51 	bl	80026c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002826:	4808      	ldr	r0, [pc, #32]	; (8002848 <_Z23getFont_verdana_20_4bppv+0x74>)
 8002828:	f015 f9f2 	bl	8017c10 <atexit>
 800282c:	4801      	ldr	r0, [pc, #4]	; (8002834 <_Z23getFont_verdana_20_4bppv+0x60>)
 800282e:	f015 f9b0 	bl	8017b92 <__cxa_guard_release>
 8002832:	e7de      	b.n	80027f2 <_Z23getFont_verdana_20_4bppv+0x1e>
 8002834:	24001468 	.word	0x24001468
 8002838:	2400146c 	.word	0x2400146c
 800283c:	0801a6fc 	.word	0x0801a6fc
 8002840:	0801a708 	.word	0x0801a708
 8002844:	90000188 	.word	0x90000188
 8002848:	080027b5 	.word	0x080027b5

0800284c <__tcf_0>:
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <__tcf_0+0x10>)
 800284e:	4a04      	ldr	r2, [pc, #16]	; (8002860 <__tcf_0+0x14>)
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__tcf_0+0x18>)
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__tcf_0+0x1c>)
 8002858:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800285a:	4770      	bx	lr
 800285c:	24001498 	.word	0x24001498
 8002860:	08019ae8 	.word	0x08019ae8
 8002864:	0801a378 	.word	0x0801a378
 8002868:	08019d28 	.word	0x08019d28

0800286c <_Z23getFont_verdana_40_4bppv>:
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <_Z23getFont_verdana_40_4bppv+0x60>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f3bf 8f5b 	dmb	ish
 8002874:	f013 0f01 	tst.w	r3, #1
 8002878:	d001      	beq.n	800287e <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 800287a:	4815      	ldr	r0, [pc, #84]	; (80028d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 800287c:	4770      	bx	lr
{
 800287e:	b500      	push	{lr}
 8002880:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002882:	4812      	ldr	r0, [pc, #72]	; (80028cc <_Z23getFont_verdana_40_4bppv+0x60>)
 8002884:	f015 f979 	bl	8017b7a <__cxa_guard_acquire>
 8002888:	b918      	cbnz	r0, 8002892 <_Z23getFont_verdana_40_4bppv+0x26>
}
 800288a:	4811      	ldr	r0, [pc, #68]	; (80028d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 800288c:	b00d      	add	sp, #52	; 0x34
 800288e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002892:	2300      	movs	r3, #0
 8002894:	930a      	str	r3, [sp, #40]	; 0x28
 8002896:	9309      	str	r3, [sp, #36]	; 0x24
 8002898:	9308      	str	r3, [sp, #32]
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	9207      	str	r2, [sp, #28]
 800289e:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <_Z23getFont_verdana_40_4bppv+0x68>)
 80028a0:	9206      	str	r2, [sp, #24]
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80028a4:	9205      	str	r2, [sp, #20]
 80028a6:	9304      	str	r3, [sp, #16]
 80028a8:	9303      	str	r3, [sp, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	9202      	str	r2, [sp, #8]
 80028ae:	2104      	movs	r1, #4
 80028b0:	9101      	str	r1, [sp, #4]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2328      	movs	r3, #40	; 0x28
 80028b6:	4909      	ldr	r1, [pc, #36]	; (80028dc <_Z23getFont_verdana_40_4bppv+0x70>)
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 80028ba:	f7ff ff05 	bl	80026c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80028be:	4808      	ldr	r0, [pc, #32]	; (80028e0 <_Z23getFont_verdana_40_4bppv+0x74>)
 80028c0:	f015 f9a6 	bl	8017c10 <atexit>
 80028c4:	4801      	ldr	r0, [pc, #4]	; (80028cc <_Z23getFont_verdana_40_4bppv+0x60>)
 80028c6:	f015 f964 	bl	8017b92 <__cxa_guard_release>
 80028ca:	e7de      	b.n	800288a <_Z23getFont_verdana_40_4bppv+0x1e>
 80028cc:	24001494 	.word	0x24001494
 80028d0:	24001498 	.word	0x24001498
 80028d4:	0801a700 	.word	0x0801a700
 80028d8:	0801a70c 	.word	0x0801a70c
 80028dc:	90000198 	.word	0x90000198
 80028e0:	0800284d 	.word	0x0800284d

080028e4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 80028e4:	2000      	movs	r0, #0
 80028e6:	4770      	bx	lr

080028e8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80028e8:	2000      	movs	r0, #0
 80028ea:	4770      	bx	lr

080028ec <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80028ec:	2000      	movs	r0, #0
 80028ee:	4770      	bx	lr

080028f0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80028f0:	b40e      	push	{r1, r2, r3}
 80028f2:	b500      	push	{lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	ab03      	add	r3, sp, #12
 80028f8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80028fc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80028fe:	2100      	movs	r1, #0
 8002900:	f00b fa8a 	bl	800de18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002904:	b002      	add	sp, #8
 8002906:	f85d eb04 	ldr.w	lr, [sp], #4
 800290a:	b003      	add	sp, #12
 800290c:	4770      	bx	lr

0800290e <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800290e:	b40c      	push	{r2, r3}
 8002910:	b500      	push	{lr}
 8002912:	b083      	sub	sp, #12
 8002914:	ab04      	add	r3, sp, #16
 8002916:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800291a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800291c:	f00b fa7c 	bl	800de18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002920:	b003      	add	sp, #12
 8002922:	f85d eb04 	ldr.w	lr, [sp], #4
 8002926:	b002      	add	sp, #8
 8002928:	4770      	bx	lr
	...

0800292c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800292c:	b510      	push	{r4, lr}
 800292e:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002930:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002932:	b133      	cbz	r3, 8002942 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002934:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002936:	b143      	cbz	r3, 800294a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8002938:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800293a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800293e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002940:	b94b      	cbnz	r3, 8002956 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002942:	4620      	mov	r0, r4
 8002944:	f00c fba6 	bl	800f094 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8002948:	bd10      	pop	{r4, pc}
            assert(used > 0);
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 800294c:	4a1c      	ldr	r2, [pc, #112]	; (80029c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800294e:	21c0      	movs	r1, #192	; 0xc0
 8002950:	481c      	ldr	r0, [pc, #112]	; (80029c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8002952:	f015 f93f 	bl	8017bd4 <__assert_func>
        substituteGlyphs();
 8002956:	f00c fc9b 	bl	800f290 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800295a:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 800295c:	2801      	cmp	r0, #1
 800295e:	d91d      	bls.n	800299c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8002960:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8002962:	1c4b      	adds	r3, r1, #1
 8002964:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002966:	2b09      	cmp	r3, #9
 8002968:	d81e      	bhi.n	80029a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 800296a:	461a      	mov	r2, r3
 800296c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002970:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002974:	f640 123f 	movw	r2, #2367	; 0x93f
 8002978:	4594      	cmp	ip, r2
 800297a:	d1e2      	bne.n	8002942 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 800297c:	b1b8      	cbz	r0, 80029ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 800297e:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 8002982:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002984:	2b09      	cmp	r3, #9
 8002986:	d900      	bls.n	800298a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 8002988:	2300      	movs	r3, #0
 800298a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800298e:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002990:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002994:	f640 133f 	movw	r3, #2367	; 0x93f
 8002998:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 800299a:	e7d2      	b.n	8002942 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 800299e:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80029a0:	21c5      	movs	r1, #197	; 0xc5
 80029a2:	4808      	ldr	r0, [pc, #32]	; (80029c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80029a4:	f015 f916 	bl	8017bd4 <__assert_func>
            return buffer[index < size ? index : index - size];
 80029a8:	f1a3 020a 	sub.w	r2, r3, #10
 80029ac:	e7de      	b.n	800296c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80029ae:	4b03      	ldr	r3, [pc, #12]	; (80029bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80029b0:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80029b2:	21c0      	movs	r1, #192	; 0xc0
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80029b6:	f015 f90d 	bl	8017bd4 <__assert_func>
 80029ba:	bf00      	nop
 80029bc:	08019b38 	.word	0x08019b38
 80029c0:	08019b44 	.word	0x08019b44
 80029c4:	08019bf0 	.word	0x08019bf0
 80029c8:	08019c3c 	.word	0x08019c3c
 80029cc:	08019c4c 	.word	0x08019c4c

080029d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80029d0:	b508      	push	{r3, lr}
    fillInputBuffer();
 80029d2:	f00c fb28 	bl	800f026 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80029d6:	bd08      	pop	{r3, pc}

080029d8 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80029d8:	bb40      	cbnz	r0, 8002a2c <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80029da:	b538      	push	{r3, r4, r5, lr}
 80029dc:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80029e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029e4:	b1c3      	cbz	r3, 8002a18 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	4419      	add	r1, r3
 80029ea:	4812      	ldr	r0, [pc, #72]	; (8002a34 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80029ec:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	4419      	add	r1, r3
 80029f2:	4811      	ldr	r0, [pc, #68]	; (8002a38 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80029f4:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80029f6:	689c      	ldr	r4, [r3, #8]
 80029f8:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 80029fa:	b164      	cbz	r4, 8002a16 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80029fe:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002a00:	f000 f842 	bl	8002a88 <_ZN17TypedTextDatabase8getFontsEv>
 8002a04:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002a06:	f000 f83d 	bl	8002a84 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002a0c:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002a10:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002a14:	8018      	strh	r0, [r3, #0]
    }
}
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002a1a:	490c      	ldr	r1, [pc, #48]	; (8002a4c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002a1c:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002a20:	490b      	ldr	r1, [pc, #44]	; (8002a50 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8002a22:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8002a26:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002a2a:	e7e6      	b.n	80029fa <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	240014c0 	.word	0x240014c0
 8002a34:	240014c4 	.word	0x240014c4
 8002a38:	240014c8 	.word	0x240014c8
 8002a3c:	240014cc 	.word	0x240014cc
 8002a40:	2400ae54 	.word	0x2400ae54
 8002a44:	2400ae5c 	.word	0x2400ae5c
 8002a48:	2400ae58 	.word	0x2400ae58
 8002a4c:	900001ac 	.word	0x900001ac
 8002a50:	900001a8 	.word	0x900001a8
 8002a54:	900001b4 	.word	0x900001b4

08002a58 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002a58:	2801      	cmp	r0, #1
 8002a5a:	d000      	beq.n	8002a5e <_Z41__static_initialization_and_destruction_0ii+0x6>
 8002a5c:	4770      	bx	lr
 8002a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a62:	4299      	cmp	r1, r3
 8002a64:	d1fa      	bne.n	8002a5c <_Z41__static_initialization_and_destruction_0ii+0x4>
 8002a66:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8002a68:	f7ff feb4 	bl	80027d4 <_Z23getFont_verdana_20_4bppv>
};
 8002a6c:	4c04      	ldr	r4, [pc, #16]	; (8002a80 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002a6e:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002a70:	f7ff fefc 	bl	800286c <_Z23getFont_verdana_40_4bppv>
};
 8002a74:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8002a76:	f7ff fe61 	bl	800273c <_Z23getFont_verdana_10_4bppv>
};
 8002a7a:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8002a7c:	bd10      	pop	{r4, pc}
 8002a7e:	bf00      	nop
 8002a80:	240014d0 	.word	0x240014d0

08002a84 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	4770      	bx	lr

08002a88 <_ZN17TypedTextDatabase8getFontsEv>:
}
 8002a88:	4800      	ldr	r0, [pc, #0]	; (8002a8c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002a8a:	4770      	bx	lr
 8002a8c:	240014d0 	.word	0x240014d0

08002a90 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8002a90:	b508      	push	{r3, lr}
 8002a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a96:	2001      	movs	r0, #1
 8002a98:	f7ff ffde 	bl	8002a58 <_Z41__static_initialization_and_destruction_0ii>
 8002a9c:	bd08      	pop	{r3, pc}

08002a9e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8002a9e:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8002aa0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002aa4:	b113      	cbz	r3, 8002aac <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 8002aa6:	6803      	ldr	r3, [r0, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4798      	blx	r3
        }
    }
 8002aac:	bd08      	pop	{r3, pc}

08002aae <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002aae:	2000      	movs	r0, #0
 8002ab0:	4770      	bx	lr

08002ab2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002ab2:	8081      	strh	r1, [r0, #4]
    }
 8002ab4:	4770      	bx	lr

08002ab6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002ab6:	80c1      	strh	r1, [r0, #6]
    }
 8002ab8:	4770      	bx	lr

08002aba <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002aba:	8101      	strh	r1, [r0, #8]
    }
 8002abc:	4770      	bx	lr

08002abe <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002abe:	8141      	strh	r1, [r0, #10]
    }
 8002ac0:	4770      	bx	lr

08002ac2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002ac2:	4770      	bx	lr

08002ac4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002ac4:	4770      	bx	lr

08002ac6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002ac6:	4770      	bx	lr

08002ac8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002ac8:	4770      	bx	lr

08002aca <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002aca:	4770      	bx	lr

08002acc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002acc:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002ace:	6804      	ldr	r4, [r0, #0]
 8002ad0:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8002ad2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002ad6:	eba1 010c 	sub.w	r1, r1, ip
 8002ada:	88c3      	ldrh	r3, [r0, #6]
 8002adc:	1ad2      	subs	r2, r2, r3
 8002ade:	b212      	sxth	r2, r2
 8002ae0:	b209      	sxth	r1, r1
 8002ae2:	47a0      	blx	r4
    }
 8002ae4:	bd10      	pop	{r4, pc}

08002ae6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aea:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002aec:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8002aee:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002af0:	6813      	ldr	r3, [r2, #0]
 8002af2:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002af4:	6010      	str	r0, [r2, #0]
    }
 8002af6:	4770      	bx	lr

08002af8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002af8:	4770      	bx	lr

08002afa <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002afa:	4770      	bx	lr

08002afc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002afc:	4770      	bx	lr

08002afe <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002afe:	4770      	bx	lr

08002b00 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002b00:	4770      	bx	lr

08002b02 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8002b02:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002b06:	b11a      	cbz	r2, 8002b10 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8002b08:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002b0c:	b102      	cbz	r2, 8002b10 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002b0e:	6018      	str	r0, [r3, #0]
        }
    }
 8002b10:	4770      	bx	lr
	...

08002b14 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8002b16:	6002      	str	r2, [r0, #0]
    {
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 8002b1a:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 8002b1e:	6042      	str	r2, [r0, #4]
    {
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 8002b22:	6042      	str	r2, [r0, #4]
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	08019de4 	.word	0x08019de4
 8002b2c:	0801a40c 	.word	0x0801a40c
 8002b30:	08019fb0 	.word	0x08019fb0
 8002b34:	0801a310 	.word	0x0801a310

08002b38 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8002b38:	b410      	push	{r4}
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <_ZN18mainScreenViewBaseD1Ev+0x30>)
 8002b3c:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <_ZN18mainScreenViewBaseD1Ev+0x34>)
 8002b40:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 8002b42:	490b      	ldr	r1, [pc, #44]	; (8002b70 <_ZN18mainScreenViewBaseD1Ev+0x38>)
 8002b44:	66c1      	str	r1, [r0, #108]	; 0x6c
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 8002b48:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 8002b4a:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <_ZN18mainScreenViewBaseD1Ev+0x40>)
 8002b4c:	6404      	str	r4, [r0, #64]	; 0x40
 8002b4e:	6401      	str	r1, [r0, #64]	; 0x40
 8002b50:	6402      	str	r2, [r0, #64]	; 0x40
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <_ZN18mainScreenViewBaseD1Ev+0x44>)
 8002b54:	6001      	str	r1, [r0, #0]
 8002b56:	490a      	ldr	r1, [pc, #40]	; (8002b80 <_ZN18mainScreenViewBaseD1Ev+0x48>)
 8002b58:	6001      	str	r1, [r0, #0]
 8002b5a:	490a      	ldr	r1, [pc, #40]	; (8002b84 <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 8002b5c:	6041      	str	r1, [r0, #4]
 8002b5e:	6042      	str	r2, [r0, #4]
 8002b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	08019e18 	.word	0x08019e18
 8002b6c:	0801a200 	.word	0x0801a200
 8002b70:	08019d7c 	.word	0x08019d7c
 8002b74:	0801a310 	.word	0x0801a310
 8002b78:	0801a198 	.word	0x0801a198
 8002b7c:	08019de4 	.word	0x08019de4
 8002b80:	0801a40c 	.word	0x0801a40c
 8002b84:	08019fb0 	.word	0x08019fb0

08002b88 <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 8002b88:	4770      	bx	lr
	...

08002b8c <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 8002b92:	6003      	str	r3, [r0, #0]
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 8002b96:	6003      	str	r3, [r0, #0]
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 8002b9a:	6043      	str	r3, [r0, #4]
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 8002b9e:	6043      	str	r3, [r0, #4]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	f014 ffe8 	bl	8017b76 <_ZdlPvj>
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	bf00      	nop
 8002bac:	08019de4 	.word	0x08019de4
 8002bb0:	0801a40c 	.word	0x0801a40c
 8002bb4:	08019fb0 	.word	0x08019fb0
 8002bb8:	0801a310 	.word	0x0801a310

08002bbc <_ZN18mainScreenViewBaseD0Ev>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <_ZN18mainScreenViewBaseD0Ev+0x34>)
 8002bc2:	6003      	str	r3, [r0, #0]
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <_ZN18mainScreenViewBaseD0Ev+0x38>)
 8002bc6:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002bc8:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 8002bca:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <_ZN18mainScreenViewBaseD0Ev+0x40>)
 8002bce:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002bd0:	490b      	ldr	r1, [pc, #44]	; (8002c00 <_ZN18mainScreenViewBaseD0Ev+0x44>)
 8002bd2:	6401      	str	r1, [r0, #64]	; 0x40
 8002bd4:	6402      	str	r2, [r0, #64]	; 0x40
 8002bd6:	6403      	str	r3, [r0, #64]	; 0x40
 8002bd8:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <_ZN18mainScreenViewBaseD0Ev+0x48>)
 8002bda:	6002      	str	r2, [r0, #0]
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 8002bde:	6002      	str	r2, [r0, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <_ZN18mainScreenViewBaseD0Ev+0x50>)
 8002be2:	6042      	str	r2, [r0, #4]
 8002be4:	6043      	str	r3, [r0, #4]
 8002be6:	2198      	movs	r1, #152	; 0x98
 8002be8:	f014 ffc5 	bl	8017b76 <_ZdlPvj>
 8002bec:	4620      	mov	r0, r4
 8002bee:	bd10      	pop	{r4, pc}
 8002bf0:	08019e18 	.word	0x08019e18
 8002bf4:	0801a200 	.word	0x0801a200
 8002bf8:	08019d7c 	.word	0x08019d7c
 8002bfc:	0801a310 	.word	0x0801a310
 8002c00:	0801a198 	.word	0x0801a198
 8002c04:	08019de4 	.word	0x08019de4
 8002c08:	0801a40c 	.word	0x0801a40c
 8002c0c:	08019fb0 	.word	0x08019fb0

08002c10 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c14:	b083      	sub	sp, #12
 8002c16:	4607      	mov	r7, r0
        : presenter(0)
 8002c18:	f00b fcc2 	bl	800e5a0 <_ZN8touchgfx6ScreenC1Ev>
 8002c1c:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	2400      	movs	r4, #0
 8002c22:	63fc      	str	r4, [r7, #60]	; 0x3c
 8002c24:	463d      	mov	r5, r7
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <_ZN18mainScreenViewBaseC1Ev+0x130>)
 8002c28:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002c2c:	f04f 0926 	mov.w	r9, #38	; 0x26
 8002c30:	464a      	mov	r2, r9
 8002c32:	4621      	mov	r1, r4
 8002c34:	4628      	mov	r0, r5
 8002c36:	f015 f953 	bl	8017ee0 <memset>
          visible(true)
 8002c3a:	f8df b114 	ldr.w	fp, [pc, #276]	; 8002d50 <_ZN18mainScreenViewBaseC1Ev+0x140>
 8002c3e:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
 8002c42:	80ac      	strh	r4, [r5, #4]
 8002c44:	80ec      	strh	r4, [r5, #6]
 8002c46:	812c      	strh	r4, [r5, #8]
 8002c48:	816c      	strh	r4, [r5, #10]
 8002c4a:	81ac      	strh	r4, [r5, #12]
 8002c4c:	81ec      	strh	r4, [r5, #14]
 8002c4e:	822c      	strh	r4, [r5, #16]
 8002c50:	826c      	strh	r4, [r5, #18]
 8002c52:	616c      	str	r4, [r5, #20]
 8002c54:	61ac      	str	r4, [r5, #24]
 8002c56:	61ec      	str	r4, [r5, #28]
 8002c58:	842c      	strh	r4, [r5, #32]
 8002c5a:	846c      	strh	r4, [r5, #34]	; 0x22
 8002c5c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8002c60:	f04f 0a01 	mov.w	sl, #1
 8002c64:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 8002c68:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c6c:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <_ZN18mainScreenViewBaseC1Ev+0x138>)
 8002c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c70:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8002c74:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 8002c78:	62ac      	str	r4, [r5, #40]	; 0x28
 8002c7a:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c82:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002c86:	464a      	mov	r2, r9
 8002c88:	4621      	mov	r1, r4
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f015 f928 	bl	8017ee0 <memset>
 8002c90:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8002c94:	80b4      	strh	r4, [r6, #4]
 8002c96:	80f4      	strh	r4, [r6, #6]
 8002c98:	8134      	strh	r4, [r6, #8]
 8002c9a:	8174      	strh	r4, [r6, #10]
 8002c9c:	81b4      	strh	r4, [r6, #12]
 8002c9e:	81f4      	strh	r4, [r6, #14]
 8002ca0:	8234      	strh	r4, [r6, #16]
 8002ca2:	8274      	strh	r4, [r6, #18]
 8002ca4:	6174      	str	r4, [r6, #20]
 8002ca6:	61b4      	str	r4, [r6, #24]
 8002ca8:	61f4      	str	r4, [r6, #28]
 8002caa:	8434      	strh	r4, [r6, #32]
 8002cac:	8474      	strh	r4, [r6, #34]	; 0x22
 8002cae:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8002cb2:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 8002cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cbe:	f8bd 3000 	ldrh.w	r3, [sp]
 8002cc2:	84f3      	strh	r3, [r6, #38]	; 0x26
 8002cc4:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8002cc8:	4669      	mov	r1, sp
 8002cca:	4630      	mov	r0, r6
 8002ccc:	f009 f911 	bl	800bef2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8002cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	4798      	blx	r3
        setY(y);
 8002cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	4798      	blx	r3
        setWidth(width);
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002cec:	4628      	mov	r0, r5
 8002cee:	4798      	blx	r3
        setHeight(height);
 8002cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	4798      	blx	r3
        : color(col)
 8002cfc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002d00:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 8002d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4621      	mov	r1, r4
 8002d08:	4630      	mov	r0, r6
 8002d0a:	4798      	blx	r3
        setY(y);
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	4621      	mov	r1, r4
 8002d12:	4630      	mov	r0, r6
 8002d14:	4798      	blx	r3
 8002d16:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8002d1a:	a901      	add	r1, sp, #4
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f009 f8e8 	bl	800bef2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002d22:	1d3c      	adds	r4, r7, #4
 8002d24:	4629      	mov	r1, r5
 8002d26:	4620      	mov	r0, r4
 8002d28:	f007 fefe 	bl	800ab28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002d2c:	4631      	mov	r1, r6
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f007 fefa 	bl	800ab28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002d34:	4638      	mov	r0, r7
 8002d36:	b003      	add	sp, #12
 8002d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3c:	08019de4 	.word	0x08019de4
 8002d40:	08019e18 	.word	0x08019e18
 8002d44:	08019d7c 	.word	0x08019d7c
 8002d48:	0801a198 	.word	0x0801a198
 8002d4c:	0801a200 	.word	0x0801a200
 8002d50:	0801a310 	.word	0x0801a310

08002d54 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8002d54:	b510      	push	{r4, lr}
 8002d56:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002d58:	f7ff fb3e 	bl	80023d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002d5c:	4b01      	ldr	r3, [pc, #4]	; (8002d64 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8002d5e:	6023      	str	r3, [r4, #0]
{

}
 8002d60:	4620      	mov	r0, r4
 8002d62:	bd10      	pop	{r4, pc}
 8002d64:	08019504 	.word	0x08019504

08002d68 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	6002      	str	r2, [r0, #0]
{

}
 8002d6c:	4770      	bx	lr

08002d6e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8002d6e:	4770      	bx	lr

08002d70 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8002d70:	4770      	bx	lr

08002d72 <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 8002d72:	4770      	bx	lr

08002d74 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 8002d74:	4b01      	ldr	r3, [pc, #4]	; (8002d7c <_ZN8touchgfx9PresenterD1Ev+0x8>)
 8002d76:	6003      	str	r3, [r0, #0]
    }
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	08019e4c 	.word	0x08019e4c

08002d80 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <_ZN13ModelListenerD1Ev+0x8>)
 8002d82:	6003      	str	r3, [r0, #0]
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	08019e64 	.word	0x08019e64

08002d8c <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8002d8c:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <_ZN19mainScreenPresenterD1Ev+0x18>)
 8002d8e:	f102 0108 	add.w	r1, r2, #8
 8002d92:	6001      	str	r1, [r0, #0]
 8002d94:	3220      	adds	r2, #32
 8002d96:	6042      	str	r2, [r0, #4]
 8002d98:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 8002d9a:	6042      	str	r2, [r0, #4]
    {
 8002d9c:	4a03      	ldr	r2, [pc, #12]	; (8002dac <_ZN19mainScreenPresenterD1Ev+0x20>)
 8002d9e:	6002      	str	r2, [r0, #0]
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	08019e6c 	.word	0x08019e6c
 8002da8:	08019e64 	.word	0x08019e64
 8002dac:	08019e4c 	.word	0x08019e4c

08002db0 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8002db0:	4603      	mov	r3, r0
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 8002db4:	f102 0108 	add.w	r1, r2, #8
 8002db8:	f840 1c04 	str.w	r1, [r0, #-4]
 8002dbc:	3220      	adds	r2, #32
 8002dbe:	f840 2904 	str.w	r2, [r0], #-4
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 8002dc4:	6042      	str	r2, [r0, #4]
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 8002dc8:	f843 2c04 	str.w	r2, [r3, #-4]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	08019e6c 	.word	0x08019e6c
 8002dd4:	08019e64 	.word	0x08019e64
 8002dd8:	08019e4c 	.word	0x08019e4c

08002ddc <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 8002ddc:	4770      	bx	lr

08002dde <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 8002dde:	4770      	bx	lr

08002de0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
    {
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 8002de6:	6003      	str	r3, [r0, #0]
    }
 8002de8:	2104      	movs	r1, #4
 8002dea:	f014 fec4 	bl	8017b76 <_ZdlPvj>
 8002dee:	4620      	mov	r0, r4
 8002df0:	bd10      	pop	{r4, pc}
 8002df2:	bf00      	nop
 8002df4:	08019e4c 	.word	0x08019e4c

08002df8 <_ZN13ModelListenerD0Ev>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <_ZN13ModelListenerD0Ev+0x14>)
 8002dfe:	6003      	str	r3, [r0, #0]
 8002e00:	2108      	movs	r1, #8
 8002e02:	f014 feb8 	bl	8017b76 <_ZdlPvj>
 8002e06:	4620      	mov	r0, r4
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	bf00      	nop
 8002e0c:	08019e64 	.word	0x08019e64

08002e10 <_ZN19mainScreenPresenterD0Ev>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4604      	mov	r4, r0
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8002e16:	f103 0208 	add.w	r2, r3, #8
 8002e1a:	6002      	str	r2, [r0, #0]
 8002e1c:	3320      	adds	r3, #32
 8002e1e:	6043      	str	r3, [r0, #4]
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <_ZN19mainScreenPresenterD0Ev+0x28>)
 8002e22:	6043      	str	r3, [r0, #4]
    {
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8002e26:	6003      	str	r3, [r0, #0]
 8002e28:	2110      	movs	r1, #16
 8002e2a:	f014 fea4 	bl	8017b76 <_ZdlPvj>
 8002e2e:	4620      	mov	r0, r4
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	bf00      	nop
 8002e34:	08019e6c 	.word	0x08019e6c
 8002e38:	08019e64 	.word	0x08019e64
 8002e3c:	08019e4c 	.word	0x08019e4c

08002e40 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4604      	mov	r4, r0
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 8002e46:	f103 0208 	add.w	r2, r3, #8
 8002e4a:	f840 2c04 	str.w	r2, [r0, #-4]
 8002e4e:	3320      	adds	r3, #32
 8002e50:	f844 3904 	str.w	r3, [r4], #-4
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 8002e56:	6063      	str	r3, [r4, #4]
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 8002e5a:	f840 3c04 	str.w	r3, [r0, #-4]
 8002e5e:	2110      	movs	r1, #16
 8002e60:	4620      	mov	r0, r4
 8002e62:	f014 fe88 	bl	8017b76 <_ZdlPvj>
 8002e66:	4620      	mov	r0, r4
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08019e6c 	.word	0x08019e6c
 8002e70:	08019e64 	.word	0x08019e64
 8002e74:	08019e4c 	.word	0x08019e4c

08002e78 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8002e78:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8002e7c:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 8002e7e:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 8002e80:	6042      	str	r2, [r0, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	6082      	str	r2, [r0, #8]
    : view(v)
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8002e88:	f102 0408 	add.w	r4, r2, #8
 8002e8c:	6004      	str	r4, [r0, #0]
 8002e8e:	3220      	adds	r2, #32
 8002e90:	6042      	str	r2, [r0, #4]
 8002e92:	60c1      	str	r1, [r0, #12]
}
 8002e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	08019e4c 	.word	0x08019e4c
 8002ea0:	08019e64 	.word	0x08019e64
 8002ea4:	08019e6c 	.word	0x08019e6c

08002ea8 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8002ea8:	b410      	push	{r4}
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <_ZN14mainScreenViewD1Ev+0x34>)
 8002eac:	6002      	str	r2, [r0, #0]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <_ZN14mainScreenViewD1Ev+0x38>)
 8002eb0:	6002      	str	r2, [r0, #0]
class Image : public Widget
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <_ZN14mainScreenViewD1Ev+0x3c>)
 8002eb4:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002eb6:	490c      	ldr	r1, [pc, #48]	; (8002ee8 <_ZN14mainScreenViewD1Ev+0x40>)
 8002eb8:	66c1      	str	r1, [r0, #108]	; 0x6c
    {
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <_ZN14mainScreenViewD1Ev+0x44>)
 8002ebc:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 8002ebe:	4c0c      	ldr	r4, [pc, #48]	; (8002ef0 <_ZN14mainScreenViewD1Ev+0x48>)
 8002ec0:	6404      	str	r4, [r0, #64]	; 0x40
 8002ec2:	6401      	str	r1, [r0, #64]	; 0x40
 8002ec4:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 8002ec6:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <_ZN14mainScreenViewD1Ev+0x4c>)
 8002ec8:	6001      	str	r1, [r0, #0]
    {
 8002eca:	490b      	ldr	r1, [pc, #44]	; (8002ef8 <_ZN14mainScreenViewD1Ev+0x50>)
 8002ecc:	6001      	str	r1, [r0, #0]
 8002ece:	490b      	ldr	r1, [pc, #44]	; (8002efc <_ZN14mainScreenViewD1Ev+0x54>)
 8002ed0:	6041      	str	r1, [r0, #4]
 8002ed2:	6042      	str	r2, [r0, #4]
 8002ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	08019e9c 	.word	0x08019e9c
 8002ee0:	08019e18 	.word	0x08019e18
 8002ee4:	0801a200 	.word	0x0801a200
 8002ee8:	08019d7c 	.word	0x08019d7c
 8002eec:	0801a310 	.word	0x0801a310
 8002ef0:	0801a198 	.word	0x0801a198
 8002ef4:	08019de4 	.word	0x08019de4
 8002ef8:	0801a40c 	.word	0x0801a40c
 8002efc:	08019fb0 	.word	0x08019fb0

08002f00 <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 8002f00:	4770      	bx	lr

08002f02 <_ZN14mainScreenView11setupScreenEv>:
{
 8002f02:	b508      	push	{r3, lr}
    mainScreenViewBase::setupScreen();
 8002f04:	f7ff fe40 	bl	8002b88 <_ZN18mainScreenViewBase11setupScreenEv>
}
 8002f08:	bd08      	pop	{r3, pc}
	...

08002f0c <_ZN14mainScreenViewD0Ev>:
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <_ZN14mainScreenViewD0Ev+0x38>)
 8002f12:	6003      	str	r3, [r0, #0]
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <_ZN14mainScreenViewD0Ev+0x3c>)
 8002f16:	6003      	str	r3, [r0, #0]
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <_ZN14mainScreenViewD0Ev+0x40>)
 8002f1a:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <_ZN14mainScreenViewD0Ev+0x44>)
 8002f1e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <_ZN14mainScreenViewD0Ev+0x48>)
 8002f22:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002f24:	490c      	ldr	r1, [pc, #48]	; (8002f58 <_ZN14mainScreenViewD0Ev+0x4c>)
 8002f26:	6401      	str	r1, [r0, #64]	; 0x40
 8002f28:	6402      	str	r2, [r0, #64]	; 0x40
 8002f2a:	6403      	str	r3, [r0, #64]	; 0x40
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <_ZN14mainScreenViewD0Ev+0x50>)
 8002f2e:	6002      	str	r2, [r0, #0]
 8002f30:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <_ZN14mainScreenViewD0Ev+0x54>)
 8002f32:	6002      	str	r2, [r0, #0]
 8002f34:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <_ZN14mainScreenViewD0Ev+0x58>)
 8002f36:	6042      	str	r2, [r0, #4]
 8002f38:	6043      	str	r3, [r0, #4]
 8002f3a:	2198      	movs	r1, #152	; 0x98
 8002f3c:	f014 fe1b 	bl	8017b76 <_ZdlPvj>
 8002f40:	4620      	mov	r0, r4
 8002f42:	bd10      	pop	{r4, pc}
 8002f44:	08019e9c 	.word	0x08019e9c
 8002f48:	08019e18 	.word	0x08019e18
 8002f4c:	0801a200 	.word	0x0801a200
 8002f50:	08019d7c 	.word	0x08019d7c
 8002f54:	0801a310 	.word	0x0801a310
 8002f58:	0801a198 	.word	0x0801a198
 8002f5c:	08019de4 	.word	0x08019de4
 8002f60:	0801a40c 	.word	0x0801a40c
 8002f64:	08019fb0 	.word	0x08019fb0

08002f68 <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView()
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	f7ff fe50 	bl	8002c10 <_ZN18mainScreenViewBaseC1Ev>
 8002f70:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <_ZN14mainScreenViewC1Ev+0x10>)
 8002f72:	6023      	str	r3, [r4, #0]
}
 8002f74:	4620      	mov	r0, r4
 8002f76:	bd10      	pop	{r4, pc}
 8002f78:	08019e9c 	.word	0x08019e9c

08002f7c <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8002f80:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002f82:	2305      	movs	r3, #5
 8002f84:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8002f86:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f8a:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002f8c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002f90:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8002f92:	2000      	movs	r0, #0
 8002f94:	4770      	bx	lr

08002f96 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8002f96:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8002fa8:	e7f9      	b.n	8002f9e <FT5336_DeInit+0x8>

08002faa <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002faa:	2000      	movs	r0, #0
 8002fac:	4770      	bx	lr

08002fae <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002fae:	2000      	movs	r0, #0
 8002fb0:	4770      	bx	lr

08002fb2 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fb2:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fb4:	6904      	ldr	r4, [r0, #16]
 8002fb6:	8900      	ldrh	r0, [r0, #8]
 8002fb8:	47a0      	blx	r4
}
 8002fba:	bd10      	pop	{r4, pc}

08002fbc <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fbc:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fbe:	68c4      	ldr	r4, [r0, #12]
 8002fc0:	8900      	ldrh	r0, [r0, #8]
 8002fc2:	47a0      	blx	r4
}
 8002fc4:	bd10      	pop	{r4, pc}

08002fc6 <FT5336_GestureConfig>:
{
 8002fc6:	b570      	push	{r4, r5, r6, lr}
 8002fc8:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002fca:	f100 0518 	add.w	r5, r0, #24
 8002fce:	7809      	ldrb	r1, [r1, #0]
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f91d 	bl	8003210 <ft5336_radian_value>
 8002fd6:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8002fd8:	7931      	ldrb	r1, [r6, #4]
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 f925 	bl	800322a <ft5336_offset_left_right>
 8002fe0:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8002fe2:	7a31      	ldrb	r1, [r6, #8]
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f000 f92d 	bl	8003244 <ft5336_offset_up_down>
 8002fea:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002fec:	7b31      	ldrb	r1, [r6, #12]
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f000 f935 	bl	800325e <ft5336_disatnce_left_right>
 8002ff4:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002ff6:	7c31      	ldrb	r1, [r6, #16]
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 f93d 	bl	8003278 <ft5336_distance_up_down>
 8002ffe:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003000:	7d31      	ldrb	r1, [r6, #20]
 8003002:	4628      	mov	r0, r5
 8003004:	f000 f945 	bl	8003292 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8003008:	1820      	adds	r0, r4, r0
 800300a:	d100      	bne.n	800300e <FT5336_GestureConfig+0x48>
}
 800300c:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 800300e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003012:	e7fb      	b.n	800300c <FT5336_GestureConfig+0x46>

08003014 <FT5336_ReadID>:
{
 8003014:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003016:	3018      	adds	r0, #24
 8003018:	f000 f955 	bl	80032c6 <ft5336_chip_id>
}
 800301c:	bd08      	pop	{r3, pc}

0800301e <FT5336_DetectTouch>:
{
 800301e:	b500      	push	{lr}
 8003020:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003022:	f10d 0107 	add.w	r1, sp, #7
 8003026:	3018      	adds	r0, #24
 8003028:	f000 f8e5 	bl	80031f6 <ft5336_td_status>
 800302c:	b938      	cbnz	r0, 800303e <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800302e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d800      	bhi.n	8003038 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 8003036:	4618      	mov	r0, r3
}
 8003038:	b003      	add	sp, #12
 800303a:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 800303e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003042:	e7f9      	b.n	8003038 <FT5336_DetectTouch+0x1a>

08003044 <FT5336_GetState>:
{
 8003044:	b530      	push	{r4, r5, lr}
 8003046:	b083      	sub	sp, #12
 8003048:	4605      	mov	r5, r0
 800304a:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800304c:	f7ff ffe7 	bl	800301e <FT5336_DetectTouch>
 8003050:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003052:	2304      	movs	r3, #4
 8003054:	eb0d 0203 	add.w	r2, sp, r3
 8003058:	2103      	movs	r1, #3
 800305a:	f105 0018 	add.w	r0, r5, #24
 800305e:	f000 f8b9 	bl	80031d4 <ft5336_read_reg>
 8003062:	b998      	cbnz	r0, 800308c <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003064:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800306e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003072:	4313      	orrs	r3, r2
 8003074:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003076:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003080:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003084:	4313      	orrs	r3, r2
 8003086:	60a3      	str	r3, [r4, #8]
}
 8003088:	b003      	add	sp, #12
 800308a:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003090:	e7fa      	b.n	8003088 <FT5336_GetState+0x44>

08003092 <FT5336_GetMultiTouchState>:
{
 8003092:	b530      	push	{r4, r5, lr}
 8003094:	b089      	sub	sp, #36	; 0x24
 8003096:	4604      	mov	r4, r0
 8003098:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800309a:	f7ff ffc0 	bl	800301e <FT5336_DetectTouch>
 800309e:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80030a0:	231e      	movs	r3, #30
 80030a2:	466a      	mov	r2, sp
 80030a4:	2103      	movs	r1, #3
 80030a6:	f104 0018 	add.w	r0, r4, #24
 80030aa:	f000 f893 	bl	80031d4 <ft5336_read_reg>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d146      	bne.n	8003140 <FT5336_GetMultiTouchState+0xae>
 80030b2:	4603      	mov	r3, r0
 80030b4:	e040      	b.n	8003138 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80030b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80030ba:	004a      	lsls	r2, r1, #1
 80030bc:	ac08      	add	r4, sp, #32
 80030be:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80030c2:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 80030c6:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80030ca:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80030ce:	f102 0421 	add.w	r4, r2, #33	; 0x21
 80030d2:	446c      	add	r4, sp
 80030d4:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 80030d8:	4321      	orrs	r1, r4
 80030da:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 80030de:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80030e0:	f102 0122 	add.w	r1, r2, #34	; 0x22
 80030e4:	4469      	add	r1, sp
 80030e6:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 80030ea:	0224      	lsls	r4, r4, #8
 80030ec:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80030f0:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80030f4:	4469      	add	r1, sp
 80030f6:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80030fa:	430c      	orrs	r4, r1
 80030fc:	1d99      	adds	r1, r3, #6
 80030fe:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003102:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8003106:	f103 0410 	add.w	r4, r3, #16
 800310a:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800310e:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8003112:	4469      	add	r1, sp
 8003114:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8003118:	f103 010a 	add.w	r1, r3, #10
 800311c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8003120:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003122:	3225      	adds	r2, #37	; 0x25
 8003124:	446a      	add	r2, sp
 8003126:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800312a:	0909      	lsrs	r1, r1, #4
 800312c:	f103 0214 	add.w	r2, r3, #20
 8003130:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8003134:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003136:	3301      	adds	r3, #1
 8003138:	2b04      	cmp	r3, #4
 800313a:	d9bc      	bls.n	80030b6 <FT5336_GetMultiTouchState+0x24>
}
 800313c:	b009      	add	sp, #36	; 0x24
 800313e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003144:	e7fa      	b.n	800313c <FT5336_GetMultiTouchState+0xaa>

08003146 <FT5336_GetGesture>:
{
 8003146:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003148:	3018      	adds	r0, #24
 800314a:	f000 f84d 	bl	80031e8 <ft5336_gest_id>
}
 800314e:	bd08      	pop	{r3, pc}

08003150 <FT5336_EnableIT>:
{
 8003150:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003152:	2101      	movs	r1, #1
 8003154:	3018      	adds	r0, #24
 8003156:	f000 f8a9 	bl	80032ac <ft5336_g_mode>
}
 800315a:	bd08      	pop	{r3, pc}

0800315c <FT5336_DisableIT>:
{
 800315c:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800315e:	2100      	movs	r1, #0
 8003160:	3018      	adds	r0, #24
 8003162:	f000 f8a3 	bl	80032ac <ft5336_g_mode>
}
 8003166:	bd08      	pop	{r3, pc}

08003168 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8003168:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800316c:	b95b      	cbnz	r3, 8003186 <FT5336_Init+0x1e>
{
 800316e:	b510      	push	{r4, lr}
 8003170:	4604      	mov	r4, r0
    pObj->IO.Init();
 8003172:	6803      	ldr	r3, [r0, #0]
 8003174:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8003176:	4620      	mov	r0, r4
 8003178:	f7ff fff0 	bl	800315c <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 800317c:	2201      	movs	r2, #1
 800317e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8003182:	b910      	cbnz	r0, 800318a <FT5336_Init+0x22>
}
 8003184:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8003186:	2000      	movs	r0, #0
}
 8003188:	4770      	bx	lr
    ret = FT5336_ERROR;
 800318a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800318e:	e7f9      	b.n	8003184 <FT5336_Init+0x1c>

08003190 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003190:	b1a8      	cbz	r0, 80031be <FT5336_RegisterBusIO+0x2e>
{
 8003192:	b508      	push	{r3, lr}
 8003194:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8003196:	680a      	ldr	r2, [r1, #0]
 8003198:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800319a:	6848      	ldr	r0, [r1, #4]
 800319c:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800319e:	8908      	ldrh	r0, [r1, #8]
 80031a0:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80031a2:	68c8      	ldr	r0, [r1, #12]
 80031a4:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80031a6:	6908      	ldr	r0, [r1, #16]
 80031a8:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80031aa:	6949      	ldr	r1, [r1, #20]
 80031ac:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80031ae:	4907      	ldr	r1, [pc, #28]	; (80031cc <FT5336_RegisterBusIO+0x3c>)
 80031b0:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80031b2:	4907      	ldr	r1, [pc, #28]	; (80031d0 <FT5336_RegisterBusIO+0x40>)
 80031b4:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80031b6:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 80031b8:	b122      	cbz	r2, 80031c4 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 80031ba:	4790      	blx	r2
}
 80031bc:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
}
 80031c2:	4770      	bx	lr
      ret = FT5336_ERROR;
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80031c8:	e7f8      	b.n	80031bc <FT5336_RegisterBusIO+0x2c>
 80031ca:	bf00      	nop
 80031cc:	08002fb3 	.word	0x08002fb3
 80031d0:	08002fbd 	.word	0x08002fbd

080031d4 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80031d4:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80031d6:	6844      	ldr	r4, [r0, #4]
 80031d8:	6880      	ldr	r0, [r0, #8]
 80031da:	47a0      	blx	r4
}
 80031dc:	bd10      	pop	{r4, pc}

080031de <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80031de:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80031e0:	6804      	ldr	r4, [r0, #0]
 80031e2:	6880      	ldr	r0, [r0, #8]
 80031e4:	47a0      	blx	r4
}
 80031e6:	bd10      	pop	{r4, pc}

080031e8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80031e8:	b508      	push	{r3, lr}
 80031ea:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80031ec:	2301      	movs	r3, #1
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7ff fff0 	bl	80031d4 <ft5336_read_reg>
}
 80031f4:	bd08      	pop	{r3, pc}

080031f6 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80031f6:	b510      	push	{r4, lr}
 80031f8:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80031fa:	2301      	movs	r3, #1
 80031fc:	460a      	mov	r2, r1
 80031fe:	2102      	movs	r1, #2
 8003200:	f7ff ffe8 	bl	80031d4 <ft5336_read_reg>
  
  if(ret == 0)
 8003204:	b918      	cbnz	r0, 800320e <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003206:	7823      	ldrb	r3, [r4, #0]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800320e:	bd10      	pop	{r4, pc}

08003210 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003210:	b500      	push	{lr}
 8003212:	b083      	sub	sp, #12
 8003214:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003218:	2301      	movs	r3, #1
 800321a:	f10d 0207 	add.w	r2, sp, #7
 800321e:	2191      	movs	r1, #145	; 0x91
 8003220:	f7ff ffdd 	bl	80031de <ft5336_write_reg>
}
 8003224:	b003      	add	sp, #12
 8003226:	f85d fb04 	ldr.w	pc, [sp], #4

0800322a <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800322a:	b500      	push	{lr}
 800322c:	b083      	sub	sp, #12
 800322e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003232:	2301      	movs	r3, #1
 8003234:	f10d 0207 	add.w	r2, sp, #7
 8003238:	2192      	movs	r1, #146	; 0x92
 800323a:	f7ff ffd0 	bl	80031de <ft5336_write_reg>
}
 800323e:	b003      	add	sp, #12
 8003240:	f85d fb04 	ldr.w	pc, [sp], #4

08003244 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003244:	b500      	push	{lr}
 8003246:	b083      	sub	sp, #12
 8003248:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800324c:	2301      	movs	r3, #1
 800324e:	f10d 0207 	add.w	r2, sp, #7
 8003252:	2193      	movs	r1, #147	; 0x93
 8003254:	f7ff ffc3 	bl	80031de <ft5336_write_reg>
}
 8003258:	b003      	add	sp, #12
 800325a:	f85d fb04 	ldr.w	pc, [sp], #4

0800325e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800325e:	b500      	push	{lr}
 8003260:	b083      	sub	sp, #12
 8003262:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003266:	2301      	movs	r3, #1
 8003268:	f10d 0207 	add.w	r2, sp, #7
 800326c:	2194      	movs	r1, #148	; 0x94
 800326e:	f7ff ffb6 	bl	80031de <ft5336_write_reg>
}
 8003272:	b003      	add	sp, #12
 8003274:	f85d fb04 	ldr.w	pc, [sp], #4

08003278 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003278:	b500      	push	{lr}
 800327a:	b083      	sub	sp, #12
 800327c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003280:	2301      	movs	r3, #1
 8003282:	f10d 0207 	add.w	r2, sp, #7
 8003286:	2195      	movs	r1, #149	; 0x95
 8003288:	f7ff ffa9 	bl	80031de <ft5336_write_reg>
}
 800328c:	b003      	add	sp, #12
 800328e:	f85d fb04 	ldr.w	pc, [sp], #4

08003292 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003292:	b500      	push	{lr}
 8003294:	b083      	sub	sp, #12
 8003296:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800329a:	2301      	movs	r3, #1
 800329c:	f10d 0207 	add.w	r2, sp, #7
 80032a0:	2196      	movs	r1, #150	; 0x96
 80032a2:	f7ff ff9c 	bl	80031de <ft5336_write_reg>
}
 80032a6:	b003      	add	sp, #12
 80032a8:	f85d fb04 	ldr.w	pc, [sp], #4

080032ac <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80032ac:	b500      	push	{lr}
 80032ae:	b083      	sub	sp, #12
 80032b0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80032b4:	2301      	movs	r3, #1
 80032b6:	f10d 0207 	add.w	r2, sp, #7
 80032ba:	21a4      	movs	r1, #164	; 0xa4
 80032bc:	f7ff ff8f 	bl	80031de <ft5336_write_reg>
}
 80032c0:	b003      	add	sp, #12
 80032c2:	f85d fb04 	ldr.w	pc, [sp], #4

080032c6 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80032c6:	b508      	push	{r3, lr}
 80032c8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80032ca:	2301      	movs	r3, #1
 80032cc:	21a8      	movs	r1, #168	; 0xa8
 80032ce:	f7ff ff81 	bl	80031d4 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 80032d2:	bd08      	pop	{r3, pc}

080032d4 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 80032d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032d8:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80032da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032de:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 80032e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e4:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 80032e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ea:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80032ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032f0:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80032f2:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80032f4:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 80032f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fa:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80032fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003300:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8003302:	2000      	movs	r0, #0
 8003304:	4770      	bx	lr

08003306 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003306:	b570      	push	{r4, r5, r6, lr}
 8003308:	b09a      	sub	sp, #104	; 0x68
 800330a:	4606      	mov	r6, r0
 800330c:	460c      	mov	r4, r1
 800330e:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003310:	2250      	movs	r2, #80	; 0x50
 8003312:	2100      	movs	r1, #0
 8003314:	a806      	add	r0, sp, #24
 8003316:	f014 fde3 	bl	8017ee0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800331a:	2300      	movs	r3, #0
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	9303      	str	r3, [sp, #12]
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003326:	429c      	cmp	r4, r3
 8003328:	bf08      	it	eq
 800332a:	2d01      	cmpeq	r5, #1
 800332c:	d061      	beq.n	80033f2 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800332e:	2c00      	cmp	r4, #0
 8003330:	d143      	bne.n	80033ba <MX25LM51245G_AutoPollingMemReady+0xb4>
 8003332:	2301      	movs	r3, #1
 8003334:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003336:	2d01      	cmp	r5, #1
 8003338:	d041      	beq.n	80033be <MX25LM51245G_AutoPollingMemReady+0xb8>
 800333a:	2300      	movs	r3, #0
 800333c:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800333e:	2c00      	cmp	r4, #0
 8003340:	d13f      	bne.n	80033c2 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8003342:	2300      	movs	r3, #0
 8003344:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003346:	2c00      	cmp	r4, #0
 8003348:	d13d      	bne.n	80033c6 <MX25LM51245G_AutoPollingMemReady+0xc0>
 800334a:	2305      	movs	r3, #5
 800334c:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800334e:	2c00      	cmp	r4, #0
 8003350:	d13c      	bne.n	80033cc <MX25LM51245G_AutoPollingMemReady+0xc6>
 8003352:	2300      	movs	r3, #0
 8003354:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003356:	2d01      	cmp	r5, #1
 8003358:	d03b      	beq.n	80033d2 <MX25LM51245G_AutoPollingMemReady+0xcc>
 800335a:	2300      	movs	r3, #0
 800335c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800335e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003362:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003364:	2c00      	cmp	r4, #0
 8003366:	d137      	bne.n	80033d8 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8003368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800336c:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800336e:	2d01      	cmp	r5, #1
 8003370:	d035      	beq.n	80033de <MX25LM51245G_AutoPollingMemReady+0xd8>
 8003372:	2300      	movs	r3, #0
 8003374:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003376:	bbac      	cbnz	r4, 80033e4 <MX25LM51245G_AutoPollingMemReady+0xde>
 8003378:	2300      	movs	r3, #0
 800337a:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800337c:	2d01      	cmp	r5, #1
 800337e:	d033      	beq.n	80033e8 <MX25LM51245G_AutoPollingMemReady+0xe2>
 8003380:	2301      	movs	r3, #1
 8003382:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003384:	2d01      	cmp	r5, #1
 8003386:	d031      	beq.n	80033ec <MX25LM51245G_AutoPollingMemReady+0xe6>
 8003388:	2300      	movs	r3, #0
 800338a:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800338c:	2301      	movs	r3, #1
 800338e:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8003390:	2310      	movs	r3, #16
 8003392:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003394:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003398:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	a906      	add	r1, sp, #24
 80033a0:	4630      	mov	r0, r6
 80033a2:	f002 ff9f 	bl	80062e4 <HAL_OSPI_Command>
 80033a6:	bb38      	cbnz	r0, 80033f8 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ac:	a901      	add	r1, sp, #4
 80033ae:	4630      	mov	r0, r6
 80033b0:	f003 f8a9 	bl	8006506 <HAL_OSPI_AutoPolling>
 80033b4:	bb18      	cbnz	r0, 80033fe <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80033b6:	b01a      	add	sp, #104	; 0x68
 80033b8:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033ba:	2304      	movs	r3, #4
 80033bc:	e7ba      	b.n	8003334 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033be:	2308      	movs	r3, #8
 80033c0:	e7bc      	b.n	800333c <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80033c2:	2310      	movs	r3, #16
 80033c4:	e7be      	b.n	8003344 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80033c6:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80033ca:	e7bf      	b.n	800334c <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80033cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d0:	e7c0      	b.n	8003354 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80033d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033d6:	e7c1      	b.n	800335c <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80033d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033dc:	e7c6      	b.n	800336c <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80033de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033e2:	e7c7      	b.n	8003374 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80033e4:	2305      	movs	r3, #5
 80033e6:	e7c8      	b.n	800337a <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80033e8:	2302      	movs	r3, #2
 80033ea:	e7ca      	b.n	8003382 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80033ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80033f0:	e7cb      	b.n	800338a <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 80033f2:	f04f 30ff 	mov.w	r0, #4294967295
 80033f6:	e7de      	b.n	80033b6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e7db      	b.n	80033b6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80033fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003402:	e7d8      	b.n	80033b6 <MX25LM51245G_AutoPollingMemReady+0xb0>

08003404 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	b096      	sub	sp, #88	; 0x58
 8003408:	4606      	mov	r6, r0
 800340a:	460c      	mov	r4, r1
 800340c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800340e:	2250      	movs	r2, #80	; 0x50
 8003410:	2100      	movs	r1, #0
 8003412:	a802      	add	r0, sp, #8
 8003414:	f014 fd64 	bl	8017ee0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003418:	2300      	movs	r3, #0
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800341e:	2c01      	cmp	r4, #1
 8003420:	bf08      	it	eq
 8003422:	429d      	cmpeq	r5, r3
 8003424:	d04e      	beq.n	80034c4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003426:	2301      	movs	r3, #1
 8003428:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800342a:	b104      	cbz	r4, 800342e <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 800342c:	2304      	movs	r3, #4
 800342e:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003430:	b92c      	cbnz	r4, 800343e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8003432:	2300      	movs	r3, #0
 8003434:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003436:	b924      	cbnz	r4, 8003442 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8003438:	bb15      	cbnz	r5, 8003480 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 800343a:	230b      	movs	r3, #11
 800343c:	e003      	b.n	8003446 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800343e:	2310      	movs	r3, #16
 8003440:	e7f8      	b.n	8003434 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003442:	f64e 4313 	movw	r3, #60435	; 0xec13
 8003446:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003448:	b9e4      	cbnz	r4, 8003484 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 800344a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800344e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003450:	b9dd      	cbnz	r5, 800348a <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8003452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003456:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003458:	b9d4      	cbnz	r4, 8003490 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800345a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800345e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003460:	b9cc      	cbnz	r4, 8003496 <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 8003462:	2308      	movs	r3, #8
 8003464:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	a902      	add	r1, sp, #8
 800346c:	4630      	mov	r0, r6
 800346e:	f002 ff39 	bl	80062e4 <HAL_OSPI_Command>
 8003472:	bb50      	cbnz	r0, 80034ca <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003474:	2302      	movs	r3, #2
 8003476:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003478:	b97c      	cbnz	r4, 800349a <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 800347a:	b185      	cbz	r5, 800349e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 800347c:	2312      	movs	r3, #18
 800347e:	e00e      	b.n	800349e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003480:	230c      	movs	r3, #12
 8003482:	e7e0      	b.n	8003446 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003488:	e7e1      	b.n	800344e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800348a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800348e:	e7e2      	b.n	8003456 <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003490:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003494:	e7e3      	b.n	800345e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003496:	2306      	movs	r3, #6
 8003498:	e7e4      	b.n	8003464 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800349a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800349e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	a902      	add	r1, sp, #8
 80034aa:	4630      	mov	r0, r6
 80034ac:	f002 ff1a 	bl	80062e4 <HAL_OSPI_Command>
 80034b0:	b970      	cbnz	r0, 80034d0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80034b6:	4669      	mov	r1, sp
 80034b8:	4630      	mov	r0, r6
 80034ba:	f003 f881 	bl	80065c0 <HAL_OSPI_MemoryMapped>
 80034be:	b950      	cbnz	r0, 80034d6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80034c0:	b016      	add	sp, #88	; 0x58
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	e7fa      	b.n	80034c0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80034ca:	f04f 30ff 	mov.w	r0, #4294967295
 80034ce:	e7f7      	b.n	80034c0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	e7f4      	b.n	80034c0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80034d6:	f04f 30ff 	mov.w	r0, #4294967295
 80034da:	e7f1      	b.n	80034c0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

080034dc <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80034dc:	b510      	push	{r4, lr}
 80034de:	b096      	sub	sp, #88	; 0x58
 80034e0:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80034e2:	2250      	movs	r2, #80	; 0x50
 80034e4:	2100      	movs	r1, #0
 80034e6:	a802      	add	r0, sp, #8
 80034e8:	f014 fcfa 	bl	8017ee0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80034ec:	2300      	movs	r3, #0
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80034f2:	2301      	movs	r3, #1
 80034f4:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80034f6:	2304      	movs	r3, #4
 80034f8:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80034fa:	2308      	movs	r3, #8
 80034fc:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80034fe:	2310      	movs	r3, #16
 8003500:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8003502:	f64e 6311 	movw	r3, #60945	; 0xee11
 8003506:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8003508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800350e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003512:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003514:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003518:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800351a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800351e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8003520:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003524:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003526:	2306      	movs	r3, #6
 8003528:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800352a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800352e:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	a902      	add	r1, sp, #8
 8003536:	4620      	mov	r0, r4
 8003538:	f002 fed4 	bl	80062e4 <HAL_OSPI_Command>
 800353c:	b9b8      	cbnz	r0, 800356e <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800353e:	2302      	movs	r3, #2
 8003540:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003542:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003546:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800354c:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	a902      	add	r1, sp, #8
 8003554:	4620      	mov	r0, r4
 8003556:	f002 fec5 	bl	80062e4 <HAL_OSPI_Command>
 800355a:	b958      	cbnz	r0, 8003574 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003560:	4669      	mov	r1, sp
 8003562:	4620      	mov	r0, r4
 8003564:	f003 f82c 	bl	80065c0 <HAL_OSPI_MemoryMapped>
 8003568:	b938      	cbnz	r0, 800357a <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800356a:	b016      	add	sp, #88	; 0x58
 800356c:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 800356e:	f04f 30ff 	mov.w	r0, #4294967295
 8003572:	e7fa      	b.n	800356a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	e7f7      	b.n	800356a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	e7f4      	b.n	800356a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08003580 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	b09a      	sub	sp, #104	; 0x68
 8003584:	4606      	mov	r6, r0
 8003586:	460c      	mov	r4, r1
 8003588:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 800358a:	2250      	movs	r2, #80	; 0x50
 800358c:	2100      	movs	r1, #0
 800358e:	a806      	add	r0, sp, #24
 8003590:	f014 fca6 	bl	8017ee0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003594:	2300      	movs	r3, #0
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	9302      	str	r3, [sp, #8]
 800359a:	9303      	str	r3, [sp, #12]
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80035a0:	429c      	cmp	r4, r3
 80035a2:	bf08      	it	eq
 80035a4:	2d01      	cmpeq	r5, #1
 80035a6:	d076      	beq.n	8003696 <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80035a8:	2c00      	cmp	r4, #0
 80035aa:	d155      	bne.n	8003658 <MX25LM51245G_WriteEnable+0xd8>
 80035ac:	2301      	movs	r3, #1
 80035ae:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80035b0:	2d01      	cmp	r5, #1
 80035b2:	d053      	beq.n	800365c <MX25LM51245G_WriteEnable+0xdc>
 80035b4:	2300      	movs	r3, #0
 80035b6:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80035b8:	2c00      	cmp	r4, #0
 80035ba:	d151      	bne.n	8003660 <MX25LM51245G_WriteEnable+0xe0>
 80035bc:	2300      	movs	r3, #0
 80035be:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80035c0:	2c00      	cmp	r4, #0
 80035c2:	d14f      	bne.n	8003664 <MX25LM51245G_WriteEnable+0xe4>
 80035c4:	2306      	movs	r3, #6
 80035c6:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	a906      	add	r1, sp, #24
 80035ce:	4630      	mov	r0, r6
 80035d0:	f002 fe88 	bl	80062e4 <HAL_OSPI_Command>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d161      	bne.n	800369c <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80035d8:	2c00      	cmp	r4, #0
 80035da:	d146      	bne.n	800366a <MX25LM51245G_WriteEnable+0xea>
 80035dc:	2305      	movs	r3, #5
 80035de:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80035e0:	2c00      	cmp	r4, #0
 80035e2:	d145      	bne.n	8003670 <MX25LM51245G_WriteEnable+0xf0>
 80035e4:	2300      	movs	r3, #0
 80035e6:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80035e8:	2d01      	cmp	r5, #1
 80035ea:	d044      	beq.n	8003676 <MX25LM51245G_WriteEnable+0xf6>
 80035ec:	2300      	movs	r3, #0
 80035ee:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80035f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035f4:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80035fa:	2c00      	cmp	r4, #0
 80035fc:	d13e      	bne.n	800367c <MX25LM51245G_WriteEnable+0xfc>
 80035fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003602:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003604:	2d01      	cmp	r5, #1
 8003606:	d03c      	beq.n	8003682 <MX25LM51245G_WriteEnable+0x102>
 8003608:	2300      	movs	r3, #0
 800360a:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800360c:	2c00      	cmp	r4, #0
 800360e:	d13b      	bne.n	8003688 <MX25LM51245G_WriteEnable+0x108>
 8003610:	2300      	movs	r3, #0
 8003612:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003614:	2d01      	cmp	r5, #1
 8003616:	d039      	beq.n	800368c <MX25LM51245G_WriteEnable+0x10c>
 8003618:	2301      	movs	r3, #1
 800361a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800361c:	2d01      	cmp	r5, #1
 800361e:	d037      	beq.n	8003690 <MX25LM51245G_WriteEnable+0x110>
 8003620:	2300      	movs	r3, #0
 8003622:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	a906      	add	r1, sp, #24
 800362a:	4630      	mov	r0, r6
 800362c:	f002 fe5a 	bl	80062e4 <HAL_OSPI_Command>
 8003630:	bbb8      	cbnz	r0, 80036a2 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 8003632:	2302      	movs	r3, #2
 8003634:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 8003636:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8003638:	2300      	movs	r3, #0
 800363a:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800363c:	2310      	movs	r3, #16
 800363e:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003644:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	a901      	add	r1, sp, #4
 800364c:	4630      	mov	r0, r6
 800364e:	f002 ff5a 	bl	8006506 <HAL_OSPI_AutoPolling>
 8003652:	bb48      	cbnz	r0, 80036a8 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003654:	b01a      	add	sp, #104	; 0x68
 8003656:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003658:	2304      	movs	r3, #4
 800365a:	e7a8      	b.n	80035ae <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800365c:	2308      	movs	r3, #8
 800365e:	e7aa      	b.n	80035b6 <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003660:	2310      	movs	r3, #16
 8003662:	e7ac      	b.n	80035be <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8003664:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8003668:	e7ad      	b.n	80035c6 <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800366a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800366e:	e7b6      	b.n	80035de <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003674:	e7b7      	b.n	80035e6 <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800367a:	e7b8      	b.n	80035ee <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800367c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003680:	e7bf      	b.n	8003602 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003682:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003686:	e7c0      	b.n	800360a <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003688:	2305      	movs	r3, #5
 800368a:	e7c2      	b.n	8003612 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800368c:	2302      	movs	r3, #2
 800368e:	e7c4      	b.n	800361a <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003690:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003694:	e7c5      	b.n	8003622 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 8003696:	f04f 30ff 	mov.w	r0, #4294967295
 800369a:	e7db      	b.n	8003654 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	e7d8      	b.n	8003654 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036a2:	f04f 30ff 	mov.w	r0, #4294967295
 80036a6:	e7d5      	b.n	8003654 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	e7d2      	b.n	8003654 <MX25LM51245G_WriteEnable+0xd4>

080036ae <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80036ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b0:	b095      	sub	sp, #84	; 0x54
 80036b2:	4607      	mov	r7, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	4615      	mov	r5, r2
 80036b8:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80036ba:	2250      	movs	r2, #80	; 0x50
 80036bc:	2100      	movs	r1, #0
 80036be:	4668      	mov	r0, sp
 80036c0:	f014 fc0e 	bl	8017ee0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80036c4:	2c00      	cmp	r4, #0
 80036c6:	bf08      	it	eq
 80036c8:	2d01      	cmpeq	r5, #1
 80036ca:	d04e      	beq.n	800376a <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036cc:	bb24      	cbnz	r4, 8003718 <MX25LM51245G_WriteCfg2Register+0x6a>
 80036ce:	2301      	movs	r3, #1
 80036d0:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036d2:	2d01      	cmp	r5, #1
 80036d4:	d022      	beq.n	800371c <MX25LM51245G_WriteCfg2Register+0x6e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80036da:	bb0c      	cbnz	r4, 8003720 <MX25LM51245G_WriteCfg2Register+0x72>
 80036dc:	2300      	movs	r3, #0
 80036de:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80036e0:	bb04      	cbnz	r4, 8003724 <MX25LM51245G_WriteCfg2Register+0x76>
 80036e2:	2372      	movs	r3, #114	; 0x72
 80036e4:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80036e6:	bb04      	cbnz	r4, 800372a <MX25LM51245G_WriteCfg2Register+0x7c>
 80036e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ec:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80036ee:	2d01      	cmp	r5, #1
 80036f0:	d01e      	beq.n	8003730 <MX25LM51245G_WriteCfg2Register+0x82>
 80036f2:	2300      	movs	r3, #0
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80036f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80036fa:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 80036fc:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80036fe:	b9d4      	cbnz	r4, 8003736 <MX25LM51245G_WriteCfg2Register+0x88>
 8003700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003704:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003706:	2d01      	cmp	r5, #1
 8003708:	d018      	beq.n	800373c <MX25LM51245G_WriteCfg2Register+0x8e>
 800370a:	2300      	movs	r3, #0
 800370c:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800370e:	b1d4      	cbz	r4, 8003746 <MX25LM51245G_WriteCfg2Register+0x98>
 8003710:	2d01      	cmp	r5, #1
 8003712:	d016      	beq.n	8003742 <MX25LM51245G_WriteCfg2Register+0x94>
 8003714:	2301      	movs	r3, #1
 8003716:	e017      	b.n	8003748 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003718:	2304      	movs	r3, #4
 800371a:	e7d9      	b.n	80036d0 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800371c:	2308      	movs	r3, #8
 800371e:	e7db      	b.n	80036d8 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003720:	2310      	movs	r3, #16
 8003722:	e7dc      	b.n	80036de <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003724:	f247 238d 	movw	r3, #29325	; 0x728d
 8003728:	e7dc      	b.n	80036e4 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800372a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372e:	e7dd      	b.n	80036ec <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003734:	e7de      	b.n	80036f4 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003736:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800373a:	e7e3      	b.n	8003704 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800373c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003740:	e7e4      	b.n	800370c <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003742:	2302      	movs	r3, #2
 8003744:	e000      	b.n	8003748 <MX25LM51245G_WriteCfg2Register+0x9a>
 8003746:	2301      	movs	r3, #1
 8003748:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4669      	mov	r1, sp
 8003750:	4638      	mov	r0, r7
 8003752:	f002 fdc7 	bl	80062e4 <HAL_OSPI_Command>
 8003756:	b958      	cbnz	r0, 8003770 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	a91a      	add	r1, sp, #104	; 0x68
 800375e:	4638      	mov	r0, r7
 8003760:	f002 fe21 	bl	80063a6 <HAL_OSPI_Transmit>
 8003764:	b938      	cbnz	r0, 8003776 <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003766:	b015      	add	sp, #84	; 0x54
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 800376a:	f04f 30ff 	mov.w	r0, #4294967295
 800376e:	e7fa      	b.n	8003766 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	e7f7      	b.n	8003766 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8003776:	f04f 30ff 	mov.w	r0, #4294967295
 800377a:	e7f4      	b.n	8003766 <MX25LM51245G_WriteCfg2Register+0xb8>

0800377c <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800377c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377e:	b095      	sub	sp, #84	; 0x54
 8003780:	4607      	mov	r7, r0
 8003782:	460c      	mov	r4, r1
 8003784:	4615      	mov	r5, r2
 8003786:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8003788:	2250      	movs	r2, #80	; 0x50
 800378a:	2100      	movs	r1, #0
 800378c:	4668      	mov	r0, sp
 800378e:	f014 fba7 	bl	8017ee0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003792:	2c00      	cmp	r4, #0
 8003794:	bf08      	it	eq
 8003796:	2d01      	cmpeq	r5, #1
 8003798:	d05b      	beq.n	8003852 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800379a:	2c00      	cmp	r4, #0
 800379c:	d13d      	bne.n	800381a <MX25LM51245G_ReadCfg2Register+0x9e>
 800379e:	2301      	movs	r3, #1
 80037a0:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80037a2:	2d01      	cmp	r5, #1
 80037a4:	d03b      	beq.n	800381e <MX25LM51245G_ReadCfg2Register+0xa2>
 80037a6:	2300      	movs	r3, #0
 80037a8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80037aa:	2c00      	cmp	r4, #0
 80037ac:	d139      	bne.n	8003822 <MX25LM51245G_ReadCfg2Register+0xa6>
 80037ae:	2300      	movs	r3, #0
 80037b0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80037b2:	2c00      	cmp	r4, #0
 80037b4:	d137      	bne.n	8003826 <MX25LM51245G_ReadCfg2Register+0xaa>
 80037b6:	2371      	movs	r3, #113	; 0x71
 80037b8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80037ba:	2c00      	cmp	r4, #0
 80037bc:	d136      	bne.n	800382c <MX25LM51245G_ReadCfg2Register+0xb0>
 80037be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c2:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80037c4:	2d01      	cmp	r5, #1
 80037c6:	d034      	beq.n	8003832 <MX25LM51245G_ReadCfg2Register+0xb6>
 80037c8:	2300      	movs	r3, #0
 80037ca:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80037cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80037d0:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 80037d2:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80037d4:	bb84      	cbnz	r4, 8003838 <MX25LM51245G_ReadCfg2Register+0xbc>
 80037d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037da:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80037dc:	2d01      	cmp	r5, #1
 80037de:	d02e      	beq.n	800383e <MX25LM51245G_ReadCfg2Register+0xc2>
 80037e0:	2300      	movs	r3, #0
 80037e2:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80037e4:	bb74      	cbnz	r4, 8003844 <MX25LM51245G_ReadCfg2Register+0xc8>
 80037e6:	2300      	movs	r3, #0
 80037e8:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80037ea:	2d01      	cmp	r5, #1
 80037ec:	d02c      	beq.n	8003848 <MX25LM51245G_ReadCfg2Register+0xcc>
 80037ee:	2301      	movs	r3, #1
 80037f0:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80037f2:	2d01      	cmp	r5, #1
 80037f4:	d02a      	beq.n	800384c <MX25LM51245G_ReadCfg2Register+0xd0>
 80037f6:	2300      	movs	r3, #0
 80037f8:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4669      	mov	r1, sp
 8003800:	4638      	mov	r0, r7
 8003802:	f002 fd6f 	bl	80062e4 <HAL_OSPI_Command>
 8003806:	bb38      	cbnz	r0, 8003858 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800380e:	4638      	mov	r0, r7
 8003810:	f002 fe16 	bl	8006440 <HAL_OSPI_Receive>
 8003814:	bb18      	cbnz	r0, 800385e <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003816:	b015      	add	sp, #84	; 0x54
 8003818:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800381a:	2304      	movs	r3, #4
 800381c:	e7c0      	b.n	80037a0 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800381e:	2308      	movs	r3, #8
 8003820:	e7c2      	b.n	80037a8 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003822:	2310      	movs	r3, #16
 8003824:	e7c4      	b.n	80037b0 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8003826:	f247 138e 	movw	r3, #29070	; 0x718e
 800382a:	e7c5      	b.n	80037b8 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800382c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003830:	e7c7      	b.n	80037c2 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003836:	e7c8      	b.n	80037ca <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003838:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800383c:	e7cd      	b.n	80037da <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800383e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003842:	e7ce      	b.n	80037e2 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003844:	2305      	movs	r3, #5
 8003846:	e7cf      	b.n	80037e8 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003848:	2302      	movs	r3, #2
 800384a:	e7d1      	b.n	80037f0 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800384c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003850:	e7d2      	b.n	80037f8 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	e7de      	b.n	8003816 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	e7db      	b.n	8003816 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800385e:	f04f 30ff 	mov.w	r0, #4294967295
 8003862:	e7d8      	b.n	8003816 <MX25LM51245G_ReadCfg2Register+0x9a>

08003864 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	b094      	sub	sp, #80	; 0x50
 8003868:	4606      	mov	r6, r0
 800386a:	460c      	mov	r4, r1
 800386c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800386e:	2250      	movs	r2, #80	; 0x50
 8003870:	2100      	movs	r1, #0
 8003872:	4668      	mov	r0, sp
 8003874:	f014 fb34 	bl	8017ee0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003878:	2c00      	cmp	r4, #0
 800387a:	bf08      	it	eq
 800387c:	2d01      	cmpeq	r5, #1
 800387e:	d01e      	beq.n	80038be <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003880:	b9a4      	cbnz	r4, 80038ac <MX25LM51245G_ResetEnable+0x48>
 8003882:	2301      	movs	r3, #1
 8003884:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003886:	2d01      	cmp	r5, #1
 8003888:	d012      	beq.n	80038b0 <MX25LM51245G_ResetEnable+0x4c>
 800388a:	2300      	movs	r3, #0
 800388c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800388e:	b98c      	cbnz	r4, 80038b4 <MX25LM51245G_ResetEnable+0x50>
 8003890:	2300      	movs	r3, #0
 8003892:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8003894:	b984      	cbnz	r4, 80038b8 <MX25LM51245G_ResetEnable+0x54>
 8003896:	2366      	movs	r3, #102	; 0x66
 8003898:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4669      	mov	r1, sp
 80038a0:	4630      	mov	r0, r6
 80038a2:	f002 fd1f 	bl	80062e4 <HAL_OSPI_Command>
 80038a6:	b968      	cbnz	r0, 80038c4 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80038a8:	b014      	add	sp, #80	; 0x50
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80038ac:	2304      	movs	r3, #4
 80038ae:	e7e9      	b.n	8003884 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038b0:	2308      	movs	r3, #8
 80038b2:	e7eb      	b.n	800388c <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038b4:	2310      	movs	r3, #16
 80038b6:	e7ec      	b.n	8003892 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80038b8:	f246 6399 	movw	r3, #26265	; 0x6699
 80038bc:	e7ec      	b.n	8003898 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80038be:	f04f 30ff 	mov.w	r0, #4294967295
 80038c2:	e7f1      	b.n	80038a8 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e7ee      	b.n	80038a8 <MX25LM51245G_ResetEnable+0x44>

080038ca <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80038ca:	b570      	push	{r4, r5, r6, lr}
 80038cc:	b094      	sub	sp, #80	; 0x50
 80038ce:	4606      	mov	r6, r0
 80038d0:	460c      	mov	r4, r1
 80038d2:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80038d4:	2250      	movs	r2, #80	; 0x50
 80038d6:	2100      	movs	r1, #0
 80038d8:	4668      	mov	r0, sp
 80038da:	f014 fb01 	bl	8017ee0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80038de:	2c00      	cmp	r4, #0
 80038e0:	bf08      	it	eq
 80038e2:	2d01      	cmpeq	r5, #1
 80038e4:	d01e      	beq.n	8003924 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80038e6:	b9a4      	cbnz	r4, 8003912 <MX25LM51245G_ResetMemory+0x48>
 80038e8:	2301      	movs	r3, #1
 80038ea:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038ec:	2d01      	cmp	r5, #1
 80038ee:	d012      	beq.n	8003916 <MX25LM51245G_ResetMemory+0x4c>
 80038f0:	2300      	movs	r3, #0
 80038f2:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038f4:	b98c      	cbnz	r4, 800391a <MX25LM51245G_ResetMemory+0x50>
 80038f6:	2300      	movs	r3, #0
 80038f8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80038fa:	b984      	cbnz	r4, 800391e <MX25LM51245G_ResetMemory+0x54>
 80038fc:	2399      	movs	r3, #153	; 0x99
 80038fe:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4669      	mov	r1, sp
 8003906:	4630      	mov	r0, r6
 8003908:	f002 fcec 	bl	80062e4 <HAL_OSPI_Command>
 800390c:	b968      	cbnz	r0, 800392a <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800390e:	b014      	add	sp, #80	; 0x50
 8003910:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003912:	2304      	movs	r3, #4
 8003914:	e7e9      	b.n	80038ea <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003916:	2308      	movs	r3, #8
 8003918:	e7eb      	b.n	80038f2 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800391a:	2310      	movs	r3, #16
 800391c:	e7ec      	b.n	80038f8 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800391e:	f649 1366 	movw	r3, #39270	; 0x9966
 8003922:	e7ec      	b.n	80038fe <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e7f1      	b.n	800390e <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 800392a:	f04f 30ff 	mov.w	r0, #4294967295
 800392e:	e7ee      	b.n	800390e <MX25LM51245G_ResetMemory+0x44>

08003930 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 8003936:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 800393a:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8003940:	222c      	movs	r2, #44	; 0x2c
 8003942:	fb02 3101 	mla	r1, r2, r1, r3
 8003946:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003948:	68ca      	ldr	r2, [r1, #12]
 800394a:	eb03 0e02 	add.w	lr, r3, r2
 800394e:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003952:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003954:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003956:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800395a:	690b      	ldr	r3, [r1, #16]
 800395c:	6a08      	ldr	r0, [r1, #32]
 800395e:	1a1e      	subs	r6, r3, r0
 8003960:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003964:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003966:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800396a:	694b      	ldr	r3, [r1, #20]
 800396c:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8003970:	f1be 0f00 	cmp.w	lr, #0
 8003974:	dd08      	ble.n	8003988 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 8003976:	2e00      	cmp	r6, #0
 8003978:	dd09      	ble.n	800398e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800397a:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 800397c:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003980:	2d0f      	cmp	r5, #15
 8003982:	d83b      	bhi.n	80039fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003984:	2400      	movs	r4, #0
 8003986:	e02b      	b.n	80039e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 8003988:	f04f 0e00 	mov.w	lr, #0
 800398c:	e7f3      	b.n	8003976 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 800398e:	2600      	movs	r6, #0
 8003990:	e7f3      	b.n	800397a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003992:	3201      	adds	r2, #1
 8003994:	2a0f      	cmp	r2, #15
 8003996:	d822      	bhi.n	80039de <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003998:	fb02 f300 	mul.w	r3, r2, r0
 800399c:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80039a0:	459e      	cmp	lr, r3
 80039a2:	bf8c      	ite	hi
 80039a4:	2100      	movhi	r1, #0
 80039a6:	2101      	movls	r1, #1
 80039a8:	429e      	cmp	r6, r3
 80039aa:	bf38      	it	cc
 80039ac:	2100      	movcc	r1, #0
 80039ae:	2900      	cmp	r1, #0
 80039b0:	d0ef      	beq.n	8003992 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 80039b2:	45a9      	cmp	r9, r5
 80039b4:	d0ed      	beq.n	8003992 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80039b6:	4914      	ldr	r1, [pc, #80]	; (8003a08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80039b8:	680b      	ldr	r3, [r1, #0]
 80039ba:	f8df a050 	ldr.w	sl, [pc, #80]	; 8003a0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80039be:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80039c2:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 80039c6:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80039ca:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80039ce:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 80039d2:	3301      	adds	r3, #1
 80039d4:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80039d6:	2b7f      	cmp	r3, #127	; 0x7f
 80039d8:	d810      	bhi.n	80039fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 80039da:	46a9      	mov	r9, r5
 80039dc:	e7d9      	b.n	8003992 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80039de:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80039e0:	2c0f      	cmp	r4, #15
 80039e2:	d809      	bhi.n	80039f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80039e4:	1c67      	adds	r7, r4, #1
 80039e6:	1c68      	adds	r0, r5, #1
 80039e8:	fb04 0300 	mla	r3, r4, r0, r0
 80039ec:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80039f0:	4598      	cmp	r8, r3
 80039f2:	d8f4      	bhi.n	80039de <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80039f4:	2200      	movs	r2, #0
 80039f6:	e7cd      	b.n	8003994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80039f8:	3501      	adds	r5, #1
 80039fa:	e7c1      	b.n	8003980 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a00:	3b9aca00 	.word	0x3b9aca00
 8003a04:	08019ec8 	.word	0x08019ec8
 8003a08:	24001ee0 	.word	0x24001ee0
 8003a0c:	240014e0 	.word	0x240014e0

08003a10 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	b089      	sub	sp, #36	; 0x24
 8003a16:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003a18:	4f4b      	ldr	r7, [pc, #300]	; (8003b48 <I2C_Compute_SCLL_SCLH+0x138>)
 8003a1a:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8003a1e:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003a22:	494a      	ldr	r1, [pc, #296]	; (8003b4c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003a24:	232c      	movs	r3, #44	; 0x2c
 8003a26:	fb04 f303 	mul.w	r3, r4, r3
 8003a2a:	18ca      	adds	r2, r1, r3
 8003a2c:	58cb      	ldr	r3, [r1, r3]
 8003a2e:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8003a32:	fbb1 f1f3 	udiv	r1, r1, r3
 8003a36:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003a38:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003a3a:	fb08 f303 	mul.w	r3, r8, r3
 8003a3e:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003a40:	6853      	ldr	r3, [r2, #4]
 8003a42:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003a46:	6893      	ldr	r3, [r2, #8]
 8003a48:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8003a4c:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	9307      	str	r3, [sp, #28]
 8003a58:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a5a:	e060      	b.n	8003b1e <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8003a5c:	1af2      	subs	r2, r6, r3
 8003a5e:	e02a      	b.n	8003ab6 <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8003a60:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003a62:	29ff      	cmp	r1, #255	; 0xff
 8003a64:	d837      	bhi.n	8003ad6 <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003a66:	1c4d      	adds	r5, r1, #1
 8003a68:	fb01 0200 	mla	r2, r1, r0, r0
 8003a6c:	4442      	add	r2, r8
 8003a6e:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003a70:	eb0c 0302 	add.w	r3, ip, r2
 8003a74:	4e35      	ldr	r6, [pc, #212]	; (8003b4c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003a76:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003a7a:	fb0b 6b04 	mla	fp, fp, r4, r6
 8003a7e:	f8db 6020 	ldr.w	r6, [fp, #32]
 8003a82:	4433      	add	r3, r6
 8003a84:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8003a88:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003a8a:	429f      	cmp	r7, r3
 8003a8c:	bf8c      	ite	hi
 8003a8e:	2600      	movhi	r6, #0
 8003a90:	2601      	movls	r6, #1
 8003a92:	4599      	cmp	r9, r3
 8003a94:	bf38      	it	cc
 8003a96:	2600      	movcc	r6, #0
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	d0e1      	beq.n	8003a60 <I2C_Compute_SCLL_SCLH+0x50>
 8003a9c:	4e2b      	ldr	r6, [pc, #172]	; (8003b4c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003a9e:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003aa2:	fb0b 6604 	mla	r6, fp, r4, r6
 8003aa6:	69f6      	ldr	r6, [r6, #28]
 8003aa8:	4296      	cmp	r6, r2
 8003aaa:	d8d9      	bhi.n	8003a60 <I2C_Compute_SCLL_SCLH+0x50>
 8003aac:	4592      	cmp	sl, r2
 8003aae:	d2d7      	bcs.n	8003a60 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8003ab0:	9e05      	ldr	r6, [sp, #20]
 8003ab2:	1b9a      	subs	r2, r3, r6
 8003ab4:	d4d2      	bmi.n	8003a5c <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8003ab6:	9b02      	ldr	r3, [sp, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d2d1      	bcs.n	8003a60 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 8003abc:	9b04      	ldr	r3, [sp, #16]
 8003abe:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <I2C_Compute_SCLL_SCLH+0x140>)
 8003ac4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003ac8:	9e01      	ldr	r6, [sp, #4]
 8003aca:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003acc:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 8003ace:	9202      	str	r2, [sp, #8]
              ret = count;
 8003ad0:	9b04      	ldr	r3, [sp, #16]
 8003ad2:	9307      	str	r3, [sp, #28]
 8003ad4:	e7c4      	b.n	8003a60 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003ad6:	9b03      	ldr	r3, [sp, #12]
 8003ad8:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	2bff      	cmp	r3, #255	; 0xff
 8003ade:	d81b      	bhi.n	8003b18 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003ae0:	9906      	ldr	r1, [sp, #24]
 8003ae2:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8003ae6:	9b01      	ldr	r3, [sp, #4]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	9203      	str	r2, [sp, #12]
 8003aec:	fb03 0c00 	mla	ip, r3, r0, r0
 8003af0:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8003af4:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 8003af8:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003afc:	222c      	movs	r2, #44	; 0x2c
 8003afe:	fb02 3304 	mla	r3, r2, r4, r3
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4563      	cmp	r3, ip
 8003b06:	d2e6      	bcs.n	8003ad6 <I2C_Compute_SCLL_SCLH+0xc6>
 8003b08:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8003b0c:	1a5b      	subs	r3, r3, r1
 8003b0e:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8003b12:	d2e0      	bcs.n	8003ad6 <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003b14:	2100      	movs	r1, #0
 8003b16:	e7a4      	b.n	8003a62 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b18:	9b04      	ldr	r3, [sp, #16]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	9304      	str	r3, [sp, #16]
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <I2C_Compute_SCLL_SCLH+0x144>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	9a04      	ldr	r2, [sp, #16]
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d90a      	bls.n	8003b3e <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003b28:	9b04      	ldr	r3, [sp, #16]
 8003b2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b2e:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <I2C_Compute_SCLL_SCLH+0x140>)
 8003b30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b34:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	e7cd      	b.n	8003ada <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8003b3e:	9807      	ldr	r0, [sp, #28]
 8003b40:	b009      	add	sp, #36	; 0x24
 8003b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b46:	bf00      	nop
 8003b48:	3b9aca00 	.word	0x3b9aca00
 8003b4c:	08019ec8 	.word	0x08019ec8
 8003b50:	240014e0 	.word	0x240014e0
 8003b54:	24001ee0 	.word	0x24001ee0

08003b58 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	bf18      	it	ne
 8003b5c:	2900      	cmpne	r1, #0
 8003b5e:	d134      	bne.n	8003bca <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8003b60:	2000      	movs	r0, #0
}
 8003b62:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003b64:	3401      	adds	r4, #1
 8003b66:	2c02      	cmp	r4, #2
 8003b68:	d834      	bhi.n	8003bd4 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <I2C_GetTiming+0x84>)
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 3304 	mla	r3, r1, r4, r3
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d8f5      	bhi.n	8003b64 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003b78:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <I2C_GetTiming+0x84>)
 8003b7a:	fb01 3304 	mla	r3, r1, r4, r3
 8003b7e:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d3ef      	bcc.n	8003b64 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003b84:	4621      	mov	r1, r4
 8003b86:	4628      	mov	r0, r5
 8003b88:	f7ff fed2 	bl	8003930 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f7ff ff3e 	bl	8003a10 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8003b94:	287f      	cmp	r0, #127	; 0x7f
 8003b96:	d81f      	bhi.n	8003bd8 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003b98:	4a11      	ldr	r2, [pc, #68]	; (8003be0 <I2C_GetTiming+0x88>)
 8003b9a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003b9e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8003ba2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	051b      	lsls	r3, r3, #20
 8003baa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003bb2:	68a1      	ldr	r1, [r4, #8]
 8003bb4:	0409      	lsls	r1, r1, #16
 8003bb6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003bba:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003bbc:	68e1      	ldr	r1, [r4, #12]
 8003bbe:	0209      	lsls	r1, r1, #8
 8003bc0:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003bc2:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003bc4:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bc6:	4318      	orrs	r0, r3
 8003bc8:	e005      	b.n	8003bd6 <I2C_GetTiming+0x7e>
{
 8003bca:	b538      	push	{r3, r4, r5, lr}
 8003bcc:	4605      	mov	r5, r0
 8003bce:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003bd0:	2400      	movs	r4, #0
 8003bd2:	e7c8      	b.n	8003b66 <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8003bd4:	2000      	movs	r0, #0
}
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8003bd8:	2000      	movs	r0, #0
  return ret;
 8003bda:	e7fc      	b.n	8003bd6 <I2C_GetTiming+0x7e>
 8003bdc:	08019ec8 	.word	0x08019ec8
 8003be0:	240014e0 	.word	0x240014e0

08003be4 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003be8:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003bea:	4c2a      	ldr	r4, [pc, #168]	; (8003c94 <I2C4_MspInit+0xb0>)
 8003bec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003bf0:	f043 0308 	orr.w	r3, r3, #8
 8003bf4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003bf8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003c04:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c08:	f043 0308 	orr.w	r3, r3, #8
 8003c0c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003c10:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c20:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003c22:	f04f 0912 	mov.w	r9, #18
 8003c26:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c2a:	f04f 0800 	mov.w	r8, #0
 8003c2e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003c32:	2702      	movs	r7, #2
 8003c34:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003c36:	2604      	movs	r6, #4
 8003c38:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003c3a:	4d17      	ldr	r5, [pc, #92]	; (8003c98 <I2C4_MspInit+0xb4>)
 8003c3c:	a903      	add	r1, sp, #12
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f001 f9a2 	bl	8004f88 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c48:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003c4a:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c4e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003c52:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003c54:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003c56:	a903      	add	r1, sp, #12
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f001 f995 	bl	8004f88 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003c5e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c66:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8003c6a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	9302      	str	r3, [sp, #8]
 8003c74:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003c76:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003c82:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8003c8e:	b009      	add	sp, #36	; 0x24
 8003c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c94:	58024400 	.word	0x58024400
 8003c98:	58020c00 	.word	0x58020c00

08003c9c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ca4:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003ca6:	4c09      	ldr	r4, [pc, #36]	; (8003ccc <I2C4_MspDeInit+0x30>)
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f001 fa7d 	bl	80051a8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cb2:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f001 fa77 	bl	80051a8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003cba:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <I2C4_MspDeInit+0x34>)
 8003cbc:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003cc8:	b006      	add	sp, #24
 8003cca:	bd10      	pop	{r4, pc}
 8003ccc:	58020c00 	.word	0x58020c00
 8003cd0:	58024400 	.word	0x58024400

08003cd4 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003cd8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003cdc:	9402      	str	r4, [sp, #8]
 8003cde:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003ce2:	9401      	str	r4, [sp, #4]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	460a      	mov	r2, r1
 8003cea:	4601      	mov	r1, r0
 8003cec:	4804      	ldr	r0, [pc, #16]	; (8003d00 <I2C4_WriteReg+0x2c>)
 8003cee:	f001 fd5a 	bl	80057a6 <HAL_I2C_Mem_Write>
 8003cf2:	b910      	cbnz	r0, 8003cfa <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 8003cf4:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8003cfa:	f06f 0007 	mvn.w	r0, #7
 8003cfe:	e7fa      	b.n	8003cf6 <I2C4_WriteReg+0x22>
 8003d00:	24001ee4 	.word	0x24001ee4

08003d04 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003d04:	b510      	push	{r4, lr}
 8003d06:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003d08:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003d0c:	9402      	str	r4, [sp, #8]
 8003d0e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003d12:	9401      	str	r4, [sp, #4]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	460a      	mov	r2, r1
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4804      	ldr	r0, [pc, #16]	; (8003d30 <I2C4_ReadReg+0x2c>)
 8003d1e:	f001 fe17 	bl	8005950 <HAL_I2C_Mem_Read>
 8003d22:	b910      	cbnz	r0, 8003d2a <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8003d24:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8003d26:	b004      	add	sp, #16
 8003d28:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8003d2a:	f06f 0007 	mvn.w	r0, #7
 8003d2e:	e7fa      	b.n	8003d26 <I2C4_ReadReg+0x22>
 8003d30:	24001ee4 	.word	0x24001ee4

08003d34 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8003d34:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <BSP_I2C4_DeInit+0x28>)
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8003d3c:	b10b      	cbz	r3, 8003d42 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8003d3e:	2000      	movs	r0, #0
}
 8003d40:	4770      	bx	lr
{
 8003d42:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8003d44:	4c06      	ldr	r4, [pc, #24]	; (8003d60 <BSP_I2C4_DeInit+0x2c>)
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7ff ffa8 	bl	8003c9c <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f001 fd11 	bl	8005774 <HAL_I2C_DeInit>
 8003d52:	b900      	cbnz	r0, 8003d56 <BSP_I2C4_DeInit+0x22>
}
 8003d54:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8003d56:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003d5a:	e7fb      	b.n	8003d54 <BSP_I2C4_DeInit+0x20>
 8003d5c:	240014dc 	.word	0x240014dc
 8003d60:	24001ee4 	.word	0x24001ee4

08003d64 <MX_I2C4_Init>:
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8003d68:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003d6e:	2201      	movs	r2, #1
 8003d70:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003d72:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003d74:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d76:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003d78:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003d7a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003d7c:	f001 fc9c 	bl	80056b8 <HAL_I2C_Init>
 8003d80:	b108      	cbz	r0, 8003d86 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8003d82:	2001      	movs	r0, #1
}
 8003d84:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003d86:	2100      	movs	r1, #0
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f001 febe 	bl	8005b0a <HAL_I2CEx_ConfigAnalogFilter>
 8003d8e:	b108      	cbz	r0, 8003d94 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8003d90:	2001      	movs	r0, #1
 8003d92:	e7f7      	b.n	8003d84 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003d94:	2100      	movs	r1, #0
 8003d96:	4620      	mov	r0, r4
 8003d98:	f001 fee5 	bl	8005b66 <HAL_I2CEx_ConfigDigitalFilter>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d0f1      	beq.n	8003d84 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8003da0:	2001      	movs	r0, #1
 8003da2:	e7ef      	b.n	8003d84 <MX_I2C4_Init+0x20>

08003da4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <BSP_I2C4_Init+0x48>)
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <BSP_I2C4_Init+0x4c>)
 8003da8:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <BSP_I2C4_Init+0x50>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b10b      	cbz	r3, 8003db4 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8003db0:	2000      	movs	r0, #0
}
 8003db2:	4770      	bx	lr
{
 8003db4:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 8003db6:	3301      	adds	r3, #1
 8003db8:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <BSP_I2C4_Init+0x50>)
 8003dba:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003dbc:	480b      	ldr	r0, [pc, #44]	; (8003dec <BSP_I2C4_Init+0x48>)
 8003dbe:	f001 fe9f 	bl	8005b00 <HAL_I2C_GetState>
 8003dc2:	b108      	cbz	r0, 8003dc8 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8003dc4:	2000      	movs	r0, #0
}
 8003dc6:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 8003dc8:	4c08      	ldr	r4, [pc, #32]	; (8003dec <BSP_I2C4_Init+0x48>)
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff ff0a 	bl	8003be4 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003dd0:	f003 fbc6 	bl	8007560 <HAL_RCC_GetPCLK2Freq>
 8003dd4:	4908      	ldr	r1, [pc, #32]	; (8003df8 <BSP_I2C4_Init+0x54>)
 8003dd6:	f7ff febf 	bl	8003b58 <I2C_GetTiming>
 8003dda:	4601      	mov	r1, r0
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ffc1 	bl	8003d64 <MX_I2C4_Init>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d0ef      	beq.n	8003dc6 <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 8003de6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003dea:	e7ec      	b.n	8003dc6 <BSP_I2C4_Init+0x22>
 8003dec:	24001ee4 	.word	0x24001ee4
 8003df0:	58001c00 	.word	0x58001c00
 8003df4:	240014dc 	.word	0x240014dc
 8003df8:	000186a0 	.word	0x000186a0

08003dfc <BSP_I2C4_WriteReg>:
{
 8003dfc:	b500      	push	{lr}
 8003dfe:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	2201      	movs	r2, #1
 8003e06:	f7ff ff65 	bl	8003cd4 <I2C4_WriteReg>
 8003e0a:	b910      	cbnz	r0, 8003e12 <BSP_I2C4_WriteReg+0x16>
}
 8003e0c:	b003      	add	sp, #12
 8003e0e:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003e12:	4805      	ldr	r0, [pc, #20]	; (8003e28 <BSP_I2C4_WriteReg+0x2c>)
 8003e14:	f001 fe77 	bl	8005b06 <HAL_I2C_GetError>
 8003e18:	2804      	cmp	r0, #4
 8003e1a:	d002      	beq.n	8003e22 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003e1c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003e20:	e7f4      	b.n	8003e0c <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003e22:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8003e26:	e7f1      	b.n	8003e0c <BSP_I2C4_WriteReg+0x10>
 8003e28:	24001ee4 	.word	0x24001ee4

08003e2c <BSP_I2C4_ReadReg>:
{
 8003e2c:	b500      	push	{lr}
 8003e2e:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	2201      	movs	r2, #1
 8003e36:	f7ff ff65 	bl	8003d04 <I2C4_ReadReg>
 8003e3a:	b910      	cbnz	r0, 8003e42 <BSP_I2C4_ReadReg+0x16>
}
 8003e3c:	b003      	add	sp, #12
 8003e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003e42:	4805      	ldr	r0, [pc, #20]	; (8003e58 <BSP_I2C4_ReadReg+0x2c>)
 8003e44:	f001 fe5f 	bl	8005b06 <HAL_I2C_GetError>
 8003e48:	2804      	cmp	r0, #4
 8003e4a:	d002      	beq.n	8003e52 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003e4c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003e50:	e7f4      	b.n	8003e3c <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003e52:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8003e56:	e7f1      	b.n	8003e3c <BSP_I2C4_ReadReg+0x10>
 8003e58:	24001ee4 	.word	0x24001ee4

08003e5c <BSP_GetTick>:
{
 8003e5c:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8003e5e:	f000 fde7 	bl	8004a30 <HAL_GetTick>
}
 8003e62:	bd08      	pop	{r3, pc}

08003e64 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8003e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e68:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8003e6a:	4b7e      	ldr	r3, [pc, #504]	; (8004064 <OSPI_NOR_MspInit+0x200>)
 8003e6c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e74:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8003e78:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003e7c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e80:	9201      	str	r2, [sp, #4]
 8003e82:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8003e84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e8a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8003e8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e92:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8003e94:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003e98:	f042 0202 	orr.w	r2, r2, #2
 8003e9c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003ea0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ea4:	f002 0202 	and.w	r2, r2, #2
 8003ea8:	9202      	str	r2, [sp, #8]
 8003eaa:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 8003eac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003eb0:	f042 0204 	orr.w	r2, r2, #4
 8003eb4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003eb8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ebc:	f002 0204 	and.w	r2, r2, #4
 8003ec0:	9203      	str	r2, [sp, #12]
 8003ec2:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8003ec4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ecc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003ed0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ed4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003ed8:	9204      	str	r2, [sp, #16]
 8003eda:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 8003edc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ee0:	f042 0208 	orr.w	r2, r2, #8
 8003ee4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003ee8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003eec:	f002 0208 	and.w	r2, r2, #8
 8003ef0:	9205      	str	r2, [sp, #20]
 8003ef2:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 8003ef4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ef8:	f042 0220 	orr.w	r2, r2, #32
 8003efc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f00:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f04:	f002 0220 	and.w	r2, r2, #32
 8003f08:	9206      	str	r2, [sp, #24]
 8003f0a:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8003f0c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f10:	f042 0220 	orr.w	r2, r2, #32
 8003f14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f18:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f1c:	f002 0220 	and.w	r2, r2, #32
 8003f20:	9207      	str	r2, [sp, #28]
 8003f22:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8003f24:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f28:	f042 0220 	orr.w	r2, r2, #32
 8003f2c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f30:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f34:	f002 0220 	and.w	r2, r2, #32
 8003f38:	9208      	str	r2, [sp, #32]
 8003f3a:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8003f3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f40:	f042 0204 	orr.w	r2, r2, #4
 8003f44:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f48:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f4c:	f002 0204 	and.w	r2, r2, #4
 8003f50:	9209      	str	r2, [sp, #36]	; 0x24
 8003f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8003f54:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f5c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f60:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f64:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003f68:	920a      	str	r2, [sp, #40]	; 0x28
 8003f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8003f6c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f74:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f78:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f7c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003f80:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8003f84:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	930c      	str	r3, [sp, #48]	; 0x30
 8003f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8003f9c:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8003fa0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003fa4:	f04f 0a02 	mov.w	sl, #2
 8003fa8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003fac:	2301      	movs	r3, #1
 8003fae:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8003fb4:	240a      	movs	r4, #10
 8003fb6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8003fb8:	a90d      	add	r1, sp, #52	; 0x34
 8003fba:	482b      	ldr	r0, [pc, #172]	; (8004068 <OSPI_NOR_MspInit+0x204>)
 8003fbc:	f000 ffe4 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8003fc4:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003fc6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800407c <OSPI_NOR_MspInit+0x218>
 8003fca:	a90d      	add	r1, sp, #52	; 0x34
 8003fcc:	4648      	mov	r0, r9
 8003fce:	f000 ffdb 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8003fda:	2509      	movs	r5, #9
 8003fdc:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8003fde:	a90d      	add	r1, sp, #52	; 0x34
 8003fe0:	4822      	ldr	r0, [pc, #136]	; (800406c <OSPI_NOR_MspInit+0x208>)
 8003fe2:	f000 ffd1 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8003fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fea:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8003fec:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8003fee:	a90d      	add	r1, sp, #52	; 0x34
 8003ff0:	481f      	ldr	r0, [pc, #124]	; (8004070 <OSPI_NOR_MspInit+0x20c>)
 8003ff2:	f000 ffc9 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8003ff6:	f44f 7800 	mov.w	r8, #512	; 0x200
 8003ffa:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8003ffe:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8004000:	4e1c      	ldr	r6, [pc, #112]	; (8004074 <OSPI_NOR_MspInit+0x210>)
 8004002:	a90d      	add	r1, sp, #52	; 0x34
 8004004:	4630      	mov	r0, r6
 8004006:	f000 ffbf 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800400a:	2780      	movs	r7, #128	; 0x80
 800400c:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800400e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8004010:	a90d      	add	r1, sp, #52	; 0x34
 8004012:	4630      	mov	r0, r6
 8004014:	f000 ffb8 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8004018:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800401c:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800401e:	a90d      	add	r1, sp, #52	; 0x34
 8004020:	4630      	mov	r0, r6
 8004022:	f000 ffb1 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8004026:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800402a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800402c:	a90d      	add	r1, sp, #52	; 0x34
 800402e:	4648      	mov	r0, r9
 8004030:	f000 ffaa 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8004034:	2308      	movs	r3, #8
 8004036:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8004038:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800403a:	a90d      	add	r1, sp, #52	; 0x34
 800403c:	480e      	ldr	r0, [pc, #56]	; (8004078 <OSPI_NOR_MspInit+0x214>)
 800403e:	f000 ffa3 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8004042:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8004046:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8004048:	a90d      	add	r1, sp, #52	; 0x34
 800404a:	4807      	ldr	r0, [pc, #28]	; (8004068 <OSPI_NOR_MspInit+0x204>)
 800404c:	f000 ff9c 	bl	8004f88 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8004050:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8004052:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8004054:	a90d      	add	r1, sp, #52	; 0x34
 8004056:	4806      	ldr	r0, [pc, #24]	; (8004070 <OSPI_NOR_MspInit+0x20c>)
 8004058:	f000 ff96 	bl	8004f88 <HAL_GPIO_Init>
}
 800405c:	b013      	add	sp, #76	; 0x4c
 800405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
 8004068:	58021800 	.word	0x58021800
 800406c:	58020400 	.word	0x58020400
 8004070:	58020c00 	.word	0x58020c00
 8004074:	58021400 	.word	0x58021400
 8004078:	58021c00 	.word	0x58021c00
 800407c:	58020800 	.word	0x58020800

08004080 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004084:	4c24      	ldr	r4, [pc, #144]	; (8004118 <OSPI_NOR_ResetMemory+0x98>)
 8004086:	235c      	movs	r3, #92	; 0x5c
 8004088:	fb03 4400 	mla	r4, r3, r0, r4
 800408c:	2200      	movs	r2, #0
 800408e:	4611      	mov	r1, r2
 8004090:	4620      	mov	r0, r4
 8004092:	f7ff fbe7 	bl	8003864 <MX25LM51245G_ResetEnable>
 8004096:	bb60      	cbnz	r0, 80040f2 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004098:	2200      	movs	r2, #0
 800409a:	4611      	mov	r1, r2
 800409c:	4620      	mov	r0, r4
 800409e:	f7ff fc14 	bl	80038ca <MX25LM51245G_ResetMemory>
 80040a2:	bb48      	cbnz	r0, 80040f8 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040a4:	2200      	movs	r2, #0
 80040a6:	2101      	movs	r1, #1
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7ff fbdb 	bl	8003864 <MX25LM51245G_ResetEnable>
 80040ae:	bb30      	cbnz	r0, 80040fe <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040b0:	2200      	movs	r2, #0
 80040b2:	2101      	movs	r1, #1
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7ff fc08 	bl	80038ca <MX25LM51245G_ResetMemory>
 80040ba:	bb18      	cbnz	r0, 8004104 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80040bc:	2201      	movs	r2, #1
 80040be:	4611      	mov	r1, r2
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff fbcf 	bl	8003864 <MX25LM51245G_ResetEnable>
 80040c6:	bb00      	cbnz	r0, 800410a <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80040c8:	2201      	movs	r2, #1
 80040ca:	4611      	mov	r1, r2
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff fbfc 	bl	80038ca <MX25LM51245G_ResetMemory>
 80040d2:	4604      	mov	r4, r0
 80040d4:	b9e0      	cbnz	r0, 8004110 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80040d6:	4811      	ldr	r0, [pc, #68]	; (800411c <OSPI_NOR_ResetMemory+0x9c>)
 80040d8:	2301      	movs	r3, #1
 80040da:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 80040de:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80040e2:	2300      	movs	r3, #0
 80040e4:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80040e6:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80040e8:	2064      	movs	r0, #100	; 0x64
 80040ea:	f000 fca7 	bl	8004a3c <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 80040ee:	4620      	mov	r0, r4
 80040f0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80040f2:	f06f 0404 	mvn.w	r4, #4
 80040f6:	e7fa      	b.n	80040ee <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80040f8:	f06f 0404 	mvn.w	r4, #4
 80040fc:	e7f7      	b.n	80040ee <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80040fe:	f06f 0404 	mvn.w	r4, #4
 8004102:	e7f4      	b.n	80040ee <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004104:	f06f 0404 	mvn.w	r4, #4
 8004108:	e7f1      	b.n	80040ee <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800410a:	f06f 0404 	mvn.w	r4, #4
 800410e:	e7ee      	b.n	80040ee <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004110:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8004114:	e7eb      	b.n	80040ee <OSPI_NOR_ResetMemory+0x6e>
 8004116:	bf00      	nop
 8004118:	24001f38 	.word	0x24001f38
 800411c:	24001f30 	.word	0x24001f30

08004120 <OSPI_NOR_MspDeInit>:
{
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8004122:	2104      	movs	r1, #4
 8004124:	4820      	ldr	r0, [pc, #128]	; (80041a8 <OSPI_NOR_MspDeInit+0x88>)
 8004126:	f001 f83f 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800412a:	4f20      	ldr	r7, [pc, #128]	; (80041ac <OSPI_NOR_MspDeInit+0x8c>)
 800412c:	2120      	movs	r1, #32
 800412e:	4638      	mov	r0, r7
 8004130:	f001 f83a 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8004134:	4e1e      	ldr	r6, [pc, #120]	; (80041b0 <OSPI_NOR_MspDeInit+0x90>)
 8004136:	2140      	movs	r1, #64	; 0x40
 8004138:	4630      	mov	r0, r6
 800413a:	f001 f835 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800413e:	4d1d      	ldr	r5, [pc, #116]	; (80041b4 <OSPI_NOR_MspDeInit+0x94>)
 8004140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004144:	4628      	mov	r0, r5
 8004146:	f001 f82f 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800414a:	4c1b      	ldr	r4, [pc, #108]	; (80041b8 <OSPI_NOR_MspDeInit+0x98>)
 800414c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004150:	4620      	mov	r0, r4
 8004152:	f001 f829 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	4620      	mov	r0, r4
 800415a:	f001 f825 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	4620      	mov	r0, r4
 8004162:	f001 f821 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8004166:	2102      	movs	r1, #2
 8004168:	4638      	mov	r0, r7
 800416a:	f001 f81d 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800416e:	2108      	movs	r1, #8
 8004170:	4812      	ldr	r0, [pc, #72]	; (80041bc <OSPI_NOR_MspDeInit+0x9c>)
 8004172:	f001 f819 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8004176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800417a:	4630      	mov	r0, r6
 800417c:	f001 f814 	bl	80051a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	4628      	mov	r0, r5
 8004184:	f001 f810 	bl	80051a8 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <OSPI_NOR_MspDeInit+0xa0>)
 800418a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800418c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8004192:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004198:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 800419a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800419e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041a2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80041a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a8:	58020400 	.word	0x58020400
 80041ac:	58020800 	.word	0x58020800
 80041b0:	58021800 	.word	0x58021800
 80041b4:	58020c00 	.word	0x58020c00
 80041b8:	58021400 	.word	0x58021400
 80041bc:	58021c00 	.word	0x58021c00
 80041c0:	58024400 	.word	0x58024400

080041c4 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80041ca:	4d2b      	ldr	r5, [pc, #172]	; (8004278 <OSPI_NOR_ExitOPIMode+0xb4>)
 80041cc:	235c      	movs	r3, #92	; 0x5c
 80041ce:	fb03 5500 	mla	r5, r3, r0, r5
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <OSPI_NOR_ExitOPIMode+0xb8>)
 80041d4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80041d8:	789a      	ldrb	r2, [r3, #2]
 80041da:	7859      	ldrb	r1, [r3, #1]
 80041dc:	4628      	mov	r0, r5
 80041de:	f7ff f9cf 	bl	8003580 <MX25LM51245G_WriteEnable>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d138      	bne.n	8004258 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 80041ec:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 80041f0:	4922      	ldr	r1, [pc, #136]	; (800427c <OSPI_NOR_ExitOPIMode+0xb8>)
 80041f2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	788a      	ldrb	r2, [r1, #2]
 80041fa:	7849      	ldrb	r1, [r1, #1]
 80041fc:	4628      	mov	r0, r5
 80041fe:	f7ff fa56 	bl	80036ae <MX25LM51245G_WriteCfg2Register>
 8004202:	4606      	mov	r6, r0
 8004204:	bb58      	cbnz	r0, 800425e <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004206:	2028      	movs	r0, #40	; 0x28
 8004208:	f000 fc18 	bl	8004a3c <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <OSPI_NOR_ExitOPIMode+0xb8>)
 800420e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004212:	789b      	ldrb	r3, [r3, #2]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d014      	beq.n	8004242 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004218:	2200      	movs	r2, #0
 800421a:	4611      	mov	r1, r2
 800421c:	4628      	mov	r0, r5
 800421e:	f7ff f872 	bl	8003306 <MX25LM51245G_AutoPollingMemReady>
 8004222:	b9f8      	cbnz	r0, 8004264 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004224:	ab03      	add	r3, sp, #12
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	461a      	mov	r2, r3
 800422c:	4619      	mov	r1, r3
 800422e:	4628      	mov	r0, r5
 8004230:	f7ff faa4 	bl	800377c <MX25LM51245G_ReadCfg2Register>
 8004234:	b9c8      	cbnz	r0, 800426a <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8004236:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800423a:	b9cb      	cbnz	r3, 8004270 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 800423c:	4630      	mov	r0, r6
 800423e:	b004      	add	sp, #16
 8004240:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004242:	2300      	movs	r3, #0
 8004244:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004246:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004248:	4628      	mov	r0, r5
 800424a:	f002 fb31 	bl	80068b0 <HAL_OSPI_Init>
 800424e:	2800      	cmp	r0, #0
 8004250:	d0e2      	beq.n	8004218 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8004252:	f06f 0603 	mvn.w	r6, #3
 8004256:	e7df      	b.n	8004218 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004258:	f06f 0604 	mvn.w	r6, #4
 800425c:	e7ee      	b.n	800423c <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800425e:	f06f 0604 	mvn.w	r6, #4
 8004262:	e7eb      	b.n	800423c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004264:	f06f 0604 	mvn.w	r6, #4
 8004268:	e7e8      	b.n	800423c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800426a:	f06f 0604 	mvn.w	r6, #4
 800426e:	e7e5      	b.n	800423c <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004270:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8004274:	e7e2      	b.n	800423c <OSPI_NOR_ExitOPIMode+0x78>
 8004276:	bf00      	nop
 8004278:	24001f38 	.word	0x24001f38
 800427c:	24001f30 	.word	0x24001f30

08004280 <OSPI_NOR_EnterSOPIMode>:
{
 8004280:	b530      	push	{r4, r5, lr}
 8004282:	b085      	sub	sp, #20
 8004284:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004286:	4c2e      	ldr	r4, [pc, #184]	; (8004340 <OSPI_NOR_EnterSOPIMode+0xc0>)
 8004288:	235c      	movs	r3, #92	; 0x5c
 800428a:	fb03 4400 	mla	r4, r3, r0, r4
 800428e:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8004290:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004294:	789a      	ldrb	r2, [r3, #2]
 8004296:	7859      	ldrb	r1, [r3, #1]
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff f971 	bl	8003580 <MX25LM51245G_WriteEnable>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d139      	bne.n	8004316 <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80042a2:	4928      	ldr	r1, [pc, #160]	; (8004344 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80042a8:	2307      	movs	r3, #7
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042b0:	788a      	ldrb	r2, [r1, #2]
 80042b2:	7849      	ldrb	r1, [r1, #1]
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff f9fa 	bl	80036ae <MX25LM51245G_WriteCfg2Register>
 80042ba:	bb78      	cbnz	r0, 800431c <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80042c2:	789a      	ldrb	r2, [r3, #2]
 80042c4:	7859      	ldrb	r1, [r3, #1]
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff f95a 	bl	8003580 <MX25LM51245G_WriteEnable>
 80042cc:	bb48      	cbnz	r0, 8004322 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80042ce:	481d      	ldr	r0, [pc, #116]	; (8004344 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042d0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80042d4:	2301      	movs	r3, #1
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2300      	movs	r3, #0
 80042da:	78aa      	ldrb	r2, [r5, #2]
 80042dc:	7869      	ldrb	r1, [r5, #1]
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff f9e5 	bl	80036ae <MX25LM51245G_WriteCfg2Register>
 80042e4:	bb00      	cbnz	r0, 8004328 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80042e6:	2028      	movs	r0, #40	; 0x28
 80042e8:	f000 fba8 	bl	8004a3c <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80042ec:	2200      	movs	r2, #0
 80042ee:	2101      	movs	r1, #1
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7ff f808 	bl	8003306 <MX25LM51245G_AutoPollingMemReady>
 80042f6:	b9d0      	cbnz	r0, 800432e <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80042f8:	ab03      	add	r3, sp, #12
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	461a      	mov	r2, r3
 8004300:	2101      	movs	r1, #1
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fa3a 	bl	800377c <MX25LM51245G_ReadCfg2Register>
 8004308:	b9a0      	cbnz	r0, 8004334 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800430a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d113      	bne.n	800433a <OSPI_NOR_EnterSOPIMode+0xba>
}
 8004312:	b005      	add	sp, #20
 8004314:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004316:	f06f 0004 	mvn.w	r0, #4
 800431a:	e7fa      	b.n	8004312 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800431c:	f06f 0004 	mvn.w	r0, #4
 8004320:	e7f7      	b.n	8004312 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004322:	f06f 0004 	mvn.w	r0, #4
 8004326:	e7f4      	b.n	8004312 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004328:	f06f 0004 	mvn.w	r0, #4
 800432c:	e7f1      	b.n	8004312 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800432e:	f06f 0004 	mvn.w	r0, #4
 8004332:	e7ee      	b.n	8004312 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004334:	f06f 0004 	mvn.w	r0, #4
 8004338:	e7eb      	b.n	8004312 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800433a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800433e:	e7e8      	b.n	8004312 <OSPI_NOR_EnterSOPIMode+0x92>
 8004340:	24001f38 	.word	0x24001f38
 8004344:	24001f30 	.word	0x24001f30

08004348 <OSPI_NOR_EnterDOPIMode>:
{
 8004348:	b530      	push	{r4, r5, lr}
 800434a:	b085      	sub	sp, #20
 800434c:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800434e:	4c35      	ldr	r4, [pc, #212]	; (8004424 <OSPI_NOR_EnterDOPIMode+0xdc>)
 8004350:	235c      	movs	r3, #92	; 0x5c
 8004352:	fb03 4400 	mla	r4, r3, r0, r4
 8004356:	4b34      	ldr	r3, [pc, #208]	; (8004428 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8004358:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800435c:	789a      	ldrb	r2, [r3, #2]
 800435e:	7859      	ldrb	r1, [r3, #1]
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff f90d 	bl	8003580 <MX25LM51245G_WriteEnable>
 8004366:	2800      	cmp	r0, #0
 8004368:	d144      	bne.n	80043f4 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800436a:	492f      	ldr	r1, [pc, #188]	; (8004428 <OSPI_NOR_EnterDOPIMode+0xe0>)
 800436c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8004370:	2307      	movs	r3, #7
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004378:	788a      	ldrb	r2, [r1, #2]
 800437a:	7849      	ldrb	r1, [r1, #1]
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff f996 	bl	80036ae <MX25LM51245G_WriteCfg2Register>
 8004382:	2800      	cmp	r0, #0
 8004384:	d139      	bne.n	80043fa <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004386:	4b28      	ldr	r3, [pc, #160]	; (8004428 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8004388:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800438c:	789a      	ldrb	r2, [r3, #2]
 800438e:	7859      	ldrb	r1, [r3, #1]
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff f8f5 	bl	8003580 <MX25LM51245G_WriteEnable>
 8004396:	bb98      	cbnz	r0, 8004400 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8004398:	4923      	ldr	r1, [pc, #140]	; (8004428 <OSPI_NOR_EnterDOPIMode+0xe0>)
 800439a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800439e:	2302      	movs	r3, #2
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	788a      	ldrb	r2, [r1, #2]
 80043a6:	7849      	ldrb	r1, [r1, #1]
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff f980 	bl	80036ae <MX25LM51245G_WriteCfg2Register>
 80043ae:	bb50      	cbnz	r0, 8004406 <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80043b0:	2028      	movs	r0, #40	; 0x28
 80043b2:	f000 fb43 	bl	8004a3c <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80043b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ba:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80043bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80043c2:	4620      	mov	r0, r4
 80043c4:	f002 fa74 	bl	80068b0 <HAL_OSPI_Init>
 80043c8:	bb00      	cbnz	r0, 800440c <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80043ca:	2201      	movs	r2, #1
 80043cc:	4611      	mov	r1, r2
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7fe ff99 	bl	8003306 <MX25LM51245G_AutoPollingMemReady>
 80043d4:	b9e8      	cbnz	r0, 8004412 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80043d6:	ab03      	add	r3, sp, #12
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	2201      	movs	r2, #1
 80043de:	4611      	mov	r1, r2
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7ff f9cb 	bl	800377c <MX25LM51245G_ReadCfg2Register>
 80043e6:	b9b8      	cbnz	r0, 8004418 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 80043e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d116      	bne.n	800441e <OSPI_NOR_EnterDOPIMode+0xd6>
}
 80043f0:	b005      	add	sp, #20
 80043f2:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043f4:	f06f 0004 	mvn.w	r0, #4
 80043f8:	e7fa      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043fa:	f06f 0004 	mvn.w	r0, #4
 80043fe:	e7f7      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004400:	f06f 0004 	mvn.w	r0, #4
 8004404:	e7f4      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004406:	f06f 0004 	mvn.w	r0, #4
 800440a:	e7f1      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800440c:	f06f 0003 	mvn.w	r0, #3
 8004410:	e7ee      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004412:	f06f 0004 	mvn.w	r0, #4
 8004416:	e7eb      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004418:	f06f 0004 	mvn.w	r0, #4
 800441c:	e7e8      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800441e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004422:	e7e5      	b.n	80043f0 <OSPI_NOR_EnterDOPIMode+0xa8>
 8004424:	24001f38 	.word	0x24001f38
 8004428:	24001f30 	.word	0x24001f30

0800442c <MX_OSPI_NOR_Init>:
{
 800442c:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 800442e:	4b12      	ldr	r3, [pc, #72]	; (8004478 <MX_OSPI_NOR_Init+0x4c>)
 8004430:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 8004432:	2304      	movs	r3, #4
 8004434:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004436:	2300      	movs	r3, #0
 8004438:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800443a:	680a      	ldr	r2, [r1, #0]
 800443c:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800443e:	2202      	movs	r2, #2
 8004440:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004442:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8004444:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004446:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004448:	684a      	ldr	r2, [r1, #4]
 800444a:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800444c:	688a      	ldr	r2, [r1, #8]
 800444e:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8004450:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8004452:	2308      	movs	r3, #8
 8004454:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8004456:	68cb      	ldr	r3, [r1, #12]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d005      	beq.n	8004468 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800445c:	2300      	movs	r3, #0
 800445e:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004460:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8004462:	f002 fa25 	bl	80068b0 <HAL_OSPI_Init>
}
 8004466:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800446c:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800446e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004472:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004474:	e7f5      	b.n	8004462 <MX_OSPI_NOR_Init+0x36>
 8004476:	bf00      	nop
 8004478:	52005000 	.word	0x52005000

0800447c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800447c:	bb38      	cbnz	r0, 80044ce <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 800447e:	b510      	push	{r4, lr}
 8004480:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8004484:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004488:	789b      	ldrb	r3, [r3, #2]
 800448a:	b983      	cbnz	r3, 80044ae <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800448e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004492:	2201      	movs	r2, #1
 8004494:	7859      	ldrb	r1, [r3, #1]
 8004496:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8004498:	205c      	movs	r0, #92	; 0x5c
 800449a:	fb00 3004 	mla	r0, r0, r4, r3
 800449e:	f7fe ffb1 	bl	8003404 <MX25LM51245G_EnableMemoryMappedModeSTR>
 80044a2:	b9b8      	cbnz	r0, 80044d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044a6:	2202      	movs	r2, #2
 80044a8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 80044ac:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044b4:	7859      	ldrb	r1, [r3, #1]
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80044b8:	205c      	movs	r0, #92	; 0x5c
 80044ba:	fb00 3004 	mla	r0, r0, r4, r3
 80044be:	f7ff f80d 	bl	80034dc <MX25LM51245G_EnableMemoryMappedModeDTR>
 80044c2:	b950      	cbnz	r0, 80044da <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044c6:	2202      	movs	r2, #2
 80044c8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80044cc:	e7ee      	b.n	80044ac <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 80044ce:	f06f 0001 	mvn.w	r0, #1
}
 80044d2:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80044d4:	f06f 0004 	mvn.w	r0, #4
 80044d8:	e7e8      	b.n	80044ac <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80044da:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80044de:	e7e5      	b.n	80044ac <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 80044e0:	24001f30 	.word	0x24001f30
 80044e4:	24001f38 	.word	0x24001f38

080044e8 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80044e8:	b990      	cbnz	r0, 8004510 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 80044ea:	b510      	push	{r4, lr}
 80044ec:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 80044f0:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d10e      	bne.n	8004516 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 80044fa:	205c      	movs	r0, #92	; 0x5c
 80044fc:	fb00 3004 	mla	r0, r0, r4, r3
 8004500:	f002 f98e 	bl	8006820 <HAL_OSPI_Abort>
 8004504:	b950      	cbnz	r0, 800451c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8004508:	2201      	movs	r2, #1
 800450a:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800450e:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004510:	f06f 0001 	mvn.w	r0, #1
}
 8004514:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004516:	f06f 001a 	mvn.w	r0, #26
 800451a:	e7f8      	b.n	800450e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 800451c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004520:	e7f5      	b.n	800450e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 8004522:	bf00      	nop
 8004524:	24001f30 	.word	0x24001f30
 8004528:	24001f38 	.word	0x24001f38

0800452c <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800452c:	bb08      	cbnz	r0, 8004572 <BSP_OSPI_NOR_DeInit+0x46>
{
 800452e:	b510      	push	{r4, lr}
 8004530:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <BSP_OSPI_NOR_DeInit+0x54>)
 8004534:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d013      	beq.n	8004564 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <BSP_OSPI_NOR_DeInit+0x54>)
 800453e:	2200      	movs	r2, #0
 8004540:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8004544:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004548:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800454a:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <BSP_OSPI_NOR_DeInit+0x58>)
 800454e:	225c      	movs	r2, #92	; 0x5c
 8004550:	fb02 3404 	mla	r4, r2, r4, r3
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff fde3 	bl	8004120 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800455a:	4620      	mov	r0, r4
 800455c:	f001 feae 	bl	80062bc <HAL_OSPI_DeInit>
 8004560:	b950      	cbnz	r0, 8004578 <BSP_OSPI_NOR_DeInit+0x4c>
}
 8004562:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004564:	f7ff ffc0 	bl	80044e8 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8004568:	2800      	cmp	r0, #0
 800456a:	d0e7      	beq.n	800453c <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800456c:	f06f 0004 	mvn.w	r0, #4
 8004570:	e7f7      	b.n	8004562 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004572:	f06f 0001 	mvn.w	r0, #1
}
 8004576:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004578:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800457c:	e7f1      	b.n	8004562 <BSP_OSPI_NOR_DeInit+0x36>
 800457e:	bf00      	nop
 8004580:	24001f30 	.word	0x24001f30
 8004584:	24001f38 	.word	0x24001f38

08004588 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004588:	2800      	cmp	r0, #0
 800458a:	d141      	bne.n	8004610 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	460d      	mov	r5, r1
 8004590:	4616      	mov	r6, r2
 8004592:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8004596:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d03b      	beq.n	8004616 <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045a0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d00b      	beq.n	80045c2 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80045aa:	2901      	cmp	r1, #1
 80045ac:	d025      	beq.n	80045fa <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 80045ae:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80045b8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80045bc:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80045be:	70a6      	strb	r6, [r4, #2]
}
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80045c2:	2901      	cmp	r1, #1
 80045c4:	d105      	bne.n	80045d2 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045c8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80045cc:	789b      	ldrb	r3, [r3, #2]
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01c      	beq.n	800460c <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff fdf6 	bl	80041c4 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80045d8:	2800      	cmp	r0, #0
 80045da:	bf08      	it	eq
 80045dc:	2d01      	cmpeq	r5, #1
 80045de:	d10f      	bne.n	8004600 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045e6:	789b      	ldrb	r3, [r3, #2]
 80045e8:	b91b      	cbnz	r3, 80045f2 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 80045ea:	4620      	mov	r0, r4
 80045ec:	f7ff feac 	bl	8004348 <OSPI_NOR_EnterDOPIMode>
 80045f0:	e006      	b.n	8004600 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff fe44 	bl	8004280 <OSPI_NOR_EnterSOPIMode>
 80045f8:	e002      	b.n	8004600 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80045fa:	b922      	cbnz	r2, 8004606 <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 80045fc:	f7ff fe40 	bl	8004280 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 8004600:	2800      	cmp	r0, #0
 8004602:	d1dd      	bne.n	80045c0 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8004604:	e7d4      	b.n	80045b0 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004606:	f7ff fe9f 	bl	8004348 <OSPI_NOR_EnterDOPIMode>
 800460a:	e7f9      	b.n	8004600 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 800460c:	2000      	movs	r0, #0
 800460e:	e7cf      	b.n	80045b0 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 8004610:	f06f 0001 	mvn.w	r0, #1
}
 8004614:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004616:	f06f 0019 	mvn.w	r0, #25
  return ret;
 800461a:	e7d1      	b.n	80045c0 <BSP_OSPI_NOR_ConfigFlash+0x38>
 800461c:	24001f30 	.word	0x24001f30

08004620 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004620:	2800      	cmp	r0, #0
 8004622:	d13f      	bne.n	80046a4 <BSP_OSPI_NOR_Init+0x84>
{
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	b08e      	sub	sp, #56	; 0x38
 8004628:	460d      	mov	r5, r1
 800462a:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800462c:	4b23      	ldr	r3, [pc, #140]	; (80046bc <BSP_OSPI_NOR_Init+0x9c>)
 800462e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004632:	b113      	cbz	r3, 800463a <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8004634:	2000      	movs	r0, #0
}
 8004636:	b00e      	add	sp, #56	; 0x38
 8004638:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800463a:	4e21      	ldr	r6, [pc, #132]	; (80046c0 <BSP_OSPI_NOR_Init+0xa0>)
 800463c:	235c      	movs	r3, #92	; 0x5c
 800463e:	fb03 6600 	mla	r6, r3, r0, r6
 8004642:	4630      	mov	r0, r6
 8004644:	f7ff fc0e 	bl	8003e64 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8004648:	a805      	add	r0, sp, #20
 800464a:	f7fe fe43 	bl	80032d4 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 800464e:	2303      	movs	r3, #3
 8004650:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8004652:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004658:	b313      	cbz	r3, 80046a0 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004660:	2300      	movs	r3, #0
 8004662:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8004664:	786b      	ldrb	r3, [r5, #1]
 8004666:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004668:	a901      	add	r1, sp, #4
 800466a:	4630      	mov	r0, r6
 800466c:	f7ff fede 	bl	800442c <MX_OSPI_NOR_Init>
 8004670:	b9d8      	cbnz	r0, 80046aa <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8004672:	4620      	mov	r0, r4
 8004674:	f7ff fd04 	bl	8004080 <OSPI_NOR_ResetMemory>
 8004678:	b9d0      	cbnz	r0, 80046b0 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <BSP_OSPI_NOR_Init+0x9c>)
 800467c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004680:	789a      	ldrb	r2, [r3, #2]
 8004682:	7859      	ldrb	r1, [r3, #1]
 8004684:	4630      	mov	r0, r6
 8004686:	f7fe fe3e 	bl	8003306 <MX25LM51245G_AutoPollingMemReady>
 800468a:	b9a0      	cbnz	r0, 80046b6 <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800468c:	786a      	ldrb	r2, [r5, #1]
 800468e:	7829      	ldrb	r1, [r5, #0]
 8004690:	4620      	mov	r0, r4
 8004692:	f7ff ff79 	bl	8004588 <BSP_OSPI_NOR_ConfigFlash>
 8004696:	2800      	cmp	r0, #0
 8004698:	d0cd      	beq.n	8004636 <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800469a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800469e:	e7ca      	b.n	8004636 <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e7dc      	b.n	800465e <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 80046a4:	f06f 0001 	mvn.w	r0, #1
}
 80046a8:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 80046aa:	f06f 0003 	mvn.w	r0, #3
 80046ae:	e7c2      	b.n	8004636 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80046b0:	f06f 0004 	mvn.w	r0, #4
 80046b4:	e7bf      	b.n	8004636 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80046b6:	f06f 0004 	mvn.w	r0, #4
 80046ba:	e7bc      	b.n	8004636 <BSP_OSPI_NOR_Init+0x16>
 80046bc:	24001f30 	.word	0x24001f30
 80046c0:	24001f38 	.word	0x24001f38

080046c4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80046c4:	b510      	push	{r4, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80046ce:	2370      	movs	r3, #112	; 0x70
 80046d0:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 80046d4:	4b17      	ldr	r3, [pc, #92]	; (8004734 <FT5336_Probe+0x70>)
 80046d6:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <FT5336_Probe+0x74>)
 80046da:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <FT5336_Probe+0x78>)
 80046de:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <FT5336_Probe+0x7c>)
 80046e2:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 80046e4:	4b17      	ldr	r3, [pc, #92]	; (8004744 <FT5336_Probe+0x80>)
 80046e6:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80046e8:	a902      	add	r1, sp, #8
 80046ea:	4817      	ldr	r0, [pc, #92]	; (8004748 <FT5336_Probe+0x84>)
 80046ec:	f7fe fd50 	bl	8003190 <FT5336_RegisterBusIO>
 80046f0:	b998      	cbnz	r0, 800471a <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80046f2:	a901      	add	r1, sp, #4
 80046f4:	4814      	ldr	r0, [pc, #80]	; (8004748 <FT5336_Probe+0x84>)
 80046f6:	f7fe fc8d 	bl	8003014 <FT5336_ReadID>
 80046fa:	b988      	cbnz	r0, 8004720 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	2b51      	cmp	r3, #81	; 0x51
 8004700:	d111      	bne.n	8004726 <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8004702:	4811      	ldr	r0, [pc, #68]	; (8004748 <FT5336_Probe+0x84>)
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <FT5336_Probe+0x88>)
 8004706:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <FT5336_Probe+0x8c>)
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <FT5336_Probe+0x90>)
 800470e:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4798      	blx	r3
 8004714:	b950      	cbnz	r0, 800472c <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8004716:	b008      	add	sp, #32
 8004718:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 800471a:	f06f 0007 	mvn.w	r0, #7
 800471e:	e7fa      	b.n	8004716 <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004720:	f06f 0004 	mvn.w	r0, #4
 8004724:	e7f7      	b.n	8004716 <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004726:	f06f 0006 	mvn.w	r0, #6
 800472a:	e7f4      	b.n	8004716 <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800472c:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004730:	e7f1      	b.n	8004716 <FT5336_Probe+0x52>
 8004732:	bf00      	nop
 8004734:	08003da5 	.word	0x08003da5
 8004738:	08003d35 	.word	0x08003d35
 800473c:	08003e2d 	.word	0x08003e2d
 8004740:	08003dfd 	.word	0x08003dfd
 8004744:	08003e5d 	.word	0x08003e5d
 8004748:	24001f94 	.word	0x24001f94
 800474c:	24001fbc 	.word	0x24001fbc
 8004750:	2400000c 	.word	0x2400000c
 8004754:	24001fe0 	.word	0x24001fe0

08004758 <BSP_TS_Init>:
{
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475a:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800475c:	2800      	cmp	r0, #0
 800475e:	d150      	bne.n	8004802 <BSP_TS_Init+0xaa>
 8004760:	460c      	mov	r4, r1
 8004762:	4605      	mov	r5, r0
 8004764:	680b      	ldr	r3, [r1, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04e      	beq.n	8004808 <BSP_TS_Init+0xb0>
 800476a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800476e:	d84e      	bhi.n	800480e <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004770:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004772:	2a00      	cmp	r2, #0
 8004774:	d04e      	beq.n	8004814 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004776:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800477a:	d84e      	bhi.n	800481a <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800477c:	68c9      	ldr	r1, [r1, #12]
 800477e:	4293      	cmp	r3, r2
 8004780:	bf28      	it	cs
 8004782:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004784:	4299      	cmp	r1, r3
 8004786:	d84b      	bhi.n	8004820 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8004788:	f7ff ff9c 	bl	80046c4 <FT5336_Probe>
 800478c:	4606      	mov	r6, r0
 800478e:	2800      	cmp	r0, #0
 8004790:	d149      	bne.n	8004826 <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	4925      	ldr	r1, [pc, #148]	; (800482c <BSP_TS_Init+0xd4>)
 8004796:	016a      	lsls	r2, r5, #5
 8004798:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 800479c:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800479e:	6862      	ldr	r2, [r4, #4]
 80047a0:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80047a2:	68a2      	ldr	r2, [r4, #8]
 80047a4:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80047a6:	68e2      	ldr	r2, [r4, #12]
 80047a8:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <BSP_TS_Init+0xd8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	a901      	add	r1, sp, #4
 80047b2:	4a20      	ldr	r2, [pc, #128]	; (8004834 <BSP_TS_Init+0xdc>)
 80047b4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80047b8:	4798      	blx	r3
 80047ba:	2800      	cmp	r0, #0
 80047bc:	db1e      	blt.n	80047fc <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <BSP_TS_Init+0xd4>)
 80047c0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80047c4:	9a02      	ldr	r2, [sp, #8]
 80047c6:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80047c8:	9a03      	ldr	r2, [sp, #12]
 80047ca:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80047cc:	462b      	mov	r3, r5
 80047ce:	b113      	cbz	r3, 80047d6 <BSP_TS_Init+0x7e>
}
 80047d0:	4630      	mov	r0, r6
 80047d2:	b005      	add	sp, #20
 80047d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	68e1      	ldr	r1, [r4, #12]
 80047da:	440a      	add	r2, r1
 80047dc:	3201      	adds	r2, #1
 80047de:	4913      	ldr	r1, [pc, #76]	; (800482c <BSP_TS_Init+0xd4>)
 80047e0:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 80047e4:	3006      	adds	r0, #6
 80047e6:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	68e7      	ldr	r7, [r4, #12]
 80047ee:	443a      	add	r2, r7
 80047f0:	3201      	adds	r2, #1
 80047f2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80047f6:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80047f8:	3301      	adds	r3, #1
 80047fa:	e7e8      	b.n	80047ce <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80047fc:	f06f 0604 	mvn.w	r6, #4
 8004800:	e7e6      	b.n	80047d0 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 8004802:	f06f 0601 	mvn.w	r6, #1
 8004806:	e7e3      	b.n	80047d0 <BSP_TS_Init+0x78>
 8004808:	f06f 0601 	mvn.w	r6, #1
 800480c:	e7e0      	b.n	80047d0 <BSP_TS_Init+0x78>
 800480e:	f06f 0601 	mvn.w	r6, #1
 8004812:	e7dd      	b.n	80047d0 <BSP_TS_Init+0x78>
 8004814:	f06f 0601 	mvn.w	r6, #1
 8004818:	e7da      	b.n	80047d0 <BSP_TS_Init+0x78>
 800481a:	f06f 0601 	mvn.w	r6, #1
 800481e:	e7d7      	b.n	80047d0 <BSP_TS_Init+0x78>
 8004820:	f06f 0601 	mvn.w	r6, #1
 8004824:	e7d4      	b.n	80047d0 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 8004826:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 800482a:	e7d1      	b.n	80047d0 <BSP_TS_Init+0x78>
 800482c:	24001fc0 	.word	0x24001fc0
 8004830:	24001fe0 	.word	0x24001fe0
 8004834:	24001fbc 	.word	0x24001fbc

08004838 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 8004838:	2800      	cmp	r0, #0
 800483a:	d178      	bne.n	800492e <BSP_TS_GetState+0xf6>
{
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	460c      	mov	r4, r1
 8004842:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8004844:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <BSP_TS_GetState+0xfc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	a901      	add	r1, sp, #4
 800484c:	4a3a      	ldr	r2, [pc, #232]	; (8004938 <BSP_TS_GetState+0x100>)
 800484e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004852:	4798      	blx	r3
 8004854:	2800      	cmp	r0, #0
 8004856:	db66      	blt.n	8004926 <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 8004858:	9e01      	ldr	r6, [sp, #4]
 800485a:	2e00      	cmp	r6, #0
 800485c:	d059      	beq.n	8004912 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800485e:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 8004860:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004862:	4b36      	ldr	r3, [pc, #216]	; (800493c <BSP_TS_GetState+0x104>)
 8004864:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004868:	6899      	ldr	r1, [r3, #8]
 800486a:	f011 0f08 	tst.w	r1, #8
 800486e:	d141      	bne.n	80048f4 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 8004870:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 8004872:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8004874:	f011 0f02 	tst.w	r1, #2
 8004878:	d005      	beq.n	8004886 <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800487a:	4b30      	ldr	r3, [pc, #192]	; (800493c <BSP_TS_GetState+0x104>)
 800487c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004886:	f011 0f04 	tst.w	r1, #4
 800488a:	d005      	beq.n	8004898 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <BSP_TS_GetState+0x104>)
 800488e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 8004892:	6952      	ldr	r2, [r2, #20]
 8004894:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004898:	4a28      	ldr	r2, [pc, #160]	; (800493c <BSP_TS_GetState+0x104>)
 800489a:	0168      	lsls	r0, r5, #5
 800489c:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 80048a0:	5810      	ldr	r0, [r2, r0]
 80048a2:	fb00 f303 	mul.w	r3, r0, r3
 80048a6:	690a      	ldr	r2, [r1, #16]
 80048a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ac:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80048ae:	684a      	ldr	r2, [r1, #4]
 80048b0:	fb0c f202 	mul.w	r2, ip, r2
 80048b4:	6948      	ldr	r0, [r1, #20]
 80048b6:	fbb2 f2f0 	udiv	r2, r2, r0
 80048ba:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 80048bc:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80048be:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80048c0:	4283      	cmp	r3, r0
 80048c2:	d91a      	bls.n	80048fa <BSP_TS_GetState+0xc2>
 80048c4:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80048c6:	491d      	ldr	r1, [pc, #116]	; (800493c <BSP_TS_GetState+0x104>)
 80048c8:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80048cc:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80048ce:	428a      	cmp	r2, r1
 80048d0:	d915      	bls.n	80048fe <BSP_TS_GetState+0xc6>
 80048d2:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80048d4:	4919      	ldr	r1, [pc, #100]	; (800493c <BSP_TS_GetState+0x104>)
 80048d6:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80048da:	68c9      	ldr	r1, [r1, #12]
 80048dc:	42b1      	cmp	r1, r6
 80048de:	d301      	bcc.n	80048e4 <BSP_TS_GetState+0xac>
 80048e0:	4291      	cmp	r1, r2
 80048e2:	d20e      	bcs.n	8004902 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80048e4:	4a15      	ldr	r2, [pc, #84]	; (800493c <BSP_TS_GetState+0x104>)
 80048e6:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 80048ea:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 80048f0:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80048f2:	e01a      	b.n	800492a <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 80048f4:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 80048f6:	4603      	mov	r3, r0
 80048f8:	e7bc      	b.n	8004874 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80048fa:	1ac6      	subs	r6, r0, r3
 80048fc:	e7e3      	b.n	80048c6 <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80048fe:	1a8a      	subs	r2, r1, r2
 8004900:	e7e8      	b.n	80048d4 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004902:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004904:	4b0d      	ldr	r3, [pc, #52]	; (800493c <BSP_TS_GetState+0x104>)
 8004906:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800490a:	69eb      	ldr	r3, [r5, #28]
 800490c:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800490e:	2000      	movs	r0, #0
 8004910:	e00b      	b.n	800492a <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 8004912:	2000      	movs	r0, #0
 8004914:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <BSP_TS_GetState+0x104>)
 8004918:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800491c:	69ab      	ldr	r3, [r5, #24]
 800491e:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004920:	69eb      	ldr	r3, [r5, #28]
 8004922:	60a3      	str	r3, [r4, #8]
 8004924:	e001      	b.n	800492a <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004926:	f06f 0004 	mvn.w	r0, #4
}
 800492a:	b004      	add	sp, #16
 800492c:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800492e:	f06f 0001 	mvn.w	r0, #1
}
 8004932:	4770      	bx	lr
 8004934:	24001fe0 	.word	0x24001fe0
 8004938:	24001fbc 	.word	0x24001fbc
 800493c:	24001fc0 	.word	0x24001fc0

08004940 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004940:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <SystemInit+0x64>)
 8004942:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800494a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800494e:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <SystemInit+0x68>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	4913      	ldr	r1, [pc, #76]	; (80049ac <SystemInit+0x6c>)
 8004960:	4001      	ands	r1, r0
 8004962:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004964:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8004966:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004968:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800496a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004978:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004980:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004982:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <SystemInit+0x70>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <SystemInit+0x74>)
 800498a:	4013      	ands	r3, r2
 800498c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004990:	d203      	bcs.n	800499a <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <SystemInit+0x78>)
 8004994:	2201      	movs	r2, #1
 8004996:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800499a:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <SystemInit+0x64>)
 800499c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80049a2:	4770      	bx	lr
 80049a4:	e000ed00 	.word	0xe000ed00
 80049a8:	58024400 	.word	0x58024400
 80049ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80049b0:	5c001000 	.word	0x5c001000
 80049b4:	ffff0000 	.word	0xffff0000
 80049b8:	51008000 	.word	0x51008000

080049bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049bc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049be:	2003      	movs	r0, #3
 80049c0:	f000 f850 	bl	8004a64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80049c4:	f002 fb54 	bl	8007070 <HAL_RCC_GetSysClockFreq>
 80049c8:	490f      	ldr	r1, [pc, #60]	; (8004a08 <HAL_Init+0x4c>)
 80049ca:	698b      	ldr	r3, [r1, #24]
 80049cc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <HAL_Init+0x50>)
 80049d2:	5cd3      	ldrb	r3, [r2, r3]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80049da:	698b      	ldr	r3, [r1, #24]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	5cd3      	ldrb	r3, [r2, r3]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	fa20 f303 	lsr.w	r3, r0, r3
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_Init+0x54>)
 80049ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_Init+0x58>)
 80049f0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049f2:	2000      	movs	r0, #0
 80049f4:	f7fd fb8c 	bl	8002110 <HAL_InitTick>
 80049f8:	b110      	cbz	r0, 8004a00 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80049fa:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80049fc:	4620      	mov	r0, r4
 80049fe:	bd10      	pop	{r4, pc}
 8004a00:	4604      	mov	r4, r0
  HAL_MspInit();
 8004a02:	f7fd f9c7 	bl	8001d94 <HAL_MspInit>
  return HAL_OK;
 8004a06:	e7f9      	b.n	80049fc <HAL_Init+0x40>
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	08019f4c 	.word	0x08019f4c
 8004a10:	24000040 	.word	0x24000040
 8004a14:	2400003c 	.word	0x2400003c

08004a18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <HAL_IncTick+0x10>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4a03      	ldr	r2, [pc, #12]	; (8004a2c <HAL_IncTick+0x14>)
 8004a1e:	6811      	ldr	r1, [r2, #0]
 8004a20:	440b      	add	r3, r1
 8004a22:	6013      	str	r3, [r2, #0]
}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	24000044 	.word	0x24000044
 8004a2c:	24001fe4 	.word	0x24001fe4

08004a30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a30:	4b01      	ldr	r3, [pc, #4]	; (8004a38 <HAL_GetTick+0x8>)
 8004a32:	6818      	ldr	r0, [r3, #0]
}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	24001fe4 	.word	0x24001fe4

08004a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a40:	f7ff fff6 	bl	8004a30 <HAL_GetTick>
 8004a44:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a46:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004a4a:	d002      	beq.n	8004a52 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <HAL_Delay+0x24>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a52:	f7ff ffed 	bl	8004a30 <HAL_GetTick>
 8004a56:	1b40      	subs	r0, r0, r5
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d3fa      	bcc.n	8004a52 <HAL_Delay+0x16>
  {
  }
}
 8004a5c:	bd38      	pop	{r3, r4, r5, pc}
 8004a5e:	bf00      	nop
 8004a60:	24000044 	.word	0x24000044

08004a64 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a64:	4906      	ldr	r1, [pc, #24]	; (8004a80 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004a66:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a6c:	041b      	lsls	r3, r3, #16
 8004a6e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a70:	0200      	lsls	r0, r0, #8
 8004a72:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a76:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004a78:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004a7a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004a7c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004a7e:	4770      	bx	lr
 8004a80:	e000ed00 	.word	0xe000ed00
 8004a84:	05fa0000 	.word	0x05fa0000

08004a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a88:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <HAL_NVIC_SetPriority+0x60>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a92:	f1c3 0c07 	rsb	ip, r3, #7
 8004a96:	f1bc 0f04 	cmp.w	ip, #4
 8004a9a:	bf28      	it	cs
 8004a9c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aa0:	f103 0e04 	add.w	lr, r3, #4
 8004aa4:	f1be 0f06 	cmp.w	lr, #6
 8004aa8:	d914      	bls.n	8004ad4 <HAL_NVIC_SetPriority+0x4c>
 8004aaa:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aac:	f04f 3eff 	mov.w	lr, #4294967295
 8004ab0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004ab4:	ea21 010c 	bic.w	r1, r1, ip
 8004ab8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aba:	fa0e f303 	lsl.w	r3, lr, r3
 8004abe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	db07      	blt.n	8004ad8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac8:	0109      	lsls	r1, r1, #4
 8004aca:	b2c9      	uxtb	r1, r1
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <HAL_NVIC_SetPriority+0x64>)
 8004ace:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004ad0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e7e9      	b.n	8004aac <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad8:	f000 000f 	and.w	r0, r0, #15
 8004adc:	0109      	lsls	r1, r1, #4
 8004ade:	b2c9      	uxtb	r1, r1
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <HAL_NVIC_SetPriority+0x68>)
 8004ae2:	5419      	strb	r1, [r3, r0]
 8004ae4:	e7f4      	b.n	8004ad0 <HAL_NVIC_SetPriority+0x48>
 8004ae6:	bf00      	nop
 8004ae8:	e000ed00 	.word	0xe000ed00
 8004aec:	e000e400 	.word	0xe000e400
 8004af0:	e000ed14 	.word	0xe000ed14

08004af4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004af4:	2800      	cmp	r0, #0
 8004af6:	db07      	blt.n	8004b08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004af8:	f000 021f 	and.w	r2, r0, #31
 8004afc:	0940      	lsrs	r0, r0, #5
 8004afe:	2301      	movs	r3, #1
 8004b00:	4093      	lsls	r3, r2
 8004b02:	4a02      	ldr	r2, [pc, #8]	; (8004b0c <HAL_NVIC_EnableIRQ+0x18>)
 8004b04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	e000e100 	.word	0xe000e100

08004b10 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b10:	2800      	cmp	r0, #0
 8004b12:	db0c      	blt.n	8004b2e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b14:	f000 021f 	and.w	r2, r0, #31
 8004b18:	0940      	lsrs	r0, r0, #5
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4093      	lsls	r3, r2
 8004b1e:	3020      	adds	r0, #32
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <HAL_NVIC_DisableIRQ+0x20>)
 8004b22:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b2a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b2e:	4770      	bx	lr
 8004b30:	e000e100 	.word	0xe000e100

08004b34 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004b34:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <HAL_MPU_Disable+0x18>)
 8004b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b50:	f040 0001 	orr.w	r0, r0, #1
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_MPU_Enable+0x1c>)
 8004b56:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b66:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004b70:	7842      	ldrb	r2, [r0, #1]
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_MPU_ConfigRegion+0x5c>)
 8004b74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8004b78:	7803      	ldrb	r3, [r0, #0]
 8004b7a:	b1fb      	cbz	r3, 8004bbc <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004b7c:	6843      	ldr	r3, [r0, #4]
 8004b7e:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <HAL_MPU_ConfigRegion+0x5c>)
 8004b80:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b84:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b86:	7ac3      	ldrb	r3, [r0, #11]
 8004b88:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b8a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b8e:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b90:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b94:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b96:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004b9a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b9c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ba0:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004ba6:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ba8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bac:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004bb2:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bb4:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bb6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004bba:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <HAL_MPU_ConfigRegion+0x5c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004bc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d038      	beq.n	8004c46 <HAL_CRC_Init+0x76>
{
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004bd8:	7f43      	ldrb	r3, [r0, #29]
 8004bda:	b31b      	cbz	r3, 8004c24 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004be0:	7923      	ldrb	r3, [r4, #4]
 8004be2:	bb1b      	cbnz	r3, 8004c2c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_CRC_Init+0x7c>)
 8004be8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	6893      	ldr	r3, [r2, #8]
 8004bee:	f023 0318 	bic.w	r3, r3, #24
 8004bf2:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bf4:	7963      	ldrb	r3, [r4, #5]
 8004bf6:	bb13      	cbnz	r3, 8004c3e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	6893      	ldr	r3, [r2, #8]
 8004c04:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004c08:	6961      	ldr	r1, [r4, #20]
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	6893      	ldr	r3, [r2, #8]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c16:	69a1      	ldr	r1, [r4, #24]
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8004c20:	2000      	movs	r0, #0
}
 8004c22:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004c24:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004c26:	f7fd f8cf 	bl	8001dc8 <HAL_CRC_MspInit>
 8004c2a:	e7d7      	b.n	8004bdc <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c2c:	68e2      	ldr	r2, [r4, #12]
 8004c2e:	68a1      	ldr	r1, [r4, #8]
 8004c30:	4620      	mov	r0, r4
 8004c32:	f000 f80d 	bl	8004c50 <HAL_CRCEx_Polynomial_Set>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d0dc      	beq.n	8004bf4 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	e7f1      	b.n	8004c22 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	6922      	ldr	r2, [r4, #16]
 8004c42:	611a      	str	r2, [r3, #16]
 8004c44:	e7dc      	b.n	8004c00 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8004c46:	2001      	movs	r0, #1
}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	04c11db7 	.word	0x04c11db7

08004c50 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c50:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c52:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c54:	461c      	mov	r4, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b134      	cbz	r4, 8004c68 <HAL_CRCEx_Polynomial_Set+0x18>
 8004c5a:	f003 0c1f 	and.w	ip, r3, #31
 8004c5e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8004c62:	f01c 0f01 	tst.w	ip, #1
 8004c66:	d0f5      	beq.n	8004c54 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004c68:	2a18      	cmp	r2, #24
 8004c6a:	d822      	bhi.n	8004cb2 <HAL_CRCEx_Polynomial_Set+0x62>
 8004c6c:	e8df f002 	tbb	[pc, r2]
 8004c70:	2121210f 	.word	0x2121210f
 8004c74:	21212121 	.word	0x21212121
 8004c78:	2121211d 	.word	0x2121211d
 8004c7c:	21212121 	.word	0x21212121
 8004c80:	21212119 	.word	0x21212119
 8004c84:	21212121 	.word	0x21212121
 8004c88:	0d          	.byte	0x0d
 8004c89:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d815      	bhi.n	8004cba <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c8e:	6803      	ldr	r3, [r0, #0]
 8004c90:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c92:	6801      	ldr	r1, [r0, #0]
 8004c94:	688b      	ldr	r3, [r1, #8]
 8004c96:	f023 0318 	bic.w	r3, r3, #24
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	608a      	str	r2, [r1, #8]
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e008      	b.n	8004cb4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	d9f3      	bls.n	8004c8e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e004      	b.n	8004cb4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d9ef      	bls.n	8004c8e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004cae:	2001      	movs	r0, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8004cb2:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8004cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cb8:	4770      	bx	lr
        status =   HAL_ERROR;
 8004cba:	2001      	movs	r0, #1
 8004cbc:	e7fa      	b.n	8004cb4 <HAL_CRCEx_Polynomial_Set+0x64>
	...

08004cc0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d037      	beq.n	8004d34 <HAL_DMA2D_Init+0x74>
{
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004cc8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02c      	beq.n	8004d2a <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004cd6:	6821      	ldr	r1, [r4, #0]
 8004cd8:	680a      	ldr	r2, [r1, #0]
 8004cda:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <HAL_DMA2D_Init+0x78>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	69e0      	ldr	r0, [r4, #28]
 8004ce2:	4302      	orrs	r2, r0
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004ce8:	6821      	ldr	r1, [r4, #0]
 8004cea:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_DMA2D_Init+0x7c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	68a2      	ldr	r2, [r4, #8]
 8004cf2:	69a0      	ldr	r0, [r4, #24]
 8004cf4:	4302      	orrs	r2, r0
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_DMA2D_Init+0x80>)
 8004d00:	400b      	ands	r3, r1
 8004d02:	68e1      	ldr	r1, [r4, #12]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004d0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d10:	6920      	ldr	r0, [r4, #16]
 8004d12:	6962      	ldr	r2, [r4, #20]
 8004d14:	0552      	lsls	r2, r2, #21
 8004d16:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d1e:	2000      	movs	r0, #0
 8004d20:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8004d28:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004d2a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8004d2e:	f7fd f865 	bl	8001dfc <HAL_DMA2D_MspInit>
 8004d32:	e7cd      	b.n	8004cd0 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8004d34:	2001      	movs	r0, #1
}
 8004d36:	4770      	bx	lr
 8004d38:	fff8ffbf 	.word	0xfff8ffbf
 8004d3c:	fffffef8 	.word	0xfffffef8
 8004d40:	ffff0000 	.word	0xffff0000

08004d44 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004d44:	4770      	bx	lr

08004d46 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004d46:	4770      	bx	lr

08004d48 <HAL_DMA2D_IRQHandler>:
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d4c:	6803      	ldr	r3, [r0, #0]
 8004d4e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004d50:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d52:	f015 0f01 	tst.w	r5, #1
 8004d56:	d016      	beq.n	8004d86 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004d58:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004d5c:	d013      	beq.n	8004d86 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d66:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004d6e:	6803      	ldr	r3, [r0, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d74:	2304      	movs	r3, #4
 8004d76:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004d80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d82:	b103      	cbz	r3, 8004d86 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8004d84:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d86:	f015 0f20 	tst.w	r5, #32
 8004d8a:	d018      	beq.n	8004dbe <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004d8c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8004d90:	d015      	beq.n	8004dbe <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004daa:	2304      	movs	r3, #4
 8004dac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004db0:	2300      	movs	r3, #0
 8004db2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db8:	b10b      	cbz	r3, 8004dbe <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004dbe:	f015 0f08 	tst.w	r5, #8
 8004dc2:	d018      	beq.n	8004df6 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004dc4:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8004dc8:	d015      	beq.n	8004df6 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	6813      	ldr	r3, [r2, #0]
 8004dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004de2:	2304      	movs	r3, #4
 8004de4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004de8:	2300      	movs	r3, #0
 8004dea:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004df0:	b10b      	cbz	r3, 8004df6 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8004df2:	4620      	mov	r0, r4
 8004df4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004df6:	f015 0f04 	tst.w	r5, #4
 8004dfa:	d002      	beq.n	8004e02 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004dfc:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8004e00:	d120      	bne.n	8004e44 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004e02:	f015 0f02 	tst.w	r5, #2
 8004e06:	d016      	beq.n	8004e36 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004e08:	f416 7f00 	tst.w	r6, #512	; 0x200
 8004e0c:	d013      	beq.n	8004e36 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004e0e:	6822      	ldr	r2, [r4, #0]
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e16:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e20:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8004e2e:	6a23      	ldr	r3, [r4, #32]
 8004e30:	b10b      	cbz	r3, 8004e36 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8004e32:	4620      	mov	r0, r4
 8004e34:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e36:	f015 0f10 	tst.w	r5, #16
 8004e3a:	d002      	beq.n	8004e42 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e3c:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8004e40:	d10c      	bne.n	8004e5c <HAL_DMA2D_IRQHandler+0x114>
}
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	2204      	movs	r2, #4
 8004e52:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7ff ff75 	bl	8004d44 <HAL_DMA2D_LineEventCallback>
 8004e5a:	e7d2      	b.n	8004e02 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e5c:	6822      	ldr	r2, [r4, #0]
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e64:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	2210      	movs	r2, #16
 8004e6a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e6e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004e76:	2300      	movs	r3, #0
 8004e78:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7ff ff62 	bl	8004d46 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004e82:	e7de      	b.n	8004e42 <HAL_DMA2D_IRQHandler+0xfa>

08004e84 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e84:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d074      	beq.n	8004f76 <HAL_DMA2D_ConfigLayer+0xf2>
{
 8004e8c:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e94:	2302      	movs	r3, #2
 8004e96:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004e9a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004e9e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ea2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004ea4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ea6:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004eaa:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8004eac:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004eb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004eb2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004eb6:	f1a4 0209 	sub.w	r2, r4, #9
 8004eba:	2a01      	cmp	r2, #1
 8004ebc:	d921      	bls.n	8004f02 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004ebe:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004ec2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ec8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004ecc:	bb61      	cbnz	r1, 8004f28 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004ece:	6804      	ldr	r4, [r0, #0]
 8004ed0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004ed2:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <HAL_DMA2D_ConfigLayer+0xf8>)
 8004ed4:	402a      	ands	r2, r5
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004eda:	6802      	ldr	r2, [r0, #0]
 8004edc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004ee0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004ee4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004ee6:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	3b09      	subs	r3, #9
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d911      	bls.n	8004f14 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 8004efc:	4618      	mov	r0, r3
}
 8004efe:	bc30      	pop	{r4, r5}
 8004f00:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f02:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004f06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f0c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f10:	4313      	orrs	r3, r2
 8004f12:	e7db      	b.n	8004ecc <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004f14:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f1c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004f1e:	6802      	ldr	r2, [r0, #0]
 8004f20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f24:	6293      	str	r3, [r2, #40]	; 0x28
 8004f26:	e7e3      	b.n	8004ef0 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004f28:	2c0b      	cmp	r4, #11
 8004f2a:	d01b      	beq.n	8004f64 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004f2c:	4d14      	ldr	r5, [pc, #80]	; (8004f80 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f2e:	6804      	ldr	r4, [r0, #0]
 8004f30:	69e2      	ldr	r2, [r4, #28]
 8004f32:	ea22 0205 	bic.w	r2, r2, r5
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f3a:	6802      	ldr	r2, [r0, #0]
 8004f3c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004f40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f44:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004f46:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	3b09      	subs	r3, #9
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d8cf      	bhi.n	8004ef0 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004f50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f58:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004f5a:	6802      	ldr	r2, [r0, #0]
 8004f5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	e7c5      	b.n	8004ef0 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004f64:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004f68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f6e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004f72:	4d04      	ldr	r5, [pc, #16]	; (8004f84 <HAL_DMA2D_ConfigLayer+0x100>)
 8004f74:	e7db      	b.n	8004f2e <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 8004f76:	2002      	movs	r0, #2
}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	00ccfff0 	.word	0x00ccfff0
 8004f80:	ff33000f 	.word	0xff33000f
 8004f84:	ff3f000f 	.word	0xff3f000f

08004f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004f8c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f8e:	e06b      	b.n	8005068 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f90:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f92:	005e      	lsls	r6, r3, #1
 8004f94:	2403      	movs	r4, #3
 8004f96:	40b4      	lsls	r4, r6
 8004f98:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f9c:	68cc      	ldr	r4, [r1, #12]
 8004f9e:	40b4      	lsls	r4, r6
 8004fa0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004fa2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004faa:	684c      	ldr	r4, [r1, #4]
 8004fac:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004fb0:	409c      	lsls	r4, r3
 8004fb2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004fb6:	6044      	str	r4, [r0, #4]
 8004fb8:	e068      	b.n	800508c <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fba:	08dd      	lsrs	r5, r3, #3
 8004fbc:	3508      	adds	r5, #8
 8004fbe:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fc2:	f003 0407 	and.w	r4, r3, #7
 8004fc6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004fca:	240f      	movs	r4, #15
 8004fcc:	fa04 f40c 	lsl.w	r4, r4, ip
 8004fd0:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fd4:	690c      	ldr	r4, [r1, #16]
 8004fd6:	fa04 f40c 	lsl.w	r4, r4, ip
 8004fda:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004fde:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004fe2:	e06b      	b.n	80050bc <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fe4:	2409      	movs	r4, #9
 8004fe6:	e000      	b.n	8004fea <HAL_GPIO_Init+0x62>
 8004fe8:	2400      	movs	r4, #0
 8004fea:	fa04 f40e 	lsl.w	r4, r4, lr
 8004fee:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ff0:	f10c 0c02 	add.w	ip, ip, #2
 8004ff4:	4d69      	ldr	r5, [pc, #420]	; (800519c <HAL_GPIO_Init+0x214>)
 8004ff6:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ffa:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8004ffe:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005000:	43d4      	mvns	r4, r2
 8005002:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005006:	684f      	ldr	r7, [r1, #4]
 8005008:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800500c:	d001      	beq.n	8005012 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800500e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005012:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005016:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8005018:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800501a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800501e:	684f      	ldr	r7, [r1, #4]
 8005020:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8005024:	d001      	beq.n	800502a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8005026:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800502a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800502e:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005030:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8005034:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005038:	684f      	ldr	r7, [r1, #4]
 800503a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800503e:	d001      	beq.n	8005044 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8005040:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005044:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005048:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800504c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8005050:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005052:	684e      	ldr	r6, [r1, #4]
 8005054:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8005058:	d001      	beq.n	800505e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800505a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800505e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005062:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8005066:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005068:	680a      	ldr	r2, [r1, #0]
 800506a:	fa32 f403 	lsrs.w	r4, r2, r3
 800506e:	f000 8092 	beq.w	8005196 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005072:	f04f 0c01 	mov.w	ip, #1
 8005076:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800507a:	ea1c 0202 	ands.w	r2, ip, r2
 800507e:	d0f2      	beq.n	8005066 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005080:	684c      	ldr	r4, [r1, #4]
 8005082:	f004 0403 	and.w	r4, r4, #3
 8005086:	3c01      	subs	r4, #1
 8005088:	2c01      	cmp	r4, #1
 800508a:	d981      	bls.n	8004f90 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800508c:	684c      	ldr	r4, [r1, #4]
 800508e:	f004 0403 	and.w	r4, r4, #3
 8005092:	2c03      	cmp	r4, #3
 8005094:	d00c      	beq.n	80050b0 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8005096:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005098:	005d      	lsls	r5, r3, #1
 800509a:	f04f 0c03 	mov.w	ip, #3
 800509e:	fa0c fc05 	lsl.w	ip, ip, r5
 80050a2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050a6:	688c      	ldr	r4, [r1, #8]
 80050a8:	40ac      	lsls	r4, r5
 80050aa:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80050ae:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b0:	684c      	ldr	r4, [r1, #4]
 80050b2:	f004 0403 	and.w	r4, r4, #3
 80050b6:	2c02      	cmp	r4, #2
 80050b8:	f43f af7f 	beq.w	8004fba <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80050bc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050be:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80050c2:	f04f 0c03 	mov.w	ip, #3
 80050c6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80050ca:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ce:	684c      	ldr	r4, [r1, #4]
 80050d0:	f004 0403 	and.w	r4, r4, #3
 80050d4:	fa04 f40e 	lsl.w	r4, r4, lr
 80050d8:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80050dc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050de:	684c      	ldr	r4, [r1, #4]
 80050e0:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80050e4:	d0bf      	beq.n	8005066 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e6:	4c2e      	ldr	r4, [pc, #184]	; (80051a0 <HAL_GPIO_Init+0x218>)
 80050e8:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 80050ec:	f045 0502 	orr.w	r5, r5, #2
 80050f0:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 80050f4:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 80050f8:	f004 0402 	and.w	r4, r4, #2
 80050fc:	9401      	str	r4, [sp, #4]
 80050fe:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005100:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005104:	f10c 0502 	add.w	r5, ip, #2
 8005108:	4c24      	ldr	r4, [pc, #144]	; (800519c <HAL_GPIO_Init+0x214>)
 800510a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800510e:	f003 0403 	and.w	r4, r3, #3
 8005112:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005116:	240f      	movs	r4, #15
 8005118:	fa04 f40e 	lsl.w	r4, r4, lr
 800511c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005120:	4c20      	ldr	r4, [pc, #128]	; (80051a4 <HAL_GPIO_Init+0x21c>)
 8005122:	42a0      	cmp	r0, r4
 8005124:	f43f af60 	beq.w	8004fe8 <HAL_GPIO_Init+0x60>
 8005128:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800512c:	42a0      	cmp	r0, r4
 800512e:	d022      	beq.n	8005176 <HAL_GPIO_Init+0x1ee>
 8005130:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005134:	42a0      	cmp	r0, r4
 8005136:	d020      	beq.n	800517a <HAL_GPIO_Init+0x1f2>
 8005138:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800513c:	42a0      	cmp	r0, r4
 800513e:	d01e      	beq.n	800517e <HAL_GPIO_Init+0x1f6>
 8005140:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005144:	42a0      	cmp	r0, r4
 8005146:	d01c      	beq.n	8005182 <HAL_GPIO_Init+0x1fa>
 8005148:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800514c:	42a0      	cmp	r0, r4
 800514e:	d01a      	beq.n	8005186 <HAL_GPIO_Init+0x1fe>
 8005150:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005154:	42a0      	cmp	r0, r4
 8005156:	d018      	beq.n	800518a <HAL_GPIO_Init+0x202>
 8005158:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800515c:	42a0      	cmp	r0, r4
 800515e:	d016      	beq.n	800518e <HAL_GPIO_Init+0x206>
 8005160:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005164:	42a0      	cmp	r0, r4
 8005166:	d014      	beq.n	8005192 <HAL_GPIO_Init+0x20a>
 8005168:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800516c:	42a0      	cmp	r0, r4
 800516e:	f43f af39 	beq.w	8004fe4 <HAL_GPIO_Init+0x5c>
 8005172:	240a      	movs	r4, #10
 8005174:	e739      	b.n	8004fea <HAL_GPIO_Init+0x62>
 8005176:	2401      	movs	r4, #1
 8005178:	e737      	b.n	8004fea <HAL_GPIO_Init+0x62>
 800517a:	2402      	movs	r4, #2
 800517c:	e735      	b.n	8004fea <HAL_GPIO_Init+0x62>
 800517e:	2403      	movs	r4, #3
 8005180:	e733      	b.n	8004fea <HAL_GPIO_Init+0x62>
 8005182:	2404      	movs	r4, #4
 8005184:	e731      	b.n	8004fea <HAL_GPIO_Init+0x62>
 8005186:	2405      	movs	r4, #5
 8005188:	e72f      	b.n	8004fea <HAL_GPIO_Init+0x62>
 800518a:	2406      	movs	r4, #6
 800518c:	e72d      	b.n	8004fea <HAL_GPIO_Init+0x62>
 800518e:	2407      	movs	r4, #7
 8005190:	e72b      	b.n	8004fea <HAL_GPIO_Init+0x62>
 8005192:	2408      	movs	r4, #8
 8005194:	e729      	b.n	8004fea <HAL_GPIO_Init+0x62>
  }
}
 8005196:	b003      	add	sp, #12
 8005198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800519a:	bf00      	nop
 800519c:	58000400 	.word	0x58000400
 80051a0:	58024400 	.word	0x58024400
 80051a4:	58020000 	.word	0x58020000

080051a8 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 80051a8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80051aa:	fa31 f203 	lsrs.w	r2, r1, r3
 80051ae:	f000 809d 	beq.w	80052ec <HAL_GPIO_DeInit+0x144>
{
 80051b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b4:	e02e      	b.n	8005214 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051b6:	2509      	movs	r5, #9
 80051b8:	e000      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 80051ba:	2500      	movs	r5, #0
 80051bc:	fa05 fc0c 	lsl.w	ip, r5, ip
 80051c0:	45a4      	cmp	ip, r4
 80051c2:	d072      	beq.n	80052aa <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80051c4:	6804      	ldr	r4, [r0, #0]
 80051c6:	005d      	lsls	r5, r3, #1
 80051c8:	f04f 0c03 	mov.w	ip, #3
 80051cc:	fa0c fc05 	lsl.w	ip, ip, r5
 80051d0:	ea44 040c 	orr.w	r4, r4, ip
 80051d4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80051d6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80051da:	f10e 0e08 	add.w	lr, lr, #8
 80051de:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80051e2:	f003 0507 	and.w	r5, r3, #7
 80051e6:	00ae      	lsls	r6, r5, #2
 80051e8:	250f      	movs	r5, #15
 80051ea:	40b5      	lsls	r5, r6
 80051ec:	ea24 0405 	bic.w	r4, r4, r5
 80051f0:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051f4:	68c4      	ldr	r4, [r0, #12]
 80051f6:	ea24 040c 	bic.w	r4, r4, ip
 80051fa:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80051fc:	6844      	ldr	r4, [r0, #4]
 80051fe:	ea24 0202 	bic.w	r2, r4, r2
 8005202:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005204:	6882      	ldr	r2, [r0, #8]
 8005206:	ea22 020c 	bic.w	r2, r2, ip
 800520a:	6082      	str	r2, [r0, #8]
    }

    position++;
 800520c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800520e:	fa31 f203 	lsrs.w	r2, r1, r3
 8005212:	d06a      	beq.n	80052ea <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005214:	2201      	movs	r2, #1
 8005216:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8005218:	ea12 0e01 	ands.w	lr, r2, r1
 800521c:	d0f6      	beq.n	800520c <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800521e:	089e      	lsrs	r6, r3, #2
 8005220:	1cb5      	adds	r5, r6, #2
 8005222:	4c33      	ldr	r4, [pc, #204]	; (80052f0 <HAL_GPIO_DeInit+0x148>)
 8005224:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005228:	f003 0c03 	and.w	ip, r3, #3
 800522c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005230:	250f      	movs	r5, #15
 8005232:	fa05 f70c 	lsl.w	r7, r5, ip
 8005236:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005238:	4d2e      	ldr	r5, [pc, #184]	; (80052f4 <HAL_GPIO_DeInit+0x14c>)
 800523a:	42a8      	cmp	r0, r5
 800523c:	d0bd      	beq.n	80051ba <HAL_GPIO_DeInit+0x12>
 800523e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005242:	42a8      	cmp	r0, r5
 8005244:	d021      	beq.n	800528a <HAL_GPIO_DeInit+0xe2>
 8005246:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800524a:	42a8      	cmp	r0, r5
 800524c:	d01f      	beq.n	800528e <HAL_GPIO_DeInit+0xe6>
 800524e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005252:	42a8      	cmp	r0, r5
 8005254:	d01d      	beq.n	8005292 <HAL_GPIO_DeInit+0xea>
 8005256:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800525a:	42a8      	cmp	r0, r5
 800525c:	d01b      	beq.n	8005296 <HAL_GPIO_DeInit+0xee>
 800525e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005262:	42a8      	cmp	r0, r5
 8005264:	d019      	beq.n	800529a <HAL_GPIO_DeInit+0xf2>
 8005266:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800526a:	42a8      	cmp	r0, r5
 800526c:	d017      	beq.n	800529e <HAL_GPIO_DeInit+0xf6>
 800526e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005272:	42a8      	cmp	r0, r5
 8005274:	d015      	beq.n	80052a2 <HAL_GPIO_DeInit+0xfa>
 8005276:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800527a:	42a8      	cmp	r0, r5
 800527c:	d013      	beq.n	80052a6 <HAL_GPIO_DeInit+0xfe>
 800527e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005282:	42a8      	cmp	r0, r5
 8005284:	d097      	beq.n	80051b6 <HAL_GPIO_DeInit+0xe>
 8005286:	250a      	movs	r5, #10
 8005288:	e798      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 800528a:	2501      	movs	r5, #1
 800528c:	e796      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 800528e:	2502      	movs	r5, #2
 8005290:	e794      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 8005292:	2503      	movs	r5, #3
 8005294:	e792      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 8005296:	2504      	movs	r5, #4
 8005298:	e790      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 800529a:	2505      	movs	r5, #5
 800529c:	e78e      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 800529e:	2506      	movs	r5, #6
 80052a0:	e78c      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 80052a2:	2507      	movs	r5, #7
 80052a4:	e78a      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 80052a6:	2508      	movs	r5, #8
 80052a8:	e788      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80052aa:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80052ae:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80052b2:	ea25 050e 	bic.w	r5, r5, lr
 80052b6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80052ba:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80052be:	ea25 050e 	bic.w	r5, r5, lr
 80052c2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80052c6:	6865      	ldr	r5, [r4, #4]
 80052c8:	ea25 050e 	bic.w	r5, r5, lr
 80052cc:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80052ce:	6825      	ldr	r5, [r4, #0]
 80052d0:	ea25 050e 	bic.w	r5, r5, lr
 80052d4:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80052d6:	f8df c018 	ldr.w	ip, [pc, #24]	; 80052f0 <HAL_GPIO_DeInit+0x148>
 80052da:	1cb4      	adds	r4, r6, #2
 80052dc:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80052e0:	ea25 0507 	bic.w	r5, r5, r7
 80052e4:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 80052e8:	e76c      	b.n	80051c4 <HAL_GPIO_DeInit+0x1c>
  }
}
 80052ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	58000400 	.word	0x58000400
 80052f4:	58020000 	.word	0x58020000

080052f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052f8:	b10a      	cbz	r2, 80052fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052fa:	6181      	str	r1, [r0, #24]
 80052fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052fe:	0409      	lsls	r1, r1, #16
 8005300:	6181      	str	r1, [r0, #24]
  }
}
 8005302:	4770      	bx	lr

08005304 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005304:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005306:	ea01 0203 	and.w	r2, r1, r3
 800530a:	ea21 0103 	bic.w	r1, r1, r3
 800530e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005312:	6181      	str	r1, [r0, #24]
}
 8005314:	4770      	bx	lr

08005316 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005316:	4770      	bx	lr

08005318 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005318:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	4203      	tst	r3, r0
 8005324:	d100      	bne.n	8005328 <HAL_GPIO_EXTI_IRQHandler+0x10>
}
 8005326:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005330:	f7ff fff1 	bl	8005316 <HAL_GPIO_EXTI_Callback>
}
 8005334:	e7f7      	b.n	8005326 <HAL_GPIO_EXTI_IRQHandler+0xe>

08005336 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005336:	6803      	ldr	r3, [r0, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	f012 0f02 	tst.w	r2, #2
 800533e:	d001      	beq.n	8005344 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005340:	2200      	movs	r2, #0
 8005342:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005344:	6803      	ldr	r3, [r0, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	f012 0f01 	tst.w	r2, #1
 800534c:	d103      	bne.n	8005356 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	619a      	str	r2, [r3, #24]
  }
}
 8005356:	4770      	bx	lr

08005358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005358:	b410      	push	{r4}
 800535a:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800535c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005360:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005364:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005366:	4321      	orrs	r1, r4
 8005368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800536c:	6802      	ldr	r2, [r0, #0]
 800536e:	6853      	ldr	r3, [r2, #4]
 8005370:	0d64      	lsrs	r4, r4, #21
 8005372:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005376:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800537a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800537e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005382:	f044 0403 	orr.w	r4, r4, #3
 8005386:	ea23 0404 	bic.w	r4, r3, r4
 800538a:	4321      	orrs	r1, r4
 800538c:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800538e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005392:	4770      	bx	lr

08005394 <I2C_IsErrorOccurred>:
{
 8005394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005398:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800539a:	6803      	ldr	r3, [r0, #0]
 800539c:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800539e:	f017 0710 	ands.w	r7, r7, #16
 80053a2:	d04e      	beq.n	8005442 <I2C_IsErrorOccurred+0xae>
 80053a4:	460e      	mov	r6, r1
 80053a6:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a8:	2210      	movs	r2, #16
 80053aa:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80053ac:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	6998      	ldr	r0, [r3, #24]
 80053b2:	f010 0f20 	tst.w	r0, #32
 80053b6:	d13d      	bne.n	8005434 <I2C_IsErrorOccurred+0xa0>
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	d13b      	bne.n	8005434 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80053bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80053c0:	d0f5      	beq.n	80053ae <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7ff fb35 	bl	8004a30 <HAL_GetTick>
 80053c6:	eba0 0008 	sub.w	r0, r0, r8
 80053ca:	42b0      	cmp	r0, r6
 80053cc:	d801      	bhi.n	80053d2 <I2C_IsErrorOccurred+0x3e>
 80053ce:	2e00      	cmp	r6, #0
 80053d0:	d1ed      	bne.n	80053ae <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053d2:	6821      	ldr	r1, [r4, #0]
 80053d4:	684a      	ldr	r2, [r1, #4]
 80053d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80053da:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80053de:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053e0:	6988      	ldr	r0, [r1, #24]
 80053e2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80053e6:	d004      	beq.n	80053f2 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80053e8:	3b20      	subs	r3, #32
 80053ea:	bf18      	it	ne
 80053ec:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80053ee:	b902      	cbnz	r2, 80053f2 <I2C_IsErrorOccurred+0x5e>
 80053f0:	b9c3      	cbnz	r3, 8005424 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f013 0f20 	tst.w	r3, #32
 80053fa:	d1d8      	bne.n	80053ae <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053fc:	f7ff fb18 	bl	8004a30 <HAL_GetTick>
 8005400:	eba0 0008 	sub.w	r0, r0, r8
 8005404:	2819      	cmp	r0, #25
 8005406:	d9f4      	bls.n	80053f2 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005408:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800540a:	f043 0320 	orr.w	r3, r3, #32
 800540e:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005410:	2320      	movs	r3, #32
 8005412:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005416:	2300      	movs	r3, #0
 8005418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 800541c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8005420:	2501      	movs	r5, #1
 8005422:	e7e6      	b.n	80053f2 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005424:	684b      	ldr	r3, [r1, #4]
 8005426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800542a:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800542c:	f7ff fb00 	bl	8004a30 <HAL_GetTick>
 8005430:	4680      	mov	r8, r0
 8005432:	e7de      	b.n	80053f2 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8005434:	2d00      	cmp	r5, #0
 8005436:	d140      	bne.n	80054ba <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005438:	2220      	movs	r2, #32
 800543a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800543c:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800543e:	2501      	movs	r5, #1
 8005440:	e000      	b.n	8005444 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005448:	f413 7f80 	tst.w	r3, #256	; 0x100
 800544c:	d005      	beq.n	800545a <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800544e:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005456:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005458:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800545a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800545e:	d006      	beq.n	800546e <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8005460:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005464:	6822      	ldr	r2, [r4, #0]
 8005466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800546a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800546c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800546e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005472:	d024      	beq.n	80054be <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005474:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547e:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8005480:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8005482:	4620      	mov	r0, r4
 8005484:	f7ff ff57 	bl	8005336 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	6853      	ldr	r3, [r2, #4]
 800548c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005490:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005494:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800549e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054a0:	431f      	orrs	r7, r3
 80054a2:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	2320      	movs	r3, #32
 80054a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80054b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054b4:	4628      	mov	r0, r5
 80054b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 80054ba:	2704      	movs	r7, #4
 80054bc:	e7c2      	b.n	8005444 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 80054be:	2d00      	cmp	r5, #0
 80054c0:	d0f8      	beq.n	80054b4 <I2C_IsErrorOccurred+0x120>
 80054c2:	e7de      	b.n	8005482 <I2C_IsErrorOccurred+0xee>

080054c4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	4604      	mov	r4, r0
 80054c8:	460d      	mov	r5, r1
 80054ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f013 0f02 	tst.w	r3, #2
 80054d4:	d11d      	bne.n	8005512 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d6:	4632      	mov	r2, r6
 80054d8:	4629      	mov	r1, r5
 80054da:	4620      	mov	r0, r4
 80054dc:	f7ff ff5a 	bl	8005394 <I2C_IsErrorOccurred>
 80054e0:	b9c8      	cbnz	r0, 8005516 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80054e6:	d0f1      	beq.n	80054cc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e8:	f7ff faa2 	bl	8004a30 <HAL_GetTick>
 80054ec:	1b80      	subs	r0, r0, r6
 80054ee:	42a8      	cmp	r0, r5
 80054f0:	d801      	bhi.n	80054f6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80054f2:	2d00      	cmp	r5, #0
 80054f4:	d1ea      	bne.n	80054cc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054f8:	f043 0320 	orr.w	r3, r3, #32
 80054fc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	2320      	movs	r3, #32
 8005500:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005504:	2300      	movs	r3, #0
 8005506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800550a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800550e:	2001      	movs	r0, #1
 8005510:	e000      	b.n	8005514 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005512:	2000      	movs	r0, #0
}
 8005514:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005516:	2001      	movs	r0, #1
 8005518:	e7fc      	b.n	8005514 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800551a <I2C_WaitOnFlagUntilTimeout>:
{
 800551a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551e:	4606      	mov	r6, r0
 8005520:	4688      	mov	r8, r1
 8005522:	4617      	mov	r7, r2
 8005524:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005526:	6834      	ldr	r4, [r6, #0]
 8005528:	69a4      	ldr	r4, [r4, #24]
 800552a:	ea38 0304 	bics.w	r3, r8, r4
 800552e:	bf0c      	ite	eq
 8005530:	f04f 0c01 	moveq.w	ip, #1
 8005534:	f04f 0c00 	movne.w	ip, #0
 8005538:	45bc      	cmp	ip, r7
 800553a:	d118      	bne.n	800556e <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800553c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005540:	d0f1      	beq.n	8005526 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7ff fa75 	bl	8004a30 <HAL_GetTick>
 8005546:	9b06      	ldr	r3, [sp, #24]
 8005548:	1ac0      	subs	r0, r0, r3
 800554a:	42a8      	cmp	r0, r5
 800554c:	d801      	bhi.n	8005552 <I2C_WaitOnFlagUntilTimeout+0x38>
 800554e:	2d00      	cmp	r5, #0
 8005550:	d1e9      	bne.n	8005526 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005554:	f043 0320 	orr.w	r3, r3, #32
 8005558:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800555a:	2320      	movs	r3, #32
 800555c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005560:	2300      	movs	r3, #0
 8005562:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005566:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800556a:	2001      	movs	r0, #1
 800556c:	e000      	b.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800556e:	2000      	movs	r0, #0
}
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005574 <I2C_RequestMemoryWrite>:
{
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	4604      	mov	r4, r0
 800557c:	4690      	mov	r8, r2
 800557e:	461d      	mov	r5, r3
 8005580:	9e08      	ldr	r6, [sp, #32]
 8005582:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <I2C_RequestMemoryWrite+0x78>)
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800558c:	b2ea      	uxtb	r2, r5
 800558e:	f7ff fee3 	bl	8005358 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005592:	463a      	mov	r2, r7
 8005594:	4631      	mov	r1, r6
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff ff94 	bl	80054c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800559c:	b9f8      	cbnz	r0, 80055de <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800559e:	2d01      	cmp	r5, #1
 80055a0:	d10e      	bne.n	80055c0 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	fa5f f288 	uxtb.w	r2, r8
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055aa:	9700      	str	r7, [sp, #0]
 80055ac:	4633      	mov	r3, r6
 80055ae:	2200      	movs	r2, #0
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ffb1 	bl	800551a <I2C_WaitOnFlagUntilTimeout>
 80055b8:	b9a8      	cbnz	r0, 80055e6 <I2C_RequestMemoryWrite+0x72>
}
 80055ba:	b002      	add	sp, #8
 80055bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c8:	463a      	mov	r2, r7
 80055ca:	4631      	mov	r1, r6
 80055cc:	4620      	mov	r0, r4
 80055ce:	f7ff ff79 	bl	80054c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80055d2:	b930      	cbnz	r0, 80055e2 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	fa5f f288 	uxtb.w	r2, r8
 80055da:	629a      	str	r2, [r3, #40]	; 0x28
 80055dc:	e7e5      	b.n	80055aa <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80055de:	2001      	movs	r0, #1
 80055e0:	e7eb      	b.n	80055ba <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80055e2:	2001      	movs	r0, #1
 80055e4:	e7e9      	b.n	80055ba <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80055e6:	2001      	movs	r0, #1
 80055e8:	e7e7      	b.n	80055ba <I2C_RequestMemoryWrite+0x46>
 80055ea:	bf00      	nop
 80055ec:	80002000 	.word	0x80002000

080055f0 <I2C_RequestMemoryRead>:
{
 80055f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	4604      	mov	r4, r0
 80055f8:	4690      	mov	r8, r2
 80055fa:	461d      	mov	r5, r3
 80055fc:	9e08      	ldr	r6, [sp, #32]
 80055fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <I2C_RequestMemoryRead+0x74>)
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	b2ea      	uxtb	r2, r5
 8005608:	f7ff fea6 	bl	8005358 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560c:	463a      	mov	r2, r7
 800560e:	4631      	mov	r1, r6
 8005610:	4620      	mov	r0, r4
 8005612:	f7ff ff57 	bl	80054c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005616:	b9f8      	cbnz	r0, 8005658 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005618:	2d01      	cmp	r5, #1
 800561a:	d10e      	bne.n	800563a <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	fa5f f288 	uxtb.w	r2, r8
 8005622:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005624:	9700      	str	r7, [sp, #0]
 8005626:	4633      	mov	r3, r6
 8005628:	2200      	movs	r2, #0
 800562a:	2140      	movs	r1, #64	; 0x40
 800562c:	4620      	mov	r0, r4
 800562e:	f7ff ff74 	bl	800551a <I2C_WaitOnFlagUntilTimeout>
 8005632:	b9a8      	cbnz	r0, 8005660 <I2C_RequestMemoryRead+0x70>
}
 8005634:	b002      	add	sp, #8
 8005636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005640:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005642:	463a      	mov	r2, r7
 8005644:	4631      	mov	r1, r6
 8005646:	4620      	mov	r0, r4
 8005648:	f7ff ff3c 	bl	80054c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800564c:	b930      	cbnz	r0, 800565c <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	fa5f f288 	uxtb.w	r2, r8
 8005654:	629a      	str	r2, [r3, #40]	; 0x28
 8005656:	e7e5      	b.n	8005624 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8005658:	2001      	movs	r0, #1
 800565a:	e7eb      	b.n	8005634 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800565c:	2001      	movs	r0, #1
 800565e:	e7e9      	b.n	8005634 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8005660:	2001      	movs	r0, #1
 8005662:	e7e7      	b.n	8005634 <I2C_RequestMemoryRead+0x44>
 8005664:	80002000 	.word	0x80002000

08005668 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4605      	mov	r5, r0
 800566c:	460c      	mov	r4, r1
 800566e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f013 0f20 	tst.w	r3, #32
 8005678:	d11a      	bne.n	80056b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800567a:	4632      	mov	r2, r6
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f7ff fe88 	bl	8005394 <I2C_IsErrorOccurred>
 8005684:	b9b0      	cbnz	r0, 80056b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7ff f9d3 	bl	8004a30 <HAL_GetTick>
 800568a:	1b80      	subs	r0, r0, r6
 800568c:	42a0      	cmp	r0, r4
 800568e:	d801      	bhi.n	8005694 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005690:	2c00      	cmp	r4, #0
 8005692:	d1ed      	bne.n	8005670 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005694:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005696:	f043 0320 	orr.w	r3, r3, #32
 800569a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800569c:	2320      	movs	r3, #32
 800569e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80056a8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80056ac:	2001      	movs	r0, #1
}
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80056b0:	2000      	movs	r0, #0
 80056b2:	e7fc      	b.n	80056ae <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80056b4:	2001      	movs	r0, #1
 80056b6:	e7fa      	b.n	80056ae <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080056b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d057      	beq.n	800576c <HAL_I2C_Init+0xb4>
{
 80056bc:	b510      	push	{r4, lr}
 80056be:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d041      	beq.n	800574c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80056c8:	2324      	movs	r3, #36	; 0x24
 80056ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	6813      	ldr	r3, [r2, #0]
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80056e0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	6893      	ldr	r3, [r2, #8]
 80056e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056ea:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056ec:	68e3      	ldr	r3, [r4, #12]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d031      	beq.n	8005756 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80056fa:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056fc:	68e3      	ldr	r3, [r4, #12]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d02f      	beq.n	8005762 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	6851      	ldr	r1, [r2, #4]
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <HAL_I2C_Init+0xb8>)
 8005708:	430b      	orrs	r3, r1
 800570a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	68d3      	ldr	r3, [r2, #12]
 8005710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005714:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	6962      	ldr	r2, [r4, #20]
 800571a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800571c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800571e:	6822      	ldr	r2, [r4, #0]
 8005720:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005724:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005726:	69e3      	ldr	r3, [r4, #28]
 8005728:	6a21      	ldr	r1, [r4, #32]
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	430b      	orrs	r3, r1
 800572e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573a:	2000      	movs	r0, #0
 800573c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800573e:	2320      	movs	r3, #32
 8005740:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005744:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800574a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800574c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005750:	f7fc fb78 	bl	8001e44 <HAL_I2C_MspInit>
 8005754:	e7b8      	b.n	80056c8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005756:	68a3      	ldr	r3, [r4, #8]
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	6093      	str	r3, [r2, #8]
 8005760:	e7cc      	b.n	80056fc <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	e7ca      	b.n	8005702 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800576c:	2001      	movs	r0, #1
}
 800576e:	4770      	bx	lr
 8005770:	02008000 	.word	0x02008000

08005774 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8005774:	b1a8      	cbz	r0, 80057a2 <HAL_I2C_DeInit+0x2e>
{
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800577a:	2324      	movs	r3, #36	; 0x24
 800577c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005780:	6802      	ldr	r2, [r0, #0]
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800578a:	f7fc fba7 	bl	8001edc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578e:	2000      	movs	r0, #0
 8005790:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005792:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005796:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800579c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80057a0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80057a2:	2001      	movs	r0, #1
}
 80057a4:	4770      	bx	lr

080057a6 <HAL_I2C_Mem_Write>:
{
 80057a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	b083      	sub	sp, #12
 80057ac:	460d      	mov	r5, r1
 80057ae:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80057b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b4:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80057b8:	b2c9      	uxtb	r1, r1
 80057ba:	2920      	cmp	r1, #32
 80057bc:	f040 80bc 	bne.w	8005938 <HAL_I2C_Mem_Write+0x192>
 80057c0:	4604      	mov	r4, r0
 80057c2:	4690      	mov	r8, r2
 80057c4:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80057c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057c8:	f1ba 0f00 	cmp.w	sl, #0
 80057cc:	bf18      	it	ne
 80057ce:	2b00      	cmpne	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80057d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	f000 80b2 	beq.w	8005940 <HAL_I2C_Mem_Write+0x19a>
 80057dc:	f04f 0b01 	mov.w	fp, #1
 80057e0:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80057e4:	f7ff f924 	bl	8004a30 <HAL_GetTick>
 80057e8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057ea:	9000      	str	r0, [sp, #0]
 80057ec:	2319      	movs	r3, #25
 80057ee:	465a      	mov	r2, fp
 80057f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057f4:	4620      	mov	r0, r4
 80057f6:	f7ff fe90 	bl	800551a <I2C_WaitOnFlagUntilTimeout>
 80057fa:	b130      	cbz	r0, 800580a <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80057fc:	2001      	movs	r0, #1
 80057fe:	e09c      	b.n	800593a <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005804:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005806:	2001      	movs	r0, #1
 8005808:	e097      	b.n	800593a <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800580a:	2321      	movs	r3, #33	; 0x21
 800580c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005816:	2300      	movs	r3, #0
 8005818:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800581a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800581c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800581e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005822:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005824:	9601      	str	r6, [sp, #4]
 8005826:	9700      	str	r7, [sp, #0]
 8005828:	464b      	mov	r3, r9
 800582a:	4642      	mov	r2, r8
 800582c:	4629      	mov	r1, r5
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff fea0 	bl	8005574 <I2C_RequestMemoryWrite>
 8005834:	b970      	cbnz	r0, 8005854 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005836:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	2bff      	cmp	r3, #255	; 0xff
 800583c:	d90f      	bls.n	800585e <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800583e:	22ff      	movs	r2, #255	; 0xff
 8005840:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005842:	2300      	movs	r3, #0
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800584a:	4629      	mov	r1, r5
 800584c:	4620      	mov	r0, r4
 800584e:	f7ff fd83 	bl	8005358 <I2C_TransferConfig>
 8005852:	e021      	b.n	8005898 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8005854:	2300      	movs	r3, #0
 8005856:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800585a:	4658      	mov	r0, fp
 800585c:	e06d      	b.n	800593a <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800585e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005860:	b292      	uxth	r2, r2
 8005862:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005864:	2300      	movs	r3, #0
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	4629      	mov	r1, r5
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff fd71 	bl	8005358 <I2C_TransferConfig>
 8005876:	e00f      	b.n	8005898 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005878:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800587a:	b292      	uxth	r2, r2
 800587c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	4629      	mov	r1, r5
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff fd64 	bl	8005358 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005890:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d033      	beq.n	8005900 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005898:	4632      	mov	r2, r6
 800589a:	4639      	mov	r1, r7
 800589c:	4620      	mov	r0, r4
 800589e:	f7ff fe11 	bl	80054c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d14e      	bne.n	8005944 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058b0:	3301      	adds	r3, #1
 80058b2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058c8:	b292      	uxth	r2, r2
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	d0e0      	beq.n	8005890 <HAL_I2C_Mem_Write+0xea>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1de      	bne.n	8005890 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058d2:	9600      	str	r6, [sp, #0]
 80058d4:	463b      	mov	r3, r7
 80058d6:	2200      	movs	r2, #0
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	4620      	mov	r0, r4
 80058dc:	f7ff fe1d 	bl	800551a <I2C_WaitOnFlagUntilTimeout>
 80058e0:	bb90      	cbnz	r0, 8005948 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2bff      	cmp	r3, #255	; 0xff
 80058e8:	d9c6      	bls.n	8005878 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ea:	22ff      	movs	r2, #255	; 0xff
 80058ec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058ee:	2300      	movs	r3, #0
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058f6:	4629      	mov	r1, r5
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7ff fd2d 	bl	8005358 <I2C_TransferConfig>
 80058fe:	e7c7      	b.n	8005890 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005900:	4632      	mov	r2, r6
 8005902:	4639      	mov	r1, r7
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff feaf 	bl	8005668 <I2C_WaitOnSTOPFlagUntilTimeout>
 800590a:	b9f8      	cbnz	r0, 800594c <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	2220      	movs	r2, #32
 8005910:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005912:	6821      	ldr	r1, [r4, #0]
 8005914:	684b      	ldr	r3, [r1, #4]
 8005916:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800591a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800591e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005928:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800592c:	2300      	movs	r3, #0
 800592e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005932:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005936:	e000      	b.n	800593a <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8005938:	2002      	movs	r0, #2
}
 800593a:	b003      	add	sp, #12
 800593c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005940:	2002      	movs	r0, #2
 8005942:	e7fa      	b.n	800593a <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8005944:	2001      	movs	r0, #1
 8005946:	e7f8      	b.n	800593a <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8005948:	2001      	movs	r0, #1
 800594a:	e7f6      	b.n	800593a <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800594c:	2001      	movs	r0, #1
 800594e:	e7f4      	b.n	800593a <HAL_I2C_Mem_Write+0x194>

08005950 <HAL_I2C_Mem_Read>:
{
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	b083      	sub	sp, #12
 8005956:	460d      	mov	r5, r1
 8005958:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800595c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800595e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005962:	b2c9      	uxtb	r1, r1
 8005964:	2920      	cmp	r1, #32
 8005966:	f040 80bd 	bne.w	8005ae4 <HAL_I2C_Mem_Read+0x194>
 800596a:	4604      	mov	r4, r0
 800596c:	4690      	mov	r8, r2
 800596e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005972:	f1ba 0f00 	cmp.w	sl, #0
 8005976:	bf18      	it	ne
 8005978:	2b00      	cmpne	r3, #0
 800597a:	d016      	beq.n	80059aa <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800597c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005980:	2b01      	cmp	r3, #1
 8005982:	f000 80b3 	beq.w	8005aec <HAL_I2C_Mem_Read+0x19c>
 8005986:	f04f 0b01 	mov.w	fp, #1
 800598a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800598e:	f7ff f84f 	bl	8004a30 <HAL_GetTick>
 8005992:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005994:	9000      	str	r0, [sp, #0]
 8005996:	2319      	movs	r3, #25
 8005998:	465a      	mov	r2, fp
 800599a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff fdbb 	bl	800551a <I2C_WaitOnFlagUntilTimeout>
 80059a4:	b130      	cbz	r0, 80059b4 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80059a6:	2001      	movs	r0, #1
 80059a8:	e09d      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ae:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80059b0:	2001      	movs	r0, #1
 80059b2:	e098      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059b4:	2322      	movs	r3, #34	; 0x22
 80059b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80059c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059c6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80059c8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059cc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ce:	9601      	str	r6, [sp, #4]
 80059d0:	9700      	str	r7, [sp, #0]
 80059d2:	464b      	mov	r3, r9
 80059d4:	4642      	mov	r2, r8
 80059d6:	4629      	mov	r1, r5
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff fe09 	bl	80055f0 <I2C_RequestMemoryRead>
 80059de:	b970      	cbnz	r0, 80059fe <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2bff      	cmp	r3, #255	; 0xff
 80059e6:	d90f      	bls.n	8005a08 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059e8:	22ff      	movs	r2, #255	; 0xff
 80059ea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059ec:	4b43      	ldr	r3, [pc, #268]	; (8005afc <HAL_I2C_Mem_Read+0x1ac>)
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059f4:	4629      	mov	r1, r5
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7ff fcae 	bl	8005358 <I2C_TransferConfig>
 80059fc:	e021      	b.n	8005a42 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 80059fe:	2300      	movs	r3, #0
 8005a00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005a04:	4658      	mov	r0, fp
 8005a06:	e06e      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8005a08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a0a:	b292      	uxth	r2, r2
 8005a0c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <HAL_I2C_Mem_Read+0x1ac>)
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f7ff fc9c 	bl	8005358 <I2C_TransferConfig>
 8005a20:	e00f      	b.n	8005a42 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005a22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a24:	b292      	uxth	r2, r2
 8005a26:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	4629      	mov	r1, r5
 8005a34:	4620      	mov	r0, r4
 8005a36:	f7ff fc8f 	bl	8005358 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005a3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d034      	beq.n	8005aac <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a42:	9600      	str	r6, [sp, #0]
 8005a44:	463b      	mov	r3, r7
 8005a46:	2200      	movs	r2, #0
 8005a48:	2104      	movs	r1, #4
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fd65 	bl	800551a <I2C_WaitOnFlagUntilTimeout>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d14d      	bne.n	8005af0 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a5a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a5e:	3301      	adds	r3, #1
 8005a60:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005a62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005a64:	3a01      	subs	r2, #1
 8005a66:	b292      	uxth	r2, r2
 8005a68:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005a6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0de      	beq.n	8005a3a <HAL_I2C_Mem_Read+0xea>
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	d1dc      	bne.n	8005a3a <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a80:	9600      	str	r6, [sp, #0]
 8005a82:	463b      	mov	r3, r7
 8005a84:	2180      	movs	r1, #128	; 0x80
 8005a86:	4620      	mov	r0, r4
 8005a88:	f7ff fd47 	bl	800551a <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	bb90      	cbnz	r0, 8005af4 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2bff      	cmp	r3, #255	; 0xff
 8005a94:	d9c5      	bls.n	8005a22 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a96:	22ff      	movs	r2, #255	; 0xff
 8005a98:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f7ff fc57 	bl	8005358 <I2C_TransferConfig>
 8005aaa:	e7c6      	b.n	8005a3a <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aac:	4632      	mov	r2, r6
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7ff fdd9 	bl	8005668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ab6:	b9f8      	cbnz	r0, 8005af8 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	2220      	movs	r2, #32
 8005abc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005abe:	6821      	ldr	r1, [r4, #0]
 8005ac0:	684b      	ldr	r3, [r1, #4]
 8005ac2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005ac6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005aca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005ade:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005ae2:	e000      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8005ae4:	2002      	movs	r0, #2
}
 8005ae6:	b003      	add	sp, #12
 8005ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005aec:	2002      	movs	r0, #2
 8005aee:	e7fa      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8005af0:	2001      	movs	r0, #1
 8005af2:	e7f8      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8005af4:	2001      	movs	r0, #1
 8005af6:	e7f6      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8005af8:	2001      	movs	r0, #1
 8005afa:	e7f4      	b.n	8005ae6 <HAL_I2C_Mem_Read+0x196>
 8005afc:	80002400 	.word	0x80002400

08005b00 <HAL_I2C_GetState>:
  return hi2c->State;
 8005b00:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005b04:	4770      	bx	lr

08005b06 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005b06:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005b08:	4770      	bx	lr

08005b0a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d124      	bne.n	8005b5e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d022      	beq.n	8005b62 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b22:	2324      	movs	r3, #36	; 0x24
 8005b24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b28:	6802      	ldr	r2, [r0, #0]
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b32:	6802      	ldr	r2, [r0, #0]
 8005b34:	6813      	ldr	r3, [r2, #0]
 8005b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b3a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b3c:	6802      	ldr	r2, [r0, #0]
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	4319      	orrs	r1, r3
 8005b42:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b44:	6802      	ldr	r2, [r0, #0]
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b4e:	2320      	movs	r3, #32
 8005b50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b54:	2300      	movs	r3, #0
 8005b56:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005b5e:	2002      	movs	r0, #2
 8005b60:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005b62:	2002      	movs	r0, #2
  }
}
 8005b64:	4770      	bx	lr

08005b66 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d122      	bne.n	8005bb6 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b70:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d020      	beq.n	8005bba <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b7e:	2324      	movs	r3, #36	; 0x24
 8005b80:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b84:	6802      	ldr	r2, [r0, #0]
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b8e:	6802      	ldr	r2, [r0, #0]
 8005b90:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b96:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b9a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b9c:	6802      	ldr	r2, [r0, #0]
 8005b9e:	6813      	ldr	r3, [r2, #0]
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	2320      	movs	r3, #32
 8005ba8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bac:	2300      	movs	r3, #0
 8005bae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005bb6:	2002      	movs	r0, #2
 8005bb8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005bba:	2002      	movs	r0, #2
  }
}
 8005bbc:	4770      	bx	lr
	...

08005bc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bc2:	684d      	ldr	r5, [r1, #4]
 8005bc4:	6804      	ldr	r4, [r0, #0]
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8005bcc:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bce:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8005bd2:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005bd6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005bda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005bde:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005be2:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005be4:	6804      	ldr	r4, [r0, #0]
 8005be6:	68e6      	ldr	r6, [r4, #12]
 8005be8:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005bec:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bee:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005bf0:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bf4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005bf8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005bfc:	68cd      	ldr	r5, [r1, #12]
 8005bfe:	6804      	ldr	r4, [r0, #0]
 8005c00:	68e3      	ldr	r3, [r4, #12]
 8005c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c06:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c08:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8005c0c:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8005c10:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c14:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c18:	688b      	ldr	r3, [r1, #8]
 8005c1a:	6804      	ldr	r4, [r0, #0]
 8005c1c:	68e6      	ldr	r6, [r4, #12]
 8005c1e:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8005c22:	4473      	add	r3, lr
 8005c24:	3301      	adds	r3, #1
 8005c26:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c2a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005c2e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c32:	6803      	ldr	r3, [r0, #0]
 8005c34:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c38:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8005c3c:	f024 0407 	bic.w	r4, r4, #7
 8005c40:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c44:	6803      	ldr	r3, [r0, #0]
 8005c46:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c4a:	690c      	ldr	r4, [r1, #16]
 8005c4c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c50:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c54:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c58:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005c5a:	6804      	ldr	r4, [r0, #0]
 8005c5c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c60:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8005c64:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005c68:	2400      	movs	r4, #0
 8005c6a:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c6e:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8005c72:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005c76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005c7a:	6806      	ldr	r6, [r0, #0]
 8005c7c:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8005c80:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005c84:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8005c88:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c8c:	6803      	ldr	r3, [r0, #0]
 8005c8e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c92:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8005c96:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005c9a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005c9e:	6803      	ldr	r3, [r0, #0]
 8005ca0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005ca4:	694d      	ldr	r5, [r1, #20]
 8005ca6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005caa:	6803      	ldr	r3, [r0, #0]
 8005cac:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cb0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8005cb4:	4d2e      	ldr	r5, [pc, #184]	; (8005d70 <LTDC_SetConfig+0x1b0>)
 8005cb6:	4035      	ands	r5, r6
 8005cb8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005cbc:	6a0d      	ldr	r5, [r1, #32]
 8005cbe:	6803      	ldr	r3, [r0, #0]
 8005cc0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cc4:	69ce      	ldr	r6, [r1, #28]
 8005cc6:	4335      	orrs	r5, r6
 8005cc8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ccc:	6803      	ldr	r3, [r0, #0]
 8005cce:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cd2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8005cd6:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005cda:	6803      	ldr	r3, [r0, #0]
 8005cdc:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8005ce0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005ce2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ce6:	690b      	ldr	r3, [r1, #16]
 8005ce8:	b16b      	cbz	r3, 8005d06 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d039      	beq.n	8005d62 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	bf18      	it	ne
 8005cf2:	2b04      	cmpne	r3, #4
 8005cf4:	d037      	beq.n	8005d66 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d037      	beq.n	8005d6a <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005cfa:	2b07      	cmp	r3, #7
 8005cfc:	d001      	beq.n	8005d02 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005cfe:	2501      	movs	r5, #1
 8005d00:	e002      	b.n	8005d08 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8005d02:	2502      	movs	r5, #2
 8005d04:	e000      	b.n	8005d08 <LTDC_SetConfig+0x148>
    tmp = 4U;
 8005d06:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d08:	6802      	ldr	r2, [r0, #0]
 8005d0a:	4462      	add	r2, ip
 8005d0c:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005d10:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8005d14:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005d18:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005d1a:	fb05 f402 	mul.w	r4, r5, r2
 8005d1e:	684b      	ldr	r3, [r1, #4]
 8005d20:	680a      	ldr	r2, [r1, #0]
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	fb05 f303 	mul.w	r3, r5, r3
 8005d28:	3307      	adds	r3, #7
 8005d2a:	6802      	ldr	r2, [r0, #0]
 8005d2c:	4462      	add	r2, ip
 8005d2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d32:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d36:	6803      	ldr	r3, [r0, #0]
 8005d38:	4463      	add	r3, ip
 8005d3a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8005d3e:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <LTDC_SetConfig+0x1b4>)
 8005d40:	4022      	ands	r2, r4
 8005d42:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d46:	6803      	ldr	r3, [r0, #0]
 8005d48:	4463      	add	r3, ip
 8005d4a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005d4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d50:	6803      	ldr	r3, [r0, #0]
 8005d52:	449c      	add	ip, r3
 8005d54:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8005d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8005d62:	2503      	movs	r5, #3
 8005d64:	e7d0      	b.n	8005d08 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8005d66:	2502      	movs	r5, #2
 8005d68:	e7ce      	b.n	8005d08 <LTDC_SetConfig+0x148>
 8005d6a:	2502      	movs	r5, #2
 8005d6c:	e7cc      	b.n	8005d08 <LTDC_SetConfig+0x148>
 8005d6e:	bf00      	nop
 8005d70:	fffff8f8 	.word	0xfffff8f8
 8005d74:	fffff800 	.word	0xfffff800

08005d78 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d072      	beq.n	8005e62 <HAL_LTDC_Init+0xea>
{
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d80:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d067      	beq.n	8005e58 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	6993      	ldr	r3, [r2, #24]
 8005d92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d96:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d98:	6821      	ldr	r1, [r4, #0]
 8005d9a:	698a      	ldr	r2, [r1, #24]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	68a0      	ldr	r0, [r4, #8]
 8005da0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005da2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005da4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005da6:	6920      	ldr	r0, [r4, #16]
 8005da8:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005daa:	4313      	orrs	r3, r2
 8005dac:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005dae:	6821      	ldr	r1, [r4, #0]
 8005db0:	688a      	ldr	r2, [r1, #8]
 8005db2:	4b2d      	ldr	r3, [pc, #180]	; (8005e68 <HAL_LTDC_Init+0xf0>)
 8005db4:	401a      	ands	r2, r3
 8005db6:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005db8:	6820      	ldr	r0, [r4, #0]
 8005dba:	6882      	ldr	r2, [r0, #8]
 8005dbc:	69a1      	ldr	r1, [r4, #24]
 8005dbe:	6965      	ldr	r5, [r4, #20]
 8005dc0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005dc8:	6821      	ldr	r1, [r4, #0]
 8005dca:	68ca      	ldr	r2, [r1, #12]
 8005dcc:	401a      	ands	r2, r3
 8005dce:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	68c2      	ldr	r2, [r0, #12]
 8005dd4:	6a21      	ldr	r1, [r4, #32]
 8005dd6:	69e5      	ldr	r5, [r4, #28]
 8005dd8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005de0:	6821      	ldr	r1, [r4, #0]
 8005de2:	690a      	ldr	r2, [r1, #16]
 8005de4:	401a      	ands	r2, r3
 8005de6:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	6902      	ldr	r2, [r0, #16]
 8005dec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005dee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005df0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005df4:	430a      	orrs	r2, r1
 8005df6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	694a      	ldr	r2, [r1, #20]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e02:	6821      	ldr	r1, [r4, #0]
 8005e04:	694b      	ldr	r3, [r1, #20]
 8005e06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005e08:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e10:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e14:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005e18:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e1a:	6821      	ldr	r1, [r4, #0]
 8005e1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e1e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e22:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e24:	6821      	ldr	r1, [r4, #0]
 8005e26:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e28:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e2c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005e30:	4303      	orrs	r3, r0
 8005e32:	4313      	orrs	r3, r2
 8005e34:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005e3a:	f043 0306 	orr.w	r3, r3, #6
 8005e3e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	6993      	ldr	r3, [r2, #24]
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8005e58:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005e5c:	f7fc f85e 	bl	8001f1c <HAL_LTDC_MspInit>
 8005e60:	e792      	b.n	8005d88 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8005e62:	2001      	movs	r0, #1
}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	f000f800 	.word	0xf000f800

08005e6c <HAL_LTDC_ErrorCallback>:
}
 8005e6c:	4770      	bx	lr

08005e6e <HAL_LTDC_ReloadEventCallback>:
}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_LTDC_IRQHandler>:
{
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e74:	6803      	ldr	r3, [r0, #0]
 8005e76:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005e78:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005e7a:	f015 0f04 	tst.w	r5, #4
 8005e7e:	d002      	beq.n	8005e86 <HAL_LTDC_IRQHandler+0x16>
 8005e80:	f016 0f04 	tst.w	r6, #4
 8005e84:	d112      	bne.n	8005eac <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e86:	f015 0f02 	tst.w	r5, #2
 8005e8a:	d002      	beq.n	8005e92 <HAL_LTDC_IRQHandler+0x22>
 8005e8c:	f016 0f02 	tst.w	r6, #2
 8005e90:	d121      	bne.n	8005ed6 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e92:	f015 0f01 	tst.w	r5, #1
 8005e96:	d002      	beq.n	8005e9e <HAL_LTDC_IRQHandler+0x2e>
 8005e98:	f016 0f01 	tst.w	r6, #1
 8005e9c:	d132      	bne.n	8005f04 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005e9e:	f015 0f08 	tst.w	r5, #8
 8005ea2:	d002      	beq.n	8005eaa <HAL_LTDC_IRQHandler+0x3a>
 8005ea4:	f016 0f08 	tst.w	r6, #8
 8005ea8:	d13d      	bne.n	8005f26 <HAL_LTDC_IRQHandler+0xb6>
}
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eae:	f022 0204 	bic.w	r2, r2, #4
 8005eb2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005eb4:	6803      	ldr	r3, [r0, #0]
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005eba:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ec6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005ed0:	f7ff ffcc 	bl	8005e6c <HAL_LTDC_ErrorCallback>
 8005ed4:	e7d7      	b.n	8005e86 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005eda:	f023 0302 	bic.w	r3, r3, #2
 8005ede:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005ee6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff ffb5 	bl	8005e6c <HAL_LTDC_ErrorCallback>
 8005f02:	e7c6      	b.n	8005e92 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	2301      	movs	r3, #1
 8005f12:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f14:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7fb fc2a 	bl	8001778 <HAL_LTDC_LineEventCallback>
 8005f24:	e7bb      	b.n	8005e9e <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f26:	6822      	ldr	r2, [r4, #0]
 8005f28:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f2a:	f023 0308 	bic.w	r3, r3, #8
 8005f2e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	2208      	movs	r2, #8
 8005f34:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff ff93 	bl	8005e6e <HAL_LTDC_ReloadEventCallback>
}
 8005f48:	e7af      	b.n	8005eaa <HAL_LTDC_IRQHandler+0x3a>

08005f4a <HAL_LTDC_ConfigLayer>:
{
 8005f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8005f4c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d02c      	beq.n	8005fae <HAL_LTDC_ConfigLayer+0x64>
 8005f54:	4604      	mov	r4, r0
 8005f56:	460d      	mov	r5, r1
 8005f58:	4616      	mov	r6, r2
 8005f5a:	2701      	movs	r7, #1
 8005f5c:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f60:	2302      	movs	r3, #2
 8005f62:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f66:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005f6a:	fb0c 0c02 	mla	ip, ip, r2, r0
 8005f6e:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8005f72:	468e      	mov	lr, r1
 8005f74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005f78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005f7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005f80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005f84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005f88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005f8c:	f8de 3000 	ldr.w	r3, [lr]
 8005f90:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f94:	4632      	mov	r2, r6
 8005f96:	4629      	mov	r1, r5
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff fe11 	bl	8005bc0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fa2:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8005fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8005fae:	2002      	movs	r0, #2
 8005fb0:	e7fc      	b.n	8005fac <HAL_LTDC_ConfigLayer+0x62>
	...

08005fb4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005fb4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d01a      	beq.n	8005ff2 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8005fbc:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005fca:	6804      	ldr	r4, [r0, #0]
 8005fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005fd4:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <HAL_LTDC_ProgramLineEvent+0x44>)
 8005fd6:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005fd8:	6801      	ldr	r1, [r0, #0]
 8005fda:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005fe0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8005fea:	4618      	mov	r0, r3
}
 8005fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff0:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8005ff2:	2002      	movs	r0, #2
}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	50001000 	.word	0x50001000

08005ffc <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8006000:	f7fe fd16 	bl	8004a30 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006004:	2c00      	cmp	r4, #0
 8006006:	d035      	beq.n	8006074 <HAL_MDMA_Abort+0x78>
 8006008:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800600a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d006      	beq.n	8006022 <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006014:	2380      	movs	r3, #128	; 0x80
 8006016:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006018:	2300      	movs	r3, #0
 800601a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800601e:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 8006020:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	68d3      	ldr	r3, [r2, #12]
 8006026:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800602a:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	68d3      	ldr	r3, [r2, #12]
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	f012 0f01 	tst.w	r2, #1
 800603e:	d010      	beq.n	8006062 <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006040:	f7fe fcf6 	bl	8004a30 <HAL_GetTick>
 8006044:	1b43      	subs	r3, r0, r5
 8006046:	2b05      	cmp	r3, #5
 8006048:	d9f5      	bls.n	8006036 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800604a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 8006052:	2300      	movs	r3, #0
 8006054:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006058:	2303      	movs	r3, #3
 800605a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800605e:	2001      	movs	r0, #1
 8006060:	e7de      	b.n	8006020 <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8006062:	221f      	movs	r2, #31
 8006064:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 8006066:	2000      	movs	r0, #0
 8006068:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800606c:	2301      	movs	r3, #1
 800606e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006072:	e7d5      	b.n	8006020 <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 8006074:	2001      	movs	r0, #1
 8006076:	e7d3      	b.n	8006020 <HAL_MDMA_Abort+0x24>

08006078 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006078:	b190      	cbz	r0, 80060a0 <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800607a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d003      	beq.n	800608c <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 8006088:	2001      	movs	r0, #1
 800608a:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800608c:	2304      	movs	r3, #4
 800608e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8006092:	6802      	ldr	r2, [r0, #0]
 8006094:	68d3      	ldr	r3, [r2, #12]
 8006096:	f023 0301 	bic.w	r3, r3, #1
 800609a:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800609c:	2000      	movs	r0, #0
 800609e:	4770      	bx	lr
    return HAL_ERROR;
 80060a0:	2001      	movs	r0, #1
}
 80060a2:	4770      	bx	lr

080060a4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80060a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80060a6:	6802      	ldr	r2, [r0, #0]
 80060a8:	6813      	ldr	r3, [r2, #0]
 80060aa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80060ae:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80060b0:	6883      	ldr	r3, [r0, #8]
 80060b2:	b933      	cbnz	r3, 80060c2 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80060b4:	6802      	ldr	r2, [r0, #0]
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060bc:	684c      	ldr	r4, [r1, #4]
 80060be:	4323      	orrs	r3, r4
 80060c0:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80060c2:	680b      	ldr	r3, [r1, #0]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d04d      	beq.n	8006164 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d055      	beq.n	8006178 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80060cc:	6803      	ldr	r3, [r0, #0]
 80060ce:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 80060d2:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 80060d6:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 80060da:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80060de:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80060e0:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 80060e2:	432c      	orrs	r4, r5
 80060e4:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80060e6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80060e8:	b15c      	cbz	r4, 8006102 <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80060ea:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80060ec:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80060f4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80060f6:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80060f8:	432c      	orrs	r4, r5
 80060fa:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80060fc:	432c      	orrs	r4, r5
 80060fe:	4323      	orrs	r3, r4
 8006100:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006102:	f8de 3000 	ldr.w	r3, [lr]
 8006106:	f023 031f 	bic.w	r3, r3, #31
 800610a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800610c:	4323      	orrs	r3, r4
 800610e:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006112:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8006114:	b12b      	cbz	r3, 8006122 <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006116:	680b      	ldr	r3, [r1, #0]
 8006118:	b91b      	cbnz	r3, 8006122 <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800611a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800611c:	6804      	ldr	r4, [r0, #0]
 800611e:	3b01      	subs	r3, #1
 8006120:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006122:	68cb      	ldr	r3, [r1, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d073      	beq.n	8006210 <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006128:	69cc      	ldr	r4, [r1, #28]
 800612a:	2c00      	cmp	r4, #0
 800612c:	d048      	beq.n	80061c0 <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800612e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8006130:	b365      	cbz	r5, 800618c <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006132:	6817      	ldr	r7, [r2, #0]
 8006134:	4e48      	ldr	r6, [pc, #288]	; (8006258 <OSPI_ConfigCmd+0x1b4>)
 8006136:	403e      	ands	r6, r7
 8006138:	694f      	ldr	r7, [r1, #20]
 800613a:	433b      	orrs	r3, r7
 800613c:	690f      	ldr	r7, [r1, #16]
 800613e:	433b      	orrs	r3, r7
 8006140:	431c      	orrs	r4, r3
 8006142:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006144:	431c      	orrs	r4, r3
 8006146:	6a0b      	ldr	r3, [r1, #32]
 8006148:	431c      	orrs	r4, r3
 800614a:	432c      	orrs	r4, r5
 800614c:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800614e:	432c      	orrs	r4, r5
 8006150:	4334      	orrs	r4, r6
 8006152:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006154:	688b      	ldr	r3, [r1, #8]
 8006156:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800615a:	6803      	ldr	r3, [r0, #0]
 800615c:	698a      	ldr	r2, [r1, #24]
 800615e:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8006160:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8006162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 8006164:	6803      	ldr	r3, [r0, #0]
 8006166:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800616a:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800616e:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8006172:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006176:	e7b2      	b.n	80060de <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 8006178:	6803      	ldr	r3, [r0, #0]
 800617a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800617e:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 8006182:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 8006186:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800618a:	e7a8      	b.n	80060de <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800618c:	6816      	ldr	r6, [r2, #0]
 800618e:	4d33      	ldr	r5, [pc, #204]	; (800625c <OSPI_ConfigCmd+0x1b8>)
 8006190:	4035      	ands	r5, r6
 8006192:	694e      	ldr	r6, [r1, #20]
 8006194:	4333      	orrs	r3, r6
 8006196:	690e      	ldr	r6, [r1, #16]
 8006198:	4333      	orrs	r3, r6
 800619a:	431c      	orrs	r4, r3
 800619c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800619e:	431c      	orrs	r4, r3
 80061a0:	6a0b      	ldr	r3, [r1, #32]
 80061a2:	431c      	orrs	r4, r3
 80061a4:	432c      	orrs	r4, r5
 80061a6:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80061aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ae:	d1d1      	bne.n	8006154 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80061b0:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d1ce      	bne.n	8006154 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	e7c9      	b.n	8006154 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061c0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80061c2:	b184      	cbz	r4, 80061e6 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80061c4:	6815      	ldr	r5, [r2, #0]
 80061c6:	4826      	ldr	r0, [pc, #152]	; (8006260 <OSPI_ConfigCmd+0x1bc>)
 80061c8:	4028      	ands	r0, r5
 80061ca:	694d      	ldr	r5, [r1, #20]
 80061cc:	432b      	orrs	r3, r5
 80061ce:	690d      	ldr	r5, [r1, #16]
 80061d0:	432b      	orrs	r3, r5
 80061d2:	431c      	orrs	r4, r3
 80061d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061d6:	431c      	orrs	r4, r3
 80061d8:	4304      	orrs	r4, r0
 80061da:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 80061dc:	688b      	ldr	r3, [r1, #8]
 80061de:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 80061e2:	2000      	movs	r0, #0
 80061e4:	e7bd      	b.n	8006162 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80061e6:	6814      	ldr	r4, [r2, #0]
 80061e8:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80061ec:	694d      	ldr	r5, [r1, #20]
 80061ee:	432b      	orrs	r3, r5
 80061f0:	690d      	ldr	r5, [r1, #16]
 80061f2:	432b      	orrs	r3, r5
 80061f4:	4323      	orrs	r3, r4
 80061f6:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80061fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fe:	d1ed      	bne.n	80061dc <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006200:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006202:	2b08      	cmp	r3, #8
 8006204:	d1ea      	bne.n	80061dc <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e7e5      	b.n	80061dc <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006210:	69cb      	ldr	r3, [r1, #28]
 8006212:	b1e3      	cbz	r3, 800624e <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006214:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8006216:	b184      	cbz	r4, 800623a <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006218:	6816      	ldr	r6, [r2, #0]
 800621a:	4d12      	ldr	r5, [pc, #72]	; (8006264 <OSPI_ConfigCmd+0x1c0>)
 800621c:	4035      	ands	r5, r6
 800621e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8006220:	4333      	orrs	r3, r6
 8006222:	6a0e      	ldr	r6, [r1, #32]
 8006224:	4333      	orrs	r3, r6
 8006226:	4323      	orrs	r3, r4
 8006228:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800622a:	4323      	orrs	r3, r4
 800622c:	432b      	orrs	r3, r5
 800622e:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8006230:	6803      	ldr	r3, [r0, #0]
 8006232:	698a      	ldr	r2, [r1, #24]
 8006234:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	2000      	movs	r0, #0
 8006238:	e793      	b.n	8006162 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800623a:	6814      	ldr	r4, [r2, #0]
 800623c:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 8006240:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006242:	432b      	orrs	r3, r5
 8006244:	6a0d      	ldr	r5, [r1, #32]
 8006246:	432b      	orrs	r3, r5
 8006248:	4323      	orrs	r3, r4
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	e7f0      	b.n	8006230 <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800624e:	2308      	movs	r3, #8
 8006250:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 8006252:	2001      	movs	r0, #1
 8006254:	e785      	b.n	8006162 <OSPI_ConfigCmd+0xbe>
 8006256:	bf00      	nop
 8006258:	f0ffc0c0 	.word	0xf0ffc0c0
 800625c:	ffffc0c0 	.word	0xffffc0c0
 8006260:	f0ffffc0 	.word	0xf0ffffc0
 8006264:	f0ffc0ff 	.word	0xf0ffc0ff

08006268 <OSPI_WaitFlagStateUntilTimeout>:
{
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4605      	mov	r5, r0
 800626e:	460f      	mov	r7, r1
 8006270:	4616      	mov	r6, r2
 8006272:	4699      	mov	r9, r3
 8006274:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006278:	682c      	ldr	r4, [r5, #0]
 800627a:	6a24      	ldr	r4, [r4, #32]
 800627c:	423c      	tst	r4, r7
 800627e:	bf14      	ite	ne
 8006280:	f04f 0c01 	movne.w	ip, #1
 8006284:	f04f 0c00 	moveq.w	ip, #0
 8006288:	45b4      	cmp	ip, r6
 800628a:	d014      	beq.n	80062b6 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800628c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006290:	d0f2      	beq.n	8006278 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006292:	f7fe fbcd 	bl	8004a30 <HAL_GetTick>
 8006296:	eba0 0009 	sub.w	r0, r0, r9
 800629a:	4540      	cmp	r0, r8
 800629c:	d802      	bhi.n	80062a4 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800629e:	f1b8 0f00 	cmp.w	r8, #0
 80062a2:	d1e9      	bne.n	8006278 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80062a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a8:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80062aa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 80062b2:	2001      	movs	r0, #1
 80062b4:	e000      	b.n	80062b8 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 80062b6:	2000      	movs	r0, #0
}
 80062b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080062bc <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 80062bc:	b180      	cbz	r0, 80062e0 <HAL_OSPI_DeInit+0x24>
{
 80062be:	b510      	push	{r4, lr}
 80062c0:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 80062c2:	6802      	ldr	r2, [r0, #0]
 80062c4:	6813      	ldr	r3, [r2, #0]
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80062cc:	6802      	ldr	r2, [r0, #0]
 80062ce:	6893      	ldr	r3, [r2, #8]
 80062d0:	f023 0302 	bic.w	r3, r3, #2
 80062d4:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 80062d6:	f7fb feff 	bl	80020d8 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 80062da:	2000      	movs	r0, #0
 80062dc:	6520      	str	r0, [r4, #80]	; 0x50
}
 80062de:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80062e0:	2001      	movs	r0, #1
}
 80062e2:	4770      	bx	lr

080062e4 <HAL_OSPI_Command>:
{
 80062e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	4604      	mov	r4, r0
 80062ec:	4688      	mov	r8, r1
 80062ee:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80062f0:	f7fe fb9e 	bl	8004a30 <HAL_GetTick>
 80062f4:	4606      	mov	r6, r0
  state = hospi->State;
 80062f6:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80062f8:	2d02      	cmp	r5, #2
 80062fa:	d009      	beq.n	8006310 <HAL_OSPI_Command+0x2c>
 80062fc:	2d14      	cmp	r5, #20
 80062fe:	d024      	beq.n	800634a <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8006300:	2d24      	cmp	r5, #36	; 0x24
 8006302:	d028      	beq.n	8006356 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006304:	2310      	movs	r3, #16
 8006306:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006308:	2001      	movs	r0, #1
}
 800630a:	b002      	add	sp, #8
 800630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006310:	68e3      	ldr	r3, [r4, #12]
 8006312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006316:	d0f1      	beq.n	80062fc <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006318:	9700      	str	r7, [sp, #0]
 800631a:	4633      	mov	r3, r6
 800631c:	2200      	movs	r2, #0
 800631e:	2120      	movs	r1, #32
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff ffa1 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006326:	2800      	cmp	r0, #0
 8006328:	d1ef      	bne.n	800630a <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800632a:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800632c:	4641      	mov	r1, r8
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff feb8 	bl	80060a4 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8006334:	2800      	cmp	r0, #0
 8006336:	d1e8      	bne.n	800630a <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8006338:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800633c:	b193      	cbz	r3, 8006364 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800633e:	f8d8 3000 	ldr.w	r3, [r8]
 8006342:	b9d3      	cbnz	r3, 800637a <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006344:	2304      	movs	r3, #4
 8006346:	6523      	str	r3, [r4, #80]	; 0x50
 8006348:	e7df      	b.n	800630a <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800634a:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800634e:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006350:	2b01      	cmp	r3, #1
 8006352:	d8d5      	bhi.n	8006300 <HAL_OSPI_Command+0x1c>
 8006354:	e7e0      	b.n	8006318 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8006356:	f8d8 3000 	ldr.w	r3, [r8]
 800635a:	2b03      	cmp	r3, #3
 800635c:	bf18      	it	ne
 800635e:	2b01      	cmpne	r3, #1
 8006360:	d1d0      	bne.n	8006304 <HAL_OSPI_Command+0x20>
 8006362:	e7d9      	b.n	8006318 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006364:	9700      	str	r7, [sp, #0]
 8006366:	4633      	mov	r3, r6
 8006368:	2201      	movs	r2, #1
 800636a:	2102      	movs	r1, #2
 800636c:	4620      	mov	r0, r4
 800636e:	f7ff ff7b 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	2202      	movs	r2, #2
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
 8006378:	e7c7      	b.n	800630a <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800637a:	2b01      	cmp	r3, #1
 800637c:	d007      	beq.n	800638e <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800637e:	2b02      	cmp	r3, #2
 8006380:	d1c3      	bne.n	800630a <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8006382:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006384:	2b14      	cmp	r3, #20
 8006386:	d00b      	beq.n	80063a0 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8006388:	2324      	movs	r3, #36	; 0x24
 800638a:	6523      	str	r3, [r4, #80]	; 0x50
 800638c:	e7bd      	b.n	800630a <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800638e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006390:	2b24      	cmp	r3, #36	; 0x24
 8006392:	d002      	beq.n	800639a <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8006394:	2314      	movs	r3, #20
 8006396:	6523      	str	r3, [r4, #80]	; 0x50
 8006398:	e7b7      	b.n	800630a <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800639a:	2304      	movs	r3, #4
 800639c:	6523      	str	r3, [r4, #80]	; 0x50
 800639e:	e7b4      	b.n	800630a <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80063a0:	2304      	movs	r3, #4
 80063a2:	6523      	str	r3, [r4, #80]	; 0x50
 80063a4:	e7b1      	b.n	800630a <HAL_OSPI_Command+0x26>

080063a6 <HAL_OSPI_Transmit>:
{
 80063a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	4604      	mov	r4, r0
 80063ae:	4688      	mov	r8, r1
 80063b0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80063b2:	f7fe fb3d 	bl	8004a30 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80063b6:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_OSPI_Transmit+0x2e>
 80063be:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80063c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d00a      	beq.n	80063dc <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80063c6:	2310      	movs	r3, #16
 80063c8:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	b002      	add	sp, #8
 80063d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80063d4:	2308      	movs	r3, #8
 80063d6:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e7f7      	b.n	80063cc <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80063dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063de:	3301      	adds	r3, #1
 80063e0:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80063e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063e4:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 80063e6:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80063f0:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80063f2:	9600      	str	r6, [sp, #0]
 80063f4:	462b      	mov	r3, r5
 80063f6:	2201      	movs	r2, #1
 80063f8:	2104      	movs	r1, #4
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff ff34 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006400:	4603      	mov	r3, r0
 8006402:	b960      	cbnz	r0, 800641e <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006404:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800640c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800640e:	3101      	adds	r1, #1
 8006410:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006412:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006414:	3901      	subs	r1, #1
 8006416:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8006418:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800641a:	2a00      	cmp	r2, #0
 800641c:	d1e9      	bne.n	80063f2 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1d4      	bne.n	80063cc <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006422:	9600      	str	r6, [sp, #0]
 8006424:	462b      	mov	r3, r5
 8006426:	2201      	movs	r2, #1
 8006428:	2102      	movs	r1, #2
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff ff1c 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006430:	4603      	mov	r3, r0
 8006432:	2800      	cmp	r0, #0
 8006434:	d1ca      	bne.n	80063cc <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006436:	6821      	ldr	r1, [r4, #0]
 8006438:	2202      	movs	r2, #2
 800643a:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800643c:	6522      	str	r2, [r4, #80]	; 0x50
 800643e:	e7c5      	b.n	80063cc <HAL_OSPI_Transmit+0x26>

08006440 <HAL_OSPI_Receive>:
{
 8006440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	4604      	mov	r4, r0
 8006448:	4688      	mov	r8, r1
 800644a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800644c:	f7fe faf0 	bl	8004a30 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006450:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 8006452:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006454:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d00a      	beq.n	8006474 <HAL_OSPI_Receive+0x34>
 800645e:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006460:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006462:	2b04      	cmp	r3, #4
 8006464:	d00a      	beq.n	800647c <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006466:	2310      	movs	r3, #16
 8006468:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
}
 800646c:	4618      	mov	r0, r3
 800646e:	b002      	add	sp, #8
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006474:	2308      	movs	r3, #8
 8006476:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e7f7      	b.n	800646c <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800647c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800647e:	3301      	adds	r3, #1
 8006480:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8006482:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006484:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8006486:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006494:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800649c:	d007      	beq.n	80064ae <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80064a4:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 80064a8:	d02a      	beq.n	8006500 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80064aa:	649a      	str	r2, [r3, #72]	; 0x48
 80064ac:	e001      	b.n	80064b2 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80064b2:	9700      	str	r7, [sp, #0]
 80064b4:	4633      	mov	r3, r6
 80064b6:	2201      	movs	r2, #1
 80064b8:	2106      	movs	r1, #6
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7ff fed4 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80064c0:	4603      	mov	r3, r0
 80064c2:	b960      	cbnz	r0, 80064de <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80064c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064c6:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 80064ca:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 80064cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064ce:	3101      	adds	r1, #1
 80064d0:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 80064d2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064d4:	3901      	subs	r1, #1
 80064d6:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 80064d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d1e9      	bne.n	80064b2 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1c4      	bne.n	800646c <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80064e2:	9700      	str	r7, [sp, #0]
 80064e4:	4633      	mov	r3, r6
 80064e6:	2201      	movs	r2, #1
 80064e8:	2102      	movs	r1, #2
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff febc 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80064f0:	4603      	mov	r3, r0
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1ba      	bne.n	800646c <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80064f6:	6821      	ldr	r1, [r4, #0]
 80064f8:	2202      	movs	r2, #2
 80064fa:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80064fc:	6522      	str	r2, [r4, #80]	; 0x50
 80064fe:	e7b5      	b.n	800646c <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006500:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8006504:	e7d5      	b.n	80064b2 <HAL_OSPI_Receive+0x72>

08006506 <HAL_OSPI_AutoPolling>:
{
 8006506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800650a:	b083      	sub	sp, #12
 800650c:	4604      	mov	r4, r0
 800650e:	460d      	mov	r5, r1
 8006510:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8006512:	f7fe fa8d 	bl	8004a30 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006516:	6821      	ldr	r1, [r4, #0]
 8006518:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800651a:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800651e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006520:	2904      	cmp	r1, #4
 8006522:	d005      	beq.n	8006530 <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006524:	2310      	movs	r3, #16
 8006526:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006528:	2001      	movs	r0, #1
}
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006530:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006532:	68eb      	ldr	r3, [r5, #12]
 8006534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006538:	d1f4      	bne.n	8006524 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800653a:	f8cd 9000 	str.w	r9, [sp]
 800653e:	4603      	mov	r3, r0
 8006540:	2200      	movs	r2, #0
 8006542:	2120      	movs	r1, #32
 8006544:	4620      	mov	r0, r4
 8006546:	f7ff fe8f 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800654a:	2800      	cmp	r0, #0
 800654c:	d1ed      	bne.n	800652a <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	682a      	ldr	r2, [r5, #0]
 8006552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	686a      	ldr	r2, [r5, #4]
 800655a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	692a      	ldr	r2, [r5, #16]
 8006562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006566:	6821      	ldr	r1, [r4, #0]
 8006568:	680b      	ldr	r3, [r1, #0]
 800656a:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800656e:	68aa      	ldr	r2, [r5, #8]
 8006570:	68e8      	ldr	r0, [r5, #12]
 8006572:	4302      	orrs	r2, r0
 8006574:	4313      	orrs	r3, r2
 8006576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800657a:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800657c:	68e3      	ldr	r3, [r4, #12]
 800657e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006582:	d007      	beq.n	8006594 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800658a:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800658e:	d013      	beq.n	80065b8 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006590:	649f      	str	r7, [r3, #72]	; 0x48
 8006592:	e001      	b.n	8006598 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006598:	f8cd 9000 	str.w	r9, [sp]
 800659c:	4643      	mov	r3, r8
 800659e:	2201      	movs	r2, #1
 80065a0:	2108      	movs	r1, #8
 80065a2:	4620      	mov	r0, r4
 80065a4:	f7ff fe60 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d1be      	bne.n	800652a <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	2208      	movs	r2, #8
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 80065b2:	2302      	movs	r3, #2
 80065b4:	6523      	str	r3, [r4, #80]	; 0x50
 80065b6:	e7b8      	b.n	800652a <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80065b8:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 80065bc:	e7ec      	b.n	8006598 <HAL_OSPI_AutoPolling+0x92>
	...

080065c0 <HAL_OSPI_MemoryMapped>:
{
 80065c0:	b530      	push	{r4, r5, lr}
 80065c2:	b083      	sub	sp, #12
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80065c8:	f7fe fa32 	bl	8004a30 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80065cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d004      	beq.n	80065dc <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80065d2:	2310      	movs	r3, #16
 80065d4:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80065d6:	2001      	movs	r0, #1
}
 80065d8:	b003      	add	sp, #12
 80065da:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80065dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4603      	mov	r3, r0
 80065e2:	2200      	movs	r2, #0
 80065e4:	2120      	movs	r1, #32
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff fe3e 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d1f3      	bne.n	80065d8 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 80065f0:	2388      	movs	r3, #136	; 0x88
 80065f2:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d009      	beq.n	800660e <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <HAL_OSPI_MemoryMapped+0x68>)
 8006600:	400b      	ands	r3, r1
 8006602:	6829      	ldr	r1, [r5, #0]
 8006604:	430b      	orrs	r3, r1
 8006606:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	e7e4      	b.n	80065d8 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	686a      	ldr	r2, [r5, #4]
 8006612:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	2210      	movs	r2, #16
 800661a:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e7e8      	b.n	80065fa <HAL_OSPI_MemoryMapped+0x3a>
 8006628:	cffffff7 	.word	0xcffffff7

0800662c <HAL_OSPI_ErrorCallback>:
}
 800662c:	4770      	bx	lr

0800662e <HAL_OSPI_AbortCpltCallback>:
}
 800662e:	4770      	bx	lr

08006630 <OSPI_DMAAbortCplt>:
{
 8006630:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8006632:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006638:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800663a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663e:	d116      	bne.n	800666e <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006640:	6803      	ldr	r3, [r0, #0]
 8006642:	6a1a      	ldr	r2, [r3, #32]
 8006644:	f012 0f20 	tst.w	r2, #32
 8006648:	d00c      	beq.n	8006664 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800664a:	2202      	movs	r2, #2
 800664c:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800664e:	6802      	ldr	r2, [r0, #0]
 8006650:	6813      	ldr	r3, [r2, #0]
 8006652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006656:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006658:	6802      	ldr	r2, [r0, #0]
 800665a:	6813      	ldr	r3, [r2, #0]
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e008      	b.n	8006676 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 8006664:	2302      	movs	r3, #2
 8006666:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8006668:	f7ff ffe1 	bl	800662e <HAL_OSPI_AbortCpltCallback>
 800666c:	e003      	b.n	8006676 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800666e:	2302      	movs	r3, #2
 8006670:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8006672:	f7ff ffdb 	bl	800662c <HAL_OSPI_ErrorCallback>
}
 8006676:	bd08      	pop	{r3, pc}

08006678 <HAL_OSPI_FifoThresholdCallback>:
}
 8006678:	4770      	bx	lr

0800667a <HAL_OSPI_CmdCpltCallback>:
}
 800667a:	4770      	bx	lr

0800667c <HAL_OSPI_RxCpltCallback>:
}
 800667c:	4770      	bx	lr

0800667e <HAL_OSPI_TxCpltCallback>:
}
 800667e:	4770      	bx	lr

08006680 <HAL_OSPI_StatusMatchCallback>:
}
 8006680:	4770      	bx	lr

08006682 <HAL_OSPI_TimeOutCallback>:
}
 8006682:	4770      	bx	lr

08006684 <HAL_OSPI_IRQHandler>:
{
 8006684:	b510      	push	{r4, lr}
 8006686:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006688:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 800668a:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 800668c:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 800668e:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8006690:	f013 0f04 	tst.w	r3, #4
 8006694:	d027      	beq.n	80066e6 <HAL_OSPI_IRQHandler+0x62>
 8006696:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800669a:	d024      	beq.n	80066e6 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800669c:	2818      	cmp	r0, #24
 800669e:	d00c      	beq.n	80066ba <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066a0:	2828      	cmp	r0, #40	; 0x28
 80066a2:	d015      	beq.n	80066d0 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 80066a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066a6:	b923      	cbnz	r3, 80066b2 <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	6813      	ldr	r3, [r2, #0]
 80066ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066b0:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff ffe0 	bl	8006678 <HAL_OSPI_FifoThresholdCallback>
}
 80066b8:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80066ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 80066c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066c4:	3301      	adds	r3, #1
 80066c6:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 80066c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066ca:	3b01      	subs	r3, #1
 80066cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80066ce:	e7e9      	b.n	80066a4 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80066d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066d2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80066d6:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80066d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066da:	3301      	adds	r3, #1
 80066dc:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 80066de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066e0:	3b01      	subs	r3, #1
 80066e2:	64a3      	str	r3, [r4, #72]	; 0x48
 80066e4:	e7de      	b.n	80066a4 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 80066e6:	f013 0f02 	tst.w	r3, #2
 80066ea:	d044      	beq.n	8006776 <HAL_OSPI_IRQHandler+0xf2>
 80066ec:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80066f0:	d041      	beq.n	8006776 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066f2:	2828      	cmp	r0, #40	; 0x28
 80066f4:	d014      	beq.n	8006720 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80066f6:	2102      	movs	r1, #2
 80066f8:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	6813      	ldr	r3, [r2, #0]
 80066fe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006702:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8006704:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006706:	2818      	cmp	r0, #24
 8006708:	d029      	beq.n	800675e <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800670a:	2808      	cmp	r0, #8
 800670c:	d02b      	beq.n	8006766 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800670e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006712:	d1d1      	bne.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8006714:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006716:	bb53      	cbnz	r3, 800676e <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8006718:	4620      	mov	r0, r4
 800671a:	f7ff ff88 	bl	800662e <HAL_OSPI_AbortCpltCallback>
 800671e:	e7cb      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8006720:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006722:	b169      	cbz	r1, 8006740 <HAL_OSPI_IRQHandler+0xbc>
 8006724:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 8006728:	d00a      	beq.n	8006740 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800672a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800672c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8006730:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006734:	3301      	adds	r3, #1
 8006736:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006738:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800673a:	3b01      	subs	r3, #1
 800673c:	64a3      	str	r3, [r4, #72]	; 0x48
 800673e:	e7bb      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 8006740:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1b8      	bne.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006746:	2102      	movs	r1, #2
 8006748:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	6813      	ldr	r3, [r2, #0]
 800674e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006752:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 8006754:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 8006756:	4620      	mov	r0, r4
 8006758:	f7ff ff90 	bl	800667c <HAL_OSPI_RxCpltCallback>
 800675c:	e7ac      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800675e:	4620      	mov	r0, r4
 8006760:	f7ff ff8d 	bl	800667e <HAL_OSPI_TxCpltCallback>
 8006764:	e7a8      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 8006766:	4620      	mov	r0, r4
 8006768:	f7ff ff87 	bl	800667a <HAL_OSPI_CmdCpltCallback>
 800676c:	e7a4      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff ff5c 	bl	800662c <HAL_OSPI_ErrorCallback>
 8006774:	e7a0      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8006776:	f013 0f08 	tst.w	r3, #8
 800677a:	d013      	beq.n	80067a4 <HAL_OSPI_IRQHandler+0x120>
 800677c:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8006780:	d010      	beq.n	80067a4 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8006782:	2308      	movs	r3, #8
 8006784:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800678e:	d005      	beq.n	800679c <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006796:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8006798:	2302      	movs	r3, #2
 800679a:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff ff6f 	bl	8006680 <HAL_OSPI_StatusMatchCallback>
 80067a2:	e789      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80067a4:	f013 0f01 	tst.w	r3, #1
 80067a8:	d029      	beq.n	80067fe <HAL_OSPI_IRQHandler+0x17a>
 80067aa:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80067ae:	d026      	beq.n	80067fe <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80067b0:	2301      	movs	r3, #1
 80067b2:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	6813      	ldr	r3, [r2, #0]
 80067b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067bc:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80067be:	2302      	movs	r3, #2
 80067c0:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	f012 0f04 	tst.w	r2, #4
 80067ca:	d012      	beq.n	80067f2 <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	f022 0204 	bic.w	r2, r2, #4
 80067d2:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80067d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067d6:	4a11      	ldr	r2, [pc, #68]	; (800681c <HAL_OSPI_IRQHandler+0x198>)
 80067d8:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 80067da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80067dc:	f7ff fc4c 	bl	8006078 <HAL_MDMA_Abort_IT>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f43f af69 	beq.w	80066b8 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 80067e6:	2302      	movs	r3, #2
 80067e8:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff ff1e 	bl	800662c <HAL_OSPI_ErrorCallback>
 80067f0:	e762      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 80067f2:	2302      	movs	r3, #2
 80067f4:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7ff ff18 	bl	800662c <HAL_OSPI_ErrorCallback>
 80067fc:	e75c      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80067fe:	f013 0f10 	tst.w	r3, #16
 8006802:	f43f af59 	beq.w	80066b8 <HAL_OSPI_IRQHandler+0x34>
 8006806:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800680a:	f43f af55 	beq.w	80066b8 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800680e:	2310      	movs	r3, #16
 8006810:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff ff35 	bl	8006682 <HAL_OSPI_TimeOutCallback>
}
 8006818:	e74e      	b.n	80066b8 <HAL_OSPI_IRQHandler+0x34>
 800681a:	bf00      	nop
 800681c:	08006631 	.word	0x08006631

08006820 <HAL_OSPI_Abort>:
{
 8006820:	b530      	push	{r4, r5, lr}
 8006822:	b083      	sub	sp, #12
 8006824:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006826:	f7fe f903 	bl	8004a30 <HAL_GetTick>
  state = hospi->State;
 800682a:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800682c:	f012 0f0c 	tst.w	r2, #12
 8006830:	d036      	beq.n	80068a0 <HAL_OSPI_Abort+0x80>
 8006832:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	f012 0f04 	tst.w	r2, #4
 800683c:	d108      	bne.n	8006850 <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800683e:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	6a1a      	ldr	r2, [r3, #32]
 8006844:	f012 0f20 	tst.w	r2, #32
 8006848:	d10e      	bne.n	8006868 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 800684a:	2302      	movs	r3, #2
 800684c:	6523      	str	r3, [r4, #80]	; 0x50
 800684e:	e02a      	b.n	80068a6 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	f022 0204 	bic.w	r2, r2, #4
 8006856:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006858:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800685a:	f7ff fbcf 	bl	8005ffc <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800685e:	2800      	cmp	r0, #0
 8006860:	d0ee      	beq.n	8006840 <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006862:	2304      	movs	r3, #4
 8006864:	6563      	str	r3, [r4, #84]	; 0x54
 8006866:	e7eb      	b.n	8006840 <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	f042 0202 	orr.w	r2, r2, #2
 800686e:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	462b      	mov	r3, r5
 8006876:	2201      	movs	r2, #1
 8006878:	2102      	movs	r1, #2
 800687a:	4620      	mov	r0, r4
 800687c:	f7ff fcf4 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006880:	b988      	cbnz	r0, 80068a6 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	2202      	movs	r2, #2
 8006886:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	462b      	mov	r3, r5
 800688e:	2200      	movs	r2, #0
 8006890:	2120      	movs	r1, #32
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff fce8 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006898:	b928      	cbnz	r0, 80068a6 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 800689a:	2302      	movs	r3, #2
 800689c:	6523      	str	r3, [r4, #80]	; 0x50
 800689e:	e002      	b.n	80068a6 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80068a0:	2310      	movs	r3, #16
 80068a2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80068a4:	2001      	movs	r0, #1
}
 80068a6:	b003      	add	sp, #12
 80068a8:	bd30      	pop	{r4, r5, pc}

080068aa <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 80068aa:	6581      	str	r1, [r0, #88]	; 0x58
}
 80068ac:	2000      	movs	r0, #0
 80068ae:	4770      	bx	lr

080068b0 <HAL_OSPI_Init>:
{
 80068b0:	b530      	push	{r4, r5, lr}
 80068b2:	b083      	sub	sp, #12
 80068b4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80068b6:	f7fe f8bb 	bl	8004a30 <HAL_GetTick>
  if (hospi == NULL)
 80068ba:	2c00      	cmp	r4, #0
 80068bc:	d077      	beq.n	80069ae <HAL_OSPI_Init+0xfe>
 80068be:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80068c0:	2300      	movs	r3, #0
 80068c2:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80068c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068c6:	b113      	cbz	r3, 80068ce <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 80068c8:	2000      	movs	r0, #0
}
 80068ca:	b003      	add	sp, #12
 80068cc:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7fb fbb8 	bl	8002044 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80068d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff ffe6 	bl	80068aa <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	6882      	ldr	r2, [r0, #8]
 80068e2:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <HAL_OSPI_Init+0x104>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	68e2      	ldr	r2, [r4, #12]
 80068e8:	6921      	ldr	r1, [r4, #16]
 80068ea:	3901      	subs	r1, #1
 80068ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80068f0:	6961      	ldr	r1, [r4, #20]
 80068f2:	3901      	subs	r1, #1
 80068f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80068f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fa:	430a      	orrs	r2, r1
 80068fc:	69e1      	ldr	r1, [r4, #28]
 80068fe:	430a      	orrs	r2, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	68d3      	ldr	r3, [r2, #12]
 8006908:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800690c:	6a21      	ldr	r1, [r4, #32]
 800690e:	430b      	orrs	r3, r1
 8006910:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006912:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800691c:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006922:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006924:	6821      	ldr	r1, [r4, #0]
 8006926:	680b      	ldr	r3, [r1, #0]
 8006928:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800692c:	6862      	ldr	r2, [r4, #4]
 800692e:	3a01      	subs	r2, #1
 8006930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006934:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	462b      	mov	r3, r5
 800693c:	2200      	movs	r2, #0
 800693e:	2120      	movs	r1, #32
 8006940:	4620      	mov	r0, r4
 8006942:	f7ff fc91 	bl	8006268 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006946:	2800      	cmp	r0, #0
 8006948:	d1bf      	bne.n	80068ca <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800694a:	6821      	ldr	r1, [r4, #0]
 800694c:	68cb      	ldr	r3, [r1, #12]
 800694e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006952:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006954:	3a01      	subs	r2, #1
 8006956:	4313      	orrs	r3, r2
 8006958:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	6813      	ldr	r3, [r2, #0]
 800695e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006962:	68a1      	ldr	r1, [r4, #8]
 8006964:	430b      	orrs	r3, r1
 8006966:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006968:	6821      	ldr	r1, [r4, #0]
 800696a:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800696e:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 8006972:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006974:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006976:	432a      	orrs	r2, r5
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006988:	69a3      	ldr	r3, [r4, #24]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d006      	beq.n	800699c <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800698e:	68e3      	ldr	r3, [r4, #12]
 8006990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006994:	d008      	beq.n	80069a8 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 8006996:	2302      	movs	r3, #2
 8006998:	6523      	str	r3, [r4, #80]	; 0x50
 800699a:	e796      	b.n	80068ca <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800699c:	6822      	ldr	r2, [r4, #0]
 800699e:	6893      	ldr	r3, [r2, #8]
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	6093      	str	r3, [r2, #8]
 80069a6:	e7f2      	b.n	800698e <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80069a8:	2301      	movs	r3, #1
 80069aa:	6523      	str	r3, [r4, #80]	; 0x50
 80069ac:	e78d      	b.n	80068ca <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 80069ae:	2001      	movs	r0, #1
 80069b0:	e78b      	b.n	80068ca <HAL_OSPI_Init+0x1a>
 80069b2:	bf00      	nop
 80069b4:	f8e0f8f4 	.word	0xf8e0f8f4

080069b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80069bc:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <HAL_PWREx_ConfigSupply+0x90>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	2b06      	cmp	r3, #6
 80069c6:	d007      	beq.n	80069d8 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069c8:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <HAL_PWREx_ConfigSupply+0x90>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d0:	4283      	cmp	r3, r0
 80069d2:	d036      	beq.n	8006a42 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069d4:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_PWREx_ConfigSupply+0x90>)
 80069da:	68d3      	ldr	r3, [r2, #12]
 80069dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069e0:	4303      	orrs	r3, r0
 80069e2:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 80069e4:	f7fe f824 	bl	8004a30 <HAL_GetTick>
 80069e8:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069ea:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <HAL_PWREx_ConfigSupply+0x90>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80069f2:	d107      	bne.n	8006a04 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069f4:	f7fe f81c 	bl	8004a30 <HAL_GetTick>
 80069f8:	1b43      	subs	r3, r0, r5
 80069fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069fe:	d9f4      	bls.n	80069ea <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7e8      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006a04:	2c2e      	cmp	r4, #46	; 0x2e
 8006a06:	bf18      	it	ne
 8006a08:	2c1e      	cmpne	r4, #30
 8006a0a:	d008      	beq.n	8006a1e <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8006a0c:	2c2d      	cmp	r4, #45	; 0x2d
 8006a0e:	bf14      	ite	ne
 8006a10:	2300      	movne	r3, #0
 8006a12:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006a14:	2c1d      	cmp	r4, #29
 8006a16:	d002      	beq.n	8006a1e <HAL_PWREx_ConfigSupply+0x66>
 8006a18:	b90b      	cbnz	r3, 8006a1e <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	e7db      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8006a1e:	f7fe f807 	bl	8004a30 <HAL_GetTick>
 8006a22:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006a24:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <HAL_PWREx_ConfigSupply+0x90>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006a2c:	d107      	bne.n	8006a3e <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a2e:	f7fd ffff 	bl	8004a30 <HAL_GetTick>
 8006a32:	1b00      	subs	r0, r0, r4
 8006a34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006a38:	d9f4      	bls.n	8006a24 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	e7cb      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e7c9      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8006a42:	2000      	movs	r0, #0
 8006a44:	e7c7      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x1e>
 8006a46:	bf00      	nop
 8006a48:	58024800 	.word	0x58024800

08006a4c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f000 82f0 	beq.w	8007032 <HAL_RCC_OscConfig+0x5e6>
{
 8006a52:	b538      	push	{r3, r4, r5, lr}
 8006a54:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a56:	6803      	ldr	r3, [r0, #0]
 8006a58:	f013 0f01 	tst.w	r3, #1
 8006a5c:	d029      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a5e:	4aa1      	ldr	r2, [pc, #644]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006a60:	6913      	ldr	r3, [r2, #16]
 8006a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a66:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d019      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x54>
 8006a6c:	2b18      	cmp	r3, #24
 8006a6e:	d013      	beq.n	8006a98 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a76:	d043      	beq.n	8006b00 <HAL_RCC_OscConfig+0xb4>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d158      	bne.n	8006b2e <HAL_RCC_OscConfig+0xe2>
 8006a7c:	4b99      	ldr	r3, [pc, #612]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	e038      	b.n	8006b0a <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a98:	f002 0203 	and.w	r2, r2, #3
 8006a9c:	2a02      	cmp	r2, #2
 8006a9e:	d1e7      	bne.n	8006a70 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa0:	4b90      	ldr	r3, [pc, #576]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x66>
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 82c2 	beq.w	8007036 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	f013 0f02 	tst.w	r3, #2
 8006ab8:	f000 80a2 	beq.w	8006c00 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006abc:	4a89      	ldr	r2, [pc, #548]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006abe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ac0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ac2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8006ac6:	d074      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x166>
 8006ac8:	2b18      	cmp	r3, #24
 8006aca:	d06f      	beq.n	8006bac <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006acc:	68e3      	ldr	r3, [r4, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80c3 	beq.w	8006c5a <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ad4:	4983      	ldr	r1, [pc, #524]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006ad6:	680a      	ldr	r2, [r1, #0]
 8006ad8:	f022 0219 	bic.w	r2, r2, #25
 8006adc:	4313      	orrs	r3, r2
 8006ade:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae0:	f7fd ffa6 	bl	8004a30 <HAL_GetTick>
 8006ae4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ae6:	4b7f      	ldr	r3, [pc, #508]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f013 0f04 	tst.w	r3, #4
 8006aee:	f040 80ab 	bne.w	8006c48 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af2:	f7fd ff9d 	bl	8004a30 <HAL_GetTick>
 8006af6:	1b40      	subs	r0, r0, r5
 8006af8:	2802      	cmp	r0, #2
 8006afa:	d9f4      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8006afc:	2003      	movs	r0, #3
 8006afe:	e2a1      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b00:	4a78      	ldr	r2, [pc, #480]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b08:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b0a:	6863      	ldr	r3, [r4, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d03e      	beq.n	8006b8e <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 8006b10:	f7fd ff8e 	bl	8004a30 <HAL_GetTick>
 8006b14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b16:	4b73      	ldr	r3, [pc, #460]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b1e:	d1c8      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b20:	f7fd ff86 	bl	8004a30 <HAL_GetTick>
 8006b24:	1b40      	subs	r0, r0, r5
 8006b26:	2864      	cmp	r0, #100	; 0x64
 8006b28:	d9f5      	bls.n	8006b16 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8006b2a:	2003      	movs	r0, #3
 8006b2c:	e28a      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b32:	d010      	beq.n	8006b56 <HAL_RCC_OscConfig+0x10a>
 8006b34:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006b38:	d01b      	beq.n	8006b72 <HAL_RCC_OscConfig+0x126>
 8006b3a:	4b6a      	ldr	r3, [pc, #424]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e7d9      	b.n	8006b0a <HAL_RCC_OscConfig+0xbe>
 8006b56:	4b63      	ldr	r3, [pc, #396]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e7cb      	b.n	8006b0a <HAL_RCC_OscConfig+0xbe>
 8006b72:	4b5c      	ldr	r3, [pc, #368]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	e7bd      	b.n	8006b0a <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8006b8e:	f7fd ff4f 	bl	8004a30 <HAL_GetTick>
 8006b92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b94:	4b53      	ldr	r3, [pc, #332]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b9c:	d089      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b9e:	f7fd ff47 	bl	8004a30 <HAL_GetTick>
 8006ba2:	1b40      	subs	r0, r0, r5
 8006ba4:	2864      	cmp	r0, #100	; 0x64
 8006ba6:	d9f5      	bls.n	8006b94 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 8006ba8:	2003      	movs	r0, #3
 8006baa:	e24b      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006bac:	f012 0f03 	tst.w	r2, #3
 8006bb0:	d18c      	bne.n	8006acc <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bb2:	4b4c      	ldr	r3, [pc, #304]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f013 0f04 	tst.w	r3, #4
 8006bba:	d003      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x178>
 8006bbc:	68e3      	ldr	r3, [r4, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 823b 	beq.w	800703a <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bc4:	4a47      	ldr	r2, [pc, #284]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	f023 0319 	bic.w	r3, r3, #25
 8006bcc:	68e1      	ldr	r1, [r4, #12]
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8006bd2:	f7fd ff2d 	bl	8004a30 <HAL_GetTick>
 8006bd6:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bd8:	4b42      	ldr	r3, [pc, #264]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f013 0f04 	tst.w	r3, #4
 8006be0:	d106      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006be2:	f7fd ff25 	bl	8004a30 <HAL_GetTick>
 8006be6:	1b40      	subs	r0, r0, r5
 8006be8:	2802      	cmp	r0, #2
 8006bea:	d9f5      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 8006bec:	2003      	movs	r0, #3
 8006bee:	e229      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf0:	4a3c      	ldr	r2, [pc, #240]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006bf2:	6853      	ldr	r3, [r2, #4]
 8006bf4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bf8:	6921      	ldr	r1, [r4, #16]
 8006bfa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006bfe:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	f013 0f10 	tst.w	r3, #16
 8006c06:	d051      	beq.n	8006cac <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c08:	4a36      	ldr	r2, [pc, #216]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c0a:	6913      	ldr	r3, [r2, #16]
 8006c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c10:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d039      	beq.n	8006c8a <HAL_RCC_OscConfig+0x23e>
 8006c16:	2b18      	cmp	r3, #24
 8006c18:	d033      	beq.n	8006c82 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c1a:	69e3      	ldr	r3, [r4, #28]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d06c      	beq.n	8006cfa <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c20:	4a30      	ldr	r2, [pc, #192]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2a:	f7fd ff01 	bl	8004a30 <HAL_GetTick>
 8006c2e:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c30:	4b2c      	ldr	r3, [pc, #176]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c38:	d156      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c3a:	f7fd fef9 	bl	8004a30 <HAL_GetTick>
 8006c3e:	1b40      	subs	r0, r0, r5
 8006c40:	2802      	cmp	r0, #2
 8006c42:	d9f5      	bls.n	8006c30 <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 8006c44:	2003      	movs	r0, #3
 8006c46:	e1fd      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c48:	4a26      	ldr	r2, [pc, #152]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c4a:	6853      	ldr	r3, [r2, #4]
 8006c4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c50:	6921      	ldr	r1, [r4, #16]
 8006c52:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c56:	6053      	str	r3, [r2, #4]
 8006c58:	e7d2      	b.n	8006c00 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 8006c5a:	4a22      	ldr	r2, [pc, #136]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c5c:	6813      	ldr	r3, [r2, #0]
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c64:	f7fd fee4 	bl	8004a30 <HAL_GetTick>
 8006c68:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f013 0f04 	tst.w	r3, #4
 8006c72:	d0c5      	beq.n	8006c00 <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c74:	f7fd fedc 	bl	8004a30 <HAL_GetTick>
 8006c78:	1b40      	subs	r0, r0, r5
 8006c7a:	2802      	cmp	r0, #2
 8006c7c:	d9f5      	bls.n	8006c6a <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 8006c7e:	2003      	movs	r0, #3
 8006c80:	e1e0      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c82:	f002 0203 	and.w	r2, r2, #3
 8006c86:	2a01      	cmp	r2, #1
 8006c88:	d1c7      	bne.n	8006c1a <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c8a:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c92:	d003      	beq.n	8006c9c <HAL_RCC_OscConfig+0x250>
 8006c94:	69e3      	ldr	r3, [r4, #28]
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	f040 81d1 	bne.w	800703e <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c9c:	4a11      	ldr	r2, [pc, #68]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006c9e:	68d3      	ldr	r3, [r2, #12]
 8006ca0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006ca4:	6a21      	ldr	r1, [r4, #32]
 8006ca6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006caa:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	f013 0f08 	tst.w	r3, #8
 8006cb2:	d04a      	beq.n	8006d4a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cb4:	6963      	ldr	r3, [r4, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d033      	beq.n	8006d22 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cba:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006cbc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc4:	f7fd feb4 	bl	8004a30 <HAL_GetTick>
 8006cc8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_RCC_OscConfig+0x298>)
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cce:	f013 0f02 	tst.w	r3, #2
 8006cd2:	d13a      	bne.n	8006d4a <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd4:	f7fd feac 	bl	8004a30 <HAL_GetTick>
 8006cd8:	1b40      	subs	r0, r0, r5
 8006cda:	2802      	cmp	r0, #2
 8006cdc:	d9f5      	bls.n	8006cca <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 8006cde:	2003      	movs	r0, #3
 8006ce0:	e1b0      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 8006ce2:	bf00      	nop
 8006ce4:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ce8:	4a8c      	ldr	r2, [pc, #560]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006cea:	68d3      	ldr	r3, [r2, #12]
 8006cec:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006cf0:	6a21      	ldr	r1, [r4, #32]
 8006cf2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cf6:	60d3      	str	r3, [r2, #12]
 8006cf8:	e7d8      	b.n	8006cac <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 8006cfa:	4a88      	ldr	r2, [pc, #544]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d02:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006d04:	f7fd fe94 	bl	8004a30 <HAL_GetTick>
 8006d08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d0a:	4b84      	ldr	r3, [pc, #528]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d12:	d0cb      	beq.n	8006cac <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d14:	f7fd fe8c 	bl	8004a30 <HAL_GetTick>
 8006d18:	1b40      	subs	r0, r0, r5
 8006d1a:	2802      	cmp	r0, #2
 8006d1c:	d9f5      	bls.n	8006d0a <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8006d1e:	2003      	movs	r0, #3
 8006d20:	e190      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d22:	4a7e      	ldr	r2, [pc, #504]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006d24:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2c:	f7fd fe80 	bl	8004a30 <HAL_GetTick>
 8006d30:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d32:	4b7a      	ldr	r3, [pc, #488]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d36:	f013 0f02 	tst.w	r3, #2
 8006d3a:	d006      	beq.n	8006d4a <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d3c:	f7fd fe78 	bl	8004a30 <HAL_GetTick>
 8006d40:	1b40      	subs	r0, r0, r5
 8006d42:	2802      	cmp	r0, #2
 8006d44:	d9f5      	bls.n	8006d32 <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 8006d46:	2003      	movs	r0, #3
 8006d48:	e17c      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	f013 0f20 	tst.w	r3, #32
 8006d50:	d029      	beq.n	8006da6 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d52:	69a3      	ldr	r3, [r4, #24]
 8006d54:	b19b      	cbz	r3, 8006d7e <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d56:	4a71      	ldr	r2, [pc, #452]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006d58:	6813      	ldr	r3, [r2, #0]
 8006d5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d60:	f7fd fe66 	bl	8004a30 <HAL_GetTick>
 8006d64:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d66:	4b6d      	ldr	r3, [pc, #436]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006d6e:	d11a      	bne.n	8006da6 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d70:	f7fd fe5e 	bl	8004a30 <HAL_GetTick>
 8006d74:	1b40      	subs	r0, r0, r5
 8006d76:	2802      	cmp	r0, #2
 8006d78:	d9f5      	bls.n	8006d66 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 8006d7a:	2003      	movs	r0, #3
 8006d7c:	e162      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d7e:	4a67      	ldr	r2, [pc, #412]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006d80:	6813      	ldr	r3, [r2, #0]
 8006d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d88:	f7fd fe52 	bl	8004a30 <HAL_GetTick>
 8006d8c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d8e:	4b63      	ldr	r3, [pc, #396]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006d96:	d006      	beq.n	8006da6 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d98:	f7fd fe4a 	bl	8004a30 <HAL_GetTick>
 8006d9c:	1b40      	subs	r0, r0, r5
 8006d9e:	2802      	cmp	r0, #2
 8006da0:	d9f5      	bls.n	8006d8e <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 8006da2:	2003      	movs	r0, #3
 8006da4:	e14e      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f013 0f04 	tst.w	r3, #4
 8006dac:	d122      	bne.n	8006df4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8146 	beq.w	8007042 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006db6:	4a59      	ldr	r2, [pc, #356]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006db8:	6912      	ldr	r2, [r2, #16]
 8006dba:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006dbe:	2a18      	cmp	r2, #24
 8006dc0:	f000 810e 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	f000 8094 	beq.w	8006ef2 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dca:	4a54      	ldr	r2, [pc, #336]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006dcc:	6813      	ldr	r3, [r2, #0]
 8006dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fd fe2c 	bl	8004a30 <HAL_GetTick>
 8006dd8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dda:	4b50      	ldr	r3, [pc, #320]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006de2:	f000 80fb 	beq.w	8006fdc <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de6:	f7fd fe23 	bl	8004a30 <HAL_GetTick>
 8006dea:	1b00      	subs	r0, r0, r4
 8006dec:	2802      	cmp	r0, #2
 8006dee:	d9f4      	bls.n	8006dda <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 8006df0:	2003      	movs	r0, #3
 8006df2:	e127      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 8006df4:	4a4a      	ldr	r2, [pc, #296]	; (8006f20 <HAL_RCC_OscConfig+0x4d4>)
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006dfe:	f7fd fe17 	bl	8004a30 <HAL_GetTick>
 8006e02:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e04:	4b46      	ldr	r3, [pc, #280]	; (8006f20 <HAL_RCC_OscConfig+0x4d4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006e0c:	d106      	bne.n	8006e1c <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e0e:	f7fd fe0f 	bl	8004a30 <HAL_GetTick>
 8006e12:	1b40      	subs	r0, r0, r5
 8006e14:	2864      	cmp	r0, #100	; 0x64
 8006e16:	d9f5      	bls.n	8006e04 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 8006e18:	2003      	movs	r0, #3
 8006e1a:	e113      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d00e      	beq.n	8006e40 <HAL_RCC_OscConfig+0x3f4>
 8006e22:	bb33      	cbnz	r3, 8006e72 <HAL_RCC_OscConfig+0x426>
 8006e24:	4b3d      	ldr	r3, [pc, #244]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	671a      	str	r2, [r3, #112]	; 0x70
 8006e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e34:	671a      	str	r2, [r3, #112]	; 0x70
 8006e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e38:	f022 0204 	bic.w	r2, r2, #4
 8006e3c:	671a      	str	r2, [r3, #112]	; 0x70
 8006e3e:	e004      	b.n	8006e4a <HAL_RCC_OscConfig+0x3fe>
 8006e40:	4a36      	ldr	r2, [pc, #216]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006e42:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d03e      	beq.n	8006ece <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 8006e50:	f7fd fdee 	bl	8004a30 <HAL_GetTick>
 8006e54:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e56:	4b31      	ldr	r3, [pc, #196]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5a:	f013 0f02 	tst.w	r3, #2
 8006e5e:	d1a6      	bne.n	8006dae <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e60:	f7fd fde6 	bl	8004a30 <HAL_GetTick>
 8006e64:	1b40      	subs	r0, r0, r5
 8006e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e6a:	4298      	cmp	r0, r3
 8006e6c:	d9f3      	bls.n	8006e56 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8006e6e:	2003      	movs	r0, #3
 8006e70:	e0e8      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d00f      	beq.n	8006e96 <HAL_RCC_OscConfig+0x44a>
 8006e76:	2b85      	cmp	r3, #133	; 0x85
 8006e78:	d01b      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x466>
 8006e7a:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006e7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e7e:	f022 0201 	bic.w	r2, r2, #1
 8006e82:	671a      	str	r2, [r3, #112]	; 0x70
 8006e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e86:	f022 0204 	bic.w	r2, r2, #4
 8006e8a:	671a      	str	r2, [r3, #112]	; 0x70
 8006e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e92:	671a      	str	r2, [r3, #112]	; 0x70
 8006e94:	e7d9      	b.n	8006e4a <HAL_RCC_OscConfig+0x3fe>
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006e98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e9a:	f042 0204 	orr.w	r2, r2, #4
 8006e9e:	671a      	str	r2, [r3, #112]	; 0x70
 8006ea0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ea6:	671a      	str	r2, [r3, #112]	; 0x70
 8006ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	671a      	str	r2, [r3, #112]	; 0x70
 8006eb0:	e7cb      	b.n	8006e4a <HAL_RCC_OscConfig+0x3fe>
 8006eb2:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eb6:	f042 0204 	orr.w	r2, r2, #4
 8006eba:	671a      	str	r2, [r3, #112]	; 0x70
 8006ebc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ebe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ec2:	671a      	str	r2, [r3, #112]	; 0x70
 8006ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	671a      	str	r2, [r3, #112]	; 0x70
 8006ecc:	e7bd      	b.n	8006e4a <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 8006ece:	f7fd fdaf 	bl	8004a30 <HAL_GetTick>
 8006ed2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ed4:	4b11      	ldr	r3, [pc, #68]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	f013 0f02 	tst.w	r3, #2
 8006edc:	f43f af67 	beq.w	8006dae <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee0:	f7fd fda6 	bl	8004a30 <HAL_GetTick>
 8006ee4:	1b40      	subs	r0, r0, r5
 8006ee6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006eea:	4298      	cmp	r0, r3
 8006eec:	d9f2      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 8006eee:	2003      	movs	r0, #3
 8006ef0:	e0a8      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 8006ef2:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006efc:	f7fd fd98 	bl	8004a30 <HAL_GetTick>
 8006f00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <HAL_RCC_OscConfig+0x4d0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006f0a:	d00b      	beq.n	8006f24 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f0c:	f7fd fd90 	bl	8004a30 <HAL_GetTick>
 8006f10:	1b40      	subs	r0, r0, r5
 8006f12:	2802      	cmp	r0, #2
 8006f14:	d9f5      	bls.n	8006f02 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8006f16:	2003      	movs	r0, #3
 8006f18:	e094      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 8006f1a:	bf00      	nop
 8006f1c:	58024400 	.word	0x58024400
 8006f20:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f24:	4b4f      	ldr	r3, [pc, #316]	; (8007064 <HAL_RCC_OscConfig+0x618>)
 8006f26:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006f28:	4a4f      	ldr	r2, [pc, #316]	; (8007068 <HAL_RCC_OscConfig+0x61c>)
 8006f2a:	400a      	ands	r2, r1
 8006f2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006f2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006f30:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006f34:	430a      	orrs	r2, r1
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28
 8006f38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f3a:	3a01      	subs	r2, #1
 8006f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f42:	3901      	subs	r1, #1
 8006f44:	0249      	lsls	r1, r1, #9
 8006f46:	b289      	uxth	r1, r1
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f4c:	3901      	subs	r1, #1
 8006f4e:	0409      	lsls	r1, r1, #16
 8006f50:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006f54:	430a      	orrs	r2, r1
 8006f56:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f58:	3901      	subs	r1, #1
 8006f5a:	0609      	lsls	r1, r1, #24
 8006f5c:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006f60:	430a      	orrs	r2, r1
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f6e:	4a3f      	ldr	r2, [pc, #252]	; (800706c <HAL_RCC_OscConfig+0x620>)
 8006f70:	400a      	ands	r2, r1
 8006f72:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f74:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006f78:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7c:	f022 020c 	bic.w	r2, r2, #12
 8006f80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f82:	430a      	orrs	r2, r1
 8006f84:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	f022 0202 	bic.w	r2, r2, #2
 8006f8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f98:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006fa0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006fa8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006fb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006fba:	f7fd fd39 	bl	8004a30 <HAL_GetTick>
 8006fbe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fc0:	4b28      	ldr	r3, [pc, #160]	; (8007064 <HAL_RCC_OscConfig+0x618>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fca:	f7fd fd31 	bl	8004a30 <HAL_GetTick>
 8006fce:	1b00      	subs	r0, r0, r4
 8006fd0:	2802      	cmp	r0, #2
 8006fd2:	d9f5      	bls.n	8006fc0 <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 8006fd4:	2003      	movs	r0, #3
 8006fd6:	e035      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e033      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e031      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fe0:	4920      	ldr	r1, [pc, #128]	; (8007064 <HAL_RCC_OscConfig+0x618>)
 8006fe2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006fe4:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d02d      	beq.n	8007046 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fea:	f002 0303 	and.w	r3, r2, #3
 8006fee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	d12a      	bne.n	800704a <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ff4:	f3c2 1205 	ubfx	r2, r2, #4, #6
 8006ff8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d127      	bne.n	800704e <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ffe:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8007002:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007004:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007006:	429a      	cmp	r2, r3
 8007008:	d123      	bne.n	8007052 <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800700a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800700e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007010:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007012:	429a      	cmp	r2, r3
 8007014:	d11f      	bne.n	8007056 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007016:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800701a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800701c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800701e:	429a      	cmp	r2, r3
 8007020:	d11b      	bne.n	800705a <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007022:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8007026:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007028:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800702a:	4298      	cmp	r0, r3
 800702c:	d117      	bne.n	800705e <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800702e:	2000      	movs	r0, #0
 8007030:	e008      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 8007032:	2001      	movs	r0, #1
}
 8007034:	4770      	bx	lr
        return HAL_ERROR;
 8007036:	2001      	movs	r0, #1
 8007038:	e004      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800703a:	2001      	movs	r0, #1
 800703c:	e002      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800703e:	2001      	movs	r0, #1
 8007040:	e000      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 8007042:	2000      	movs	r0, #0
}
 8007044:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8007046:	2001      	movs	r0, #1
 8007048:	e7fc      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 800704a:	2001      	movs	r0, #1
 800704c:	e7fa      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 800704e:	2001      	movs	r0, #1
 8007050:	e7f8      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 8007052:	2001      	movs	r0, #1
 8007054:	e7f6      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 8007056:	2001      	movs	r0, #1
 8007058:	e7f4      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 800705a:	2001      	movs	r0, #1
 800705c:	e7f2      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 800705e:	2001      	movs	r0, #1
 8007060:	e7f0      	b.n	8007044 <HAL_RCC_OscConfig+0x5f8>
 8007062:	bf00      	nop
 8007064:	58024400 	.word	0x58024400
 8007068:	fffffc0c 	.word	0xfffffc0c
 800706c:	ffff0007 	.word	0xffff0007

08007070 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007070:	4b74      	ldr	r3, [pc, #464]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007078:	2b10      	cmp	r3, #16
 800707a:	f000 80de 	beq.w	800723a <HAL_RCC_GetSysClockFreq+0x1ca>
 800707e:	2b18      	cmp	r3, #24
 8007080:	d010      	beq.n	80070a4 <HAL_RCC_GetSysClockFreq+0x34>
 8007082:	b10b      	cbz	r3, 8007088 <HAL_RCC_GetSysClockFreq+0x18>
 8007084:	4870      	ldr	r0, [pc, #448]	; (8007248 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8007086:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007088:	4b6e      	ldr	r3, [pc, #440]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f013 0f20 	tst.w	r3, #32
 8007090:	f000 80d5 	beq.w	800723e <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007094:	4b6b      	ldr	r3, [pc, #428]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800709c:	4b6b      	ldr	r3, [pc, #428]	; (800724c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800709e:	fa23 f000 	lsr.w	r0, r3, r0
 80070a2:	4770      	bx	lr
{
 80070a4:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a6:	4a67      	ldr	r2, [pc, #412]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070aa:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070ae:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80070b0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80070b6:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80070bc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80070c0:	fb0c f303 	mul.w	r3, ip, r3
 80070c4:	ee07 3a90 	vmov	s15, r3
 80070c8:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80070cc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80070d0:	f000 8093 	beq.w	80071fa <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 80070d4:	2901      	cmp	r1, #1
 80070d6:	d065      	beq.n	80071a4 <HAL_RCC_GetSysClockFreq+0x134>
 80070d8:	2902      	cmp	r1, #2
 80070da:	f000 8091 	beq.w	8007200 <HAL_RCC_GetSysClockFreq+0x190>
 80070de:	b1e1      	cbz	r1, 800711a <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070e0:	ee07 0a10 	vmov	s14, r0
 80070e4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80070e8:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8007250 <HAL_RCC_GetSysClockFreq+0x1e0>
 80070ec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80070f0:	4b54      	ldr	r3, [pc, #336]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f8:	ee06 3a90 	vmov	s13, r3
 80070fc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007100:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8007254 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007104:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007114:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007118:	e060      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	f013 0f20 	tst.w	r3, #32
 8007120:	d023      	beq.n	800716a <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007122:	4611      	mov	r1, r2
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800712a:	4b48      	ldr	r3, [pc, #288]	; (800724c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800712c:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800712e:	ee07 3a10 	vmov	s14, r3
 8007132:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007136:	ee07 0a10 	vmov	s14, r0
 800713a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800713e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007142:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007148:	ee06 3a90 	vmov	s13, r3
 800714c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007150:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007254 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007154:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007168:	e038      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800716a:	ee07 0a10 	vmov	s14, r0
 800716e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007172:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8007258 <HAL_RCC_GetSysClockFreq+0x1e8>
 8007176:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800717a:	4b32      	ldr	r3, [pc, #200]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee06 3a90 	vmov	s13, r3
 8007186:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800718a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007254 <HAL_RCC_GetSysClockFreq+0x1e4>
 800718e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071a2:	e01b      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071a4:	ee07 0a10 	vmov	s14, r0
 80071a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80071ac:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8007250 <HAL_RCC_GetSysClockFreq+0x1e0>
 80071b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071b4:	4b23      	ldr	r3, [pc, #140]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071bc:	ee06 3a90 	vmov	s13, r3
 80071c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071c4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8007254 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d8:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80071e4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80071f2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80071f6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80071fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fe:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007200:	ee07 0a10 	vmov	s14, r0
 8007204:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007208:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800725c <HAL_RCC_GetSysClockFreq+0x1ec>
 800720c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007218:	ee06 3a90 	vmov	s13, r3
 800721c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007220:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8007254 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007224:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007234:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007238:	e7d0      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800723a:	4809      	ldr	r0, [pc, #36]	; (8007260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800723c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800723e:	4803      	ldr	r0, [pc, #12]	; (800724c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	58024400 	.word	0x58024400
 8007248:	003d0900 	.word	0x003d0900
 800724c:	03d09000 	.word	0x03d09000
 8007250:	4a742400 	.word	0x4a742400
 8007254:	39000000 	.word	0x39000000
 8007258:	4c742400 	.word	0x4c742400
 800725c:	4bb71b00 	.word	0x4bb71b00
 8007260:	016e3600 	.word	0x016e3600

08007264 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007264:	2800      	cmp	r0, #0
 8007266:	f000 8132 	beq.w	80074ce <HAL_RCC_ClockConfig+0x26a>
{
 800726a:	b570      	push	{r4, r5, r6, lr}
 800726c:	460d      	mov	r5, r1
 800726e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007270:	4b9b      	ldr	r3, [pc, #620]	; (80074e0 <HAL_RCC_ClockConfig+0x27c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	428b      	cmp	r3, r1
 800727a:	d20b      	bcs.n	8007294 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727c:	4a98      	ldr	r2, [pc, #608]	; (80074e0 <HAL_RCC_ClockConfig+0x27c>)
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	f023 030f 	bic.w	r3, r3, #15
 8007284:	430b      	orrs	r3, r1
 8007286:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007288:	6813      	ldr	r3, [r2, #0]
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	428b      	cmp	r3, r1
 8007290:	f040 811f 	bne.w	80074d2 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	f013 0f04 	tst.w	r3, #4
 800729a:	d00c      	beq.n	80072b6 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800729c:	6922      	ldr	r2, [r4, #16]
 800729e:	4b91      	ldr	r3, [pc, #580]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d905      	bls.n	80072b6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072aa:	498e      	ldr	r1, [pc, #568]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80072ac:	698b      	ldr	r3, [r1, #24]
 80072ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b2:	431a      	orrs	r2, r3
 80072b4:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	f013 0f08 	tst.w	r3, #8
 80072bc:	d00c      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80072be:	6962      	ldr	r2, [r4, #20]
 80072c0:	4b88      	ldr	r3, [pc, #544]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d905      	bls.n	80072d8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072cc:	4985      	ldr	r1, [pc, #532]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80072ce:	69cb      	ldr	r3, [r1, #28]
 80072d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d4:	431a      	orrs	r2, r3
 80072d6:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	f013 0f10 	tst.w	r3, #16
 80072de:	d00c      	beq.n	80072fa <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80072e0:	69a2      	ldr	r2, [r4, #24]
 80072e2:	4b80      	ldr	r3, [pc, #512]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d905      	bls.n	80072fa <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072ee:	497d      	ldr	r1, [pc, #500]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80072f0:	69cb      	ldr	r3, [r1, #28]
 80072f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072f6:	431a      	orrs	r2, r3
 80072f8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	f013 0f20 	tst.w	r3, #32
 8007300:	d00c      	beq.n	800731c <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007302:	69e2      	ldr	r2, [r4, #28]
 8007304:	4b77      	ldr	r3, [pc, #476]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800730c:	429a      	cmp	r2, r3
 800730e:	d905      	bls.n	800731c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007310:	4974      	ldr	r1, [pc, #464]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007312:	6a0b      	ldr	r3, [r1, #32]
 8007314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007318:	431a      	orrs	r2, r3
 800731a:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	f013 0f02 	tst.w	r3, #2
 8007322:	d00c      	beq.n	800733e <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007324:	68e2      	ldr	r2, [r4, #12]
 8007326:	4b6f      	ldr	r3, [pc, #444]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	429a      	cmp	r2, r3
 8007330:	d905      	bls.n	800733e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007332:	496c      	ldr	r1, [pc, #432]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007334:	698b      	ldr	r3, [r1, #24]
 8007336:	f023 030f 	bic.w	r3, r3, #15
 800733a:	431a      	orrs	r2, r3
 800733c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f013 0f01 	tst.w	r3, #1
 8007344:	d041      	beq.n	80073ca <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007346:	4a67      	ldr	r2, [pc, #412]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007348:	6993      	ldr	r3, [r2, #24]
 800734a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800734e:	68a1      	ldr	r1, [r4, #8]
 8007350:	430b      	orrs	r3, r1
 8007352:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007354:	6863      	ldr	r3, [r4, #4]
 8007356:	2b02      	cmp	r3, #2
 8007358:	d00a      	beq.n	8007370 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800735a:	2b03      	cmp	r3, #3
 800735c:	d027      	beq.n	80073ae <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800735e:	2b01      	cmp	r3, #1
 8007360:	d02c      	beq.n	80073bc <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007362:	4a60      	ldr	r2, [pc, #384]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	f012 0f04 	tst.w	r2, #4
 800736a:	d106      	bne.n	800737a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800736c:	2001      	movs	r0, #1
 800736e:	e0ad      	b.n	80074cc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007370:	6812      	ldr	r2, [r2, #0]
 8007372:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007376:	f000 80ae 	beq.w	80074d6 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800737a:	495a      	ldr	r1, [pc, #360]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800737c:	690a      	ldr	r2, [r1, #16]
 800737e:	f022 0207 	bic.w	r2, r2, #7
 8007382:	4313      	orrs	r3, r2
 8007384:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8007386:	f7fd fb53 	bl	8004a30 <HAL_GetTick>
 800738a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738c:	4b55      	ldr	r3, [pc, #340]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007394:	6862      	ldr	r2, [r4, #4]
 8007396:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800739a:	d016      	beq.n	80073ca <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800739c:	f7fd fb48 	bl	8004a30 <HAL_GetTick>
 80073a0:	1b80      	subs	r0, r0, r6
 80073a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80073a6:	4298      	cmp	r0, r3
 80073a8:	d9f0      	bls.n	800738c <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80073aa:	2003      	movs	r0, #3
 80073ac:	e08e      	b.n	80074cc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073ae:	4a4d      	ldr	r2, [pc, #308]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80073b6:	d1e0      	bne.n	800737a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073b8:	2001      	movs	r0, #1
 80073ba:	e087      	b.n	80074cc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073bc:	4a49      	ldr	r2, [pc, #292]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80073c4:	d1d9      	bne.n	800737a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073c6:	2001      	movs	r0, #1
 80073c8:	e080      	b.n	80074cc <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	f013 0f02 	tst.w	r3, #2
 80073d0:	d00c      	beq.n	80073ec <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80073d2:	68e2      	ldr	r2, [r4, #12]
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	429a      	cmp	r2, r3
 80073de:	d205      	bcs.n	80073ec <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e0:	4940      	ldr	r1, [pc, #256]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 80073e2:	698b      	ldr	r3, [r1, #24]
 80073e4:	f023 030f 	bic.w	r3, r3, #15
 80073e8:	431a      	orrs	r2, r3
 80073ea:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073ec:	4b3c      	ldr	r3, [pc, #240]	; (80074e0 <HAL_RCC_ClockConfig+0x27c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	d90a      	bls.n	800740e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f8:	4a39      	ldr	r2, [pc, #228]	; (80074e0 <HAL_RCC_ClockConfig+0x27c>)
 80073fa:	6813      	ldr	r3, [r2, #0]
 80073fc:	f023 030f 	bic.w	r3, r3, #15
 8007400:	432b      	orrs	r3, r5
 8007402:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007404:	6813      	ldr	r3, [r2, #0]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	42ab      	cmp	r3, r5
 800740c:	d165      	bne.n	80074da <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	f013 0f04 	tst.w	r3, #4
 8007414:	d00c      	beq.n	8007430 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007416:	6922      	ldr	r2, [r4, #16]
 8007418:	4b32      	ldr	r3, [pc, #200]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007420:	429a      	cmp	r2, r3
 8007422:	d205      	bcs.n	8007430 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007424:	492f      	ldr	r1, [pc, #188]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007426:	698b      	ldr	r3, [r1, #24]
 8007428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742c:	431a      	orrs	r2, r3
 800742e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	f013 0f08 	tst.w	r3, #8
 8007436:	d00c      	beq.n	8007452 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007438:	6962      	ldr	r2, [r4, #20]
 800743a:	4b2a      	ldr	r3, [pc, #168]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007442:	429a      	cmp	r2, r3
 8007444:	d205      	bcs.n	8007452 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007446:	4927      	ldr	r1, [pc, #156]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007448:	69cb      	ldr	r3, [r1, #28]
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	431a      	orrs	r2, r3
 8007450:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f013 0f10 	tst.w	r3, #16
 8007458:	d00c      	beq.n	8007474 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800745a:	69a2      	ldr	r2, [r4, #24]
 800745c:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007464:	429a      	cmp	r2, r3
 8007466:	d205      	bcs.n	8007474 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007468:	491e      	ldr	r1, [pc, #120]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800746a:	69cb      	ldr	r3, [r1, #28]
 800746c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007470:	431a      	orrs	r2, r3
 8007472:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	f013 0f20 	tst.w	r3, #32
 800747a:	d00c      	beq.n	8007496 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800747c:	69e2      	ldr	r2, [r4, #28]
 800747e:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007486:	429a      	cmp	r2, r3
 8007488:	d205      	bcs.n	8007496 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800748a:	4916      	ldr	r1, [pc, #88]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800748c:	6a0b      	ldr	r3, [r1, #32]
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	431a      	orrs	r2, r3
 8007494:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007496:	f7ff fdeb 	bl	8007070 <HAL_RCC_GetSysClockFreq>
 800749a:	4912      	ldr	r1, [pc, #72]	; (80074e4 <HAL_RCC_ClockConfig+0x280>)
 800749c:	698b      	ldr	r3, [r1, #24]
 800749e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80074a2:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <HAL_RCC_ClockConfig+0x284>)
 80074a4:	5cd3      	ldrb	r3, [r2, r3]
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80074ac:	698b      	ldr	r3, [r1, #24]
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	5cd3      	ldrb	r3, [r2, r3]
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	fa20 f303 	lsr.w	r3, r0, r3
 80074bc:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <HAL_RCC_ClockConfig+0x288>)
 80074be:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <HAL_RCC_ClockConfig+0x28c>)
 80074c2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80074c4:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <HAL_RCC_ClockConfig+0x290>)
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	f7fa fe22 	bl	8002110 <HAL_InitTick>
}
 80074cc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80074ce:	2001      	movs	r0, #1
}
 80074d0:	4770      	bx	lr
      return HAL_ERROR;
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7fa      	b.n	80074cc <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 80074d6:	2001      	movs	r0, #1
 80074d8:	e7f8      	b.n	80074cc <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80074da:	2001      	movs	r0, #1
 80074dc:	e7f6      	b.n	80074cc <HAL_RCC_ClockConfig+0x268>
 80074de:	bf00      	nop
 80074e0:	52002000 	.word	0x52002000
 80074e4:	58024400 	.word	0x58024400
 80074e8:	08019f4c 	.word	0x08019f4c
 80074ec:	24000040 	.word	0x24000040
 80074f0:	2400003c 	.word	0x2400003c
 80074f4:	24000048 	.word	0x24000048

080074f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80074fa:	f7ff fdb9 	bl	8007070 <HAL_RCC_GetSysClockFreq>
 80074fe:	4a0b      	ldr	r2, [pc, #44]	; (800752c <HAL_RCC_GetHCLKFreq+0x34>)
 8007500:	6993      	ldr	r3, [r2, #24]
 8007502:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007506:	490a      	ldr	r1, [pc, #40]	; (8007530 <HAL_RCC_GetHCLKFreq+0x38>)
 8007508:	5ccb      	ldrb	r3, [r1, r3]
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007512:	6992      	ldr	r2, [r2, #24]
 8007514:	f002 020f 	and.w	r2, r2, #15
 8007518:	5c88      	ldrb	r0, [r1, r2]
 800751a:	f000 001f 	and.w	r0, r0, #31
 800751e:	fa23 f000 	lsr.w	r0, r3, r0
 8007522:	4a04      	ldr	r2, [pc, #16]	; (8007534 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007524:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007526:	4a04      	ldr	r2, [pc, #16]	; (8007538 <HAL_RCC_GetHCLKFreq+0x40>)
 8007528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800752a:	bd08      	pop	{r3, pc}
 800752c:	58024400 	.word	0x58024400
 8007530:	08019f4c 	.word	0x08019f4c
 8007534:	24000040 	.word	0x24000040
 8007538:	2400003c 	.word	0x2400003c

0800753c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800753c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800753e:	f7ff ffdb 	bl	80074f8 <HAL_RCC_GetHCLKFreq>
 8007542:	4b05      	ldr	r3, [pc, #20]	; (8007558 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800754a:	4a04      	ldr	r2, [pc, #16]	; (800755c <HAL_RCC_GetPCLK1Freq+0x20>)
 800754c:	5cd3      	ldrb	r3, [r2, r3]
 800754e:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8007552:	40d8      	lsrs	r0, r3
 8007554:	bd08      	pop	{r3, pc}
 8007556:	bf00      	nop
 8007558:	58024400 	.word	0x58024400
 800755c:	08019f4c 	.word	0x08019f4c

08007560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007560:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007562:	f7ff ffc9 	bl	80074f8 <HAL_RCC_GetHCLKFreq>
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800756e:	4a04      	ldr	r2, [pc, #16]	; (8007580 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007570:	5cd3      	ldrb	r3, [r2, r3]
 8007572:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8007576:	40d8      	lsrs	r0, r3
 8007578:	bd08      	pop	{r3, pc}
 800757a:	bf00      	nop
 800757c:	58024400 	.word	0x58024400
 8007580:	08019f4c 	.word	0x08019f4c

08007584 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007584:	233f      	movs	r3, #63	; 0x3f
 8007586:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007588:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <HAL_RCC_GetClockConfig+0x4c>)
 800758a:	691a      	ldr	r2, [r3, #16]
 800758c:	f002 0207 	and.w	r2, r2, #7
 8007590:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8007592:	699a      	ldr	r2, [r3, #24]
 8007594:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8007598:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	f002 020f 	and.w	r2, r2, #15
 80075a0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80075a2:	699a      	ldr	r2, [r3, #24]
 80075a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075a8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075b0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80075b8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c0:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075c2:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <HAL_RCC_GetClockConfig+0x50>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	600b      	str	r3, [r1, #0]
}
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
 80075d4:	52002000 	.word	0x52002000

080075d8 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075d8:	4b40      	ldr	r3, [pc, #256]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d079      	beq.n	80076d8 <RCCEx_PLL2_Config+0x100>
{
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	4605      	mov	r5, r0
 80075e8:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075ea:	4a3c      	ldr	r2, [pc, #240]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 80075ec:	6813      	ldr	r3, [r2, #0]
 80075ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f4:	f7fd fa1c 	bl	8004a30 <HAL_GetTick>
 80075f8:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075fa:	4b38      	ldr	r3, [pc, #224]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007602:	d006      	beq.n	8007612 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007604:	f7fd fa14 	bl	8004a30 <HAL_GetTick>
 8007608:	1b03      	subs	r3, r0, r4
 800760a:	2b02      	cmp	r3, #2
 800760c:	d9f5      	bls.n	80075fa <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800760e:	2003      	movs	r0, #3

  }


  return status;
}
 8007610:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007612:	4b32      	ldr	r3, [pc, #200]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 8007614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007616:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800761a:	6829      	ldr	r1, [r5, #0]
 800761c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8007620:	629a      	str	r2, [r3, #40]	; 0x28
 8007622:	686a      	ldr	r2, [r5, #4]
 8007624:	3a01      	subs	r2, #1
 8007626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800762a:	68a9      	ldr	r1, [r5, #8]
 800762c:	3901      	subs	r1, #1
 800762e:	0249      	lsls	r1, r1, #9
 8007630:	b289      	uxth	r1, r1
 8007632:	430a      	orrs	r2, r1
 8007634:	68e9      	ldr	r1, [r5, #12]
 8007636:	3901      	subs	r1, #1
 8007638:	0409      	lsls	r1, r1, #16
 800763a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800763e:	430a      	orrs	r2, r1
 8007640:	6929      	ldr	r1, [r5, #16]
 8007642:	3901      	subs	r1, #1
 8007644:	0609      	lsls	r1, r1, #24
 8007646:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800764a:	430a      	orrs	r2, r1
 800764c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007654:	6969      	ldr	r1, [r5, #20]
 8007656:	430a      	orrs	r2, r1
 8007658:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	f022 0220 	bic.w	r2, r2, #32
 8007660:	69a9      	ldr	r1, [r5, #24]
 8007662:	430a      	orrs	r2, r1
 8007664:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	f022 0210 	bic.w	r2, r2, #16
 800766c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800766e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007670:	4a1b      	ldr	r2, [pc, #108]	; (80076e0 <RCCEx_PLL2_Config+0x108>)
 8007672:	400a      	ands	r2, r1
 8007674:	69e9      	ldr	r1, [r5, #28]
 8007676:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800767a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	f042 0210 	orr.w	r2, r2, #16
 8007682:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007684:	b9c6      	cbnz	r6, 80076b8 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007686:	461a      	mov	r2, r3
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800768e:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8007690:	4a12      	ldr	r2, [pc, #72]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 8007692:	6813      	ldr	r3, [r2, #0]
 8007694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007698:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800769a:	f7fd f9c9 	bl	8004a30 <HAL_GetTick>
 800769e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076a0:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80076a8:	d114      	bne.n	80076d4 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076aa:	f7fd f9c1 	bl	8004a30 <HAL_GetTick>
 80076ae:	1b00      	subs	r0, r0, r4
 80076b0:	2802      	cmp	r0, #2
 80076b2:	d9f5      	bls.n	80076a0 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80076b4:	2003      	movs	r0, #3
 80076b6:	e7ab      	b.n	8007610 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80076b8:	2e01      	cmp	r6, #1
 80076ba:	d005      	beq.n	80076c8 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076bc:	4a07      	ldr	r2, [pc, #28]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 80076be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076c6:	e7e3      	b.n	8007690 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076c8:	4a04      	ldr	r2, [pc, #16]	; (80076dc <RCCEx_PLL2_Config+0x104>)
 80076ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076d2:	e7dd      	b.n	8007690 <RCCEx_PLL2_Config+0xb8>
  return status;
 80076d4:	2000      	movs	r0, #0
 80076d6:	e79b      	b.n	8007610 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80076d8:	2001      	movs	r0, #1
}
 80076da:	4770      	bx	lr
 80076dc:	58024400 	.word	0x58024400
 80076e0:	ffff0007 	.word	0xffff0007

080076e4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e4:	4b40      	ldr	r3, [pc, #256]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d079      	beq.n	80077e4 <RCCEx_PLL3_Config+0x100>
{
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	4605      	mov	r5, r0
 80076f4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076f6:	4a3c      	ldr	r2, [pc, #240]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 80076f8:	6813      	ldr	r3, [r2, #0]
 80076fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007700:	f7fd f996 	bl	8004a30 <HAL_GetTick>
 8007704:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007706:	4b38      	ldr	r3, [pc, #224]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800770e:	d006      	beq.n	800771e <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007710:	f7fd f98e 	bl	8004a30 <HAL_GetTick>
 8007714:	1b03      	subs	r3, r0, r4
 8007716:	2b02      	cmp	r3, #2
 8007718:	d9f5      	bls.n	8007706 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800771a:	2003      	movs	r0, #3

  }


  return status;
}
 800771c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800771e:	4b32      	ldr	r3, [pc, #200]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 8007720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007722:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8007726:	6829      	ldr	r1, [r5, #0]
 8007728:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800772c:	629a      	str	r2, [r3, #40]	; 0x28
 800772e:	686a      	ldr	r2, [r5, #4]
 8007730:	3a01      	subs	r2, #1
 8007732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007736:	68a9      	ldr	r1, [r5, #8]
 8007738:	3901      	subs	r1, #1
 800773a:	0249      	lsls	r1, r1, #9
 800773c:	b289      	uxth	r1, r1
 800773e:	430a      	orrs	r2, r1
 8007740:	68e9      	ldr	r1, [r5, #12]
 8007742:	3901      	subs	r1, #1
 8007744:	0409      	lsls	r1, r1, #16
 8007746:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800774a:	430a      	orrs	r2, r1
 800774c:	6929      	ldr	r1, [r5, #16]
 800774e:	3901      	subs	r1, #1
 8007750:	0609      	lsls	r1, r1, #24
 8007752:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007756:	430a      	orrs	r2, r1
 8007758:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007760:	6969      	ldr	r1, [r5, #20]
 8007762:	430a      	orrs	r2, r1
 8007764:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007768:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800776c:	69a9      	ldr	r1, [r5, #24]
 800776e:	430a      	orrs	r2, r1
 8007770:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007778:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800777a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800777c:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <RCCEx_PLL3_Config+0x108>)
 800777e:	400a      	ands	r2, r1
 8007780:	69e9      	ldr	r1, [r5, #28]
 8007782:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007786:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800778e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007790:	b9c6      	cbnz	r6, 80077c4 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007792:	461a      	mov	r2, r3
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 800779c:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 800779e:	6813      	ldr	r3, [r2, #0]
 80077a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80077a6:	f7fd f943 	bl	8004a30 <HAL_GetTick>
 80077aa:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80077b4:	d114      	bne.n	80077e0 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077b6:	f7fd f93b 	bl	8004a30 <HAL_GetTick>
 80077ba:	1b00      	subs	r0, r0, r4
 80077bc:	2802      	cmp	r0, #2
 80077be:	d9f5      	bls.n	80077ac <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80077c0:	2003      	movs	r0, #3
 80077c2:	e7ab      	b.n	800771c <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80077c4:	2e01      	cmp	r6, #1
 80077c6:	d005      	beq.n	80077d4 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077c8:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 80077ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d2:	e7e3      	b.n	800779c <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077d4:	4a04      	ldr	r2, [pc, #16]	; (80077e8 <RCCEx_PLL3_Config+0x104>)
 80077d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077de:	e7dd      	b.n	800779c <RCCEx_PLL3_Config+0xb8>
  return status;
 80077e0:	2000      	movs	r0, #0
 80077e2:	e79b      	b.n	800771c <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 80077e4:	2001      	movs	r0, #1
}
 80077e6:	4770      	bx	lr
 80077e8:	58024400 	.word	0x58024400
 80077ec:	ffff0007 	.word	0xffff0007

080077f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077f4:	6803      	ldr	r3, [r0, #0]
 80077f6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80077fa:	d030      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80077fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80077fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007802:	d026      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007804:	d80e      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007806:	b1eb      	cbz	r3, 8007844 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800780c:	d107      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800780e:	2102      	movs	r1, #2
 8007810:	3004      	adds	r0, #4
 8007812:	f7ff fee1 	bl	80075d8 <RCCEx_PLL2_Config>
 8007816:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007818:	b145      	cbz	r5, 800782c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800781a:	462e      	mov	r6, r5
 800781c:	e021      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800781e:	2601      	movs	r6, #1
 8007820:	4635      	mov	r5, r6
 8007822:	e01e      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007824:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007828:	d109      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800782a:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800782c:	4a99      	ldr	r2, [pc, #612]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800782e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007830:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007834:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007836:	430b      	orrs	r3, r1
 8007838:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800783a:	2600      	movs	r6, #0
 800783c:	e011      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800783e:	2601      	movs	r6, #1
 8007840:	4635      	mov	r5, r6
 8007842:	e00e      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007844:	4a93      	ldr	r2, [pc, #588]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007846:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800784e:	2500      	movs	r5, #0
 8007850:	e7ec      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007852:	2102      	movs	r1, #2
 8007854:	3024      	adds	r0, #36	; 0x24
 8007856:	f7ff ff45 	bl	80076e4 <RCCEx_PLL3_Config>
 800785a:	4605      	mov	r5, r0
      break;
 800785c:	e7dc      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800785e:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007860:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007868:	d026      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800786a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800786c:	2b04      	cmp	r3, #4
 800786e:	d81f      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8007870:	e8df f003 	tbb	[pc, r3]
 8007874:	08171103 	.word	0x08171103
 8007878:	08          	.byte	0x08
 8007879:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787a:	4a86      	ldr	r2, [pc, #536]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800787c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800787e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007882:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007884:	b9bd      	cbnz	r5, 80078b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007886:	4a83      	ldr	r2, [pc, #524]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007888:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007890:	430b      	orrs	r3, r1
 8007892:	6513      	str	r3, [r2, #80]	; 0x50
 8007894:	e010      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007896:	2100      	movs	r1, #0
 8007898:	1d20      	adds	r0, r4, #4
 800789a:	f7ff fe9d 	bl	80075d8 <RCCEx_PLL2_Config>
 800789e:	4605      	mov	r5, r0
      break;
 80078a0:	e7f0      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078a2:	2100      	movs	r1, #0
 80078a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80078a8:	f7ff ff1c 	bl	80076e4 <RCCEx_PLL3_Config>
 80078ac:	4605      	mov	r5, r0
      break;
 80078ae:	e7e9      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80078b0:	2601      	movs	r6, #1
 80078b2:	4635      	mov	r5, r6
 80078b4:	e000      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80078b6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80078be:	d01d      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 80078c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d039      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80078c6:	d80b      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80078c8:	b38b      	cbz	r3, 800792e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d105      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ce:	2100      	movs	r1, #0
 80078d0:	1d20      	adds	r0, r4, #4
 80078d2:	f7ff fe81 	bl	80075d8 <RCCEx_PLL2_Config>
 80078d6:	4605      	mov	r5, r0
      break;
 80078d8:	e008      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 80078da:	2601      	movs	r6, #1
 80078dc:	4635      	mov	r5, r6
 80078de:	e00d      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e4:	d002      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80078e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80078ea:	d11b      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 80078ec:	bb65      	cbnz	r5, 8007948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80078ee:	4a69      	ldr	r2, [pc, #420]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80078f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80078f2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80078f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007902:	d035      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 8007904:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790a:	d057      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800790c:	d821      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d04e      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007916:	d119      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007918:	2100      	movs	r1, #0
 800791a:	1d20      	adds	r0, r4, #4
 800791c:	f7ff fe5c 	bl	80075d8 <RCCEx_PLL2_Config>
 8007920:	4605      	mov	r5, r0
      break;
 8007922:	e01c      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 8007924:	2bc0      	cmp	r3, #192	; 0xc0
 8007926:	d0e1      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007928:	2601      	movs	r6, #1
 800792a:	4635      	mov	r5, r6
 800792c:	e7e6      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792e:	4a59      	ldr	r2, [pc, #356]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007930:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007938:	e7d8      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800793a:	2100      	movs	r1, #0
 800793c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007940:	f7ff fed0 	bl	80076e4 <RCCEx_PLL3_Config>
 8007944:	4605      	mov	r5, r0
      break;
 8007946:	e7d1      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007948:	462e      	mov	r6, r5
 800794a:	e7d7      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 800794c:	2601      	movs	r6, #1
 800794e:	4635      	mov	r5, r6
 8007950:	e00e      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007956:	d002      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007958:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800795c:	d122      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800795e:	2d00      	cmp	r5, #0
 8007960:	d133      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007962:	4a4c      	ldr	r2, [pc, #304]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007964:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007966:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800796a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800796c:	430b      	orrs	r3, r1
 800796e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007976:	d031      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 8007978:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800797a:	2b20      	cmp	r3, #32
 800797c:	d041      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800797e:	d829      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007980:	b133      	cbz	r3, 8007990 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007982:	2b10      	cmp	r3, #16
 8007984:	d123      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007986:	4a43      	ldr	r2, [pc, #268]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007988:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800798a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007990:	2d00      	cmp	r5, #0
 8007992:	d13c      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007994:	4a3f      	ldr	r2, [pc, #252]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007996:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007998:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800799c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800799e:	430b      	orrs	r3, r1
 80079a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079a2:	e01b      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 80079a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80079a8:	d0d9      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80079aa:	2601      	movs	r6, #1
 80079ac:	4635      	mov	r5, r6
 80079ae:	e7df      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4a38      	ldr	r2, [pc, #224]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80079ba:	e7d0      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079bc:	2100      	movs	r1, #0
 80079be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079c2:	f7ff fe8f 	bl	80076e4 <RCCEx_PLL3_Config>
 80079c6:	4605      	mov	r5, r0
      break;
 80079c8:	e7c9      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80079ca:	462e      	mov	r6, r5
 80079cc:	e7d0      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 80079ce:	2601      	movs	r6, #1
 80079d0:	4635      	mov	r5, r6
 80079d2:	e003      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80079d4:	2b30      	cmp	r3, #48	; 0x30
 80079d6:	d0db      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80079d8:	2601      	movs	r6, #1
 80079da:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80079e2:	d039      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 80079e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80079e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ea:	d02d      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80079ec:	d814      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80079ee:	b32b      	cbz	r3, 8007a3c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80079f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f4:	d10d      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079f6:	2100      	movs	r1, #0
 80079f8:	1d20      	adds	r0, r4, #4
 80079fa:	f7ff fded 	bl	80075d8 <RCCEx_PLL2_Config>
 80079fe:	4605      	mov	r5, r0
      break;
 8007a00:	e010      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a02:	2102      	movs	r1, #2
 8007a04:	1d20      	adds	r0, r4, #4
 8007a06:	f7ff fde7 	bl	80075d8 <RCCEx_PLL2_Config>
 8007a0a:	4605      	mov	r5, r0
      break;
 8007a0c:	e7c0      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007a0e:	462e      	mov	r6, r5
 8007a10:	e7e4      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a12:	2601      	movs	r6, #1
 8007a14:	4635      	mov	r5, r6
 8007a16:	e01f      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007a18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a1c:	d002      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a22:	d108      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 8007a24:	b9bd      	cbnz	r5, 8007a56 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a26:	4a1b      	ldr	r2, [pc, #108]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007a28:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6513      	str	r3, [r2, #80]	; 0x50
 8007a34:	e010      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a36:	2601      	movs	r6, #1
 8007a38:	4635      	mov	r5, r6
 8007a3a:	e00d      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3c:	4a15      	ldr	r2, [pc, #84]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007a3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a44:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007a46:	e7ed      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a48:	2100      	movs	r1, #0
 8007a4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a4e:	f7ff fe49 	bl	80076e4 <RCCEx_PLL3_Config>
 8007a52:	4605      	mov	r5, r0
      break;
 8007a54:	e7e6      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a56:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007a5e:	d026      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a66:	d037      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007a68:	d816      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a6a:	b13b      	cbz	r3, 8007a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d10d      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a72:	2101      	movs	r1, #1
 8007a74:	1d20      	adds	r0, r4, #4
 8007a76:	f7ff fdaf 	bl	80075d8 <RCCEx_PLL2_Config>
 8007a7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007a7c:	bb9d      	cbnz	r5, 8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a7e:	4a05      	ldr	r2, [pc, #20]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007a80:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007a82:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007a86:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	6513      	str	r3, [r2, #80]	; 0x50
 8007a8c:	e00f      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a8e:	2601      	movs	r6, #1
 8007a90:	4635      	mov	r5, r6
 8007a92:	e00c      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007a94:	58024400 	.word	0x58024400
 8007a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a9c:	d0ee      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aa2:	d0eb      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007aa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aa8:	d0e8      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007aaa:	2601      	movs	r6, #1
 8007aac:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007ab4:	d025      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ab6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007abe:	d04c      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007ac0:	d816      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d03c      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aca:	d10e      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007acc:	2101      	movs	r1, #1
 8007ace:	1d20      	adds	r0, r4, #4
 8007ad0:	f7ff fd82 	bl	80075d8 <RCCEx_PLL2_Config>
 8007ad4:	4605      	mov	r5, r0
      break;
 8007ad6:	e033      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ad8:	2101      	movs	r1, #1
 8007ada:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ade:	f7ff fe01 	bl	80076e4 <RCCEx_PLL3_Config>
 8007ae2:	4605      	mov	r5, r0
      break;
 8007ae4:	e7ca      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007ae6:	462e      	mov	r6, r5
 8007ae8:	e7e1      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007aea:	2601      	movs	r6, #1
 8007aec:	4635      	mov	r5, r6
 8007aee:	e008      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007af4:	d024      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007af6:	d91d      	bls.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007af8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007afc:	d020      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007afe:	2601      	movs	r6, #1
 8007b00:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007b08:	d009      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 8007b0a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b10:	d02c      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8007b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b16:	d037      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007b18:	b36b      	cbz	r3, 8007b76 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007b1a:	2601      	movs	r6, #1
 8007b1c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007b24:	d045      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 8007b26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d86d      	bhi.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007b2c:	e8df f003 	tbb	[pc, r3]
 8007b30:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b38:	d002      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3e:	d109      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 8007b40:	b995      	cbnz	r5, 8007b68 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b42:	4a8c      	ldr	r2, [pc, #560]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b46:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007b4a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	6593      	str	r3, [r2, #88]	; 0x58
 8007b52:	e7d6      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b54:	2601      	movs	r6, #1
 8007b56:	4635      	mov	r5, r6
 8007b58:	e7d3      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b60:	f7ff fdc0 	bl	80076e4 <RCCEx_PLL3_Config>
 8007b64:	4605      	mov	r5, r0
      break;
 8007b66:	e7eb      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b68:	462e      	mov	r6, r5
 8007b6a:	e7ca      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b6c:	4a81      	ldr	r2, [pc, #516]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007b76:	b96d      	cbnz	r5, 8007b94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b78:	4a7e      	ldr	r2, [pc, #504]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007b7c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007b80:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007b82:	430b      	orrs	r3, r1
 8007b84:	6513      	str	r3, [r2, #80]	; 0x50
 8007b86:	e7ca      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b88:	2101      	movs	r1, #1
 8007b8a:	1d20      	adds	r0, r4, #4
 8007b8c:	f7ff fd24 	bl	80075d8 <RCCEx_PLL2_Config>
 8007b90:	4605      	mov	r5, r0
      break;
 8007b92:	e7f0      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007b94:	462e      	mov	r6, r5
 8007b96:	e7c2      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b98:	4a76      	ldr	r2, [pc, #472]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007ba2:	bba5      	cbnz	r5, 8007c0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ba4:	4a73      	ldr	r2, [pc, #460]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007ba6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007ba8:	f023 0303 	bic.w	r3, r3, #3
 8007bac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007bb8:	d12b      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	f013 0f01 	tst.w	r3, #1
 8007bc0:	f000 80a3 	beq.w	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bc4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007bc8:	2b28      	cmp	r3, #40	; 0x28
 8007bca:	f200 809c 	bhi.w	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007bce:	e8df f003 	tbb	[pc, r3]
 8007bd2:	9a89      	.short	0x9a89
 8007bd4:	9a9a9a9a 	.word	0x9a9a9a9a
 8007bd8:	9a849a9a 	.word	0x9a849a9a
 8007bdc:	9a9a9a9a 	.word	0x9a9a9a9a
 8007be0:	9a939a9a 	.word	0x9a939a9a
 8007be4:	9a9a9a9a 	.word	0x9a9a9a9a
 8007be8:	9a899a9a 	.word	0x9a899a9a
 8007bec:	9a9a9a9a 	.word	0x9a9a9a9a
 8007bf0:	9a899a9a 	.word	0x9a899a9a
 8007bf4:	9a9a9a9a 	.word	0x9a9a9a9a
 8007bf8:	9a9a      	.short	0x9a9a
 8007bfa:	89          	.byte	0x89
 8007bfb:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	1d20      	adds	r0, r4, #4
 8007c00:	f7ff fcea 	bl	80075d8 <RCCEx_PLL2_Config>
 8007c04:	4605      	mov	r5, r0
      break;
 8007c06:	e7cc      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 8007c08:	2601      	movs	r6, #1
 8007c0a:	4635      	mov	r5, r6
 8007c0c:	e7d1      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007c0e:	462e      	mov	r6, r5
 8007c10:	e7cf      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c12:	4a59      	ldr	r2, [pc, #356]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c14:	6813      	ldr	r3, [r2, #0]
 8007c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c1c:	f7fc ff08 	bl	8004a30 <HAL_GetTick>
 8007c20:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c22:	4b55      	ldr	r3, [pc, #340]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c2a:	d105      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c2c:	f7fc ff00 	bl	8004a30 <HAL_GetTick>
 8007c30:	1bc0      	subs	r0, r0, r7
 8007c32:	2864      	cmp	r0, #100	; 0x64
 8007c34:	d9f5      	bls.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 8007c36:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	d14a      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c3c:	4b4d      	ldr	r3, [pc, #308]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c40:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8007c44:	4053      	eors	r3, r2
 8007c46:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007c4a:	d00c      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c4c:	4b49      	ldr	r3, [pc, #292]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c56:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007c5a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c5e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007c62:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007c64:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c66:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6e:	d015      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 8007c70:	bb8d      	cbnz	r5, 8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c72:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007c76:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007c7a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007c7e:	d01e      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007c80:	4a3c      	ldr	r2, [pc, #240]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c82:	6913      	ldr	r3, [r2, #16]
 8007c84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c88:	6113      	str	r3, [r2, #16]
 8007c8a:	493a      	ldr	r1, [pc, #232]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c8c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007c8e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8007c92:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007c96:	4313      	orrs	r3, r2
 8007c98:	670b      	str	r3, [r1, #112]	; 0x70
 8007c9a:	e78e      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 8007c9c:	f7fc fec8 	bl	8004a30 <HAL_GetTick>
 8007ca0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ca2:	4b34      	ldr	r3, [pc, #208]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	f013 0f02 	tst.w	r3, #2
 8007caa:	d1e1      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cac:	f7fc fec0 	bl	8004a30 <HAL_GetTick>
 8007cb0:	1bc0      	subs	r0, r0, r7
 8007cb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cb6:	4298      	cmp	r0, r3
 8007cb8:	d9f3      	bls.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 8007cba:	2503      	movs	r5, #3
 8007cbc:	e7d8      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cbe:	482d      	ldr	r0, [pc, #180]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cc0:	6902      	ldr	r2, [r0, #16]
 8007cc2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007cc6:	492d      	ldr	r1, [pc, #180]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007cc8:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	6103      	str	r3, [r0, #16]
 8007cd0:	e7db      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 8007cd2:	462e      	mov	r6, r5
 8007cd4:	e771      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 8007cd6:	462e      	mov	r6, r5
 8007cd8:	e76f      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cda:	2101      	movs	r1, #1
 8007cdc:	1d20      	adds	r0, r4, #4
 8007cde:	f7ff fc7b 	bl	80075d8 <RCCEx_PLL2_Config>
 8007ce2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ce4:	b9ed      	cbnz	r5, 8007d22 <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ce6:	4a23      	ldr	r2, [pc, #140]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007ce8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007cea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007cee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	6553      	str	r3, [r2, #84]	; 0x54
 8007cf6:	e008      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007cfe:	f7ff fcf1 	bl	80076e4 <RCCEx_PLL3_Config>
 8007d02:	4605      	mov	r5, r0
      break;
 8007d04:	e7ee      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d06:	2601      	movs	r6, #1
 8007d08:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	f013 0f02 	tst.w	r3, #2
 8007d10:	d016      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	d827      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8007d18:	e8df f003 	tbb	[pc, r3]
 8007d1c:	0a1f050a 	.word	0x0a1f050a
 8007d20:	0a0a      	.short	0x0a0a
 8007d22:	462e      	mov	r6, r5
 8007d24:	e7f1      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d26:	2101      	movs	r1, #1
 8007d28:	1d20      	adds	r0, r4, #4
 8007d2a:	f7ff fc55 	bl	80075d8 <RCCEx_PLL2_Config>
 8007d2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d30:	b9ed      	cbnz	r5, 8007d6e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d32:	4a10      	ldr	r2, [pc, #64]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007d34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	f013 0f04 	tst.w	r3, #4
 8007d46:	d029      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d48:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007d4c:	2b05      	cmp	r3, #5
 8007d4e:	d84a      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8007d50:	e8df f003 	tbb	[pc, r3]
 8007d54:	1b42161b 	.word	0x1b42161b
 8007d58:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d60:	f7ff fcc0 	bl	80076e4 <RCCEx_PLL3_Config>
 8007d64:	4605      	mov	r5, r0
      break;
 8007d66:	e7e3      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d68:	2601      	movs	r6, #1
 8007d6a:	4635      	mov	r5, r6
 8007d6c:	e7e8      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007d6e:	462e      	mov	r6, r5
 8007d70:	e7e6      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
 8007d78:	58024800 	.word	0x58024800
 8007d7c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d80:	2101      	movs	r1, #1
 8007d82:	1d20      	adds	r0, r4, #4
 8007d84:	f7ff fc28 	bl	80075d8 <RCCEx_PLL2_Config>
 8007d88:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d8a:	bb7d      	cbnz	r5, 8007dec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d8c:	4aa9      	ldr	r2, [pc, #676]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007d8e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007d90:	f023 0307 	bic.w	r3, r3, #7
 8007d94:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f013 0f20 	tst.w	r3, #32
 8007da2:	d033      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007da4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dac:	d04c      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8007dae:	d822      	bhi.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x606>
 8007db0:	b13b      	cbz	r3, 8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007db6:	d11b      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007db8:	2100      	movs	r1, #0
 8007dba:	1d20      	adds	r0, r4, #4
 8007dbc:	f7ff fc0c 	bl	80075d8 <RCCEx_PLL2_Config>
 8007dc0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	d147      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dc6:	4a9b      	ldr	r2, [pc, #620]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007dc8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007dca:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007dce:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	6553      	str	r3, [r2, #84]	; 0x54
 8007dd6:	e019      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dd8:	2101      	movs	r1, #1
 8007dda:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007dde:	f7ff fc81 	bl	80076e4 <RCCEx_PLL3_Config>
 8007de2:	4605      	mov	r5, r0
      break;
 8007de4:	e7d1      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007de6:	2601      	movs	r6, #1
 8007de8:	4635      	mov	r5, r6
 8007dea:	e7d7      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007dec:	462e      	mov	r6, r5
 8007dee:	e7d5      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007df0:	2601      	movs	r6, #1
 8007df2:	4635      	mov	r5, r6
 8007df4:	e00a      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d0e2      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e00:	d0df      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e06:	d0dc      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e08:	2601      	movs	r6, #1
 8007e0a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e12:	d030      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e14:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1c:	d04b      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8007e1e:	d81f      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8007e20:	b13b      	cbz	r3, 8007e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e26:	d118      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e28:	2100      	movs	r1, #0
 8007e2a:	1d20      	adds	r0, r4, #4
 8007e2c:	f7ff fbd4 	bl	80075d8 <RCCEx_PLL2_Config>
 8007e30:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	d146      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e36:	4a7f      	ldr	r2, [pc, #508]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007e38:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007e3a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007e3e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6593      	str	r3, [r2, #88]	; 0x58
 8007e46:	e016      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e48:	2102      	movs	r1, #2
 8007e4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e4e:	f7ff fc49 	bl	80076e4 <RCCEx_PLL3_Config>
 8007e52:	4605      	mov	r5, r0
      break;
 8007e54:	e7b5      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e56:	462e      	mov	r6, r5
 8007e58:	e7d8      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e5a:	2601      	movs	r6, #1
 8007e5c:	4635      	mov	r5, r6
 8007e5e:	e00a      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8007e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e64:	d0e5      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e6a:	d0e2      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e70:	d0df      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e72:	2601      	movs	r6, #1
 8007e74:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e7c:	d032      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e7e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e86:	f000 80a2 	beq.w	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8007e8a:	d820      	bhi.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8007e8c:	b13b      	cbz	r3, 8007e9e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e92:	d119      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e94:	2100      	movs	r1, #0
 8007e96:	1d20      	adds	r0, r4, #4
 8007e98:	f7ff fb9e 	bl	80075d8 <RCCEx_PLL2_Config>
 8007e9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	f040 809c 	bne.w	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ea4:	4a63      	ldr	r2, [pc, #396]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007ea6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ea8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007eac:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8007eb4:	e016      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ebc:	f7ff fc12 	bl	80076e4 <RCCEx_PLL3_Config>
 8007ec0:	4605      	mov	r5, r0
      break;
 8007ec2:	e7b6      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007ec4:	462e      	mov	r6, r5
 8007ec6:	e7d6      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ec8:	2601      	movs	r6, #1
 8007eca:	4635      	mov	r5, r6
 8007ecc:	e00a      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed2:	d0e4      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007ed4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ed8:	d0e1      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007eda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ede:	d0de      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007ee0:	2601      	movs	r6, #1
 8007ee2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	f013 0f08 	tst.w	r3, #8
 8007eea:	d00c      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007eec:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef4:	d074      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ef6:	4a4f      	ldr	r2, [pc, #316]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007ef8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007efa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007efe:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007f02:	430b      	orrs	r3, r1
 8007f04:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	f013 0f10 	tst.w	r3, #16
 8007f0c:	d00c      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f0e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f16:	d06c      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f18:	4a46      	ldr	r2, [pc, #280]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007f1a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f20:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007f24:	430b      	orrs	r3, r1
 8007f26:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007f2e:	d00b      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 8007f30:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f38:	d073      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f3e:	d066      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d05f      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8007f44:	2601      	movs	r6, #1
 8007f46:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007f4e:	d00c      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 8007f50:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f58:	d07d      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x866>
 8007f5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f5e:	d070      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f64:	d068      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007f66:	2601      	movs	r6, #1
 8007f68:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007f70:	d008      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007f72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d077      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7c:	f000 8082 	beq.w	8008084 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8007f80:	2601      	movs	r6, #1
 8007f82:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007f8a:	f040 8083 	bne.w	8008094 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007f94:	f000 808b 	beq.w	80080ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 8007f98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa0:	f000 80c9 	beq.w	8008136 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007fa4:	f240 8080 	bls.w	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fac:	d003      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8007fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fb2:	f040 80be 	bne.w	8008132 <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	f040 80c3 	bne.w	8008142 <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007fbe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6553      	str	r3, [r2, #84]	; 0x54
 8007fcc:	e06f      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fce:	2102      	movs	r1, #2
 8007fd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fd4:	f7ff fb86 	bl	80076e4 <RCCEx_PLL3_Config>
 8007fd8:	4605      	mov	r5, r0
      break;
 8007fda:	e760      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007fdc:	462e      	mov	r6, r5
 8007fde:	e781      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fe0:	2102      	movs	r1, #2
 8007fe2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fe6:	f7ff fb7d 	bl	80076e4 <RCCEx_PLL3_Config>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d083      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 8007fee:	2601      	movs	r6, #1
 8007ff0:	e781      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ff8:	f7ff fb74 	bl	80076e4 <RCCEx_PLL3_Config>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d08b      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 8008000:	2601      	movs	r6, #1
 8008002:	e789      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008004:	2100      	movs	r1, #0
 8008006:	1d20      	adds	r0, r4, #4
 8008008:	f7ff fae6 	bl	80075d8 <RCCEx_PLL2_Config>
 800800c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800800e:	b97d      	cbnz	r5, 8008030 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008012:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008014:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008018:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800801c:	430b      	orrs	r3, r1
 800801e:	6593      	str	r3, [r2, #88]	; 0x58
 8008020:	e792      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008022:	2102      	movs	r1, #2
 8008024:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008028:	f7ff fb5c 	bl	80076e4 <RCCEx_PLL3_Config>
 800802c:	4605      	mov	r5, r0
      break;
 800802e:	e7ee      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008030:	462e      	mov	r6, r5
 8008032:	e789      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8008034:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008038:	4a47      	ldr	r2, [pc, #284]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800803a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800803c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008040:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008042:	b97d      	cbnz	r5, 8008064 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008044:	4a44      	ldr	r2, [pc, #272]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008046:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008048:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800804c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008050:	430b      	orrs	r3, r1
 8008052:	6553      	str	r3, [r2, #84]	; 0x54
 8008054:	e789      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008056:	2101      	movs	r1, #1
 8008058:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800805c:	f7ff fb42 	bl	80076e4 <RCCEx_PLL3_Config>
 8008060:	4605      	mov	r5, r0
      break;
 8008062:	e7ee      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008064:	462e      	mov	r6, r5
 8008066:	e780      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008068:	4a3b      	ldr	r2, [pc, #236]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800806a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800806c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008070:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008072:	b96d      	cbnz	r5, 8008090 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008074:	4a38      	ldr	r2, [pc, #224]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008076:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800807c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800807e:	430b      	orrs	r3, r1
 8008080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008082:	e77f      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008084:	2102      	movs	r1, #2
 8008086:	1d20      	adds	r0, r4, #4
 8008088:	f7ff faa6 	bl	80075d8 <RCCEx_PLL2_Config>
 800808c:	4605      	mov	r5, r0
      break;
 800808e:	e7f0      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x882>
 8008090:	462e      	mov	r6, r5
 8008092:	e777      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008094:	2102      	movs	r1, #2
 8008096:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800809a:	f7ff fb23 	bl	80076e4 <RCCEx_PLL3_Config>
 800809e:	2800      	cmp	r0, #0
 80080a0:	f43f af75 	beq.w	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 80080a4:	2601      	movs	r6, #1
 80080a6:	e772      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d084      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80080ac:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80080b4:	d006      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080b6:	4a28      	ldr	r2, [pc, #160]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080be:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80080ca:	d006      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080cc:	4a22      	ldr	r2, [pc, #136]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80080e0:	d006      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80080e2:	4a1d      	ldr	r2, [pc, #116]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080e4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80080e6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80080ea:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80080f6:	d009      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080f8:	4b17      	ldr	r3, [pc, #92]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080fa:	691a      	ldr	r2, [r3, #16]
 80080fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008100:	611a      	str	r2, [r3, #16]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8008108:	430a      	orrs	r2, r1
 800810a:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	db19      	blt.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008118:	d007      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800811a:	4a0f      	ldr	r2, [pc, #60]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800811c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800811e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008122:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8008126:	430b      	orrs	r3, r1
 8008128:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800812a:	b106      	cbz	r6, 800812e <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800812c:	2601      	movs	r6, #1
}
 800812e:	4630      	mov	r0, r6
 8008130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8008132:	2601      	movs	r6, #1
 8008134:	e7bb      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008136:	4a08      	ldr	r2, [pc, #32]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008138:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800813a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800813e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008140:	e739      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8008142:	462e      	mov	r6, r5
 8008144:	e7b3      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008146:	4a04      	ldr	r2, [pc, #16]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008148:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800814a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800814e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008150:	430b      	orrs	r3, r1
 8008152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008154:	e7dd      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x922>
 8008156:	bf00      	nop
 8008158:	58024400 	.word	0x58024400

0800815c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800815c:	4770      	bx	lr
	...

08008160 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008160:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	d13a      	bne.n	80081e0 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800816a:	2302      	movs	r3, #2
 800816c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008170:	6802      	ldr	r2, [r0, #0]
 8008172:	68d3      	ldr	r3, [r2, #12]
 8008174:	f043 0301 	orr.w	r3, r3, #1
 8008178:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800817a:	6803      	ldr	r3, [r0, #0]
 800817c:	4a1a      	ldr	r2, [pc, #104]	; (80081e8 <HAL_TIM_Base_Start_IT+0x88>)
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	bf18      	it	ne
 8008184:	4293      	cmpne	r3, r2
 8008186:	d01d      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x64>
 8008188:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800818c:	4293      	cmp	r3, r2
 800818e:	d019      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x64>
 8008190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008194:	4293      	cmp	r3, r2
 8008196:	d015      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x64>
 8008198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800819c:	4293      	cmp	r3, r2
 800819e:	d011      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x64>
 80081a0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00d      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x64>
 80081a8:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x64>
 80081b0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d005      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081c0:	2000      	movs	r0, #0
 80081c2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c4:	6899      	ldr	r1, [r3, #8]
 80081c6:	4a09      	ldr	r2, [pc, #36]	; (80081ec <HAL_TIM_Base_Start_IT+0x8c>)
 80081c8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ca:	2a06      	cmp	r2, #6
 80081cc:	bf18      	it	ne
 80081ce:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 80081d2:	d007      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	f042 0201 	orr.w	r2, r2, #1
 80081da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80081dc:	2000      	movs	r0, #0
 80081de:	4770      	bx	lr
    return HAL_ERROR;
 80081e0:	2001      	movs	r0, #1
 80081e2:	4770      	bx	lr
  return HAL_OK;
 80081e4:	2000      	movs	r0, #0
}
 80081e6:	4770      	bx	lr
 80081e8:	40010000 	.word	0x40010000
 80081ec:	00010007 	.word	0x00010007

080081f0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081f0:	4770      	bx	lr

080081f2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081f4:	4770      	bx	lr

080081f6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081f6:	4770      	bx	lr

080081f8 <HAL_TIM_IRQHandler>:
{
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081fc:	6803      	ldr	r3, [r0, #0]
 80081fe:	691a      	ldr	r2, [r3, #16]
 8008200:	f012 0f02 	tst.w	r2, #2
 8008204:	d011      	beq.n	800822a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	f012 0f02 	tst.w	r2, #2
 800820c:	d00d      	beq.n	800822a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800820e:	f06f 0202 	mvn.w	r2, #2
 8008212:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008214:	2301      	movs	r3, #1
 8008216:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008218:	6803      	ldr	r3, [r0, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	f013 0f03 	tst.w	r3, #3
 8008220:	d079      	beq.n	8008316 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008222:	f7ff ffe6 	bl	80081f2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008226:	2300      	movs	r3, #0
 8008228:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	691a      	ldr	r2, [r3, #16]
 800822e:	f012 0f04 	tst.w	r2, #4
 8008232:	d012      	beq.n	800825a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	f012 0f04 	tst.w	r2, #4
 800823a:	d00e      	beq.n	800825a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800823c:	f06f 0204 	mvn.w	r2, #4
 8008240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008242:	2302      	movs	r3, #2
 8008244:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800824e:	d068      	beq.n	8008322 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff ffce 	bl	80081f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008256:	2300      	movs	r3, #0
 8008258:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	f012 0f08 	tst.w	r2, #8
 8008262:	d012      	beq.n	800828a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	f012 0f08 	tst.w	r2, #8
 800826a:	d00e      	beq.n	800828a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800826c:	f06f 0208 	mvn.w	r2, #8
 8008270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008272:	2304      	movs	r3, #4
 8008274:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	f013 0f03 	tst.w	r3, #3
 800827e:	d057      	beq.n	8008330 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8008280:	4620      	mov	r0, r4
 8008282:	f7ff ffb6 	bl	80081f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008286:	2300      	movs	r3, #0
 8008288:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	f012 0f10 	tst.w	r2, #16
 8008292:	d012      	beq.n	80082ba <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	f012 0f10 	tst.w	r2, #16
 800829a:	d00e      	beq.n	80082ba <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800829c:	f06f 0210 	mvn.w	r2, #16
 80082a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082a2:	2308      	movs	r3, #8
 80082a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80082ae:	d046      	beq.n	800833e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff ff9e 	bl	80081f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b6:	2300      	movs	r3, #0
 80082b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	f012 0f01 	tst.w	r2, #1
 80082c2:	d003      	beq.n	80082cc <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	f012 0f01 	tst.w	r2, #1
 80082ca:	d13f      	bne.n	800834c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80082d4:	d003      	beq.n	80082de <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80082dc:	d13d      	bne.n	800835a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80082e6:	d003      	beq.n	80082f0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80082ee:	d13b      	bne.n	8008368 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80082f8:	d003      	beq.n	8008302 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008300:	d139      	bne.n	8008376 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	f012 0f20 	tst.w	r2, #32
 800830a:	d003      	beq.n	8008314 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	f012 0f20 	tst.w	r2, #32
 8008312:	d137      	bne.n	8008384 <HAL_TIM_IRQHandler+0x18c>
}
 8008314:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008316:	f7ff ff6b 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff ff6a 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008320:	e781      	b.n	8008226 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008322:	4620      	mov	r0, r4
 8008324:	f7ff ff64 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008328:	4620      	mov	r0, r4
 800832a:	f7ff ff63 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800832e:	e792      	b.n	8008256 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008330:	4620      	mov	r0, r4
 8008332:	f7ff ff5d 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff ff5c 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800833c:	e7a3      	b.n	8008286 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff ff56 	bl	80081f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008344:	4620      	mov	r0, r4
 8008346:	f7ff ff55 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800834a:	e7b4      	b.n	80082b6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800834c:	f06f 0201 	mvn.w	r2, #1
 8008350:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008352:	4620      	mov	r0, r4
 8008354:	f7f9 fd10 	bl	8001d78 <HAL_TIM_PeriodElapsedCallback>
 8008358:	e7b8      	b.n	80082cc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800835a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800835e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008360:	4620      	mov	r0, r4
 8008362:	f000 f8ca 	bl	80084fa <HAL_TIMEx_BreakCallback>
 8008366:	e7ba      	b.n	80082de <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008368:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800836c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800836e:	4620      	mov	r0, r4
 8008370:	f000 f8c4 	bl	80084fc <HAL_TIMEx_Break2Callback>
 8008374:	e7bc      	b.n	80082f0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800837a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff ff3a 	bl	80081f6 <HAL_TIM_TriggerCallback>
 8008382:	e7be      	b.n	8008302 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008384:	f06f 0220 	mvn.w	r2, #32
 8008388:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800838a:	4620      	mov	r0, r4
 800838c:	f000 f8b4 	bl	80084f8 <HAL_TIMEx_CommutCallback>
}
 8008390:	e7c0      	b.n	8008314 <HAL_TIM_IRQHandler+0x11c>
	...

08008394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008394:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008396:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	4a39      	ldr	r2, [pc, #228]	; (8008480 <TIM_Base_SetConfig+0xec>)
 800839a:	4290      	cmp	r0, r2
 800839c:	bf14      	ite	ne
 800839e:	f04f 0e00 	movne.w	lr, #0
 80083a2:	f04f 0e01 	moveq.w	lr, #1
 80083a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80083aa:	bf14      	ite	ne
 80083ac:	4672      	movne	r2, lr
 80083ae:	f04e 0201 	orreq.w	r2, lr, #1
 80083b2:	b9aa      	cbnz	r2, 80083e0 <TIM_Base_SetConfig+0x4c>
 80083b4:	4c33      	ldr	r4, [pc, #204]	; (8008484 <TIM_Base_SetConfig+0xf0>)
 80083b6:	42a0      	cmp	r0, r4
 80083b8:	bf14      	ite	ne
 80083ba:	2400      	movne	r4, #0
 80083bc:	2401      	moveq	r4, #1
 80083be:	4d32      	ldr	r5, [pc, #200]	; (8008488 <TIM_Base_SetConfig+0xf4>)
 80083c0:	42a8      	cmp	r0, r5
 80083c2:	d00d      	beq.n	80083e0 <TIM_Base_SetConfig+0x4c>
 80083c4:	b964      	cbnz	r4, 80083e0 <TIM_Base_SetConfig+0x4c>
 80083c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80083ca:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 80083ce:	42a0      	cmp	r0, r4
 80083d0:	bf14      	ite	ne
 80083d2:	2400      	movne	r4, #0
 80083d4:	2401      	moveq	r4, #1
 80083d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083da:	42a8      	cmp	r0, r5
 80083dc:	d000      	beq.n	80083e0 <TIM_Base_SetConfig+0x4c>
 80083de:	b11c      	cbz	r4, 80083e8 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80083e4:	684c      	ldr	r4, [r1, #4]
 80083e6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083e8:	bb12      	cbnz	r2, 8008430 <TIM_Base_SetConfig+0x9c>
 80083ea:	4a26      	ldr	r2, [pc, #152]	; (8008484 <TIM_Base_SetConfig+0xf0>)
 80083ec:	4290      	cmp	r0, r2
 80083ee:	bf14      	ite	ne
 80083f0:	2200      	movne	r2, #0
 80083f2:	2201      	moveq	r2, #1
 80083f4:	4c24      	ldr	r4, [pc, #144]	; (8008488 <TIM_Base_SetConfig+0xf4>)
 80083f6:	42a0      	cmp	r0, r4
 80083f8:	d01a      	beq.n	8008430 <TIM_Base_SetConfig+0x9c>
 80083fa:	b9ca      	cbnz	r2, 8008430 <TIM_Base_SetConfig+0x9c>
 80083fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008400:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8008404:	4290      	cmp	r0, r2
 8008406:	bf14      	ite	ne
 8008408:	2200      	movne	r2, #0
 800840a:	2201      	moveq	r2, #1
 800840c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008410:	42a0      	cmp	r0, r4
 8008412:	d00d      	beq.n	8008430 <TIM_Base_SetConfig+0x9c>
 8008414:	b962      	cbnz	r2, 8008430 <TIM_Base_SetConfig+0x9c>
 8008416:	4a1d      	ldr	r2, [pc, #116]	; (800848c <TIM_Base_SetConfig+0xf8>)
 8008418:	4290      	cmp	r0, r2
 800841a:	bf14      	ite	ne
 800841c:	2200      	movne	r2, #0
 800841e:	2201      	moveq	r2, #1
 8008420:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8008424:	42a0      	cmp	r0, r4
 8008426:	d003      	beq.n	8008430 <TIM_Base_SetConfig+0x9c>
 8008428:	b912      	cbnz	r2, 8008430 <TIM_Base_SetConfig+0x9c>
 800842a:	4a19      	ldr	r2, [pc, #100]	; (8008490 <TIM_Base_SetConfig+0xfc>)
 800842c:	4290      	cmp	r0, r2
 800842e:	d104      	bne.n	800843a <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008430:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008434:	68cb      	ldr	r3, [r1, #12]
 8008436:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800843a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800843e:	694a      	ldr	r2, [r1, #20]
 8008440:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008442:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008444:	688a      	ldr	r2, [r1, #8]
 8008446:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008448:	680a      	ldr	r2, [r1, #0]
 800844a:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800844c:	4a11      	ldr	r2, [pc, #68]	; (8008494 <TIM_Base_SetConfig+0x100>)
 800844e:	4290      	cmp	r0, r2
 8008450:	bf14      	ite	ne
 8008452:	4673      	movne	r3, lr
 8008454:	f04e 0301 	orreq.w	r3, lr, #1
 8008458:	b963      	cbnz	r3, 8008474 <TIM_Base_SetConfig+0xe0>
 800845a:	4b0c      	ldr	r3, [pc, #48]	; (800848c <TIM_Base_SetConfig+0xf8>)
 800845c:	4298      	cmp	r0, r3
 800845e:	bf14      	ite	ne
 8008460:	2300      	movne	r3, #0
 8008462:	2301      	moveq	r3, #1
 8008464:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008468:	4290      	cmp	r0, r2
 800846a:	d003      	beq.n	8008474 <TIM_Base_SetConfig+0xe0>
 800846c:	b913      	cbnz	r3, 8008474 <TIM_Base_SetConfig+0xe0>
 800846e:	4b08      	ldr	r3, [pc, #32]	; (8008490 <TIM_Base_SetConfig+0xfc>)
 8008470:	4298      	cmp	r0, r3
 8008472:	d101      	bne.n	8008478 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008474:	690b      	ldr	r3, [r1, #16]
 8008476:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008478:	2301      	movs	r3, #1
 800847a:	6143      	str	r3, [r0, #20]
}
 800847c:	bd30      	pop	{r4, r5, pc}
 800847e:	bf00      	nop
 8008480:	40010000 	.word	0x40010000
 8008484:	40000800 	.word	0x40000800
 8008488:	40000400 	.word	0x40000400
 800848c:	40014400 	.word	0x40014400
 8008490:	40014800 	.word	0x40014800
 8008494:	40010400 	.word	0x40010400

08008498 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008498:	b360      	cbz	r0, 80084f4 <HAL_TIM_Base_Init+0x5c>
{
 800849a:	b510      	push	{r4, lr}
 800849c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800849e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80084a2:	b313      	cbz	r3, 80084ea <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	2302      	movs	r3, #2
 80084a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084aa:	4621      	mov	r1, r4
 80084ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80084b0:	f7ff ff70 	bl	8008394 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80084be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80084c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80084c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80084ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80084d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084da:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80084de:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80084e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80084e6:	2000      	movs	r0, #0
}
 80084e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80084ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80084ee:	f7ff fe35 	bl	800815c <HAL_TIM_Base_MspInit>
 80084f2:	e7d7      	b.n	80084a4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80084f4:	2001      	movs	r0, #1
}
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084f8:	4770      	bx	lr

080084fa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084fa:	4770      	bx	lr

080084fc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084fc:	4770      	bx	lr

080084fe <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084fe:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008500:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008504:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008506:	f001 ffa5 	bl	800a454 <xTaskGetSchedulerState>
 800850a:	2801      	cmp	r0, #1
 800850c:	d100      	bne.n	8008510 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800850e:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8008510:	f000 fc80 	bl	8008e14 <xPortSysTickHandler>
}
 8008514:	e7fb      	b.n	800850e <SysTick_Handler+0x10>
	...

08008518 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008518:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800851c:	b92b      	cbnz	r3, 800852a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <osKernelInitialize+0x20>)
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	b928      	cbnz	r0, 8008530 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008528:	4770      	bx	lr
    stat = osErrorISR;
 800852a:	f06f 0005 	mvn.w	r0, #5
 800852e:	4770      	bx	lr
    } else {
      stat = osError;
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	240022a4 	.word	0x240022a4

0800853c <osKernelStart>:
 800853c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008540:	b973      	cbnz	r3, 8008560 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <osKernelStart+0x30>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d10d      	bne.n	8008566 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800854a:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800854c:	2400      	movs	r4, #0
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <osKernelStart+0x34>)
 8008550:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008552:	4b06      	ldr	r3, [pc, #24]	; (800856c <osKernelStart+0x30>)
 8008554:	2202      	movs	r2, #2
 8008556:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008558:	f001 fccc 	bl	8009ef4 <vTaskStartScheduler>
      stat = osOK;
 800855c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800855e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008560:	f06f 0005 	mvn.w	r0, #5
 8008564:	4770      	bx	lr
      stat = osError;
 8008566:	f04f 30ff 	mov.w	r0, #4294967295
}
 800856a:	4770      	bx	lr
 800856c:	240022a4 	.word	0x240022a4
 8008570:	e000ed00 	.word	0xe000ed00

08008574 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008576:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008578:	2400      	movs	r4, #0
 800857a:	9405      	str	r4, [sp, #20]
 800857c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008580:	bb74      	cbnz	r4, 80085e0 <osThreadNew+0x6c>
 8008582:	b368      	cbz	r0, 80085e0 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008584:	b322      	cbz	r2, 80085d0 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 8008586:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008588:	6993      	ldr	r3, [r2, #24]
 800858a:	b903      	cbnz	r3, 800858e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800858c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800858e:	1e5c      	subs	r4, r3, #1
 8008590:	2c37      	cmp	r4, #55	; 0x37
 8008592:	d849      	bhi.n	8008628 <osThreadNew+0xb4>
 8008594:	6854      	ldr	r4, [r2, #4]
 8008596:	f014 0f01 	tst.w	r4, #1
 800859a:	d147      	bne.n	800862c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800859c:	6956      	ldr	r6, [r2, #20]
 800859e:	b16e      	cbz	r6, 80085bc <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085a0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085a4:	6894      	ldr	r4, [r2, #8]
 80085a6:	b12c      	cbz	r4, 80085b4 <osThreadNew+0x40>
 80085a8:	68d7      	ldr	r7, [r2, #12]
 80085aa:	2fbb      	cmp	r7, #187	; 0xbb
 80085ac:	d902      	bls.n	80085b4 <osThreadNew+0x40>
 80085ae:	6917      	ldr	r7, [r2, #16]
 80085b0:	b107      	cbz	r7, 80085b4 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085b2:	b9c6      	cbnz	r6, 80085e6 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085b4:	b12c      	cbz	r4, 80085c2 <osThreadNew+0x4e>
    mem  = -1;
 80085b6:	f04f 34ff 	mov.w	r4, #4294967295
 80085ba:	e00e      	b.n	80085da <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 80085bc:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80085c0:	e7f0      	b.n	80085a4 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085c2:	68d4      	ldr	r4, [r2, #12]
 80085c4:	b98c      	cbnz	r4, 80085ea <osThreadNew+0x76>
 80085c6:	6914      	ldr	r4, [r2, #16]
 80085c8:	b194      	cbz	r4, 80085f0 <osThreadNew+0x7c>
    mem  = -1;
 80085ca:	f04f 34ff 	mov.w	r4, #4294967295
 80085ce:	e004      	b.n	80085da <osThreadNew+0x66>
    name = NULL;
 80085d0:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80085d2:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80085d4:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80085d6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 80085da:	2c01      	cmp	r4, #1
 80085dc:	d00a      	beq.n	80085f4 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80085de:	b1ac      	cbz	r4, 800860c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085e0:	9805      	ldr	r0, [sp, #20]
}
 80085e2:	b007      	add	sp, #28
 80085e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80085e6:	2401      	movs	r4, #1
 80085e8:	e7f7      	b.n	80085da <osThreadNew+0x66>
    mem  = -1;
 80085ea:	f04f 34ff 	mov.w	r4, #4294967295
 80085ee:	e7f4      	b.n	80085da <osThreadNew+0x66>
          mem = 0;
 80085f0:	2400      	movs	r4, #0
 80085f2:	e7f2      	b.n	80085da <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085f4:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085f8:	9202      	str	r2, [sp, #8]
 80085fa:	9401      	str	r4, [sp, #4]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	460b      	mov	r3, r1
 8008600:	4662      	mov	r2, ip
 8008602:	4629      	mov	r1, r5
 8008604:	f001 fc06 	bl	8009e14 <xTaskCreateStatic>
 8008608:	9005      	str	r0, [sp, #20]
 800860a:	e7e9      	b.n	80085e0 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800860c:	aa05      	add	r2, sp, #20
 800860e:	9201      	str	r2, [sp, #4]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	460b      	mov	r3, r1
 8008614:	fa1f f28c 	uxth.w	r2, ip
 8008618:	4629      	mov	r1, r5
 800861a:	f001 fc36 	bl	8009e8a <xTaskCreate>
 800861e:	2801      	cmp	r0, #1
 8008620:	d0de      	beq.n	80085e0 <osThreadNew+0x6c>
            hTask = NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	9305      	str	r3, [sp, #20]
 8008626:	e7db      	b.n	80085e0 <osThreadNew+0x6c>
        return (NULL);
 8008628:	2000      	movs	r0, #0
 800862a:	e7da      	b.n	80085e2 <osThreadNew+0x6e>
 800862c:	2000      	movs	r0, #0
 800862e:	e7d8      	b.n	80085e2 <osThreadNew+0x6e>

08008630 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008630:	b508      	push	{r3, lr}
 8008632:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008636:	b933      	cbnz	r3, 8008646 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008638:	b908      	cbnz	r0, 800863e <osDelay+0xe>
    stat = osOK;
 800863a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800863c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800863e:	f001 fdc5 	bl	800a1cc <vTaskDelay>
    stat = osOK;
 8008642:	2000      	movs	r0, #0
 8008644:	e7fa      	b.n	800863c <osDelay+0xc>
    stat = osErrorISR;
 8008646:	f06f 0005 	mvn.w	r0, #5
 800864a:	e7f7      	b.n	800863c <osDelay+0xc>

0800864c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800864c:	b570      	push	{r4, r5, r6, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008654:	2b00      	cmp	r3, #0
 8008656:	d14d      	bne.n	80086f4 <osSemaphoreNew+0xa8>
 8008658:	460e      	mov	r6, r1
 800865a:	4614      	mov	r4, r2
 800865c:	4288      	cmp	r0, r1
 800865e:	bf34      	ite	cc
 8008660:	2300      	movcc	r3, #0
 8008662:	2301      	movcs	r3, #1
 8008664:	2800      	cmp	r0, #0
 8008666:	d049      	beq.n	80086fc <osSemaphoreNew+0xb0>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d047      	beq.n	80086fc <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800866c:	b14a      	cbz	r2, 8008682 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800866e:	6895      	ldr	r5, [r2, #8]
 8008670:	b115      	cbz	r5, 8008678 <osSemaphoreNew+0x2c>
 8008672:	68d3      	ldr	r3, [r2, #12]
 8008674:	2b4f      	cmp	r3, #79	; 0x4f
 8008676:	d814      	bhi.n	80086a2 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008678:	2d00      	cmp	r5, #0
 800867a:	d141      	bne.n	8008700 <osSemaphoreNew+0xb4>
 800867c:	68e3      	ldr	r3, [r4, #12]
 800867e:	b10b      	cbz	r3, 8008684 <osSemaphoreNew+0x38>
 8008680:	e039      	b.n	80086f6 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8008682:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8008684:	2801      	cmp	r0, #1
 8008686:	d00e      	beq.n	80086a6 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8008688:	bb73      	cbnz	r3, 80086e8 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800868a:	4631      	mov	r1, r6
 800868c:	f000 fe3b 	bl	8009306 <xQueueCreateCountingSemaphore>
 8008690:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008692:	b385      	cbz	r5, 80086f6 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 8008694:	b104      	cbz	r4, 8008698 <osSemaphoreNew+0x4c>
          name = attr->name;
 8008696:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008698:	4621      	mov	r1, r4
 800869a:	4628      	mov	r0, r5
 800869c:	f001 f9ac 	bl	80099f8 <vQueueAddToRegistry>
 80086a0:	e029      	b.n	80086f6 <osSemaphoreNew+0xaa>
        mem = 1;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e7ee      	b.n	8008684 <osSemaphoreNew+0x38>
        if (mem == 1) {
 80086a6:	b9b3      	cbnz	r3, 80086d6 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 80086a8:	2203      	movs	r2, #3
 80086aa:	2100      	movs	r1, #0
 80086ac:	2001      	movs	r0, #1
 80086ae:	f000 fde3 	bl	8009278 <xQueueGenericCreate>
 80086b2:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80086b4:	2d00      	cmp	r5, #0
 80086b6:	bf18      	it	ne
 80086b8:	2e00      	cmpne	r6, #0
 80086ba:	d0ea      	beq.n	8008692 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086bc:	2300      	movs	r3, #0
 80086be:	461a      	mov	r2, r3
 80086c0:	4619      	mov	r1, r3
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 fe3d 	bl	8009342 <xQueueGenericSend>
 80086c8:	2801      	cmp	r0, #1
 80086ca:	d0e2      	beq.n	8008692 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 80086cc:	4628      	mov	r0, r5
 80086ce:	f001 f9bd 	bl	8009a4c <vQueueDelete>
            hSemaphore = NULL;
 80086d2:	2500      	movs	r5, #0
 80086d4:	e00f      	b.n	80086f6 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	2203      	movs	r2, #3
 80086da:	9200      	str	r2, [sp, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	4611      	mov	r1, r2
 80086e0:	f000 fd77 	bl	80091d2 <xQueueGenericCreateStatic>
 80086e4:	4605      	mov	r5, r0
 80086e6:	e7e5      	b.n	80086b4 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80086e8:	68a2      	ldr	r2, [r4, #8]
 80086ea:	4631      	mov	r1, r6
 80086ec:	f000 fde8 	bl	80092c0 <xQueueCreateCountingSemaphoreStatic>
 80086f0:	4605      	mov	r5, r0
 80086f2:	e7ce      	b.n	8008692 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 80086f4:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80086f6:	4628      	mov	r0, r5
 80086f8:	b002      	add	sp, #8
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 80086fc:	2500      	movs	r5, #0
 80086fe:	e7fa      	b.n	80086f6 <osSemaphoreNew+0xaa>
 8008700:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8008702:	e7f8      	b.n	80086f6 <osSemaphoreNew+0xaa>

08008704 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008704:	b320      	cbz	r0, 8008750 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008706:	b510      	push	{r4, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	460c      	mov	r4, r1
 800870c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008710:	b1b3      	cbz	r3, 8008740 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8008712:	bb01      	cbnz	r1, 8008756 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008714:	2100      	movs	r1, #0
 8008716:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008718:	aa01      	add	r2, sp, #4
 800871a:	f001 f918 	bl	800994e <xQueueReceiveFromISR>
 800871e:	2801      	cmp	r0, #1
 8008720:	d11c      	bne.n	800875c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008722:	9801      	ldr	r0, [sp, #4]
 8008724:	b150      	cbz	r0, 800873c <osSemaphoreAcquire+0x38>
 8008726:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800872a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800873a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800873c:	b002      	add	sp, #8
 800873e:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008740:	f001 f832 	bl	80097a8 <xQueueSemaphoreTake>
 8008744:	2801      	cmp	r0, #1
 8008746:	d00c      	beq.n	8008762 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 8008748:	b16c      	cbz	r4, 8008766 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800874a:	f06f 0001 	mvn.w	r0, #1
 800874e:	e7f5      	b.n	800873c <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 8008750:	f06f 0003 	mvn.w	r0, #3
}
 8008754:	4770      	bx	lr
      stat = osErrorParameter;
 8008756:	f06f 0003 	mvn.w	r0, #3
 800875a:	e7ef      	b.n	800873c <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800875c:	f06f 0002 	mvn.w	r0, #2
 8008760:	e7ec      	b.n	800873c <osSemaphoreAcquire+0x38>
  stat = osOK;
 8008762:	2000      	movs	r0, #0
 8008764:	e7ea      	b.n	800873c <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8008766:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800876a:	e7e7      	b.n	800873c <osSemaphoreAcquire+0x38>

0800876c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800876c:	b320      	cbz	r0, 80087b8 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800876e:	b500      	push	{lr}
 8008770:	b083      	sub	sp, #12
 8008772:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008776:	b1a3      	cbz	r3, 80087a2 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 8008778:	2300      	movs	r3, #0
 800877a:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800877c:	a901      	add	r1, sp, #4
 800877e:	f000 ff0b 	bl	8009598 <xQueueGiveFromISR>
 8008782:	2801      	cmp	r0, #1
 8008784:	d11b      	bne.n	80087be <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8008786:	9801      	ldr	r0, [sp, #4]
 8008788:	b198      	cbz	r0, 80087b2 <osSemaphoreRelease+0x46>
 800878a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800878e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008792:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800879e:	2000      	movs	r0, #0
 80087a0:	e007      	b.n	80087b2 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80087a2:	2300      	movs	r3, #0
 80087a4:	461a      	mov	r2, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	f000 fdcb 	bl	8009342 <xQueueGenericSend>
 80087ac:	2801      	cmp	r0, #1
 80087ae:	d109      	bne.n	80087c4 <osSemaphoreRelease+0x58>
  stat = osOK;
 80087b0:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80087b2:	b003      	add	sp, #12
 80087b4:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 80087b8:	f06f 0003 	mvn.w	r0, #3
}
 80087bc:	4770      	bx	lr
      stat = osErrorResource;
 80087be:	f06f 0002 	mvn.w	r0, #2
 80087c2:	e7f6      	b.n	80087b2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 80087c4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80087c8:	e7f3      	b.n	80087b2 <osSemaphoreRelease+0x46>

080087ca <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80087ca:	b570      	push	{r4, r5, r6, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d13d      	bne.n	8008852 <osMessageQueueNew+0x88>
 80087d6:	4614      	mov	r4, r2
 80087d8:	1e0b      	subs	r3, r1, #0
 80087da:	bf18      	it	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	2800      	cmp	r0, #0
 80087e0:	d03b      	beq.n	800885a <osMessageQueueNew+0x90>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d039      	beq.n	800885a <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 80087e6:	b36a      	cbz	r2, 8008844 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80087e8:	6893      	ldr	r3, [r2, #8]
 80087ea:	b14b      	cbz	r3, 8008800 <osMessageQueueNew+0x36>
 80087ec:	68d2      	ldr	r2, [r2, #12]
 80087ee:	2a4f      	cmp	r2, #79	; 0x4f
 80087f0:	d906      	bls.n	8008800 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80087f2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80087f4:	b122      	cbz	r2, 8008800 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80087f6:	fb01 f500 	mul.w	r5, r1, r0
 80087fa:	6966      	ldr	r6, [r4, #20]
 80087fc:	42ae      	cmp	r6, r5
 80087fe:	d21b      	bcs.n	8008838 <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008800:	b173      	cbz	r3, 8008820 <osMessageQueueNew+0x56>
    mem = -1;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8008806:	bb53      	cbnz	r3, 800885e <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008808:	2200      	movs	r2, #0
 800880a:	f000 fd35 	bl	8009278 <xQueueGenericCreate>
 800880e:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008810:	b305      	cbz	r5, 8008854 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 8008812:	b104      	cbz	r4, 8008816 <osMessageQueueNew+0x4c>
        name = attr->name;
 8008814:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f001 f8ed 	bl	80099f8 <vQueueAddToRegistry>
 800881e:	e019      	b.n	8008854 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008820:	68e3      	ldr	r3, [r4, #12]
 8008822:	b98b      	cbnz	r3, 8008848 <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008824:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008826:	b113      	cbz	r3, 800882e <osMessageQueueNew+0x64>
    mem = -1;
 8008828:	f04f 33ff 	mov.w	r3, #4294967295
 800882c:	e7eb      	b.n	8008806 <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800882e:	6963      	ldr	r3, [r4, #20]
 8008830:	b16b      	cbz	r3, 800884e <osMessageQueueNew+0x84>
    mem = -1;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
 8008836:	e7e6      	b.n	8008806 <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008838:	2500      	movs	r5, #0
 800883a:	9500      	str	r5, [sp, #0]
 800883c:	f000 fcc9 	bl	80091d2 <xQueueGenericCreateStatic>
 8008840:	4605      	mov	r5, r0
 8008842:	e7e5      	b.n	8008810 <osMessageQueueNew+0x46>
      mem = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	e7de      	b.n	8008806 <osMessageQueueNew+0x3c>
    mem = -1;
 8008848:	f04f 33ff 	mov.w	r3, #4294967295
 800884c:	e7db      	b.n	8008806 <osMessageQueueNew+0x3c>
          mem = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	e7d9      	b.n	8008806 <osMessageQueueNew+0x3c>
  hQueue = NULL;
 8008852:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008854:	4628      	mov	r0, r5
 8008856:	b002      	add	sp, #8
 8008858:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800885a:	2500      	movs	r5, #0
 800885c:	e7fa      	b.n	8008854 <osMessageQueueNew+0x8a>
 800885e:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8008860:	e7f8      	b.n	8008854 <osMessageQueueNew+0x8a>

08008862 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008862:	b510      	push	{r4, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	461c      	mov	r4, r3
 8008868:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800886c:	b1d3      	cbz	r3, 80088a4 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800886e:	2900      	cmp	r1, #0
 8008870:	bf18      	it	ne
 8008872:	2800      	cmpne	r0, #0
 8008874:	d024      	beq.n	80088c0 <osMessageQueuePut+0x5e>
 8008876:	bb34      	cbnz	r4, 80088c6 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008878:	2300      	movs	r3, #0
 800887a:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800887c:	aa01      	add	r2, sp, #4
 800887e:	f000 fe24 	bl	80094ca <xQueueGenericSendFromISR>
 8008882:	2801      	cmp	r0, #1
 8008884:	d122      	bne.n	80088cc <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008886:	9801      	ldr	r0, [sp, #4]
 8008888:	b150      	cbz	r0, 80088a0 <osMessageQueuePut+0x3e>
 800888a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800888e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008892:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800889e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80088a0:	b002      	add	sp, #8
 80088a2:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088a4:	2900      	cmp	r1, #0
 80088a6:	bf18      	it	ne
 80088a8:	2800      	cmpne	r0, #0
 80088aa:	d012      	beq.n	80088d2 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088ac:	2300      	movs	r3, #0
 80088ae:	4622      	mov	r2, r4
 80088b0:	f000 fd47 	bl	8009342 <xQueueGenericSend>
 80088b4:	2801      	cmp	r0, #1
 80088b6:	d00f      	beq.n	80088d8 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 80088b8:	b184      	cbz	r4, 80088dc <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 80088ba:	f06f 0001 	mvn.w	r0, #1
 80088be:	e7ef      	b.n	80088a0 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80088c0:	f06f 0003 	mvn.w	r0, #3
 80088c4:	e7ec      	b.n	80088a0 <osMessageQueuePut+0x3e>
 80088c6:	f06f 0003 	mvn.w	r0, #3
 80088ca:	e7e9      	b.n	80088a0 <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 80088cc:	f06f 0002 	mvn.w	r0, #2
 80088d0:	e7e6      	b.n	80088a0 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80088d2:	f06f 0003 	mvn.w	r0, #3
 80088d6:	e7e3      	b.n	80088a0 <osMessageQueuePut+0x3e>
  stat = osOK;
 80088d8:	2000      	movs	r0, #0
 80088da:	e7e1      	b.n	80088a0 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 80088dc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80088e0:	e7de      	b.n	80088a0 <osMessageQueuePut+0x3e>

080088e2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80088e2:	b510      	push	{r4, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	461c      	mov	r4, r3
 80088e8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80088ec:	b1d3      	cbz	r3, 8008924 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088ee:	2900      	cmp	r1, #0
 80088f0:	bf18      	it	ne
 80088f2:	2800      	cmpne	r0, #0
 80088f4:	d023      	beq.n	800893e <osMessageQueueGet+0x5c>
 80088f6:	bb2c      	cbnz	r4, 8008944 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80088f8:	2300      	movs	r3, #0
 80088fa:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80088fc:	aa01      	add	r2, sp, #4
 80088fe:	f001 f826 	bl	800994e <xQueueReceiveFromISR>
 8008902:	2801      	cmp	r0, #1
 8008904:	d121      	bne.n	800894a <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008906:	9801      	ldr	r0, [sp, #4]
 8008908:	b150      	cbz	r0, 8008920 <osMessageQueueGet+0x3e>
 800890a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800890e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008912:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800891e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008920:	b002      	add	sp, #8
 8008922:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008924:	2900      	cmp	r1, #0
 8008926:	bf18      	it	ne
 8008928:	2800      	cmpne	r0, #0
 800892a:	d011      	beq.n	8008950 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800892c:	4622      	mov	r2, r4
 800892e:	f000 fe8c 	bl	800964a <xQueueReceive>
 8008932:	2801      	cmp	r0, #1
 8008934:	d00f      	beq.n	8008956 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 8008936:	b184      	cbz	r4, 800895a <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 8008938:	f06f 0001 	mvn.w	r0, #1
 800893c:	e7f0      	b.n	8008920 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800893e:	f06f 0003 	mvn.w	r0, #3
 8008942:	e7ed      	b.n	8008920 <osMessageQueueGet+0x3e>
 8008944:	f06f 0003 	mvn.w	r0, #3
 8008948:	e7ea      	b.n	8008920 <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800894a:	f06f 0002 	mvn.w	r0, #2
 800894e:	e7e7      	b.n	8008920 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 8008950:	f06f 0003 	mvn.w	r0, #3
 8008954:	e7e4      	b.n	8008920 <osMessageQueueGet+0x3e>
  stat = osOK;
 8008956:	2000      	movs	r0, #0
 8008958:	e7e2      	b.n	8008920 <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800895a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800895e:	e7df      	b.n	8008920 <osMessageQueueGet+0x3e>

08008960 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008960:	4b03      	ldr	r3, [pc, #12]	; (8008970 <vApplicationGetIdleTaskMemory+0x10>)
 8008962:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008964:	4b03      	ldr	r3, [pc, #12]	; (8008974 <vApplicationGetIdleTaskMemory+0x14>)
 8008966:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	6013      	str	r3, [r2, #0]
}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	240021e8 	.word	0x240021e8
 8008974:	24001fe8 	.word	0x24001fe8

08008978 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008978:	4b03      	ldr	r3, [pc, #12]	; (8008988 <vApplicationGetTimerTaskMemory+0x10>)
 800897a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800897c:	4b03      	ldr	r3, [pc, #12]	; (800898c <vApplicationGetTimerTaskMemory+0x14>)
 800897e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008984:	6013      	str	r3, [r2, #0]
}
 8008986:	4770      	bx	lr
 8008988:	240026a8 	.word	0x240026a8
 800898c:	240022a8 	.word	0x240022a8

08008990 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008990:	4a12      	ldr	r2, [pc, #72]	; (80089dc <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008992:	f012 0f07 	tst.w	r2, #7
 8008996:	d01e      	beq.n	80089d6 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008998:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800899a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800899e:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 80089a2:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a4:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089a6:	480e      	ldr	r0, [pc, #56]	; (80089e0 <prvHeapInit+0x50>)
 80089a8:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089aa:	2100      	movs	r1, #0
 80089ac:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089ae:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80089b0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089b2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80089b6:	480b      	ldr	r0, [pc, #44]	; (80089e4 <prvHeapInit+0x54>)
 80089b8:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80089ba:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089bc:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089be:	1a99      	subs	r1, r3, r2
 80089c0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089c2:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089c4:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <prvHeapInit+0x58>)
 80089c6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089c8:	4b08      	ldr	r3, [pc, #32]	; (80089ec <prvHeapInit+0x5c>)
 80089ca:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089cc:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <prvHeapInit+0x60>)
 80089ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089d2:	601a      	str	r2, [r3, #0]
}
 80089d4:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089da:	e7e4      	b.n	80089a6 <prvHeapInit+0x16>
 80089dc:	24002768 	.word	0x24002768
 80089e0:	2400a77c 	.word	0x2400a77c
 80089e4:	24002764 	.word	0x24002764
 80089e8:	2400a770 	.word	0x2400a770
 80089ec:	2400a76c 	.word	0x2400a76c
 80089f0:	2400a768 	.word	0x2400a768

080089f4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089f4:	4b16      	ldr	r3, [pc, #88]	; (8008a50 <prvInsertBlockIntoFreeList+0x5c>)
 80089f6:	461a      	mov	r2, r3
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4283      	cmp	r3, r0
 80089fc:	d3fb      	bcc.n	80089f6 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089fe:	6851      	ldr	r1, [r2, #4]
 8008a00:	eb02 0c01 	add.w	ip, r2, r1
 8008a04:	4584      	cmp	ip, r0
 8008a06:	d009      	beq.n	8008a1c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a08:	6841      	ldr	r1, [r0, #4]
 8008a0a:	eb00 0c01 	add.w	ip, r0, r1
 8008a0e:	4563      	cmp	r3, ip
 8008a10:	d009      	beq.n	8008a26 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a12:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a14:	4290      	cmp	r0, r2
 8008a16:	d019      	beq.n	8008a4c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a18:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8008a1a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a1c:	6840      	ldr	r0, [r0, #4]
 8008a1e:	4401      	add	r1, r0
 8008a20:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8008a22:	4610      	mov	r0, r2
 8008a24:	e7f0      	b.n	8008a08 <prvInsertBlockIntoFreeList+0x14>
{
 8008a26:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a28:	4c0a      	ldr	r4, [pc, #40]	; (8008a54 <prvInsertBlockIntoFreeList+0x60>)
 8008a2a:	6824      	ldr	r4, [r4, #0]
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d00b      	beq.n	8008a48 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	4419      	add	r1, r3
 8008a34:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008a3c:	4290      	cmp	r0, r2
 8008a3e:	d000      	beq.n	8008a42 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a40:	6010      	str	r0, [r2, #0]
	}
}
 8008a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a46:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a48:	6004      	str	r4, [r0, #0]
 8008a4a:	e7f7      	b.n	8008a3c <prvInsertBlockIntoFreeList+0x48>
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	2400a77c 	.word	0x2400a77c
 8008a54:	24002764 	.word	0x24002764

08008a58 <pvPortMalloc>:
{
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8008a5c:	f001 faa0 	bl	8009fa0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008a60:	4b36      	ldr	r3, [pc, #216]	; (8008b3c <pvPortMalloc+0xe4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	b1a3      	cbz	r3, 8008a90 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a66:	4b36      	ldr	r3, [pc, #216]	; (8008b40 <pvPortMalloc+0xe8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	421d      	tst	r5, r3
 8008a6c:	d14e      	bne.n	8008b0c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8008a6e:	b135      	cbz	r5, 8008a7e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8008a70:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a72:	f015 0f07 	tst.w	r5, #7
 8008a76:	d002      	beq.n	8008a7e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a78:	f025 0507 	bic.w	r5, r5, #7
 8008a7c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	d046      	beq.n	8008b10 <pvPortMalloc+0xb8>
 8008a82:	4b30      	ldr	r3, [pc, #192]	; (8008b44 <pvPortMalloc+0xec>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	42ab      	cmp	r3, r5
 8008a88:	d351      	bcc.n	8008b2e <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8008a8a:	4a2f      	ldr	r2, [pc, #188]	; (8008b48 <pvPortMalloc+0xf0>)
 8008a8c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a8e:	e004      	b.n	8008a9a <pvPortMalloc+0x42>
			prvHeapInit();
 8008a90:	f7ff ff7e 	bl	8008990 <prvHeapInit>
 8008a94:	e7e7      	b.n	8008a66 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8008a96:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a98:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a9a:	6863      	ldr	r3, [r4, #4]
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	d202      	bcs.n	8008aa6 <pvPortMalloc+0x4e>
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1f7      	bne.n	8008a96 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008aa6:	4b25      	ldr	r3, [pc, #148]	; (8008b3c <pvPortMalloc+0xe4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	d041      	beq.n	8008b32 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aae:	6816      	ldr	r6, [r2, #0]
 8008ab0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ab6:	6863      	ldr	r3, [r4, #4]
 8008ab8:	1b5b      	subs	r3, r3, r5
 8008aba:	2b10      	cmp	r3, #16
 8008abc:	d910      	bls.n	8008ae0 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008abe:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac0:	f010 0f07 	tst.w	r0, #7
 8008ac4:	d008      	beq.n	8008ad8 <pvPortMalloc+0x80>
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	e7fe      	b.n	8008ad6 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ad8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ada:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008adc:	f7ff ff8a 	bl	80089f4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ae0:	6862      	ldr	r2, [r4, #4]
 8008ae2:	4918      	ldr	r1, [pc, #96]	; (8008b44 <pvPortMalloc+0xec>)
 8008ae4:	680b      	ldr	r3, [r1, #0]
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008aea:	4918      	ldr	r1, [pc, #96]	; (8008b4c <pvPortMalloc+0xf4>)
 8008aec:	6809      	ldr	r1, [r1, #0]
 8008aee:	428b      	cmp	r3, r1
 8008af0:	d201      	bcs.n	8008af6 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008af2:	4916      	ldr	r1, [pc, #88]	; (8008b4c <pvPortMalloc+0xf4>)
 8008af4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008af6:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <pvPortMalloc+0xe8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8008b02:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <pvPortMalloc+0xf8>)
 8008b04:	6813      	ldr	r3, [r2, #0]
 8008b06:	3301      	adds	r3, #1
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	e002      	b.n	8008b12 <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	e000      	b.n	8008b12 <pvPortMalloc+0xba>
 8008b10:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8008b12:	f001 fadf 	bl	800a0d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b16:	f016 0f07 	tst.w	r6, #7
 8008b1a:	d00c      	beq.n	8008b36 <pvPortMalloc+0xde>
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	e7fe      	b.n	8008b2c <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8008b2e:	2600      	movs	r6, #0
 8008b30:	e7ef      	b.n	8008b12 <pvPortMalloc+0xba>
 8008b32:	2600      	movs	r6, #0
 8008b34:	e7ed      	b.n	8008b12 <pvPortMalloc+0xba>
}
 8008b36:	4630      	mov	r0, r6
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
 8008b3a:	bf00      	nop
 8008b3c:	24002764 	.word	0x24002764
 8008b40:	2400a768 	.word	0x2400a768
 8008b44:	2400a76c 	.word	0x2400a76c
 8008b48:	2400a77c 	.word	0x2400a77c
 8008b4c:	2400a770 	.word	0x2400a770
 8008b50:	2400a774 	.word	0x2400a774

08008b54 <vPortFree>:
	if( pv != NULL )
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d034      	beq.n	8008bc2 <vPortFree+0x6e>
{
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008b5c:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b60:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008b64:	4a17      	ldr	r2, [pc, #92]	; (8008bc4 <vPortFree+0x70>)
 8008b66:	6812      	ldr	r2, [r2, #0]
 8008b68:	4213      	tst	r3, r2
 8008b6a:	d108      	bne.n	8008b7e <vPortFree+0x2a>
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	e7fe      	b.n	8008b7c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b7e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008b82:	b141      	cbz	r1, 8008b96 <vPortFree+0x42>
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	e7fe      	b.n	8008b94 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b96:	ea23 0302 	bic.w	r3, r3, r2
 8008b9a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008b9e:	f001 f9ff 	bl	8009fa0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ba2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008ba6:	4a08      	ldr	r2, [pc, #32]	; (8008bc8 <vPortFree+0x74>)
 8008ba8:	6813      	ldr	r3, [r2, #0]
 8008baa:	440b      	add	r3, r1
 8008bac:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f7ff ff20 	bl	80089f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bb4:	4a05      	ldr	r2, [pc, #20]	; (8008bcc <vPortFree+0x78>)
 8008bb6:	6813      	ldr	r3, [r2, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008bbc:	f001 fa8a 	bl	800a0d4 <xTaskResumeAll>
}
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	4770      	bx	lr
 8008bc4:	2400a768 	.word	0x2400a768
 8008bc8:	2400a76c 	.word	0x2400a76c
 8008bcc:	2400a778 	.word	0x2400a778

08008bd0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd0:	f100 0308 	add.w	r3, r0, #8
 8008bd4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bda:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bdc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bde:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008be4:	4770      	bx	lr

08008be6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bea:	4770      	bx	lr

08008bec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bf4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bf6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bf8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008bfa:	6803      	ldr	r3, [r0, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	6003      	str	r3, [r0, #0]
}
 8008c00:	4770      	bx	lr

08008c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c02:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c04:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c06:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008c0a:	d011      	beq.n	8008c30 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c0c:	f100 0308 	add.w	r3, r0, #8
 8008c10:	461c      	mov	r4, r3
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	42aa      	cmp	r2, r5
 8008c18:	d9fa      	bls.n	8008c10 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c1a:	6863      	ldr	r3, [r4, #4]
 8008c1c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c1e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c20:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c22:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c24:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008c26:	6803      	ldr	r3, [r0, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	6003      	str	r3, [r0, #0]
}
 8008c2c:	bc30      	pop	{r4, r5}
 8008c2e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c30:	6904      	ldr	r4, [r0, #16]
 8008c32:	e7f2      	b.n	8008c1a <vListInsert+0x18>

08008c34 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c34:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c36:	6841      	ldr	r1, [r0, #4]
 8008c38:	6882      	ldr	r2, [r0, #8]
 8008c3a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c3c:	6841      	ldr	r1, [r0, #4]
 8008c3e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	4282      	cmp	r2, r0
 8008c44:	d006      	beq.n	8008c54 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c46:	2200      	movs	r2, #0
 8008c48:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	3a01      	subs	r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c50:	6818      	ldr	r0, [r3, #0]
}
 8008c52:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c54:	6882      	ldr	r2, [r0, #8]
 8008c56:	605a      	str	r2, [r3, #4]
 8008c58:	e7f5      	b.n	8008c46 <uxListRemove+0x12>
	...

08008c5c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c5c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c62:	4b0d      	ldr	r3, [pc, #52]	; (8008c98 <prvTaskExitError+0x3c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6a:	d008      	beq.n	8008c7e <prvTaskExitError+0x22>
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	e7fe      	b.n	8008c7c <prvTaskExitError+0x20>
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c8e:	9b01      	ldr	r3, [sp, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0fc      	beq.n	8008c8e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c94:	b002      	add	sp, #8
 8008c96:	4770      	bx	lr
 8008c98:	2400004c 	.word	0x2400004c

08008c9c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c9c:	4808      	ldr	r0, [pc, #32]	; (8008cc0 <prvPortStartFirstTask+0x24>)
 8008c9e:	6800      	ldr	r0, [r0, #0]
 8008ca0:	6800      	ldr	r0, [r0, #0]
 8008ca2:	f380 8808 	msr	MSP, r0
 8008ca6:	f04f 0000 	mov.w	r0, #0
 8008caa:	f380 8814 	msr	CONTROL, r0
 8008cae:	b662      	cpsie	i
 8008cb0:	b661      	cpsie	f
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	df00      	svc	0
 8008cbc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cbe:	0000      	.short	0x0000
 8008cc0:	e000ed08 	.word	0xe000ed08

08008cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cd4 <vPortEnableVFP+0x10>
 8008cc8:	6801      	ldr	r1, [r0, #0]
 8008cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cce:	6001      	str	r1, [r0, #0]
 8008cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cd2:	0000      	.short	0x0000
 8008cd4:	e000ed88 	.word	0xe000ed88

08008cd8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cdc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ce0:	f021 0101 	bic.w	r1, r1, #1
 8008ce4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <pxPortInitialiseStack+0x28>)
 8008cea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cf2:	f06f 0302 	mvn.w	r3, #2
 8008cf6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8008cfa:	3844      	subs	r0, #68	; 0x44
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	08008c5d 	.word	0x08008c5d
	...

08008d10 <SVC_Handler>:
	__asm volatile (
 8008d10:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <pxCurrentTCBConst2>)
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	6808      	ldr	r0, [r1, #0]
 8008d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	f380 8809 	msr	PSP, r0
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f04f 0000 	mov.w	r0, #0
 8008d26:	f380 8811 	msr	BASEPRI, r0
 8008d2a:	4770      	bx	lr
 8008d2c:	f3af 8000 	nop.w

08008d30 <pxCurrentTCBConst2>:
 8008d30:	2400a7cc 	.word	0x2400a7cc

08008d34 <vPortEnterCritical>:
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008d44:	4a0b      	ldr	r2, [pc, #44]	; (8008d74 <vPortEnterCritical+0x40>)
 8008d46:	6813      	ldr	r3, [r2, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d000      	beq.n	8008d52 <vPortEnterCritical+0x1e>
}
 8008d50:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d56:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008d5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d5e:	d0f7      	beq.n	8008d50 <vPortEnterCritical+0x1c>
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	e7fe      	b.n	8008d70 <vPortEnterCritical+0x3c>
 8008d72:	bf00      	nop
 8008d74:	2400004c 	.word	0x2400004c

08008d78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <vPortExitCritical+0x28>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	b943      	cbnz	r3, 8008d90 <vPortExitCritical+0x18>
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	e7fe      	b.n	8008d8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4a03      	ldr	r2, [pc, #12]	; (8008da0 <vPortExitCritical+0x28>)
 8008d94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d96:	b90b      	cbnz	r3, 8008d9c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d98:	f383 8811 	msr	BASEPRI, r3
}
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	2400004c 	.word	0x2400004c
	...

08008db0 <PendSV_Handler>:
	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f001 fa1a 	bl	800a218 <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	2400a7cc 	.word	0x2400a7cc

08008e14 <xPortSysTickHandler>:
{
 8008e14:	b508      	push	{r3, lr}
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008e26:	f001 f8c9 	bl	8009fbc <xTaskIncrementTick>
 8008e2a:	b128      	cbz	r0, 8008e38 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f383 8811 	msr	BASEPRI, r3
}
 8008e3e:	bd08      	pop	{r3, pc}

08008e40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e40:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008e44:	2300      	movs	r3, #0
 8008e46:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e48:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e4a:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <vPortSetupTimerInterrupt+0x20>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4905      	ldr	r1, [pc, #20]	; (8008e64 <vPortSetupTimerInterrupt+0x24>)
 8008e50:	fba1 1303 	umull	r1, r3, r1, r3
 8008e54:	099b      	lsrs	r3, r3, #6
 8008e56:	3b01      	subs	r3, #1
 8008e58:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e5a:	2307      	movs	r3, #7
 8008e5c:	6113      	str	r3, [r2, #16]
}
 8008e5e:	4770      	bx	lr
 8008e60:	2400003c 	.word	0x2400003c
 8008e64:	10624dd3 	.word	0x10624dd3

08008e68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e6c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008e70:	4b3d      	ldr	r3, [pc, #244]	; (8008f68 <xPortStartScheduler+0x100>)
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d01c      	beq.n	8008eb0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e7a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008e7e:	4b3b      	ldr	r3, [pc, #236]	; (8008f6c <xPortStartScheduler+0x104>)
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d01e      	beq.n	8008ec2 <xPortStartScheduler+0x5a>
{
 8008e84:	b530      	push	{r4, r5, lr}
 8008e86:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e88:	4b39      	ldr	r3, [pc, #228]	; (8008f70 <xPortStartScheduler+0x108>)
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	b2d2      	uxtb	r2, r2
 8008e8e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e90:	22ff      	movs	r2, #255	; 0xff
 8008e92:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ea0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ea4:	4a33      	ldr	r2, [pc, #204]	; (8008f74 <xPortStartScheduler+0x10c>)
 8008ea6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ea8:	4b33      	ldr	r3, [pc, #204]	; (8008f78 <xPortStartScheduler+0x110>)
 8008eaa:	2207      	movs	r2, #7
 8008eac:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eae:	e01b      	b.n	8008ee8 <xPortStartScheduler+0x80>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ec0:	e7fe      	b.n	8008ec0 <xPortStartScheduler+0x58>
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ed2:	e7fe      	b.n	8008ed2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8008ed4:	4a28      	ldr	r2, [pc, #160]	; (8008f78 <xPortStartScheduler+0x110>)
 8008ed6:	6813      	ldr	r3, [r2, #0]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008edc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ee8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008eec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ef0:	d1f0      	bne.n	8008ed4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ef2:	4b21      	ldr	r3, [pc, #132]	; (8008f78 <xPortStartScheduler+0x110>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d008      	beq.n	8008f0c <xPortStartScheduler+0xa4>
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	e7fe      	b.n	8008f0a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	4a1a      	ldr	r2, [pc, #104]	; (8008f78 <xPortStartScheduler+0x110>)
 8008f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f16:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f18:	9b01      	ldr	r3, [sp, #4]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	4a14      	ldr	r2, [pc, #80]	; (8008f70 <xPortStartScheduler+0x108>)
 8008f1e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f20:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008f24:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f2c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f30:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008f34:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f38:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008f3c:	f7ff ff80 	bl	8008e40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008f40:	2500      	movs	r5, #0
 8008f42:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <xPortStartScheduler+0x114>)
 8008f44:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008f46:	f7ff febd 	bl	8008cc4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f4a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008f4e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f52:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008f56:	f7ff fea1 	bl	8008c9c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008f5a:	f001 f95d 	bl	800a218 <vTaskSwitchContext>
	prvTaskExitError();
 8008f5e:	f7ff fe7d 	bl	8008c5c <prvTaskExitError>
}
 8008f62:	4628      	mov	r0, r5
 8008f64:	b003      	add	sp, #12
 8008f66:	bd30      	pop	{r4, r5, pc}
 8008f68:	410fc271 	.word	0x410fc271
 8008f6c:	410fc270 	.word	0x410fc270
 8008f70:	e000e400 	.word	0xe000e400
 8008f74:	2400a784 	.word	0x2400a784
 8008f78:	2400a788 	.word	0x2400a788
 8008f7c:	2400004c 	.word	0x2400004c

08008f80 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f80:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f84:	2b0f      	cmp	r3, #15
 8008f86:	d90f      	bls.n	8008fa8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f88:	4a11      	ldr	r2, [pc, #68]	; (8008fd0 <vPortValidateInterruptPriority+0x50>)
 8008f8a:	5c9b      	ldrb	r3, [r3, r2]
 8008f8c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f8e:	4a11      	ldr	r2, [pc, #68]	; (8008fd4 <vPortValidateInterruptPriority+0x54>)
 8008f90:	7812      	ldrb	r2, [r2, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d908      	bls.n	8008fa8 <vPortValidateInterruptPriority+0x28>
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	e7fe      	b.n	8008fa6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fa8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008fac:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fb4:	4a08      	ldr	r2, [pc, #32]	; (8008fd8 <vPortValidateInterruptPriority+0x58>)
 8008fb6:	6812      	ldr	r2, [r2, #0]
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d908      	bls.n	8008fce <vPortValidateInterruptPriority+0x4e>
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	e7fe      	b.n	8008fcc <vPortValidateInterruptPriority+0x4c>
	}
 8008fce:	4770      	bx	lr
 8008fd0:	e000e3f0 	.word	0xe000e3f0
 8008fd4:	2400a784 	.word	0x2400a784
 8008fd8:	2400a788 	.word	0x2400a788

08008fdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008fdc:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008fde:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008fe0:	b118      	cbz	r0, 8008fea <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8008fea:	4770      	bx	lr

08008fec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fec:	b510      	push	{r4, lr}
 8008fee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ff0:	f7ff fea0 	bl	8008d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ff4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ff6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d004      	beq.n	8009006 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008ffc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008ffe:	f7ff febb 	bl	8008d78 <vPortExitCritical>

	return xReturn;
}
 8009002:	4620      	mov	r0, r4
 8009004:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009006:	2401      	movs	r4, #1
 8009008:	e7f9      	b.n	8008ffe <prvIsQueueFull+0x12>

0800900a <prvIsQueueEmpty>:
{
 800900a:	b510      	push	{r4, lr}
 800900c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800900e:	f7ff fe91 	bl	8008d34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009012:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009014:	b923      	cbnz	r3, 8009020 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009016:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009018:	f7ff feae 	bl	8008d78 <vPortExitCritical>
}
 800901c:	4620      	mov	r0, r4
 800901e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8009020:	2400      	movs	r4, #0
 8009022:	e7f9      	b.n	8009018 <prvIsQueueEmpty+0xe>

08009024 <prvCopyDataToQueue>:
{
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	4604      	mov	r4, r0
 8009028:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800902a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800902c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800902e:	b95a      	cbnz	r2, 8009048 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009030:	6803      	ldr	r3, [r0, #0]
 8009032:	b11b      	cbz	r3, 800903c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009034:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009036:	3601      	adds	r6, #1
 8009038:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800903a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800903c:	6880      	ldr	r0, [r0, #8]
 800903e:	f001 fa65 	bl	800a50c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	60a3      	str	r3, [r4, #8]
 8009046:	e7f6      	b.n	8009036 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009048:	b96d      	cbnz	r5, 8009066 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800904a:	6840      	ldr	r0, [r0, #4]
 800904c:	f00e ff3a 	bl	8017ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009050:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009052:	6863      	ldr	r3, [r4, #4]
 8009054:	4413      	add	r3, r2
 8009056:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009058:	68a2      	ldr	r2, [r4, #8]
 800905a:	4293      	cmp	r3, r2
 800905c:	d319      	bcc.n	8009092 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009062:	4628      	mov	r0, r5
 8009064:	e7e7      	b.n	8009036 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009066:	68c0      	ldr	r0, [r0, #12]
 8009068:	f00e ff2c 	bl	8017ec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800906c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800906e:	4251      	negs	r1, r2
 8009070:	68e3      	ldr	r3, [r4, #12]
 8009072:	1a9b      	subs	r3, r3, r2
 8009074:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	4293      	cmp	r3, r2
 800907a:	d202      	bcs.n	8009082 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	440b      	add	r3, r1
 8009080:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009082:	2d02      	cmp	r5, #2
 8009084:	d001      	beq.n	800908a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009086:	2000      	movs	r0, #0
 8009088:	e7d5      	b.n	8009036 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800908a:	b126      	cbz	r6, 8009096 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800908c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800908e:	2000      	movs	r0, #0
 8009090:	e7d1      	b.n	8009036 <prvCopyDataToQueue+0x12>
 8009092:	4628      	mov	r0, r5
 8009094:	e7cf      	b.n	8009036 <prvCopyDataToQueue+0x12>
 8009096:	2000      	movs	r0, #0
 8009098:	e7cd      	b.n	8009036 <prvCopyDataToQueue+0x12>

0800909a <prvCopyDataFromQueue>:
{
 800909a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800909c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800909e:	b16a      	cbz	r2, 80090bc <prvCopyDataFromQueue+0x22>
{
 80090a0:	b510      	push	{r4, lr}
 80090a2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090a4:	68d9      	ldr	r1, [r3, #12]
 80090a6:	4411      	add	r1, r2
 80090a8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090aa:	689c      	ldr	r4, [r3, #8]
 80090ac:	42a1      	cmp	r1, r4
 80090ae:	d301      	bcc.n	80090b4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090b0:	6819      	ldr	r1, [r3, #0]
 80090b2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090b4:	68d9      	ldr	r1, [r3, #12]
 80090b6:	f00e ff05 	bl	8017ec4 <memcpy>
}
 80090ba:	bd10      	pop	{r4, pc}
 80090bc:	4770      	bx	lr

080090be <prvUnlockQueue>:
{
 80090be:	b538      	push	{r3, r4, r5, lr}
 80090c0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80090c2:	f7ff fe37 	bl	8008d34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80090c6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80090ca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090cc:	e001      	b.n	80090d2 <prvUnlockQueue+0x14>
			--cTxLock;
 80090ce:	3c01      	subs	r4, #1
 80090d0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090d2:	2c00      	cmp	r4, #0
 80090d4:	dd0a      	ble.n	80090ec <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090d8:	b143      	cbz	r3, 80090ec <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090da:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80090de:	f001 f91f 	bl	800a320 <xTaskRemoveFromEventList>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d0f3      	beq.n	80090ce <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80090e6:	f001 f9af 	bl	800a448 <vTaskMissedYield>
 80090ea:	e7f0      	b.n	80090ce <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80090ec:	23ff      	movs	r3, #255	; 0xff
 80090ee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80090f2:	f7ff fe41 	bl	8008d78 <vPortExitCritical>
	taskENTER_CRITICAL();
 80090f6:	f7ff fe1d 	bl	8008d34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80090fa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80090fe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009100:	e001      	b.n	8009106 <prvUnlockQueue+0x48>
				--cRxLock;
 8009102:	3c01      	subs	r4, #1
 8009104:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009106:	2c00      	cmp	r4, #0
 8009108:	dd0a      	ble.n	8009120 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800910a:	692b      	ldr	r3, [r5, #16]
 800910c:	b143      	cbz	r3, 8009120 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800910e:	f105 0010 	add.w	r0, r5, #16
 8009112:	f001 f905 	bl	800a320 <xTaskRemoveFromEventList>
 8009116:	2800      	cmp	r0, #0
 8009118:	d0f3      	beq.n	8009102 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800911a:	f001 f995 	bl	800a448 <vTaskMissedYield>
 800911e:	e7f0      	b.n	8009102 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009120:	23ff      	movs	r3, #255	; 0xff
 8009122:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009126:	f7ff fe27 	bl	8008d78 <vPortExitCritical>
}
 800912a:	bd38      	pop	{r3, r4, r5, pc}

0800912c <xQueueGenericReset>:
{
 800912c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800912e:	b1e0      	cbz	r0, 800916a <xQueueGenericReset+0x3e>
 8009130:	460d      	mov	r5, r1
 8009132:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009134:	f7ff fdfe 	bl	8008d34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800913c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800913e:	fb01 3002 	mla	r0, r1, r2, r3
 8009142:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009144:	2000      	movs	r0, #0
 8009146:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009148:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800914a:	3a01      	subs	r2, #1
 800914c:	fb02 3301 	mla	r3, r2, r1, r3
 8009150:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009152:	23ff      	movs	r3, #255	; 0xff
 8009154:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009158:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800915c:	b9fd      	cbnz	r5, 800919e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800915e:	6923      	ldr	r3, [r4, #16]
 8009160:	b963      	cbnz	r3, 800917c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009162:	f7ff fe09 	bl	8008d78 <vPortExitCritical>
}
 8009166:	2001      	movs	r0, #1
 8009168:	bd38      	pop	{r3, r4, r5, pc}
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800917a:	e7fe      	b.n	800917a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800917c:	f104 0010 	add.w	r0, r4, #16
 8009180:	f001 f8ce 	bl	800a320 <xTaskRemoveFromEventList>
 8009184:	2800      	cmp	r0, #0
 8009186:	d0ec      	beq.n	8009162 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009188:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800918c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009190:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	e7e1      	b.n	8009162 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800919e:	f104 0010 	add.w	r0, r4, #16
 80091a2:	f7ff fd15 	bl	8008bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091aa:	f7ff fd11 	bl	8008bd0 <vListInitialise>
 80091ae:	e7d8      	b.n	8009162 <xQueueGenericReset+0x36>

080091b0 <prvInitialiseNewQueue>:
{
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	461d      	mov	r5, r3
 80091b4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80091b6:	460b      	mov	r3, r1
 80091b8:	b949      	cbnz	r1, 80091ce <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091ba:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80091bc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091be:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091c0:	2101      	movs	r1, #1
 80091c2:	4620      	mov	r0, r4
 80091c4:	f7ff ffb2 	bl	800912c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80091c8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091ce:	6022      	str	r2, [r4, #0]
 80091d0:	e7f4      	b.n	80091bc <prvInitialiseNewQueue+0xc>

080091d2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091d2:	b940      	cbnz	r0, 80091e6 <xQueueGenericCreateStatic+0x14>
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	e7fe      	b.n	80091e4 <xQueueGenericCreateStatic+0x12>
	{
 80091e6:	b510      	push	{r4, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 80091ec:	b183      	cbz	r3, 8009210 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091ee:	1e0b      	subs	r3, r1, #0
 80091f0:	bf18      	it	ne
 80091f2:	2301      	movne	r3, #1
 80091f4:	2a00      	cmp	r2, #0
 80091f6:	bf08      	it	eq
 80091f8:	f043 0301 	orreq.w	r3, r3, #1
 80091fc:	b98b      	cbnz	r3, 8009222 <xQueueGenericCreateStatic+0x50>
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	e7fe      	b.n	800920e <xQueueGenericCreateStatic+0x3c>
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009220:	e7fe      	b.n	8009220 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009222:	fab1 f381 	clz	r3, r1
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	2a00      	cmp	r2, #0
 800922a:	bf18      	it	ne
 800922c:	f043 0301 	orrne.w	r3, r3, #1
 8009230:	b943      	cbnz	r3, 8009244 <xQueueGenericCreateStatic+0x72>
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	e7fe      	b.n	8009242 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009244:	2350      	movs	r3, #80	; 0x50
 8009246:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	2b50      	cmp	r3, #80	; 0x50
 800924c:	d008      	beq.n	8009260 <xQueueGenericCreateStatic+0x8e>
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	e7fe      	b.n	800925e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009260:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009262:	2301      	movs	r3, #1
 8009264:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009268:	9400      	str	r4, [sp, #0]
 800926a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800926e:	f7ff ff9f 	bl	80091b0 <prvInitialiseNewQueue>
	}
 8009272:	4620      	mov	r0, r4
 8009274:	b004      	add	sp, #16
 8009276:	bd10      	pop	{r4, pc}

08009278 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009278:	b940      	cbnz	r0, 800928c <xQueueGenericCreate+0x14>
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	e7fe      	b.n	800928a <xQueueGenericCreate+0x12>
	{
 800928c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800928e:	b083      	sub	sp, #12
 8009290:	460d      	mov	r5, r1
 8009292:	4614      	mov	r4, r2
 8009294:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009296:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800929a:	3050      	adds	r0, #80	; 0x50
 800929c:	f7ff fbdc 	bl	8008a58 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80092a0:	4607      	mov	r7, r0
 80092a2:	b150      	cbz	r0, 80092ba <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092aa:	9000      	str	r0, [sp, #0]
 80092ac:	4623      	mov	r3, r4
 80092ae:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80092b2:	4629      	mov	r1, r5
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7ff ff7b 	bl	80091b0 <prvInitialiseNewQueue>
	}
 80092ba:	4638      	mov	r0, r7
 80092bc:	b003      	add	sp, #12
 80092be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092c0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80092c0:	b940      	cbnz	r0, 80092d4 <xQueueCreateCountingSemaphoreStatic+0x14>
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	e7fe      	b.n	80092d2 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 80092d4:	b510      	push	{r4, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80092da:	4288      	cmp	r0, r1
 80092dc:	d208      	bcs.n	80092f0 <xQueueCreateCountingSemaphoreStatic+0x30>
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	e7fe      	b.n	80092ee <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80092f0:	2302      	movs	r3, #2
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	4613      	mov	r3, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	4611      	mov	r1, r2
 80092fa:	f7ff ff6a 	bl	80091d2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80092fe:	b100      	cbz	r0, 8009302 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009300:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009302:	b002      	add	sp, #8
 8009304:	bd10      	pop	{r4, pc}

08009306 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8009306:	b940      	cbnz	r0, 800931a <xQueueCreateCountingSemaphore+0x14>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	e7fe      	b.n	8009318 <xQueueCreateCountingSemaphore+0x12>
	{
 800931a:	b510      	push	{r4, lr}
 800931c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800931e:	4288      	cmp	r0, r1
 8009320:	d208      	bcs.n	8009334 <xQueueCreateCountingSemaphore+0x2e>
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	e7fe      	b.n	8009332 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009334:	2202      	movs	r2, #2
 8009336:	2100      	movs	r1, #0
 8009338:	f7ff ff9e 	bl	8009278 <xQueueGenericCreate>
		if( xHandle != NULL )
 800933c:	b100      	cbz	r0, 8009340 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800933e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009340:	bd10      	pop	{r4, pc}

08009342 <xQueueGenericSend>:
{
 8009342:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009344:	b085      	sub	sp, #20
 8009346:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009348:	b188      	cbz	r0, 800936e <xQueueGenericSend+0x2c>
 800934a:	460f      	mov	r7, r1
 800934c:	461d      	mov	r5, r3
 800934e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009350:	b1b1      	cbz	r1, 8009380 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009352:	2d02      	cmp	r5, #2
 8009354:	d120      	bne.n	8009398 <xQueueGenericSend+0x56>
 8009356:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009358:	2b01      	cmp	r3, #1
 800935a:	d01d      	beq.n	8009398 <xQueueGenericSend+0x56>
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	e7fe      	b.n	800936c <xQueueGenericSend+0x2a>
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800937e:	e7fe      	b.n	800937e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009380:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0e5      	beq.n	8009352 <xQueueGenericSend+0x10>
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	e7fe      	b.n	8009396 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009398:	f001 f85c 	bl	800a454 <xTaskGetSchedulerState>
 800939c:	4606      	mov	r6, r0
 800939e:	b958      	cbnz	r0, 80093b8 <xQueueGenericSend+0x76>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d048      	beq.n	8009438 <xQueueGenericSend+0xf6>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	e7fe      	b.n	80093b6 <xQueueGenericSend+0x74>
 80093b8:	2600      	movs	r6, #0
 80093ba:	e03d      	b.n	8009438 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093bc:	462a      	mov	r2, r5
 80093be:	4639      	mov	r1, r7
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7ff fe2f 	bl	8009024 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c8:	b97b      	cbnz	r3, 80093ea <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80093ca:	b148      	cbz	r0, 80093e0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80093cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80093d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80093e0:	f7ff fcca 	bl	8008d78 <vPortExitCritical>
				return pdPASS;
 80093e4:	2001      	movs	r0, #1
}
 80093e6:	b005      	add	sp, #20
 80093e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093ee:	f000 ff97 	bl	800a320 <xTaskRemoveFromEventList>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0f4      	beq.n	80093e0 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80093f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80093fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	e7e9      	b.n	80093e0 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800940c:	f7ff fcb4 	bl	8008d78 <vPortExitCritical>
					return errQUEUE_FULL;
 8009410:	2000      	movs	r0, #0
 8009412:	e7e8      	b.n	80093e6 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009414:	a802      	add	r0, sp, #8
 8009416:	f000 ffc9 	bl	800a3ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800941a:	2601      	movs	r6, #1
 800941c:	e019      	b.n	8009452 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800941e:	2300      	movs	r3, #0
 8009420:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009424:	e021      	b.n	800946a <xQueueGenericSend+0x128>
 8009426:	2300      	movs	r3, #0
 8009428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800942c:	e023      	b.n	8009476 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800942e:	4620      	mov	r0, r4
 8009430:	f7ff fe45 	bl	80090be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009434:	f000 fe4e 	bl	800a0d4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009438:	f7ff fc7c 	bl	8008d34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800943c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800943e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009440:	429a      	cmp	r2, r3
 8009442:	d3bb      	bcc.n	80093bc <xQueueGenericSend+0x7a>
 8009444:	2d02      	cmp	r5, #2
 8009446:	d0b9      	beq.n	80093bc <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009448:	9b01      	ldr	r3, [sp, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0de      	beq.n	800940c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800944e:	2e00      	cmp	r6, #0
 8009450:	d0e0      	beq.n	8009414 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009452:	f7ff fc91 	bl	8008d78 <vPortExitCritical>
		vTaskSuspendAll();
 8009456:	f000 fda3 	bl	8009fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800945a:	f7ff fc6b 	bl	8008d34 <vPortEnterCritical>
 800945e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8009462:	b252      	sxtb	r2, r2
 8009464:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009468:	d0d9      	beq.n	800941e <xQueueGenericSend+0xdc>
 800946a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800946e:	b252      	sxtb	r2, r2
 8009470:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009474:	d0d7      	beq.n	8009426 <xQueueGenericSend+0xe4>
 8009476:	f7ff fc7f 	bl	8008d78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800947a:	a901      	add	r1, sp, #4
 800947c:	a802      	add	r0, sp, #8
 800947e:	f000 ffa1 	bl	800a3c4 <xTaskCheckForTimeOut>
 8009482:	b9d8      	cbnz	r0, 80094bc <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009484:	4620      	mov	r0, r4
 8009486:	f7ff fdb1 	bl	8008fec <prvIsQueueFull>
 800948a:	2800      	cmp	r0, #0
 800948c:	d0cf      	beq.n	800942e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800948e:	9901      	ldr	r1, [sp, #4]
 8009490:	f104 0010 	add.w	r0, r4, #16
 8009494:	f000 ff10 	bl	800a2b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009498:	4620      	mov	r0, r4
 800949a:	f7ff fe10 	bl	80090be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800949e:	f000 fe19 	bl	800a0d4 <xTaskResumeAll>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d1c8      	bne.n	8009438 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80094a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	e7bd      	b.n	8009438 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80094bc:	4620      	mov	r0, r4
 80094be:	f7ff fdfe 	bl	80090be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094c2:	f000 fe07 	bl	800a0d4 <xTaskResumeAll>
			return errQUEUE_FULL;
 80094c6:	2000      	movs	r0, #0
 80094c8:	e78d      	b.n	80093e6 <xQueueGenericSend+0xa4>

080094ca <xQueueGenericSendFromISR>:
{
 80094ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80094ce:	b190      	cbz	r0, 80094f6 <xQueueGenericSendFromISR+0x2c>
 80094d0:	460f      	mov	r7, r1
 80094d2:	4616      	mov	r6, r2
 80094d4:	461c      	mov	r4, r3
 80094d6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094d8:	b1b1      	cbz	r1, 8009508 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094da:	2c02      	cmp	r4, #2
 80094dc:	d120      	bne.n	8009520 <xQueueGenericSendFromISR+0x56>
 80094de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d01d      	beq.n	8009520 <xQueueGenericSendFromISR+0x56>
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	e7fe      	b.n	80094f4 <xQueueGenericSendFromISR+0x2a>
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009506:	e7fe      	b.n	8009506 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009508:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0e5      	beq.n	80094da <xQueueGenericSendFromISR+0x10>
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	e7fe      	b.n	800951e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009520:	f7ff fd2e 	bl	8008f80 <vPortValidateInterruptPriority>
	__asm volatile
 8009524:	f3ef 8911 	mrs	r9, BASEPRI
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009538:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800953a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800953c:	429a      	cmp	r2, r3
 800953e:	d306      	bcc.n	800954e <xQueueGenericSendFromISR+0x84>
 8009540:	2c02      	cmp	r4, #2
 8009542:	d004      	beq.n	800954e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009544:	2000      	movs	r0, #0
	__asm volatile
 8009546:	f389 8811 	msr	BASEPRI, r9
}
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800954e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8009552:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009556:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009558:	4622      	mov	r2, r4
 800955a:	4639      	mov	r1, r7
 800955c:	4628      	mov	r0, r5
 800955e:	f7ff fd61 	bl	8009024 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009562:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009566:	d006      	beq.n	8009576 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009568:	f108 0301 	add.w	r3, r8, #1
 800956c:	b25b      	sxtb	r3, r3
 800956e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009572:	2001      	movs	r0, #1
 8009574:	e7e7      	b.n	8009546 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009578:	b90b      	cbnz	r3, 800957e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800957a:	2001      	movs	r0, #1
 800957c:	e7e3      	b.n	8009546 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800957e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009582:	f000 fecd 	bl	800a320 <xTaskRemoveFromEventList>
 8009586:	b118      	cbz	r0, 8009590 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8009588:	b126      	cbz	r6, 8009594 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800958a:	2001      	movs	r0, #1
 800958c:	6030      	str	r0, [r6, #0]
 800958e:	e7da      	b.n	8009546 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8009590:	2001      	movs	r0, #1
 8009592:	e7d8      	b.n	8009546 <xQueueGenericSendFromISR+0x7c>
 8009594:	2001      	movs	r0, #1
 8009596:	e7d6      	b.n	8009546 <xQueueGenericSendFromISR+0x7c>

08009598 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8009598:	b168      	cbz	r0, 80095b6 <xQueueGiveFromISR+0x1e>
{
 800959a:	b570      	push	{r4, r5, r6, lr}
 800959c:	460c      	mov	r4, r1
 800959e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80095a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80095a2:	b18b      	cbz	r3, 80095c8 <xQueueGiveFromISR+0x30>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	e7fe      	b.n	80095b4 <xQueueGiveFromISR+0x1c>
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80095c6:	e7fe      	b.n	80095c6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80095c8:	6803      	ldr	r3, [r0, #0]
 80095ca:	b1eb      	cbz	r3, 8009608 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095cc:	f7ff fcd8 	bl	8008f80 <vPortValidateInterruptPriority>
	__asm volatile
 80095d0:	f3ef 8611 	mrs	r6, BASEPRI
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80095e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d926      	bls.n	800963a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80095ec:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80095f0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095f2:	3201      	adds	r2, #1
 80095f4:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d011      	beq.n	8009620 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095fc:	3301      	adds	r3, #1
 80095fe:	b25b      	sxtb	r3, r3
 8009600:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009604:	2001      	movs	r0, #1
 8009606:	e019      	b.n	800963c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009608:	6883      	ldr	r3, [r0, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0de      	beq.n	80095cc <xQueueGiveFromISR+0x34>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	e7fe      	b.n	800961e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009620:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009622:	b90b      	cbnz	r3, 8009628 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8009624:	2001      	movs	r0, #1
 8009626:	e009      	b.n	800963c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009628:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800962c:	f000 fe78 	bl	800a320 <xTaskRemoveFromEventList>
 8009630:	b138      	cbz	r0, 8009642 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8009632:	b144      	cbz	r4, 8009646 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009634:	2001      	movs	r0, #1
 8009636:	6020      	str	r0, [r4, #0]
 8009638:	e000      	b.n	800963c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800963a:	2000      	movs	r0, #0
	__asm volatile
 800963c:	f386 8811 	msr	BASEPRI, r6
}
 8009640:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8009642:	2001      	movs	r0, #1
 8009644:	e7fa      	b.n	800963c <xQueueGiveFromISR+0xa4>
 8009646:	2001      	movs	r0, #1
 8009648:	e7f8      	b.n	800963c <xQueueGiveFromISR+0xa4>

0800964a <xQueueReceive>:
{
 800964a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800964c:	b085      	sub	sp, #20
 800964e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009650:	b190      	cbz	r0, 8009678 <xQueueReceive+0x2e>
 8009652:	460f      	mov	r7, r1
 8009654:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009656:	b1c1      	cbz	r1, 800968a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009658:	f000 fefc 	bl	800a454 <xTaskGetSchedulerState>
 800965c:	4606      	mov	r6, r0
 800965e:	bb00      	cbnz	r0, 80096a2 <xQueueReceive+0x58>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d05e      	beq.n	8009724 <xQueueReceive+0xda>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	e7fe      	b.n	8009676 <xQueueReceive+0x2c>
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009688:	e7fe      	b.n	8009688 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800968a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0e3      	beq.n	8009658 <xQueueReceive+0xe>
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	e7fe      	b.n	80096a0 <xQueueReceive+0x56>
 80096a2:	2600      	movs	r6, #0
 80096a4:	e03e      	b.n	8009724 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096a6:	4639      	mov	r1, r7
 80096a8:	4620      	mov	r0, r4
 80096aa:	f7ff fcf6 	bl	800909a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096ae:	3d01      	subs	r5, #1
 80096b0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	b923      	cbnz	r3, 80096c0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80096b6:	f7ff fb5f 	bl	8008d78 <vPortExitCritical>
				return pdPASS;
 80096ba:	2001      	movs	r0, #1
}
 80096bc:	b005      	add	sp, #20
 80096be:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096c0:	f104 0010 	add.w	r0, r4, #16
 80096c4:	f000 fe2c 	bl	800a320 <xTaskRemoveFromEventList>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d0f4      	beq.n	80096b6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80096cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	e7e9      	b.n	80096b6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80096e2:	f7ff fb49 	bl	8008d78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80096e6:	2000      	movs	r0, #0
 80096e8:	e7e8      	b.n	80096bc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096ea:	a802      	add	r0, sp, #8
 80096ec:	f000 fe5e 	bl	800a3ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096f0:	2601      	movs	r6, #1
 80096f2:	e021      	b.n	8009738 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80096f4:	2300      	movs	r3, #0
 80096f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80096fa:	e029      	b.n	8009750 <xQueueReceive+0x106>
 80096fc:	2300      	movs	r3, #0
 80096fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009702:	e02b      	b.n	800975c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8009704:	4620      	mov	r0, r4
 8009706:	f7ff fcda 	bl	80090be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800970a:	f000 fce3 	bl	800a0d4 <xTaskResumeAll>
 800970e:	e009      	b.n	8009724 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8009710:	4620      	mov	r0, r4
 8009712:	f7ff fcd4 	bl	80090be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009716:	f000 fcdd 	bl	800a0d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800971a:	4620      	mov	r0, r4
 800971c:	f7ff fc75 	bl	800900a <prvIsQueueEmpty>
 8009720:	2800      	cmp	r0, #0
 8009722:	d13f      	bne.n	80097a4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8009724:	f7ff fb06 	bl	8008d34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009728:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800972a:	2d00      	cmp	r5, #0
 800972c:	d1bb      	bne.n	80096a6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0d6      	beq.n	80096e2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8009734:	2e00      	cmp	r6, #0
 8009736:	d0d8      	beq.n	80096ea <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8009738:	f7ff fb1e 	bl	8008d78 <vPortExitCritical>
		vTaskSuspendAll();
 800973c:	f000 fc30 	bl	8009fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009740:	f7ff faf8 	bl	8008d34 <vPortEnterCritical>
 8009744:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009748:	b25b      	sxtb	r3, r3
 800974a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974e:	d0d1      	beq.n	80096f4 <xQueueReceive+0xaa>
 8009750:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009754:	b25b      	sxtb	r3, r3
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d0cf      	beq.n	80096fc <xQueueReceive+0xb2>
 800975c:	f7ff fb0c 	bl	8008d78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009760:	a901      	add	r1, sp, #4
 8009762:	a802      	add	r0, sp, #8
 8009764:	f000 fe2e 	bl	800a3c4 <xTaskCheckForTimeOut>
 8009768:	2800      	cmp	r0, #0
 800976a:	d1d1      	bne.n	8009710 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800976c:	4620      	mov	r0, r4
 800976e:	f7ff fc4c 	bl	800900a <prvIsQueueEmpty>
 8009772:	2800      	cmp	r0, #0
 8009774:	d0c6      	beq.n	8009704 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009776:	9901      	ldr	r1, [sp, #4]
 8009778:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800977c:	f000 fd9c 	bl	800a2b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009780:	4620      	mov	r0, r4
 8009782:	f7ff fc9c 	bl	80090be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009786:	f000 fca5 	bl	800a0d4 <xTaskResumeAll>
 800978a:	2800      	cmp	r0, #0
 800978c:	d1ca      	bne.n	8009724 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800978e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009796:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	e7bf      	b.n	8009724 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80097a4:	2000      	movs	r0, #0
 80097a6:	e789      	b.n	80096bc <xQueueReceive+0x72>

080097a8 <xQueueSemaphoreTake>:
{
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80097ae:	b158      	cbz	r0, 80097c8 <xQueueSemaphoreTake+0x20>
 80097b0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80097b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80097b4:	b18b      	cbz	r3, 80097da <xQueueSemaphoreTake+0x32>
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	e7fe      	b.n	80097c6 <xQueueSemaphoreTake+0x1e>
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80097d8:	e7fe      	b.n	80097d8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097da:	f000 fe3b 	bl	800a454 <xTaskGetSchedulerState>
 80097de:	4605      	mov	r5, r0
 80097e0:	b950      	cbnz	r0, 80097f8 <xQueueSemaphoreTake+0x50>
 80097e2:	9b01      	ldr	r3, [sp, #4]
 80097e4:	b15b      	cbz	r3, 80097fe <xQueueSemaphoreTake+0x56>
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	e7fe      	b.n	80097f6 <xQueueSemaphoreTake+0x4e>
 80097f8:	2600      	movs	r6, #0
 80097fa:	4635      	mov	r5, r6
 80097fc:	e055      	b.n	80098aa <xQueueSemaphoreTake+0x102>
 80097fe:	4606      	mov	r6, r0
 8009800:	e053      	b.n	80098aa <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009802:	3b01      	subs	r3, #1
 8009804:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	b13b      	cbz	r3, 800981a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	b94b      	cbnz	r3, 8009822 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800980e:	f7ff fab3 	bl	8008d78 <vPortExitCritical>
				return pdPASS;
 8009812:	2601      	movs	r6, #1
}
 8009814:	4630      	mov	r0, r6
 8009816:	b004      	add	sp, #16
 8009818:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800981a:	f000 ff0f 	bl	800a63c <pvTaskIncrementMutexHeldCount>
 800981e:	60a0      	str	r0, [r4, #8]
 8009820:	e7f3      	b.n	800980a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009822:	f104 0010 	add.w	r0, r4, #16
 8009826:	f000 fd7b 	bl	800a320 <xTaskRemoveFromEventList>
 800982a:	2800      	cmp	r0, #0
 800982c:	d0ef      	beq.n	800980e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800982e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009836:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	e7e4      	b.n	800980e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009844:	b146      	cbz	r6, 8009858 <xQueueSemaphoreTake+0xb0>
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	e7fe      	b.n	8009856 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8009858:	f7ff fa8e 	bl	8008d78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800985c:	e7da      	b.n	8009814 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800985e:	a802      	add	r0, sp, #8
 8009860:	f000 fda4 	bl	800a3ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009864:	2501      	movs	r5, #1
 8009866:	e02a      	b.n	80098be <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8009868:	2300      	movs	r3, #0
 800986a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800986e:	e032      	b.n	80098d6 <xQueueSemaphoreTake+0x12e>
 8009870:	2300      	movs	r3, #0
 8009872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009876:	e034      	b.n	80098e2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8009878:	f7ff fa5c 	bl	8008d34 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800987c:	68a0      	ldr	r0, [r4, #8]
 800987e:	f000 fdf9 	bl	800a474 <xTaskPriorityInherit>
 8009882:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8009884:	f7ff fa78 	bl	8008d78 <vPortExitCritical>
 8009888:	e03b      	b.n	8009902 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800988a:	4620      	mov	r0, r4
 800988c:	f7ff fc17 	bl	80090be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009890:	f000 fc20 	bl	800a0d4 <xTaskResumeAll>
 8009894:	e009      	b.n	80098aa <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8009896:	4620      	mov	r0, r4
 8009898:	f7ff fc11 	bl	80090be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800989c:	f000 fc1a 	bl	800a0d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7ff fbb2 	bl	800900a <prvIsQueueEmpty>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d142      	bne.n	8009930 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80098aa:	f7ff fa43 	bl	8008d34 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1a6      	bne.n	8009802 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0c4      	beq.n	8009844 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80098ba:	2d00      	cmp	r5, #0
 80098bc:	d0cf      	beq.n	800985e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80098be:	f7ff fa5b 	bl	8008d78 <vPortExitCritical>
		vTaskSuspendAll();
 80098c2:	f000 fb6d 	bl	8009fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098c6:	f7ff fa35 	bl	8008d34 <vPortEnterCritical>
 80098ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80098ce:	b25b      	sxtb	r3, r3
 80098d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d4:	d0c8      	beq.n	8009868 <xQueueSemaphoreTake+0xc0>
 80098d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80098da:	b25b      	sxtb	r3, r3
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d0c6      	beq.n	8009870 <xQueueSemaphoreTake+0xc8>
 80098e2:	f7ff fa49 	bl	8008d78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098e6:	a901      	add	r1, sp, #4
 80098e8:	a802      	add	r0, sp, #8
 80098ea:	f000 fd6b 	bl	800a3c4 <xTaskCheckForTimeOut>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d1d1      	bne.n	8009896 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff fb89 	bl	800900a <prvIsQueueEmpty>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0c6      	beq.n	800988a <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0ba      	beq.n	8009878 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009902:	9901      	ldr	r1, [sp, #4]
 8009904:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009908:	f000 fcd6 	bl	800a2b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800990c:	4620      	mov	r0, r4
 800990e:	f7ff fbd6 	bl	80090be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009912:	f000 fbdf 	bl	800a0d4 <xTaskResumeAll>
 8009916:	2800      	cmp	r0, #0
 8009918:	d1c7      	bne.n	80098aa <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800991a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800991e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009922:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	e7bc      	b.n	80098aa <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8009930:	b90e      	cbnz	r6, 8009936 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8009932:	2600      	movs	r6, #0
 8009934:	e76e      	b.n	8009814 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8009936:	f7ff f9fd 	bl	8008d34 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800993a:	4620      	mov	r0, r4
 800993c:	f7ff fb4e 	bl	8008fdc <prvGetDisinheritPriorityAfterTimeout>
 8009940:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009942:	68a0      	ldr	r0, [r4, #8]
 8009944:	f000 fe2a 	bl	800a59c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009948:	f7ff fa16 	bl	8008d78 <vPortExitCritical>
 800994c:	e7f1      	b.n	8009932 <xQueueSemaphoreTake+0x18a>

0800994e <xQueueReceiveFromISR>:
{
 800994e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009952:	b1b0      	cbz	r0, 8009982 <xQueueReceiveFromISR+0x34>
 8009954:	460d      	mov	r5, r1
 8009956:	4616      	mov	r6, r2
 8009958:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995a:	b1d9      	cbz	r1, 8009994 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800995c:	f7ff fb10 	bl	8008f80 <vPortValidateInterruptPriority>
	__asm volatile
 8009960:	f3ef 8811 	mrs	r8, BASEPRI
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009974:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009976:	b9cf      	cbnz	r7, 80099ac <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8009978:	2000      	movs	r0, #0
	__asm volatile
 800997a:	f388 8811 	msr	BASEPRI, r8
}
 800997e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009992:	e7fe      	b.n	8009992 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009994:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0e0      	beq.n	800995c <xQueueReceiveFromISR+0xe>
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	e7fe      	b.n	80099aa <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80099ac:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80099b0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099b4:	4629      	mov	r1, r5
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff fb6f 	bl	800909a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099bc:	3f01      	subs	r7, #1
 80099be:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80099c0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80099c4:	d006      	beq.n	80099d4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099c6:	f109 0301 	add.w	r3, r9, #1
 80099ca:	b25b      	sxtb	r3, r3
 80099cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80099d0:	2001      	movs	r0, #1
 80099d2:	e7d2      	b.n	800997a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	b90b      	cbnz	r3, 80099dc <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80099d8:	2001      	movs	r0, #1
 80099da:	e7ce      	b.n	800997a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099dc:	f104 0010 	add.w	r0, r4, #16
 80099e0:	f000 fc9e 	bl	800a320 <xTaskRemoveFromEventList>
 80099e4:	b118      	cbz	r0, 80099ee <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 80099e6:	b126      	cbz	r6, 80099f2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099e8:	2001      	movs	r0, #1
 80099ea:	6030      	str	r0, [r6, #0]
 80099ec:	e7c5      	b.n	800997a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80099ee:	2001      	movs	r0, #1
 80099f0:	e7c3      	b.n	800997a <xQueueReceiveFromISR+0x2c>
 80099f2:	2001      	movs	r0, #1
 80099f4:	e7c1      	b.n	800997a <xQueueReceiveFromISR+0x2c>
	...

080099f8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099f8:	2300      	movs	r3, #0
 80099fa:	2b07      	cmp	r3, #7
 80099fc:	d80c      	bhi.n	8009a18 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099fe:	4a07      	ldr	r2, [pc, #28]	; (8009a1c <vQueueAddToRegistry+0x24>)
 8009a00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009a04:	b10a      	cbz	r2, 8009a0a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a06:	3301      	adds	r3, #1
 8009a08:	e7f7      	b.n	80099fa <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a0a:	4a04      	ldr	r2, [pc, #16]	; (8009a1c <vQueueAddToRegistry+0x24>)
 8009a0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a14:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a16:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	2400a78c 	.word	0x2400a78c

08009a20 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a20:	2300      	movs	r3, #0
 8009a22:	2b07      	cmp	r3, #7
 8009a24:	d80f      	bhi.n	8009a46 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009a26:	4a08      	ldr	r2, [pc, #32]	; (8009a48 <vQueueUnregisterQueue+0x28>)
 8009a28:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009a2c:	6852      	ldr	r2, [r2, #4]
 8009a2e:	4282      	cmp	r2, r0
 8009a30:	d001      	beq.n	8009a36 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a32:	3301      	adds	r3, #1
 8009a34:	e7f5      	b.n	8009a22 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009a36:	4a04      	ldr	r2, [pc, #16]	; (8009a48 <vQueueUnregisterQueue+0x28>)
 8009a38:	2100      	movs	r1, #0
 8009a3a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009a3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a42:	6059      	str	r1, [r3, #4]
				break;
 8009a44:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a46:	4770      	bx	lr
 8009a48:	2400a78c 	.word	0x2400a78c

08009a4c <vQueueDelete>:
	configASSERT( pxQueue );
 8009a4c:	b138      	cbz	r0, 8009a5e <vQueueDelete+0x12>
{
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8009a52:	f7ff ffe5 	bl	8009a20 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a56:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009a5a:	b14b      	cbz	r3, 8009a70 <vQueueDelete+0x24>
}
 8009a5c:	bd10      	pop	{r4, pc}
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009a6e:	e7fe      	b.n	8009a6e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7ff f86f 	bl	8008b54 <vPortFree>
}
 8009a76:	e7f1      	b.n	8009a5c <vQueueDelete+0x10>

08009a78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a80:	f7ff f958 	bl	8008d34 <vPortEnterCritical>
 8009a84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a88:	b25b      	sxtb	r3, r3
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8e:	d00d      	beq.n	8009aac <vQueueWaitForMessageRestricted+0x34>
 8009a90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009a94:	b25b      	sxtb	r3, r3
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d00b      	beq.n	8009ab4 <vQueueWaitForMessageRestricted+0x3c>
 8009a9c:	f7ff f96c 	bl	8008d78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009aa2:	b15b      	cbz	r3, 8009abc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7ff fb0a 	bl	80090be <prvUnlockQueue>
	}
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009aac:	2300      	movs	r3, #0
 8009aae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ab2:	e7ed      	b.n	8009a90 <vQueueWaitForMessageRestricted+0x18>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aba:	e7ef      	b.n	8009a9c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009abc:	4632      	mov	r2, r6
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ac4:	f000 fc10 	bl	800a2e8 <vTaskPlaceOnEventListRestricted>
 8009ac8:	e7ec      	b.n	8009aa4 <vQueueWaitForMessageRestricted+0x2c>
	...

08009acc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009acc:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <prvResetNextTaskUnblockTime+0x24>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	b923      	cbnz	r3, 8009ade <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ad4:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <prvResetNextTaskUnblockTime+0x28>)
 8009ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <prvResetNextTaskUnblockTime+0x24>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	4b02      	ldr	r3, [pc, #8]	; (8009af4 <prvResetNextTaskUnblockTime+0x28>)
 8009aea:	601a      	str	r2, [r3, #0]
	}
}
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	2400a7d0 	.word	0x2400a7d0
 8009af4:	2400ac78 	.word	0x2400ac78

08009af8 <prvInitialiseNewTask>:
{
 8009af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009afc:	4680      	mov	r8, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	4617      	mov	r7, r2
 8009b02:	4699      	mov	r9, r3
 8009b04:	9e08      	ldr	r6, [sp, #32]
 8009b06:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009b0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b0c:	0092      	lsls	r2, r2, #2
 8009b0e:	21a5      	movs	r1, #165	; 0xa5
 8009b10:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009b12:	f00e f9e5 	bl	8017ee0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b18:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8009b1c:	443a      	add	r2, r7
 8009b1e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b22:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	d043      	beq.n	8009bb2 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b2a:	f04f 0c00 	mov.w	ip, #0
 8009b2e:	f1bc 0f0f 	cmp.w	ip, #15
 8009b32:	d80b      	bhi.n	8009b4c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b34:	f815 200c 	ldrb.w	r2, [r5, ip]
 8009b38:	eb04 030c 	add.w	r3, r4, ip
 8009b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009b40:	f815 300c 	ldrb.w	r3, [r5, ip]
 8009b44:	b113      	cbz	r3, 8009b4c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b46:	f10c 0c01 	add.w	ip, ip, #1
 8009b4a:	e7f0      	b.n	8009b2e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b52:	2e37      	cmp	r6, #55	; 0x37
 8009b54:	d900      	bls.n	8009b58 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b56:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009b58:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009b5a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b5c:	2500      	movs	r5, #0
 8009b5e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b60:	1d20      	adds	r0, r4, #4
 8009b62:	f7ff f840 	bl	8008be6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b66:	f104 0018 	add.w	r0, r4, #24
 8009b6a:	f7ff f83c 	bl	8008be6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b6e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b70:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8009b74:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b76:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009b78:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b7c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b80:	2260      	movs	r2, #96	; 0x60
 8009b82:	4629      	mov	r1, r5
 8009b84:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8009b88:	f00e f9aa 	bl	8017ee0 <memset>
 8009b8c:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <prvInitialiseNewTask+0xc4>)
 8009b8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <prvInitialiseNewTask+0xc8>)
 8009b92:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009b94:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <prvInitialiseNewTask+0xcc>)
 8009b96:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b98:	464a      	mov	r2, r9
 8009b9a:	4641      	mov	r1, r8
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f7ff f89b 	bl	8008cd8 <pxPortInitialiseStack>
 8009ba2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009ba4:	f1ba 0f00 	cmp.w	sl, #0
 8009ba8:	d001      	beq.n	8009bae <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009baa:	f8ca 4000 	str.w	r4, [sl]
}
 8009bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009bb8:	e7cb      	b.n	8009b52 <prvInitialiseNewTask+0x5a>
 8009bba:	bf00      	nop
 8009bbc:	0801a67c 	.word	0x0801a67c
 8009bc0:	0801a69c 	.word	0x0801a69c
 8009bc4:	0801a65c 	.word	0x0801a65c

08009bc8 <prvInitialiseTaskLists>:
{
 8009bc8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bca:	2400      	movs	r4, #0
 8009bcc:	e007      	b.n	8009bde <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bce:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009bd2:	0093      	lsls	r3, r2, #2
 8009bd4:	480e      	ldr	r0, [pc, #56]	; (8009c10 <prvInitialiseTaskLists+0x48>)
 8009bd6:	4418      	add	r0, r3
 8009bd8:	f7fe fffa 	bl	8008bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bdc:	3401      	adds	r4, #1
 8009bde:	2c37      	cmp	r4, #55	; 0x37
 8009be0:	d9f5      	bls.n	8009bce <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009be2:	4d0c      	ldr	r5, [pc, #48]	; (8009c14 <prvInitialiseTaskLists+0x4c>)
 8009be4:	4628      	mov	r0, r5
 8009be6:	f7fe fff3 	bl	8008bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bea:	4c0b      	ldr	r4, [pc, #44]	; (8009c18 <prvInitialiseTaskLists+0x50>)
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7fe ffef 	bl	8008bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009bf2:	480a      	ldr	r0, [pc, #40]	; (8009c1c <prvInitialiseTaskLists+0x54>)
 8009bf4:	f7fe ffec 	bl	8008bd0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009bf8:	4809      	ldr	r0, [pc, #36]	; (8009c20 <prvInitialiseTaskLists+0x58>)
 8009bfa:	f7fe ffe9 	bl	8008bd0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009bfe:	4809      	ldr	r0, [pc, #36]	; (8009c24 <prvInitialiseTaskLists+0x5c>)
 8009c00:	f7fe ffe6 	bl	8008bd0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c04:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <prvInitialiseTaskLists+0x60>)
 8009c06:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c08:	4b08      	ldr	r3, [pc, #32]	; (8009c2c <prvInitialiseTaskLists+0x64>)
 8009c0a:	601c      	str	r4, [r3, #0]
}
 8009c0c:	bd38      	pop	{r3, r4, r5, pc}
 8009c0e:	bf00      	nop
 8009c10:	2400a7d8 	.word	0x2400a7d8
 8009c14:	2400ac4c 	.word	0x2400ac4c
 8009c18:	2400ac60 	.word	0x2400ac60
 8009c1c:	2400ac84 	.word	0x2400ac84
 8009c20:	2400acb0 	.word	0x2400acb0
 8009c24:	2400ac9c 	.word	0x2400ac9c
 8009c28:	2400a7d0 	.word	0x2400a7d0
 8009c2c:	2400a7d4 	.word	0x2400a7d4

08009c30 <prvAddNewTaskToReadyList>:
{
 8009c30:	b510      	push	{r4, lr}
 8009c32:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009c34:	f7ff f87e 	bl	8008d34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009c38:	4a22      	ldr	r2, [pc, #136]	; (8009cc4 <prvAddNewTaskToReadyList+0x94>)
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c40:	4b21      	ldr	r3, [pc, #132]	; (8009cc8 <prvAddNewTaskToReadyList+0x98>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	b15b      	cbz	r3, 8009c5e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009c46:	4b21      	ldr	r3, [pc, #132]	; (8009ccc <prvAddNewTaskToReadyList+0x9c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	b96b      	cbnz	r3, 8009c68 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c4c:	4b1e      	ldr	r3, [pc, #120]	; (8009cc8 <prvAddNewTaskToReadyList+0x98>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d807      	bhi.n	8009c68 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009c58:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <prvAddNewTaskToReadyList+0x98>)
 8009c5a:	601c      	str	r4, [r3, #0]
 8009c5c:	e004      	b.n	8009c68 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009c5e:	4b1a      	ldr	r3, [pc, #104]	; (8009cc8 <prvAddNewTaskToReadyList+0x98>)
 8009c60:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c62:	6813      	ldr	r3, [r2, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d029      	beq.n	8009cbc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009c68:	4a19      	ldr	r2, [pc, #100]	; (8009cd0 <prvAddNewTaskToReadyList+0xa0>)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c70:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009c72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c74:	4b17      	ldr	r3, [pc, #92]	; (8009cd4 <prvAddNewTaskToReadyList+0xa4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4298      	cmp	r0, r3
 8009c7a:	d901      	bls.n	8009c80 <prvAddNewTaskToReadyList+0x50>
 8009c7c:	4b15      	ldr	r3, [pc, #84]	; (8009cd4 <prvAddNewTaskToReadyList+0xa4>)
 8009c7e:	6018      	str	r0, [r3, #0]
 8009c80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009c84:	1d21      	adds	r1, r4, #4
 8009c86:	4b14      	ldr	r3, [pc, #80]	; (8009cd8 <prvAddNewTaskToReadyList+0xa8>)
 8009c88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c8c:	f7fe ffae 	bl	8008bec <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009c90:	f7ff f872 	bl	8008d78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009c94:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <prvAddNewTaskToReadyList+0x9c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	b17b      	cbz	r3, 8009cba <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c9a:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <prvAddNewTaskToReadyList+0x98>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d209      	bcs.n	8009cba <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8009ca6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	f3bf 8f6f 	isb	sy
}
 8009cba:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009cbc:	f7ff ff84 	bl	8009bc8 <prvInitialiseTaskLists>
 8009cc0:	e7d2      	b.n	8009c68 <prvAddNewTaskToReadyList+0x38>
 8009cc2:	bf00      	nop
 8009cc4:	2400ac38 	.word	0x2400ac38
 8009cc8:	2400a7cc 	.word	0x2400a7cc
 8009ccc:	2400ac98 	.word	0x2400ac98
 8009cd0:	2400ac44 	.word	0x2400ac44
 8009cd4:	2400ac48 	.word	0x2400ac48
 8009cd8:	2400a7d8 	.word	0x2400a7d8

08009cdc <prvDeleteTCB>:
	{
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ce0:	3054      	adds	r0, #84	; 0x54
 8009ce2:	f00e fce1 	bl	80186a8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ce6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009cea:	b163      	cbz	r3, 8009d06 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d011      	beq.n	8009d14 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d00e      	beq.n	8009d12 <prvDeleteTCB+0x36>
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	e7fe      	b.n	8009d04 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8009d06:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009d08:	f7fe ff24 	bl	8008b54 <vPortFree>
				vPortFree( pxTCB );
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f7fe ff21 	bl	8008b54 <vPortFree>
	}
 8009d12:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8009d14:	4620      	mov	r0, r4
 8009d16:	f7fe ff1d 	bl	8008b54 <vPortFree>
 8009d1a:	e7fa      	b.n	8009d12 <prvDeleteTCB+0x36>

08009d1c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d1c:	4b0f      	ldr	r3, [pc, #60]	; (8009d5c <prvCheckTasksWaitingTermination+0x40>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	b1d3      	cbz	r3, 8009d58 <prvCheckTasksWaitingTermination+0x3c>
{
 8009d22:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009d24:	f7ff f806 	bl	8008d34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d28:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <prvCheckTasksWaitingTermination+0x44>)
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d2e:	1d20      	adds	r0, r4, #4
 8009d30:	f7fe ff80 	bl	8008c34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d34:	4a0b      	ldr	r2, [pc, #44]	; (8009d64 <prvCheckTasksWaitingTermination+0x48>)
 8009d36:	6813      	ldr	r3, [r2, #0]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d3c:	4a07      	ldr	r2, [pc, #28]	; (8009d5c <prvCheckTasksWaitingTermination+0x40>)
 8009d3e:	6813      	ldr	r3, [r2, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009d44:	f7ff f818 	bl	8008d78 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7ff ffc7 	bl	8009cdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <prvCheckTasksWaitingTermination+0x40>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e6      	bne.n	8009d24 <prvCheckTasksWaitingTermination+0x8>
}
 8009d56:	bd10      	pop	{r4, pc}
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	2400ac3c 	.word	0x2400ac3c
 8009d60:	2400acb0 	.word	0x2400acb0
 8009d64:	2400ac38 	.word	0x2400ac38

08009d68 <prvIdleTask>:
{
 8009d68:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009d6a:	f7ff ffd7 	bl	8009d1c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <prvIdleTask+0x24>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d9f9      	bls.n	8009d6a <prvIdleTask+0x2>
				taskYIELD();
 8009d76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	e7ee      	b.n	8009d6a <prvIdleTask+0x2>
 8009d8c:	2400a7d8 	.word	0x2400a7d8

08009d90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	4604      	mov	r4, r0
 8009d94:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d96:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <prvAddCurrentTaskToDelayedList+0x6c>)
 8009d98:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d9a:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	3004      	adds	r0, #4
 8009da0:	f7fe ff48 	bl	8008c34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009da4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009da8:	bf14      	ite	ne
 8009daa:	2300      	movne	r3, #0
 8009dac:	2301      	moveq	r3, #1
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	bf08      	it	eq
 8009db2:	2300      	moveq	r3, #0
 8009db4:	b96b      	cbnz	r3, 8009dd2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009db6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009db8:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009dbe:	42a6      	cmp	r6, r4
 8009dc0:	d90e      	bls.n	8009de0 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dc2:	4b10      	ldr	r3, [pc, #64]	; (8009e04 <prvAddCurrentTaskToDelayedList+0x74>)
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8009dc8:	6819      	ldr	r1, [r3, #0]
 8009dca:	3104      	adds	r1, #4
 8009dcc:	f7fe ff19 	bl	8008c02 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8009dd4:	6819      	ldr	r1, [r3, #0]
 8009dd6:	3104      	adds	r1, #4
 8009dd8:	480b      	ldr	r0, [pc, #44]	; (8009e08 <prvAddCurrentTaskToDelayedList+0x78>)
 8009dda:	f7fe ff07 	bl	8008bec <vListInsertEnd>
 8009dde:	e7f7      	b.n	8009dd0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de0:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <prvAddCurrentTaskToDelayedList+0x7c>)
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	4b06      	ldr	r3, [pc, #24]	; (8009e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8009de6:	6819      	ldr	r1, [r3, #0]
 8009de8:	3104      	adds	r1, #4
 8009dea:	f7fe ff0a 	bl	8008c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <prvAddCurrentTaskToDelayedList+0x80>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	d9ec      	bls.n	8009dd0 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 8009df6:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <prvAddCurrentTaskToDelayedList+0x80>)
 8009df8:	601c      	str	r4, [r3, #0]
}
 8009dfa:	e7e9      	b.n	8009dd0 <prvAddCurrentTaskToDelayedList+0x40>
 8009dfc:	2400acc4 	.word	0x2400acc4
 8009e00:	2400a7cc 	.word	0x2400a7cc
 8009e04:	2400a7d4 	.word	0x2400a7d4
 8009e08:	2400ac9c 	.word	0x2400ac9c
 8009e0c:	2400a7d0 	.word	0x2400a7d0
 8009e10:	2400ac78 	.word	0x2400ac78

08009e14 <xTaskCreateStatic>:
	{
 8009e14:	b530      	push	{r4, r5, lr}
 8009e16:	b087      	sub	sp, #28
 8009e18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009e1a:	b17c      	cbz	r4, 8009e3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e1e:	b1b5      	cbz	r5, 8009e4e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e20:	25bc      	movs	r5, #188	; 0xbc
 8009e22:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e24:	9d04      	ldr	r5, [sp, #16]
 8009e26:	2dbc      	cmp	r5, #188	; 0xbc
 8009e28:	d01a      	beq.n	8009e60 <xTaskCreateStatic+0x4c>
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	e7fe      	b.n	8009e3a <xTaskCreateStatic+0x26>
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009e4c:	e7fe      	b.n	8009e4c <xTaskCreateStatic+0x38>
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009e5e:	e7fe      	b.n	8009e5e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e60:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e64:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e66:	2402      	movs	r4, #2
 8009e68:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e6c:	2400      	movs	r4, #0
 8009e6e:	9403      	str	r4, [sp, #12]
 8009e70:	9502      	str	r5, [sp, #8]
 8009e72:	ac05      	add	r4, sp, #20
 8009e74:	9401      	str	r4, [sp, #4]
 8009e76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e78:	9400      	str	r4, [sp, #0]
 8009e7a:	f7ff fe3d 	bl	8009af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e80:	f7ff fed6 	bl	8009c30 <prvAddNewTaskToReadyList>
	}
 8009e84:	9805      	ldr	r0, [sp, #20]
 8009e86:	b007      	add	sp, #28
 8009e88:	bd30      	pop	{r4, r5, pc}

08009e8a <xTaskCreate>:
	{
 8009e8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	4607      	mov	r7, r0
 8009e92:	4688      	mov	r8, r1
 8009e94:	4614      	mov	r4, r2
 8009e96:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e98:	0090      	lsls	r0, r2, #2
 8009e9a:	f7fe fddd 	bl	8008a58 <pvPortMalloc>
			if( pxStack != NULL )
 8009e9e:	b300      	cbz	r0, 8009ee2 <xTaskCreate+0x58>
 8009ea0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ea2:	20bc      	movs	r0, #188	; 0xbc
 8009ea4:	f7fe fdd8 	bl	8008a58 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	b1b0      	cbz	r0, 8009eda <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009eac:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009eb0:	b1e5      	cbz	r5, 8009eec <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009eb8:	9303      	str	r3, [sp, #12]
 8009eba:	9502      	str	r5, [sp, #8]
 8009ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4633      	mov	r3, r6
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4641      	mov	r1, r8
 8009eca:	4638      	mov	r0, r7
 8009ecc:	f7ff fe14 	bl	8009af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f7ff fead 	bl	8009c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	e005      	b.n	8009ee6 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8009eda:	4648      	mov	r0, r9
 8009edc:	f7fe fe3a 	bl	8008b54 <vPortFree>
 8009ee0:	e7e6      	b.n	8009eb0 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009ee6:	b005      	add	sp, #20
 8009ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009ef0:	e7f9      	b.n	8009ee6 <xTaskCreate+0x5c>
	...

08009ef4 <vTaskStartScheduler>:
{
 8009ef4:	b510      	push	{r4, lr}
 8009ef6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ef8:	2400      	movs	r4, #0
 8009efa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009efc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009efe:	aa07      	add	r2, sp, #28
 8009f00:	a906      	add	r1, sp, #24
 8009f02:	a805      	add	r0, sp, #20
 8009f04:	f7fe fd2c 	bl	8008960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f08:	9b05      	ldr	r3, [sp, #20]
 8009f0a:	9302      	str	r3, [sp, #8]
 8009f0c:	9b06      	ldr	r3, [sp, #24]
 8009f0e:	9301      	str	r3, [sp, #4]
 8009f10:	9400      	str	r4, [sp, #0]
 8009f12:	4623      	mov	r3, r4
 8009f14:	9a07      	ldr	r2, [sp, #28]
 8009f16:	491a      	ldr	r1, [pc, #104]	; (8009f80 <vTaskStartScheduler+0x8c>)
 8009f18:	481a      	ldr	r0, [pc, #104]	; (8009f84 <vTaskStartScheduler+0x90>)
 8009f1a:	f7ff ff7b 	bl	8009e14 <xTaskCreateStatic>
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <vTaskStartScheduler+0x94>)
 8009f20:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8009f22:	b140      	cbz	r0, 8009f36 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8009f24:	f000 fc08 	bl	800a738 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009f28:	2801      	cmp	r0, #1
 8009f2a:	d006      	beq.n	8009f3a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f30:	d01d      	beq.n	8009f6e <vTaskStartScheduler+0x7a>
}
 8009f32:	b008      	add	sp, #32
 8009f34:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8009f36:	2000      	movs	r0, #0
 8009f38:	e7f6      	b.n	8009f28 <vTaskStartScheduler+0x34>
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f4a:	4b10      	ldr	r3, [pc, #64]	; (8009f8c <vTaskStartScheduler+0x98>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3354      	adds	r3, #84	; 0x54
 8009f50:	4a0f      	ldr	r2, [pc, #60]	; (8009f90 <vTaskStartScheduler+0x9c>)
 8009f52:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f54:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <vTaskStartScheduler+0xa0>)
 8009f56:	f04f 32ff 	mov.w	r2, #4294967295
 8009f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f5c:	4b0e      	ldr	r3, [pc, #56]	; (8009f98 <vTaskStartScheduler+0xa4>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f62:	4b0e      	ldr	r3, [pc, #56]	; (8009f9c <vTaskStartScheduler+0xa8>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009f68:	f7fe ff7e 	bl	8008e68 <xPortStartScheduler>
 8009f6c:	e7e1      	b.n	8009f32 <vTaskStartScheduler+0x3e>
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f7e:	e7fe      	b.n	8009f7e <vTaskStartScheduler+0x8a>
 8009f80:	08019f5c 	.word	0x08019f5c
 8009f84:	08009d69 	.word	0x08009d69
 8009f88:	2400ac74 	.word	0x2400ac74
 8009f8c:	2400a7cc 	.word	0x2400a7cc
 8009f90:	240000a8 	.word	0x240000a8
 8009f94:	2400ac78 	.word	0x2400ac78
 8009f98:	2400ac98 	.word	0x2400ac98
 8009f9c:	2400acc4 	.word	0x2400acc4

08009fa0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009fa0:	4a02      	ldr	r2, [pc, #8]	; (8009fac <vTaskSuspendAll+0xc>)
 8009fa2:	6813      	ldr	r3, [r2, #0]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	6013      	str	r3, [r2, #0]
}
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	2400ac40 	.word	0x2400ac40

08009fb0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009fb0:	4b01      	ldr	r3, [pc, #4]	; (8009fb8 <xTaskGetTickCount+0x8>)
 8009fb2:	6818      	ldr	r0, [r3, #0]
}
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	2400acc4 	.word	0x2400acc4

08009fbc <xTaskIncrementTick>:
{
 8009fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fbe:	4b3a      	ldr	r3, [pc, #232]	; (800a0a8 <xTaskIncrementTick+0xec>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d169      	bne.n	800a09a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009fc6:	4b39      	ldr	r3, [pc, #228]	; (800a0ac <xTaskIncrementTick+0xf0>)
 8009fc8:	681d      	ldr	r5, [r3, #0]
 8009fca:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009fcc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fce:	b9c5      	cbnz	r5, 800a002 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009fd0:	4b37      	ldr	r3, [pc, #220]	; (800a0b0 <xTaskIncrementTick+0xf4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	b143      	cbz	r3, 8009fea <xTaskIncrementTick+0x2e>
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	e7fe      	b.n	8009fe8 <xTaskIncrementTick+0x2c>
 8009fea:	4a31      	ldr	r2, [pc, #196]	; (800a0b0 <xTaskIncrementTick+0xf4>)
 8009fec:	6811      	ldr	r1, [r2, #0]
 8009fee:	4b31      	ldr	r3, [pc, #196]	; (800a0b4 <xTaskIncrementTick+0xf8>)
 8009ff0:	6818      	ldr	r0, [r3, #0]
 8009ff2:	6010      	str	r0, [r2, #0]
 8009ff4:	6019      	str	r1, [r3, #0]
 8009ff6:	4a30      	ldr	r2, [pc, #192]	; (800a0b8 <xTaskIncrementTick+0xfc>)
 8009ff8:	6813      	ldr	r3, [r2, #0]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	f7ff fd65 	bl	8009acc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a002:	4b2e      	ldr	r3, [pc, #184]	; (800a0bc <xTaskIncrementTick+0x100>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	42ab      	cmp	r3, r5
 800a008:	d93d      	bls.n	800a086 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800a00a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a00c:	4b2c      	ldr	r3, [pc, #176]	; (800a0c0 <xTaskIncrementTick+0x104>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a016:	009a      	lsls	r2, r3, #2
 800a018:	4b2a      	ldr	r3, [pc, #168]	; (800a0c4 <xTaskIncrementTick+0x108>)
 800a01a:	589b      	ldr	r3, [r3, r2]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d900      	bls.n	800a022 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800a020:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800a022:	4b29      	ldr	r3, [pc, #164]	; (800a0c8 <xTaskIncrementTick+0x10c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d03c      	beq.n	800a0a4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800a02a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800a02c:	e03a      	b.n	800a0a4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800a02e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a030:	4b1f      	ldr	r3, [pc, #124]	; (800a0b0 <xTaskIncrementTick+0xf4>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	b343      	cbz	r3, 800a08a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a038:	4b1d      	ldr	r3, [pc, #116]	; (800a0b0 <xTaskIncrementTick+0xf4>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a040:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a042:	429d      	cmp	r5, r3
 800a044:	d326      	bcc.n	800a094 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a046:	1d26      	adds	r6, r4, #4
 800a048:	4630      	mov	r0, r6
 800a04a:	f7fe fdf3 	bl	8008c34 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a04e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a050:	b11b      	cbz	r3, 800a05a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a052:	f104 0018 	add.w	r0, r4, #24
 800a056:	f7fe fded 	bl	8008c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a05a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a05c:	4a1b      	ldr	r2, [pc, #108]	; (800a0cc <xTaskIncrementTick+0x110>)
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	4293      	cmp	r3, r2
 800a062:	d901      	bls.n	800a068 <xTaskIncrementTick+0xac>
 800a064:	4a19      	ldr	r2, [pc, #100]	; (800a0cc <xTaskIncrementTick+0x110>)
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a06c:	009a      	lsls	r2, r3, #2
 800a06e:	4631      	mov	r1, r6
 800a070:	4814      	ldr	r0, [pc, #80]	; (800a0c4 <xTaskIncrementTick+0x108>)
 800a072:	4410      	add	r0, r2
 800a074:	f7fe fdba 	bl	8008bec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a078:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a07a:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <xTaskIncrementTick+0x104>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a080:	429a      	cmp	r2, r3
 800a082:	d2d4      	bcs.n	800a02e <xTaskIncrementTick+0x72>
 800a084:	e7d4      	b.n	800a030 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800a086:	2700      	movs	r7, #0
 800a088:	e7d2      	b.n	800a030 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08a:	4b0c      	ldr	r3, [pc, #48]	; (800a0bc <xTaskIncrementTick+0x100>)
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	601a      	str	r2, [r3, #0]
					break;
 800a092:	e7bb      	b.n	800a00c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a094:	4a09      	ldr	r2, [pc, #36]	; (800a0bc <xTaskIncrementTick+0x100>)
 800a096:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a098:	e7b8      	b.n	800a00c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800a09a:	4a0d      	ldr	r2, [pc, #52]	; (800a0d0 <xTaskIncrementTick+0x114>)
 800a09c:	6813      	ldr	r3, [r2, #0]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a0a2:	2700      	movs	r7, #0
}
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a8:	2400ac40 	.word	0x2400ac40
 800a0ac:	2400acc4 	.word	0x2400acc4
 800a0b0:	2400a7d0 	.word	0x2400a7d0
 800a0b4:	2400a7d4 	.word	0x2400a7d4
 800a0b8:	2400ac7c 	.word	0x2400ac7c
 800a0bc:	2400ac78 	.word	0x2400ac78
 800a0c0:	2400a7cc 	.word	0x2400a7cc
 800a0c4:	2400a7d8 	.word	0x2400a7d8
 800a0c8:	2400acc8 	.word	0x2400acc8
 800a0cc:	2400ac48 	.word	0x2400ac48
 800a0d0:	2400ac80 	.word	0x2400ac80

0800a0d4 <xTaskResumeAll>:
{
 800a0d4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a0d6:	4b35      	ldr	r3, [pc, #212]	; (800a1ac <xTaskResumeAll+0xd8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	b943      	cbnz	r3, 800a0ee <xTaskResumeAll+0x1a>
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	e7fe      	b.n	800a0ec <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a0ee:	f7fe fe21 	bl	8008d34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a0f2:	4b2e      	ldr	r3, [pc, #184]	; (800a1ac <xTaskResumeAll+0xd8>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	3a01      	subs	r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d14f      	bne.n	800a1a0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a100:	4b2b      	ldr	r3, [pc, #172]	; (800a1b0 <xTaskResumeAll+0xdc>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	b90b      	cbnz	r3, 800a10a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a106:	2400      	movs	r4, #0
 800a108:	e04b      	b.n	800a1a2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800a10a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a10c:	4b29      	ldr	r3, [pc, #164]	; (800a1b4 <xTaskResumeAll+0xe0>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	b31b      	cbz	r3, 800a15a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a112:	4b28      	ldr	r3, [pc, #160]	; (800a1b4 <xTaskResumeAll+0xe0>)
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a118:	f104 0018 	add.w	r0, r4, #24
 800a11c:	f7fe fd8a 	bl	8008c34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a120:	1d25      	adds	r5, r4, #4
 800a122:	4628      	mov	r0, r5
 800a124:	f7fe fd86 	bl	8008c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a128:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a12a:	4b23      	ldr	r3, [pc, #140]	; (800a1b8 <xTaskResumeAll+0xe4>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4298      	cmp	r0, r3
 800a130:	d901      	bls.n	800a136 <xTaskResumeAll+0x62>
 800a132:	4b21      	ldr	r3, [pc, #132]	; (800a1b8 <xTaskResumeAll+0xe4>)
 800a134:	6018      	str	r0, [r3, #0]
 800a136:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a13a:	4629      	mov	r1, r5
 800a13c:	4b1f      	ldr	r3, [pc, #124]	; (800a1bc <xTaskResumeAll+0xe8>)
 800a13e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a142:	f7fe fd53 	bl	8008bec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a146:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a148:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <xTaskResumeAll+0xec>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	429a      	cmp	r2, r3
 800a150:	d3dc      	bcc.n	800a10c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a152:	4b1c      	ldr	r3, [pc, #112]	; (800a1c4 <xTaskResumeAll+0xf0>)
 800a154:	2201      	movs	r2, #1
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e7d8      	b.n	800a10c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a15a:	b10c      	cbz	r4, 800a160 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a15c:	f7ff fcb6 	bl	8009acc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a160:	4b19      	ldr	r3, [pc, #100]	; (800a1c8 <xTaskResumeAll+0xf4>)
 800a162:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a164:	b984      	cbnz	r4, 800a188 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800a166:	4b17      	ldr	r3, [pc, #92]	; (800a1c4 <xTaskResumeAll+0xf0>)
 800a168:	681c      	ldr	r4, [r3, #0]
 800a16a:	b1d4      	cbz	r4, 800a1a2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800a16c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a174:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a180:	2401      	movs	r4, #1
 800a182:	e00e      	b.n	800a1a2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a184:	3c01      	subs	r4, #1
 800a186:	d007      	beq.n	800a198 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800a188:	f7ff ff18 	bl	8009fbc <xTaskIncrementTick>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d0f9      	beq.n	800a184 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <xTaskResumeAll+0xf0>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	e7f5      	b.n	800a184 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800a198:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <xTaskResumeAll+0xf4>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	e7e2      	b.n	800a166 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a1a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a1a2:	f7fe fde9 	bl	8008d78 <vPortExitCritical>
}
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	bd38      	pop	{r3, r4, r5, pc}
 800a1aa:	bf00      	nop
 800a1ac:	2400ac40 	.word	0x2400ac40
 800a1b0:	2400ac38 	.word	0x2400ac38
 800a1b4:	2400ac84 	.word	0x2400ac84
 800a1b8:	2400ac48 	.word	0x2400ac48
 800a1bc:	2400a7d8 	.word	0x2400a7d8
 800a1c0:	2400a7cc 	.word	0x2400a7cc
 800a1c4:	2400acc8 	.word	0x2400acc8
 800a1c8:	2400ac80 	.word	0x2400ac80

0800a1cc <vTaskDelay>:
	{
 800a1cc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1ce:	b1a8      	cbz	r0, 800a1fc <vTaskDelay+0x30>
 800a1d0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a1d2:	4b10      	ldr	r3, [pc, #64]	; (800a214 <vTaskDelay+0x48>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	b143      	cbz	r3, 800a1ea <vTaskDelay+0x1e>
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	e7fe      	b.n	800a1e8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a1ea:	f7ff fed9 	bl	8009fa0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f7ff fdcd 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a1f6:	f7ff ff6d 	bl	800a0d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a1fa:	b948      	cbnz	r0, 800a210 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800a1fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a204:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
	}
 800a210:	bd10      	pop	{r4, pc}
 800a212:	bf00      	nop
 800a214:	2400ac40 	.word	0x2400ac40

0800a218 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a218:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <vTaskSwitchContext+0x88>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	b11b      	cbz	r3, 800a226 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a21e:	4b21      	ldr	r3, [pc, #132]	; (800a2a4 <vTaskSwitchContext+0x8c>)
 800a220:	2201      	movs	r2, #1
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800a226:	4b1f      	ldr	r3, [pc, #124]	; (800a2a4 <vTaskSwitchContext+0x8c>)
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22c:	4b1e      	ldr	r3, [pc, #120]	; (800a2a8 <vTaskSwitchContext+0x90>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a234:	008a      	lsls	r2, r1, #2
 800a236:	491d      	ldr	r1, [pc, #116]	; (800a2ac <vTaskSwitchContext+0x94>)
 800a238:	588a      	ldr	r2, [r1, r2]
 800a23a:	b95a      	cbnz	r2, 800a254 <vTaskSwitchContext+0x3c>
 800a23c:	b10b      	cbz	r3, 800a242 <vTaskSwitchContext+0x2a>
 800a23e:	3b01      	subs	r3, #1
 800a240:	e7f6      	b.n	800a230 <vTaskSwitchContext+0x18>
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	e7fe      	b.n	800a252 <vTaskSwitchContext+0x3a>
 800a254:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a258:	0082      	lsls	r2, r0, #2
 800a25a:	440a      	add	r2, r1
 800a25c:	6850      	ldr	r0, [r2, #4]
 800a25e:	6840      	ldr	r0, [r0, #4]
 800a260:	6050      	str	r0, [r2, #4]
 800a262:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a266:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a26a:	3208      	adds	r2, #8
 800a26c:	4411      	add	r1, r2
 800a26e:	4288      	cmp	r0, r1
 800a270:	d00f      	beq.n	800a292 <vTaskSwitchContext+0x7a>
 800a272:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a276:	0091      	lsls	r1, r2, #2
 800a278:	4a0c      	ldr	r2, [pc, #48]	; (800a2ac <vTaskSwitchContext+0x94>)
 800a27a:	440a      	add	r2, r1
 800a27c:	6852      	ldr	r2, [r2, #4]
 800a27e:	68d1      	ldr	r1, [r2, #12]
 800a280:	4a0b      	ldr	r2, [pc, #44]	; (800a2b0 <vTaskSwitchContext+0x98>)
 800a282:	6011      	str	r1, [r2, #0]
 800a284:	4908      	ldr	r1, [pc, #32]	; (800a2a8 <vTaskSwitchContext+0x90>)
 800a286:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a288:	6813      	ldr	r3, [r2, #0]
 800a28a:	3354      	adds	r3, #84	; 0x54
 800a28c:	4a09      	ldr	r2, [pc, #36]	; (800a2b4 <vTaskSwitchContext+0x9c>)
 800a28e:	6013      	str	r3, [r2, #0]
}
 800a290:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a292:	6840      	ldr	r0, [r0, #4]
 800a294:	4662      	mov	r2, ip
 800a296:	0091      	lsls	r1, r2, #2
 800a298:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <vTaskSwitchContext+0x94>)
 800a29a:	440a      	add	r2, r1
 800a29c:	6050      	str	r0, [r2, #4]
 800a29e:	e7e8      	b.n	800a272 <vTaskSwitchContext+0x5a>
 800a2a0:	2400ac40 	.word	0x2400ac40
 800a2a4:	2400acc8 	.word	0x2400acc8
 800a2a8:	2400ac48 	.word	0x2400ac48
 800a2ac:	2400a7d8 	.word	0x2400a7d8
 800a2b0:	2400a7cc 	.word	0x2400a7cc
 800a2b4:	240000a8 	.word	0x240000a8

0800a2b8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a2b8:	b158      	cbz	r0, 800a2d2 <vTaskPlaceOnEventList+0x1a>
{
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2be:	4a09      	ldr	r2, [pc, #36]	; (800a2e4 <vTaskPlaceOnEventList+0x2c>)
 800a2c0:	6811      	ldr	r1, [r2, #0]
 800a2c2:	3118      	adds	r1, #24
 800a2c4:	f7fe fc9d 	bl	8008c02 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f7ff fd60 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
}
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a2e2:	e7fe      	b.n	800a2e2 <vTaskPlaceOnEventList+0x2a>
 800a2e4:	2400a7cc 	.word	0x2400a7cc

0800a2e8 <vTaskPlaceOnEventListRestricted>:
	{
 800a2e8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800a2ea:	b170      	cbz	r0, 800a30a <vTaskPlaceOnEventListRestricted+0x22>
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2f0:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <vTaskPlaceOnEventListRestricted+0x34>)
 800a2f2:	6811      	ldr	r1, [r2, #0]
 800a2f4:	3118      	adds	r1, #24
 800a2f6:	f7fe fc79 	bl	8008bec <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800a2fa:	b10c      	cbz	r4, 800a300 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800a2fc:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f7ff fd44 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
	}
 800a308:	bd38      	pop	{r3, r4, r5, pc}
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a31a:	e7fe      	b.n	800a31a <vTaskPlaceOnEventListRestricted+0x32>
 800a31c:	2400a7cc 	.word	0x2400a7cc

0800a320 <xTaskRemoveFromEventList>:
{
 800a320:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a322:	68c3      	ldr	r3, [r0, #12]
 800a324:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a326:	b324      	cbz	r4, 800a372 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a328:	f104 0518 	add.w	r5, r4, #24
 800a32c:	4628      	mov	r0, r5
 800a32e:	f7fe fc81 	bl	8008c34 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a332:	4b18      	ldr	r3, [pc, #96]	; (800a394 <xTaskRemoveFromEventList+0x74>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	bb2b      	cbnz	r3, 800a384 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a338:	1d25      	adds	r5, r4, #4
 800a33a:	4628      	mov	r0, r5
 800a33c:	f7fe fc7a 	bl	8008c34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a340:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a342:	4b15      	ldr	r3, [pc, #84]	; (800a398 <xTaskRemoveFromEventList+0x78>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4298      	cmp	r0, r3
 800a348:	d901      	bls.n	800a34e <xTaskRemoveFromEventList+0x2e>
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <xTaskRemoveFromEventList+0x78>)
 800a34c:	6018      	str	r0, [r3, #0]
 800a34e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a352:	4629      	mov	r1, r5
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <xTaskRemoveFromEventList+0x7c>)
 800a356:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a35a:	f7fe fc47 	bl	8008bec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a35e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a360:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <xTaskRemoveFromEventList+0x80>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a366:	429a      	cmp	r2, r3
 800a368:	d911      	bls.n	800a38e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a36a:	2001      	movs	r0, #1
 800a36c:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <xTaskRemoveFromEventList+0x84>)
 800a36e:	6018      	str	r0, [r3, #0]
}
 800a370:	bd38      	pop	{r3, r4, r5, pc}
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a382:	e7fe      	b.n	800a382 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a384:	4629      	mov	r1, r5
 800a386:	4808      	ldr	r0, [pc, #32]	; (800a3a8 <xTaskRemoveFromEventList+0x88>)
 800a388:	f7fe fc30 	bl	8008bec <vListInsertEnd>
 800a38c:	e7e7      	b.n	800a35e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a38e:	2000      	movs	r0, #0
	return xReturn;
 800a390:	e7ee      	b.n	800a370 <xTaskRemoveFromEventList+0x50>
 800a392:	bf00      	nop
 800a394:	2400ac40 	.word	0x2400ac40
 800a398:	2400ac48 	.word	0x2400ac48
 800a39c:	2400a7d8 	.word	0x2400a7d8
 800a3a0:	2400a7cc 	.word	0x2400a7cc
 800a3a4:	2400acc8 	.word	0x2400acc8
 800a3a8:	2400ac84 	.word	0x2400ac84

0800a3ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <vTaskInternalSetTimeOutState+0x10>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3b2:	4b03      	ldr	r3, [pc, #12]	; (800a3c0 <vTaskInternalSetTimeOutState+0x14>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6043      	str	r3, [r0, #4]
}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	2400ac7c 	.word	0x2400ac7c
 800a3c0:	2400acc4 	.word	0x2400acc4

0800a3c4 <xTaskCheckForTimeOut>:
{
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a3c6:	b1c8      	cbz	r0, 800a3fc <xTaskCheckForTimeOut+0x38>
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a3cc:	b1f9      	cbz	r1, 800a40e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800a3ce:	f7fe fcb1 	bl	8008d34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <xTaskCheckForTimeOut+0x7c>)
 800a3d4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3d6:	686b      	ldr	r3, [r5, #4]
 800a3d8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a3e0:	d026      	beq.n	800a430 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3e2:	4e18      	ldr	r6, [pc, #96]	; (800a444 <xTaskCheckForTimeOut+0x80>)
 800a3e4:	6836      	ldr	r6, [r6, #0]
 800a3e6:	682f      	ldr	r7, [r5, #0]
 800a3e8:	42b7      	cmp	r7, r6
 800a3ea:	d001      	beq.n	800a3f0 <xTaskCheckForTimeOut+0x2c>
 800a3ec:	428b      	cmp	r3, r1
 800a3ee:	d924      	bls.n	800a43a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3f0:	4282      	cmp	r2, r0
 800a3f2:	d815      	bhi.n	800a420 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a3f8:	2401      	movs	r4, #1
 800a3fa:	e01a      	b.n	800a432 <xTaskCheckForTimeOut+0x6e>
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a40c:	e7fe      	b.n	800a40c <xTaskCheckForTimeOut+0x48>
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a41e:	e7fe      	b.n	800a41e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800a420:	1a5b      	subs	r3, r3, r1
 800a422:	4413      	add	r3, r2
 800a424:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a426:	4628      	mov	r0, r5
 800a428:	f7ff ffc0 	bl	800a3ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a42c:	2400      	movs	r4, #0
 800a42e:	e000      	b.n	800a432 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800a430:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a432:	f7fe fca1 	bl	8008d78 <vPortExitCritical>
}
 800a436:	4620      	mov	r0, r4
 800a438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800a43a:	2401      	movs	r4, #1
 800a43c:	e7f9      	b.n	800a432 <xTaskCheckForTimeOut+0x6e>
 800a43e:	bf00      	nop
 800a440:	2400acc4 	.word	0x2400acc4
 800a444:	2400ac7c 	.word	0x2400ac7c

0800a448 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a448:	4b01      	ldr	r3, [pc, #4]	; (800a450 <vTaskMissedYield+0x8>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	601a      	str	r2, [r3, #0]
}
 800a44e:	4770      	bx	lr
 800a450:	2400acc8 	.word	0x2400acc8

0800a454 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <xTaskGetSchedulerState+0x18>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	b133      	cbz	r3, 800a468 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <xTaskGetSchedulerState+0x1c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	b10b      	cbz	r3, 800a464 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a460:	2000      	movs	r0, #0
	}
 800a462:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a464:	2002      	movs	r0, #2
 800a466:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a468:	2001      	movs	r0, #1
 800a46a:	4770      	bx	lr
 800a46c:	2400ac98 	.word	0x2400ac98
 800a470:	2400ac40 	.word	0x2400ac40

0800a474 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a474:	2800      	cmp	r0, #0
 800a476:	d03e      	beq.n	800a4f6 <xTaskPriorityInherit+0x82>
	{
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a47c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a47e:	4a20      	ldr	r2, [pc, #128]	; (800a500 <xTaskPriorityInherit+0x8c>)
 800a480:	6812      	ldr	r2, [r2, #0]
 800a482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a484:	4293      	cmp	r3, r2
 800a486:	d22e      	bcs.n	800a4e6 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a488:	6982      	ldr	r2, [r0, #24]
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	db05      	blt.n	800a49a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48e:	4a1c      	ldr	r2, [pc, #112]	; (800a500 <xTaskPriorityInherit+0x8c>)
 800a490:	6812      	ldr	r2, [r2, #0]
 800a492:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a494:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a498:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a49a:	6961      	ldr	r1, [r4, #20]
 800a49c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a4a0:	4a18      	ldr	r2, [pc, #96]	; (800a504 <xTaskPriorityInherit+0x90>)
 800a4a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4a6:	4299      	cmp	r1, r3
 800a4a8:	d005      	beq.n	800a4b6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4aa:	4b15      	ldr	r3, [pc, #84]	; (800a500 <xTaskPriorityInherit+0x8c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800a4b2:	2001      	movs	r0, #1
	}
 800a4b4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4b6:	1d25      	adds	r5, r4, #4
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f7fe fbbb 	bl	8008c34 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4be:	4b10      	ldr	r3, [pc, #64]	; (800a500 <xTaskPriorityInherit+0x8c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a4c4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4c6:	4b10      	ldr	r3, [pc, #64]	; (800a508 <xTaskPriorityInherit+0x94>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4298      	cmp	r0, r3
 800a4cc:	d901      	bls.n	800a4d2 <xTaskPriorityInherit+0x5e>
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	; (800a508 <xTaskPriorityInherit+0x94>)
 800a4d0:	6018      	str	r0, [r3, #0]
 800a4d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4b0a      	ldr	r3, [pc, #40]	; (800a504 <xTaskPriorityInherit+0x90>)
 800a4da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4de:	f7fe fb85 	bl	8008bec <vListInsertEnd>
				xReturn = pdTRUE;
 800a4e2:	2001      	movs	r0, #1
 800a4e4:	e7e6      	b.n	800a4b4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4e6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <xTaskPriorityInherit+0x8c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d303      	bcc.n	800a4fa <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e7de      	b.n	800a4b4 <xTaskPriorityInherit+0x40>
 800a4f6:	2000      	movs	r0, #0
	}
 800a4f8:	4770      	bx	lr
					xReturn = pdTRUE;
 800a4fa:	2001      	movs	r0, #1
		return xReturn;
 800a4fc:	e7da      	b.n	800a4b4 <xTaskPriorityInherit+0x40>
 800a4fe:	bf00      	nop
 800a500:	2400a7cc 	.word	0x2400a7cc
 800a504:	2400a7d8 	.word	0x2400a7d8
 800a508:	2400ac48 	.word	0x2400ac48

0800a50c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d03b      	beq.n	800a588 <xTaskPriorityDisinherit+0x7c>
	{
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a514:	4b1e      	ldr	r3, [pc, #120]	; (800a590 <xTaskPriorityDisinherit+0x84>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4283      	cmp	r3, r0
 800a51a:	d008      	beq.n	800a52e <xTaskPriorityDisinherit+0x22>
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	e7fe      	b.n	800a52c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a52e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a530:	b943      	cbnz	r3, 800a544 <xTaskPriorityDisinherit+0x38>
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	e7fe      	b.n	800a542 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a544:	3b01      	subs	r3, #1
 800a546:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a548:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a54a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a54c:	4291      	cmp	r1, r2
 800a54e:	d01d      	beq.n	800a58c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a550:	b10b      	cbz	r3, 800a556 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a552:	2000      	movs	r0, #0
	}
 800a554:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a556:	1d05      	adds	r5, r0, #4
 800a558:	4628      	mov	r0, r5
 800a55a:	f7fe fb6b 	bl	8008c34 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a55e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a560:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a562:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800a566:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <xTaskPriorityDisinherit+0x88>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4298      	cmp	r0, r3
 800a56e:	d901      	bls.n	800a574 <xTaskPriorityDisinherit+0x68>
 800a570:	4b08      	ldr	r3, [pc, #32]	; (800a594 <xTaskPriorityDisinherit+0x88>)
 800a572:	6018      	str	r0, [r3, #0]
 800a574:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a578:	4629      	mov	r1, r5
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <xTaskPriorityDisinherit+0x8c>)
 800a57c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a580:	f7fe fb34 	bl	8008bec <vListInsertEnd>
					xReturn = pdTRUE;
 800a584:	2001      	movs	r0, #1
 800a586:	e7e5      	b.n	800a554 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a588:	2000      	movs	r0, #0
	}
 800a58a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a58c:	2000      	movs	r0, #0
 800a58e:	e7e1      	b.n	800a554 <xTaskPriorityDisinherit+0x48>
 800a590:	2400a7cc 	.word	0x2400a7cc
 800a594:	2400ac48 	.word	0x2400ac48
 800a598:	2400a7d8 	.word	0x2400a7d8

0800a59c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d046      	beq.n	800a62e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800a5a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a5a6:	b943      	cbnz	r3, 800a5ba <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	e7fe      	b.n	800a5b8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5ba:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a5bc:	428a      	cmp	r2, r1
 800a5be:	d200      	bcs.n	800a5c2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5c0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a5c4:	4291      	cmp	r1, r2
 800a5c6:	d001      	beq.n	800a5cc <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d000      	beq.n	800a5ce <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800a5cc:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800a5ce:	4b18      	ldr	r3, [pc, #96]	; (800a630 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	d022      	beq.n	800a61c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800a5d6:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5d8:	69a3      	ldr	r3, [r4, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	db02      	blt.n	800a5e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5de:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a5e2:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a5e4:	6962      	ldr	r2, [r4, #20]
 800a5e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a5ea:	4b12      	ldr	r3, [pc, #72]	; (800a634 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a5ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a5f0:	428a      	cmp	r2, r1
 800a5f2:	d1eb      	bne.n	800a5cc <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5f4:	1d25      	adds	r5, r4, #4
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f7fe fb1c 	bl	8008c34 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a5fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a5fe:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4298      	cmp	r0, r3
 800a604:	d901      	bls.n	800a60a <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800a606:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800a608:	6018      	str	r0, [r3, #0]
 800a60a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a60e:	4629      	mov	r1, r5
 800a610:	4b08      	ldr	r3, [pc, #32]	; (800a634 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a612:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a616:	f7fe fae9 	bl	8008bec <vListInsertEnd>
	}
 800a61a:	e7d7      	b.n	800a5cc <vTaskPriorityDisinheritAfterTimeout+0x30>
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800a62c:	e7fe      	b.n	800a62c <vTaskPriorityDisinheritAfterTimeout+0x90>
 800a62e:	4770      	bx	lr
 800a630:	2400a7cc 	.word	0x2400a7cc
 800a634:	2400a7d8 	.word	0x2400a7d8
 800a638:	2400ac48 	.word	0x2400ac48

0800a63c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <pvTaskIncrementMutexHeldCount+0x18>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	b123      	cbz	r3, 800a64c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a642:	4b04      	ldr	r3, [pc, #16]	; (800a654 <pvTaskIncrementMutexHeldCount+0x18>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a648:	3301      	adds	r3, #1
 800a64a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800a64c:	4b01      	ldr	r3, [pc, #4]	; (800a654 <pvTaskIncrementMutexHeldCount+0x18>)
 800a64e:	6818      	ldr	r0, [r3, #0]
	}
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	2400a7cc 	.word	0x2400a7cc

0800a658 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a658:	4b06      	ldr	r3, [pc, #24]	; (800a674 <prvGetNextExpireTime+0x1c>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	6813      	ldr	r3, [r2, #0]
 800a65e:	b92b      	cbnz	r3, 800a66c <prvGetNextExpireTime+0x14>
 800a660:	2301      	movs	r3, #1
 800a662:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a664:	b923      	cbnz	r3, 800a670 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a666:	68d3      	ldr	r3, [r2, #12]
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a66c:	2300      	movs	r3, #0
 800a66e:	e7f8      	b.n	800a662 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a670:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a672:	4770      	bx	lr
 800a674:	2400accc 	.word	0x2400accc

0800a678 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a678:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a67a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a67c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a67e:	4291      	cmp	r1, r2
 800a680:	d80c      	bhi.n	800a69c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a682:	1ad2      	subs	r2, r2, r3
 800a684:	6983      	ldr	r3, [r0, #24]
 800a686:	429a      	cmp	r2, r3
 800a688:	d301      	bcc.n	800a68e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a68a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a68c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a68e:	1d01      	adds	r1, r0, #4
 800a690:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <prvInsertTimerInActiveList+0x48>)
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	f7fe fab5 	bl	8008c02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a698:	2000      	movs	r0, #0
 800a69a:	e7f7      	b.n	800a68c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bf2c      	ite	cs
 800a6a0:	2200      	movcs	r2, #0
 800a6a2:	2201      	movcc	r2, #1
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	bf38      	it	cc
 800a6a8:	2200      	movcc	r2, #0
 800a6aa:	b10a      	cbz	r2, 800a6b0 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800a6ac:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a6ae:	e7ed      	b.n	800a68c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6b0:	1d01      	adds	r1, r0, #4
 800a6b2:	4b04      	ldr	r3, [pc, #16]	; (800a6c4 <prvInsertTimerInActiveList+0x4c>)
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	f7fe faa4 	bl	8008c02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	e7e6      	b.n	800a68c <prvInsertTimerInActiveList+0x14>
 800a6be:	bf00      	nop
 800a6c0:	2400acd0 	.word	0x2400acd0
 800a6c4:	2400accc 	.word	0x2400accc

0800a6c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6c8:	b530      	push	{r4, r5, lr}
 800a6ca:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6cc:	f7fe fb32 	bl	8008d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6d0:	4b11      	ldr	r3, [pc, #68]	; (800a718 <prvCheckForValidListAndQueue+0x50>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	b11b      	cbz	r3, 800a6de <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6d6:	f7fe fb4f 	bl	8008d78 <vPortExitCritical>
}
 800a6da:	b003      	add	sp, #12
 800a6dc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a6de:	4d0f      	ldr	r5, [pc, #60]	; (800a71c <prvCheckForValidListAndQueue+0x54>)
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f7fe fa75 	bl	8008bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6e6:	4c0e      	ldr	r4, [pc, #56]	; (800a720 <prvCheckForValidListAndQueue+0x58>)
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7fe fa71 	bl	8008bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6ee:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <prvCheckForValidListAndQueue+0x5c>)
 800a6f0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6f2:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <prvCheckForValidListAndQueue+0x60>)
 800a6f4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <prvCheckForValidListAndQueue+0x64>)
 800a6fc:	4a0c      	ldr	r2, [pc, #48]	; (800a730 <prvCheckForValidListAndQueue+0x68>)
 800a6fe:	2110      	movs	r1, #16
 800a700:	200a      	movs	r0, #10
 800a702:	f7fe fd66 	bl	80091d2 <xQueueGenericCreateStatic>
 800a706:	4b04      	ldr	r3, [pc, #16]	; (800a718 <prvCheckForValidListAndQueue+0x50>)
 800a708:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d0e3      	beq.n	800a6d6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a70e:	4909      	ldr	r1, [pc, #36]	; (800a734 <prvCheckForValidListAndQueue+0x6c>)
 800a710:	f7ff f972 	bl	80099f8 <vQueueAddToRegistry>
 800a714:	e7df      	b.n	800a6d6 <prvCheckForValidListAndQueue+0xe>
 800a716:	bf00      	nop
 800a718:	2400adf0 	.word	0x2400adf0
 800a71c:	2400ad74 	.word	0x2400ad74
 800a720:	2400ad88 	.word	0x2400ad88
 800a724:	2400accc 	.word	0x2400accc
 800a728:	2400acd0 	.word	0x2400acd0
 800a72c:	2400ada0 	.word	0x2400ada0
 800a730:	2400acd4 	.word	0x2400acd4
 800a734:	08019f64 	.word	0x08019f64

0800a738 <xTimerCreateTimerTask>:
{
 800a738:	b510      	push	{r4, lr}
 800a73a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a73c:	f7ff ffc4 	bl	800a6c8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a740:	4b12      	ldr	r3, [pc, #72]	; (800a78c <xTimerCreateTimerTask+0x54>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	b1cb      	cbz	r3, 800a77a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a746:	2400      	movs	r4, #0
 800a748:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a74a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a74c:	aa07      	add	r2, sp, #28
 800a74e:	a906      	add	r1, sp, #24
 800a750:	a805      	add	r0, sp, #20
 800a752:	f7fe f911 	bl	8008978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a756:	9b05      	ldr	r3, [sp, #20]
 800a758:	9302      	str	r3, [sp, #8]
 800a75a:	9b06      	ldr	r3, [sp, #24]
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	2302      	movs	r3, #2
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	4623      	mov	r3, r4
 800a764:	9a07      	ldr	r2, [sp, #28]
 800a766:	490a      	ldr	r1, [pc, #40]	; (800a790 <xTimerCreateTimerTask+0x58>)
 800a768:	480a      	ldr	r0, [pc, #40]	; (800a794 <xTimerCreateTimerTask+0x5c>)
 800a76a:	f7ff fb53 	bl	8009e14 <xTaskCreateStatic>
 800a76e:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <xTimerCreateTimerTask+0x60>)
 800a770:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a772:	b110      	cbz	r0, 800a77a <xTimerCreateTimerTask+0x42>
}
 800a774:	2001      	movs	r0, #1
 800a776:	b008      	add	sp, #32
 800a778:	bd10      	pop	{r4, pc}
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a78a:	e7fe      	b.n	800a78a <xTimerCreateTimerTask+0x52>
 800a78c:	2400adf0 	.word	0x2400adf0
 800a790:	08019f6c 	.word	0x08019f6c
 800a794:	0800aaa1 	.word	0x0800aaa1
 800a798:	2400adf4 	.word	0x2400adf4

0800a79c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a79c:	b1b8      	cbz	r0, 800a7ce <xTimerGenericCommand+0x32>
 800a79e:	469c      	mov	ip, r3
 800a7a0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a7a2:	4818      	ldr	r0, [pc, #96]	; (800a804 <xTimerGenericCommand+0x68>)
 800a7a4:	6800      	ldr	r0, [r0, #0]
 800a7a6:	b358      	cbz	r0, 800a800 <xTimerGenericCommand+0x64>
{
 800a7a8:	b500      	push	{lr}
 800a7aa:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a7ac:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7ae:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a7b0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7b2:	2905      	cmp	r1, #5
 800a7b4:	dc1c      	bgt.n	800a7f0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7b6:	f7ff fe4d 	bl	800a454 <xTaskGetSchedulerState>
 800a7ba:	2802      	cmp	r0, #2
 800a7bc:	d010      	beq.n	800a7e0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7be:	2300      	movs	r3, #0
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4669      	mov	r1, sp
 800a7c4:	480f      	ldr	r0, [pc, #60]	; (800a804 <xTimerGenericCommand+0x68>)
 800a7c6:	6800      	ldr	r0, [r0, #0]
 800a7c8:	f7fe fdbb 	bl	8009342 <xQueueGenericSend>
 800a7cc:	e015      	b.n	800a7fa <xTimerGenericCommand+0x5e>
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a7de:	e7fe      	b.n	800a7de <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9a06      	ldr	r2, [sp, #24]
 800a7e4:	4669      	mov	r1, sp
 800a7e6:	4807      	ldr	r0, [pc, #28]	; (800a804 <xTimerGenericCommand+0x68>)
 800a7e8:	6800      	ldr	r0, [r0, #0]
 800a7ea:	f7fe fdaa 	bl	8009342 <xQueueGenericSend>
 800a7ee:	e004      	b.n	800a7fa <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4662      	mov	r2, ip
 800a7f4:	4669      	mov	r1, sp
 800a7f6:	f7fe fe68 	bl	80094ca <xQueueGenericSendFromISR>
}
 800a7fa:	b005      	add	sp, #20
 800a7fc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a800:	2000      	movs	r0, #0
}
 800a802:	4770      	bx	lr
 800a804:	2400adf0 	.word	0x2400adf0

0800a808 <prvSwitchTimerLists>:
{
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a80c:	4b1b      	ldr	r3, [pc, #108]	; (800a87c <prvSwitchTimerLists+0x74>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	b362      	cbz	r2, 800a86e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a818:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a81a:	1d25      	adds	r5, r4, #4
 800a81c:	4628      	mov	r0, r5
 800a81e:	f7fe fa09 	bl	8008c34 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a822:	6a23      	ldr	r3, [r4, #32]
 800a824:	4620      	mov	r0, r4
 800a826:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a828:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a82c:	f013 0f04 	tst.w	r3, #4
 800a830:	d0ec      	beq.n	800a80c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a832:	69a3      	ldr	r3, [r4, #24]
 800a834:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a836:	429e      	cmp	r6, r3
 800a838:	d207      	bcs.n	800a84a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a83a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a83c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a83e:	4629      	mov	r1, r5
 800a840:	4b0e      	ldr	r3, [pc, #56]	; (800a87c <prvSwitchTimerLists+0x74>)
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	f7fe f9dd 	bl	8008c02 <vListInsert>
 800a848:	e7e0      	b.n	800a80c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a84a:	2100      	movs	r1, #0
 800a84c:	9100      	str	r1, [sp, #0]
 800a84e:	460b      	mov	r3, r1
 800a850:	4632      	mov	r2, r6
 800a852:	4620      	mov	r0, r4
 800a854:	f7ff ffa2 	bl	800a79c <xTimerGenericCommand>
				configASSERT( xResult );
 800a858:	2800      	cmp	r0, #0
 800a85a:	d1d7      	bne.n	800a80c <prvSwitchTimerLists+0x4>
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	e7fe      	b.n	800a86c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a86e:	4a04      	ldr	r2, [pc, #16]	; (800a880 <prvSwitchTimerLists+0x78>)
 800a870:	6810      	ldr	r0, [r2, #0]
 800a872:	4902      	ldr	r1, [pc, #8]	; (800a87c <prvSwitchTimerLists+0x74>)
 800a874:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a876:	6013      	str	r3, [r2, #0]
}
 800a878:	b002      	add	sp, #8
 800a87a:	bd70      	pop	{r4, r5, r6, pc}
 800a87c:	2400accc 	.word	0x2400accc
 800a880:	2400acd0 	.word	0x2400acd0

0800a884 <prvSampleTimeNow>:
{
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a888:	f7ff fb92 	bl	8009fb0 <xTaskGetTickCount>
 800a88c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a88e:	4b07      	ldr	r3, [pc, #28]	; (800a8ac <prvSampleTimeNow+0x28>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4283      	cmp	r3, r0
 800a894:	d805      	bhi.n	800a8a2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a89a:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <prvSampleTimeNow+0x28>)
 800a89c:	601c      	str	r4, [r3, #0]
}
 800a89e:	4620      	mov	r0, r4
 800a8a0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a8a2:	f7ff ffb1 	bl	800a808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	602b      	str	r3, [r5, #0]
 800a8aa:	e7f6      	b.n	800a89a <prvSampleTimeNow+0x16>
 800a8ac:	2400ad9c 	.word	0x2400ad9c

0800a8b0 <prvProcessExpiredTimer>:
{
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b8:	4917      	ldr	r1, [pc, #92]	; (800a918 <prvProcessExpiredTimer+0x68>)
 800a8ba:	6809      	ldr	r1, [r1, #0]
 800a8bc:	68c9      	ldr	r1, [r1, #12]
 800a8be:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c0:	1d20      	adds	r0, r4, #4
 800a8c2:	f7fe f9b7 	bl	8008c34 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8c6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800a8ca:	f01c 0f04 	tst.w	ip, #4
 800a8ce:	d108      	bne.n	800a8e2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8d0:	f02c 0c01 	bic.w	ip, ip, #1
 800a8d4:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8d8:	6a23      	ldr	r3, [r4, #32]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4798      	blx	r3
}
 800a8de:	b002      	add	sp, #8
 800a8e0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8e2:	69a1      	ldr	r1, [r4, #24]
 800a8e4:	4633      	mov	r3, r6
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	4431      	add	r1, r6
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7ff fec4 	bl	800a678 <prvInsertTimerInActiveList>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d0f1      	beq.n	800a8d8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	9100      	str	r1, [sp, #0]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7ff ff4d 	bl	800a79c <xTimerGenericCommand>
			configASSERT( xResult );
 800a902:	2800      	cmp	r0, #0
 800a904:	d1e8      	bne.n	800a8d8 <prvProcessExpiredTimer+0x28>
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	e7fe      	b.n	800a916 <prvProcessExpiredTimer+0x66>
 800a918:	2400accc 	.word	0x2400accc

0800a91c <prvProcessTimerOrBlockTask>:
{
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	4606      	mov	r6, r0
 800a922:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a924:	f7ff fb3c 	bl	8009fa0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a928:	a801      	add	r0, sp, #4
 800a92a:	f7ff ffab 	bl	800a884 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	bb3b      	cbnz	r3, 800a982 <prvProcessTimerOrBlockTask+0x66>
 800a932:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a934:	42b0      	cmp	r0, r6
 800a936:	bf28      	it	cs
 800a938:	2c00      	cmpcs	r4, #0
 800a93a:	d019      	beq.n	800a970 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800a93c:	b124      	cbz	r4, 800a948 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a93e:	4a13      	ldr	r2, [pc, #76]	; (800a98c <prvProcessTimerOrBlockTask+0x70>)
 800a940:	6812      	ldr	r2, [r2, #0]
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	b9da      	cbnz	r2, 800a97e <prvProcessTimerOrBlockTask+0x62>
 800a946:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a948:	4622      	mov	r2, r4
 800a94a:	1b71      	subs	r1, r6, r5
 800a94c:	4b10      	ldr	r3, [pc, #64]	; (800a990 <prvProcessTimerOrBlockTask+0x74>)
 800a94e:	6818      	ldr	r0, [r3, #0]
 800a950:	f7ff f892 	bl	8009a78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a954:	f7ff fbbe 	bl	800a0d4 <xTaskResumeAll>
 800a958:	b9a8      	cbnz	r0, 800a986 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800a95a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a962:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	e00a      	b.n	800a986 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800a970:	f7ff fbb0 	bl	800a0d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a974:	4629      	mov	r1, r5
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ff9a 	bl	800a8b0 <prvProcessExpiredTimer>
 800a97c:	e003      	b.n	800a986 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a97e:	461c      	mov	r4, r3
 800a980:	e7e2      	b.n	800a948 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800a982:	f7ff fba7 	bl	800a0d4 <xTaskResumeAll>
}
 800a986:	b002      	add	sp, #8
 800a988:	bd70      	pop	{r4, r5, r6, pc}
 800a98a:	bf00      	nop
 800a98c:	2400acd0 	.word	0x2400acd0
 800a990:	2400adf0 	.word	0x2400adf0

0800a994 <prvProcessReceivedCommands>:
{
 800a994:	b510      	push	{r4, lr}
 800a996:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a998:	e002      	b.n	800a9a0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da0f      	bge.n	800a9c0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	a904      	add	r1, sp, #16
 800a9a4:	4b3d      	ldr	r3, [pc, #244]	; (800aa9c <prvProcessReceivedCommands+0x108>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	f7fe fe4f 	bl	800964a <xQueueReceive>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d073      	beq.n	800aa98 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9b0:	9b04      	ldr	r3, [sp, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	daf1      	bge.n	800a99a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9b6:	9907      	ldr	r1, [sp, #28]
 800a9b8:	9806      	ldr	r0, [sp, #24]
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	4798      	blx	r3
 800a9be:	e7ec      	b.n	800a99a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9c0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9c2:	6963      	ldr	r3, [r4, #20]
 800a9c4:	b113      	cbz	r3, 800a9cc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9c6:	1d20      	adds	r0, r4, #4
 800a9c8:	f7fe f934 	bl	8008c34 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9cc:	a803      	add	r0, sp, #12
 800a9ce:	f7ff ff59 	bl	800a884 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a9d2:	9b04      	ldr	r3, [sp, #16]
 800a9d4:	2b09      	cmp	r3, #9
 800a9d6:	d8e3      	bhi.n	800a9a0 <prvProcessReceivedCommands+0xc>
 800a9d8:	e8df f003 	tbb	[pc, r3]
 800a9dc:	30050505 	.word	0x30050505
 800a9e0:	05055037 	.word	0x05055037
 800a9e4:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a9ea:	f043 0301 	orr.w	r3, r3, #1
 800a9ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9f2:	9b05      	ldr	r3, [sp, #20]
 800a9f4:	69a1      	ldr	r1, [r4, #24]
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	4419      	add	r1, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f7ff fe3c 	bl	800a678 <prvInsertTimerInActiveList>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d0cd      	beq.n	800a9a0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa04:	6a23      	ldr	r3, [r4, #32]
 800aa06:	4620      	mov	r0, r4
 800aa08:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa0a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa0e:	f013 0f04 	tst.w	r3, #4
 800aa12:	d0c5      	beq.n	800a9a0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa14:	69a2      	ldr	r2, [r4, #24]
 800aa16:	2100      	movs	r1, #0
 800aa18:	9100      	str	r1, [sp, #0]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	9805      	ldr	r0, [sp, #20]
 800aa1e:	4402      	add	r2, r0
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7ff febb 	bl	800a79c <xTimerGenericCommand>
							configASSERT( xResult );
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d1ba      	bne.n	800a9a0 <prvProcessReceivedCommands+0xc>
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	e7fe      	b.n	800aa3a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa3c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa40:	f023 0301 	bic.w	r3, r3, #1
 800aa44:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800aa48:	e7aa      	b.n	800a9a0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa4e:	f043 0301 	orr.w	r3, r3, #1
 800aa52:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa56:	9905      	ldr	r1, [sp, #20]
 800aa58:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa5a:	b131      	cbz	r1, 800aa6a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	4602      	mov	r2, r0
 800aa60:	4401      	add	r1, r0
 800aa62:	4620      	mov	r0, r4
 800aa64:	f7ff fe08 	bl	800a678 <prvInsertTimerInActiveList>
					break;
 800aa68:	e79a      	b.n	800a9a0 <prvProcessReceivedCommands+0xc>
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa7a:	e7fe      	b.n	800aa7a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa80:	f013 0f02 	tst.w	r3, #2
 800aa84:	d004      	beq.n	800aa90 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa86:	f023 0301 	bic.w	r3, r3, #1
 800aa8a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800aa8e:	e787      	b.n	800a9a0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7fe f85f 	bl	8008b54 <vPortFree>
 800aa96:	e783      	b.n	800a9a0 <prvProcessReceivedCommands+0xc>
}
 800aa98:	b008      	add	sp, #32
 800aa9a:	bd10      	pop	{r4, pc}
 800aa9c:	2400adf0 	.word	0x2400adf0

0800aaa0 <prvTimerTask>:
{
 800aaa0:	b500      	push	{lr}
 800aaa2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaa4:	a801      	add	r0, sp, #4
 800aaa6:	f7ff fdd7 	bl	800a658 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aaaa:	9901      	ldr	r1, [sp, #4]
 800aaac:	f7ff ff36 	bl	800a91c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800aab0:	f7ff ff70 	bl	800a994 <prvProcessReceivedCommands>
	for( ;; )
 800aab4:	e7f6      	b.n	800aaa4 <prvTimerTask+0x4>

0800aab6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800aab6:	8880      	ldrh	r0, [r0, #4]
 800aab8:	4770      	bx	lr

0800aaba <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800aaba:	b570      	push	{r4, r5, r6, lr}
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	460c      	mov	r4, r1
 800aac0:	2100      	movs	r1, #0
 800aac2:	4605      	mov	r5, r0
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	4798      	blx	r3
 800aac8:	4606      	mov	r6, r0
 800aaca:	682b      	ldr	r3, [r5, #0]
 800aacc:	4628      	mov	r0, r5
 800aace:	1ba4      	subs	r4, r4, r6
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	b2a4      	uxth	r4, r4
 800aad4:	4798      	blx	r3
 800aad6:	fbb4 f0f0 	udiv	r0, r4, r0
 800aada:	bd70      	pop	{r4, r5, r6, pc}

0800aadc <_ZN8touchgfx17AbstractPartition5clearEv>:
 800aadc:	2300      	movs	r3, #0
 800aade:	8083      	strh	r3, [r0, #4]
 800aae0:	4770      	bx	lr

0800aae2 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800aae2:	b510      	push	{r4, lr}
 800aae4:	6803      	ldr	r3, [r0, #0]
 800aae6:	4604      	mov	r4, r0
 800aae8:	8881      	ldrh	r1, [r0, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	4798      	blx	r3
 800aaee:	88a3      	ldrh	r3, [r4, #4]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	80a3      	strh	r3, [r4, #4]
 800aaf4:	bd10      	pop	{r4, pc}

0800aaf6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800aaf6:	6803      	ldr	r3, [r0, #0]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafa:	4718      	bx	r3

0800aafc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800aafc:	4770      	bx	lr
	...

0800ab00 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ab00:	4a02      	ldr	r2, [pc, #8]	; (800ab0c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ab02:	6002      	str	r2, [r0, #0]
 800ab04:	2200      	movs	r2, #0
 800ab06:	8082      	strh	r2, [r0, #4]
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	08019f7c 	.word	0x08019f7c

0800ab10 <_ZN8touchgfx9Container13getFirstChildEv>:
 800ab10:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ab12:	4770      	bx	lr

0800ab14 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ab14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab16:	2000      	movs	r0, #0
 800ab18:	b12b      	cbz	r3, 800ab26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ab1a:	b920      	cbnz	r0, 800ab26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ab1c:	1a5a      	subs	r2, r3, r1
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	4250      	negs	r0, r2
 800ab22:	4150      	adcs	r0, r2
 800ab24:	e7f8      	b.n	800ab18 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ab26:	4770      	bx	lr

0800ab28 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6148      	str	r0, [r1, #20]
 800ab2c:	618b      	str	r3, [r1, #24]
 800ab2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab30:	b913      	cbnz	r3, 800ab38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ab32:	6281      	str	r1, [r0, #40]	; 0x28
 800ab34:	4770      	bx	lr
 800ab36:	4613      	mov	r3, r2
 800ab38:	699a      	ldr	r2, [r3, #24]
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	d1fb      	bne.n	800ab36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ab3e:	6199      	str	r1, [r3, #24]
 800ab40:	4770      	bx	lr

0800ab42 <_ZN8touchgfx9Container9removeAllEv>:
 800ab42:	2200      	movs	r2, #0
 800ab44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab46:	b123      	cbz	r3, 800ab52 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ab48:	6999      	ldr	r1, [r3, #24]
 800ab4a:	6281      	str	r1, [r0, #40]	; 0x28
 800ab4c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ab50:	e7f8      	b.n	800ab44 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ab52:	4770      	bx	lr

0800ab54 <_ZN8touchgfx9Container6unlinkEv>:
 800ab54:	2300      	movs	r3, #0
 800ab56:	6283      	str	r3, [r0, #40]	; 0x28
 800ab58:	4770      	bx	lr

0800ab5a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	8002      	strh	r2, [r0, #0]
 800ab5e:	8042      	strh	r2, [r0, #2]
 800ab60:	8082      	strh	r2, [r0, #4]
 800ab62:	80c2      	strh	r2, [r0, #6]
 800ab64:	4770      	bx	lr

0800ab66 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ab66:	b570      	push	{r4, r5, r6, lr}
 800ab68:	460d      	mov	r5, r1
 800ab6a:	4616      	mov	r6, r2
 800ab6c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ab6e:	b13c      	cbz	r4, 800ab80 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	4620      	mov	r0, r4
 800ab74:	4632      	mov	r2, r6
 800ab76:	4629      	mov	r1, r5
 800ab78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7a:	4798      	blx	r3
 800ab7c:	69a4      	ldr	r4, [r4, #24]
 800ab7e:	e7f6      	b.n	800ab6e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ab80:	bd70      	pop	{r4, r5, r6, pc}

0800ab82 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ab82:	b538      	push	{r3, r4, r5, lr}
 800ab84:	460d      	mov	r5, r1
 800ab86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ab88:	b134      	cbz	r4, 800ab98 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ab8a:	682b      	ldr	r3, [r5, #0]
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	4628      	mov	r0, r5
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	4798      	blx	r3
 800ab94:	69a4      	ldr	r4, [r4, #24]
 800ab96:	e7f7      	b.n	800ab88 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ab98:	bd38      	pop	{r3, r4, r5, pc}

0800ab9a <_ZNK8touchgfx9Container17invalidateContentEv>:
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ab9e:	b12c      	cbz	r4, 800abac <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	4620      	mov	r0, r4
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	4798      	blx	r3
 800aba8:	69a4      	ldr	r4, [r4, #24]
 800abaa:	e7f8      	b.n	800ab9e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800abac:	bd10      	pop	{r4, pc}

0800abae <_ZN8touchgfx9ContainerD1Ev>:
 800abae:	4770      	bx	lr

0800abb0 <_ZN8touchgfx9ContainerD0Ev>:
 800abb0:	b510      	push	{r4, lr}
 800abb2:	4604      	mov	r4, r0
 800abb4:	212c      	movs	r1, #44	; 0x2c
 800abb6:	f00c ffde 	bl	8017b76 <_ZdlPvj>
 800abba:	4620      	mov	r0, r4
 800abbc:	bd10      	pop	{r4, pc}

0800abbe <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800abbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abc0:	b19b      	cbz	r3, 800abea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800abc2:	428b      	cmp	r3, r1
 800abc4:	d109      	bne.n	800abda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	2100      	movs	r1, #0
 800abca:	6159      	str	r1, [r3, #20]
 800abcc:	6282      	str	r2, [r0, #40]	; 0x28
 800abce:	b902      	cbnz	r2, 800abd2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800abd0:	4770      	bx	lr
 800abd2:	6199      	str	r1, [r3, #24]
 800abd4:	4770      	bx	lr
 800abd6:	4613      	mov	r3, r2
 800abd8:	b13a      	cbz	r2, 800abea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800abda:	699a      	ldr	r2, [r3, #24]
 800abdc:	428a      	cmp	r2, r1
 800abde:	d1fa      	bne.n	800abd6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800abe0:	698a      	ldr	r2, [r1, #24]
 800abe2:	619a      	str	r2, [r3, #24]
 800abe4:	2300      	movs	r3, #0
 800abe6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800abea:	4770      	bx	lr

0800abec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800abec:	b410      	push	{r4}
 800abee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abf0:	4604      	mov	r4, r0
 800abf2:	b92b      	cbnz	r3, 800ac00 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800abf4:	6803      	ldr	r3, [r0, #0]
 800abf6:	4611      	mov	r1, r2
 800abf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abfe:	4718      	bx	r3
 800ac00:	b941      	cbnz	r1, 800ac14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ac02:	6193      	str	r3, [r2, #24]
 800ac04:	6282      	str	r2, [r0, #40]	; 0x28
 800ac06:	6154      	str	r4, [r2, #20]
 800ac08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d0f9      	beq.n	800ac08 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ac14:	4299      	cmp	r1, r3
 800ac16:	6998      	ldr	r0, [r3, #24]
 800ac18:	d1f9      	bne.n	800ac0e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ac1a:	6190      	str	r0, [r2, #24]
 800ac1c:	618a      	str	r2, [r1, #24]
 800ac1e:	e7f2      	b.n	800ac06 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ac20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ac20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac24:	461f      	mov	r7, r3
 800ac26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ac2a:	460d      	mov	r5, r1
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	b103      	cbz	r3, 800ac32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ac30:	6038      	str	r0, [r7, #0]
 800ac32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ac34:	b314      	cbz	r4, 800ac7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ac36:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ac3a:	b1eb      	cbz	r3, 800ac78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac3c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ac40:	428d      	cmp	r5, r1
 800ac42:	db19      	blt.n	800ac78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac44:	b289      	uxth	r1, r1
 800ac46:	8923      	ldrh	r3, [r4, #8]
 800ac48:	440b      	add	r3, r1
 800ac4a:	b21b      	sxth	r3, r3
 800ac4c:	429d      	cmp	r5, r3
 800ac4e:	da13      	bge.n	800ac78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac50:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ac54:	4296      	cmp	r6, r2
 800ac56:	db0f      	blt.n	800ac78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac58:	b292      	uxth	r2, r2
 800ac5a:	8963      	ldrh	r3, [r4, #10]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	b21b      	sxth	r3, r3
 800ac60:	429e      	cmp	r6, r3
 800ac62:	da09      	bge.n	800ac78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	1ab2      	subs	r2, r6, r2
 800ac68:	1a69      	subs	r1, r5, r1
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800ac70:	b212      	sxth	r2, r2
 800ac72:	463b      	mov	r3, r7
 800ac74:	b209      	sxth	r1, r1
 800ac76:	47c0      	blx	r8
 800ac78:	69a4      	ldr	r4, [r4, #24]
 800ac7a:	e7db      	b.n	800ac34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	4c6d      	ldr	r4, [pc, #436]	; (800ae3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ac86:	b0a1      	sub	sp, #132	; 0x84
 800ac88:	4606      	mov	r6, r0
 800ac8a:	6824      	ldr	r4, [r4, #0]
 800ac8c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800ac8e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800ac92:	2400      	movs	r4, #0
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	802c      	strh	r4, [r5, #0]
 800ac98:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ac9a:	802c      	strh	r4, [r5, #0]
 800ac9c:	601c      	str	r4, [r3, #0]
 800ac9e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800aca2:	f7ff ffbd 	bl	800ac20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800aca6:	f1b9 0f03 	cmp.w	r9, #3
 800acaa:	f340 80c1 	ble.w	800ae30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800acae:	4631      	mov	r1, r6
 800acb0:	a80c      	add	r0, sp, #48	; 0x30
 800acb2:	f003 fa6f 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800acb6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800acba:	9306      	str	r3, [sp, #24]
 800acbc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800acc0:	9307      	str	r3, [sp, #28]
 800acc2:	9b03      	ldr	r3, [sp, #12]
 800acc4:	f8d3 a000 	ldr.w	sl, [r3]
 800acc8:	f1ba 0f00 	cmp.w	sl, #0
 800accc:	f000 80b3 	beq.w	800ae36 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800acd0:	4651      	mov	r1, sl
 800acd2:	a810      	add	r0, sp, #64	; 0x40
 800acd4:	f003 fa5e 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800acd8:	2002      	movs	r0, #2
 800acda:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800acde:	9b01      	ldr	r3, [sp, #4]
 800ace0:	9a06      	ldr	r2, [sp, #24]
 800ace2:	fb91 f1f0 	sdiv	r1, r1, r0
 800ace6:	189d      	adds	r5, r3, r2
 800ace8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800acec:	9a07      	ldr	r2, [sp, #28]
 800acee:	4419      	add	r1, r3
 800acf0:	9b02      	ldr	r3, [sp, #8]
 800acf2:	4413      	add	r3, r2
 800acf4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800acf8:	1a6d      	subs	r5, r5, r1
 800acfa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800acfe:	fb92 f2f0 	sdiv	r2, r2, r0
 800ad02:	440a      	add	r2, r1
 800ad04:	1a9b      	subs	r3, r3, r2
 800ad06:	435b      	muls	r3, r3
 800ad08:	fb05 3505 	mla	r5, r5, r5, r3
 800ad0c:	4f4c      	ldr	r7, [pc, #304]	; (800ae40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ad0e:	ac10      	add	r4, sp, #64	; 0x40
 800ad10:	f1b9 0f0c 	cmp.w	r9, #12
 800ad14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad1c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad20:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ad24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad28:	f04f 0303 	mov.w	r3, #3
 800ad2c:	bfd8      	it	le
 800ad2e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800ad32:	f04f 0400 	mov.w	r4, #0
 800ad36:	f8cd 9000 	str.w	r9, [sp]
 800ad3a:	bfcc      	ite	gt
 800ad3c:	4698      	movgt	r8, r3
 800ad3e:	fb92 f8f3 	sdivle	r8, r2, r3
 800ad42:	1c63      	adds	r3, r4, #1
 800ad44:	aa10      	add	r2, sp, #64	; 0x40
 800ad46:	f004 0401 	and.w	r4, r4, #1
 800ad4a:	f04f 0b00 	mov.w	fp, #0
 800ad4e:	9308      	str	r3, [sp, #32]
 800ad50:	9b00      	ldr	r3, [sp, #0]
 800ad52:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800ad56:	fb93 f3f8 	sdiv	r3, r3, r8
 800ad5a:	3404      	adds	r4, #4
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	9304      	str	r3, [sp, #16]
 800ad60:	9a04      	ldr	r2, [sp, #16]
 800ad62:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad66:	fb13 f302 	smulbb	r3, r3, r2
 800ad6a:	9a01      	ldr	r2, [sp, #4]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	1899      	adds	r1, r3, r2
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ad76:	b209      	sxth	r1, r1
 800ad78:	4299      	cmp	r1, r3
 800ad7a:	db4d      	blt.n	800ae18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ad7c:	8932      	ldrh	r2, [r6, #8]
 800ad7e:	4413      	add	r3, r2
 800ad80:	b21b      	sxth	r3, r3
 800ad82:	4299      	cmp	r1, r3
 800ad84:	da48      	bge.n	800ae18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ad86:	9b04      	ldr	r3, [sp, #16]
 800ad88:	6827      	ldr	r7, [r4, #0]
 800ad8a:	fb17 f703 	smulbb	r7, r7, r3
 800ad8e:	9b02      	ldr	r3, [sp, #8]
 800ad90:	b2bf      	uxth	r7, r7
 800ad92:	18fa      	adds	r2, r7, r3
 800ad94:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ad98:	b212      	sxth	r2, r2
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	db3c      	blt.n	800ae18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ad9e:	8970      	ldrh	r0, [r6, #10]
 800ada0:	4403      	add	r3, r0
 800ada2:	b21b      	sxth	r3, r3
 800ada4:	429a      	cmp	r2, r3
 800ada6:	da37      	bge.n	800ae18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ada8:	2300      	movs	r3, #0
 800adaa:	4630      	mov	r0, r6
 800adac:	930b      	str	r3, [sp, #44]	; 0x2c
 800adae:	ab0b      	add	r3, sp, #44	; 0x2c
 800adb0:	f7ff ff36 	bl	800ac20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800adb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adb6:	b37a      	cbz	r2, 800ae18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adb8:	4552      	cmp	r2, sl
 800adba:	d02d      	beq.n	800ae18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adbc:	4611      	mov	r1, r2
 800adbe:	a80e      	add	r0, sp, #56	; 0x38
 800adc0:	9209      	str	r2, [sp, #36]	; 0x24
 800adc2:	f003 f9e7 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800adc6:	f04f 0e02 	mov.w	lr, #2
 800adca:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800adce:	9a06      	ldr	r2, [sp, #24]
 800add0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800adda:	4413      	add	r3, r2
 800addc:	9a07      	ldr	r2, [sp, #28]
 800adde:	fb91 f1fe 	sdiv	r1, r1, lr
 800ade2:	fb9c fcfe 	sdiv	ip, ip, lr
 800ade6:	4401      	add	r1, r0
 800ade8:	1a58      	subs	r0, r3, r1
 800adea:	9b02      	ldr	r3, [sp, #8]
 800adec:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800adf0:	4413      	add	r3, r2
 800adf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf4:	448c      	add	ip, r1
 800adf6:	eba3 030c 	sub.w	r3, r3, ip
 800adfa:	435b      	muls	r3, r3
 800adfc:	fb00 3300 	mla	r3, r0, r0, r3
 800ae00:	42ab      	cmp	r3, r5
 800ae02:	d208      	bcs.n	800ae16 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800ae04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae06:	461d      	mov	r5, r3
 800ae08:	9803      	ldr	r0, [sp, #12]
 800ae0a:	6001      	str	r1, [r0, #0]
 800ae0c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ae0e:	9805      	ldr	r0, [sp, #20]
 800ae10:	8008      	strh	r0, [r1, #0]
 800ae12:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ae14:	800f      	strh	r7, [r1, #0]
 800ae16:	4692      	mov	sl, r2
 800ae18:	f10b 0b01 	add.w	fp, fp, #1
 800ae1c:	3408      	adds	r4, #8
 800ae1e:	f1bb 0f04 	cmp.w	fp, #4
 800ae22:	d19d      	bne.n	800ad60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800ae24:	9b00      	ldr	r3, [sp, #0]
 800ae26:	9c08      	ldr	r4, [sp, #32]
 800ae28:	444b      	add	r3, r9
 800ae2a:	4544      	cmp	r4, r8
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	d188      	bne.n	800ad42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800ae30:	b021      	add	sp, #132	; 0x84
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	f04f 35ff 	mov.w	r5, #4294967295
 800ae3a:	e767      	b.n	800ad0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800ae3c:	2400ae04 	.word	0x2400ae04
 800ae40:	08018e24 	.word	0x08018e24

0800ae44 <_ZN8touchgfx4RectaNERKS0_>:
 800ae44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae48:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ae4c:	888c      	ldrh	r4, [r1, #4]
 800ae4e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ae52:	443c      	add	r4, r7
 800ae54:	b2a4      	uxth	r4, r4
 800ae56:	fa0f f884 	sxth.w	r8, r4
 800ae5a:	45c1      	cmp	r9, r8
 800ae5c:	da2f      	bge.n	800aebe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae5e:	8882      	ldrh	r2, [r0, #4]
 800ae60:	444a      	add	r2, r9
 800ae62:	b292      	uxth	r2, r2
 800ae64:	fa0f fe82 	sxth.w	lr, r2
 800ae68:	4577      	cmp	r7, lr
 800ae6a:	da28      	bge.n	800aebe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae6c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ae70:	88cb      	ldrh	r3, [r1, #6]
 800ae72:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800ae76:	442b      	add	r3, r5
 800ae78:	b21b      	sxth	r3, r3
 800ae7a:	429e      	cmp	r6, r3
 800ae7c:	da1f      	bge.n	800aebe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae7e:	88c3      	ldrh	r3, [r0, #6]
 800ae80:	4433      	add	r3, r6
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	fa0f fc83 	sxth.w	ip, r3
 800ae88:	4565      	cmp	r5, ip
 800ae8a:	da18      	bge.n	800aebe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae8c:	454f      	cmp	r7, r9
 800ae8e:	bfb8      	it	lt
 800ae90:	464f      	movlt	r7, r9
 800ae92:	42b5      	cmp	r5, r6
 800ae94:	bfb8      	it	lt
 800ae96:	4635      	movlt	r5, r6
 800ae98:	45f0      	cmp	r8, lr
 800ae9a:	bfd8      	it	le
 800ae9c:	4622      	movle	r2, r4
 800ae9e:	1bd2      	subs	r2, r2, r7
 800aea0:	8082      	strh	r2, [r0, #4]
 800aea2:	884a      	ldrh	r2, [r1, #2]
 800aea4:	88c9      	ldrh	r1, [r1, #6]
 800aea6:	8007      	strh	r7, [r0, #0]
 800aea8:	440a      	add	r2, r1
 800aeaa:	8045      	strh	r5, [r0, #2]
 800aeac:	b292      	uxth	r2, r2
 800aeae:	b211      	sxth	r1, r2
 800aeb0:	458c      	cmp	ip, r1
 800aeb2:	bfa8      	it	ge
 800aeb4:	4613      	movge	r3, r2
 800aeb6:	1b5b      	subs	r3, r3, r5
 800aeb8:	80c3      	strh	r3, [r0, #6]
 800aeba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aebe:	2300      	movs	r3, #0
 800aec0:	8003      	strh	r3, [r0, #0]
 800aec2:	8043      	strh	r3, [r0, #2]
 800aec4:	8083      	strh	r3, [r0, #4]
 800aec6:	80c3      	strh	r3, [r0, #6]
 800aec8:	e7f7      	b.n	800aeba <_ZN8touchgfx4RectaNERKS0_+0x76>

0800aeca <_ZNK8touchgfx4Rect7isEmptyEv>:
 800aeca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dd06      	ble.n	800aee0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800aed2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800aed6:	2800      	cmp	r0, #0
 800aed8:	bfcc      	ite	gt
 800aeda:	2000      	movgt	r0, #0
 800aedc:	2001      	movle	r0, #1
 800aede:	4770      	bx	lr
 800aee0:	2001      	movs	r0, #1
 800aee2:	4770      	bx	lr

0800aee4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee8:	2300      	movs	r3, #0
 800aeea:	4604      	mov	r4, r0
 800aeec:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800aeee:	8003      	strh	r3, [r0, #0]
 800aef0:	8043      	strh	r3, [r0, #2]
 800aef2:	8083      	strh	r3, [r0, #4]
 800aef4:	80c3      	strh	r3, [r0, #6]
 800aef6:	2d00      	cmp	r5, #0
 800aef8:	d040      	beq.n	800af7c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800aefa:	1d28      	adds	r0, r5, #4
 800aefc:	f7ff ffe5 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800af00:	b988      	cbnz	r0, 800af26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800af02:	4620      	mov	r0, r4
 800af04:	f7ff ffe1 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800af08:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800af0c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800af10:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800af14:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800af18:	b138      	cbz	r0, 800af2a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800af1a:	8022      	strh	r2, [r4, #0]
 800af1c:	8063      	strh	r3, [r4, #2]
 800af1e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800af22:	f8a4 c006 	strh.w	ip, [r4, #6]
 800af26:	69ad      	ldr	r5, [r5, #24]
 800af28:	e7e5      	b.n	800aef6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800af2a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800af2e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800af32:	4290      	cmp	r0, r2
 800af34:	4607      	mov	r7, r0
 800af36:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800af3a:	460e      	mov	r6, r1
 800af3c:	bfa8      	it	ge
 800af3e:	4617      	movge	r7, r2
 800af40:	4299      	cmp	r1, r3
 800af42:	4472      	add	r2, lr
 800af44:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800af48:	bfa8      	it	ge
 800af4a:	461e      	movge	r6, r3
 800af4c:	4440      	add	r0, r8
 800af4e:	4471      	add	r1, lr
 800af50:	4463      	add	r3, ip
 800af52:	b200      	sxth	r0, r0
 800af54:	8027      	strh	r7, [r4, #0]
 800af56:	b212      	sxth	r2, r2
 800af58:	8066      	strh	r6, [r4, #2]
 800af5a:	b209      	sxth	r1, r1
 800af5c:	b21b      	sxth	r3, r3
 800af5e:	4290      	cmp	r0, r2
 800af60:	bfac      	ite	ge
 800af62:	ebc7 0200 	rsbge	r2, r7, r0
 800af66:	ebc7 0202 	rsblt	r2, r7, r2
 800af6a:	4299      	cmp	r1, r3
 800af6c:	bfac      	ite	ge
 800af6e:	ebc6 0301 	rsbge	r3, r6, r1
 800af72:	ebc6 0303 	rsblt	r3, r6, r3
 800af76:	80a2      	strh	r2, [r4, #4]
 800af78:	80e3      	strh	r3, [r4, #6]
 800af7a:	e7d4      	b.n	800af26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800af7c:	4620      	mov	r0, r4
 800af7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af82 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800af82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af86:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800af8a:	b383      	cbz	r3, 800afee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800af8c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800af8e:	b374      	cbz	r4, 800afee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800af90:	f9b1 5000 	ldrsh.w	r5, [r1]
 800af94:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800af98:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800af9c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800afa0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800afa4:	b303      	cbz	r3, 800afe8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800afa6:	4668      	mov	r0, sp
 800afa8:	1d21      	adds	r1, r4, #4
 800afaa:	f8ad 5000 	strh.w	r5, [sp]
 800afae:	f8ad 6002 	strh.w	r6, [sp, #2]
 800afb2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800afb6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800afba:	f7ff ff43 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800afbe:	4668      	mov	r0, sp
 800afc0:	f7ff ff83 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800afc4:	b980      	cbnz	r0, 800afe8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800afc6:	f8bd 3000 	ldrh.w	r3, [sp]
 800afca:	4669      	mov	r1, sp
 800afcc:	88a2      	ldrh	r2, [r4, #4]
 800afce:	4620      	mov	r0, r4
 800afd0:	1a9b      	subs	r3, r3, r2
 800afd2:	88e2      	ldrh	r2, [r4, #6]
 800afd4:	f8ad 3000 	strh.w	r3, [sp]
 800afd8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800afdc:	1a9b      	subs	r3, r3, r2
 800afde:	f8ad 3002 	strh.w	r3, [sp, #2]
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	4798      	blx	r3
 800afe8:	69a4      	ldr	r4, [r4, #24]
 800afea:	2c00      	cmp	r4, #0
 800afec:	d1d8      	bne.n	800afa0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800afee:	b002      	add	sp, #8
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aff4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800aff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aff6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800affa:	460d      	mov	r5, r1
 800affc:	4616      	mov	r6, r2
 800affe:	b323      	cbz	r3, 800b04a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b000:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b002:	b314      	cbz	r4, 800b04a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b004:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b008:	b1eb      	cbz	r3, 800b046 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b00a:	6828      	ldr	r0, [r5, #0]
 800b00c:	466b      	mov	r3, sp
 800b00e:	6869      	ldr	r1, [r5, #4]
 800b010:	c303      	stmia	r3!, {r0, r1}
 800b012:	4668      	mov	r0, sp
 800b014:	1d21      	adds	r1, r4, #4
 800b016:	f7ff ff15 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800b01a:	4668      	mov	r0, sp
 800b01c:	f7ff ff55 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800b020:	b988      	cbnz	r0, 800b046 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b022:	f8bd 3000 	ldrh.w	r3, [sp]
 800b026:	4669      	mov	r1, sp
 800b028:	88a2      	ldrh	r2, [r4, #4]
 800b02a:	4620      	mov	r0, r4
 800b02c:	1a9b      	subs	r3, r3, r2
 800b02e:	88e2      	ldrh	r2, [r4, #6]
 800b030:	f8ad 3000 	strh.w	r3, [sp]
 800b034:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b038:	1a9b      	subs	r3, r3, r2
 800b03a:	4632      	mov	r2, r6
 800b03c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b044:	4798      	blx	r3
 800b046:	69a4      	ldr	r4, [r4, #24]
 800b048:	e7db      	b.n	800b002 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800b04a:	b002      	add	sp, #8
 800b04c:	bd70      	pop	{r4, r5, r6, pc}

0800b04e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800b04e:	4770      	bx	lr

0800b050 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800b050:	4770      	bx	lr

0800b052 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800b052:	6803      	ldr	r3, [r0, #0]
 800b054:	b513      	push	{r0, r1, r4, lr}
 800b056:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800b05a:	2300      	movs	r3, #0
 800b05c:	e9cd 3300 	strd	r3, r3, [sp]
 800b060:	466b      	mov	r3, sp
 800b062:	47a0      	blx	r4
 800b064:	b002      	add	sp, #8
 800b066:	bd10      	pop	{r4, pc}

0800b068 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800b068:	2301      	movs	r3, #1
 800b06a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b06e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b072:	4770      	bx	lr

0800b074 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800b074:	2301      	movs	r3, #1
 800b076:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b07a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b07e:	4770      	bx	lr

0800b080 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800b080:	6843      	ldr	r3, [r0, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	725a      	strb	r2, [r3, #9]
 800b086:	6840      	ldr	r0, [r0, #4]
 800b088:	6803      	ldr	r3, [r0, #0]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	4718      	bx	r3

0800b08e <_ZN8touchgfx3HAL8flushDMAEv>:
 800b08e:	6840      	ldr	r0, [r0, #4]
 800b090:	6803      	ldr	r3, [r0, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	4718      	bx	r3

0800b096 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800b096:	b530      	push	{r4, r5, lr}
 800b098:	b08b      	sub	sp, #44	; 0x2c
 800b09a:	6804      	ldr	r4, [r0, #0]
 800b09c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800b0a0:	9509      	str	r5, [sp, #36]	; 0x24
 800b0a2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800b0a6:	9508      	str	r5, [sp, #32]
 800b0a8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800b0ac:	9507      	str	r5, [sp, #28]
 800b0ae:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800b0b2:	9506      	str	r5, [sp, #24]
 800b0b4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800b0b8:	9505      	str	r5, [sp, #20]
 800b0ba:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800b0be:	9504      	str	r5, [sp, #16]
 800b0c0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800b0c4:	9503      	str	r5, [sp, #12]
 800b0c6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800b0ca:	9502      	str	r5, [sp, #8]
 800b0cc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800b0d0:	e9cd 3500 	strd	r3, r5, [sp]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800b0d8:	2200      	movs	r2, #0
 800b0da:	47a0      	blx	r4
 800b0dc:	b00b      	add	sp, #44	; 0x2c
 800b0de:	bd30      	pop	{r4, r5, pc}

0800b0e0 <_ZN8touchgfx3HAL10beginFrameEv>:
 800b0e0:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	b123      	cbz	r3, 800b0f0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800b0e6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800b0ea:	f080 0001 	eor.w	r0, r0, #1
 800b0ee:	4770      	bx	lr
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	4770      	bx	lr
 800b0f4:	2400ae02 	.word	0x2400ae02

0800b0f8 <_ZN8touchgfx3HAL8endFrameEv>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	6840      	ldr	r0, [r0, #4]
 800b0fe:	6803      	ldr	r3, [r0, #0]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	4798      	blx	r3
 800b104:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800b108:	b113      	cbz	r3, 800b110 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800b10a:	2301      	movs	r3, #1
 800b10c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b110:	bd10      	pop	{r4, pc}

0800b112 <_ZN8touchgfx3HAL10initializeEv>:
 800b112:	b510      	push	{r4, lr}
 800b114:	4604      	mov	r4, r0
 800b116:	f7f5 fb95 	bl	8000844 <_ZN8touchgfx10OSWrappers10initializeEv>
 800b11a:	6860      	ldr	r0, [r4, #4]
 800b11c:	6803      	ldr	r3, [r0, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	4798      	blx	r3
 800b122:	68e0      	ldr	r0, [r4, #12]
 800b124:	6803      	ldr	r3, [r0, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	4798      	blx	r3
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	4620      	mov	r0, r4
 800b12e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b134:	4718      	bx	r3

0800b136 <_ZN8touchgfx3HAL9taskEntryEv>:
 800b136:	b508      	push	{r3, lr}
 800b138:	6803      	ldr	r3, [r0, #0]
 800b13a:	4604      	mov	r4, r0
 800b13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b140:	4798      	blx	r3
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b146:	4620      	mov	r0, r4
 800b148:	4798      	blx	r3
 800b14a:	f7f5 fbd7 	bl	80008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b152:	e7f8      	b.n	800b146 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800b154 <_ZN8touchgfx3HAL4tickEv>:
 800b154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b156:	6803      	ldr	r3, [r0, #0]
 800b158:	4604      	mov	r4, r0
 800b15a:	4d5b      	ldr	r5, [pc, #364]	; (800b2c8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800b15c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b160:	4798      	blx	r3
 800b162:	2800      	cmp	r0, #0
 800b164:	f000 8095 	beq.w	800b292 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800b168:	2001      	movs	r0, #1
 800b16a:	2600      	movs	r6, #0
 800b16c:	f7f5 f992 	bl	8000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b170:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800b174:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800b178:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b17c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b180:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800b184:	b133      	cbz	r3, 800b194 <_ZN8touchgfx3HAL4tickEv+0x40>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	4620      	mov	r0, r4
 800b18a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b18e:	4798      	blx	r3
 800b190:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800b194:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800b198:	2601      	movs	r6, #1
 800b19a:	6862      	ldr	r2, [r4, #4]
 800b19c:	f083 0301 	eor.w	r3, r3, #1
 800b1a0:	702e      	strb	r6, [r5, #0]
 800b1a2:	7253      	strb	r3, [r2, #9]
 800b1a4:	f001 ffc2 	bl	800d12c <_ZN8touchgfx11Application11getInstanceEv>
 800b1a8:	6803      	ldr	r3, [r0, #0]
 800b1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ac:	4798      	blx	r3
 800b1ae:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b1b2:	b90b      	cbnz	r3, 800b1b8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b1b4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800b1b8:	f001 ffb8 	bl	800d12c <_ZN8touchgfx11Application11getInstanceEv>
 800b1bc:	6803      	ldr	r3, [r0, #0]
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	4798      	blx	r3
 800b1c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1c4:	6803      	ldr	r3, [r0, #0]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	4798      	blx	r3
 800b1ca:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b1ce:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b1da:	b10a      	cbz	r2, 800b1e0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1eb      	bne.n	800b1b8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b1e0:	4a3a      	ldr	r2, [pc, #232]	; (800b2cc <_ZN8touchgfx3HAL4tickEv+0x178>)
 800b1e2:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800b1e6:	7813      	ldrb	r3, [r2, #0]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	b25b      	sxtb	r3, r3
 800b1ec:	4299      	cmp	r1, r3
 800b1ee:	7013      	strb	r3, [r2, #0]
 800b1f0:	dc10      	bgt.n	800b214 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	68e0      	ldr	r0, [r4, #12]
 800b1f6:	a902      	add	r1, sp, #8
 800b1f8:	7013      	strb	r3, [r2, #0]
 800b1fa:	aa03      	add	r2, sp, #12
 800b1fc:	6803      	ldr	r3, [r0, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4798      	blx	r3
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	2800      	cmp	r0, #0
 800b206:	d050      	beq.n	800b2aa <_ZN8touchgfx3HAL4tickEv+0x156>
 800b208:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b20c:	4620      	mov	r0, r4
 800b20e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b212:	4798      	blx	r3
 800b214:	2300      	movs	r3, #0
 800b216:	6960      	ldr	r0, [r4, #20]
 800b218:	f88d 3007 	strb.w	r3, [sp, #7]
 800b21c:	b158      	cbz	r0, 800b236 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b21e:	6803      	ldr	r3, [r0, #0]
 800b220:	f10d 0107 	add.w	r1, sp, #7
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	4798      	blx	r3
 800b228:	b128      	cbz	r0, 800b236 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b22a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b22c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b230:	6803      	ldr	r3, [r0, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	4798      	blx	r3
 800b236:	f104 001c 	add.w	r0, r4, #28
 800b23a:	f00c fbe7 	bl	8017a0c <_ZN8touchgfx8Gestures4tickEv>
 800b23e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800b242:	b30b      	cbz	r3, 800b288 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b244:	6920      	ldr	r0, [r4, #16]
 800b246:	6803      	ldr	r3, [r0, #0]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	4798      	blx	r3
 800b24c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b24e:	4606      	mov	r6, r0
 800b250:	b903      	cbnz	r3, 800b254 <_ZN8touchgfx3HAL4tickEv+0x100>
 800b252:	6720      	str	r0, [r4, #112]	; 0x70
 800b254:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b256:	4a1e      	ldr	r2, [pc, #120]	; (800b2d0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800b258:	1af3      	subs	r3, r6, r3
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d914      	bls.n	800b288 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b25e:	6920      	ldr	r0, [r4, #16]
 800b260:	6803      	ldr	r3, [r0, #0]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	4798      	blx	r3
 800b266:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b268:	2264      	movs	r2, #100	; 0x64
 800b26a:	1af3      	subs	r3, r6, r3
 800b26c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b270:	fbb0 f0f3 	udiv	r0, r0, r3
 800b274:	2800      	cmp	r0, #0
 800b276:	dc1d      	bgt.n	800b2b4 <_ZN8touchgfx3HAL4tickEv+0x160>
 800b278:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800b27c:	6920      	ldr	r0, [r4, #16]
 800b27e:	2100      	movs	r1, #0
 800b280:	6803      	ldr	r3, [r0, #0]
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	4798      	blx	r3
 800b286:	6726      	str	r6, [r4, #112]	; 0x70
 800b288:	f001 ff50 	bl	800d12c <_ZN8touchgfx11Application11getInstanceEv>
 800b28c:	6803      	ldr	r3, [r0, #0]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	4798      	blx	r3
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	4620      	mov	r0, r4
 800b296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b29a:	4798      	blx	r3
 800b29c:	2001      	movs	r0, #1
 800b29e:	f7f5 f937 	bl	8000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	702b      	strb	r3, [r5, #0]
 800b2a6:	b004      	add	sp, #16
 800b2a8:	bd70      	pop	{r4, r5, r6, pc}
 800b2aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4798      	blx	r3
 800b2b2:	e7af      	b.n	800b214 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b2b4:	2863      	cmp	r0, #99	; 0x63
 800b2b6:	bfcb      	itete	gt
 800b2b8:	2300      	movgt	r3, #0
 800b2ba:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800b2be:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800b2c2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800b2c6:	e7d9      	b.n	800b27c <_ZN8touchgfx3HAL4tickEv+0x128>
 800b2c8:	2400ae08 	.word	0x2400ae08
 800b2cc:	2400ae09 	.word	0x2400ae09
 800b2d0:	05f5e100 	.word	0x05f5e100

0800b2d4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800b2d4:	f7f5 baea 	b.w	80008ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800b2d8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800b2d8:	6581      	str	r1, [r0, #88]	; 0x58
 800b2da:	301c      	adds	r0, #28
 800b2dc:	f00c bb94 	b.w	8017a08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800b2e0 <_ZN8touchgfx3HAL5touchEll>:
 800b2e0:	b530      	push	{r4, r5, lr}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	a804      	add	r0, sp, #16
 800b2e8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b2ec:	f001 fc9a 	bl	800cc24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800b2f0:	9b04      	ldr	r3, [sp, #16]
 800b2f2:	a906      	add	r1, sp, #24
 800b2f4:	a803      	add	r0, sp, #12
 800b2f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800b300:	f001 fce2 	bl	800ccc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800b304:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800b308:	f104 001c 	add.w	r0, r4, #28
 800b30c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b310:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b314:	b189      	cbz	r1, 800b33a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800b316:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	4613      	mov	r3, r2
 800b31e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b322:	462a      	mov	r2, r5
 800b324:	f00c fb80 	bl	8017a28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800b328:	b128      	cbz	r0, 800b336 <_ZN8touchgfx3HAL5touchEll+0x56>
 800b32a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800b32e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800b330:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800b334:	6623      	str	r3, [r4, #96]	; 0x60
 800b336:	b007      	add	sp, #28
 800b338:	bd30      	pop	{r4, r5, pc}
 800b33a:	f00c fbb5 	bl	8017aa8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b33e:	2301      	movs	r3, #1
 800b340:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b344:	e7f1      	b.n	800b32a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800b346 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800b346:	b510      	push	{r4, lr}
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d046      	beq.n	800b3da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b34c:	ea81 0002 	eor.w	r0, r1, r2
 800b350:	07c4      	lsls	r4, r0, #31
 800b352:	d508      	bpl.n	800b366 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800b354:	440b      	add	r3, r1
 800b356:	3a01      	subs	r2, #1
 800b358:	428b      	cmp	r3, r1
 800b35a:	d93e      	bls.n	800b3da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b35c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b360:	f801 0b01 	strb.w	r0, [r1], #1
 800b364:	e7f8      	b.n	800b358 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800b366:	07d0      	lsls	r0, r2, #31
 800b368:	bf42      	ittt	mi
 800b36a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800b36e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800b372:	f801 0b01 	strbmi.w	r0, [r1], #1
 800b376:	2b01      	cmp	r3, #1
 800b378:	d911      	bls.n	800b39e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b37a:	ea81 0402 	eor.w	r4, r1, r2
 800b37e:	4610      	mov	r0, r2
 800b380:	07a4      	lsls	r4, r4, #30
 800b382:	d022      	beq.n	800b3ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800b384:	f023 0401 	bic.w	r4, r3, #1
 800b388:	440c      	add	r4, r1
 800b38a:	428c      	cmp	r4, r1
 800b38c:	4602      	mov	r2, r0
 800b38e:	d904      	bls.n	800b39a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800b390:	8812      	ldrh	r2, [r2, #0]
 800b392:	3002      	adds	r0, #2
 800b394:	f821 2b02 	strh.w	r2, [r1], #2
 800b398:	e7f7      	b.n	800b38a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	f023 0003 	bic.w	r0, r3, #3
 800b3a2:	4408      	add	r0, r1
 800b3a4:	4288      	cmp	r0, r1
 800b3a6:	4614      	mov	r4, r2
 800b3a8:	d904      	bls.n	800b3b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800b3aa:	6824      	ldr	r4, [r4, #0]
 800b3ac:	3204      	adds	r2, #4
 800b3ae:	f841 4b04 	str.w	r4, [r1], #4
 800b3b2:	e7f7      	b.n	800b3a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800b3b4:	f003 0303 	and.w	r3, r3, #3
 800b3b8:	3a01      	subs	r2, #1
 800b3ba:	440b      	add	r3, r1
 800b3bc:	428b      	cmp	r3, r1
 800b3be:	d90c      	bls.n	800b3da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b3c0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b3c4:	f801 0b01 	strb.w	r0, [r1], #1
 800b3c8:	e7f8      	b.n	800b3bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800b3ca:	0790      	lsls	r0, r2, #30
 800b3cc:	d0e7      	beq.n	800b39e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b3ce:	f832 0b02 	ldrh.w	r0, [r2], #2
 800b3d2:	3b02      	subs	r3, #2
 800b3d4:	f821 0b02 	strh.w	r0, [r1], #2
 800b3d8:	e7e1      	b.n	800b39e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b3da:	2001      	movs	r0, #1
 800b3dc:	bd10      	pop	{r4, pc}

0800b3de <_ZN8touchgfx3HAL7noTouchEv>:
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	b153      	cbz	r3, 800b3fe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800b3e8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800b3f2:	301c      	adds	r0, #28
 800b3f4:	f00c fb58 	bl	8017aa8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b3fe:	bd10      	pop	{r4, pc}

0800b400 <_ZN8touchgfx8Drawable5setXYEss>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	6803      	ldr	r3, [r0, #0]
 800b404:	4604      	mov	r4, r0
 800b406:	4615      	mov	r5, r2
 800b408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40a:	4798      	blx	r3
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	4629      	mov	r1, r5
 800b410:	4620      	mov	r0, r4
 800b412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b418:	4718      	bx	r3
	...

0800b41c <_ZN8touchgfx3HAL3lcdEv>:
 800b41c:	4b04      	ldr	r3, [pc, #16]	; (800b430 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b424:	b10a      	cbz	r2, 800b42a <_ZN8touchgfx3HAL3lcdEv+0xe>
 800b426:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b428:	b900      	cbnz	r0, 800b42c <_ZN8touchgfx3HAL3lcdEv+0x10>
 800b42a:	6898      	ldr	r0, [r3, #8]
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	2400ae04 	.word	0x2400ae04

0800b434 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800b434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b438:	b085      	sub	sp, #20
 800b43a:	4604      	mov	r4, r0
 800b43c:	2000      	movs	r0, #0
 800b43e:	4699      	mov	r9, r3
 800b440:	ad04      	add	r5, sp, #16
 800b442:	460f      	mov	r7, r1
 800b444:	4690      	mov	r8, r2
 800b446:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b44a:	69a0      	ldr	r0, [r4, #24]
 800b44c:	6806      	ldr	r6, [r0, #0]
 800b44e:	9501      	str	r5, [sp, #4]
 800b450:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800b454:	9500      	str	r5, [sp, #0]
 800b456:	6835      	ldr	r5, [r6, #0]
 800b458:	47a8      	blx	r5
 800b45a:	4d10      	ldr	r5, [pc, #64]	; (800b49c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800b45c:	4606      	mov	r6, r0
 800b45e:	f8a5 9000 	strh.w	r9, [r5]
 800b462:	f7ff ffdb 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800b466:	6803      	ldr	r3, [r0, #0]
 800b468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46a:	4798      	blx	r3
 800b46c:	b128      	cbz	r0, 800b47a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800b46e:	2801      	cmp	r0, #1
 800b470:	d00b      	beq.n	800b48a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800b472:	4630      	mov	r0, r6
 800b474:	b005      	add	sp, #20
 800b476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b47a:	882b      	ldrh	r3, [r5, #0]
 800b47c:	fb08 7203 	mla	r2, r8, r3, r7
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800b486:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b488:	e7f3      	b.n	800b472 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800b48a:	882a      	ldrh	r2, [r5, #0]
 800b48c:	9b03      	ldr	r3, [sp, #12]
 800b48e:	fb08 7202 	mla	r2, r8, r2, r7
 800b492:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b496:	1a9a      	subs	r2, r3, r2
 800b498:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b49a:	e7ea      	b.n	800b472 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800b49c:	2400adfe 	.word	0x2400adfe

0800b4a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a2:	b08b      	sub	sp, #44	; 0x2c
 800b4a4:	4617      	mov	r7, r2
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	460e      	mov	r6, r1
 800b4aa:	461d      	mov	r5, r3
 800b4ac:	f7ff ffb6 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800b4b0:	6803      	ldr	r3, [r0, #0]
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	4798      	blx	r3
 800b4b6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b4ba:	9007      	str	r0, [sp, #28]
 800b4bc:	4631      	mov	r1, r6
 800b4be:	6822      	ldr	r2, [r4, #0]
 800b4c0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	9306      	str	r3, [sp, #24]
 800b4cc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b4d0:	9305      	str	r3, [sp, #20]
 800b4d2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b4dc:	9303      	str	r3, [sp, #12]
 800b4de:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b4e2:	9302      	str	r3, [sp, #8]
 800b4e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b4e8:	e9cd 5300 	strd	r5, r3, [sp]
 800b4ec:	463b      	mov	r3, r7
 800b4ee:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	47a8      	blx	r5
 800b4f4:	b00b      	add	sp, #44	; 0x2c
 800b4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f8:	2400adfe 	.word	0x2400adfe

0800b4fc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800b4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b500:	4698      	mov	r8, r3
 800b502:	6803      	ldr	r3, [r0, #0]
 800b504:	b08b      	sub	sp, #44	; 0x2c
 800b506:	4617      	mov	r7, r2
 800b508:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b50a:	460e      	mov	r6, r1
 800b50c:	4b13      	ldr	r3, [pc, #76]	; (800b55c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800b50e:	4604      	mov	r4, r0
 800b510:	f8b3 9000 	ldrh.w	r9, [r3]
 800b514:	f7ff ff82 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800b518:	6803      	ldr	r3, [r0, #0]
 800b51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51c:	4798      	blx	r3
 800b51e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b522:	2200      	movs	r2, #0
 800b524:	4631      	mov	r1, r6
 800b526:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b52a:	2302      	movs	r3, #2
 800b52c:	4620      	mov	r0, r4
 800b52e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800b532:	2301      	movs	r3, #1
 800b534:	9305      	str	r3, [sp, #20]
 800b536:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b53a:	9304      	str	r3, [sp, #16]
 800b53c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b540:	9303      	str	r3, [sp, #12]
 800b542:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b546:	9302      	str	r3, [sp, #8]
 800b548:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b54c:	e9cd 8300 	strd	r8, r3, [sp]
 800b550:	463b      	mov	r3, r7
 800b552:	47a8      	blx	r5
 800b554:	b00b      	add	sp, #44	; 0x2c
 800b556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b55a:	bf00      	nop
 800b55c:	2400adfe 	.word	0x2400adfe

0800b560 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800b560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b564:	4698      	mov	r8, r3
 800b566:	6803      	ldr	r3, [r0, #0]
 800b568:	b087      	sub	sp, #28
 800b56a:	460e      	mov	r6, r1
 800b56c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800b56e:	4617      	mov	r7, r2
 800b570:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800b572:	4604      	mov	r4, r0
 800b574:	f8b3 9000 	ldrh.w	r9, [r3]
 800b578:	f7ff ff50 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800b57c:	6803      	ldr	r3, [r0, #0]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	4798      	blx	r3
 800b582:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800b586:	463a      	mov	r2, r7
 800b588:	4631      	mov	r1, r6
 800b58a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b58e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800b592:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800b596:	4620      	mov	r0, r4
 800b598:	9302      	str	r3, [sp, #8]
 800b59a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	4643      	mov	r3, r8
 800b5a8:	47a8      	blx	r5
 800b5aa:	b007      	add	sp, #28
 800b5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5b0:	2400adfe 	.word	0x2400adfe

0800b5b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	b08f      	sub	sp, #60	; 0x3c
 800b5bc:	4610      	mov	r0, r2
 800b5be:	460d      	mov	r5, r1
 800b5c0:	4691      	mov	r9, r2
 800b5c2:	461e      	mov	r6, r3
 800b5c4:	f004 f8b8 	bl	800f738 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	f000 809d 	beq.w	800b708 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f8df b198 	ldr.w	fp, [pc, #408]	; 800b76c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800b5d6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5dc:	4798      	blx	r3
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800b770 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	4798      	blx	r3
 800b5ea:	f8bb 3000 	ldrh.w	r3, [fp]
 800b5ee:	4f5c      	ldr	r7, [pc, #368]	; (800b760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	f8ba 3000 	ldrh.w	r3, [sl]
 800b5f6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	9302      	str	r3, [sp, #8]
 800b5fe:	883b      	ldrh	r3, [r7, #0]
 800b600:	9303      	str	r3, [sp, #12]
 800b602:	4b58      	ldr	r3, [pc, #352]	; (800b764 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b604:	881a      	ldrh	r2, [r3, #0]
 800b606:	9305      	str	r3, [sp, #20]
 800b608:	9204      	str	r2, [sp, #16]
 800b60a:	f004 f9d9 	bl	800f9c0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b60e:	8038      	strh	r0, [r7, #0]
 800b610:	4640      	mov	r0, r8
 800b612:	f004 fa09 	bl	800fa28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b616:	9b05      	ldr	r3, [sp, #20]
 800b618:	b280      	uxth	r0, r0
 800b61a:	8018      	strh	r0, [r3, #0]
 800b61c:	4b52      	ldr	r3, [pc, #328]	; (800b768 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d174      	bne.n	800b70e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800b624:	883b      	ldrh	r3, [r7, #0]
 800b626:	f8aa 0000 	strh.w	r0, [sl]
 800b62a:	f8ab 3000 	strh.w	r3, [fp]
 800b62e:	4648      	mov	r0, r9
 800b630:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800b634:	f004 f880 	bl	800f738 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b638:	2200      	movs	r2, #0
 800b63a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800b63e:	4611      	mov	r1, r2
 800b640:	4628      	mov	r0, r5
 800b642:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800b646:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800b64a:	f7ff fed9 	bl	800b400 <_ZN8touchgfx8Drawable5setXYEss>
 800b64e:	2301      	movs	r3, #1
 800b650:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800b654:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b658:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	dd5c      	ble.n	800b71a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800b660:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd58      	ble.n	800b71a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800b668:	462a      	mov	r2, r5
 800b66a:	ab0a      	add	r3, sp, #40	; 0x28
 800b66c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b670:	6851      	ldr	r1, [r2, #4]
 800b672:	c303      	stmia	r3!, {r0, r1}
 800b674:	4631      	mov	r1, r6
 800b676:	a80a      	add	r0, sp, #40	; 0x28
 800b678:	f7ff fbe4 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800b67c:	4b38      	ldr	r3, [pc, #224]	; (800b760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b67e:	2100      	movs	r1, #0
 800b680:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b684:	4b37      	ldr	r3, [pc, #220]	; (800b764 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b686:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b68a:	aa0a      	add	r2, sp, #40	; 0x28
 800b68c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b690:	910c      	str	r1, [sp, #48]	; 0x30
 800b692:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800b696:	ab08      	add	r3, sp, #32
 800b698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b69c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	a90c      	add	r1, sp, #48	; 0x30
 800b6a4:	f7ff fbce 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800b6a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d13c      	bne.n	800b728 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800b6b4:	2600      	movs	r6, #0
 800b6b6:	696b      	ldr	r3, [r5, #20]
 800b6b8:	a908      	add	r1, sp, #32
 800b6ba:	682a      	ldr	r2, [r5, #0]
 800b6bc:	4628      	mov	r0, r5
 800b6be:	9305      	str	r3, [sp, #20]
 800b6c0:	616e      	str	r6, [r5, #20]
 800b6c2:	6892      	ldr	r2, [r2, #8]
 800b6c4:	4790      	blx	r2
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	616b      	str	r3, [r5, #20]
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800b6d4:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800b6d8:	f7ff fe92 	bl	800b400 <_ZN8touchgfx8Drawable5setXYEss>
 800b6dc:	9a01      	ldr	r2, [sp, #4]
 800b6de:	4b23      	ldr	r3, [pc, #140]	; (800b76c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	801a      	strh	r2, [r3, #0]
 800b6e4:	9a02      	ldr	r2, [sp, #8]
 800b6e6:	4b22      	ldr	r3, [pc, #136]	; (800b770 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800b6e8:	801a      	strh	r2, [r3, #0]
 800b6ea:	9a03      	ldr	r2, [sp, #12]
 800b6ec:	4b1c      	ldr	r3, [pc, #112]	; (800b760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b6ee:	801a      	strh	r2, [r3, #0]
 800b6f0:	4b1c      	ldr	r3, [pc, #112]	; (800b764 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b6f2:	9a04      	ldr	r2, [sp, #16]
 800b6f4:	801a      	strh	r2, [r3, #0]
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	4798      	blx	r3
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	4620      	mov	r0, r4
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	4798      	blx	r3
 800b708:	b00f      	add	sp, #60	; 0x3c
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	883b      	ldrh	r3, [r7, #0]
 800b710:	f8ab 0000 	strh.w	r0, [fp]
 800b714:	f8aa 3000 	strh.w	r3, [sl]
 800b718:	e789      	b.n	800b62e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800b71a:	462a      	mov	r2, r5
 800b71c:	ab0a      	add	r3, sp, #40	; 0x28
 800b71e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b722:	6851      	ldr	r1, [r2, #4]
 800b724:	c303      	stmia	r3!, {r0, r1}
 800b726:	e7a9      	b.n	800b67c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800b728:	a807      	add	r0, sp, #28
 800b72a:	f004 fa81 	bl	800fc30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b72e:	4606      	mov	r6, r0
 800b730:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b732:	6803      	ldr	r3, [r0, #0]
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	4798      	blx	r3
 800b738:	4286      	cmp	r6, r0
 800b73a:	d1b8      	bne.n	800b6ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800b73c:	f7ff fe6e 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800b740:	6803      	ldr	r3, [r0, #0]
 800b742:	4606      	mov	r6, r0
 800b744:	a807      	add	r0, sp, #28
 800b746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b748:	9305      	str	r3, [sp, #20]
 800b74a:	f004 fa71 	bl	800fc30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b74e:	9b05      	ldr	r3, [sp, #20]
 800b750:	4601      	mov	r1, r0
 800b752:	4630      	mov	r0, r6
 800b754:	4798      	blx	r3
 800b756:	f080 0001 	eor.w	r0, r0, #1
 800b75a:	b2c0      	uxtb	r0, r0
 800b75c:	e7a8      	b.n	800b6b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800b75e:	bf00      	nop
 800b760:	2400adf8 	.word	0x2400adf8
 800b764:	2400adfa 	.word	0x2400adfa
 800b768:	2400adfc 	.word	0x2400adfc
 800b76c:	2400adfe 	.word	0x2400adfe
 800b770:	2400ae00 	.word	0x2400ae00

0800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800b774:	4b07      	ldr	r3, [pc, #28]	; (800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800b776:	b510      	push	{r4, lr}
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	4604      	mov	r4, r0
 800b77c:	b13b      	cbz	r3, 800b78e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b77e:	6803      	ldr	r3, [r0, #0]
 800b780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b782:	4798      	blx	r3
 800b784:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b786:	4283      	cmp	r3, r0
 800b788:	d101      	bne.n	800b78e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b78a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b790:	e7fc      	b.n	800b78c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800b792:	bf00      	nop
 800b794:	2400ae02 	.word	0x2400ae02

0800b798 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800b798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79c:	461d      	mov	r5, r3
 800b79e:	b08a      	sub	sp, #40	; 0x28
 800b7a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a4:	4690      	mov	r8, r2
 800b7a6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800b7aa:	2400      	movs	r4, #0
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	fb06 8505 	mla	r5, r6, r5, r8
 800b7b2:	9404      	str	r4, [sp, #16]
 800b7b4:	f88d 4020 	strb.w	r4, [sp, #32]
 800b7b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b7bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b7c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b7c4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b7c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b7cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b7d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b7d4:	f7ff ffce 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b7d8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f8ad 601e 	strh.w	r6, [sp, #30]
 800b7e2:	a901      	add	r1, sp, #4
 800b7e4:	9505      	str	r5, [sp, #20]
 800b7e6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b7ea:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800b7ee:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b7f2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b7f6:	6803      	ldr	r3, [r0, #0]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	4798      	blx	r3
 800b7fc:	b00a      	add	sp, #40	; 0x28
 800b7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b802 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800b802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b806:	b08b      	sub	sp, #44	; 0x2c
 800b808:	2400      	movs	r4, #0
 800b80a:	4691      	mov	r9, r2
 800b80c:	461d      	mov	r5, r3
 800b80e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800b812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b816:	4688      	mov	r8, r1
 800b818:	4607      	mov	r7, r0
 800b81a:	9404      	str	r4, [sp, #16]
 800b81c:	fb06 9505 	mla	r5, r6, r5, r9
 800b820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b824:	f7ff ffa6 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b828:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b82c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b836:	a901      	add	r1, sp, #4
 800b838:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b83c:	9505      	str	r5, [sp, #20]
 800b83e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b842:	f8ad 401c 	strh.w	r4, [sp, #28]
 800b846:	f8ad 601e 	strh.w	r6, [sp, #30]
 800b84a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b84e:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b852:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b856:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b85a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b85e:	6803      	ldr	r3, [r0, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	4798      	blx	r3
 800b864:	b00b      	add	sp, #44	; 0x2c
 800b866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800b86c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b870:	b08a      	sub	sp, #40	; 0x28
 800b872:	4698      	mov	r8, r3
 800b874:	2300      	movs	r3, #0
 800b876:	4606      	mov	r6, r0
 800b878:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800b87c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800b880:	2d0b      	cmp	r5, #11
 800b882:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800b886:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800b88a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800b88e:	9304      	str	r3, [sp, #16]
 800b890:	d137      	bne.n	800b902 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800b892:	2380      	movs	r3, #128	; 0x80
 800b894:	f88d 0020 	strb.w	r0, [sp, #32]
 800b898:	4630      	mov	r0, r6
 800b89a:	9203      	str	r2, [sp, #12]
 800b89c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b8a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b8a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b8a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b8ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b8b0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b8b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b8b8:	f7ff ff5c 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b8bc:	2c0b      	cmp	r4, #11
 800b8be:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800b8c2:	f8ad 701e 	strh.w	r7, [sp, #30]
 800b8c6:	bf94      	ite	ls
 800b8c8:	4b19      	ldrls	r3, [pc, #100]	; (800b930 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800b8ca:	2100      	movhi	r1, #0
 800b8cc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800b8d0:	bf98      	it	ls
 800b8d2:	5d19      	ldrbls	r1, [r3, r4]
 800b8d4:	fb02 8307 	mla	r3, r2, r7, r8
 800b8d8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b8dc:	10c9      	asrs	r1, r1, #3
 800b8de:	fb01 0003 	mla	r0, r1, r3, r0
 800b8e2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800b8e6:	a901      	add	r1, sp, #4
 800b8e8:	9005      	str	r0, [sp, #20]
 800b8ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	6870      	ldr	r0, [r6, #4]
 800b8f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b8f6:	6803      	ldr	r3, [r0, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	4798      	blx	r3
 800b8fc:	b00a      	add	sp, #40	; 0x28
 800b8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b902:	2d02      	cmp	r5, #2
 800b904:	d109      	bne.n	800b91a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800b906:	28ff      	cmp	r0, #255	; 0xff
 800b908:	d105      	bne.n	800b916 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800b90a:	f1bc 0f00 	cmp.w	ip, #0
 800b90e:	bf14      	ite	ne
 800b910:	2340      	movne	r3, #64	; 0x40
 800b912:	2320      	moveq	r3, #32
 800b914:	e7be      	b.n	800b894 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b916:	2340      	movs	r3, #64	; 0x40
 800b918:	e7bc      	b.n	800b894 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b91a:	28ff      	cmp	r0, #255	; 0xff
 800b91c:	d105      	bne.n	800b92a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800b91e:	f1bc 0f00 	cmp.w	ip, #0
 800b922:	bf14      	ite	ne
 800b924:	2304      	movne	r3, #4
 800b926:	2301      	moveq	r3, #1
 800b928:	e7b4      	b.n	800b894 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b92a:	2304      	movs	r3, #4
 800b92c:	e7b2      	b.n	800b894 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b92e:	bf00      	nop
 800b930:	0801a038 	.word	0x0801a038

0800b934 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	b08b      	sub	sp, #44	; 0x2c
 800b93a:	461d      	mov	r5, r3
 800b93c:	2400      	movs	r4, #0
 800b93e:	4688      	mov	r8, r1
 800b940:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800b944:	4693      	mov	fp, r2
 800b946:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800b94a:	4607      	mov	r7, r0
 800b94c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800b950:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800b954:	9404      	str	r4, [sp, #16]
 800b956:	bf14      	ite	ne
 800b958:	2308      	movne	r3, #8
 800b95a:	2302      	moveq	r3, #2
 800b95c:	fb05 b50a 	mla	r5, r5, sl, fp
 800b960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b964:	f7ff ff06 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b968:	2e0b      	cmp	r6, #11
 800b96a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800b96e:	a901      	add	r1, sp, #4
 800b970:	bf98      	it	ls
 800b972:	4b13      	ldrls	r3, [pc, #76]	; (800b9c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800b974:	f8ad a01e 	strh.w	sl, [sp, #30]
 800b978:	bf98      	it	ls
 800b97a:	5d9c      	ldrbls	r4, [r3, r6]
 800b97c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b980:	10e4      	asrs	r4, r4, #3
 800b982:	f8cd 8010 	str.w	r8, [sp, #16]
 800b986:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b98a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800b98e:	fb04 0405 	mla	r4, r4, r5, r0
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b998:	2300      	movs	r3, #0
 800b99a:	9405      	str	r4, [sp, #20]
 800b99c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b9a0:	f88d 9020 	strb.w	r9, [sp, #32]
 800b9a4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800b9a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b9ac:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800b9b0:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800b9b4:	6803      	ldr	r3, [r0, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	4798      	blx	r3
 800b9ba:	b00b      	add	sp, #44	; 0x2c
 800b9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c0:	0801a038 	.word	0x0801a038

0800b9c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	461e      	mov	r6, r3
 800b9ca:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800b9cc:	460f      	mov	r7, r1
 800b9ce:	4690      	mov	r8, r2
 800b9d0:	881d      	ldrh	r5, [r3, #0]
 800b9d2:	f7ff fd23 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800b9d6:	6803      	ldr	r3, [r0, #0]
 800b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9da:	4798      	blx	r3
 800b9dc:	280b      	cmp	r0, #11
 800b9de:	bf96      	itet	ls
 800b9e0:	4b05      	ldrls	r3, [pc, #20]	; (800b9f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800b9e2:	2400      	movhi	r4, #0
 800b9e4:	5c1c      	ldrbls	r4, [r3, r0]
 800b9e6:	fb08 7005 	mla	r0, r8, r5, r7
 800b9ea:	10e4      	asrs	r4, r4, #3
 800b9ec:	fb04 6000 	mla	r0, r4, r0, r6
 800b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f4:	2400adfe 	.word	0x2400adfe
 800b9f8:	0801a038 	.word	0x0801a038

0800b9fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800b9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9fe:	b08b      	sub	sp, #44	; 0x2c
 800ba00:	461f      	mov	r7, r3
 800ba02:	4604      	mov	r4, r0
 800ba04:	4616      	mov	r6, r2
 800ba06:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ba0a:	2500      	movs	r5, #0
 800ba0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ba10:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ba14:	9504      	str	r5, [sp, #16]
 800ba16:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ba1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ba1e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ba22:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ba26:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ba2a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ba2e:	f88d 3020 	strb.w	r3, [sp, #32]
 800ba32:	f7ff fe9f 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ba36:	463a      	mov	r2, r7
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7ff ffc1 	bl	800b9c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ba42:	4b0e      	ldr	r3, [pc, #56]	; (800ba7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800ba44:	9005      	str	r0, [sp, #20]
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ba4c:	f7ff fce6 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800ba50:	6803      	ldr	r3, [r0, #0]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	4798      	blx	r3
 800ba56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba58:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800ba5c:	a901      	add	r1, sp, #4
 800ba5e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	6860      	ldr	r0, [r4, #4]
 800ba66:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800ba6a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800ba6e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800ba72:	6803      	ldr	r3, [r0, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	4798      	blx	r3
 800ba78:	b00b      	add	sp, #44	; 0x2c
 800ba7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7c:	2400adfe 	.word	0x2400adfe

0800ba80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ba80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba82:	b08d      	sub	sp, #52	; 0x34
 800ba84:	2501      	movs	r5, #1
 800ba86:	4604      	mov	r4, r0
 800ba88:	466b      	mov	r3, sp
 800ba8a:	9503      	str	r5, [sp, #12]
 800ba8c:	e883 0006 	stmia.w	r3, {r1, r2}
 800ba90:	2300      	movs	r3, #0
 800ba92:	f8bd 6000 	ldrh.w	r6, [sp]
 800ba96:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ba9a:	9306      	str	r3, [sp, #24]
 800ba9c:	6803      	ldr	r3, [r0, #0]
 800ba9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa0:	4798      	blx	r3
 800baa2:	463a      	mov	r2, r7
 800baa4:	4631      	mov	r1, r6
 800baa6:	4603      	mov	r3, r0
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7ff ff8b 	bl	800b9c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800baae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bab0:	9004      	str	r0, [sp, #16]
 800bab2:	9307      	str	r3, [sp, #28]
 800bab4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bab8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800babc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bac0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bac4:	4b0e      	ldr	r3, [pc, #56]	; (800bb00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800bac6:	881b      	ldrh	r3, [r3, #0]
 800bac8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bacc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bad0:	f7ff fca4 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800bad4:	6803      	ldr	r3, [r0, #0]
 800bad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad8:	4798      	blx	r3
 800bada:	23ff      	movs	r3, #255	; 0xff
 800badc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bae0:	a903      	add	r1, sp, #12
 800bae2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bae6:	6860      	ldr	r0, [r4, #4]
 800bae8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800baec:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800baf0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800baf4:	6803      	ldr	r3, [r0, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	4798      	blx	r3
 800bafa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bafc:	b00d      	add	sp, #52	; 0x34
 800bafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb00:	2400adfe 	.word	0x2400adfe

0800bb04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800bb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb08:	b08c      	sub	sp, #48	; 0x30
 800bb0a:	461e      	mov	r6, r3
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4604      	mov	r4, r0
 800bb10:	466d      	mov	r5, sp
 800bb12:	9306      	str	r3, [sp, #24]
 800bb14:	6803      	ldr	r3, [r0, #0]
 800bb16:	e885 0006 	stmia.w	r5, {r1, r2}
 800bb1a:	2501      	movs	r5, #1
 800bb1c:	f8bd 7000 	ldrh.w	r7, [sp]
 800bb20:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800bb24:	9503      	str	r5, [sp, #12]
 800bb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb28:	4798      	blx	r3
 800bb2a:	4642      	mov	r2, r8
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7ff ff47 	bl	800b9c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bb36:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bb3a:	9004      	str	r0, [sp, #16]
 800bb3c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bb40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bb44:	9607      	str	r6, [sp, #28]
 800bb46:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bb4a:	4b10      	ldr	r3, [pc, #64]	; (800bb8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bb52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb54:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bb58:	f7ff fc60 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800bb5c:	6803      	ldr	r3, [r0, #0]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	4798      	blx	r3
 800bb62:	23ff      	movs	r3, #255	; 0xff
 800bb64:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bb68:	a903      	add	r1, sp, #12
 800bb6a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bb6e:	6860      	ldr	r0, [r4, #4]
 800bb70:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bb74:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bb78:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bb7c:	6803      	ldr	r3, [r0, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4798      	blx	r3
 800bb82:	4630      	mov	r0, r6
 800bb84:	b00c      	add	sp, #48	; 0x30
 800bb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2400adfe 	.word	0x2400adfe

0800bb90 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb92:	b085      	sub	sp, #20
 800bb94:	4605      	mov	r5, r0
 800bb96:	ac02      	add	r4, sp, #8
 800bb98:	e884 0006 	stmia.w	r4, {r1, r2}
 800bb9c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800bba0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800bba4:	f7ff fde6 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4603      	mov	r3, r0
 800bbac:	463a      	mov	r2, r7
 800bbae:	4628      	mov	r0, r5
 800bbb0:	f7ff ff08 	bl	800b9c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bbb4:	4a05      	ldr	r2, [pc, #20]	; (800bbcc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	8812      	ldrh	r2, [r2, #0]
 800bbba:	9200      	str	r2, [sp, #0]
 800bbbc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	e894 0006 	ldmia.w	r4, {r1, r2}
 800bbc6:	47b0      	blx	r6
 800bbc8:	b005      	add	sp, #20
 800bbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbcc:	2400adfe 	.word	0x2400adfe

0800bbd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800bbd0:	b570      	push	{r4, r5, r6, lr}
 800bbd2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	b19b      	cbz	r3, 800bc02 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800bbda:	2002      	movs	r0, #2
 800bbdc:	f7f4 fcd8 	bl	8000590 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800bbe8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800bbf2:	f7ff fdbf 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	462b      	mov	r3, r5
 800bbfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc00:	4718      	bx	r3
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	428b      	cmp	r3, r1
 800bc10:	d006      	beq.n	800bc20 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800bc12:	6803      	ldr	r3, [r0, #0]
 800bc14:	b929      	cbnz	r1, 800bc22 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800bc16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bc1a:	4798      	blx	r3
 800bc1c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800bc20:	bd38      	pop	{r3, r4, r5, pc}
 800bc22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bc26:	e7f8      	b.n	800bc1a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800bc28 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800bc28:	4b0d      	ldr	r3, [pc, #52]	; (800bc60 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800bc2a:	b510      	push	{r4, lr}
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	4604      	mov	r4, r0
 800bc30:	b95b      	cbnz	r3, 800bc4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc32:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d007      	beq.n	800bc4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc3a:	6840      	ldr	r0, [r0, #4]
 800bc3c:	f000 f916 	bl	800be6c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800bc40:	b118      	cbz	r0, 800bc4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc42:	6862      	ldr	r2, [r4, #4]
 800bc44:	7a53      	ldrb	r3, [r2, #9]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d0fc      	beq.n	800bc44 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800bc4a:	f7f4 fe25 	bl	8000898 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800bc4e:	4620      	mov	r0, r4
 800bc50:	2100      	movs	r1, #0
 800bc52:	f7ff ffd7 	bl	800bc04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff fd8c 	bl	800b774 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bc5c:	bd10      	pop	{r4, pc}
 800bc5e:	bf00      	nop
 800bc60:	2400ae02 	.word	0x2400ae02

0800bc64 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800bc64:	4770      	bx	lr

0800bc66 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800bc66:	2000      	movs	r0, #0
 800bc68:	4770      	bx	lr

0800bc6a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800bc6a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800bc6e:	1a13      	subs	r3, r2, r0
 800bc70:	4258      	negs	r0, r3
 800bc72:	4158      	adcs	r0, r3
 800bc74:	4770      	bx	lr

0800bc76 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800bc76:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800bc7a:	1a9b      	subs	r3, r3, r2
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bfdc      	itt	le
 800bc80:	6882      	ldrle	r2, [r0, #8]
 800bc82:	189b      	addle	r3, r3, r2
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	bfcc      	ite	gt
 800bc88:	2000      	movgt	r0, #0
 800bc8a:	2001      	movle	r0, #1
 800bc8c:	4770      	bx	lr

0800bc8e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800bc8e:	6902      	ldr	r2, [r0, #16]
 800bc90:	6843      	ldr	r3, [r0, #4]
 800bc92:	2024      	movs	r0, #36	; 0x24
 800bc94:	fb00 3002 	mla	r0, r0, r2, r3
 800bc98:	4770      	bx	lr

0800bc9a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800bc9a:	6803      	ldr	r3, [r0, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	4718      	bx	r3

0800bca0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800bca0:	2301      	movs	r3, #1
 800bca2:	b570      	push	{r4, r5, r6, lr}
 800bca4:	7203      	strb	r3, [r0, #8]
 800bca6:	4604      	mov	r4, r0
 800bca8:	6840      	ldr	r0, [r0, #4]
 800bcaa:	6803      	ldr	r3, [r0, #0]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	4798      	blx	r3
 800bcb0:	6803      	ldr	r3, [r0, #0]
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	2b40      	cmp	r3, #64	; 0x40
 800bcb6:	d00c      	beq.n	800bcd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bcb8:	d810      	bhi.n	800bcdc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800bcba:	2b04      	cmp	r3, #4
 800bcbc:	d01d      	beq.n	800bcfa <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800bcbe:	d804      	bhi.n	800bcca <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d006      	beq.n	800bcd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d02c      	beq.n	800bd22 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	2b08      	cmp	r3, #8
 800bccc:	d01d      	beq.n	800bd0a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	d1fa      	bne.n	800bcc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd8:	4798      	blx	r3
 800bcda:	e013      	b.n	800bd04 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800bcdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bce0:	d0f7      	beq.n	800bcd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bce2:	d804      	bhi.n	800bcee <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800bce4:	2b80      	cmp	r3, #128	; 0x80
 800bce6:	d0f4      	beq.n	800bcd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcec:	e7f0      	b.n	800bcd0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800bcee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf2:	d0ee      	beq.n	800bcd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bcf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf8:	e7e5      	b.n	800bcc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	7f01      	ldrb	r1, [r0, #28]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd02:	4798      	blx	r3
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd08:	e006      	b.n	800bd18 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	7f01      	ldrb	r1, [r0, #28]
 800bd0e:	4620      	mov	r0, r4
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	4798      	blx	r3
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd18:	4629      	mov	r1, r5
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd20:	4718      	bx	r3
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	4620      	mov	r0, r4
 800bd26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd28:	4798      	blx	r3
 800bd2a:	e7f3      	b.n	800bd14 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800bd2c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800bd2c:	4770      	bx	lr

0800bd2e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800bd2e:	4770      	bx	lr

0800bd30 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800bd30:	4770      	bx	lr

0800bd32 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800bd32:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800bd36:	b510      	push	{r4, lr}
 800bd38:	1ad2      	subs	r2, r2, r3
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	bfdc      	itt	le
 800bd3e:	6884      	ldrle	r4, [r0, #8]
 800bd40:	1912      	addle	r2, r2, r4
 800bd42:	2a01      	cmp	r2, #1
 800bd44:	dd16      	ble.n	800bd74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800bd46:	6842      	ldr	r2, [r0, #4]
 800bd48:	2424      	movs	r4, #36	; 0x24
 800bd4a:	fb04 2303 	mla	r3, r4, r3, r2
 800bd4e:	f101 0220 	add.w	r2, r1, #32
 800bd52:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd56:	4291      	cmp	r1, r2
 800bd58:	f843 4b04 	str.w	r4, [r3], #4
 800bd5c:	d1f9      	bne.n	800bd52 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800bd5e:	780a      	ldrb	r2, [r1, #0]
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	68c3      	ldr	r3, [r0, #12]
 800bd64:	6882      	ldr	r2, [r0, #8]
 800bd66:	f3bf 8f5b 	dmb	ish
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	bfd8      	it	le
 800bd70:	1a9b      	suble	r3, r3, r2
 800bd72:	60c3      	str	r3, [r0, #12]
 800bd74:	bd10      	pop	{r4, pc}

0800bd76 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800bd76:	6903      	ldr	r3, [r0, #16]
 800bd78:	6882      	ldr	r2, [r0, #8]
 800bd7a:	f3bf 8f5b 	dmb	ish
 800bd7e:	3301      	adds	r3, #1
 800bd80:	429a      	cmp	r2, r3
 800bd82:	bfd8      	it	le
 800bd84:	1a9b      	suble	r3, r3, r2
 800bd86:	6103      	str	r3, [r0, #16]
 800bd88:	4770      	bx	lr
	...

0800bd8c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	4604      	mov	r4, r0
 800bd90:	460e      	mov	r6, r1
 800bd92:	6860      	ldr	r0, [r4, #4]
 800bd94:	6803      	ldr	r3, [r0, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	4798      	blx	r3
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d1f9      	bne.n	800bd92 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800bd9e:	4d0d      	ldr	r5, [pc, #52]	; (800bdd4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800bda0:	6828      	ldr	r0, [r5, #0]
 800bda2:	6803      	ldr	r3, [r0, #0]
 800bda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bda6:	4798      	blx	r3
 800bda8:	f7f4 fd88 	bl	80008bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800bdac:	6828      	ldr	r0, [r5, #0]
 800bdae:	2101      	movs	r1, #1
 800bdb0:	f7ff ff28 	bl	800bc04 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800bdb4:	6860      	ldr	r0, [r4, #4]
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	6803      	ldr	r3, [r0, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	4798      	blx	r3
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc4:	4798      	blx	r3
 800bdc6:	6828      	ldr	r0, [r5, #0]
 800bdc8:	6803      	ldr	r3, [r0, #0]
 800bdca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdd0:	4718      	bx	r3
 800bdd2:	bf00      	nop
 800bdd4:	2400ae04 	.word	0x2400ae04

0800bdd8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800bdd8:	b508      	push	{r3, lr}
 800bdda:	f7f4 fd5d 	bl	8000898 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800bdde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bde2:	f7f4 bd63 	b.w	80008ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800bde6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800bde6:	b510      	push	{r4, lr}
 800bde8:	4604      	mov	r4, r0
 800bdea:	2114      	movs	r1, #20
 800bdec:	f00b fec3 	bl	8017b76 <_ZdlPvj>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	bd10      	pop	{r4, pc}

0800bdf4 <_ZN8touchgfx13DMA_Interface5startEv>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	6840      	ldr	r0, [r0, #4]
 800bdfa:	6803      	ldr	r3, [r0, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4798      	blx	r3
 800be00:	b948      	cbnz	r0, 800be16 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be02:	7a63      	ldrb	r3, [r4, #9]
 800be04:	b13b      	cbz	r3, 800be16 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be06:	7a23      	ldrb	r3, [r4, #8]
 800be08:	b92b      	cbnz	r3, 800be16 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	4620      	mov	r0, r4
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be14:	4718      	bx	r3
 800be16:	bd10      	pop	{r4, pc}

0800be18 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	4604      	mov	r4, r0
 800be1c:	6840      	ldr	r0, [r0, #4]
 800be1e:	6803      	ldr	r3, [r0, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4798      	blx	r3
 800be24:	4605      	mov	r5, r0
 800be26:	b930      	cbnz	r0, 800be36 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800be28:	7a23      	ldrb	r3, [r4, #8]
 800be2a:	b123      	cbz	r3, 800be36 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800be2c:	6860      	ldr	r0, [r4, #4]
 800be2e:	6803      	ldr	r3, [r0, #0]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	4798      	blx	r3
 800be34:	7225      	strb	r5, [r4, #8]
 800be36:	6860      	ldr	r0, [r4, #4]
 800be38:	6803      	ldr	r3, [r0, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4798      	blx	r3
 800be3e:	b928      	cbnz	r0, 800be4c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	4620      	mov	r0, r4
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be4a:	4718      	bx	r3
 800be4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be50:	f7f4 bd3e 	b.w	80008d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800be54 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800be54:	b510      	push	{r4, lr}
 800be56:	6082      	str	r2, [r0, #8]
 800be58:	2200      	movs	r2, #0
 800be5a:	4c03      	ldr	r4, [pc, #12]	; (800be68 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800be5c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800be60:	e9c0 4100 	strd	r4, r1, [r0]
 800be64:	bd10      	pop	{r4, pc}
 800be66:	bf00      	nop
 800be68:	0801a174 	.word	0x0801a174

0800be6c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800be6c:	6840      	ldr	r0, [r0, #4]
 800be6e:	6803      	ldr	r3, [r0, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4718      	bx	r3

0800be74 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800be74:	2300      	movs	r3, #0
 800be76:	8083      	strh	r3, [r0, #4]
 800be78:	80c3      	strh	r3, [r0, #6]
 800be7a:	8003      	strh	r3, [r0, #0]
 800be7c:	8043      	strh	r3, [r0, #2]
 800be7e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800be82:	2bff      	cmp	r3, #255	; 0xff
 800be84:	bf01      	itttt	eq
 800be86:	890b      	ldrheq	r3, [r1, #8]
 800be88:	8083      	strheq	r3, [r0, #4]
 800be8a:	894b      	ldrheq	r3, [r1, #10]
 800be8c:	80c3      	strheq	r3, [r0, #6]
 800be8e:	4770      	bx	lr

0800be90 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800be90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be92:	4604      	mov	r4, r0
 800be94:	466b      	mov	r3, sp
 800be96:	6808      	ldr	r0, [r1, #0]
 800be98:	6849      	ldr	r1, [r1, #4]
 800be9a:	c303      	stmia	r3!, {r0, r1}
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	4669      	mov	r1, sp
 800bea0:	4620      	mov	r0, r4
 800bea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea4:	4798      	blx	r3
 800bea6:	4b08      	ldr	r3, [pc, #32]	; (800bec8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800beae:	b10a      	cbz	r2, 800beb4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800beb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800beb2:	b900      	cbnz	r0, 800beb6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800beb4:	6898      	ldr	r0, [r3, #8]
 800beb6:	6803      	ldr	r3, [r0, #0]
 800beb8:	4669      	mov	r1, sp
 800beba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bebc:	6a1d      	ldr	r5, [r3, #32]
 800bebe:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800bec2:	47a8      	blx	r5
 800bec4:	b003      	add	sp, #12
 800bec6:	bd30      	pop	{r4, r5, pc}
 800bec8:	2400ae04 	.word	0x2400ae04

0800becc <_ZN8touchgfx3BoxD1Ev>:
 800becc:	4770      	bx	lr

0800bece <_ZN8touchgfx3BoxD0Ev>:
 800bece:	b510      	push	{r4, lr}
 800bed0:	4604      	mov	r4, r0
 800bed2:	212c      	movs	r1, #44	; 0x2c
 800bed4:	f00b fe4f 	bl	8017b76 <_ZdlPvj>
 800bed8:	4620      	mov	r0, r4
 800beda:	bd10      	pop	{r4, pc}

0800bedc <_ZNK8touchgfx3Box17invalidateContentEv>:
 800bedc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800bee0:	b12a      	cbz	r2, 800beee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800bee2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800bee6:	b112      	cbz	r2, 800beee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800bee8:	6803      	ldr	r3, [r0, #0]
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	4718      	bx	r3
 800beee:	4770      	bx	lr

0800bef0 <_ZN8touchgfx5ImageD1Ev>:
 800bef0:	4770      	bx	lr

0800bef2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800bef2:	b570      	push	{r4, r5, r6, lr}
 800bef4:	880b      	ldrh	r3, [r1, #0]
 800bef6:	460d      	mov	r5, r1
 800bef8:	4604      	mov	r4, r0
 800befa:	84c3      	strh	r3, [r0, #38]	; 0x26
 800befc:	4608      	mov	r0, r1
 800befe:	f003 fd5f 	bl	800f9c0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bf02:	4606      	mov	r6, r0
 800bf04:	4628      	mov	r0, r5
 800bf06:	f003 fd8f 	bl	800fa28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4620      	mov	r0, r4
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	4798      	blx	r3
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf22:	4718      	bx	r3

0800bf24 <_ZN8touchgfx5ImageD0Ev>:
 800bf24:	b510      	push	{r4, lr}
 800bf26:	4604      	mov	r4, r0
 800bf28:	212c      	movs	r1, #44	; 0x2c
 800bf2a:	f00b fe24 	bl	8017b76 <_ZdlPvj>
 800bf2e:	4620      	mov	r0, r4
 800bf30:	bd10      	pop	{r4, pc}

0800bf32 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800bf32:	b510      	push	{r4, lr}
 800bf34:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800bf38:	4604      	mov	r4, r0
 800bf3a:	2bff      	cmp	r3, #255	; 0xff
 800bf3c:	d006      	beq.n	800bf4c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	8003      	strh	r3, [r0, #0]
 800bf42:	8043      	strh	r3, [r0, #2]
 800bf44:	8083      	strh	r3, [r0, #4]
 800bf46:	80c3      	strh	r3, [r0, #6]
 800bf48:	4620      	mov	r0, r4
 800bf4a:	bd10      	pop	{r4, pc}
 800bf4c:	3126      	adds	r1, #38	; 0x26
 800bf4e:	f003 fd9f 	bl	800fa90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800bf52:	e7f9      	b.n	800bf48 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800bf54 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800bf54:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800bf58:	b12a      	cbz	r2, 800bf66 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800bf5a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800bf5e:	b112      	cbz	r2, 800bf66 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800bf60:	6803      	ldr	r3, [r0, #0]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	4718      	bx	r3
 800bf66:	4770      	bx	lr

0800bf68 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800bf68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	b088      	sub	sp, #32
 800bf70:	2500      	movs	r5, #0
 800bf72:	460f      	mov	r7, r1
 800bf74:	f854 3b26 	ldr.w	r3, [r4], #38
 800bf78:	a904      	add	r1, sp, #16
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bf82:	4798      	blx	r3
 800bf84:	4620      	mov	r0, r4
 800bf86:	f003 fd1b 	bl	800f9c0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bf8a:	4680      	mov	r8, r0
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f003 fd4b 	bl	800fa28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bf92:	9506      	str	r5, [sp, #24]
 800bf94:	ad06      	add	r5, sp, #24
 800bf96:	f8ad 001e 	strh.w	r0, [sp, #30]
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f7fe ff4f 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800bfa6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	dd19      	ble.n	800bfe2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bfae:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	dd15      	ble.n	800bfe2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bfbe:	b10a      	cbz	r2, 800bfc4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800bfc0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bfc2:	b900      	cbnz	r0, 800bfc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800bfc4:	6898      	ldr	r0, [r3, #8]
 800bfc6:	2701      	movs	r7, #1
 800bfc8:	6801      	ldr	r1, [r0, #0]
 800bfca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800bfce:	9702      	str	r7, [sp, #8]
 800bfd0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800bfd4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800bfd8:	e9cd 5600 	strd	r5, r6, [sp]
 800bfdc:	688d      	ldr	r5, [r1, #8]
 800bfde:	4621      	mov	r1, r4
 800bfe0:	47a8      	blx	r5
 800bfe2:	b008      	add	sp, #32
 800bfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe8:	2400ae04 	.word	0x2400ae04

0800bfec <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	6803      	ldr	r3, [r0, #0]
 800bff0:	460c      	mov	r4, r1
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	4798      	blx	r3
 800bff6:	1b03      	subs	r3, r0, r4
 800bff8:	4258      	negs	r0, r3
 800bffa:	4158      	adcs	r0, r3
 800bffc:	bd10      	pop	{r4, pc}
	...

0800c000 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800c000:	4b01      	ldr	r3, [pc, #4]	; (800c008 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800c002:	6019      	str	r1, [r3, #0]
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	2400ae0c 	.word	0x2400ae0c

0800c00c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	4696      	mov	lr, r2
 800c012:	b097      	sub	sp, #92	; 0x5c
 800c014:	4605      	mov	r5, r0
 800c016:	4614      	mov	r4, r2
 800c018:	460e      	mov	r6, r1
 800c01a:	461f      	mov	r7, r3
 800c01c:	f10d 0c1c 	add.w	ip, sp, #28
 800c020:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800c024:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800c028:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800c02c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c030:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c034:	f8de 3000 	ldr.w	r3, [lr]
 800c038:	f104 0e14 	add.w	lr, r4, #20
 800c03c:	f8cc 3000 	str.w	r3, [ip]
 800c040:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c044:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c048:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c04c:	f8de 3000 	ldr.w	r3, [lr]
 800c050:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c054:	f8cc 3000 	str.w	r3, [ip]
 800c058:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c05c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c064:	f8de 3000 	ldr.w	r3, [lr]
 800c068:	4631      	mov	r1, r6
 800c06a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c06c:	4628      	mov	r0, r5
 800c06e:	f8cc 3000 	str.w	r3, [ip]
 800c072:	682b      	ldr	r3, [r5, #0]
 800c074:	9201      	str	r2, [sp, #4]
 800c076:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c078:	f8cd 8008 	str.w	r8, [sp, #8]
 800c07c:	9200      	str	r2, [sp, #0]
 800c07e:	aa07      	add	r2, sp, #28
 800c080:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c084:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800c088:	463b      	mov	r3, r7
 800c08a:	47d8      	blx	fp
 800c08c:	46a6      	mov	lr, r4
 800c08e:	f10d 0c1c 	add.w	ip, sp, #28
 800c092:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c09a:	f8de 3000 	ldr.w	r3, [lr]
 800c09e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c0a2:	343c      	adds	r4, #60	; 0x3c
 800c0a4:	f8cc 3000 	str.w	r3, [ip]
 800c0a8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c0ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c0b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0b4:	f8de 3000 	ldr.w	r3, [lr]
 800c0b8:	f8cc 3000 	str.w	r3, [ip]
 800c0bc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c0c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f8cc 3000 	str.w	r3, [ip]
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c0d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0d8:	f8cd 8008 	str.w	r8, [sp, #8]
 800c0dc:	9201      	str	r2, [sp, #4]
 800c0de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0e0:	9200      	str	r2, [sp, #0]
 800c0e2:	aa07      	add	r2, sp, #28
 800c0e4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	47a0      	blx	r4
 800c0ea:	b017      	add	sp, #92	; 0x5c
 800c0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0f0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	4770      	bx	lr

0800c0f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	b08d      	sub	sp, #52	; 0x34
 800c0fa:	4688      	mov	r8, r1
 800c0fc:	f8d3 c000 	ldr.w	ip, [r3]
 800c100:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c102:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800c106:	680f      	ldr	r7, [r1, #0]
 800c108:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800c10c:	eba7 070c 	sub.w	r7, r7, ip
 800c110:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800c114:	edd3 6a07 	vldr	s13, [r3, #28]
 800c118:	42bc      	cmp	r4, r7
 800c11a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c11c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c120:	bfa8      	it	ge
 800c122:	463c      	movge	r4, r7
 800c124:	f9b1 9000 	ldrsh.w	r9, [r1]
 800c128:	f9ba 1000 	ldrsh.w	r1, [sl]
 800c12c:	ee07 4a90 	vmov	s15, r4
 800c130:	eb09 0e0c 	add.w	lr, r9, ip
 800c134:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800c138:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800c13c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800c140:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800c144:	4571      	cmp	r1, lr
 800c146:	ee25 4a04 	vmul.f32	s8, s10, s8
 800c14a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c14e:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c152:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c156:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800c15a:	ee32 1a05 	vadd.f32	s2, s4, s10
 800c15e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c162:	ee36 0a84 	vadd.f32	s0, s13, s8
 800c166:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c16a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c16e:	f340 808c 	ble.w	800c28a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800c172:	eba1 060e 	sub.w	r6, r1, lr
 800c176:	fb96 f5f4 	sdiv	r5, r6, r4
 800c17a:	ee07 5a10 	vmov	s14, r5
 800c17e:	2d00      	cmp	r5, #0
 800c180:	fb04 6615 	mls	r6, r4, r5, r6
 800c184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c188:	eea7 0a04 	vfma.f32	s0, s14, s8
 800c18c:	eee7 0a24 	vfma.f32	s1, s14, s9
 800c190:	eea7 1a05 	vfma.f32	s2, s14, s10
 800c194:	dd12      	ble.n	800c1bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800c196:	ee70 6a44 	vsub.f32	s13, s0, s8
 800c19a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800c19e:	ee31 2a45 	vsub.f32	s4, s2, s10
 800c1a2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1aa:	bf14      	ite	ne
 800c1ac:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800c1b0:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c1b4:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c1b8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c1bc:	fb05 f204 	mul.w	r2, r5, r4
 800c1c0:	1abf      	subs	r7, r7, r2
 800c1c2:	4494      	add	ip, r2
 800c1c4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800c1c8:	4411      	add	r1, r2
 800c1ca:	eb09 020c 	add.w	r2, r9, ip
 800c1ce:	b209      	sxth	r1, r1
 800c1d0:	443a      	add	r2, r7
 800c1d2:	428a      	cmp	r2, r1
 800c1d4:	bfc4      	itt	gt
 800c1d6:	eba1 0209 	subgt.w	r2, r1, r9
 800c1da:	eba2 070c 	subgt.w	r7, r2, ip
 800c1de:	2f00      	cmp	r7, #0
 800c1e0:	dd50      	ble.n	800c284 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800c1e2:	fb97 f1f4 	sdiv	r1, r7, r4
 800c1e6:	fb04 7211 	mls	r2, r4, r1, r7
 800c1ea:	b90a      	cbnz	r2, 800c1f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800c1ec:	3901      	subs	r1, #1
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800c1f4:	6840      	ldr	r0, [r0, #4]
 800c1f6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800c1fa:	44b6      	add	lr, r6
 800c1fc:	f8d0 a000 	ldr.w	sl, [r0]
 800c200:	2900      	cmp	r1, #0
 800c202:	bfcc      	ite	gt
 800c204:	46a1      	movgt	r9, r4
 800c206:	4691      	movle	r9, r2
 800c208:	900b      	str	r0, [sp, #44]	; 0x2c
 800c20a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c20c:	fb04 e505 	mla	r5, r4, r5, lr
 800c210:	eef0 6a42 	vmov.f32	s13, s4
 800c214:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c218:	9008      	str	r0, [sp, #32]
 800c21a:	eeb0 7a61 	vmov.f32	s14, s3
 800c21e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800c226:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800c22a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800c22e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c230:	445b      	add	r3, fp
 800c232:	9307      	str	r3, [sp, #28]
 800c234:	ee16 3a90 	vmov	r3, s13
 800c238:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800c23c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800c240:	ee21 3a23 	vmul.f32	s6, s2, s7
 800c244:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800c248:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c24c:	ee17 7a90 	vmov	r7, s15
 800c250:	ee73 7a42 	vsub.f32	s15, s6, s4
 800c254:	fb97 f7f4 	sdiv	r7, r7, r4
 800c258:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c25c:	ee17 ca90 	vmov	ip, s15
 800c260:	fb9c fcf4 	sdiv	ip, ip, r4
 800c264:	fb0c 3306 	mla	r3, ip, r6, r3
 800c268:	9302      	str	r3, [sp, #8]
 800c26a:	ee17 3a10 	vmov	r3, s14
 800c26e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800c272:	fb07 3706 	mla	r7, r7, r6, r3
 800c276:	eba9 0306 	sub.w	r3, r9, r6
 800c27a:	e9cd 4700 	strd	r4, r7, [sp]
 800c27e:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c282:	47a0      	blx	r4
 800c284:	b00d      	add	sp, #52	; 0x34
 800c286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28a:	2500      	movs	r5, #0
 800c28c:	462e      	mov	r6, r5
 800c28e:	e799      	b.n	800c1c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800c290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	b0db      	sub	sp, #364	; 0x16c
 800c296:	461d      	mov	r5, r3
 800c298:	4614      	mov	r4, r2
 800c29a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800c29e:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2a4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800c2a8:	9009      	str	r0, [sp, #36]	; 0x24
 800c2aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2ac:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800c2b0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800c2b4:	9310      	str	r3, [sp, #64]	; 0x40
 800c2b6:	6803      	ldr	r3, [r0, #0]
 800c2b8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800c2ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c2be:	47b8      	blx	r7
 800c2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c2:	6058      	str	r0, [r3, #4]
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	f000 83a1 	beq.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800c2d0:	ed94 7a02 	vldr	s14, [r4, #8]
 800c2d4:	9314      	str	r3, [sp, #80]	; 0x50
 800c2d6:	686b      	ldr	r3, [r5, #4]
 800c2d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c2de:	4bc1      	ldr	r3, [pc, #772]	; (800c5e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800c2e0:	7819      	ldrb	r1, [r3, #0]
 800c2e2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c2e6:	2900      	cmp	r1, #0
 800c2e8:	bf16      	itet	ne
 800c2ea:	4619      	movne	r1, r3
 800c2ec:	4611      	moveq	r1, r2
 800c2ee:	4613      	movne	r3, r2
 800c2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f4:	9116      	str	r1, [sp, #88]	; 0x58
 800c2f6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800c2fa:	f240 8387 	bls.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c2fe:	ed94 7a07 	vldr	s14, [r4, #28]
 800c302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30a:	f240 837f 	bls.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c30e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800c312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31a:	f240 8377 	bls.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c31e:	6822      	ldr	r2, [r4, #0]
 800c320:	4bb1      	ldr	r3, [pc, #708]	; (800c5e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800c322:	429a      	cmp	r2, r3
 800c324:	f2c0 8372 	blt.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c328:	49b0      	ldr	r1, [pc, #704]	; (800c5ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800c32a:	6963      	ldr	r3, [r4, #20]
 800c32c:	428a      	cmp	r2, r1
 800c32e:	f300 836d 	bgt.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c332:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c336:	48ae      	ldr	r0, [pc, #696]	; (800c5f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800c338:	33ff      	adds	r3, #255	; 0xff
 800c33a:	4283      	cmp	r3, r0
 800c33c:	f200 8366 	bhi.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c342:	4dac      	ldr	r5, [pc, #688]	; (800c5f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800c344:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c348:	33ff      	adds	r3, #255	; 0xff
 800c34a:	42ab      	cmp	r3, r5
 800c34c:	f200 835e 	bhi.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c350:	6862      	ldr	r2, [r4, #4]
 800c352:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800c356:	33ff      	adds	r3, #255	; 0xff
 800c358:	4283      	cmp	r3, r0
 800c35a:	f200 8357 	bhi.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c35e:	69a1      	ldr	r1, [r4, #24]
 800c360:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800c364:	33ff      	adds	r3, #255	; 0xff
 800c366:	4283      	cmp	r3, r0
 800c368:	f200 8350 	bhi.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c36c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c36e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800c372:	30ff      	adds	r0, #255	; 0xff
 800c374:	42a8      	cmp	r0, r5
 800c376:	f200 8349 	bhi.w	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c37a:	428a      	cmp	r2, r1
 800c37c:	f280 8110 	bge.w	800c5a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800c380:	429a      	cmp	r2, r3
 800c382:	f300 8119 	bgt.w	800c5b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800c386:	4299      	cmp	r1, r3
 800c388:	f280 811d 	bge.w	800c5c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800c38c:	2502      	movs	r5, #2
 800c38e:	2701      	movs	r7, #1
 800c390:	46a9      	mov	r9, r5
 800c392:	46b8      	mov	r8, r7
 800c394:	f04f 0a00 	mov.w	sl, #0
 800c398:	4621      	mov	r1, r4
 800c39a:	a849      	add	r0, sp, #292	; 0x124
 800c39c:	f002 ff98 	bl	800f2d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	4653      	mov	r3, sl
 800c3a4:	a949      	add	r1, sp, #292	; 0x124
 800c3a6:	f8cd 9000 	str.w	r9, [sp]
 800c3aa:	a819      	add	r0, sp, #100	; 0x64
 800c3ac:	f003 f8c0 	bl	800f530 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	4653      	mov	r3, sl
 800c3b4:	a949      	add	r1, sp, #292	; 0x124
 800c3b6:	f8cd 8000 	str.w	r8, [sp]
 800c3ba:	a829      	add	r0, sp, #164	; 0xa4
 800c3bc:	f003 f8b8 	bl	800f530 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3c0:	4643      	mov	r3, r8
 800c3c2:	4622      	mov	r2, r4
 800c3c4:	a949      	add	r1, sp, #292	; 0x124
 800c3c6:	f8cd 9000 	str.w	r9, [sp]
 800c3ca:	a839      	add	r0, sp, #228	; 0xe4
 800c3cc:	f003 f8b0 	bl	800f530 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3d0:	42af      	cmp	r7, r5
 800c3d2:	af12      	add	r7, sp, #72	; 0x48
 800c3d4:	bfb7      	itett	lt
 800c3d6:	2300      	movlt	r3, #0
 800c3d8:	2301      	movge	r3, #1
 800c3da:	ad29      	addlt	r5, sp, #164	; 0xa4
 800c3dc:	ac19      	addlt	r4, sp, #100	; 0x64
 800c3de:	bfb1      	iteee	lt
 800c3e0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c3e2:	ad19      	addge	r5, sp, #100	; 0x64
 800c3e4:	930e      	strge	r3, [sp, #56]	; 0x38
 800c3e6:	ac29      	addge	r4, sp, #164	; 0xa4
 800c3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3ee:	e887 0003 	stmia.w	r7, {r0, r1}
 800c3f2:	b928      	cbnz	r0, 800c400 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800c3f4:	4b80      	ldr	r3, [pc, #512]	; (800c5f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	6803      	ldr	r3, [r0, #0]
 800c3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fc:	4798      	blx	r3
 800c3fe:	6038      	str	r0, [r7, #0]
 800c400:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c402:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c40a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c40c:	930c      	str	r3, [sp, #48]	; 0x30
 800c40e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c410:	6963      	ldr	r3, [r4, #20]
 800c412:	440b      	add	r3, r1
 800c414:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c418:	4408      	add	r0, r1
 800c41a:	b200      	sxth	r0, r0
 800c41c:	4283      	cmp	r3, r0
 800c41e:	900d      	str	r0, [sp, #52]	; 0x34
 800c420:	f280 80dd 	bge.w	800c5de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800c424:	428b      	cmp	r3, r1
 800c426:	da08      	bge.n	800c43a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c428:	2a00      	cmp	r2, #0
 800c42a:	dd06      	ble.n	800c43a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c42c:	1acb      	subs	r3, r1, r3
 800c42e:	429a      	cmp	r2, r3
 800c430:	f2c0 80e4 	blt.w	800c5fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800c434:	2b00      	cmp	r3, #0
 800c436:	f300 80e2 	bgt.w	800c5fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800c43a:	6967      	ldr	r7, [r4, #20]
 800c43c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c442:	443b      	add	r3, r7
 800c444:	461f      	mov	r7, r3
 800c446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c448:	1bdf      	subs	r7, r3, r7
 800c44a:	4297      	cmp	r7, r2
 800c44c:	bfa8      	it	ge
 800c44e:	4617      	movge	r7, r2
 800c450:	2f00      	cmp	r7, #0
 800c452:	f340 8166 	ble.w	800c722 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800c456:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c458:	6829      	ldr	r1, [r5, #0]
 800c45a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c45e:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c462:	4411      	add	r1, r2
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	4299      	cmp	r1, r3
 800c468:	dd1a      	ble.n	800c4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c46a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c46e:	4402      	add	r2, r0
 800c470:	440b      	add	r3, r1
 800c472:	b21b      	sxth	r3, r3
 800c474:	429a      	cmp	r2, r3
 800c476:	dc13      	bgt.n	800c4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c478:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c47a:	a912      	add	r1, sp, #72	; 0x48
 800c47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c47e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	9206      	str	r2, [sp, #24]
 800c484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c486:	9500      	str	r5, [sp, #0]
 800c488:	9205      	str	r2, [sp, #20]
 800c48a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c48c:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c490:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c492:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c496:	aa49      	add	r2, sp, #292	; 0x124
 800c498:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800c49c:	4623      	mov	r3, r4
 800c49e:	47c8      	blx	r9
 800c4a0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c4a4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c4a8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c4ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4b0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c4b4:	68a1      	ldr	r1, [r4, #8]
 800c4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ba:	ed94 6a08 	vldr	s12, [r4, #32]
 800c4be:	edd4 6a07 	vldr	s13, [r4, #28]
 800c4c2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c4c6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c4ca:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c4ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c4d2:	edc4 6a07 	vstr	s13, [r4, #28]
 800c4d6:	441a      	add	r2, r3
 800c4d8:	6963      	ldr	r3, [r4, #20]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	6022      	str	r2, [r4, #0]
 800c4de:	6163      	str	r3, [r4, #20]
 800c4e0:	69a3      	ldr	r3, [r4, #24]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	61a3      	str	r3, [r4, #24]
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	440b      	add	r3, r1
 800c4ea:	68e1      	ldr	r1, [r4, #12]
 800c4ec:	428b      	cmp	r3, r1
 800c4ee:	6123      	str	r3, [r4, #16]
 800c4f0:	db15      	blt.n	800c51e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800c4f2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c4f6:	3201      	adds	r2, #1
 800c4f8:	1a5b      	subs	r3, r3, r1
 800c4fa:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c4fe:	6022      	str	r2, [r4, #0]
 800c500:	6123      	str	r3, [r4, #16]
 800c502:	edc4 6a07 	vstr	s13, [r4, #28]
 800c506:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c50a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c50e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c512:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c51a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c51e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c522:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c526:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c52a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c52e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c532:	68a9      	ldr	r1, [r5, #8]
 800c534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c538:	ed95 6a08 	vldr	s12, [r5, #32]
 800c53c:	edd5 6a07 	vldr	s13, [r5, #28]
 800c540:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c544:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c548:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c54c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c550:	edc5 6a07 	vstr	s13, [r5, #28]
 800c554:	441a      	add	r2, r3
 800c556:	696b      	ldr	r3, [r5, #20]
 800c558:	3301      	adds	r3, #1
 800c55a:	602a      	str	r2, [r5, #0]
 800c55c:	616b      	str	r3, [r5, #20]
 800c55e:	69ab      	ldr	r3, [r5, #24]
 800c560:	3b01      	subs	r3, #1
 800c562:	61ab      	str	r3, [r5, #24]
 800c564:	692b      	ldr	r3, [r5, #16]
 800c566:	440b      	add	r3, r1
 800c568:	68e9      	ldr	r1, [r5, #12]
 800c56a:	428b      	cmp	r3, r1
 800c56c:	612b      	str	r3, [r5, #16]
 800c56e:	db15      	blt.n	800c59c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800c570:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c574:	3201      	adds	r2, #1
 800c576:	1a5b      	subs	r3, r3, r1
 800c578:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c57c:	602a      	str	r2, [r5, #0]
 800c57e:	612b      	str	r3, [r5, #16]
 800c580:	edc5 6a07 	vstr	s13, [r5, #28]
 800c584:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c588:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c58c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c590:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c594:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c598:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c59c:	3f01      	subs	r7, #1
 800c59e:	e757      	b.n	800c450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800c5a0:	4299      	cmp	r1, r3
 800c5a2:	dc13      	bgt.n	800c5cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	da14      	bge.n	800c5d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800c5a8:	2502      	movs	r5, #2
 800c5aa:	2703      	movs	r7, #3
 800c5ac:	f04f 0800 	mov.w	r8, #0
 800c5b0:	46a9      	mov	r9, r5
 800c5b2:	f04f 0a01 	mov.w	sl, #1
 800c5b6:	e6ef      	b.n	800c398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c5b8:	2501      	movs	r5, #1
 800c5ba:	2700      	movs	r7, #0
 800c5bc:	46a9      	mov	r9, r5
 800c5be:	46b8      	mov	r8, r7
 800c5c0:	f04f 0a02 	mov.w	sl, #2
 800c5c4:	e6e8      	b.n	800c398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c5c6:	2501      	movs	r5, #1
 800c5c8:	2702      	movs	r7, #2
 800c5ca:	e6e1      	b.n	800c390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800c5cc:	2500      	movs	r5, #0
 800c5ce:	2701      	movs	r7, #1
 800c5d0:	e7f4      	b.n	800c5bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800c5d2:	2702      	movs	r7, #2
 800c5d4:	2503      	movs	r5, #3
 800c5d6:	f04f 0900 	mov.w	r9, #0
 800c5da:	46b8      	mov	r8, r7
 800c5dc:	e7e9      	b.n	800c5b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800c5de:	4613      	mov	r3, r2
 800c5e0:	e728      	b.n	800c434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800c5e2:	bf00      	nop
 800c5e4:	2400adfc 	.word	0x2400adfc
 800c5e8:	fffd8f01 	.word	0xfffd8f01
 800c5ec:	00027100 	.word	0x00027100
 800c5f0:	0004e1ff 	.word	0x0004e1ff
 800c5f4:	0004e1fe 	.word	0x0004e1fe
 800c5f8:	2400ae04 	.word	0x2400ae04
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c600:	469e      	mov	lr, r3
 800c602:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800c604:	469c      	mov	ip, r3
 800c606:	9111      	str	r1, [sp, #68]	; 0x44
 800c608:	f04f 0900 	mov.w	r9, #0
 800c60c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800c610:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800c614:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800c618:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800c61c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800c620:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c624:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800c628:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800c62c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800c630:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800c634:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800c638:	f1bc 0f00 	cmp.w	ip, #0
 800c63c:	d147      	bne.n	800c6ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800c63e:	eb03 0c07 	add.w	ip, r3, r7
 800c642:	1ad7      	subs	r7, r2, r3
 800c644:	f1b9 0f00 	cmp.w	r9, #0
 800c648:	d009      	beq.n	800c65e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800c64a:	9029      	str	r0, [sp, #164]	; 0xa4
 800c64c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800c650:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800c654:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800c658:	912d      	str	r1, [sp, #180]	; 0xb4
 800c65a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800c65e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c660:	f04f 0800 	mov.w	r8, #0
 800c664:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800c668:	9111      	str	r1, [sp, #68]	; 0x44
 800c66a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800c66e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c672:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800c676:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800c67a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800c67e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800c682:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c686:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800c68a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800c68e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800c692:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800c696:	f1be 0f00 	cmp.w	lr, #0
 800c69a:	d031      	beq.n	800c700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800c69c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c69e:	4450      	add	r0, sl
 800c6a0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c6a4:	4431      	add	r1, r6
 800c6a6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c6aa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c6ae:	4549      	cmp	r1, r9
 800c6b0:	db08      	blt.n	800c6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800c6b2:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c6bc:	eba1 0109 	sub.w	r1, r1, r9
 800c6c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c6c8:	f04f 0801 	mov.w	r8, #1
 800c6cc:	e7e3      	b.n	800c696 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800c6ce:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c6d0:	4450      	add	r0, sl
 800c6d2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c6d6:	4431      	add	r1, r6
 800c6d8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c6dc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c6e0:	4541      	cmp	r1, r8
 800c6e2:	db08      	blt.n	800c6f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800c6e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c6ee:	eba1 0108 	sub.w	r1, r1, r8
 800c6f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c6f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c6fa:	f04f 0901 	mov.w	r9, #1
 800c6fe:	e79b      	b.n	800c638 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800c700:	449c      	add	ip, r3
 800c702:	1aff      	subs	r7, r7, r3
 800c704:	f1b8 0f00 	cmp.w	r8, #0
 800c708:	d009      	beq.n	800c71e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800c70a:	9019      	str	r0, [sp, #100]	; 0x64
 800c70c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800c710:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800c714:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800c718:	911d      	str	r1, [sp, #116]	; 0x74
 800c71a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	e68b      	b.n	800c43a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c724:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 80d1 	beq.w	800c8ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800c72c:	ad19      	add	r5, sp, #100	; 0x64
 800c72e:	ac39      	add	r4, sp, #228	; 0xe4
 800c730:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c732:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c736:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c73a:	930c      	str	r3, [sp, #48]	; 0x30
 800c73c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c73e:	6963      	ldr	r3, [r4, #20]
 800c740:	440b      	add	r3, r1
 800c742:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c746:	4408      	add	r0, r1
 800c748:	b200      	sxth	r0, r0
 800c74a:	4283      	cmp	r3, r0
 800c74c:	900d      	str	r0, [sp, #52]	; 0x34
 800c74e:	f280 80c1 	bge.w	800c8d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800c752:	428b      	cmp	r3, r1
 800c754:	da08      	bge.n	800c768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c756:	2a00      	cmp	r2, #0
 800c758:	dd06      	ble.n	800c768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c75a:	1acb      	subs	r3, r1, r3
 800c75c:	429a      	cmp	r2, r3
 800c75e:	f2c0 80bb 	blt.w	800c8d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800c762:	2b00      	cmp	r3, #0
 800c764:	f300 80b9 	bgt.w	800c8da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800c768:	6967      	ldr	r7, [r4, #20]
 800c76a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c770:	443b      	add	r3, r7
 800c772:	461f      	mov	r7, r3
 800c774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c776:	1bdf      	subs	r7, r3, r7
 800c778:	4297      	cmp	r7, r2
 800c77a:	bfa8      	it	ge
 800c77c:	4617      	movge	r7, r2
 800c77e:	2f00      	cmp	r7, #0
 800c780:	f340 813c 	ble.w	800c9fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800c784:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c786:	6829      	ldr	r1, [r5, #0]
 800c788:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c78c:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c790:	4411      	add	r1, r2
 800c792:	6820      	ldr	r0, [r4, #0]
 800c794:	4299      	cmp	r1, r3
 800c796:	dd1a      	ble.n	800c7ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c798:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c79c:	4402      	add	r2, r0
 800c79e:	440b      	add	r3, r1
 800c7a0:	b21b      	sxth	r3, r3
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	dc13      	bgt.n	800c7ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c7a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7a8:	a912      	add	r1, sp, #72	; 0x48
 800c7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	9206      	str	r2, [sp, #24]
 800c7b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7b4:	9500      	str	r5, [sp, #0]
 800c7b6:	9205      	str	r2, [sp, #20]
 800c7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7ba:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c7be:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c7c0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c7c4:	aa49      	add	r2, sp, #292	; 0x124
 800c7c6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800c7ca:	4623      	mov	r3, r4
 800c7cc:	47c8      	blx	r9
 800c7ce:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c7d2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c7d6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c7da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7de:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c7e2:	68a1      	ldr	r1, [r4, #8]
 800c7e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e8:	ed94 6a08 	vldr	s12, [r4, #32]
 800c7ec:	edd4 6a07 	vldr	s13, [r4, #28]
 800c7f0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c7f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c7f8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c7fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c800:	edc4 6a07 	vstr	s13, [r4, #28]
 800c804:	441a      	add	r2, r3
 800c806:	6963      	ldr	r3, [r4, #20]
 800c808:	3301      	adds	r3, #1
 800c80a:	6022      	str	r2, [r4, #0]
 800c80c:	6163      	str	r3, [r4, #20]
 800c80e:	69a3      	ldr	r3, [r4, #24]
 800c810:	3b01      	subs	r3, #1
 800c812:	61a3      	str	r3, [r4, #24]
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	440b      	add	r3, r1
 800c818:	68e1      	ldr	r1, [r4, #12]
 800c81a:	428b      	cmp	r3, r1
 800c81c:	6123      	str	r3, [r4, #16]
 800c81e:	db15      	blt.n	800c84c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800c820:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c824:	3201      	adds	r2, #1
 800c826:	1a5b      	subs	r3, r3, r1
 800c828:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c82c:	6022      	str	r2, [r4, #0]
 800c82e:	6123      	str	r3, [r4, #16]
 800c830:	edc4 6a07 	vstr	s13, [r4, #28]
 800c834:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c838:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c83c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c840:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c848:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c84c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c850:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c854:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c85c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c860:	68a9      	ldr	r1, [r5, #8]
 800c862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c866:	ed95 6a08 	vldr	s12, [r5, #32]
 800c86a:	edd5 6a07 	vldr	s13, [r5, #28]
 800c86e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c872:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c876:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c87a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c87e:	edc5 6a07 	vstr	s13, [r5, #28]
 800c882:	441a      	add	r2, r3
 800c884:	696b      	ldr	r3, [r5, #20]
 800c886:	3301      	adds	r3, #1
 800c888:	602a      	str	r2, [r5, #0]
 800c88a:	616b      	str	r3, [r5, #20]
 800c88c:	69ab      	ldr	r3, [r5, #24]
 800c88e:	3b01      	subs	r3, #1
 800c890:	61ab      	str	r3, [r5, #24]
 800c892:	692b      	ldr	r3, [r5, #16]
 800c894:	440b      	add	r3, r1
 800c896:	68e9      	ldr	r1, [r5, #12]
 800c898:	428b      	cmp	r3, r1
 800c89a:	612b      	str	r3, [r5, #16]
 800c89c:	db15      	blt.n	800c8ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800c89e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c8a2:	3201      	adds	r2, #1
 800c8a4:	1a5b      	subs	r3, r3, r1
 800c8a6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c8aa:	602a      	str	r2, [r5, #0]
 800c8ac:	612b      	str	r3, [r5, #16]
 800c8ae:	edc5 6a07 	vstr	s13, [r5, #28]
 800c8b2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c8b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c8ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c8be:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c8c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8c6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c8ca:	3f01      	subs	r7, #1
 800c8cc:	e757      	b.n	800c77e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800c8ce:	ad39      	add	r5, sp, #228	; 0xe4
 800c8d0:	ac19      	add	r4, sp, #100	; 0x64
 800c8d2:	e72d      	b.n	800c730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	e744      	b.n	800c762 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800c8d8:	4613      	mov	r3, r2
 800c8da:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800c8dc:	469e      	mov	lr, r3
 800c8de:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800c8e2:	461f      	mov	r7, r3
 800c8e4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800c8e8:	f04f 0900 	mov.w	r9, #0
 800c8ec:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800c8f0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800c8f4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800c8f8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800c8fc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800c900:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800c902:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800c906:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800c90a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800c90e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800c912:	960e      	str	r6, [sp, #56]	; 0x38
 800c914:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800c918:	2f00      	cmp	r7, #0
 800c91a:	d146      	bne.n	800c9aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800c91c:	449c      	add	ip, r3
 800c91e:	1ad7      	subs	r7, r2, r3
 800c920:	f1b9 0f00 	cmp.w	r9, #0
 800c924:	d009      	beq.n	800c93a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800c926:	9039      	str	r0, [sp, #228]	; 0xe4
 800c928:	913d      	str	r1, [sp, #244]	; 0xf4
 800c92a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c92e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800c932:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800c936:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800c93a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c93c:	f04f 0800 	mov.w	r8, #0
 800c940:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800c944:	910e      	str	r1, [sp, #56]	; 0x38
 800c946:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800c94a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c94e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800c952:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800c956:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800c95a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800c95e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c962:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800c966:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800c96a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800c96e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800c972:	f1be 0f00 	cmp.w	lr, #0
 800c976:	d030      	beq.n	800c9da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800c978:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c97a:	4450      	add	r0, sl
 800c97c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c980:	4431      	add	r1, r6
 800c982:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c986:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c98a:	4549      	cmp	r1, r9
 800c98c:	db08      	blt.n	800c9a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800c98e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c992:	3001      	adds	r0, #1
 800c994:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c998:	eba1 0109 	sub.w	r1, r1, r9
 800c99c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c9a0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c9a4:	f04f 0801 	mov.w	r8, #1
 800c9a8:	e7e3      	b.n	800c972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800c9aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c9ac:	4450      	add	r0, sl
 800c9ae:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c9b2:	4431      	add	r1, r6
 800c9b4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c9b8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c9bc:	4541      	cmp	r1, r8
 800c9be:	db08      	blt.n	800c9d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800c9c0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c9ca:	eba1 0108 	sub.w	r1, r1, r8
 800c9ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c9d2:	3f01      	subs	r7, #1
 800c9d4:	f04f 0901 	mov.w	r9, #1
 800c9d8:	e79e      	b.n	800c918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800c9da:	449c      	add	ip, r3
 800c9dc:	1aff      	subs	r7, r7, r3
 800c9de:	f1b8 0f00 	cmp.w	r8, #0
 800c9e2:	d009      	beq.n	800c9f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800c9e4:	9019      	str	r0, [sp, #100]	; 0x64
 800c9e6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800c9ea:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800c9ee:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800c9f2:	911d      	str	r1, [sp, #116]	; 0x74
 800c9f4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800c9f8:	1ad2      	subs	r2, r2, r3
 800c9fa:	e6b5      	b.n	800c768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c9fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	b923      	cbnz	r3, 800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ca02:	4b04      	ldr	r3, [pc, #16]	; (800ca14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800ca04:	6818      	ldr	r0, [r3, #0]
 800ca06:	6803      	ldr	r3, [r0, #0]
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	4798      	blx	r3
 800ca0c:	b05b      	add	sp, #364	; 0x16c
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca12:	bf00      	nop
 800ca14:	2400ae04 	.word	0x2400ae04

0800ca18 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d818      	bhi.n	800ca4e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800ca1c:	e8df f003 	tbb	[pc, r3]
 800ca20:	130d0602 	.word	0x130d0602
 800ca24:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ca28:	1850      	adds	r0, r2, r1
 800ca2a:	4770      	bx	lr
 800ca2c:	8803      	ldrh	r3, [r0, #0]
 800ca2e:	8880      	ldrh	r0, [r0, #4]
 800ca30:	4418      	add	r0, r3
 800ca32:	b200      	sxth	r0, r0
 800ca34:	1a80      	subs	r0, r0, r2
 800ca36:	3801      	subs	r0, #1
 800ca38:	4770      	bx	lr
 800ca3a:	8803      	ldrh	r3, [r0, #0]
 800ca3c:	8880      	ldrh	r0, [r0, #4]
 800ca3e:	4418      	add	r0, r3
 800ca40:	b200      	sxth	r0, r0
 800ca42:	1a40      	subs	r0, r0, r1
 800ca44:	e7f7      	b.n	800ca36 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ca46:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ca4a:	4410      	add	r0, r2
 800ca4c:	4770      	bx	lr
 800ca4e:	2000      	movs	r0, #0
 800ca50:	4770      	bx	lr

0800ca52 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d817      	bhi.n	800ca86 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800ca56:	e8df f003 	tbb	[pc, r3]
 800ca5a:	0602      	.short	0x0602
 800ca5c:	1009      	.short	0x1009
 800ca5e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ca62:	1850      	adds	r0, r2, r1
 800ca64:	4770      	bx	lr
 800ca66:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ca6a:	e7fa      	b.n	800ca62 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800ca6c:	8843      	ldrh	r3, [r0, #2]
 800ca6e:	88c0      	ldrh	r0, [r0, #6]
 800ca70:	4418      	add	r0, r3
 800ca72:	b200      	sxth	r0, r0
 800ca74:	1a80      	subs	r0, r0, r2
 800ca76:	3801      	subs	r0, #1
 800ca78:	4770      	bx	lr
 800ca7a:	8843      	ldrh	r3, [r0, #2]
 800ca7c:	88c0      	ldrh	r0, [r0, #6]
 800ca7e:	4418      	add	r0, r3
 800ca80:	b200      	sxth	r0, r0
 800ca82:	1a40      	subs	r0, r0, r1
 800ca84:	e7f7      	b.n	800ca76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800ca86:	2000      	movs	r0, #0
 800ca88:	4770      	bx	lr
	...

0800ca8c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800ca8c:	4b01      	ldr	r3, [pc, #4]	; (800ca94 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	4770      	bx	lr
 800ca94:	2400ae0c 	.word	0x2400ae0c

0800ca98 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800ca98:	4603      	mov	r3, r0
 800ca9a:	b1c8      	cbz	r0, 800cad0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800ca9c:	0c02      	lsrs	r2, r0, #16
 800ca9e:	0412      	lsls	r2, r2, #16
 800caa0:	b9a2      	cbnz	r2, 800cacc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800caa2:	0403      	lsls	r3, r0, #16
 800caa4:	2010      	movs	r0, #16
 800caa6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800caaa:	bf04      	itt	eq
 800caac:	021b      	lsleq	r3, r3, #8
 800caae:	3008      	addeq	r0, #8
 800cab0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cab4:	bf04      	itt	eq
 800cab6:	011b      	lsleq	r3, r3, #4
 800cab8:	3004      	addeq	r0, #4
 800caba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cabe:	bf04      	itt	eq
 800cac0:	009b      	lsleq	r3, r3, #2
 800cac2:	3002      	addeq	r0, #2
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	db04      	blt.n	800cad2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800cac8:	3001      	adds	r0, #1
 800caca:	4770      	bx	lr
 800cacc:	2000      	movs	r0, #0
 800cace:	e7ea      	b.n	800caa6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800cad0:	2020      	movs	r0, #32
 800cad2:	4770      	bx	lr

0800cad4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800cad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	b087      	sub	sp, #28
 800cada:	4681      	mov	r9, r0
 800cadc:	4698      	mov	r8, r3
 800cade:	4610      	mov	r0, r2
 800cae0:	460d      	mov	r5, r1
 800cae2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800cae6:	b981      	cbnz	r1, 800cb0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800cae8:	b14b      	cbz	r3, 800cafe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800caea:	460b      	mov	r3, r1
 800caec:	464a      	mov	r2, r9
 800caee:	4641      	mov	r1, r8
 800caf0:	e9cd 4700 	strd	r4, r7, [sp]
 800caf4:	f7ff ffee 	bl	800cad4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800caf8:	b007      	add	sp, #28
 800cafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafe:	f04f 33ff 	mov.w	r3, #4294967295
 800cb02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800cb06:	603b      	str	r3, [r7, #0]
 800cb08:	e7f6      	b.n	800caf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800cb0a:	fa32 fa01 	lsrs.w	sl, r2, r1
 800cb0e:	d107      	bne.n	800cb20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800cb10:	fb09 f602 	mul.w	r6, r9, r2
 800cb14:	fbb6 f0f4 	udiv	r0, r6, r4
 800cb18:	fb04 6610 	mls	r6, r4, r0, r6
 800cb1c:	603e      	str	r6, [r7, #0]
 800cb1e:	e7eb      	b.n	800caf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800cb20:	2601      	movs	r6, #1
 800cb22:	fa09 fb01 	lsl.w	fp, r9, r1
 800cb26:	408e      	lsls	r6, r1
 800cb28:	fbbb f3f4 	udiv	r3, fp, r4
 800cb2c:	3e01      	subs	r6, #1
 800cb2e:	9302      	str	r3, [sp, #8]
 800cb30:	fb0a f303 	mul.w	r3, sl, r3
 800cb34:	4016      	ands	r6, r2
 800cb36:	9303      	str	r3, [sp, #12]
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff ffad 	bl	800ca98 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb3e:	464a      	mov	r2, r9
 800cb40:	460b      	mov	r3, r1
 800cb42:	4601      	mov	r1, r0
 800cb44:	4630      	mov	r0, r6
 800cb46:	e9cd 4700 	strd	r4, r7, [sp]
 800cb4a:	f7ff ffc3 	bl	800cad4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb4e:	9b02      	ldr	r3, [sp, #8]
 800cb50:	4606      	mov	r6, r0
 800cb52:	eb05 0108 	add.w	r1, r5, r8
 800cb56:	fb04 bb13 	mls	fp, r4, r3, fp
 800cb5a:	4658      	mov	r0, fp
 800cb5c:	f7ff ff9c 	bl	800ca98 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb60:	ab05      	add	r3, sp, #20
 800cb62:	465a      	mov	r2, fp
 800cb64:	e9cd 4300 	strd	r4, r3, [sp]
 800cb68:	4603      	mov	r3, r0
 800cb6a:	4650      	mov	r0, sl
 800cb6c:	f7ff ffb2 	bl	800cad4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	9a05      	ldr	r2, [sp, #20]
 800cb74:	9b03      	ldr	r3, [sp, #12]
 800cb76:	4411      	add	r1, r2
 800cb78:	fbb1 f2f4 	udiv	r2, r1, r4
 800cb7c:	18d3      	adds	r3, r2, r3
 800cb7e:	fb04 1412 	mls	r4, r4, r2, r1
 800cb82:	441e      	add	r6, r3
 800cb84:	603c      	str	r4, [r7, #0]
 800cb86:	4430      	add	r0, r6
 800cb88:	e7b6      	b.n	800caf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800cb8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800cb8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	f1b0 0900 	subs.w	r9, r0, #0
 800cb94:	461d      	mov	r5, r3
 800cb96:	4617      	mov	r7, r2
 800cb98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cb9a:	bfbb      	ittet	lt
 800cb9c:	f1c9 0900 	rsblt	r9, r9, #0
 800cba0:	f04f 36ff 	movlt.w	r6, #4294967295
 800cba4:	2601      	movge	r6, #1
 800cba6:	6823      	ldrlt	r3, [r4, #0]
 800cba8:	bfbc      	itt	lt
 800cbaa:	425b      	neglt	r3, r3
 800cbac:	6023      	strlt	r3, [r4, #0]
 800cbae:	2a00      	cmp	r2, #0
 800cbb0:	da04      	bge.n	800cbbc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	4257      	negs	r7, r2
 800cbb6:	4276      	negs	r6, r6
 800cbb8:	425b      	negs	r3, r3
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	2d00      	cmp	r5, #0
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	bfba      	itte	lt
 800cbc2:	426d      	neglt	r5, r5
 800cbc4:	f04f 38ff 	movlt.w	r8, #4294967295
 800cbc8:	f04f 0801 	movge.w	r8, #1
 800cbcc:	f7ff ff64 	bl	800ca98 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cbd0:	ab03      	add	r3, sp, #12
 800cbd2:	463a      	mov	r2, r7
 800cbd4:	e9cd 5300 	strd	r5, r3, [sp]
 800cbd8:	4603      	mov	r3, r0
 800cbda:	4648      	mov	r0, r9
 800cbdc:	f7ff ff7a 	bl	800cad4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cbe0:	6823      	ldr	r3, [r4, #0]
 800cbe2:	9a03      	ldr	r2, [sp, #12]
 800cbe4:	4546      	cmp	r6, r8
 800cbe6:	441a      	add	r2, r3
 800cbe8:	fb92 f3f5 	sdiv	r3, r2, r5
 800cbec:	4418      	add	r0, r3
 800cbee:	fb05 2313 	mls	r3, r5, r3, r2
 800cbf2:	bf18      	it	ne
 800cbf4:	4240      	negne	r0, r0
 800cbf6:	1c72      	adds	r2, r6, #1
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	d105      	bne.n	800cc08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f1c3 0200 	rsb	r2, r3, #0
 800cc02:	db0b      	blt.n	800cc1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800cc04:	6022      	str	r2, [r4, #0]
 800cc06:	e006      	b.n	800cc16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc08:	2e01      	cmp	r6, #1
 800cc0a:	d104      	bne.n	800cc16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da02      	bge.n	800cc16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc10:	442b      	add	r3, r5
 800cc12:	3801      	subs	r0, #1
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	b005      	add	sp, #20
 800cc18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc1c:	3801      	subs	r0, #1
 800cc1e:	1b52      	subs	r2, r2, r5
 800cc20:	e7f0      	b.n	800cc04 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800cc24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800cc24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cc28:	4c1c      	ldr	r4, [pc, #112]	; (800cc9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	6807      	ldr	r7, [r0, #0]
 800cc2e:	69a3      	ldr	r3, [r4, #24]
 800cc30:	b92b      	cbnz	r3, 800cc3e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800cc32:	6840      	ldr	r0, [r0, #4]
 800cc34:	e9c5 7000 	strd	r7, r0, [r5]
 800cc38:	b004      	add	sp, #16
 800cc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc3e:	f04f 0802 	mov.w	r8, #2
 800cc42:	68a2      	ldr	r2, [r4, #8]
 800cc44:	ae04      	add	r6, sp, #16
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	fb93 f1f8 	sdiv	r1, r3, r8
 800cc4c:	440a      	add	r2, r1
 800cc4e:	69e1      	ldr	r1, [r4, #28]
 800cc50:	f846 2d04 	str.w	r2, [r6, #-4]!
 800cc54:	463a      	mov	r2, r7
 800cc56:	9600      	str	r6, [sp, #0]
 800cc58:	f7ff ff97 	bl	800cb8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc5c:	69a3      	ldr	r3, [r4, #24]
 800cc5e:	4607      	mov	r7, r0
 800cc60:	686a      	ldr	r2, [r5, #4]
 800cc62:	6a21      	ldr	r1, [r4, #32]
 800cc64:	9600      	str	r6, [sp, #0]
 800cc66:	6860      	ldr	r0, [r4, #4]
 800cc68:	f7ff ff8f 	bl	800cb8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc6c:	69a3      	ldr	r3, [r4, #24]
 800cc6e:	6962      	ldr	r2, [r4, #20]
 800cc70:	4407      	add	r7, r0
 800cc72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cc74:	9600      	str	r6, [sp, #0]
 800cc76:	68e0      	ldr	r0, [r4, #12]
 800cc78:	fb93 f8f8 	sdiv	r8, r3, r8
 800cc7c:	4442      	add	r2, r8
 800cc7e:	9203      	str	r2, [sp, #12]
 800cc80:	682a      	ldr	r2, [r5, #0]
 800cc82:	f7ff ff82 	bl	800cb8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc86:	4680      	mov	r8, r0
 800cc88:	9600      	str	r6, [sp, #0]
 800cc8a:	69a3      	ldr	r3, [r4, #24]
 800cc8c:	686a      	ldr	r2, [r5, #4]
 800cc8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cc90:	6920      	ldr	r0, [r4, #16]
 800cc92:	f7ff ff7a 	bl	800cb8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc96:	4440      	add	r0, r8
 800cc98:	e7cc      	b.n	800cc34 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800cc9a:	bf00      	nop
 800cc9c:	2400ae10 	.word	0x2400ae10

0800cca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d109      	bne.n	800ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800cca8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ccac:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ccb0:	8003      	strh	r3, [r0, #0]
 800ccb2:	4b04      	ldr	r3, [pc, #16]	; (800ccc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	1a9b      	subs	r3, r3, r2
 800ccba:	800b      	strh	r3, [r1, #0]
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	2400adfc 	.word	0x2400adfc
 800ccc4:	2400adf8 	.word	0x2400adf8

0800ccc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800ccc8:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ccca:	b510      	push	{r4, lr}
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d108      	bne.n	800cce4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800ccd2:	4b06      	ldr	r3, [pc, #24]	; (800ccec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800ccd4:	880c      	ldrh	r4, [r1, #0]
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	1b1b      	subs	r3, r3, r4
 800cce0:	8003      	strh	r3, [r0, #0]
 800cce2:	800a      	strh	r2, [r1, #0]
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	bf00      	nop
 800cce8:	2400adfc 	.word	0x2400adfc
 800ccec:	2400adf8 	.word	0x2400adf8

0800ccf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800ccf0:	4b0a      	ldr	r3, [pc, #40]	; (800cd1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800ccf2:	b510      	push	{r4, lr}
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d10e      	bne.n	800cd18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800ccfa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800ccfe:	8843      	ldrh	r3, [r0, #2]
 800cd00:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cd04:	18ca      	adds	r2, r1, r3
 800cd06:	4b06      	ldr	r3, [pc, #24]	; (800cd20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800cd08:	8044      	strh	r4, [r0, #2]
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	1a9b      	subs	r3, r3, r2
 800cd0e:	8003      	strh	r3, [r0, #0]
 800cd10:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cd14:	8081      	strh	r1, [r0, #4]
 800cd16:	80c3      	strh	r3, [r0, #6]
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	bf00      	nop
 800cd1c:	2400adfc 	.word	0x2400adfc
 800cd20:	2400adf8 	.word	0x2400adf8

0800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800cd24:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d10c      	bne.n	800cd46 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800cd2c:	8803      	ldrh	r3, [r0, #0]
 800cd2e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800cd32:	8842      	ldrh	r2, [r0, #2]
 800cd34:	8002      	strh	r2, [r0, #0]
 800cd36:	185a      	adds	r2, r3, r1
 800cd38:	4b04      	ldr	r3, [pc, #16]	; (800cd4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	1a9b      	subs	r3, r3, r2
 800cd3e:	8043      	strh	r3, [r0, #2]
 800cd40:	88c3      	ldrh	r3, [r0, #6]
 800cd42:	80c1      	strh	r1, [r0, #6]
 800cd44:	8083      	strh	r3, [r0, #4]
 800cd46:	4770      	bx	lr
 800cd48:	2400adfc 	.word	0x2400adfc
 800cd4c:	2400adf8 	.word	0x2400adf8

0800cd50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800cd52:	b510      	push	{r4, lr}
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d108      	bne.n	800cd6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800cd5a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cd5e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cd62:	8003      	strh	r3, [r0, #0]
 800cd64:	8893      	ldrh	r3, [r2, #4]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	1b1b      	subs	r3, r3, r4
 800cd6a:	800b      	strh	r3, [r1, #0]
 800cd6c:	bd10      	pop	{r4, pc}
 800cd6e:	bf00      	nop
 800cd70:	2400adfc 	.word	0x2400adfc

0800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800cd74:	4b0a      	ldr	r3, [pc, #40]	; (800cda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800cd76:	460a      	mov	r2, r1
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d10d      	bne.n	800cd9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800cd80:	8881      	ldrh	r1, [r0, #4]
 800cd82:	8803      	ldrh	r3, [r0, #0]
 800cd84:	440b      	add	r3, r1
 800cd86:	4601      	mov	r1, r0
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	f821 3b02 	strh.w	r3, [r1], #2
 800cd8e:	f7ff ffdf 	bl	800cd50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800cd92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cd96:	88c2      	ldrh	r2, [r0, #6]
 800cd98:	80c3      	strh	r3, [r0, #6]
 800cd9a:	8082      	strh	r2, [r0, #4]
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	bf00      	nop
 800cda0:	2400adfc 	.word	0x2400adfc

0800cda4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	2300      	movs	r3, #0
 800cda8:	4c0a      	ldr	r4, [pc, #40]	; (800cdd4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800cdaa:	4605      	mov	r5, r0
 800cdac:	460e      	mov	r6, r1
 800cdae:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	b110      	cbz	r0, 800cdbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 800cdb6:	6803      	ldr	r3, [r0, #0]
 800cdb8:	695b      	ldr	r3, [r3, #20]
 800cdba:	4798      	blx	r3
 800cdbc:	6026      	str	r6, [r4, #0]
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	6833      	ldr	r3, [r6, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	4798      	blx	r3
 800cdc6:	682b      	ldr	r3, [r5, #0]
 800cdc8:	4628      	mov	r0, r5
 800cdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdd0:	4718      	bx	r3
 800cdd2:	bf00      	nop
 800cdd4:	2400ae40 	.word	0x2400ae40

0800cdd8 <_ZN8touchgfx11Application13requestRedrawEv>:
 800cdd8:	4b06      	ldr	r3, [pc, #24]	; (800cdf4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800cdda:	2100      	movs	r1, #0
 800cddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cde0:	4b05      	ldr	r3, [pc, #20]	; (800cdf8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800cde2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800cde6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdea:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800cdee:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800cdf2:	4770      	bx	lr
 800cdf4:	2400adf8 	.word	0x2400adf8
 800cdf8:	2400adfa 	.word	0x2400adfa

0800cdfc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800cdfc:	4b03      	ldr	r3, [pc, #12]	; (800ce0c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800cdfe:	6818      	ldr	r0, [r3, #0]
 800ce00:	b110      	cbz	r0, 800ce08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800ce02:	6803      	ldr	r3, [r0, #0]
 800ce04:	699b      	ldr	r3, [r3, #24]
 800ce06:	4718      	bx	r3
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	2400ae40 	.word	0x2400ae40

0800ce10 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800ce10:	4770      	bx	lr
	...

0800ce14 <_ZN8touchgfx11Application4drawEv>:
 800ce14:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <_ZN8touchgfx11Application4drawEv+0x28>)
 800ce16:	b507      	push	{r0, r1, r2, lr}
 800ce18:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4b08      	ldr	r3, [pc, #32]	; (800ce40 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800ce20:	9100      	str	r1, [sp, #0]
 800ce22:	4669      	mov	r1, sp
 800ce24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce28:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ce2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ce30:	6803      	ldr	r3, [r0, #0]
 800ce32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce34:	4798      	blx	r3
 800ce36:	b003      	add	sp, #12
 800ce38:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce3c:	2400adf8 	.word	0x2400adf8
 800ce40:	2400adfa 	.word	0x2400adfa

0800ce44 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ce44:	4b03      	ldr	r3, [pc, #12]	; (800ce54 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800ce46:	6818      	ldr	r0, [r3, #0]
 800ce48:	b110      	cbz	r0, 800ce50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800ce4a:	6803      	ldr	r3, [r0, #0]
 800ce4c:	69db      	ldr	r3, [r3, #28]
 800ce4e:	4718      	bx	r3
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	2400ae40 	.word	0x2400ae40

0800ce58 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ce58:	4b03      	ldr	r3, [pc, #12]	; (800ce68 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800ce5a:	6818      	ldr	r0, [r3, #0]
 800ce5c:	b110      	cbz	r0, 800ce64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800ce5e:	6803      	ldr	r3, [r0, #0]
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	4718      	bx	r3
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	2400ae40 	.word	0x2400ae40

0800ce6c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800ce72:	4770      	bx	lr

0800ce74 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800ce74:	4b03      	ldr	r3, [pc, #12]	; (800ce84 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800ce76:	6818      	ldr	r0, [r3, #0]
 800ce78:	b110      	cbz	r0, 800ce80 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800ce7a:	6803      	ldr	r3, [r0, #0]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	4718      	bx	r3
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	2400ae40 	.word	0x2400ae40

0800ce88 <_ZN8touchgfx11Application15handleTickEventEv>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	4d32      	ldr	r5, [pc, #200]	; (800cf54 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	6828      	ldr	r0, [r5, #0]
 800ce90:	b140      	cbz	r0, 800cea4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ce92:	7a03      	ldrb	r3, [r0, #8]
 800ce94:	b933      	cbnz	r3, 800cea4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ce96:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800ce9a:	6803      	ldr	r3, [r0, #0]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cea2:	4718      	bx	r3
 800cea4:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800cea8:	b97b      	cbnz	r3, 800ceca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ceaa:	b170      	cbz	r0, 800ceca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ceac:	7a03      	ldrb	r3, [r0, #8]
 800ceae:	b163      	cbz	r3, 800ceca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ceb0:	4b29      	ldr	r3, [pc, #164]	; (800cf58 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	b110      	cbz	r0, 800cebc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800ceb6:	6803      	ldr	r3, [r0, #0]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	4798      	blx	r3
 800cebc:	6828      	ldr	r0, [r5, #0]
 800cebe:	6803      	ldr	r3, [r0, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	4798      	blx	r3
 800cec4:	2301      	movs	r3, #1
 800cec6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800ceca:	2500      	movs	r5, #0
 800cecc:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800ced0:	42a8      	cmp	r0, r5
 800ced2:	dd0c      	ble.n	800ceee <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800ced4:	1963      	adds	r3, r4, r5
 800ced6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800ceda:	b132      	cbz	r2, 800ceea <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800cedc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800cee0:	4413      	add	r3, r2
 800cee2:	6858      	ldr	r0, [r3, #4]
 800cee4:	6803      	ldr	r3, [r0, #0]
 800cee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cee8:	4798      	blx	r3
 800ceea:	3501      	adds	r5, #1
 800ceec:	e7ee      	b.n	800cecc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800ceee:	2300      	movs	r3, #0
 800cef0:	461a      	mov	r2, r3
 800cef2:	4298      	cmp	r0, r3
 800cef4:	d015      	beq.n	800cf22 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 800cef6:	18e1      	adds	r1, r4, r3
 800cef8:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800cefc:	b16d      	cbz	r5, 800cf1a <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d00a      	beq.n	800cf18 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 800cf02:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800cf06:	4431      	add	r1, r6
 800cf08:	684e      	ldr	r6, [r1, #4]
 800cf0a:	b291      	uxth	r1, r2
 800cf0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800cf10:	604e      	str	r6, [r1, #4]
 800cf12:	18a1      	adds	r1, r4, r2
 800cf14:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800cf18:	3201      	adds	r2, #1
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	e7e9      	b.n	800cef2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800cf1e:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 800cf22:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 800cf26:	4295      	cmp	r5, r2
 800cf28:	dd0d      	ble.n	800cf46 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 800cf2a:	1e6b      	subs	r3, r5, #1
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800cf32:	4618      	mov	r0, r3
 800cf34:	3104      	adds	r1, #4
 800cf36:	4285      	cmp	r5, r0
 800cf38:	ddf1      	ble.n	800cf1e <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 800cf3a:	f851 6f04 	ldr.w	r6, [r1, #4]!
 800cf3e:	3001      	adds	r0, #1
 800cf40:	f841 6c04 	str.w	r6, [r1, #-4]
 800cf44:	e7f7      	b.n	800cf36 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 800cf46:	4b04      	ldr	r3, [pc, #16]	; (800cf58 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	b110      	cbz	r0, 800cf52 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 800cf4c:	6803      	ldr	r3, [r0, #0]
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf50:	e7a5      	b.n	800ce9e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800cf52:	bd70      	pop	{r4, r5, r6, pc}
 800cf54:	2400ae44 	.word	0x2400ae44
 800cf58:	2400ae40 	.word	0x2400ae40

0800cf5c <_ZN8touchgfx11ApplicationD1Ev>:
 800cf5c:	4770      	bx	lr

0800cf5e <_ZN8touchgfx11ApplicationD0Ev>:
 800cf5e:	b510      	push	{r4, lr}
 800cf60:	4604      	mov	r4, r0
 800cf62:	f44f 719c 	mov.w	r1, #312	; 0x138
 800cf66:	f00a fe06 	bl	8017b76 <_ZdlPvj>
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	bd10      	pop	{r4, pc}

0800cf6e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800cf6e:	b510      	push	{r4, lr}
 800cf70:	f9b1 4000 	ldrsh.w	r4, [r1]
 800cf74:	888a      	ldrh	r2, [r1, #4]
 800cf76:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cf7a:	4422      	add	r2, r4
 800cf7c:	b212      	sxth	r2, r2
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	da15      	bge.n	800cfae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cf82:	8882      	ldrh	r2, [r0, #4]
 800cf84:	4413      	add	r3, r2
 800cf86:	b21b      	sxth	r3, r3
 800cf88:	429c      	cmp	r4, r3
 800cf8a:	da10      	bge.n	800cfae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cf8c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800cf90:	88c9      	ldrh	r1, [r1, #6]
 800cf92:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cf96:	4419      	add	r1, r3
 800cf98:	b209      	sxth	r1, r1
 800cf9a:	428a      	cmp	r2, r1
 800cf9c:	da07      	bge.n	800cfae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cf9e:	88c0      	ldrh	r0, [r0, #6]
 800cfa0:	4410      	add	r0, r2
 800cfa2:	b200      	sxth	r0, r0
 800cfa4:	4283      	cmp	r3, r0
 800cfa6:	bfac      	ite	ge
 800cfa8:	2000      	movge	r0, #0
 800cfaa:	2001      	movlt	r0, #1
 800cfac:	bd10      	pop	{r4, pc}
 800cfae:	2000      	movs	r0, #0
 800cfb0:	e7fc      	b.n	800cfac <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800cfb2 <_ZN8touchgfx4Rect10restrictToEss>:
 800cfb2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	b510      	push	{r4, lr}
 800cfba:	da04      	bge.n	800cfc6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800cfbc:	8884      	ldrh	r4, [r0, #4]
 800cfbe:	4423      	add	r3, r4
 800cfc0:	8083      	strh	r3, [r0, #4]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	8003      	strh	r3, [r0, #0]
 800cfc6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cfca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cfce:	1b09      	subs	r1, r1, r4
 800cfd0:	428b      	cmp	r3, r1
 800cfd2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800cfd6:	bfc8      	it	gt
 800cfd8:	8081      	strhgt	r1, [r0, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da04      	bge.n	800cfe8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800cfde:	88c1      	ldrh	r1, [r0, #6]
 800cfe0:	440b      	add	r3, r1
 800cfe2:	80c3      	strh	r3, [r0, #6]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	8043      	strh	r3, [r0, #2]
 800cfe8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800cfec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cff0:	1a52      	subs	r2, r2, r1
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bfc8      	it	gt
 800cff6:	80c2      	strhgt	r2, [r0, #6]
 800cff8:	bd10      	pop	{r4, pc}
	...

0800cffc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800cffc:	4b10      	ldr	r3, [pc, #64]	; (800d040 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800cffe:	b510      	push	{r4, lr}
 800d000:	460c      	mov	r4, r1
 800d002:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d006:	4b0f      	ldr	r3, [pc, #60]	; (800d044 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800d008:	4620      	mov	r0, r4
 800d00a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d00e:	f7ff ffd0 	bl	800cfb2 <_ZN8touchgfx4Rect10restrictToEss>
 800d012:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800d014:	6818      	ldr	r0, [r3, #0]
 800d016:	b190      	cbz	r0, 800d03e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800d018:	6803      	ldr	r3, [r0, #0]
 800d01a:	4621      	mov	r1, r4
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	4798      	blx	r3
 800d020:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	b118      	cbz	r0, 800d02e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800d026:	6803      	ldr	r3, [r0, #0]
 800d028:	4621      	mov	r1, r4
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	4798      	blx	r3
 800d02e:	4b08      	ldr	r3, [pc, #32]	; (800d050 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800d030:	4621      	mov	r1, r4
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	6803      	ldr	r3, [r0, #0]
 800d036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	4718      	bx	r3
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	2400adfa 	.word	0x2400adfa
 800d044:	2400adf8 	.word	0x2400adf8
 800d048:	2400ae40 	.word	0x2400ae40
 800d04c:	2400ae3c 	.word	0x2400ae3c
 800d050:	2400ae04 	.word	0x2400ae04

0800d054 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d056:	4606      	mov	r6, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	460f      	mov	r7, r1
 800d05c:	f7fd ff35 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800d060:	b9e8      	cbnz	r0, 800d09e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d062:	f9b7 5000 	ldrsh.w	r5, [r7]
 800d066:	f9b6 4000 	ldrsh.w	r4, [r6]
 800d06a:	42a5      	cmp	r5, r4
 800d06c:	db17      	blt.n	800d09e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d06e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d072:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800d076:	429a      	cmp	r2, r3
 800d078:	db11      	blt.n	800d09e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d07a:	88b9      	ldrh	r1, [r7, #4]
 800d07c:	440d      	add	r5, r1
 800d07e:	88b1      	ldrh	r1, [r6, #4]
 800d080:	440c      	add	r4, r1
 800d082:	b22d      	sxth	r5, r5
 800d084:	b224      	sxth	r4, r4
 800d086:	42a5      	cmp	r5, r4
 800d088:	dc09      	bgt.n	800d09e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d08a:	88f8      	ldrh	r0, [r7, #6]
 800d08c:	4410      	add	r0, r2
 800d08e:	88f2      	ldrh	r2, [r6, #6]
 800d090:	4413      	add	r3, r2
 800d092:	b200      	sxth	r0, r0
 800d094:	b21b      	sxth	r3, r3
 800d096:	4298      	cmp	r0, r3
 800d098:	bfcc      	ite	gt
 800d09a:	2000      	movgt	r0, #0
 800d09c:	2001      	movle	r0, #1
 800d09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	4608      	mov	r0, r1
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	f7fd ff0f 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0ac:	b978      	cbnz	r0, 800d0ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f7fd ff0b 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0b4:	f9b5 6000 	ldrsh.w	r6, [r5]
 800d0b8:	b150      	cbz	r0, 800d0d0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800d0ba:	8026      	strh	r6, [r4, #0]
 800d0bc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800d0c0:	8063      	strh	r3, [r4, #2]
 800d0c2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800d0c6:	80a3      	strh	r3, [r4, #4]
 800d0c8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d0cc:	80e3      	strh	r3, [r4, #6]
 800d0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d0d4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800d0d8:	42b1      	cmp	r1, r6
 800d0da:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d0de:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800d0e2:	460f      	mov	r7, r1
 800d0e4:	88ed      	ldrh	r5, [r5, #6]
 800d0e6:	bfa8      	it	ge
 800d0e8:	4637      	movge	r7, r6
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	4466      	add	r6, ip
 800d0f0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d0f4:	bfa8      	it	ge
 800d0f6:	4610      	movge	r0, r2
 800d0f8:	442a      	add	r2, r5
 800d0fa:	88e5      	ldrh	r5, [r4, #6]
 800d0fc:	4461      	add	r1, ip
 800d0fe:	b236      	sxth	r6, r6
 800d100:	8027      	strh	r7, [r4, #0]
 800d102:	442b      	add	r3, r5
 800d104:	b209      	sxth	r1, r1
 800d106:	b212      	sxth	r2, r2
 800d108:	8060      	strh	r0, [r4, #2]
 800d10a:	b21b      	sxth	r3, r3
 800d10c:	428e      	cmp	r6, r1
 800d10e:	bfac      	ite	ge
 800d110:	ebc7 0106 	rsbge	r1, r7, r6
 800d114:	ebc7 0101 	rsblt	r1, r7, r1
 800d118:	429a      	cmp	r2, r3
 800d11a:	bfac      	ite	ge
 800d11c:	ebc0 0202 	rsbge	r2, r0, r2
 800d120:	ebc0 0203 	rsblt	r2, r0, r3
 800d124:	80a1      	strh	r1, [r4, #4]
 800d126:	80e2      	strh	r2, [r4, #6]
 800d128:	e7d1      	b.n	800d0ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800d12c <_ZN8touchgfx11Application11getInstanceEv>:
 800d12c:	4b01      	ldr	r3, [pc, #4]	; (800d134 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800d12e:	6818      	ldr	r0, [r3, #0]
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	2400ae50 	.word	0x2400ae50

0800d138 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800d138:	2300      	movs	r3, #0
 800d13a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800d13e:	30a8      	adds	r0, #168	; 0xa8
 800d140:	f820 3c24 	strh.w	r3, [r0, #-36]
 800d144:	f802 3b01 	strb.w	r3, [r2], #1
 800d148:	4282      	cmp	r2, r0
 800d14a:	d1fb      	bne.n	800d144 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800d14c:	4770      	bx	lr

0800d14e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800d14e:	4603      	mov	r3, r0
 800d150:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800d154:	2200      	movs	r2, #0
 800d156:	801a      	strh	r2, [r3, #0]
 800d158:	3308      	adds	r3, #8
 800d15a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800d15e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800d162:	f823 2c02 	strh.w	r2, [r3, #-2]
 800d166:	428b      	cmp	r3, r1
 800d168:	d1f5      	bne.n	800d156 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800d16a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800d16e:	4770      	bx	lr

0800d170 <_ZN8touchgfx11ApplicationC1Ev>:
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	4b19      	ldr	r3, [pc, #100]	; (800d1d8 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800d174:	2500      	movs	r5, #0
 800d176:	4604      	mov	r4, r0
 800d178:	30a8      	adds	r0, #168	; 0xa8
 800d17a:	f840 3ca8 	str.w	r3, [r0, #-168]
 800d17e:	f820 5c24 	strh.w	r5, [r0, #-36]
 800d182:	f7ff ffe4 	bl	800d14e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d186:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800d18a:	f7ff ffe0 	bl	800d14e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d18e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800d192:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800d196:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800d19a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800d19e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800d1a2:	490e      	ldr	r1, [pc, #56]	; (800d1dc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800d1a4:	480e      	ldr	r0, [pc, #56]	; (800d1e0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800d1a6:	f00a fbdd 	bl	8017964 <CRC_Lock>
 800d1aa:	4e0e      	ldr	r6, [pc, #56]	; (800d1e4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800d1ae:	b158      	cbz	r0, 800d1c8 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 800d1b0:	801d      	strh	r5, [r3, #0]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	4a0d      	ldr	r2, [pc, #52]	; (800d1ec <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	6013      	str	r3, [r2, #0]
 800d1ba:	4a0d      	ldr	r2, [pc, #52]	; (800d1f0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800d1bc:	6033      	str	r3, [r6, #0]
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	f7ff ffba 	bl	800d138 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}
 800d1c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1cc:	2002      	movs	r0, #2
 800d1ce:	801a      	strh	r2, [r3, #0]
 800d1d0:	6030      	str	r0, [r6, #0]
 800d1d2:	f001 fa1d 	bl	800e610 <_ZN8touchgfx6Screen4drawEv>
 800d1d6:	e7ec      	b.n	800d1b2 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 800d1d8:	0801a2c4 	.word	0x0801a2c4
 800d1dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800d1e0:	f407a5c2 	.word	0xf407a5c2
 800d1e4:	2400ae40 	.word	0x2400ae40
 800d1e8:	24000050 	.word	0x24000050
 800d1ec:	2400ae50 	.word	0x2400ae50
 800d1f0:	2400ae44 	.word	0x2400ae44

0800d1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800d1f4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	428b      	cmp	r3, r1
 800d1fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800d202:	b510      	push	{r4, lr}
 800d204:	d908      	bls.n	800d218 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800d206:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d20a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	6062      	str	r2, [r4, #4]
 800d218:	bd10      	pop	{r4, pc}
	...

0800d21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	b08f      	sub	sp, #60	; 0x3c
 800d222:	4b94      	ldr	r3, [pc, #592]	; (800d474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800d224:	4683      	mov	fp, r0
 800d226:	ac0a      	add	r4, sp, #40	; 0x28
 800d228:	e884 0006 	stmia.w	r4, {r1, r2}
 800d22c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d230:	4620      	mov	r0, r4
 800d232:	4b91      	ldr	r3, [pc, #580]	; (800d478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 800d234:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d238:	f7ff febb 	bl	800cfb2 <_ZN8touchgfx4Rect10restrictToEss>
 800d23c:	4620      	mov	r0, r4
 800d23e:	f7fd fe44 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800d242:	2800      	cmp	r0, #0
 800d244:	d16a      	bne.n	800d31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d246:	9403      	str	r4, [sp, #12]
 800d248:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800d24c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800d250:	2400      	movs	r4, #0
 800d252:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	36a0      	adds	r6, #160	; 0xa0
 800d25a:	42a5      	cmp	r5, r4
 800d25c:	d00d      	beq.n	800d27a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800d25e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800d262:	9803      	ldr	r0, [sp, #12]
 800d264:	f7ff fef6 	bl	800d054 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d268:	b128      	cbz	r0, 800d276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800d26a:	1e69      	subs	r1, r5, #1
 800d26c:	9801      	ldr	r0, [sp, #4]
 800d26e:	1b09      	subs	r1, r1, r4
 800d270:	b289      	uxth	r1, r1
 800d272:	f7ff ffbf 	bl	800d1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d276:	3401      	adds	r4, #1
 800d278:	e7ef      	b.n	800d25a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 800d27a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800d27e:	1e7b      	subs	r3, r7, #1
 800d280:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800d284:	9704      	str	r7, [sp, #16]
 800d286:	9302      	str	r3, [sp, #8]
 800d288:	2400      	movs	r4, #0
 800d28a:	4655      	mov	r5, sl
 800d28c:	9705      	str	r7, [sp, #20]
 800d28e:	4626      	mov	r6, r4
 800d290:	9b05      	ldr	r3, [sp, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d078      	beq.n	800d388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 800d296:	9903      	ldr	r1, [sp, #12]
 800d298:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800d29c:	f7ff fe67 	bl	800cf6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d2a0:	b360      	cbz	r0, 800d2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d2a2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 800d2a6:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800d2aa:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 800d2ae:	45e6      	cmp	lr, ip
 800d2b0:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800d2b4:	db35      	blt.n	800d322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d2b6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800d2ba:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800d2be:	4472      	add	r2, lr
 800d2c0:	4463      	add	r3, ip
 800d2c2:	b212      	sxth	r2, r2
 800d2c4:	b21b      	sxth	r3, r3
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	dc2b      	bgt.n	800d322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d2ca:	fa1f f288 	uxth.w	r2, r8
 800d2ce:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800d2d2:	45c1      	cmp	r9, r8
 800d2d4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d2d8:	4413      	add	r3, r2
 800d2da:	fa1f fc89 	uxth.w	ip, r9
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	fa0f fe83 	sxth.w	lr, r3
 800d2e4:	db0f      	blt.n	800d306 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800d2e6:	eba3 030c 	sub.w	r3, r3, ip
 800d2ea:	1ac9      	subs	r1, r1, r3
 800d2ec:	b209      	sxth	r1, r1
 800d2ee:	2900      	cmp	r1, #0
 800d2f0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d2f4:	dd12      	ble.n	800d31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d2f6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	9b05      	ldr	r3, [sp, #20]
 800d2fe:	3d08      	subs	r5, #8
 800d300:	3b01      	subs	r3, #1
 800d302:	9305      	str	r3, [sp, #20]
 800d304:	e7c4      	b.n	800d290 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 800d306:	4461      	add	r1, ip
 800d308:	b209      	sxth	r1, r1
 800d30a:	4571      	cmp	r1, lr
 800d30c:	dc3a      	bgt.n	800d384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d30e:	eba2 020c 	sub.w	r2, r2, ip
 800d312:	b212      	sxth	r2, r2
 800d314:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800d318:	2a00      	cmp	r2, #0
 800d31a:	dcee      	bgt.n	800d2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d31c:	b00f      	add	sp, #60	; 0x3c
 800d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d322:	45c1      	cmp	r9, r8
 800d324:	db2e      	blt.n	800d384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d326:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800d32a:	4499      	add	r9, r3
 800d32c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800d330:	4498      	add	r8, r3
 800d332:	fa0f f989 	sxth.w	r9, r9
 800d336:	fa0f f888 	sxth.w	r8, r8
 800d33a:	45c1      	cmp	r9, r8
 800d33c:	dc22      	bgt.n	800d384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d33e:	fa1f f28c 	uxth.w	r2, ip
 800d342:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800d346:	45e6      	cmp	lr, ip
 800d348:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800d34c:	4413      	add	r3, r2
 800d34e:	fa1f f88e 	uxth.w	r8, lr
 800d352:	b29b      	uxth	r3, r3
 800d354:	fa0f f983 	sxth.w	r9, r3
 800d358:	db0a      	blt.n	800d370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 800d35a:	eba3 0308 	sub.w	r3, r3, r8
 800d35e:	1ac9      	subs	r1, r1, r3
 800d360:	b209      	sxth	r1, r1
 800d362:	2900      	cmp	r1, #0
 800d364:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800d368:	ddd8      	ble.n	800d31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d36a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 800d36e:	e7c4      	b.n	800d2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d370:	4441      	add	r1, r8
 800d372:	b209      	sxth	r1, r1
 800d374:	4549      	cmp	r1, r9
 800d376:	dc05      	bgt.n	800d384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d378:	eba2 0208 	sub.w	r2, r2, r8
 800d37c:	b212      	sxth	r2, r2
 800d37e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800d382:	e7c9      	b.n	800d318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800d384:	4606      	mov	r6, r0
 800d386:	e7b9      	b.n	800d2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d388:	2c00      	cmp	r4, #0
 800d38a:	f47f af7d 	bne.w	800d288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 800d38e:	2e00      	cmp	r6, #0
 800d390:	f000 81e1 	beq.w	800d756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d394:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800d398:	4655      	mov	r5, sl
 800d39a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800d39e:	b2b9      	uxth	r1, r7
 800d3a0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800d3a4:	b2b3      	uxth	r3, r6
 800d3a6:	9105      	str	r1, [sp, #20]
 800d3a8:	9805      	ldr	r0, [sp, #20]
 800d3aa:	441a      	add	r2, r3
 800d3ac:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d3b0:	b292      	uxth	r2, r2
 800d3b2:	4401      	add	r1, r0
 800d3b4:	fa0f f882 	sxth.w	r8, r2
 800d3b8:	b289      	uxth	r1, r1
 800d3ba:	9106      	str	r1, [sp, #24]
 800d3bc:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 800d3c0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d3c4:	9b04      	ldr	r3, [sp, #16]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d058      	beq.n	800d47c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 800d3ca:	9903      	ldr	r1, [sp, #12]
 800d3cc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800d3d0:	f7ff fdcd 	bl	800cf6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d3d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d3d8:	b1d8      	cbz	r0, 800d412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d3da:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800d3de:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800d3e2:	4576      	cmp	r6, lr
 800d3e4:	dc26      	bgt.n	800d434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800d3e6:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800d3ea:	44f4      	add	ip, lr
 800d3ec:	fa0f fc8c 	sxth.w	ip, ip
 800d3f0:	45e0      	cmp	r8, ip
 800d3f2:	db1f      	blt.n	800d434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800d3f4:	428f      	cmp	r7, r1
 800d3f6:	fa1f fc81 	uxth.w	ip, r1
 800d3fa:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800d3fe:	dc0f      	bgt.n	800d420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 800d400:	9806      	ldr	r0, [sp, #24]
 800d402:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800d406:	eba0 0c0c 	sub.w	ip, r0, ip
 800d40a:	eba1 010c 	sub.w	r1, r1, ip
 800d40e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800d412:	4620      	mov	r0, r4
 800d414:	9904      	ldr	r1, [sp, #16]
 800d416:	3d08      	subs	r5, #8
 800d418:	4604      	mov	r4, r0
 800d41a:	3901      	subs	r1, #1
 800d41c:	9104      	str	r1, [sp, #16]
 800d41e:	e7cf      	b.n	800d3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 800d420:	4461      	add	r1, ip
 800d422:	b209      	sxth	r1, r1
 800d424:	4549      	cmp	r1, r9
 800d426:	dcf5      	bgt.n	800d414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d428:	9905      	ldr	r1, [sp, #20]
 800d42a:	eba1 0c0c 	sub.w	ip, r1, ip
 800d42e:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800d432:	e7ee      	b.n	800d412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d434:	428f      	cmp	r7, r1
 800d436:	dced      	bgt.n	800d414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d438:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800d43c:	4461      	add	r1, ip
 800d43e:	b209      	sxth	r1, r1
 800d440:	4589      	cmp	r9, r1
 800d442:	dbe7      	blt.n	800d414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d444:	4576      	cmp	r6, lr
 800d446:	fa1f fc8e 	uxth.w	ip, lr
 800d44a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800d44e:	dc08      	bgt.n	800d462 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800d450:	eba2 0c0c 	sub.w	ip, r2, ip
 800d454:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800d458:	eba1 010c 	sub.w	r1, r1, ip
 800d45c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800d460:	e7d7      	b.n	800d412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d462:	4461      	add	r1, ip
 800d464:	b209      	sxth	r1, r1
 800d466:	4588      	cmp	r8, r1
 800d468:	dbd4      	blt.n	800d414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d46a:	eba3 0c0c 	sub.w	ip, r3, ip
 800d46e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800d472:	e7ce      	b.n	800d412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d474:	2400adfa 	.word	0x2400adfa
 800d478:	2400adf8 	.word	0x2400adf8
 800d47c:	2c00      	cmp	r4, #0
 800d47e:	f000 816a 	beq.w	800d756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d482:	9b02      	ldr	r3, [sp, #8]
 800d484:	3301      	adds	r3, #1
 800d486:	f000 8166 	beq.w	800d756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d48a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800d48e:	9803      	ldr	r0, [sp, #12]
 800d490:	4621      	mov	r1, r4
 800d492:	f7ff fddf 	bl	800d054 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d496:	b120      	cbz	r0, 800d4a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 800d498:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d49c:	9801      	ldr	r0, [sp, #4]
 800d49e:	f7ff fea9 	bl	800d1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d4a2:	9903      	ldr	r1, [sp, #12]
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f7ff fd62 	bl	800cf6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	f000 809b 	beq.w	800d5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800d4b0:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 800d4b4:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 800d4b8:	b281      	uxth	r1, r0
 800d4ba:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 800d4be:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c0:	eb01 0c03 	add.w	ip, r1, r3
 800d4c4:	b2ab      	uxth	r3, r5
 800d4c6:	4285      	cmp	r5, r0
 800d4c8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 800d4cc:	fa1f f98c 	uxth.w	r9, ip
 800d4d0:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800d4d4:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 800d4d8:	eb03 040c 	add.w	r4, r3, ip
 800d4dc:	b2a4      	uxth	r4, r4
 800d4de:	9405      	str	r4, [sp, #20]
 800d4e0:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800d4e4:	9404      	str	r4, [sp, #16]
 800d4e6:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 800d4ea:	f340 809a 	ble.w	800d622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 800d4ee:	1a5b      	subs	r3, r3, r1
 800d4f0:	4596      	cmp	lr, r2
 800d4f2:	fa0f f589 	sxth.w	r5, r9
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	b21e      	sxth	r6, r3
 800d4fa:	dd2e      	ble.n	800d55a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 800d4fc:	9f02      	ldr	r7, [sp, #8]
 800d4fe:	fa1f fe8e 	uxth.w	lr, lr
 800d502:	b292      	uxth	r2, r2
 800d504:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800d508:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d50c:	9f04      	ldr	r7, [sp, #16]
 800d50e:	ebae 0102 	sub.w	r1, lr, r2
 800d512:	4486      	add	lr, r0
 800d514:	1b7f      	subs	r7, r7, r5
 800d516:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 800d51a:	b289      	uxth	r1, r1
 800d51c:	442a      	add	r2, r5
 800d51e:	fa0f fe8e 	sxth.w	lr, lr
 800d522:	b20c      	sxth	r4, r1
 800d524:	b212      	sxth	r2, r2
 800d526:	4367      	muls	r7, r4
 800d528:	ebae 0202 	sub.w	r2, lr, r2
 800d52c:	4372      	muls	r2, r6
 800d52e:	4297      	cmp	r7, r2
 800d530:	db09      	blt.n	800d546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 800d532:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 800d536:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800d53a:	449c      	add	ip, r3
 800d53c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d540:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800d544:	e680      	b.n	800d248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d546:	4401      	add	r1, r0
 800d548:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800d54c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 800d550:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d554:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d558:	e676      	b.n	800d248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d55a:	9f04      	ldr	r7, [sp, #16]
 800d55c:	42bd      	cmp	r5, r7
 800d55e:	da27      	bge.n	800d5b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 800d560:	9902      	ldr	r1, [sp, #8]
 800d562:	1b7f      	subs	r7, r7, r5
 800d564:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 800d568:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800d56c:	eb04 010e 	add.w	r1, r4, lr
 800d570:	fa1f f881 	uxth.w	r8, r1
 800d574:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 800d578:	4411      	add	r1, r2
 800d57a:	fa0f f988 	sxth.w	r9, r8
 800d57e:	eba2 020e 	sub.w	r2, r2, lr
 800d582:	eba1 0108 	sub.w	r1, r1, r8
 800d586:	4372      	muls	r2, r6
 800d588:	b289      	uxth	r1, r1
 800d58a:	fa0f f881 	sxth.w	r8, r1
 800d58e:	fb08 f707 	mul.w	r7, r8, r7
 800d592:	42ba      	cmp	r2, r7
 800d594:	dc06      	bgt.n	800d5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d596:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 800d59a:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 800d59e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 800d5a2:	e7ca      	b.n	800d53a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d5a4:	4421      	add	r1, r4
 800d5a6:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 800d5aa:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d5ae:	e64b      	b.n	800d248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d5b0:	9d05      	ldr	r5, [sp, #20]
 800d5b2:	2c06      	cmp	r4, #6
 800d5b4:	eba9 0505 	sub.w	r5, r9, r5
 800d5b8:	b2ad      	uxth	r5, r5
 800d5ba:	fa0f fe85 	sxth.w	lr, r5
 800d5be:	d818      	bhi.n	800d5f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 800d5c0:	9b04      	ldr	r3, [sp, #16]
 800d5c2:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 800d5c6:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800d5ca:	1c63      	adds	r3, r4, #1
 800d5cc:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 800d5d0:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800d5d4:	9b01      	ldr	r3, [sp, #4]
 800d5d6:	9d01      	ldr	r5, [sp, #4]
 800d5d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5dc:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 800d5e0:	805a      	strh	r2, [r3, #2]
 800d5e2:	809e      	strh	r6, [r3, #4]
 800d5e4:	80d9      	strh	r1, [r3, #6]
 800d5e6:	9b02      	ldr	r3, [sp, #8]
 800d5e8:	f1aa 0a08 	sub.w	sl, sl, #8
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	9302      	str	r3, [sp, #8]
 800d5f0:	e747      	b.n	800d482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 800d5f2:	9a02      	ldr	r2, [sp, #8]
 800d5f4:	45b6      	cmp	lr, r6
 800d5f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d5fa:	db0d      	blt.n	800d618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 800d5fc:	449c      	add	ip, r3
 800d5fe:	445a      	add	r2, fp
 800d600:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 800d604:	fa1f fc8c 	uxth.w	ip, ip
 800d608:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 800d60c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800d610:	448c      	add	ip, r1
 800d612:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 800d616:	e617      	b.n	800d248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d618:	445a      	add	r2, fp
 800d61a:	44ac      	add	ip, r5
 800d61c:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 800d620:	e78e      	b.n	800d540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d622:	fa1f f18e 	uxth.w	r1, lr
 800d626:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800d62a:	b293      	uxth	r3, r2
 800d62c:	4596      	cmp	lr, r2
 800d62e:	eb01 0806 	add.w	r8, r1, r6
 800d632:	9306      	str	r3, [sp, #24]
 800d634:	fa1f f888 	uxth.w	r8, r8
 800d638:	9f06      	ldr	r7, [sp, #24]
 800d63a:	fa0f f388 	sxth.w	r3, r8
 800d63e:	9307      	str	r3, [sp, #28]
 800d640:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 800d644:	443b      	add	r3, r7
 800d646:	b29b      	uxth	r3, r3
 800d648:	9308      	str	r3, [sp, #32]
 800d64a:	da25      	bge.n	800d698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 800d64c:	9905      	ldr	r1, [sp, #20]
 800d64e:	eba3 0308 	sub.w	r3, r3, r8
 800d652:	eba2 020e 	sub.w	r2, r2, lr
 800d656:	1b40      	subs	r0, r0, r5
 800d658:	eba9 0401 	sub.w	r4, r9, r1
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	b2a4      	uxth	r4, r4
 800d660:	b219      	sxth	r1, r3
 800d662:	fa0f f984 	sxth.w	r9, r4
 800d666:	4348      	muls	r0, r1
 800d668:	fb09 f202 	mul.w	r2, r9, r2
 800d66c:	4282      	cmp	r2, r0
 800d66e:	9a02      	ldr	r2, [sp, #8]
 800d670:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d674:	445a      	add	r2, fp
 800d676:	dc06      	bgt.n	800d686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800d678:	9b07      	ldr	r3, [sp, #28]
 800d67a:	44a4      	add	ip, r4
 800d67c:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 800d680:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 800d684:	e75c      	b.n	800d540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d686:	9904      	ldr	r1, [sp, #16]
 800d688:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 800d68c:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 800d690:	4433      	add	r3, r6
 800d692:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800d696:	e5d7      	b.n	800d248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d698:	9f06      	ldr	r7, [sp, #24]
 800d69a:	9b04      	ldr	r3, [sp, #16]
 800d69c:	1bc9      	subs	r1, r1, r7
 800d69e:	fa0f f789 	sxth.w	r7, r9
 800d6a2:	b289      	uxth	r1, r1
 800d6a4:	429f      	cmp	r7, r3
 800d6a6:	fa0f fe81 	sxth.w	lr, r1
 800d6aa:	dd22      	ble.n	800d6f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 800d6ac:	9a05      	ldr	r2, [sp, #20]
 800d6ae:	1b40      	subs	r0, r0, r5
 800d6b0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d6b4:	eba9 0202 	sub.w	r2, r9, r2
 800d6b8:	9d07      	ldr	r5, [sp, #28]
 800d6ba:	fb0e f000 	mul.w	r0, lr, r0
 800d6be:	b292      	uxth	r2, r2
 800d6c0:	eba5 0a03 	sub.w	sl, r5, r3
 800d6c4:	9b02      	ldr	r3, [sp, #8]
 800d6c6:	b214      	sxth	r4, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	fb04 fa0a 	mul.w	sl, r4, sl
 800d6ce:	445b      	add	r3, fp
 800d6d0:	4550      	cmp	r0, sl
 800d6d2:	db03      	blt.n	800d6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 800d6d4:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 800d6d8:	4494      	add	ip, r2
 800d6da:	e731      	b.n	800d540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d6dc:	9a04      	ldr	r2, [sp, #16]
 800d6de:	4431      	add	r1, r6
 800d6e0:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 800d6e4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800d6e8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800d6ec:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d6f0:	e75b      	b.n	800d5aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 800d6f2:	9b08      	ldr	r3, [sp, #32]
 800d6f4:	2c06      	cmp	r4, #6
 800d6f6:	eba3 0308 	sub.w	r3, r3, r8
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	b21d      	sxth	r5, r3
 800d6fe:	d813      	bhi.n	800d728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 800d700:	9b07      	ldr	r3, [sp, #28]
 800d702:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 800d706:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800d70a:	1c63      	adds	r3, r4, #1
 800d70c:	9901      	ldr	r1, [sp, #4]
 800d70e:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800d712:	9b01      	ldr	r3, [sp, #4]
 800d714:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 800d718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d71c:	805a      	strh	r2, [r3, #2]
 800d71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d720:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d724:	809a      	strh	r2, [r3, #4]
 800d726:	e75e      	b.n	800d5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800d728:	9802      	ldr	r0, [sp, #8]
 800d72a:	4575      	cmp	r5, lr
 800d72c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800d730:	db0d      	blt.n	800d74e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 800d732:	4431      	add	r1, r6
 800d734:	9b06      	ldr	r3, [sp, #24]
 800d736:	4458      	add	r0, fp
 800d738:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800d73c:	b289      	uxth	r1, r1
 800d73e:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 800d742:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d746:	4419      	add	r1, r3
 800d748:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 800d74c:	e57c      	b.n	800d248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d74e:	4458      	add	r0, fp
 800d750:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 800d754:	e79c      	b.n	800d690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 800d756:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 800d75a:	2e07      	cmp	r6, #7
 800d75c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d760:	d812      	bhi.n	800d788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 800d762:	1c75      	adds	r5, r6, #1
 800d764:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800d768:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800d76c:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 800d770:	9d01      	ldr	r5, [sp, #4]
 800d772:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800d776:	442c      	add	r4, r5
 800d778:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800d77c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d780:	8061      	strh	r1, [r4, #2]
 800d782:	80a2      	strh	r2, [r4, #4]
 800d784:	80e3      	strh	r3, [r4, #6]
 800d786:	e5c9      	b.n	800d31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d788:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800d78c:	3e01      	subs	r6, #1
 800d78e:	445c      	add	r4, fp
 800d790:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800d794:	f04f 37ff 	mov.w	r7, #4294967295
 800d798:	2500      	movs	r5, #0
 800d79a:	9305      	str	r3, [sp, #20]
 800d79c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 800d7a0:	1e72      	subs	r2, r6, #1
 800d7a2:	9302      	str	r3, [sp, #8]
 800d7a4:	4691      	mov	r9, r2
 800d7a6:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 800d7aa:	9304      	str	r3, [sp, #16]
 800d7ac:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800d7b0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d7b4:	6818      	ldr	r0, [r3, #0]
 800d7b6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d7ba:	9207      	str	r2, [sp, #28]
 800d7bc:	bf16      	itet	ne
 800d7be:	9905      	ldrne	r1, [sp, #20]
 800d7c0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d7c4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d7c8:	9306      	str	r3, [sp, #24]
 800d7ca:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d7ce:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d7d2:	fb18 f801 	smulbb	r8, r8, r1
 800d7d6:	6859      	ldr	r1, [r3, #4]
 800d7d8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d7dc:	4671      	mov	r1, lr
 800d7de:	a80c      	add	r0, sp, #48	; 0x30
 800d7e0:	f7ff fc5e 	bl	800d0a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d7e4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800d7e8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d7ec:	f04f 0c08 	mov.w	ip, #8
 800d7f0:	9b04      	ldr	r3, [sp, #16]
 800d7f2:	9a02      	ldr	r2, [sp, #8]
 800d7f4:	fb10 f001 	smulbb	r0, r0, r1
 800d7f8:	fb02 8803 	mla	r8, r2, r3, r8
 800d7fc:	eba0 0108 	sub.w	r1, r0, r8
 800d800:	fb90 f0fc 	sdiv	r0, r0, ip
 800d804:	4288      	cmp	r0, r1
 800d806:	dc20      	bgt.n	800d84a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800d808:	4551      	cmp	r1, sl
 800d80a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d80e:	da03      	bge.n	800d818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d810:	b1d9      	cbz	r1, 800d84a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800d812:	468a      	mov	sl, r1
 800d814:	464f      	mov	r7, r9
 800d816:	4635      	mov	r5, r6
 800d818:	f109 39ff 	add.w	r9, r9, #4294967295
 800d81c:	f119 0f02 	cmn.w	r9, #2
 800d820:	d1c6      	bne.n	800d7b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d822:	4616      	mov	r6, r2
 800d824:	3201      	adds	r2, #1
 800d826:	f1a4 0408 	sub.w	r4, r4, #8
 800d82a:	d1b7      	bne.n	800d79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 800d82c:	9b01      	ldr	r3, [sp, #4]
 800d82e:	b2ac      	uxth	r4, r5
 800d830:	00ed      	lsls	r5, r5, #3
 800d832:	1958      	adds	r0, r3, r5
 800d834:	1c7b      	adds	r3, r7, #1
 800d836:	d10b      	bne.n	800d850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 800d838:	4601      	mov	r1, r0
 800d83a:	9803      	ldr	r0, [sp, #12]
 800d83c:	f7ff fc30 	bl	800d0a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d840:	4621      	mov	r1, r4
 800d842:	9801      	ldr	r0, [sp, #4]
 800d844:	f7ff fcd6 	bl	800d1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d848:	e4fe      	b.n	800d248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d84a:	464f      	mov	r7, r9
 800d84c:	4635      	mov	r5, r6
 800d84e:	e7ed      	b.n	800d82c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	00ff      	lsls	r7, r7, #3
 800d854:	445d      	add	r5, fp
 800d856:	19d9      	adds	r1, r3, r7
 800d858:	445f      	add	r7, fp
 800d85a:	f7ff fc21 	bl	800d0a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d85e:	9b03      	ldr	r3, [sp, #12]
 800d860:	cb03      	ldmia	r3!, {r0, r1}
 800d862:	9b03      	ldr	r3, [sp, #12]
 800d864:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d868:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800d86c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 800d870:	6869      	ldr	r1, [r5, #4]
 800d872:	c303      	stmia	r3!, {r0, r1}
 800d874:	e7e4      	b.n	800d840 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d876:	bf00      	nop

0800d878 <_ZN8touchgfx11Application10invalidateEv>:
 800d878:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800d87a:	b082      	sub	sp, #8
 800d87c:	2100      	movs	r1, #0
 800d87e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d882:	4b08      	ldr	r3, [pc, #32]	; (800d8a4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800d884:	9100      	str	r1, [sp, #0]
 800d886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d88a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d88e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d892:	ab02      	add	r3, sp, #8
 800d894:	e913 0006 	ldmdb	r3, {r1, r2}
 800d898:	b002      	add	sp, #8
 800d89a:	f7ff bcbf 	b.w	800d21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d89e:	bf00      	nop
 800d8a0:	2400adf8 	.word	0x2400adf8
 800d8a4:	2400adfa 	.word	0x2400adfa

0800d8a8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800d8b0:	b09b      	sub	sp, #108	; 0x6c
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f7fd fb08 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	b940      	cbnz	r0, 800d8d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800d8be:	4620      	mov	r0, r4
 800d8c0:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d8c4:	f7ff fcaa 	bl	800d21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d8c8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800d8cc:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800d8d0:	4bc8      	ldr	r3, [pc, #800]	; (800dbf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d03e      	beq.n	800d956 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800d8d8:	4dc7      	ldr	r5, [pc, #796]	; (800dbf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d8da:	4628      	mov	r0, r5
 800d8dc:	f7fd faf5 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8e0:	4606      	mov	r6, r0
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d137      	bne.n	800d956 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7ff fa02 	bl	800ccf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d8ec:	6829      	ldr	r1, [r5, #0]
 800d8ee:	686a      	ldr	r2, [r5, #4]
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f7ff fc93 	bl	800d21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d8f6:	802e      	strh	r6, [r5, #0]
 800d8f8:	806e      	strh	r6, [r5, #2]
 800d8fa:	80ae      	strh	r6, [r5, #4]
 800d8fc:	80ee      	strh	r6, [r5, #6]
 800d8fe:	ae09      	add	r6, sp, #36	; 0x24
 800d900:	4630      	mov	r0, r6
 800d902:	f7ff fc24 	bl	800d14e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d906:	4abd      	ldr	r2, [pc, #756]	; (800dbfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800d908:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800d90c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800d910:	8815      	ldrh	r5, [r2, #0]
 800d912:	9202      	str	r2, [sp, #8]
 800d914:	462b      	mov	r3, r5
 800d916:	429f      	cmp	r7, r3
 800d918:	d924      	bls.n	800d964 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800d91a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800d91e:	2907      	cmp	r1, #7
 800d920:	d816      	bhi.n	800d950 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800d922:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d926:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800d92a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800d92e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d932:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d936:	1c4a      	adds	r2, r1, #1
 800d938:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800d93c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800d940:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800d944:	f8a2 9002 	strh.w	r9, [r2, #2]
 800d948:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d94c:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d950:	3301      	adds	r3, #1
 800d952:	b29b      	uxth	r3, r3
 800d954:	e7df      	b.n	800d916 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800d956:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1cf      	bne.n	800d8fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800d95e:	b01b      	add	sp, #108	; 0x6c
 800d960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d964:	462f      	mov	r7, r5
 800d966:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800d96a:	42bb      	cmp	r3, r7
 800d96c:	d90b      	bls.n	800d986 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800d96e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800d972:	3701      	adds	r7, #1
 800d974:	4620      	mov	r0, r4
 800d976:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800d97a:	b2bf      	uxth	r7, r7
 800d97c:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800d980:	f7ff fc4c 	bl	800d21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d984:	e7ef      	b.n	800d966 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800d986:	4a9e      	ldr	r2, [pc, #632]	; (800dc00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800d988:	6813      	ldr	r3, [r2, #0]
 800d98a:	4690      	mov	r8, r2
 800d98c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d990:	2b01      	cmp	r3, #1
 800d992:	f040 80e4 	bne.w	800db5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d996:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800d99a:	4629      	mov	r1, r5
 800d99c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800d9a0:	2500      	movs	r5, #0
 800d9a2:	33aa      	adds	r3, #170	; 0xaa
 800d9a4:	428f      	cmp	r7, r1
 800d9a6:	f103 0308 	add.w	r3, r3, #8
 800d9aa:	dd0a      	ble.n	800d9c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800d9ac:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800d9b0:	3101      	adds	r1, #1
 800d9b2:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800d9b6:	4402      	add	r2, r0
 800d9b8:	b212      	sxth	r2, r2
 800d9ba:	4295      	cmp	r5, r2
 800d9bc:	bfb8      	it	lt
 800d9be:	4615      	movlt	r5, r2
 800d9c0:	e7f0      	b.n	800d9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800d9c2:	4b90      	ldr	r3, [pc, #576]	; (800dc04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800d9c4:	f8df b238 	ldr.w	fp, [pc, #568]	; 800dc00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	46d8      	mov	r8, fp
 800d9cc:	2b0f      	cmp	r3, #15
 800d9ce:	bf8c      	ite	hi
 800d9d0:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800d9d4:	f04f 0a01 	movls.w	sl, #1
 800d9d8:	2300      	movs	r3, #0
 800d9da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d9de:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800d9e2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d9e6:	4438      	add	r0, r7
 800d9e8:	b207      	sxth	r7, r0
 800d9ea:	f8db 0000 	ldr.w	r0, [fp]
 800d9ee:	42bd      	cmp	r5, r7
 800d9f0:	6803      	ldr	r3, [r0, #0]
 800d9f2:	f340 8084 	ble.w	800dafe <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 800d9f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d9fa:	4798      	blx	r3
 800d9fc:	eb07 030a 	add.w	r3, r7, sl
 800da00:	4298      	cmp	r0, r3
 800da02:	da07      	bge.n	800da14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800da04:	4285      	cmp	r5, r0
 800da06:	dd05      	ble.n	800da14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800da08:	4287      	cmp	r7, r0
 800da0a:	dd6d      	ble.n	800dae8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800da0c:	2f00      	cmp	r7, #0
 800da0e:	dd6b      	ble.n	800dae8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800da10:	4628      	mov	r0, r5
 800da12:	e004      	b.n	800da1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 800da14:	4287      	cmp	r7, r0
 800da16:	dcfb      	bgt.n	800da10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 800da18:	42a8      	cmp	r0, r5
 800da1a:	bfa8      	it	ge
 800da1c:	4628      	movge	r0, r5
 800da1e:	4b7a      	ldr	r3, [pc, #488]	; (800dc08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800da20:	1bc0      	subs	r0, r0, r7
 800da22:	2200      	movs	r2, #0
 800da24:	f8ad 7016 	strh.w	r7, [sp, #22]
 800da28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800da30:	f8ad 3018 	strh.w	r3, [sp, #24]
 800da34:	9b02      	ldr	r3, [sp, #8]
 800da36:	f8ad 001a 	strh.w	r0, [sp, #26]
 800da3a:	881f      	ldrh	r7, [r3, #0]
 800da3c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800da40:	42bb      	cmp	r3, r7
 800da42:	d9cc      	bls.n	800d9de <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800da44:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800da48:	ab07      	add	r3, sp, #28
 800da4a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800da4e:	6851      	ldr	r1, [r2, #4]
 800da50:	c303      	stmia	r3!, {r0, r1}
 800da52:	a905      	add	r1, sp, #20
 800da54:	a807      	add	r0, sp, #28
 800da56:	f7ff fa8a 	bl	800cf6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d04c      	beq.n	800daf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 800da5e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800da62:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800da66:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800da6a:	4686      	mov	lr, r0
 800da6c:	4290      	cmp	r0, r2
 800da6e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800da72:	4448      	add	r0, r9
 800da74:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800da78:	bfb8      	it	lt
 800da7a:	4696      	movlt	lr, r2
 800da7c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800da80:	444a      	add	r2, r9
 800da82:	b280      	uxth	r0, r0
 800da84:	4299      	cmp	r1, r3
 800da86:	468c      	mov	ip, r1
 800da88:	b292      	uxth	r2, r2
 800da8a:	9303      	str	r3, [sp, #12]
 800da8c:	bfb8      	it	lt
 800da8e:	469c      	movlt	ip, r3
 800da90:	b203      	sxth	r3, r0
 800da92:	fa0f f982 	sxth.w	r9, r2
 800da96:	f8ad e01c 	strh.w	lr, [sp, #28]
 800da9a:	f8ad c01e 	strh.w	ip, [sp, #30]
 800da9e:	454b      	cmp	r3, r9
 800daa0:	bfb8      	it	lt
 800daa2:	4602      	movlt	r2, r0
 800daa4:	9b03      	ldr	r3, [sp, #12]
 800daa6:	eba2 020e 	sub.w	r2, r2, lr
 800daaa:	f8ad 2020 	strh.w	r2, [sp, #32]
 800daae:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800dab2:	4411      	add	r1, r2
 800dab4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800dab8:	4413      	add	r3, r2
 800daba:	b289      	uxth	r1, r1
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	b208      	sxth	r0, r1
 800dac0:	b21a      	sxth	r2, r3
 800dac2:	4290      	cmp	r0, r2
 800dac4:	bfb8      	it	lt
 800dac6:	460b      	movlt	r3, r1
 800dac8:	eba3 030c 	sub.w	r3, r3, ip
 800dacc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800dad0:	a807      	add	r0, sp, #28
 800dad2:	f7fd f9fa 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800dad6:	b920      	cbnz	r0, 800dae2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	a907      	add	r1, sp, #28
 800dadc:	4620      	mov	r0, r4
 800dade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae0:	4798      	blx	r3
 800dae2:	3701      	adds	r7, #1
 800dae4:	b2bf      	uxth	r7, r7
 800dae6:	e7a9      	b.n	800da3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 800dae8:	f8d8 0000 	ldr.w	r0, [r8]
 800daec:	2101      	movs	r1, #1
 800daee:	6803      	ldr	r3, [r0, #0]
 800daf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800daf4:	4798      	blx	r3
 800daf6:	e772      	b.n	800d9de <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800daf8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800dafc:	e7e8      	b.n	800dad0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 800dafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db00:	4798      	blx	r3
 800db02:	4b42      	ldr	r3, [pc, #264]	; (800dc0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	f43f af29 	beq.w	800d95e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800db0c:	2300      	movs	r3, #0
 800db0e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800db12:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800db16:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 800db1a:	9b02      	ldr	r3, [sp, #8]
 800db1c:	881b      	ldrh	r3, [r3, #0]
 800db1e:	429d      	cmp	r5, r3
 800db20:	f67f af1d 	bls.w	800d95e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800db24:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 800db28:	2907      	cmp	r1, #7
 800db2a:	d815      	bhi.n	800db58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800db2c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800db30:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800db34:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800db38:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800db3c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800db40:	1c4a      	adds	r2, r1, #1
 800db42:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 800db46:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800db4a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800db4e:	f8a2 e002 	strh.w	lr, [r2, #2]
 800db52:	f8a2 c004 	strh.w	ip, [r2, #4]
 800db56:	80d7      	strh	r7, [r2, #6]
 800db58:	3301      	adds	r3, #1
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	e7df      	b.n	800db1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 800db5e:	2b02      	cmp	r3, #2
 800db60:	f040 8135 	bne.w	800ddce <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800db64:	4b2a      	ldr	r3, [pc, #168]	; (800dc10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800db66:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	f000 809c 	beq.w	800dcaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800db72:	9b02      	ldr	r3, [sp, #8]
 800db74:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 800db78:	f8b3 b000 	ldrh.w	fp, [r3]
 800db7c:	f10b 0b01 	add.w	fp, fp, #1
 800db80:	fa1f fb8b 	uxth.w	fp, fp
 800db84:	2a00      	cmp	r2, #0
 800db86:	d0bc      	beq.n	800db02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800db88:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800db8c:	4659      	mov	r1, fp
 800db8e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800db92:	f04f 0800 	mov.w	r8, #0
 800db96:	441d      	add	r5, r3
 800db98:	b22d      	sxth	r5, r5
 800db9a:	b28b      	uxth	r3, r1
 800db9c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800dba0:	429a      	cmp	r2, r3
 800dba2:	f240 80c0 	bls.w	800dd26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 800dba6:	4427      	add	r7, r4
 800dba8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800dbac:	4608      	mov	r0, r1
 800dbae:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800dbb2:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 800dbb6:	4563      	cmp	r3, ip
 800dbb8:	f340 80a2 	ble.w	800dd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800dbbc:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 800dbc0:	4465      	add	r5, ip
 800dbc2:	b22d      	sxth	r5, r5
 800dbc4:	429d      	cmp	r5, r3
 800dbc6:	bfa8      	it	ge
 800dbc8:	461d      	movge	r5, r3
 800dbca:	3101      	adds	r1, #1
 800dbcc:	4680      	mov	r8, r0
 800dbce:	e7e4      	b.n	800db9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 800dbd0:	d10b      	bne.n	800dbea <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 800dbd2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800dbd6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800dbda:	458c      	cmp	ip, r1
 800dbdc:	bfb4      	ite	lt
 800dbde:	469c      	movlt	ip, r3
 800dbe0:	46bc      	movge	ip, r7
 800dbe2:	4572      	cmp	r2, lr
 800dbe4:	bfb8      	it	lt
 800dbe6:	4672      	movlt	r2, lr
 800dbe8:	e087      	b.n	800dcfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800dbea:	428a      	cmp	r2, r1
 800dbec:	46bc      	mov	ip, r7
 800dbee:	bfb8      	it	lt
 800dbf0:	460a      	movlt	r2, r1
 800dbf2:	e082      	b.n	800dcfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800dbf4:	2400ae3c 	.word	0x2400ae3c
 800dbf8:	2400ae48 	.word	0x2400ae48
 800dbfc:	24000050 	.word	0x24000050
 800dc00:	2400ae04 	.word	0x2400ae04
 800dc04:	2400adfa 	.word	0x2400adfa
 800dc08:	2400adf8 	.word	0x2400adf8
 800dc0c:	2400ae02 	.word	0x2400ae02
 800dc10:	2400adfc 	.word	0x2400adfc
 800dc14:	1961      	adds	r1, r4, r5
 800dc16:	ab07      	add	r3, sp, #28
 800dc18:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800dc1c:	6849      	ldr	r1, [r1, #4]
 800dc1e:	c303      	stmia	r3!, {r0, r1}
 800dc20:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800dc24:	a807      	add	r0, sp, #28
 800dc26:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc2a:	2b13      	cmp	r3, #19
 800dc2c:	440b      	add	r3, r1
 800dc2e:	bfd8      	it	le
 800dc30:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800dc34:	1a9b      	subs	r3, r3, r2
 800dc36:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dc3a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dc3e:	f7ff f871 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dc42:	a807      	add	r0, sp, #28
 800dc44:	f7fd f941 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc48:	bb78      	cbnz	r0, 800dcaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800dc4a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800dc4e:	4425      	add	r5, r4
 800dc50:	f8d8 0000 	ldr.w	r0, [r8]
 800dc54:	f1bc 0f14 	cmp.w	ip, #20
 800dc58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dc5c:	f8d0 e000 	ldr.w	lr, [r0]
 800dc60:	bfa8      	it	ge
 800dc62:	f04f 0c14 	movge.w	ip, #20
 800dc66:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dc6a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc6e:	fa1f fc8c 	uxth.w	ip, ip
 800dc72:	f8cd c000 	str.w	ip, [sp]
 800dc76:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800dc7a:	47d0      	blx	sl
 800dc7c:	4682      	mov	sl, r0
 800dc7e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800dc82:	a807      	add	r0, sp, #28
 800dc84:	f7ff f834 	bl	800ccf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	a907      	add	r1, sp, #28
 800dc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc90:	4798      	blx	r3
 800dc92:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800dc96:	eba0 000a 	sub.w	r0, r0, sl
 800dc9a:	b200      	sxth	r0, r0
 800dc9c:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800dca0:	b918      	cbnz	r0, 800dcaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800dca2:	b2b9      	uxth	r1, r7
 800dca4:	4648      	mov	r0, r9
 800dca6:	f7ff faa5 	bl	800d1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800dcaa:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800dcae:	f1bb 0f00 	cmp.w	fp, #0
 800dcb2:	f43f af26 	beq.w	800db02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800dcb6:	9b02      	ldr	r3, [sp, #8]
 800dcb8:	2700      	movs	r7, #0
 800dcba:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	b299      	uxth	r1, r3
 800dcc6:	00fd      	lsls	r5, r7, #3
 800dcc8:	458b      	cmp	fp, r1
 800dcca:	d9a3      	bls.n	800dc14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 800dccc:	4425      	add	r5, r4
 800dcce:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800dcd2:	469c      	mov	ip, r3
 800dcd4:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800dcd8:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800dcdc:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800dce0:	4408      	add	r0, r1
 800dce2:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800dce6:	4471      	add	r1, lr
 800dce8:	b200      	sxth	r0, r0
 800dcea:	b209      	sxth	r1, r1
 800dcec:	4288      	cmp	r0, r1
 800dcee:	f6bf af6f 	bge.w	800dbd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 800dcf2:	4586      	cmp	lr, r0
 800dcf4:	4672      	mov	r2, lr
 800dcf6:	bfb8      	it	lt
 800dcf8:	4602      	movlt	r2, r0
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	4667      	mov	r7, ip
 800dcfe:	e7e1      	b.n	800dcc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 800dd00:	d10c      	bne.n	800dd1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 800dd02:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 800dd06:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 800dd0a:	4287      	cmp	r7, r0
 800dd0c:	bfb4      	ite	lt
 800dd0e:	4608      	movlt	r0, r1
 800dd10:	4640      	movge	r0, r8
 800dd12:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 800dd16:	443b      	add	r3, r7
 800dd18:	b21b      	sxth	r3, r3
 800dd1a:	e753      	b.n	800dbc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800dd1c:	4565      	cmp	r5, ip
 800dd1e:	4640      	mov	r0, r8
 800dd20:	bfa8      	it	ge
 800dd22:	4665      	movge	r5, ip
 800dd24:	e751      	b.n	800dbca <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800dd26:	eb09 0007 	add.w	r0, r9, r7
 800dd2a:	4427      	add	r7, r4
 800dd2c:	9203      	str	r2, [sp, #12]
 800dd2e:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 800dd32:	f1ba 0f13 	cmp.w	sl, #19
 800dd36:	bfde      	ittt	le
 800dd38:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 800dd3c:	4455      	addle	r5, sl
 800dd3e:	b22d      	sxthle	r5, r5
 800dd40:	f7fd f8c3 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd44:	9a03      	ldr	r2, [sp, #12]
 800dd46:	2800      	cmp	r0, #0
 800dd48:	f47f af1c 	bne.w	800db84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 800dd4c:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 800dd50:	fa1f fa8a 	uxth.w	sl, sl
 800dd54:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800dd58:	1aad      	subs	r5, r5, r2
 800dd5a:	4829      	ldr	r0, [pc, #164]	; (800de00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 800dd5c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 800dd60:	2d14      	cmp	r5, #20
 800dd62:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800dd66:	6800      	ldr	r0, [r0, #0]
 800dd68:	bfa8      	it	ge
 800dd6a:	2514      	movge	r5, #20
 800dd6c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dd70:	f8ad 201e 	strh.w	r2, [sp, #30]
 800dd74:	b289      	uxth	r1, r1
 800dd76:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dd7a:	b2ad      	uxth	r5, r5
 800dd7c:	f8d0 c000 	ldr.w	ip, [r0]
 800dd80:	b292      	uxth	r2, r2
 800dd82:	4555      	cmp	r5, sl
 800dd84:	bf94      	ite	ls
 800dd86:	9500      	strls	r5, [sp, #0]
 800dd88:	f8cd a000 	strhi.w	sl, [sp]
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 800dd92:	47a8      	blx	r5
 800dd94:	6823      	ldr	r3, [r4, #0]
 800dd96:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800dd9a:	a907      	add	r1, sp, #28
 800dd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9e:	4620      	mov	r0, r4
 800dda0:	4798      	blx	r3
 800dda2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800dda6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800ddaa:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 800ddae:	1a5b      	subs	r3, r3, r1
 800ddb0:	440a      	add	r2, r1
 800ddb2:	b21b      	sxth	r3, r3
 800ddb4:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 800ddb8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f47f aed8 	bne.w	800db72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ddc2:	fa1f f188 	uxth.w	r1, r8
 800ddc6:	4648      	mov	r0, r9
 800ddc8:	f7ff fa14 	bl	800d1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ddcc:	e6d1      	b.n	800db72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ddce:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ddd2:	42ab      	cmp	r3, r5
 800ddd4:	f67f ae95 	bls.w	800db02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800ddd8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800dddc:	ab07      	add	r3, sp, #28
 800ddde:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800dde2:	6851      	ldr	r1, [r2, #4]
 800dde4:	c303      	stmia	r3!, {r0, r1}
 800dde6:	a807      	add	r0, sp, #28
 800dde8:	f7fd f86f 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800ddec:	b920      	cbnz	r0, 800ddf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	a907      	add	r1, sp, #28
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf6:	4798      	blx	r3
 800ddf8:	3501      	adds	r5, #1
 800ddfa:	b2ad      	uxth	r5, r5
 800ddfc:	e7e7      	b.n	800ddce <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800ddfe:	bf00      	nop
 800de00:	2400ae04 	.word	0x2400ae04

0800de04 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800de04:	4b03      	ldr	r3, [pc, #12]	; (800de14 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800de06:	2200      	movs	r2, #0
 800de08:	801a      	strh	r2, [r3, #0]
 800de0a:	805a      	strh	r2, [r3, #2]
 800de0c:	809a      	strh	r2, [r3, #4]
 800de0e:	80da      	strh	r2, [r3, #6]
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	2400ae48 	.word	0x2400ae48

0800de18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	b09d      	sub	sp, #116	; 0x74
 800de1e:	4606      	mov	r6, r0
 800de20:	4614      	mov	r4, r2
 800de22:	468a      	mov	sl, r1
 800de24:	a803      	add	r0, sp, #12
 800de26:	461d      	mov	r5, r3
 800de28:	f000 fd6c 	bl	800e904 <_ZN8touchgfx12TextProviderC1Ev>
 800de2c:	6833      	ldr	r3, [r6, #0]
 800de2e:	4630      	mov	r0, r6
 800de30:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800de34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de36:	4798      	blx	r3
 800de38:	6833      	ldr	r3, [r6, #0]
 800de3a:	4607      	mov	r7, r0
 800de3c:	4630      	mov	r0, r6
 800de3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de40:	4798      	blx	r3
 800de42:	462a      	mov	r2, r5
 800de44:	2500      	movs	r5, #0
 800de46:	4621      	mov	r1, r4
 800de48:	9000      	str	r0, [sp, #0]
 800de4a:	463b      	mov	r3, r7
 800de4c:	462c      	mov	r4, r5
 800de4e:	46a9      	mov	r9, r5
 800de50:	46a8      	mov	r8, r5
 800de52:	a803      	add	r0, sp, #12
 800de54:	f000 fda9 	bl	800e9aa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800de58:	2300      	movs	r3, #0
 800de5a:	9302      	str	r3, [sp, #8]
 800de5c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800de60:	429c      	cmp	r4, r3
 800de62:	d002      	beq.n	800de6a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800de64:	455c      	cmp	r4, fp
 800de66:	bf18      	it	ne
 800de68:	4625      	movne	r5, r4
 800de6a:	ab02      	add	r3, sp, #8
 800de6c:	4632      	mov	r2, r6
 800de6e:	4651      	mov	r1, sl
 800de70:	a803      	add	r0, sp, #12
 800de72:	f001 f88f 	bl	800ef94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800de76:	4604      	mov	r4, r0
 800de78:	b108      	cbz	r0, 800de7e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800de7a:	280a      	cmp	r0, #10
 800de7c:	d10a      	bne.n	800de94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800de7e:	45c1      	cmp	r9, r8
 800de80:	bf38      	it	cc
 800de82:	46c1      	movcc	r9, r8
 800de84:	f04f 0800 	mov.w	r8, #0
 800de88:	2c00      	cmp	r4, #0
 800de8a:	d1e5      	bne.n	800de58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800de8c:	4648      	mov	r0, r9
 800de8e:	b01d      	add	sp, #116	; 0x74
 800de90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de94:	9a02      	ldr	r2, [sp, #8]
 800de96:	2a00      	cmp	r2, #0
 800de98:	d0de      	beq.n	800de58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800de9a:	7b57      	ldrb	r7, [r2, #13]
 800de9c:	4629      	mov	r1, r5
 800de9e:	6833      	ldr	r3, [r6, #0]
 800dea0:	007f      	lsls	r7, r7, #1
 800dea2:	8894      	ldrh	r4, [r2, #4]
 800dea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dea6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800deaa:	7a97      	ldrb	r7, [r2, #10]
 800deac:	4307      	orrs	r7, r0
 800deae:	4630      	mov	r0, r6
 800deb0:	4798      	blx	r3
 800deb2:	4438      	add	r0, r7
 800deb4:	4480      	add	r8, r0
 800deb6:	fa1f f888 	uxth.w	r8, r8
 800deba:	e7e5      	b.n	800de88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800debc <_ZNK8touchgfx4Font12getCharWidthEt>:
 800debc:	b508      	push	{r3, lr}
 800debe:	6803      	ldr	r3, [r0, #0]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	4798      	blx	r3
 800dec4:	b128      	cbz	r0, 800ded2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800dec6:	7b43      	ldrb	r3, [r0, #13]
 800dec8:	7a80      	ldrb	r0, [r0, #10]
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded0:	4318      	orrs	r0, r3
 800ded2:	bd08      	pop	{r3, pc}

0800ded4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800ded4:	b40e      	push	{r1, r2, r3}
 800ded6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ded8:	b09e      	sub	sp, #120	; 0x78
 800deda:	4605      	mov	r5, r0
 800dedc:	ab23      	add	r3, sp, #140	; 0x8c
 800dede:	a805      	add	r0, sp, #20
 800dee0:	f853 4b04 	ldr.w	r4, [r3], #4
 800dee4:	9303      	str	r3, [sp, #12]
 800dee6:	f000 fd0d 	bl	800e904 <_ZN8touchgfx12TextProviderC1Ev>
 800deea:	682b      	ldr	r3, [r5, #0]
 800deec:	4628      	mov	r0, r5
 800deee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800def0:	4798      	blx	r3
 800def2:	682b      	ldr	r3, [r5, #0]
 800def4:	4606      	mov	r6, r0
 800def6:	4628      	mov	r0, r5
 800def8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800defa:	4798      	blx	r3
 800defc:	4633      	mov	r3, r6
 800defe:	4621      	mov	r1, r4
 800df00:	ae1e      	add	r6, sp, #120	; 0x78
 800df02:	2400      	movs	r4, #0
 800df04:	9000      	str	r0, [sp, #0]
 800df06:	9a03      	ldr	r2, [sp, #12]
 800df08:	a805      	add	r0, sp, #20
 800df0a:	f000 fd4e 	bl	800e9aa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800df0e:	f846 4d68 	str.w	r4, [r6, #-104]!
 800df12:	462a      	mov	r2, r5
 800df14:	4633      	mov	r3, r6
 800df16:	4621      	mov	r1, r4
 800df18:	a805      	add	r0, sp, #20
 800df1a:	f001 f83b 	bl	800ef94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df1e:	b300      	cbz	r0, 800df62 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800df20:	280a      	cmp	r0, #10
 800df22:	d01a      	beq.n	800df5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800df24:	9f04      	ldr	r7, [sp, #16]
 800df26:	b1c7      	cbz	r7, 800df5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800df28:	7b78      	ldrb	r0, [r7, #13]
 800df2a:	7a3b      	ldrb	r3, [r7, #8]
 800df2c:	00c1      	lsls	r1, r0, #3
 800df2e:	88aa      	ldrh	r2, [r5, #4]
 800df30:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800df34:	4319      	orrs	r1, r3
 800df36:	0643      	lsls	r3, r0, #25
 800df38:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800df3c:	bf48      	it	mi
 800df3e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800df42:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800df46:	bf48      	it	mi
 800df48:	b219      	sxthmi	r1, r3
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	4303      	orrs	r3, r0
 800df4e:	4413      	add	r3, r2
 800df50:	1a5b      	subs	r3, r3, r1
 800df52:	b29b      	uxth	r3, r3
 800df54:	42a3      	cmp	r3, r4
 800df56:	bfc8      	it	gt
 800df58:	b21c      	sxthgt	r4, r3
 800df5a:	4633      	mov	r3, r6
 800df5c:	462a      	mov	r2, r5
 800df5e:	2100      	movs	r1, #0
 800df60:	e7da      	b.n	800df18 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800df62:	b2a0      	uxth	r0, r4
 800df64:	b01e      	add	sp, #120	; 0x78
 800df66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df6a:	b003      	add	sp, #12
 800df6c:	4770      	bx	lr

0800df6e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800df6e:	b40e      	push	{r1, r2, r3}
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	b09d      	sub	sp, #116	; 0x74
 800df74:	4604      	mov	r4, r0
 800df76:	ab21      	add	r3, sp, #132	; 0x84
 800df78:	a803      	add	r0, sp, #12
 800df7a:	f853 5b04 	ldr.w	r5, [r3], #4
 800df7e:	9302      	str	r3, [sp, #8]
 800df80:	f000 fcc0 	bl	800e904 <_ZN8touchgfx12TextProviderC1Ev>
 800df84:	6823      	ldr	r3, [r4, #0]
 800df86:	4620      	mov	r0, r4
 800df88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df8a:	4798      	blx	r3
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	4606      	mov	r6, r0
 800df90:	4620      	mov	r0, r4
 800df92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df94:	2401      	movs	r4, #1
 800df96:	4798      	blx	r3
 800df98:	4633      	mov	r3, r6
 800df9a:	9000      	str	r0, [sp, #0]
 800df9c:	4629      	mov	r1, r5
 800df9e:	9a02      	ldr	r2, [sp, #8]
 800dfa0:	a803      	add	r0, sp, #12
 800dfa2:	f000 fd02 	bl	800e9aa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dfa6:	a803      	add	r0, sp, #12
 800dfa8:	f001 f874 	bl	800f094 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfac:	b2a3      	uxth	r3, r4
 800dfae:	b138      	cbz	r0, 800dfc0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800dfb0:	280a      	cmp	r0, #10
 800dfb2:	a803      	add	r0, sp, #12
 800dfb4:	bf04      	itt	eq
 800dfb6:	3301      	addeq	r3, #1
 800dfb8:	b21c      	sxtheq	r4, r3
 800dfba:	f001 f86b 	bl	800f094 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfbe:	e7f5      	b.n	800dfac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	b01d      	add	sp, #116	; 0x74
 800dfc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfc8:	b003      	add	sp, #12
 800dfca:	4770      	bx	lr

0800dfcc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dfcc:	b40e      	push	{r1, r2, r3}
 800dfce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfd0:	b09e      	sub	sp, #120	; 0x78
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	ab23      	add	r3, sp, #140	; 0x8c
 800dfd6:	a805      	add	r0, sp, #20
 800dfd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfdc:	9303      	str	r3, [sp, #12]
 800dfde:	f000 fc91 	bl	800e904 <_ZN8touchgfx12TextProviderC1Ev>
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfe8:	4798      	blx	r3
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	4606      	mov	r6, r0
 800dfee:	4620      	mov	r0, r4
 800dff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dff2:	4798      	blx	r3
 800dff4:	4633      	mov	r3, r6
 800dff6:	4629      	mov	r1, r5
 800dff8:	9000      	str	r0, [sp, #0]
 800dffa:	9a03      	ldr	r2, [sp, #12]
 800dffc:	a805      	add	r0, sp, #20
 800dffe:	f000 fcd4 	bl	800e9aa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e002:	ad1e      	add	r5, sp, #120	; 0x78
 800e004:	2100      	movs	r1, #0
 800e006:	26ff      	movs	r6, #255	; 0xff
 800e008:	4622      	mov	r2, r4
 800e00a:	a805      	add	r0, sp, #20
 800e00c:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e010:	462b      	mov	r3, r5
 800e012:	f000 ffbf 	bl	800ef94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e016:	b1d8      	cbz	r0, 800e050 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800e018:	280a      	cmp	r0, #10
 800e01a:	d012      	beq.n	800e042 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800e01c:	9804      	ldr	r0, [sp, #16]
 800e01e:	b180      	cbz	r0, 800e042 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800e020:	7b47      	ldrb	r7, [r0, #13]
 800e022:	7922      	ldrb	r2, [r4, #4]
 800e024:	00fb      	lsls	r3, r7, #3
 800e026:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800e02a:	7a03      	ldrb	r3, [r0, #8]
 800e02c:	430b      	orrs	r3, r1
 800e02e:	0679      	lsls	r1, r7, #25
 800e030:	bf44      	itt	mi
 800e032:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e036:	b21b      	sxthmi	r3, r3
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	429e      	cmp	r6, r3
 800e03e:	bf28      	it	cs
 800e040:	461e      	movcs	r6, r3
 800e042:	462b      	mov	r3, r5
 800e044:	4622      	mov	r2, r4
 800e046:	2100      	movs	r1, #0
 800e048:	a805      	add	r0, sp, #20
 800e04a:	f000 ffa3 	bl	800ef94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e04e:	e7e2      	b.n	800e016 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800e050:	4630      	mov	r0, r6
 800e052:	b01e      	add	sp, #120	; 0x78
 800e054:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e058:	b003      	add	sp, #12
 800e05a:	4770      	bx	lr

0800e05c <_ZNK8touchgfx8Drawable10invalidateEv>:
 800e05c:	b513      	push	{r0, r1, r4, lr}
 800e05e:	6803      	ldr	r3, [r0, #0]
 800e060:	2400      	movs	r4, #0
 800e062:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e066:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e06a:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e06e:	4669      	mov	r1, sp
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	9400      	str	r4, [sp, #0]
 800e074:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e078:	4798      	blx	r3
 800e07a:	b002      	add	sp, #8
 800e07c:	bd10      	pop	{r4, pc}

0800e07e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800e07e:	b538      	push	{r3, r4, r5, lr}
 800e080:	680b      	ldr	r3, [r1, #0]
 800e082:	460c      	mov	r4, r1
 800e084:	4605      	mov	r5, r0
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	4798      	blx	r3
 800e08a:	6823      	ldr	r3, [r4, #0]
 800e08c:	4620      	mov	r0, r4
 800e08e:	4629      	mov	r1, r5
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	4798      	blx	r3
 800e094:	4628      	mov	r0, r5
 800e096:	bd38      	pop	{r3, r4, r5, pc}

0800e098 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800e098:	b410      	push	{r4}
 800e09a:	880a      	ldrh	r2, [r1, #0]
 800e09c:	8884      	ldrh	r4, [r0, #4]
 800e09e:	4422      	add	r2, r4
 800e0a0:	800a      	strh	r2, [r1, #0]
 800e0a2:	884a      	ldrh	r2, [r1, #2]
 800e0a4:	88c4      	ldrh	r4, [r0, #6]
 800e0a6:	4422      	add	r2, r4
 800e0a8:	804a      	strh	r2, [r1, #2]
 800e0aa:	6940      	ldr	r0, [r0, #20]
 800e0ac:	b120      	cbz	r0, 800e0b8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800e0ae:	6803      	ldr	r3, [r0, #0]
 800e0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b6:	4718      	bx	r3
 800e0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800e0be:	b570      	push	{r4, r5, r6, lr}
 800e0c0:	8882      	ldrh	r2, [r0, #4]
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	880b      	ldrh	r3, [r1, #0]
 800e0c6:	4605      	mov	r5, r0
 800e0c8:	4413      	add	r3, r2
 800e0ca:	800b      	strh	r3, [r1, #0]
 800e0cc:	884b      	ldrh	r3, [r1, #2]
 800e0ce:	88c2      	ldrh	r2, [r0, #6]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	804b      	strh	r3, [r1, #2]
 800e0d4:	1d01      	adds	r1, r0, #4
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f7fc feb4 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800e0dc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dd0b      	ble.n	800e0fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e0e4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	dd07      	ble.n	800e0fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e0ec:	6968      	ldr	r0, [r5, #20]
 800e0ee:	b128      	cbz	r0, 800e0fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e0f0:	6803      	ldr	r3, [r0, #0]
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0fa:	4718      	bx	r3
 800e0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e100 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800e100:	b570      	push	{r4, r5, r6, lr}
 800e102:	8882      	ldrh	r2, [r0, #4]
 800e104:	460c      	mov	r4, r1
 800e106:	880b      	ldrh	r3, [r1, #0]
 800e108:	4605      	mov	r5, r0
 800e10a:	4413      	add	r3, r2
 800e10c:	800b      	strh	r3, [r1, #0]
 800e10e:	884b      	ldrh	r3, [r1, #2]
 800e110:	88c2      	ldrh	r2, [r0, #6]
 800e112:	4413      	add	r3, r2
 800e114:	804b      	strh	r3, [r1, #2]
 800e116:	1d01      	adds	r1, r0, #4
 800e118:	4620      	mov	r0, r4
 800e11a:	f7fc fe93 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800e11e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	dd18      	ble.n	800e158 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e126:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	dd14      	ble.n	800e158 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e12e:	6968      	ldr	r0, [r5, #20]
 800e130:	b128      	cbz	r0, 800e13e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800e132:	6803      	ldr	r3, [r0, #0]
 800e134:	4621      	mov	r1, r4
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e13c:	4718      	bx	r3
 800e13e:	4b07      	ldr	r3, [pc, #28]	; (800e15c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3304      	adds	r3, #4
 800e144:	429d      	cmp	r5, r3
 800e146:	d107      	bne.n	800e158 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e148:	f7fe fff0 	bl	800d12c <_ZN8touchgfx11Application11getInstanceEv>
 800e14c:	6821      	ldr	r1, [r4, #0]
 800e14e:	6862      	ldr	r2, [r4, #4]
 800e150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e154:	f7ff b862 	b.w	800d21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e158:	bd70      	pop	{r4, r5, r6, pc}
 800e15a:	bf00      	nop
 800e15c:	2400ae40 	.word	0x2400ae40

0800e160 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800e160:	b570      	push	{r4, r5, r6, lr}
 800e162:	4604      	mov	r4, r0
 800e164:	4616      	mov	r6, r2
 800e166:	460d      	mov	r5, r1
 800e168:	b901      	cbnz	r1, 800e16c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800e16a:	b192      	cbz	r2, 800e192 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800e16c:	6823      	ldr	r3, [r4, #0]
 800e16e:	4620      	mov	r0, r4
 800e170:	699b      	ldr	r3, [r3, #24]
 800e172:	4798      	blx	r3
 800e174:	88e2      	ldrh	r2, [r4, #6]
 800e176:	88a1      	ldrh	r1, [r4, #4]
 800e178:	4620      	mov	r0, r4
 800e17a:	4432      	add	r2, r6
 800e17c:	4429      	add	r1, r5
 800e17e:	b212      	sxth	r2, r2
 800e180:	b209      	sxth	r1, r1
 800e182:	f7fd f93d 	bl	800b400 <_ZN8touchgfx8Drawable5setXYEss>
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	4620      	mov	r0, r4
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e190:	4718      	bx	r3
 800e192:	bd70      	pop	{r4, r5, r6, pc}

0800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800e194:	b510      	push	{r4, lr}
 800e196:	2300      	movs	r3, #0
 800e198:	4604      	mov	r4, r0
 800e19a:	4608      	mov	r0, r1
 800e19c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800e1a0:	8023      	strh	r3, [r4, #0]
 800e1a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e1a6:	8063      	strh	r3, [r4, #2]
 800e1a8:	6803      	ldr	r3, [r0, #0]
 800e1aa:	80a1      	strh	r1, [r4, #4]
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	80e2      	strh	r2, [r4, #6]
 800e1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b2:	4798      	blx	r3
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	bd10      	pop	{r4, pc}

0800e1b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800e1b8:	b530      	push	{r4, r5, lr}
 800e1ba:	8083      	strh	r3, [r0, #4]
 800e1bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e1c0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800e1c4:	7183      	strb	r3, [r0, #6]
 800e1c6:	79c3      	ldrb	r3, [r0, #7]
 800e1c8:	6101      	str	r1, [r0, #16]
 800e1ca:	f365 0306 	bfi	r3, r5, #0, #7
 800e1ce:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800e1d2:	8282      	strh	r2, [r0, #20]
 800e1d4:	f365 13c7 	bfi	r3, r5, #7, #1
 800e1d8:	71c3      	strb	r3, [r0, #7]
 800e1da:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e1de:	7203      	strb	r3, [r0, #8]
 800e1e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e1e4:	7243      	strb	r3, [r0, #9]
 800e1e6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e1ea:	8143      	strh	r3, [r0, #10]
 800e1ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800e1f0:	8183      	strh	r3, [r0, #12]
 800e1f2:	4b01      	ldr	r3, [pc, #4]	; (800e1f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800e1f4:	6003      	str	r3, [r0, #0]
 800e1f6:	bd30      	pop	{r4, r5, pc}
 800e1f8:	0801a378 	.word	0x0801a378

0800e1fc <_ZNK8touchgfx9ConstFont4findEt>:
 800e1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1fe:	6904      	ldr	r4, [r0, #16]
 800e200:	b3bc      	cbz	r4, 800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e202:	88a3      	ldrh	r3, [r4, #4]
 800e204:	8a82      	ldrh	r2, [r0, #20]
 800e206:	1acb      	subs	r3, r1, r3
 800e208:	f102 32ff 	add.w	r2, r2, #4294967295
 800e20c:	d431      	bmi.n	800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e20e:	4293      	cmp	r3, r2
 800e210:	dd0c      	ble.n	800e22c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e212:	230e      	movs	r3, #14
 800e214:	fb03 4302 	mla	r3, r3, r2, r4
 800e218:	889b      	ldrh	r3, [r3, #4]
 800e21a:	1a5b      	subs	r3, r3, r1
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	429a      	cmp	r2, r3
 800e220:	db27      	blt.n	800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e222:	2b00      	cmp	r3, #0
 800e224:	bfbc      	itt	lt
 800e226:	2302      	movlt	r3, #2
 800e228:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e22c:	2500      	movs	r5, #0
 800e22e:	260e      	movs	r6, #14
 800e230:	4295      	cmp	r5, r2
 800e232:	dc1e      	bgt.n	800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e234:	fb06 4003 	mla	r0, r6, r3, r4
 800e238:	8887      	ldrh	r7, [r0, #4]
 800e23a:	42b9      	cmp	r1, r7
 800e23c:	d01a      	beq.n	800e274 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e23e:	d20d      	bcs.n	800e25c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e240:	1e5a      	subs	r2, r3, #1
 800e242:	4295      	cmp	r5, r2
 800e244:	dc15      	bgt.n	800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e246:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e24a:	1a5b      	subs	r3, r3, r1
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	429a      	cmp	r2, r3
 800e250:	db0f      	blt.n	800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e252:	429d      	cmp	r5, r3
 800e254:	ddec      	ble.n	800e230 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e256:	1953      	adds	r3, r2, r5
 800e258:	105b      	asrs	r3, r3, #1
 800e25a:	e7e9      	b.n	800e230 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e25c:	1c5d      	adds	r5, r3, #1
 800e25e:	42aa      	cmp	r2, r5
 800e260:	db07      	blt.n	800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e262:	8a43      	ldrh	r3, [r0, #18]
 800e264:	1acb      	subs	r3, r1, r3
 800e266:	442b      	add	r3, r5
 800e268:	429d      	cmp	r5, r3
 800e26a:	dc02      	bgt.n	800e272 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e26c:	429a      	cmp	r2, r3
 800e26e:	dadf      	bge.n	800e230 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e270:	e7f1      	b.n	800e256 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e272:	2000      	movs	r0, #0
 800e274:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e276 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e278:	4604      	mov	r4, r0
 800e27a:	4617      	mov	r7, r2
 800e27c:	461e      	mov	r6, r3
 800e27e:	b911      	cbnz	r1, 800e286 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e280:	2500      	movs	r5, #0
 800e282:	4628      	mov	r0, r5
 800e284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e286:	290a      	cmp	r1, #10
 800e288:	d0fa      	beq.n	800e280 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e28a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800e28e:	4291      	cmp	r1, r2
 800e290:	d0f6      	beq.n	800e280 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e292:	f242 020b 	movw	r2, #8203	; 0x200b
 800e296:	4291      	cmp	r1, r2
 800e298:	d0f2      	beq.n	800e280 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e29a:	f7ff ffaf 	bl	800e1fc <_ZNK8touchgfx9ConstFont4findEt>
 800e29e:	4605      	mov	r5, r0
 800e2a0:	b950      	cbnz	r0, 800e2b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	4798      	blx	r3
 800e2aa:	4601      	mov	r1, r0
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f7ff ffa5 	bl	800e1fc <_ZNK8touchgfx9ConstFont4findEt>
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d0e3      	beq.n	800e280 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2b8:	6823      	ldr	r3, [r4, #0]
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	4620      	mov	r0, r4
 800e2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2c0:	4798      	blx	r3
 800e2c2:	6038      	str	r0, [r7, #0]
 800e2c4:	6823      	ldr	r3, [r4, #0]
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ca:	4798      	blx	r3
 800e2cc:	7030      	strb	r0, [r6, #0]
 800e2ce:	e7d8      	b.n	800e282 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e2d0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	4770      	bx	lr

0800e2d4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	4770      	bx	lr

0800e2d8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800e2d8:	2002      	movs	r0, #2
 800e2da:	4770      	bx	lr

0800e2dc <_ZN8touchgfx6ScreenD1Ev>:
 800e2dc:	4770      	bx	lr

0800e2de <_ZN8touchgfx12GestureEventD1Ev>:
 800e2de:	4770      	bx	lr

0800e2e0 <_ZN8touchgfx9DragEventD1Ev>:
 800e2e0:	4770      	bx	lr

0800e2e2 <_ZN8touchgfx10ClickEventD1Ev>:
 800e2e2:	4770      	bx	lr

0800e2e4 <_ZN8touchgfx10ClickEventD0Ev>:
 800e2e4:	b510      	push	{r4, lr}
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	210c      	movs	r1, #12
 800e2ea:	f009 fc44 	bl	8017b76 <_ZdlPvj>
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	bd10      	pop	{r4, pc}

0800e2f2 <_ZN8touchgfx9DragEventD0Ev>:
 800e2f2:	b510      	push	{r4, lr}
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	2110      	movs	r1, #16
 800e2f8:	f009 fc3d 	bl	8017b76 <_ZdlPvj>
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	bd10      	pop	{r4, pc}

0800e300 <_ZN8touchgfx12GestureEventD0Ev>:
 800e300:	b510      	push	{r4, lr}
 800e302:	4604      	mov	r4, r0
 800e304:	210c      	movs	r1, #12
 800e306:	f009 fc36 	bl	8017b76 <_ZdlPvj>
 800e30a:	4620      	mov	r0, r4
 800e30c:	bd10      	pop	{r4, pc}

0800e30e <_ZN8touchgfx6ScreenD0Ev>:
 800e30e:	b510      	push	{r4, lr}
 800e310:	4604      	mov	r4, r0
 800e312:	213c      	movs	r1, #60	; 0x3c
 800e314:	f009 fc2f 	bl	8017b76 <_ZdlPvj>
 800e318:	4620      	mov	r0, r4
 800e31a:	bd10      	pop	{r4, pc}

0800e31c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e31c:	b530      	push	{r4, r5, lr}
 800e31e:	460d      	mov	r5, r1
 800e320:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e322:	b087      	sub	sp, #28
 800e324:	4604      	mov	r4, r0
 800e326:	b301      	cbz	r1, 800e36a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e328:	a801      	add	r0, sp, #4
 800e32a:	f7ff ff33 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e32e:	892a      	ldrh	r2, [r5, #8]
 800e330:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e334:	7928      	ldrb	r0, [r5, #4]
 800e336:	1ad2      	subs	r2, r2, r3
 800e338:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e33a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e33e:	441a      	add	r2, r3
 800e340:	896b      	ldrh	r3, [r5, #10]
 800e342:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e346:	f88d 0010 	strb.w	r0, [sp, #16]
 800e34a:	1b5b      	subs	r3, r3, r5
 800e34c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800e34e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e350:	442b      	add	r3, r5
 800e352:	4d07      	ldr	r5, [pc, #28]	; (800e370 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e354:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e358:	a903      	add	r1, sp, #12
 800e35a:	9503      	str	r5, [sp, #12]
 800e35c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e360:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e364:	6803      	ldr	r3, [r0, #0]
 800e366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e368:	4798      	blx	r3
 800e36a:	b007      	add	sp, #28
 800e36c:	bd30      	pop	{r4, r5, pc}
 800e36e:	bf00      	nop
 800e370:	0801a3f8 	.word	0x0801a3f8

0800e374 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e378:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e37a:	b08a      	sub	sp, #40	; 0x28
 800e37c:	4604      	mov	r4, r0
 800e37e:	460d      	mov	r5, r1
 800e380:	b113      	cbz	r3, 800e388 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e382:	790b      	ldrb	r3, [r1, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d044      	beq.n	800e412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e388:	f104 0804 	add.w	r8, r4, #4
 800e38c:	a803      	add	r0, sp, #12
 800e38e:	4641      	mov	r1, r8
 800e390:	f7ff ff00 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e394:	792b      	ldrb	r3, [r5, #4]
 800e396:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e39a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e39e:	b983      	cbnz	r3, 800e3c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e3a0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800e3a4:	892a      	ldrh	r2, [r5, #8]
 800e3a6:	88e9      	ldrh	r1, [r5, #6]
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	1b92      	subs	r2, r2, r6
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	1bc9      	subs	r1, r1, r7
 800e3b0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800e3b4:	b212      	sxth	r2, r2
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	b209      	sxth	r1, r1
 800e3ba:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800e3be:	f7fc fc5f 	bl	800ac80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e3c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e3c4:	b329      	cbz	r1, 800e412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3c6:	a805      	add	r0, sp, #20
 800e3c8:	f7ff fee4 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3cc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e3d0:	792b      	ldrb	r3, [r5, #4]
 800e3d2:	a907      	add	r1, sp, #28
 800e3d4:	1abf      	subs	r7, r7, r2
 800e3d6:	88ea      	ldrh	r2, [r5, #6]
 800e3d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e3da:	4417      	add	r7, r2
 800e3dc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800e3de:	f88d 3020 	strb.w	r3, [sp, #32]
 800e3e2:	4417      	add	r7, r2
 800e3e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e3e8:	1ab6      	subs	r6, r6, r2
 800e3ea:	892a      	ldrh	r2, [r5, #8]
 800e3ec:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800e3f0:	4416      	add	r6, r2
 800e3f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800e3f4:	4416      	add	r6, r2
 800e3f6:	4a08      	ldr	r2, [pc, #32]	; (800e418 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e3f8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800e3fc:	2600      	movs	r6, #0
 800e3fe:	9207      	str	r2, [sp, #28]
 800e400:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800e404:	6803      	ldr	r3, [r0, #0]
 800e406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e408:	4798      	blx	r3
 800e40a:	792b      	ldrb	r3, [r5, #4]
 800e40c:	b10b      	cbz	r3, 800e412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e40e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800e412:	b00a      	add	sp, #40	; 0x28
 800e414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e418:	0801a3d0 	.word	0x0801a3d0

0800e41c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e420:	460c      	mov	r4, r1
 800e422:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e424:	b088      	sub	sp, #32
 800e426:	4605      	mov	r5, r0
 800e428:	2900      	cmp	r1, #0
 800e42a:	d06d      	beq.n	800e508 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e42c:	4668      	mov	r0, sp
 800e42e:	f7ff feb1 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e432:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800e434:	88e3      	ldrh	r3, [r4, #6]
 800e436:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e43a:	440b      	add	r3, r1
 800e43c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e440:	b21b      	sxth	r3, r3
 800e442:	4543      	cmp	r3, r8
 800e444:	db31      	blt.n	800e4aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e446:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e44a:	44c4      	add	ip, r8
 800e44c:	fa0f fc8c 	sxth.w	ip, ip
 800e450:	4563      	cmp	r3, ip
 800e452:	da2a      	bge.n	800e4aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e454:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800e456:	8926      	ldrh	r6, [r4, #8]
 800e458:	4416      	add	r6, r2
 800e45a:	b236      	sxth	r6, r6
 800e45c:	42be      	cmp	r6, r7
 800e45e:	db24      	blt.n	800e4aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e460:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e464:	4438      	add	r0, r7
 800e466:	b200      	sxth	r0, r0
 800e468:	4286      	cmp	r6, r0
 800e46a:	da1e      	bge.n	800e4aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e46c:	8963      	ldrh	r3, [r4, #10]
 800e46e:	4419      	add	r1, r3
 800e470:	b209      	sxth	r1, r1
 800e472:	4541      	cmp	r1, r8
 800e474:	db08      	blt.n	800e488 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e476:	4561      	cmp	r1, ip
 800e478:	da06      	bge.n	800e488 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	441a      	add	r2, r3
 800e47e:	b212      	sxth	r2, r2
 800e480:	42ba      	cmp	r2, r7
 800e482:	db01      	blt.n	800e488 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e484:	4282      	cmp	r2, r0
 800e486:	db10      	blt.n	800e4aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e488:	4b21      	ldr	r3, [pc, #132]	; (800e510 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e48a:	a904      	add	r1, sp, #16
 800e48c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e48e:	9304      	str	r3, [sp, #16]
 800e490:	2302      	movs	r3, #2
 800e492:	f88d 3014 	strb.w	r3, [sp, #20]
 800e496:	2300      	movs	r3, #0
 800e498:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e49c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4a4:	6803      	ldr	r3, [r0, #0]
 800e4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a8:	4798      	blx	r3
 800e4aa:	1d29      	adds	r1, r5, #4
 800e4ac:	a802      	add	r0, sp, #8
 800e4ae:	f7ff fe71 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e4b6:	88e0      	ldrh	r0, [r4, #6]
 800e4b8:	eba3 0808 	sub.w	r8, r3, r8
 800e4bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e4c0:	7921      	ldrb	r1, [r4, #4]
 800e4c2:	fa1f f888 	uxth.w	r8, r8
 800e4c6:	1bdf      	subs	r7, r3, r7
 800e4c8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800e4cc:	b2bb      	uxth	r3, r7
 800e4ce:	4440      	add	r0, r8
 800e4d0:	8922      	ldrh	r2, [r4, #8]
 800e4d2:	8967      	ldrh	r7, [r4, #10]
 800e4d4:	4460      	add	r0, ip
 800e4d6:	89a4      	ldrh	r4, [r4, #12]
 800e4d8:	441a      	add	r2, r3
 800e4da:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800e4dc:	44b8      	add	r8, r7
 800e4de:	4423      	add	r3, r4
 800e4e0:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e4e4:	4432      	add	r2, r6
 800e4e6:	44e0      	add	r8, ip
 800e4e8:	4433      	add	r3, r6
 800e4ea:	4c0a      	ldr	r4, [pc, #40]	; (800e514 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e4ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e4ee:	f88d 1014 	strb.w	r1, [sp, #20]
 800e4f2:	a904      	add	r1, sp, #16
 800e4f4:	9404      	str	r4, [sp, #16]
 800e4f6:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e4fa:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e4fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e502:	6803      	ldr	r3, [r0, #0]
 800e504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e506:	4798      	blx	r3
 800e508:	b008      	add	sp, #32
 800e50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e50e:	bf00      	nop
 800e510:	0801a3d0 	.word	0x0801a3d0
 800e514:	0801a3e4 	.word	0x0801a3e4

0800e518 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e51a:	4604      	mov	r4, r0
 800e51c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e520:	3201      	adds	r2, #1
 800e522:	d112      	bne.n	800e54a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e524:	2500      	movs	r5, #0
 800e526:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e52a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e52e:	6803      	ldr	r3, [r0, #0]
 800e530:	9500      	str	r5, [sp, #0]
 800e532:	466d      	mov	r5, sp
 800e534:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e538:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e53c:	4629      	mov	r1, r5
 800e53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e540:	4798      	blx	r3
 800e542:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e546:	e884 0003 	stmia.w	r4, {r0, r1}
 800e54a:	4620      	mov	r0, r4
 800e54c:	b003      	add	sp, #12
 800e54e:	bd30      	pop	{r4, r5, pc}

0800e550 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e550:	b513      	push	{r0, r1, r4, lr}
 800e552:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e556:	4604      	mov	r4, r0
 800e558:	3301      	adds	r3, #1
 800e55a:	d109      	bne.n	800e570 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e55c:	4601      	mov	r1, r0
 800e55e:	4668      	mov	r0, sp
 800e560:	f7ff fe18 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e564:	f8bd 3000 	ldrh.w	r3, [sp]
 800e568:	8423      	strh	r3, [r4, #32]
 800e56a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e56e:	8463      	strh	r3, [r4, #34]	; 0x22
 800e570:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e574:	b002      	add	sp, #8
 800e576:	bd10      	pop	{r4, pc}

0800e578 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e578:	b513      	push	{r0, r1, r4, lr}
 800e57a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800e57e:	4604      	mov	r4, r0
 800e580:	3301      	adds	r3, #1
 800e582:	d109      	bne.n	800e598 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e584:	4601      	mov	r1, r0
 800e586:	4668      	mov	r0, sp
 800e588:	f7ff fe04 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e58c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e590:	8423      	strh	r3, [r4, #32]
 800e592:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e596:	8463      	strh	r3, [r4, #34]	; 0x22
 800e598:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800e59c:	b002      	add	sp, #8
 800e59e:	bd10      	pop	{r4, pc}

0800e5a0 <_ZN8touchgfx6ScreenC1Ev>:
 800e5a0:	b570      	push	{r4, r5, r6, lr}
 800e5a2:	4b17      	ldr	r3, [pc, #92]	; (800e600 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	4a17      	ldr	r2, [pc, #92]	; (800e604 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	f845 3b04 	str.w	r3, [r5], #4
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	6042      	str	r2, [r0, #4]
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	8103      	strh	r3, [r0, #8]
 800e5b6:	8143      	strh	r3, [r0, #10]
 800e5b8:	8183      	strh	r3, [r0, #12]
 800e5ba:	81c3      	strh	r3, [r0, #14]
 800e5bc:	8203      	strh	r3, [r0, #16]
 800e5be:	8243      	strh	r3, [r0, #18]
 800e5c0:	8283      	strh	r3, [r0, #20]
 800e5c2:	82c3      	strh	r3, [r0, #22]
 800e5c4:	6203      	str	r3, [r0, #32]
 800e5c6:	8483      	strh	r3, [r0, #36]	; 0x24
 800e5c8:	84c3      	strh	r3, [r0, #38]	; 0x26
 800e5ca:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800e5ce:	6343      	str	r3, [r0, #52]	; 0x34
 800e5d0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800e5d4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800e5d8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e5dc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800e5e0:	4b09      	ldr	r3, [pc, #36]	; (800e608 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e5e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e5ea:	4a08      	ldr	r2, [pc, #32]	; (800e60c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e5ec:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e5f0:	4798      	blx	r3
 800e5f2:	6863      	ldr	r3, [r4, #4]
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	4631      	mov	r1, r6
 800e5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5fa:	4798      	blx	r3
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}
 800e600:	0801a40c 	.word	0x0801a40c
 800e604:	08019fb0 	.word	0x08019fb0
 800e608:	2400adfa 	.word	0x2400adfa
 800e60c:	2400adf8 	.word	0x2400adf8

0800e610 <_ZN8touchgfx6Screen4drawEv>:
 800e610:	4b09      	ldr	r3, [pc, #36]	; (800e638 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e612:	b507      	push	{r0, r1, r2, lr}
 800e614:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e618:	2100      	movs	r1, #0
 800e61a:	4b08      	ldr	r3, [pc, #32]	; (800e63c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e61c:	9100      	str	r1, [sp, #0]
 800e61e:	4669      	mov	r1, sp
 800e620:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e624:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e628:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e62c:	6803      	ldr	r3, [r0, #0]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	4798      	blx	r3
 800e632:	b003      	add	sp, #12
 800e634:	f85d fb04 	ldr.w	pc, [sp], #4
 800e638:	2400adf8 	.word	0x2400adf8
 800e63c:	2400adfa 	.word	0x2400adfa

0800e640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e648:	b089      	sub	sp, #36	; 0x24
 800e64a:	4680      	mov	r8, r0
 800e64c:	460c      	mov	r4, r1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	4615      	mov	r5, r2
 800e652:	dd0e      	ble.n	800e672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e654:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	dd0a      	ble.n	800e672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e65c:	4628      	mov	r0, r5
 800e65e:	f7ff ff5b 	bl	800e518 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e662:	4621      	mov	r1, r4
 800e664:	f7fe fc83 	bl	800cf6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e668:	69eb      	ldr	r3, [r5, #28]
 800e66a:	b928      	cbnz	r0, 800e678 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e66c:	461d      	mov	r5, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1f4      	bne.n	800e65c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e672:	b009      	add	sp, #36	; 0x24
 800e674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e678:	ae04      	add	r6, sp, #16
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 80b5 	beq.w	800e7ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	4629      	mov	r1, r5
 800e684:	a802      	add	r0, sp, #8
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	4798      	blx	r3
 800e68a:	4628      	mov	r0, r5
 800e68c:	f7ff ff60 	bl	800e550 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e690:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e694:	4407      	add	r7, r0
 800e696:	4628      	mov	r0, r5
 800e698:	f7ff ff6e 	bl	800e578 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e69c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e6a0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e6a4:	b23f      	sxth	r7, r7
 800e6a6:	4418      	add	r0, r3
 800e6a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e6b2:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6bc:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e6c0:	f7fc fbc0 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f7ff ff27 	bl	800e518 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e6ca:	ab06      	add	r3, sp, #24
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e6d2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fc fbb3 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800e6de:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e6e2:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e6e6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e6ea:	4299      	cmp	r1, r3
 800e6ec:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e6f0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e6f4:	d10b      	bne.n	800e70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e6f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e6fa:	4552      	cmp	r2, sl
 800e6fc:	d107      	bne.n	800e70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e6fe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e702:	455a      	cmp	r2, fp
 800e704:	d103      	bne.n	800e70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e706:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e70a:	454a      	cmp	r2, r9
 800e70c:	d06d      	beq.n	800e7ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e70e:	f1bb 0f00 	cmp.w	fp, #0
 800e712:	dd65      	ble.n	800e7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e714:	f1b9 0f00 	cmp.w	r9, #0
 800e718:	dd62      	ble.n	800e7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e71a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e71e:	fa1f f08a 	uxth.w	r0, sl
 800e722:	4552      	cmp	r2, sl
 800e724:	9000      	str	r0, [sp, #0]
 800e726:	da12      	bge.n	800e74e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e728:	9301      	str	r3, [sp, #4]
 800e72a:	9b00      	ldr	r3, [sp, #0]
 800e72c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e730:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e734:	1a9a      	subs	r2, r3, r2
 800e736:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e73a:	4631      	mov	r1, r6
 800e73c:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e740:	4640      	mov	r0, r8
 800e742:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e746:	69ea      	ldr	r2, [r5, #28]
 800e748:	f7ff ff7a 	bl	800e640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e752:	b29f      	uxth	r7, r3
 800e754:	429a      	cmp	r2, r3
 800e756:	da0d      	bge.n	800e774 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e758:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e75c:	1aba      	subs	r2, r7, r2
 800e75e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e762:	4631      	mov	r1, r6
 800e764:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e768:	4640      	mov	r0, r8
 800e76a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e76e:	69ea      	ldr	r2, [r5, #28]
 800e770:	f7ff ff66 	bl	800e640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e774:	8822      	ldrh	r2, [r4, #0]
 800e776:	445f      	add	r7, fp
 800e778:	88a3      	ldrh	r3, [r4, #4]
 800e77a:	b2bf      	uxth	r7, r7
 800e77c:	4413      	add	r3, r2
 800e77e:	b23a      	sxth	r2, r7
 800e780:	b29b      	uxth	r3, r3
 800e782:	b219      	sxth	r1, r3
 800e784:	4291      	cmp	r1, r2
 800e786:	dd0d      	ble.n	800e7a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e788:	1bdb      	subs	r3, r3, r7
 800e78a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e78e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e792:	4631      	mov	r1, r6
 800e794:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e798:	4640      	mov	r0, r8
 800e79a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e79e:	69ea      	ldr	r2, [r5, #28]
 800e7a0:	f7ff ff4e 	bl	800e640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7a4:	88e2      	ldrh	r2, [r4, #6]
 800e7a6:	8863      	ldrh	r3, [r4, #2]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	9a00      	ldr	r2, [sp, #0]
 800e7ac:	444a      	add	r2, r9
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	fa1f f982 	uxth.w	r9, r2
 800e7b4:	b219      	sxth	r1, r3
 800e7b6:	fa0f f289 	sxth.w	r2, r9
 800e7ba:	428a      	cmp	r2, r1
 800e7bc:	da15      	bge.n	800e7ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e7be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e7c2:	eba3 0309 	sub.w	r3, r3, r9
 800e7c6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e7ca:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e7ce:	4631      	mov	r1, r6
 800e7d0:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e7d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e7d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e7dc:	69ea      	ldr	r2, [r5, #28]
 800e7de:	e001      	b.n	800e7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e7e0:	69ea      	ldr	r2, [r5, #28]
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	f7ff ff2b 	bl	800e640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	f7ff fe94 	bl	800e518 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e7f0:	6861      	ldr	r1, [r4, #4]
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	4633      	mov	r3, r6
 800e7f6:	6820      	ldr	r0, [r4, #0]
 800e7f8:	c303      	stmia	r3!, {r0, r1}
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	f7fc fb21 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800e802:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e806:	2b00      	cmp	r3, #0
 800e808:	f77f af33 	ble.w	800e672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e80c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e810:	2b00      	cmp	r3, #0
 800e812:	f77f af2e 	ble.w	800e672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e816:	4628      	mov	r0, r5
 800e818:	f7ff fe9a 	bl	800e550 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e81c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e820:	1a18      	subs	r0, r3, r0
 800e822:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e826:	4628      	mov	r0, r5
 800e828:	f7ff fea6 	bl	800e578 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e82c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e830:	4631      	mov	r1, r6
 800e832:	1a18      	subs	r0, r3, r0
 800e834:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e838:	4628      	mov	r0, r5
 800e83a:	682b      	ldr	r3, [r5, #0]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	4798      	blx	r3
 800e840:	e717      	b.n	800e672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e842 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e842:	b570      	push	{r4, r5, r6, lr}
 800e844:	1d06      	adds	r6, r0, #4
 800e846:	b086      	sub	sp, #24
 800e848:	460c      	mov	r4, r1
 800e84a:	2300      	movs	r3, #0
 800e84c:	4631      	mov	r1, r6
 800e84e:	4605      	mov	r5, r0
 800e850:	a802      	add	r0, sp, #8
 800e852:	9301      	str	r3, [sp, #4]
 800e854:	f7ff fc9e 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e858:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e85c:	8822      	ldrh	r2, [r4, #0]
 800e85e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e862:	1ad2      	subs	r2, r2, r3
 800e864:	8863      	ldrh	r3, [r4, #2]
 800e866:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e86a:	1a5b      	subs	r3, r3, r1
 800e86c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e870:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e874:	aa01      	add	r2, sp, #4
 800e876:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e87a:	4630      	mov	r0, r6
 800e87c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e880:	a904      	add	r1, sp, #16
 800e882:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e886:	f7fc fbb5 	bl	800aff4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e88a:	9a01      	ldr	r2, [sp, #4]
 800e88c:	b11a      	cbz	r2, 800e896 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e88e:	4621      	mov	r1, r4
 800e890:	4628      	mov	r0, r5
 800e892:	f7ff fed5 	bl	800e640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e896:	b006      	add	sp, #24
 800e898:	bd70      	pop	{r4, r5, r6, pc}

0800e89a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e89a:	4602      	mov	r2, r0
 800e89c:	b530      	push	{r4, r5, lr}
 800e89e:	4604      	mov	r4, r0
 800e8a0:	b085      	sub	sp, #20
 800e8a2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e8a6:	460d      	mov	r5, r1
 800e8a8:	466b      	mov	r3, sp
 800e8aa:	6851      	ldr	r1, [r2, #4]
 800e8ac:	c303      	stmia	r3!, {r0, r1}
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	4668      	mov	r0, sp
 800e8b2:	f7fc fac7 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 800e8b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e8ba:	b12b      	cbz	r3, 800e8c8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e8bc:	4669      	mov	r1, sp
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f7ff ffbf 	bl	800e842 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e8c4:	b005      	add	sp, #20
 800e8c6:	bd30      	pop	{r4, r5, pc}
 800e8c8:	3404      	adds	r4, #4
 800e8ca:	a802      	add	r0, sp, #8
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	f7ff fc61 	bl	800e194 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e8d2:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8d6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e8da:	4669      	mov	r1, sp
 800e8dc:	4620      	mov	r0, r4
 800e8de:	1a9b      	subs	r3, r3, r2
 800e8e0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e8e4:	f8ad 3000 	strh.w	r3, [sp]
 800e8e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e8ec:	1a9b      	subs	r3, r3, r2
 800e8ee:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e8f2:	f7fc fb46 	bl	800af82 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e8f6:	e7e5      	b.n	800e8c4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e8f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	680a      	ldr	r2, [r1, #0]
 800e8fc:	1d01      	adds	r1, r0, #4
 800e8fe:	6992      	ldr	r2, [r2, #24]
 800e900:	4618      	mov	r0, r3
 800e902:	4710      	bx	r2

0800e904 <_ZN8touchgfx12TextProviderC1Ev>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	2500      	movs	r5, #0
 800e908:	2302      	movs	r3, #2
 800e90a:	4604      	mov	r4, r0
 800e90c:	220e      	movs	r2, #14
 800e90e:	7403      	strb	r3, [r0, #16]
 800e910:	4629      	mov	r1, r5
 800e912:	6145      	str	r5, [r0, #20]
 800e914:	7605      	strb	r5, [r0, #24]
 800e916:	83c5      	strh	r5, [r0, #30]
 800e918:	8405      	strh	r5, [r0, #32]
 800e91a:	86c5      	strh	r5, [r0, #54]	; 0x36
 800e91c:	8705      	strh	r5, [r0, #56]	; 0x38
 800e91e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800e920:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800e924:	e9c0 5500 	strd	r5, r5, [r0]
 800e928:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800e92c:	304c      	adds	r0, #76	; 0x4c
 800e92e:	f009 fad7 	bl	8017ee0 <memset>
 800e932:	2301      	movs	r3, #1
 800e934:	4620      	mov	r0, r4
 800e936:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800e93a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800e93e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800e942:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800e946:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800e94a:	f7f4 f841 	bl	80029d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e94e:	4620      	mov	r0, r4
 800e950:	bd38      	pop	{r3, r4, r5, pc}

0800e952 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e952:	b530      	push	{r4, r5, lr}
 800e954:	2500      	movs	r5, #0
 800e956:	2401      	movs	r4, #1
 800e958:	6843      	ldr	r3, [r0, #4]
 800e95a:	b913      	cbnz	r3, 800e962 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e95c:	6803      	ldr	r3, [r0, #0]
 800e95e:	b313      	cbz	r3, 800e9a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e960:	6043      	str	r3, [r0, #4]
 800e962:	7e03      	ldrb	r3, [r0, #24]
 800e964:	b143      	cbz	r3, 800e978 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e966:	6943      	ldr	r3, [r0, #20]
 800e968:	b12b      	cbz	r3, 800e976 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e96a:	881a      	ldrh	r2, [r3, #0]
 800e96c:	b11a      	cbz	r2, 800e976 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e96e:	1c9a      	adds	r2, r3, #2
 800e970:	6142      	str	r2, [r0, #20]
 800e972:	8818      	ldrh	r0, [r3, #0]
 800e974:	bd30      	pop	{r4, r5, pc}
 800e976:	7605      	strb	r5, [r0, #24]
 800e978:	6843      	ldr	r3, [r0, #4]
 800e97a:	8819      	ldrh	r1, [r3, #0]
 800e97c:	b199      	cbz	r1, 800e9a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e97e:	1c9a      	adds	r2, r3, #2
 800e980:	2902      	cmp	r1, #2
 800e982:	6042      	str	r2, [r0, #4]
 800e984:	d1f5      	bne.n	800e972 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e986:	7c03      	ldrb	r3, [r0, #16]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d8e5      	bhi.n	800e958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e98c:	1c5a      	adds	r2, r3, #1
 800e98e:	3302      	adds	r3, #2
 800e990:	7402      	strb	r2, [r0, #16]
 800e992:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e996:	6143      	str	r3, [r0, #20]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d0dd      	beq.n	800e958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d0da      	beq.n	800e958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9a2:	7604      	strb	r4, [r0, #24]
 800e9a4:	e7d8      	b.n	800e958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	e7e4      	b.n	800e974 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e9aa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e9aa:	6001      	str	r1, [r0, #0]
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	b430      	push	{r4, r5}
 800e9b0:	6041      	str	r1, [r0, #4]
 800e9b2:	6815      	ldr	r5, [r2, #0]
 800e9b4:	6085      	str	r5, [r0, #8]
 800e9b6:	6852      	ldr	r2, [r2, #4]
 800e9b8:	6443      	str	r3, [r0, #68]	; 0x44
 800e9ba:	9b02      	ldr	r3, [sp, #8]
 800e9bc:	60c2      	str	r2, [r0, #12]
 800e9be:	7401      	strb	r1, [r0, #16]
 800e9c0:	6141      	str	r1, [r0, #20]
 800e9c2:	7601      	strb	r1, [r0, #24]
 800e9c4:	8701      	strh	r1, [r0, #56]	; 0x38
 800e9c6:	8401      	strh	r1, [r0, #32]
 800e9c8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800e9cc:	6483      	str	r3, [r0, #72]	; 0x48
 800e9ce:	bc30      	pop	{r4, r5}
 800e9d0:	f7f3 bffe 	b.w	80029d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e9d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	4608      	mov	r0, r1
 800e9da:	b1f1      	cbz	r1, 800ea1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e9dc:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	f101 0708 	add.w	r7, r1, #8
 800e9e6:	4622      	mov	r2, r4
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	3308      	adds	r3, #8
 800e9ec:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e9f0:	4626      	mov	r6, r4
 800e9f2:	42bb      	cmp	r3, r7
 800e9f4:	c603      	stmia	r6!, {r0, r1}
 800e9f6:	4634      	mov	r4, r6
 800e9f8:	d1f6      	bne.n	800e9e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e9fa:	6818      	ldr	r0, [r3, #0]
 800e9fc:	6030      	str	r0, [r6, #0]
 800e9fe:	4610      	mov	r0, r2
 800ea00:	889b      	ldrh	r3, [r3, #4]
 800ea02:	80b3      	strh	r3, [r6, #4]
 800ea04:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800ea08:	015b      	lsls	r3, r3, #5
 800ea0a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800ea0e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800ea12:	430b      	orrs	r3, r1
 800ea14:	425b      	negs	r3, r3
 800ea16:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800ea1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	460c      	mov	r4, r1
 800ea20:	6811      	ldr	r1, [r2, #0]
 800ea22:	4610      	mov	r0, r2
 800ea24:	68cd      	ldr	r5, [r1, #12]
 800ea26:	4619      	mov	r1, r3
 800ea28:	47a8      	blx	r5
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	bf08      	it	eq
 800ea2e:	4620      	moveq	r0, r4
 800ea30:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea36:	4604      	mov	r4, r0
 800ea38:	4615      	mov	r5, r2
 800ea3a:	4608      	mov	r0, r1
 800ea3c:	b93a      	cbnz	r2, 800ea4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800ea3e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800ea42:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800ea46:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea4e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800ea52:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800ea56:	8893      	ldrh	r3, [r2, #4]
 800ea58:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800ea5c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800ea60:	79ee      	ldrb	r6, [r5, #7]
 800ea62:	4316      	orrs	r6, r2
 800ea64:	19da      	adds	r2, r3, r7
 800ea66:	b291      	uxth	r1, r2
 800ea68:	b2b7      	uxth	r7, r6
 800ea6a:	291d      	cmp	r1, #29
 800ea6c:	d87b      	bhi.n	800eb66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800ea6e:	2201      	movs	r2, #1
 800ea70:	10f6      	asrs	r6, r6, #3
 800ea72:	408a      	lsls	r2, r1
 800ea74:	4974      	ldr	r1, [pc, #464]	; (800ec48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800ea76:	420a      	tst	r2, r1
 800ea78:	d12e      	bne.n	800ead8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800ea7a:	f412 7f60 	tst.w	r2, #896	; 0x380
 800ea7e:	d072      	beq.n	800eb66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800ea80:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800ea84:	462b      	mov	r3, r5
 800ea86:	f105 0e08 	add.w	lr, r5, #8
 800ea8a:	4615      	mov	r5, r2
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	3308      	adds	r3, #8
 800ea90:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800ea94:	4694      	mov	ip, r2
 800ea96:	4573      	cmp	r3, lr
 800ea98:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800ea9c:	4662      	mov	r2, ip
 800ea9e:	d1f5      	bne.n	800ea8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800eaa0:	6818      	ldr	r0, [r3, #0]
 800eaa2:	f8cc 0000 	str.w	r0, [ip]
 800eaa6:	889b      	ldrh	r3, [r3, #4]
 800eaa8:	f8ac 3004 	strh.w	r3, [ip, #4]
 800eaac:	b2b3      	uxth	r3, r6
 800eaae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800eab2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800eab6:	1aca      	subs	r2, r1, r3
 800eab8:	1bcf      	subs	r7, r1, r7
 800eaba:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800eabe:	b292      	uxth	r2, r2
 800eac0:	1afb      	subs	r3, r7, r3
 800eac2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800eac6:	10d2      	asrs	r2, r2, #3
 800eac8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800eacc:	4302      	orrs	r2, r0
 800eace:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800ead2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800ead6:	e7b8      	b.n	800ea4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800ead8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800eada:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800eade:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800eae0:	f640 6333 	movw	r3, #3635	; 0xe33
 800eae4:	4299      	cmp	r1, r3
 800eae6:	d110      	bne.n	800eb0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800eae8:	6803      	ldr	r3, [r0, #0]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	4798      	blx	r3
 800eaee:	7b41      	ldrb	r1, [r0, #13]
 800eaf0:	00cb      	lsls	r3, r1, #3
 800eaf2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800eaf6:	7a03      	ldrb	r3, [r0, #8]
 800eaf8:	0648      	lsls	r0, r1, #25
 800eafa:	ea43 0302 	orr.w	r3, r3, r2
 800eafe:	bf44      	itt	mi
 800eb00:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800eb04:	b21b      	sxthmi	r3, r3
 800eb06:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eb0a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800eb0e:	462a      	mov	r2, r5
 800eb10:	f105 0c08 	add.w	ip, r5, #8
 800eb14:	443b      	add	r3, r7
 800eb16:	4433      	add	r3, r6
 800eb18:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	4635      	mov	r5, r6
 800eb20:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eb24:	6810      	ldr	r0, [r2, #0]
 800eb26:	3208      	adds	r2, #8
 800eb28:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800eb2c:	4637      	mov	r7, r6
 800eb2e:	4562      	cmp	r2, ip
 800eb30:	c703      	stmia	r7!, {r0, r1}
 800eb32:	463e      	mov	r6, r7
 800eb34:	d1f6      	bne.n	800eb24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800eb36:	6810      	ldr	r0, [r2, #0]
 800eb38:	6038      	str	r0, [r7, #0]
 800eb3a:	8892      	ldrh	r2, [r2, #4]
 800eb3c:	80ba      	strh	r2, [r7, #4]
 800eb3e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eb42:	10db      	asrs	r3, r3, #3
 800eb44:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800eb48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800eb50:	4313      	orrs	r3, r2
 800eb52:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800eb56:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800eb5a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800eb5e:	1a9b      	subs	r3, r3, r2
 800eb60:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800eb64:	e771      	b.n	800ea4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800eb66:	f023 0204 	bic.w	r2, r3, #4
 800eb6a:	f640 611b 	movw	r1, #3611	; 0xe1b
 800eb6e:	428a      	cmp	r2, r1
 800eb70:	d003      	beq.n	800eb7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 800eb72:	f640 621d 	movw	r2, #3613	; 0xe1d
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d120      	bne.n	800ebbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	4629      	mov	r1, r5
 800eb80:	4620      	mov	r0, r4
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	f7ff ff4a 	bl	800ea1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800eb88:	7b41      	ldrb	r1, [r0, #13]
 800eb8a:	00cb      	lsls	r3, r1, #3
 800eb8c:	0649      	lsls	r1, r1, #25
 800eb8e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800eb92:	7a03      	ldrb	r3, [r0, #8]
 800eb94:	ea43 0302 	orr.w	r3, r3, r2
 800eb98:	bf44      	itt	mi
 800eb9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800eb9e:	b21b      	sxthmi	r3, r3
 800eba0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eba4:	7b6b      	ldrb	r3, [r5, #13]
 800eba6:	7aaa      	ldrb	r2, [r5, #10]
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	115a      	asrs	r2, r3, #5
 800ebb2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800ebb6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800ebba:	e035      	b.n	800ec28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800ebbc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800ebc0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800ebc4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800ebc8:	7a2a      	ldrb	r2, [r5, #8]
 800ebca:	ea42 0201 	orr.w	r2, r2, r1
 800ebce:	f640 6109 	movw	r1, #3593	; 0xe09
 800ebd2:	bf1c      	itt	ne
 800ebd4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800ebd8:	b212      	sxthne	r2, r2
 800ebda:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800ebde:	f023 0210 	bic.w	r2, r3, #16
 800ebe2:	428a      	cmp	r2, r1
 800ebe4:	d003      	beq.n	800ebee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800ebe6:	f640 6213 	movw	r2, #3603	; 0xe13
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d129      	bne.n	800ec42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800ebee:	7b6e      	ldrb	r6, [r5, #13]
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	0076      	lsls	r6, r6, #1
 800ebf4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800ebf8:	7aae      	ldrb	r6, [r5, #10]
 800ebfa:	4316      	orrs	r6, r2
 800ebfc:	f640 6213 	movw	r2, #3603	; 0xe13
 800ec00:	4293      	cmp	r3, r2
 800ec02:	4602      	mov	r2, r0
 800ec04:	4620      	mov	r0, r4
 800ec06:	bf16      	itet	ne
 800ec08:	f103 33ff 	addne.w	r3, r3, #4294967295
 800ec0c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800ec10:	b29b      	uxthne	r3, r3
 800ec12:	f7ff ff03 	bl	800ea1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ec16:	7b43      	ldrb	r3, [r0, #13]
 800ec18:	7a82      	ldrb	r2, [r0, #10]
 800ec1a:	005b      	lsls	r3, r3, #1
 800ec1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec20:	4313      	orrs	r3, r2
 800ec22:	1af6      	subs	r6, r6, r3
 800ec24:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800ec28:	7b69      	ldrb	r1, [r5, #13]
 800ec2a:	00cb      	lsls	r3, r1, #3
 800ec2c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ec30:	7a2b      	ldrb	r3, [r5, #8]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	064a      	lsls	r2, r1, #25
 800ec36:	bf44      	itt	mi
 800ec38:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ec3c:	b21b      	sxthmi	r3, r3
 800ec3e:	1bdb      	subs	r3, r3, r7
 800ec40:	e747      	b.n	800ead2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800ec42:	2300      	movs	r3, #0
 800ec44:	e7b7      	b.n	800ebb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 800ec46:	bf00      	nop
 800ec48:	3fc00079 	.word	0x3fc00079

0800ec4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800ec4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec50:	4604      	mov	r4, r0
 800ec52:	b942      	cbnz	r2, 800ec66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800ec54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec58:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800ec5c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800ec60:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800ec64:	e047      	b.n	800ecf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ec66:	7b51      	ldrb	r1, [r2, #13]
 800ec68:	8893      	ldrh	r3, [r2, #4]
 800ec6a:	010d      	lsls	r5, r1, #4
 800ec6c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800ec70:	79d5      	ldrb	r5, [r2, #7]
 800ec72:	4305      	orrs	r5, r0
 800ec74:	2d04      	cmp	r5, #4
 800ec76:	bfcc      	ite	gt
 800ec78:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800ec7c:	f04f 0e01 	movle.w	lr, #1
 800ec80:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800ec84:	f200 80ab 	bhi.w	800edde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800ec88:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800ec8c:	4283      	cmp	r3, r0
 800ec8e:	d216      	bcs.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec90:	f240 605b 	movw	r0, #1627	; 0x65b
 800ec94:	4283      	cmp	r3, r0
 800ec96:	d859      	bhi.n	800ed4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800ec98:	f240 6057 	movw	r0, #1623	; 0x657
 800ec9c:	4283      	cmp	r3, r0
 800ec9e:	d20e      	bcs.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eca0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800eca4:	d24a      	bcs.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800eca6:	f240 604e 	movw	r0, #1614	; 0x64e
 800ecaa:	4283      	cmp	r3, r0
 800ecac:	d207      	bcs.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecae:	f240 601a 	movw	r0, #1562	; 0x61a
 800ecb2:	4283      	cmp	r3, r0
 800ecb4:	d02a      	beq.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ecb6:	d821      	bhi.n	800ecfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800ecb8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800ecbc:	d35b      	bcc.n	800ed76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ecbe:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800ecc2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ecc6:	f040 80d0 	bne.w	800ee6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ecca:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800ecce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ecd2:	f040 80ca 	bne.w	800ee6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ecd6:	00cb      	lsls	r3, r1, #3
 800ecd8:	0649      	lsls	r1, r1, #25
 800ecda:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ecde:	7a13      	ldrb	r3, [r2, #8]
 800ece0:	ea43 0300 	orr.w	r3, r3, r0
 800ece4:	bf44      	itt	mi
 800ece6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ecea:	b21b      	sxthmi	r3, r3
 800ecec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ecf0:	1b5d      	subs	r5, r3, r5
 800ecf2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800ecf6:	4610      	mov	r0, r2
 800ecf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecfc:	f240 604b 	movw	r0, #1611	; 0x64b
 800ed00:	4283      	cmp	r3, r0
 800ed02:	d338      	bcc.n	800ed76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ed04:	f240 604c 	movw	r0, #1612	; 0x64c
 800ed08:	4283      	cmp	r3, r0
 800ed0a:	d9d8      	bls.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed0c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800ed10:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800ed14:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ed18:	f040 80f3 	bne.w	800ef02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ed1c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ed20:	f040 80ef 	bne.w	800ef02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ed24:	00cb      	lsls	r3, r1, #3
 800ed26:	064e      	lsls	r6, r1, #25
 800ed28:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ed2c:	7a13      	ldrb	r3, [r2, #8]
 800ed2e:	ea43 0300 	orr.w	r3, r3, r0
 800ed32:	bf44      	itt	mi
 800ed34:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ed38:	b21b      	sxthmi	r3, r3
 800ed3a:	e7d9      	b.n	800ecf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ed3c:	f240 6054 	movw	r0, #1620	; 0x654
 800ed40:	4283      	cmp	r3, r0
 800ed42:	d8e3      	bhi.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed44:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800ed48:	d9e0      	bls.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed4a:	e7b8      	b.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed4c:	f240 6074 	movw	r0, #1652	; 0x674
 800ed50:	4283      	cmp	r3, r0
 800ed52:	d0b4      	beq.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed54:	d82d      	bhi.n	800edb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ed56:	f240 605e 	movw	r0, #1630	; 0x65e
 800ed5a:	4283      	cmp	r3, r0
 800ed5c:	d804      	bhi.n	800ed68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ed5e:	f240 605d 	movw	r0, #1629	; 0x65d
 800ed62:	4283      	cmp	r3, r0
 800ed64:	d3d2      	bcc.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed66:	e7aa      	b.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed68:	f240 605f 	movw	r0, #1631	; 0x65f
 800ed6c:	4283      	cmp	r3, r0
 800ed6e:	d0cd      	beq.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed70:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800ed74:	d0a3      	beq.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed76:	00cb      	lsls	r3, r1, #3
 800ed78:	0649      	lsls	r1, r1, #25
 800ed7a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ed7e:	7a13      	ldrb	r3, [r2, #8]
 800ed80:	ea43 0300 	orr.w	r3, r3, r0
 800ed84:	bf44      	itt	mi
 800ed86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ed8a:	b21b      	sxthmi	r3, r3
 800ed8c:	1b5d      	subs	r5, r3, r5
 800ed8e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ed92:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800ed96:	7b53      	ldrb	r3, [r2, #13]
 800ed98:	015b      	lsls	r3, r3, #5
 800ed9a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800ed9e:	7993      	ldrb	r3, [r2, #6]
 800eda0:	430b      	orrs	r3, r1
 800eda2:	2105      	movs	r1, #5
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	fb93 f3f1 	sdiv	r3, r3, r1
 800edaa:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800edae:	440b      	add	r3, r1
 800edb0:	e756      	b.n	800ec60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800edb2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800edb6:	4283      	cmp	r3, r0
 800edb8:	d809      	bhi.n	800edce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800edba:	f240 60df 	movw	r0, #1759	; 0x6df
 800edbe:	4283      	cmp	r3, r0
 800edc0:	f4bf af7d 	bcs.w	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edc4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800edc8:	2b05      	cmp	r3, #5
 800edca:	d8d4      	bhi.n	800ed76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800edcc:	e777      	b.n	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edce:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800edd2:	4283      	cmp	r3, r0
 800edd4:	d09a      	beq.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800edd6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800edda:	4283      	cmp	r3, r0
 800eddc:	e7ca      	b.n	800ed74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800edde:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800ede2:	d22b      	bcs.n	800ee3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800ede4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800ede8:	4283      	cmp	r3, r0
 800edea:	d28f      	bcs.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800edec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800edf0:	4283      	cmp	r3, r0
 800edf2:	d816      	bhi.n	800ee22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800edf4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800edf8:	4283      	cmp	r3, r0
 800edfa:	f4bf af60 	bcs.w	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edfe:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800ee02:	4283      	cmp	r3, r0
 800ee04:	d80a      	bhi.n	800ee1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ee06:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800ee0a:	4283      	cmp	r3, r0
 800ee0c:	f4bf af57 	bcs.w	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee10:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800ee14:	4283      	cmp	r3, r0
 800ee16:	f43f af79 	beq.w	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee1a:	e7ac      	b.n	800ed76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ee1c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800ee20:	e7f8      	b.n	800ee14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ee22:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800ee26:	4283      	cmp	r3, r0
 800ee28:	d802      	bhi.n	800ee30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ee2a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ee2e:	e798      	b.n	800ed62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ee30:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800ee34:	4283      	cmp	r3, r0
 800ee36:	f47f af42 	bne.w	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee3a:	e767      	b.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee3c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800ee40:	4283      	cmp	r3, r0
 800ee42:	f43f af63 	beq.w	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee46:	d802      	bhi.n	800ee4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ee48:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800ee4c:	e7f2      	b.n	800ee34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ee4e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800ee52:	4283      	cmp	r3, r0
 800ee54:	d805      	bhi.n	800ee62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ee56:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800ee5a:	4283      	cmp	r3, r0
 800ee5c:	f4ff af2f 	bcc.w	800ecbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee60:	e754      	b.n	800ed0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee62:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800ee66:	4283      	cmp	r3, r0
 800ee68:	e7af      	b.n	800edca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ee6a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800ee6e:	4617      	mov	r7, r2
 800ee70:	f102 0808 	add.w	r8, r2, #8
 800ee74:	4666      	mov	r6, ip
 800ee76:	6838      	ldr	r0, [r7, #0]
 800ee78:	3708      	adds	r7, #8
 800ee7a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ee7e:	46e6      	mov	lr, ip
 800ee80:	4547      	cmp	r7, r8
 800ee82:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ee86:	46f4      	mov	ip, lr
 800ee88:	d1f5      	bne.n	800ee76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800ee8a:	6838      	ldr	r0, [r7, #0]
 800ee8c:	f8ce 0000 	str.w	r0, [lr]
 800ee90:	88b9      	ldrh	r1, [r7, #4]
 800ee92:	f8ae 1004 	strh.w	r1, [lr, #4]
 800ee96:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800ee9a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ee9e:	d009      	beq.n	800eeb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800eea0:	7b51      	ldrb	r1, [r2, #13]
 800eea2:	7992      	ldrb	r2, [r2, #6]
 800eea4:	0149      	lsls	r1, r1, #5
 800eea6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800eeaa:	4311      	orrs	r1, r2
 800eeac:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800eeb0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800eeb4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800eeb8:	b2ad      	uxth	r5, r5
 800eeba:	d00d      	beq.n	800eed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800eebc:	442b      	add	r3, r5
 800eebe:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800eec8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eecc:	10db      	asrs	r3, r3, #3
 800eece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eed2:	4313      	orrs	r3, r2
 800eed4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800eed8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800eedc:	00cb      	lsls	r3, r1, #3
 800eede:	064f      	lsls	r7, r1, #25
 800eee0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800eee4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800eee8:	ea43 0302 	orr.w	r3, r3, r2
 800eeec:	bf44      	itt	mi
 800eeee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800eef2:	b21b      	sxthmi	r3, r3
 800eef4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eef8:	1b5b      	subs	r3, r3, r5
 800eefa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800eefe:	4632      	mov	r2, r6
 800ef00:	e6f9      	b.n	800ecf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ef02:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800ef06:	4617      	mov	r7, r2
 800ef08:	f102 0908 	add.w	r9, r2, #8
 800ef0c:	4666      	mov	r6, ip
 800ef0e:	6838      	ldr	r0, [r7, #0]
 800ef10:	3708      	adds	r7, #8
 800ef12:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ef16:	46e0      	mov	r8, ip
 800ef18:	454f      	cmp	r7, r9
 800ef1a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ef1e:	46c4      	mov	ip, r8
 800ef20:	d1f5      	bne.n	800ef0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800ef22:	6838      	ldr	r0, [r7, #0]
 800ef24:	f8c8 0000 	str.w	r0, [r8]
 800ef28:	88b9      	ldrh	r1, [r7, #4]
 800ef2a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ef2e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800ef32:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ef36:	d009      	beq.n	800ef4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800ef38:	7b51      	ldrb	r1, [r2, #13]
 800ef3a:	7992      	ldrb	r2, [r2, #6]
 800ef3c:	0149      	lsls	r1, r1, #5
 800ef3e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800ef42:	4311      	orrs	r1, r2
 800ef44:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ef48:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800ef4c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ef50:	d00e      	beq.n	800ef70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800ef52:	eba3 030e 	sub.w	r3, r3, lr
 800ef56:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ef60:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800ef64:	10db      	asrs	r3, r3, #3
 800ef66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800ef70:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800ef74:	00cb      	lsls	r3, r1, #3
 800ef76:	0648      	lsls	r0, r1, #25
 800ef78:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ef7c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800ef80:	ea43 0302 	orr.w	r3, r3, r2
 800ef84:	bf44      	itt	mi
 800ef86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ef8a:	b21b      	sxthmi	r3, r3
 800ef8c:	1b5d      	subs	r5, r3, r5
 800ef8e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800ef92:	e7b4      	b.n	800eefe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800ef94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800ef94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef98:	461e      	mov	r6, r3
 800ef9a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	4617      	mov	r7, r2
 800efa0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800efa4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800efa8:	f7f3 fcc0 	bl	800292c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800efac:	4605      	mov	r5, r0
 800efae:	b918      	cbnz	r0, 800efb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800efb0:	6030      	str	r0, [r6, #0]
 800efb2:	4628      	mov	r0, r5
 800efb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	4601      	mov	r1, r0
 800efbc:	4638      	mov	r0, r7
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	4798      	blx	r3
 800efc2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800efc6:	4602      	mov	r2, r0
 800efc8:	6030      	str	r0, [r6, #0]
 800efca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800efce:	d213      	bcs.n	800eff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800efd0:	4643      	mov	r3, r8
 800efd2:	4639      	mov	r1, r7
 800efd4:	4620      	mov	r0, r4
 800efd6:	f7ff fe39 	bl	800ec4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800efda:	6030      	str	r0, [r6, #0]
 800efdc:	6833      	ldr	r3, [r6, #0]
 800efde:	b143      	cbz	r3, 800eff2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800efe0:	7b5a      	ldrb	r2, [r3, #13]
 800efe2:	7a9b      	ldrb	r3, [r3, #10]
 800efe4:	0052      	lsls	r2, r2, #1
 800efe6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800efea:	4313      	orrs	r3, r2
 800efec:	bf0c      	ite	eq
 800efee:	2301      	moveq	r3, #1
 800eff0:	2300      	movne	r3, #0
 800eff2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800eff6:	e7dc      	b.n	800efb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800eff8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800effc:	b29b      	uxth	r3, r3
 800effe:	2b7f      	cmp	r3, #127	; 0x7f
 800f000:	d804      	bhi.n	800f00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f002:	4639      	mov	r1, r7
 800f004:	4620      	mov	r0, r4
 800f006:	f7ff fd15 	bl	800ea34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f00a:	e7e6      	b.n	800efda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f00c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800f010:	2b00      	cmp	r3, #0
 800f012:	d0e3      	beq.n	800efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f014:	f640 1302 	movw	r3, #2306	; 0x902
 800f018:	429d      	cmp	r5, r3
 800f01a:	d1df      	bne.n	800efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f01c:	4601      	mov	r1, r0
 800f01e:	4620      	mov	r0, r4
 800f020:	f7ff fcd8 	bl	800e9d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f024:	e7d9      	b.n	800efda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f026 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800f026:	b510      	push	{r4, lr}
 800f028:	4604      	mov	r4, r0
 800f02a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800f02e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f030:	b1e1      	cbz	r1, 800f06c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800f032:	2b0a      	cmp	r3, #10
 800f034:	d02d      	beq.n	800f092 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800f036:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800f038:	3901      	subs	r1, #1
 800f03a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800f03e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800f040:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800f044:	1c51      	adds	r1, r2, #1
 800f046:	b289      	uxth	r1, r1
 800f048:	2901      	cmp	r1, #1
 800f04a:	bf8a      	itet	hi
 800f04c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f050:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800f052:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	8722      	strh	r2, [r4, #56]	; 0x38
 800f058:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f05a:	4413      	add	r3, r2
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	2b09      	cmp	r3, #9
 800f060:	bf88      	it	hi
 800f062:	3b0a      	subhi	r3, #10
 800f064:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f068:	8458      	strh	r0, [r3, #34]	; 0x22
 800f06a:	e7de      	b.n	800f02a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800f06c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f06e:	2b0a      	cmp	r3, #10
 800f070:	d00f      	beq.n	800f092 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800f072:	4620      	mov	r0, r4
 800f074:	f7ff fc6d 	bl	800e952 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800f078:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	8722      	strh	r2, [r4, #56]	; 0x38
 800f07e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f080:	4413      	add	r3, r2
 800f082:	b29b      	uxth	r3, r3
 800f084:	2b09      	cmp	r3, #9
 800f086:	bf88      	it	hi
 800f088:	3b0a      	subhi	r3, #10
 800f08a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f08e:	8458      	strh	r0, [r3, #34]	; 0x22
 800f090:	e7ec      	b.n	800f06c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800f092:	bd10      	pop	{r4, pc}

0800f094 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800f098:	4604      	mov	r4, r0
 800f09a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800f09e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800f0a0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800f0a2:	3a01      	subs	r2, #1
 800f0a4:	8702      	strh	r2, [r0, #56]	; 0x38
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	b292      	uxth	r2, r2
 800f0aa:	2a09      	cmp	r2, #9
 800f0ac:	bf8a      	itet	hi
 800f0ae:	3b09      	subhi	r3, #9
 800f0b0:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800f0b2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800f0b4:	f7ff ffb7 	bl	800f026 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800f0b8:	8c23      	ldrh	r3, [r4, #32]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	bf9c      	itt	ls
 800f0be:	3301      	addls	r3, #1
 800f0c0:	8423      	strhls	r3, [r4, #32]
 800f0c2:	8be3      	ldrh	r3, [r4, #30]
 800f0c4:	b90b      	cbnz	r3, 800f0ca <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800f0c6:	2302      	movs	r3, #2
 800f0c8:	83e3      	strh	r3, [r4, #30]
 800f0ca:	8be3      	ldrh	r3, [r4, #30]
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	83e3      	strh	r3, [r4, #30]
 800f0d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f0d8:	8365      	strh	r5, [r4, #26]
 800f0da:	bd38      	pop	{r3, r4, r5, pc}

0800f0dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800f0dc:	428a      	cmp	r2, r1
 800f0de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800f0e4:	d932      	bls.n	800f14c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800f0e6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800f0e8:	1a54      	subs	r4, r2, r1
 800f0ea:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800f0ee:	19ee      	adds	r6, r5, r7
 800f0f0:	fa1f fe84 	uxth.w	lr, r4
 800f0f4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800f0f8:	3e01      	subs	r6, #1
 800f0fa:	b2b4      	uxth	r4, r6
 800f0fc:	eba4 090e 	sub.w	r9, r4, lr
 800f100:	fa1f f989 	uxth.w	r9, r9
 800f104:	2c09      	cmp	r4, #9
 800f106:	4626      	mov	r6, r4
 800f108:	bf88      	it	hi
 800f10a:	f1a4 060a 	subhi.w	r6, r4, #10
 800f10e:	f1bc 0f00 	cmp.w	ip, #0
 800f112:	f104 34ff 	add.w	r4, r4, #4294967295
 800f116:	bf08      	it	eq
 800f118:	f04f 0c02 	moveq.w	ip, #2
 800f11c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f120:	b2a4      	uxth	r4, r4
 800f122:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f126:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800f12a:	454c      	cmp	r4, r9
 800f12c:	fa1f fc8c 	uxth.w	ip, ip
 800f130:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800f134:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800f138:	d1e4      	bne.n	800f104 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800f13a:	eba5 050e 	sub.w	r5, r5, lr
 800f13e:	eb0e 0408 	add.w	r4, lr, r8
 800f142:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800f146:	8705      	strh	r5, [r0, #56]	; 0x38
 800f148:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800f14c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800f14e:	250a      	movs	r5, #10
 800f150:	1a64      	subs	r4, r4, r1
 800f152:	4439      	add	r1, r7
 800f154:	b289      	uxth	r1, r1
 800f156:	8704      	strh	r4, [r0, #56]	; 0x38
 800f158:	2909      	cmp	r1, #9
 800f15a:	bf88      	it	hi
 800f15c:	390a      	subhi	r1, #10
 800f15e:	86c1      	strh	r1, [r0, #54]	; 0x36
 800f160:	b18a      	cbz	r2, 800f186 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800f162:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800f164:	3a01      	subs	r2, #1
 800f166:	3101      	adds	r1, #1
 800f168:	b292      	uxth	r2, r2
 800f16a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f16e:	8701      	strh	r1, [r0, #56]	; 0x38
 800f170:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800f172:	b901      	cbnz	r1, 800f176 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800f174:	86c5      	strh	r5, [r0, #54]	; 0x36
 800f176:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800f178:	3901      	subs	r1, #1
 800f17a:	b289      	uxth	r1, r1
 800f17c:	86c1      	strh	r1, [r0, #54]	; 0x36
 800f17e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f182:	844c      	strh	r4, [r1, #34]	; 0x22
 800f184:	e7ec      	b.n	800f160 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800f186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f18a:	f7ff bf4c 	b.w	800f026 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f18e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f18e:	b570      	push	{r4, r5, r6, lr}
 800f190:	2500      	movs	r5, #0
 800f192:	4295      	cmp	r5, r2
 800f194:	d011      	beq.n	800f1ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f196:	8bc4      	ldrh	r4, [r0, #30]
 800f198:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f19c:	4414      	add	r4, r2
 800f19e:	3c01      	subs	r4, #1
 800f1a0:	1b64      	subs	r4, r4, r5
 800f1a2:	b2a4      	uxth	r4, r4
 800f1a4:	2c01      	cmp	r4, #1
 800f1a6:	bf88      	it	hi
 800f1a8:	3c02      	subhi	r4, #2
 800f1aa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f1ae:	8b64      	ldrh	r4, [r4, #26]
 800f1b0:	42b4      	cmp	r4, r6
 800f1b2:	d117      	bne.n	800f1e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	b2ad      	uxth	r5, r5
 800f1b8:	e7eb      	b.n	800f192 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f1ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f1be:	2400      	movs	r4, #0
 800f1c0:	4413      	add	r3, r2
 800f1c2:	b2a2      	uxth	r2, r4
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	da0f      	bge.n	800f1e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f1c8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800f1ca:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f1ce:	3401      	adds	r4, #1
 800f1d0:	4432      	add	r2, r6
 800f1d2:	b292      	uxth	r2, r2
 800f1d4:	2a09      	cmp	r2, #9
 800f1d6:	bf88      	it	hi
 800f1d8:	3a0a      	subhi	r2, #10
 800f1da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f1de:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800f1e0:	42aa      	cmp	r2, r5
 800f1e2:	d0ee      	beq.n	800f1c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	bd70      	pop	{r4, r5, r6, pc}
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	e7fc      	b.n	800f1e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f1ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	4616      	mov	r6, r2
 800f1f4:	1c8c      	adds	r4, r1, #2
 800f1f6:	8809      	ldrh	r1, [r1, #0]
 800f1f8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f1fc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f200:	42b3      	cmp	r3, r6
 800f202:	d124      	bne.n	800f24e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f204:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f208:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f20c:	f001 070f 	and.w	r7, r1, #15
 800f210:	4652      	mov	r2, sl
 800f212:	f8cd 8000 	str.w	r8, [sp]
 800f216:	464b      	mov	r3, r9
 800f218:	4621      	mov	r1, r4
 800f21a:	4628      	mov	r0, r5
 800f21c:	f7ff ffb7 	bl	800f18e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f220:	4683      	mov	fp, r0
 800f222:	b168      	cbz	r0, 800f240 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f224:	eb0a 0109 	add.w	r1, sl, r9
 800f228:	463a      	mov	r2, r7
 800f22a:	4628      	mov	r0, r5
 800f22c:	4441      	add	r1, r8
 800f22e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f232:	4649      	mov	r1, r9
 800f234:	f7ff ff52 	bl	800f0dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f238:	4658      	mov	r0, fp
 800f23a:	b003      	add	sp, #12
 800f23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f240:	eb07 010a 	add.w	r1, r7, sl
 800f244:	4449      	add	r1, r9
 800f246:	4441      	add	r1, r8
 800f248:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f24c:	e7d2      	b.n	800f1f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f24e:	f04f 0b00 	mov.w	fp, #0
 800f252:	e7f1      	b.n	800f238 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f254 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f254:	b570      	push	{r4, r5, r6, lr}
 800f256:	8810      	ldrh	r0, [r2, #0]
 800f258:	4298      	cmp	r0, r3
 800f25a:	d817      	bhi.n	800f28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f25c:	1e48      	subs	r0, r1, #1
 800f25e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f262:	4298      	cmp	r0, r3
 800f264:	d312      	bcc.n	800f28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f266:	2400      	movs	r4, #0
 800f268:	428c      	cmp	r4, r1
 800f26a:	d20f      	bcs.n	800f28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f26c:	1860      	adds	r0, r4, r1
 800f26e:	1040      	asrs	r0, r0, #1
 800f270:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f274:	0085      	lsls	r5, r0, #2
 800f276:	42b3      	cmp	r3, r6
 800f278:	d902      	bls.n	800f280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f27a:	3001      	adds	r0, #1
 800f27c:	b284      	uxth	r4, r0
 800f27e:	e7f3      	b.n	800f268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f280:	d201      	bcs.n	800f286 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f282:	b281      	uxth	r1, r0
 800f284:	e7f0      	b.n	800f268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f286:	442a      	add	r2, r5
 800f288:	8850      	ldrh	r0, [r2, #2]
 800f28a:	bd70      	pop	{r4, r5, r6, pc}
 800f28c:	2000      	movs	r0, #0
 800f28e:	e7fc      	b.n	800f28a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f290 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f294:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800f296:	4604      	mov	r4, r0
 800f298:	260b      	movs	r6, #11
 800f29a:	886f      	ldrh	r7, [r5, #2]
 800f29c:	087f      	lsrs	r7, r7, #1
 800f29e:	3e01      	subs	r6, #1
 800f2a0:	d013      	beq.n	800f2ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f2a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f2a4:	462a      	mov	r2, r5
 800f2a6:	4639      	mov	r1, r7
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f2ae:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800f2b2:	4643      	mov	r3, r8
 800f2b4:	f7ff ffce 	bl	800f254 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f2b8:	b138      	cbz	r0, 800f2ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f2ba:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f2be:	4642      	mov	r2, r8
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f7ff ff93 	bl	800f1ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d1e9      	bne.n	800f29e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f2d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	694a      	ldr	r2, [r1, #20]
 800f2d4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800f2d6:	684b      	ldr	r3, [r1, #4]
 800f2d8:	1b54      	subs	r4, r2, r5
 800f2da:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800f2dc:	f000 8106 	beq.w	800f4ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f2e0:	1b9b      	subs	r3, r3, r6
 800f2e2:	d003      	beq.n	800f2ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f2e4:	4363      	muls	r3, r4
 800f2e6:	2210      	movs	r2, #16
 800f2e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2ec:	680c      	ldr	r4, [r1, #0]
 800f2ee:	698a      	ldr	r2, [r1, #24]
 800f2f0:	1b65      	subs	r5, r4, r5
 800f2f2:	f000 80fd 	beq.w	800f4f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f2f6:	1b92      	subs	r2, r2, r6
 800f2f8:	d003      	beq.n	800f302 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f2fa:	436a      	muls	r2, r5
 800f2fc:	2410      	movs	r4, #16
 800f2fe:	fb92 f2f4 	sdiv	r2, r2, r4
 800f302:	1a9b      	subs	r3, r3, r2
 800f304:	ed9f 4a89 	vldr	s8, [pc, #548]	; 800f52c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f30c:	460a      	mov	r2, r1
 800f30e:	ee07 3a90 	vmov	s15, r3
 800f312:	f100 040c 	add.w	r4, r0, #12
 800f316:	4603      	mov	r3, r0
 800f318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f31c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f320:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800f324:	eeb1 6a43 	vneg.f32	s12, s6
 800f328:	edd2 7a02 	vldr	s15, [r2, #8]
 800f32c:	3214      	adds	r2, #20
 800f32e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f332:	ece3 6a01 	vstmia	r3!, {s13}
 800f336:	429c      	cmp	r4, r3
 800f338:	ed52 7a02 	vldr	s15, [r2, #-8]
 800f33c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f340:	edc3 7a02 	vstr	s15, [r3, #8]
 800f344:	ed52 7a01 	vldr	s15, [r2, #-4]
 800f348:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f34c:	edc3 7a05 	vstr	s15, [r3, #20]
 800f350:	d1ea      	bne.n	800f328 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800f352:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f354:	698b      	ldr	r3, [r1, #24]
 800f356:	edd0 4a02 	vldr	s9, [r0, #8]
 800f35a:	1a9b      	subs	r3, r3, r2
 800f35c:	edd0 3a00 	vldr	s7, [r0]
 800f360:	edd0 6a01 	vldr	s13, [r0, #4]
 800f364:	ee07 3a90 	vmov	s15, r3
 800f368:	684b      	ldr	r3, [r1, #4]
 800f36a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f36e:	ed90 5a05 	vldr	s10, [r0, #20]
 800f372:	1a9b      	subs	r3, r3, r2
 800f374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f378:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800f37c:	ed90 2a03 	vldr	s4, [r0, #12]
 800f380:	ee07 3a10 	vmov	s14, r3
 800f384:	edd0 5a04 	vldr	s11, [r0, #16]
 800f388:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f38c:	ed90 1a07 	vldr	s2, [r0, #28]
 800f390:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f394:	edd0 2a06 	vldr	s5, [r0, #24]
 800f398:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f39c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800f3a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3a4:	ee32 5a45 	vsub.f32	s10, s4, s10
 800f3a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f3ac:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f3b0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800f3b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f3b6:	694a      	ldr	r2, [r1, #20]
 800f3b8:	1b13      	subs	r3, r2, r4
 800f3ba:	ee07 3a10 	vmov	s14, r3
 800f3be:	680b      	ldr	r3, [r1, #0]
 800f3c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3c4:	1b1b      	subs	r3, r3, r4
 800f3c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3ca:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800f3ce:	ee07 3a10 	vmov	s14, r3
 800f3d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3da:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f3de:	ee64 4a86 	vmul.f32	s9, s9, s12
 800f3e2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800f3e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f3e8:	698b      	ldr	r3, [r1, #24]
 800f3ea:	1a9b      	subs	r3, r3, r2
 800f3ec:	ee06 3a90 	vmov	s13, r3
 800f3f0:	684b      	ldr	r3, [r1, #4]
 800f3f2:	1a9b      	subs	r3, r3, r2
 800f3f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f3f8:	ee07 3a10 	vmov	s14, r3
 800f3fc:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f400:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f404:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800f408:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f40c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f410:	ee66 6a83 	vmul.f32	s13, s13, s6
 800f414:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 800f418:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f41a:	694a      	ldr	r2, [r1, #20]
 800f41c:	1b13      	subs	r3, r2, r4
 800f41e:	ee07 3a10 	vmov	s14, r3
 800f422:	680b      	ldr	r3, [r1, #0]
 800f424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f428:	1b1b      	subs	r3, r3, r4
 800f42a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f42e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800f432:	ee07 3a10 	vmov	s14, r3
 800f436:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f43a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f43e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f442:	edd0 5a08 	vldr	s11, [r0, #32]
 800f446:	ee31 1a65 	vsub.f32	s2, s2, s11
 800f44a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800f44e:	ee25 5a06 	vmul.f32	s10, s10, s12
 800f452:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800f456:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f458:	698b      	ldr	r3, [r1, #24]
 800f45a:	1a9b      	subs	r3, r3, r2
 800f45c:	ee07 3a10 	vmov	s14, r3
 800f460:	684b      	ldr	r3, [r1, #4]
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f468:	ee01 3a90 	vmov	s3, r3
 800f46c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f470:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800f474:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800f478:	ee61 1a84 	vmul.f32	s3, s3, s8
 800f47c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800f480:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f484:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800f488:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f48a:	694a      	ldr	r2, [r1, #20]
 800f48c:	1b13      	subs	r3, r2, r4
 800f48e:	ee03 3a10 	vmov	s6, r3
 800f492:	680b      	ldr	r3, [r1, #0]
 800f494:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f498:	1b1b      	subs	r3, r3, r4
 800f49a:	ee23 3a04 	vmul.f32	s6, s6, s8
 800f49e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800f4a2:	ee03 3a10 	vmov	s6, r3
 800f4a6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f4aa:	ee23 4a04 	vmul.f32	s8, s6, s8
 800f4ae:	eee1 5a04 	vfma.f32	s11, s2, s8
 800f4b2:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f4b6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800f4ba:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 800f4be:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800f4c2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ca:	dd13      	ble.n	800f4f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800f4cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4d0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800f4d4:	63c3      	str	r3, [r0, #60]	; 0x3c
 800f4d6:	eee3 7a87 	vfma.f32	s15, s7, s14
 800f4da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e2:	dd15      	ble.n	800f510 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800f4e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4e8:	6403      	str	r3, [r0, #64]	; 0x40
 800f4ea:	bd70      	pop	{r4, r5, r6, pc}
 800f4ec:	4623      	mov	r3, r4
 800f4ee:	e6fd      	b.n	800f2ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f4f0:	462a      	mov	r2, r5
 800f4f2:	e706      	b.n	800f302 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f4f4:	d502      	bpl.n	800f4fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800f4f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f4fa:	e7e9      	b.n	800f4d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800f4fc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800f500:	eea3 2a85 	vfma.f32	s4, s7, s10
 800f504:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800f508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50c:	dade      	bge.n	800f4cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800f50e:	e7f2      	b.n	800f4f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800f510:	d502      	bpl.n	800f518 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800f512:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f516:	e7e7      	b.n	800f4e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800f518:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800f51c:	eee3 4a86 	vfma.f32	s9, s7, s12
 800f520:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800f524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f528:	dadc      	bge.n	800f4e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800f52a:	e7f2      	b.n	800f512 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800f52c:	3d800000 	.word	0x3d800000

0800f530 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800f530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f534:	2714      	movs	r7, #20
 800f536:	435f      	muls	r7, r3
 800f538:	eb02 0c07 	add.w	ip, r2, r7
 800f53c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f540:	f115 0e0f 	adds.w	lr, r5, #15
 800f544:	f100 80a2 	bmi.w	800f68c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800f548:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800f54c:	9c08      	ldr	r4, [sp, #32]
 800f54e:	2614      	movs	r6, #20
 800f550:	f8c0 e014 	str.w	lr, [r0, #20]
 800f554:	4366      	muls	r6, r4
 800f556:	eb02 0806 	add.w	r8, r2, r6
 800f55a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f55e:	f115 040f 	adds.w	r4, r5, #15
 800f562:	f100 809f 	bmi.w	800f6a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800f566:	1124      	asrs	r4, r4, #4
 800f568:	eba4 040e 	sub.w	r4, r4, lr
 800f56c:	6184      	str	r4, [r0, #24]
 800f56e:	2c00      	cmp	r4, #0
 800f570:	f000 808a 	beq.w	800f688 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800f574:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800f578:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f57c:	5995      	ldr	r5, [r2, r6]
 800f57e:	eba4 0809 	sub.w	r8, r4, r9
 800f582:	59d4      	ldr	r4, [r2, r7]
 800f584:	eba5 0a04 	sub.w	sl, r5, r4
 800f588:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800f58c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800f590:	fb0e fe05 	mul.w	lr, lr, r5
 800f594:	fb0a ee19 	mls	lr, sl, r9, lr
 800f598:	fb08 e404 	mla	r4, r8, r4, lr
 800f59c:	3c01      	subs	r4, #1
 800f59e:	19a4      	adds	r4, r4, r6
 800f5a0:	f100 808c 	bmi.w	800f6bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800f5a4:	fb94 fef6 	sdiv	lr, r4, r6
 800f5a8:	fb06 441e 	mls	r4, r6, lr, r4
 800f5ac:	f8c0 e000 	str.w	lr, [r0]
 800f5b0:	6104      	str	r4, [r0, #16]
 800f5b2:	2d00      	cmp	r5, #0
 800f5b4:	f2c0 8095 	blt.w	800f6e2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800f5b8:	fb95 f4f6 	sdiv	r4, r5, r6
 800f5bc:	fb06 5514 	mls	r5, r6, r4, r5
 800f5c0:	6044      	str	r4, [r0, #4]
 800f5c2:	6085      	str	r5, [r0, #8]
 800f5c4:	60c6      	str	r6, [r0, #12]
 800f5c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f5ca:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f5ce:	6945      	ldr	r5, [r0, #20]
 800f5d0:	59d2      	ldr	r2, [r2, r7]
 800f5d2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800f5d6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800f704 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800f5da:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800f5de:	ee07 4a10 	vmov	s14, r4
 800f5e2:	6804      	ldr	r4, [r0, #0]
 800f5e4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800f5e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5ec:	ee07 2a90 	vmov	s15, r2
 800f5f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f5f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f5fc:	edd3 6a00 	vldr	s13, [r3]
 800f600:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f604:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800f608:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f60c:	edc0 6a07 	vstr	s13, [r0, #28]
 800f610:	edd0 6a01 	vldr	s13, [r0, #4]
 800f614:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 800f618:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f61c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800f620:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f624:	ed80 6a08 	vstr	s12, [r0, #32]
 800f628:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800f62a:	6242      	str	r2, [r0, #36]	; 0x24
 800f62c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 800f630:	ed93 6a03 	vldr	s12, [r3, #12]
 800f634:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f638:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800f63c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f640:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 800f644:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800f648:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800f64c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f650:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 800f654:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f656:	6302      	str	r2, [r0, #48]	; 0x30
 800f658:	ed93 6a06 	vldr	s12, [r3, #24]
 800f65c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 800f660:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f664:	eeb0 7a46 	vmov.f32	s14, s12
 800f668:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800f66c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f670:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800f674:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800f678:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800f67c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f680:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 800f684:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f686:	63c3      	str	r3, [r0, #60]	; 0x3c
 800f688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68c:	2410      	movs	r4, #16
 800f68e:	f1c5 0501 	rsb	r5, r5, #1
 800f692:	fb9e fef4 	sdiv	lr, lr, r4
 800f696:	f015 050f 	ands.w	r5, r5, #15
 800f69a:	bf18      	it	ne
 800f69c:	2501      	movne	r5, #1
 800f69e:	ebae 0e05 	sub.w	lr, lr, r5
 800f6a2:	e753      	b.n	800f54c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800f6a4:	f04f 0910 	mov.w	r9, #16
 800f6a8:	f1c5 0501 	rsb	r5, r5, #1
 800f6ac:	fb94 f4f9 	sdiv	r4, r4, r9
 800f6b0:	f015 050f 	ands.w	r5, r5, #15
 800f6b4:	bf18      	it	ne
 800f6b6:	2501      	movne	r5, #1
 800f6b8:	1b64      	subs	r4, r4, r5
 800f6ba:	e755      	b.n	800f568 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800f6bc:	4264      	negs	r4, r4
 800f6be:	fb94 fef6 	sdiv	lr, r4, r6
 800f6c2:	f1ce 0800 	rsb	r8, lr, #0
 800f6c6:	fb06 441e 	mls	r4, r6, lr, r4
 800f6ca:	f8c0 8000 	str.w	r8, [r0]
 800f6ce:	6104      	str	r4, [r0, #16]
 800f6d0:	2c00      	cmp	r4, #0
 800f6d2:	f43f af6e 	beq.w	800f5b2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800f6d6:	ea6f 0e0e 	mvn.w	lr, lr
 800f6da:	1b34      	subs	r4, r6, r4
 800f6dc:	f8c0 e000 	str.w	lr, [r0]
 800f6e0:	e766      	b.n	800f5b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800f6e2:	426d      	negs	r5, r5
 800f6e4:	fb95 f4f6 	sdiv	r4, r5, r6
 800f6e8:	f1c4 0e00 	rsb	lr, r4, #0
 800f6ec:	fb06 5514 	mls	r5, r6, r4, r5
 800f6f0:	f8c0 e004 	str.w	lr, [r0, #4]
 800f6f4:	6085      	str	r5, [r0, #8]
 800f6f6:	2d00      	cmp	r5, #0
 800f6f8:	f43f af64 	beq.w	800f5c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800f6fc:	43e4      	mvns	r4, r4
 800f6fe:	1b75      	subs	r5, r6, r5
 800f700:	6044      	str	r4, [r0, #4]
 800f702:	e75e      	b.n	800f5c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800f704:	3d800000 	.word	0x3d800000

0800f708 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800f708:	4b01      	ldr	r3, [pc, #4]	; (800f710 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800f70a:	6018      	str	r0, [r3, #0]
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	2400ae64 	.word	0x2400ae64

0800f714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800f714:	4b06      	ldr	r3, [pc, #24]	; (800f730 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800f716:	881a      	ldrh	r2, [r3, #0]
 800f718:	4282      	cmp	r2, r0
 800f71a:	d807      	bhi.n	800f72c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800f71c:	4b05      	ldr	r3, [pc, #20]	; (800f734 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	4413      	add	r3, r2
 800f722:	4298      	cmp	r0, r3
 800f724:	bfac      	ite	ge
 800f726:	2000      	movge	r0, #0
 800f728:	2001      	movlt	r0, #1
 800f72a:	4770      	bx	lr
 800f72c:	2000      	movs	r0, #0
 800f72e:	4770      	bx	lr
 800f730:	2400ae84 	.word	0x2400ae84
 800f734:	2400ae88 	.word	0x2400ae88

0800f738 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800f738:	b508      	push	{r3, lr}
 800f73a:	4601      	mov	r1, r0
 800f73c:	f7ff ffea 	bl	800f714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f740:	b118      	cbz	r0, 800f74a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800f742:	4b02      	ldr	r3, [pc, #8]	; (800f74c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800f74a:	bd08      	pop	{r3, pc}
 800f74c:	2400ae68 	.word	0x2400ae68

0800f750 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4604      	mov	r4, r0
 800f754:	f7ff ffde 	bl	800f714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f758:	b188      	cbz	r0, 800f77e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 800f75a:	4b09      	ldr	r3, [pc, #36]	; (800f780 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 800f75c:	881a      	ldrh	r2, [r3, #0]
 800f75e:	4b09      	ldr	r3, [pc, #36]	; (800f784 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 800f760:	1aa4      	subs	r4, r4, r2
 800f762:	220e      	movs	r2, #14
 800f764:	681d      	ldr	r5, [r3, #0]
 800f766:	4362      	muls	r2, r4
 800f768:	18ac      	adds	r4, r5, r2
 800f76a:	7b23      	ldrb	r3, [r4, #12]
 800f76c:	f013 0320 	ands.w	r3, r3, #32
 800f770:	bf17      	itett	ne
 800f772:	680b      	ldrne	r3, [r1, #0]
 800f774:	4618      	moveq	r0, r3
 800f776:	50ab      	strne	r3, [r5, r2]
 800f778:	684b      	ldrne	r3, [r1, #4]
 800f77a:	bf18      	it	ne
 800f77c:	6063      	strne	r3, [r4, #4]
 800f77e:	bd38      	pop	{r3, r4, r5, pc}
 800f780:	2400ae84 	.word	0x2400ae84
 800f784:	2400ae6c 	.word	0x2400ae6c

0800f788 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 800f788:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f78c:	4606      	mov	r6, r0
 800f78e:	460c      	mov	r4, r1
 800f790:	f7ff ffc0 	bl	800f714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f794:	b918      	cbnz	r0, 800f79e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 800f796:	2000      	movs	r0, #0
 800f798:	b002      	add	sp, #8
 800f79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79e:	4608      	mov	r0, r1
 800f7a0:	f7fb fb93 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d1f6      	bne.n	800f796 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f7a8:	4b3f      	ldr	r3, [pc, #252]	; (800f8a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 800f7aa:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800f8ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 800f7ae:	881d      	ldrh	r5, [r3, #0]
 800f7b0:	f8d9 a000 	ldr.w	sl, [r9]
 800f7b4:	46c8      	mov	r8, r9
 800f7b6:	1b73      	subs	r3, r6, r5
 800f7b8:	250e      	movs	r5, #14
 800f7ba:	435d      	muls	r5, r3
 800f7bc:	eb0a 0705 	add.w	r7, sl, r5
 800f7c0:	7b3b      	ldrb	r3, [r7, #12]
 800f7c2:	f013 0f20 	tst.w	r3, #32
 800f7c6:	d0e6      	beq.n	800f796 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f7c8:	4621      	mov	r1, r4
 800f7ca:	4638      	mov	r0, r7
 800f7cc:	f7fd fc42 	bl	800d054 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d1e1      	bne.n	800f798 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800f7d4:	4639      	mov	r1, r7
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f7fd fc3c 	bl	800d054 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f7dc:	b108      	cbz	r0, 800f7e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	e020      	b.n	800f824 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 800f7e2:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f7e6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d11e      	bne.n	800f82c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f7ee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f7f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d118      	bne.n	800f82c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f7fa:	6820      	ldr	r0, [r4, #0]
 800f7fc:	466b      	mov	r3, sp
 800f7fe:	6861      	ldr	r1, [r4, #4]
 800f800:	c303      	stmia	r3!, {r0, r1}
 800f802:	4639      	mov	r1, r7
 800f804:	4668      	mov	r0, sp
 800f806:	f7fd fc4b 	bl	800d0a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f80a:	f8d9 3000 	ldr.w	r3, [r9]
 800f80e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f812:	442b      	add	r3, r5
 800f814:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f818:	4413      	add	r3, r2
 800f81a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800f81e:	4293      	cmp	r3, r2
 800f820:	dc04      	bgt.n	800f82c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f822:	4669      	mov	r1, sp
 800f824:	4630      	mov	r0, r6
 800f826:	f7ff ff93 	bl	800f750 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 800f82a:	e7b5      	b.n	800f798 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800f82c:	f8d8 3000 	ldr.w	r3, [r8]
 800f830:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f834:	442b      	add	r3, r5
 800f836:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f83a:	4291      	cmp	r1, r2
 800f83c:	d119      	bne.n	800f872 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800f83e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f842:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f846:	4291      	cmp	r1, r2
 800f848:	d113      	bne.n	800f872 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800f84a:	6820      	ldr	r0, [r4, #0]
 800f84c:	466a      	mov	r2, sp
 800f84e:	6861      	ldr	r1, [r4, #4]
 800f850:	c203      	stmia	r2!, {r0, r1}
 800f852:	4619      	mov	r1, r3
 800f854:	4668      	mov	r0, sp
 800f856:	f7fd fc23 	bl	800d0a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f85a:	f8d8 3000 	ldr.w	r3, [r8]
 800f85e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f862:	442b      	add	r3, r5
 800f864:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f868:	4413      	add	r3, r2
 800f86a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800f86e:	4293      	cmp	r3, r2
 800f870:	ddd7      	ble.n	800f822 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 800f872:	4620      	mov	r0, r4
 800f874:	f7fb fb29 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800f878:	b990      	cbnz	r0, 800f8a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 800f87a:	88a7      	ldrh	r7, [r4, #4]
 800f87c:	88e3      	ldrh	r3, [r4, #6]
 800f87e:	fb17 f703 	smulbb	r7, r7, r3
 800f882:	f8d8 3000 	ldr.w	r3, [r8]
 800f886:	441d      	add	r5, r3
 800f888:	4628      	mov	r0, r5
 800f88a:	f7fb fb1e 	bl	800aeca <_ZNK8touchgfx4Rect7isEmptyEv>
 800f88e:	b948      	cbnz	r0, 800f8a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 800f890:	88ab      	ldrh	r3, [r5, #4]
 800f892:	88ea      	ldrh	r2, [r5, #6]
 800f894:	fb13 f302 	smulbb	r3, r3, r2
 800f898:	42bb      	cmp	r3, r7
 800f89a:	f6bf af7c 	bge.w	800f796 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f89e:	e79e      	b.n	800f7de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 800f8a0:	2700      	movs	r7, #0
 800f8a2:	e7ee      	b.n	800f882 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	e7f7      	b.n	800f898 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 800f8a8:	2400ae84 	.word	0x2400ae84
 800f8ac:	2400ae6c 	.word	0x2400ae6c

0800f8b0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800f8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8b2:	4c24      	ldr	r4, [pc, #144]	; (800f944 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800f8b4:	6823      	ldr	r3, [r4, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d042      	beq.n	800f940 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f8ba:	4a23      	ldr	r2, [pc, #140]	; (800f948 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800f8bc:	4d23      	ldr	r5, [pc, #140]	; (800f94c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800f8be:	8811      	ldrh	r1, [r2, #0]
 800f8c0:	f8b5 c000 	ldrh.w	ip, [r5]
 800f8c4:	4822      	ldr	r0, [pc, #136]	; (800f950 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800f8c6:	4461      	add	r1, ip
 800f8c8:	1c4a      	adds	r2, r1, #1
 800f8ca:	008f      	lsls	r7, r1, #2
 800f8cc:	f022 0201 	bic.w	r2, r2, #1
 800f8d0:	19de      	adds	r6, r3, r7
 800f8d2:	0412      	lsls	r2, r2, #16
 800f8d4:	6006      	str	r6, [r0, #0]
 800f8d6:	4e1f      	ldr	r6, [pc, #124]	; (800f954 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800f8d8:	0c12      	lsrs	r2, r2, #16
 800f8da:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800f8de:	19da      	adds	r2, r3, r7
 800f8e0:	6032      	str	r2, [r6, #0]
 800f8e2:	220e      	movs	r2, #14
 800f8e4:	fb02 f20c 	mul.w	r2, r2, ip
 800f8e8:	3203      	adds	r2, #3
 800f8ea:	f022 0203 	bic.w	r2, r2, #3
 800f8ee:	443a      	add	r2, r7
 800f8f0:	4f19      	ldr	r7, [pc, #100]	; (800f958 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800f8f2:	4413      	add	r3, r2
 800f8f4:	603b      	str	r3, [r7, #0]
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4f18      	ldr	r7, [pc, #96]	; (800f95c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800f8fa:	469c      	mov	ip, r3
 800f8fc:	803b      	strh	r3, [r7, #0]
 800f8fe:	4f18      	ldr	r7, [pc, #96]	; (800f960 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800f900:	683f      	ldr	r7, [r7, #0]
 800f902:	1aba      	subs	r2, r7, r2
 800f904:	4f17      	ldr	r7, [pc, #92]	; (800f964 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800f906:	603a      	str	r2, [r7, #0]
 800f908:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800f90c:	4a16      	ldr	r2, [pc, #88]	; (800f968 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800f90e:	8013      	strh	r3, [r2, #0]
 800f910:	428b      	cmp	r3, r1
 800f912:	d10d      	bne.n	800f930 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800f914:	882d      	ldrh	r5, [r5, #0]
 800f916:	2300      	movs	r3, #0
 800f918:	6830      	ldr	r0, [r6, #0]
 800f91a:	240e      	movs	r4, #14
 800f91c:	429d      	cmp	r5, r3
 800f91e:	d90f      	bls.n	800f940 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f920:	fb04 0203 	mla	r2, r4, r3, r0
 800f924:	3301      	adds	r3, #1
 800f926:	7b11      	ldrb	r1, [r2, #12]
 800f928:	f36f 1145 	bfc	r1, #5, #1
 800f92c:	7311      	strb	r1, [r2, #12]
 800f92e:	e7f5      	b.n	800f91c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800f930:	6822      	ldr	r2, [r4, #0]
 800f932:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800f936:	6802      	ldr	r2, [r0, #0]
 800f938:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800f93c:	3301      	adds	r3, #1
 800f93e:	e7e7      	b.n	800f910 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800f940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f942:	bf00      	nop
 800f944:	2400ae68 	.word	0x2400ae68
 800f948:	2400ae84 	.word	0x2400ae84
 800f94c:	2400ae88 	.word	0x2400ae88
 800f950:	2400ae7c 	.word	0x2400ae7c
 800f954:	2400ae6c 	.word	0x2400ae6c
 800f958:	2400ae74 	.word	0x2400ae74
 800f95c:	2400ae86 	.word	0x2400ae86
 800f960:	2400ae70 	.word	0x2400ae70
 800f964:	2400ae80 	.word	0x2400ae80
 800f968:	2400ae78 	.word	0x2400ae78

0800f96c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800f96c:	4b06      	ldr	r3, [pc, #24]	; (800f988 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	b943      	cbnz	r3, 800f984 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f972:	b139      	cbz	r1, 800f984 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f974:	4b05      	ldr	r3, [pc, #20]	; (800f98c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800f976:	801a      	strh	r2, [r3, #0]
 800f978:	4b05      	ldr	r3, [pc, #20]	; (800f990 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800f97a:	6019      	str	r1, [r3, #0]
 800f97c:	4b05      	ldr	r3, [pc, #20]	; (800f994 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800f97e:	6018      	str	r0, [r3, #0]
 800f980:	f7ff bf96 	b.w	800f8b0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	2400ae74 	.word	0x2400ae74
 800f98c:	2400ae88 	.word	0x2400ae88
 800f990:	2400ae70 	.word	0x2400ae70
 800f994:	2400ae68 	.word	0x2400ae68

0800f998 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800f998:	b470      	push	{r4, r5, r6}
 800f99a:	4c07      	ldr	r4, [pc, #28]	; (800f9b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800f99c:	4605      	mov	r5, r0
 800f99e:	4610      	mov	r0, r2
 800f9a0:	9a03      	ldr	r2, [sp, #12]
 800f9a2:	6826      	ldr	r6, [r4, #0]
 800f9a4:	b936      	cbnz	r6, 800f9b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800f9a6:	6025      	str	r5, [r4, #0]
 800f9a8:	4c04      	ldr	r4, [pc, #16]	; (800f9bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800f9aa:	8021      	strh	r1, [r4, #0]
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	bc70      	pop	{r4, r5, r6}
 800f9b0:	f7ff bfdc 	b.w	800f96c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800f9b4:	bc70      	pop	{r4, r5, r6}
 800f9b6:	4770      	bx	lr
 800f9b8:	2400ae8c 	.word	0x2400ae8c
 800f9bc:	2400ae84 	.word	0x2400ae84

0800f9c0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800f9c0:	4a12      	ldr	r2, [pc, #72]	; (800fa0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800f9c2:	8803      	ldrh	r3, [r0, #0]
 800f9c4:	8812      	ldrh	r2, [r2, #0]
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d207      	bcs.n	800f9da <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800f9ca:	4a11      	ldr	r2, [pc, #68]	; (800fa10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800f9cc:	2114      	movs	r1, #20
 800f9ce:	6812      	ldr	r2, [r2, #0]
 800f9d0:	fb01 2303 	mla	r3, r1, r3, r2
 800f9d4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800f9d8:	4770      	bx	lr
 800f9da:	490e      	ldr	r1, [pc, #56]	; (800fa14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800f9dc:	8809      	ldrh	r1, [r1, #0]
 800f9de:	4411      	add	r1, r2
 800f9e0:	428b      	cmp	r3, r1
 800f9e2:	da04      	bge.n	800f9ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800f9e4:	1a9b      	subs	r3, r3, r2
 800f9e6:	4a0c      	ldr	r2, [pc, #48]	; (800fa18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800f9e8:	210e      	movs	r1, #14
 800f9ea:	6812      	ldr	r2, [r2, #0]
 800f9ec:	e7f0      	b.n	800f9d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800f9ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d108      	bne.n	800fa08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800f9f6:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	b91b      	cbnz	r3, 800fa04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800f9fc:	4b08      	ldr	r3, [pc, #32]	; (800fa20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800f9fe:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fa02:	4770      	bx	lr
 800fa04:	4b07      	ldr	r3, [pc, #28]	; (800fa24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800fa06:	e7fa      	b.n	800f9fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800fa08:	2000      	movs	r0, #0
 800fa0a:	4770      	bx	lr
 800fa0c:	2400ae84 	.word	0x2400ae84
 800fa10:	2400ae8c 	.word	0x2400ae8c
 800fa14:	2400ae88 	.word	0x2400ae88
 800fa18:	2400ae6c 	.word	0x2400ae6c
 800fa1c:	2400adfc 	.word	0x2400adfc
 800fa20:	2400adfe 	.word	0x2400adfe
 800fa24:	2400ae00 	.word	0x2400ae00

0800fa28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800fa28:	4a12      	ldr	r2, [pc, #72]	; (800fa74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800fa2a:	8803      	ldrh	r3, [r0, #0]
 800fa2c:	8812      	ldrh	r2, [r2, #0]
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d207      	bcs.n	800fa42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800fa32:	4a11      	ldr	r2, [pc, #68]	; (800fa78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800fa34:	2114      	movs	r1, #20
 800fa36:	6812      	ldr	r2, [r2, #0]
 800fa38:	fb01 2303 	mla	r3, r1, r3, r2
 800fa3c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800fa40:	4770      	bx	lr
 800fa42:	490e      	ldr	r1, [pc, #56]	; (800fa7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800fa44:	8809      	ldrh	r1, [r1, #0]
 800fa46:	4411      	add	r1, r2
 800fa48:	428b      	cmp	r3, r1
 800fa4a:	da04      	bge.n	800fa56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800fa4c:	1a9b      	subs	r3, r3, r2
 800fa4e:	4a0c      	ldr	r2, [pc, #48]	; (800fa80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800fa50:	210e      	movs	r1, #14
 800fa52:	6812      	ldr	r2, [r2, #0]
 800fa54:	e7f0      	b.n	800fa38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800fa56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d108      	bne.n	800fa70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800fa5e:	4b09      	ldr	r3, [pc, #36]	; (800fa84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	b91b      	cbnz	r3, 800fa6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800fa64:	4b08      	ldr	r3, [pc, #32]	; (800fa88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800fa66:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fa6a:	4770      	bx	lr
 800fa6c:	4b07      	ldr	r3, [pc, #28]	; (800fa8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800fa6e:	e7fa      	b.n	800fa66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800fa70:	2000      	movs	r0, #0
 800fa72:	4770      	bx	lr
 800fa74:	2400ae84 	.word	0x2400ae84
 800fa78:	2400ae8c 	.word	0x2400ae8c
 800fa7c:	2400ae88 	.word	0x2400ae88
 800fa80:	2400ae6c 	.word	0x2400ae6c
 800fa84:	2400adfc 	.word	0x2400adfc
 800fa88:	2400ae00 	.word	0x2400ae00
 800fa8c:	2400adfe 	.word	0x2400adfe

0800fa90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800fa90:	4a1f      	ldr	r2, [pc, #124]	; (800fb10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 800fa92:	b510      	push	{r4, lr}
 800fa94:	880b      	ldrh	r3, [r1, #0]
 800fa96:	8812      	ldrh	r2, [r2, #0]
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d213      	bcs.n	800fac4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800fa9c:	4a1d      	ldr	r2, [pc, #116]	; (800fb14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 800fa9e:	2114      	movs	r1, #20
 800faa0:	6812      	ldr	r2, [r2, #0]
 800faa2:	fb01 2303 	mla	r3, r1, r3, r2
 800faa6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800faaa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800faae:	8a1a      	ldrh	r2, [r3, #16]
 800fab0:	8a5b      	ldrh	r3, [r3, #18]
 800fab2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800fab6:	8004      	strh	r4, [r0, #0]
 800fab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fabc:	8041      	strh	r1, [r0, #2]
 800fabe:	8082      	strh	r2, [r0, #4]
 800fac0:	80c3      	strh	r3, [r0, #6]
 800fac2:	e00e      	b.n	800fae2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800fac4:	4914      	ldr	r1, [pc, #80]	; (800fb18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 800fac6:	8809      	ldrh	r1, [r1, #0]
 800fac8:	4411      	add	r1, r2
 800faca:	428b      	cmp	r3, r1
 800facc:	da0a      	bge.n	800fae4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	4a12      	ldr	r2, [pc, #72]	; (800fb1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800fad2:	210e      	movs	r1, #14
 800fad4:	6812      	ldr	r2, [r2, #0]
 800fad6:	fb01 2303 	mla	r3, r1, r3, r2
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	6002      	str	r2, [r0, #0]
 800fade:	685a      	ldr	r2, [r3, #4]
 800fae0:	6042      	str	r2, [r0, #4]
 800fae2:	bd10      	pop	{r4, pc}
 800fae4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fae8:	4293      	cmp	r3, r2
 800faea:	d10b      	bne.n	800fb04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 800faec:	4b0c      	ldr	r3, [pc, #48]	; (800fb20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800faee:	f9b3 1000 	ldrsh.w	r1, [r3]
 800faf2:	4b0c      	ldr	r3, [pc, #48]	; (800fb24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800faf4:	8081      	strh	r1, [r0, #4]
 800faf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fafa:	2300      	movs	r3, #0
 800fafc:	80c2      	strh	r2, [r0, #6]
 800fafe:	8003      	strh	r3, [r0, #0]
 800fb00:	8043      	strh	r3, [r0, #2]
 800fb02:	e7ee      	b.n	800fae2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800fb04:	2300      	movs	r3, #0
 800fb06:	8003      	strh	r3, [r0, #0]
 800fb08:	8043      	strh	r3, [r0, #2]
 800fb0a:	8083      	strh	r3, [r0, #4]
 800fb0c:	e7d8      	b.n	800fac0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800fb0e:	bf00      	nop
 800fb10:	2400ae84 	.word	0x2400ae84
 800fb14:	2400ae8c 	.word	0x2400ae8c
 800fb18:	2400ae88 	.word	0x2400ae88
 800fb1c:	2400ae6c 	.word	0x2400ae6c
 800fb20:	2400adf8 	.word	0x2400adf8
 800fb24:	2400adfa 	.word	0x2400adfa

0800fb28 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800fb28:	4a12      	ldr	r2, [pc, #72]	; (800fb74 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800fb2a:	8803      	ldrh	r3, [r0, #0]
 800fb2c:	8811      	ldrh	r1, [r2, #0]
 800fb2e:	428b      	cmp	r3, r1
 800fb30:	d20b      	bcs.n	800fb4a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800fb32:	4a11      	ldr	r2, [pc, #68]	; (800fb78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fb34:	6812      	ldr	r2, [r2, #0]
 800fb36:	b112      	cbz	r2, 800fb3e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800fb38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb3c:	b9c0      	cbnz	r0, 800fb70 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800fb3e:	4a0f      	ldr	r2, [pc, #60]	; (800fb7c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800fb40:	6811      	ldr	r1, [r2, #0]
 800fb42:	2214      	movs	r2, #20
 800fb44:	4353      	muls	r3, r2
 800fb46:	58c8      	ldr	r0, [r1, r3]
 800fb48:	4770      	bx	lr
 800fb4a:	4a0d      	ldr	r2, [pc, #52]	; (800fb80 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800fb4c:	8812      	ldrh	r2, [r2, #0]
 800fb4e:	440a      	add	r2, r1
 800fb50:	4293      	cmp	r3, r2
 800fb52:	da04      	bge.n	800fb5e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800fb54:	4a08      	ldr	r2, [pc, #32]	; (800fb78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fb56:	6812      	ldr	r2, [r2, #0]
 800fb58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb5c:	4770      	bx	lr
 800fb5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d103      	bne.n	800fb6e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800fb66:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fb6c:	4770      	bx	lr
 800fb6e:	2000      	movs	r0, #0
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	2400ae84 	.word	0x2400ae84
 800fb78:	2400ae68 	.word	0x2400ae68
 800fb7c:	2400ae8c 	.word	0x2400ae8c
 800fb80:	2400ae88 	.word	0x2400ae88
 800fb84:	2400ae04 	.word	0x2400ae04

0800fb88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800fb88:	4b24      	ldr	r3, [pc, #144]	; (800fc1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800fb8a:	8802      	ldrh	r2, [r0, #0]
 800fb8c:	8818      	ldrh	r0, [r3, #0]
 800fb8e:	4282      	cmp	r2, r0
 800fb90:	d221      	bcs.n	800fbd6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800fb92:	4b23      	ldr	r3, [pc, #140]	; (800fc20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800fb94:	6819      	ldr	r1, [r3, #0]
 800fb96:	2314      	movs	r3, #20
 800fb98:	fb03 1302 	mla	r3, r3, r2, r1
 800fb9c:	6858      	ldr	r0, [r3, #4]
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d03a      	beq.n	800fc18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fba2:	4920      	ldr	r1, [pc, #128]	; (800fc24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fba4:	6809      	ldr	r1, [r1, #0]
 800fba6:	2900      	cmp	r1, #0
 800fba8:	d036      	beq.n	800fc18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fbae:	2900      	cmp	r1, #0
 800fbb0:	d032      	beq.n	800fc18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbb2:	891a      	ldrh	r2, [r3, #8]
 800fbb4:	8958      	ldrh	r0, [r3, #10]
 800fbb6:	4350      	muls	r0, r2
 800fbb8:	7c5a      	ldrb	r2, [r3, #17]
 800fbba:	7cdb      	ldrb	r3, [r3, #19]
 800fbbc:	0952      	lsrs	r2, r2, #5
 800fbbe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fbc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fbc6:	2b0b      	cmp	r3, #11
 800fbc8:	bf18      	it	ne
 800fbca:	0040      	lslne	r0, r0, #1
 800fbcc:	3003      	adds	r0, #3
 800fbce:	f020 0003 	bic.w	r0, r0, #3
 800fbd2:	4408      	add	r0, r1
 800fbd4:	4770      	bx	lr
 800fbd6:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	4403      	add	r3, r0
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	da1a      	bge.n	800fc16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fbe0:	4b12      	ldr	r3, [pc, #72]	; (800fc2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800fbe2:	1a10      	subs	r0, r2, r0
 800fbe4:	210e      	movs	r1, #14
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	fb01 3000 	mla	r0, r1, r0, r3
 800fbec:	7b03      	ldrb	r3, [r0, #12]
 800fbee:	f003 031f 	and.w	r3, r3, #31
 800fbf2:	2b0b      	cmp	r3, #11
 800fbf4:	d10b      	bne.n	800fc0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800fbf6:	8903      	ldrh	r3, [r0, #8]
 800fbf8:	8940      	ldrh	r0, [r0, #10]
 800fbfa:	4358      	muls	r0, r3
 800fbfc:	4b09      	ldr	r3, [pc, #36]	; (800fc24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fbfe:	3003      	adds	r0, #3
 800fc00:	6819      	ldr	r1, [r3, #0]
 800fc02:	f020 0303 	bic.w	r3, r0, #3
 800fc06:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800fc0a:	4418      	add	r0, r3
 800fc0c:	4770      	bx	lr
 800fc0e:	2b0d      	cmp	r3, #13
 800fc10:	d101      	bne.n	800fc16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fc12:	300d      	adds	r0, #13
 800fc14:	4770      	bx	lr
 800fc16:	2000      	movs	r0, #0
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	2400ae84 	.word	0x2400ae84
 800fc20:	2400ae8c 	.word	0x2400ae8c
 800fc24:	2400ae68 	.word	0x2400ae68
 800fc28:	2400ae88 	.word	0x2400ae88
 800fc2c:	2400ae6c 	.word	0x2400ae6c

0800fc30 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800fc30:	4a17      	ldr	r2, [pc, #92]	; (800fc90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 800fc32:	b510      	push	{r4, lr}
 800fc34:	8803      	ldrh	r3, [r0, #0]
 800fc36:	8812      	ldrh	r2, [r2, #0]
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d20c      	bcs.n	800fc56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 800fc3c:	4a15      	ldr	r2, [pc, #84]	; (800fc94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 800fc3e:	2114      	movs	r1, #20
 800fc40:	6812      	ldr	r2, [r2, #0]
 800fc42:	fb01 2303 	mla	r3, r1, r3, r2
 800fc46:	7c58      	ldrb	r0, [r3, #17]
 800fc48:	0942      	lsrs	r2, r0, #5
 800fc4a:	7cd8      	ldrb	r0, [r3, #19]
 800fc4c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800fc50:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800fc54:	bd10      	pop	{r4, pc}
 800fc56:	4910      	ldr	r1, [pc, #64]	; (800fc98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800fc58:	8809      	ldrh	r1, [r1, #0]
 800fc5a:	4411      	add	r1, r2
 800fc5c:	428b      	cmp	r3, r1
 800fc5e:	da09      	bge.n	800fc74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800fc60:	1a9b      	subs	r3, r3, r2
 800fc62:	4a0e      	ldr	r2, [pc, #56]	; (800fc9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800fc64:	210e      	movs	r1, #14
 800fc66:	6812      	ldr	r2, [r2, #0]
 800fc68:	fb01 2303 	mla	r3, r1, r3, r2
 800fc6c:	7b18      	ldrb	r0, [r3, #12]
 800fc6e:	f000 001f 	and.w	r0, r0, #31
 800fc72:	e7ef      	b.n	800fc54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800fc74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d106      	bne.n	800fc8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800fc7c:	f7fb fbce 	bl	800b41c <_ZN8touchgfx3HAL3lcdEv>
 800fc80:	6803      	ldr	r3, [r0, #0]
 800fc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc88:	4718      	bx	r3
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	e7e2      	b.n	800fc54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800fc8e:	bf00      	nop
 800fc90:	2400ae84 	.word	0x2400ae84
 800fc94:	2400ae8c 	.word	0x2400ae8c
 800fc98:	2400ae88 	.word	0x2400ae88
 800fc9c:	2400ae6c 	.word	0x2400ae6c

0800fca0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 800fca0:	2018      	movs	r0, #24
 800fca2:	4770      	bx	lr

0800fca4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 800fca4:	2001      	movs	r0, #1
 800fca6:	4770      	bx	lr

0800fca8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 800fca8:	4b02      	ldr	r3, [pc, #8]	; (800fcb4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 800fcaa:	8818      	ldrh	r0, [r3, #0]
 800fcac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800fcb0:	b280      	uxth	r0, r0
 800fcb2:	4770      	bx	lr
 800fcb4:	2400adfe 	.word	0x2400adfe

0800fcb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800fcb8:	2bff      	cmp	r3, #255	; 0xff
 800fcba:	d040      	beq.n	800fd3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800fcbc:	2a2c      	cmp	r2, #44	; 0x2c
 800fcbe:	d02a      	beq.n	800fd16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 800fcc0:	d80f      	bhi.n	800fce2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 800fcc2:	2a08      	cmp	r2, #8
 800fcc4:	d037      	beq.n	800fd36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800fcc6:	d805      	bhi.n	800fcd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 800fcc8:	2a04      	cmp	r2, #4
 800fcca:	d032      	beq.n	800fd32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 800fccc:	2a05      	cmp	r2, #5
 800fcce:	d02e      	beq.n	800fd2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	4770      	bx	lr
 800fcd4:	2a0a      	cmp	r2, #10
 800fcd6:	d02e      	beq.n	800fd36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800fcd8:	d301      	bcc.n	800fcde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 800fcda:	2a0b      	cmp	r2, #11
 800fcdc:	d1f8      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fcde:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800fce0:	4770      	bx	lr
 800fce2:	2a30      	cmp	r2, #48	; 0x30
 800fce4:	d029      	beq.n	800fd3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800fce6:	d808      	bhi.n	800fcfa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 800fce8:	2a2e      	cmp	r2, #46	; 0x2e
 800fcea:	684b      	ldr	r3, [r1, #4]
 800fcec:	d01a      	beq.n	800fd24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 800fcee:	d90b      	bls.n	800fd08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1ec      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fcf6:	6a00      	ldr	r0, [r0, #32]
 800fcf8:	4770      	bx	lr
 800fcfa:	2a32      	cmp	r2, #50	; 0x32
 800fcfc:	d01d      	beq.n	800fd3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800fcfe:	d301      	bcc.n	800fd04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 800fd00:	2a33      	cmp	r2, #51	; 0x33
 800fd02:	d1e5      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd04:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800fd06:	4770      	bx	lr
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d0f3      	beq.n	800fcf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d1de      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd12:	6900      	ldr	r0, [r0, #16]
 800fd14:	4770      	bx	lr
 800fd16:	684b      	ldr	r3, [r1, #4]
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	b133      	cbz	r3, 800fd2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d1d7      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd20:	6880      	ldr	r0, [r0, #8]
 800fd22:	4770      	bx	lr
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d1d2      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd2a:	6980      	ldr	r0, [r0, #24]
 800fd2c:	4770      	bx	lr
 800fd2e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800fd30:	4770      	bx	lr
 800fd32:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800fd34:	4770      	bx	lr
 800fd36:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800fd38:	4770      	bx	lr
 800fd3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800fd3c:	4770      	bx	lr
 800fd3e:	2a2c      	cmp	r2, #44	; 0x2c
 800fd40:	d02a      	beq.n	800fd98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 800fd42:	d80f      	bhi.n	800fd64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 800fd44:	2a08      	cmp	r2, #8
 800fd46:	d035      	beq.n	800fdb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800fd48:	d805      	bhi.n	800fd56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800fd4a:	2a04      	cmp	r2, #4
 800fd4c:	d030      	beq.n	800fdb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 800fd4e:	2a05      	cmp	r2, #5
 800fd50:	d1be      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd52:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fd54:	4770      	bx	lr
 800fd56:	2a0a      	cmp	r2, #10
 800fd58:	d02c      	beq.n	800fdb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800fd5a:	d301      	bcc.n	800fd60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 800fd5c:	2a0b      	cmp	r2, #11
 800fd5e:	d1b7      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd60:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800fd62:	4770      	bx	lr
 800fd64:	2a30      	cmp	r2, #48	; 0x30
 800fd66:	d027      	beq.n	800fdb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800fd68:	d808      	bhi.n	800fd7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 800fd6a:	2a2e      	cmp	r2, #46	; 0x2e
 800fd6c:	684b      	ldr	r3, [r1, #4]
 800fd6e:	d01a      	beq.n	800fda6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 800fd70:	d90b      	bls.n	800fd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1ab      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd78:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fd7a:	4770      	bx	lr
 800fd7c:	2a32      	cmp	r2, #50	; 0x32
 800fd7e:	d01b      	beq.n	800fdb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800fd80:	d301      	bcc.n	800fd86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 800fd82:	2a33      	cmp	r2, #51	; 0x33
 800fd84:	d1a4      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd86:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800fd88:	4770      	bx	lr
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d0f3      	beq.n	800fd78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d19d      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd94:	6940      	ldr	r0, [r0, #20]
 800fd96:	4770      	bx	lr
 800fd98:	684b      	ldr	r3, [r1, #4]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	b133      	cbz	r3, 800fdac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d196      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fda2:	68c0      	ldr	r0, [r0, #12]
 800fda4:	4770      	bx	lr
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d191      	bne.n	800fcd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fdac:	69c0      	ldr	r0, [r0, #28]
 800fdae:	4770      	bx	lr
 800fdb0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fdb2:	4770      	bx	lr
 800fdb4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800fdb6:	4770      	bx	lr
 800fdb8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800fdba:	4770      	bx	lr

0800fdbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc0:	b085      	sub	sp, #20
 800fdc2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fdc4:	9203      	str	r2, [sp, #12]
 800fdc6:	6870      	ldr	r0, [r6, #4]
 800fdc8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800fdcc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800fdd0:	9101      	str	r1, [sp, #4]
 800fdd2:	fa1f f885 	uxth.w	r8, r5
 800fdd6:	43ed      	mvns	r5, r5
 800fdd8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 800fddc:	b2ed      	uxtb	r5, r5
 800fdde:	fb00 2404 	mla	r4, r0, r4, r2
 800fde2:	6832      	ldr	r2, [r6, #0]
 800fde4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fde8:	4414      	add	r4, r2
 800fdea:	f8dc 2000 	ldr.w	r2, [ip]
 800fdee:	9202      	str	r2, [sp, #8]
 800fdf0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800fdf4:	f102 0e04 	add.w	lr, r2, #4
 800fdf8:	9a01      	ldr	r2, [sp, #4]
 800fdfa:	2a00      	cmp	r2, #0
 800fdfc:	dc03      	bgt.n	800fe06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 800fdfe:	9a03      	ldr	r2, [sp, #12]
 800fe00:	2a00      	cmp	r2, #0
 800fe02:	f340 8116 	ble.w	8010032 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800fe06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe08:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 800fe0c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800fe10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fe12:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 800fe16:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	dd0e      	ble.n	800fe3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 800fe1e:	1406      	asrs	r6, r0, #16
 800fe20:	d405      	bmi.n	800fe2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe22:	4556      	cmp	r6, sl
 800fe24:	da03      	bge.n	800fe2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe26:	1416      	asrs	r6, r2, #16
 800fe28:	d401      	bmi.n	800fe2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe2a:	454e      	cmp	r6, r9
 800fe2c:	db07      	blt.n	800fe3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 800fe2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fe30:	3b01      	subs	r3, #1
 800fe32:	3403      	adds	r4, #3
 800fe34:	4430      	add	r0, r6
 800fe36:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fe38:	4432      	add	r2, r6
 800fe3a:	e7ee      	b.n	800fe1a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 800fe3c:	d063      	beq.n	800ff06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 800fe3e:	1e5e      	subs	r6, r3, #1
 800fe40:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fe42:	fb07 0706 	mla	r7, r7, r6, r0
 800fe46:	143f      	asrs	r7, r7, #16
 800fe48:	d454      	bmi.n	800fef4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe4a:	4557      	cmp	r7, sl
 800fe4c:	da52      	bge.n	800fef4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe4e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800fe50:	fb07 2606 	mla	r6, r7, r6, r2
 800fe54:	1436      	asrs	r6, r6, #16
 800fe56:	d44d      	bmi.n	800fef4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe58:	454e      	cmp	r6, r9
 800fe5a:	da4b      	bge.n	800fef4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe5c:	1ce6      	adds	r6, r4, #3
 800fe5e:	4699      	mov	r9, r3
 800fe60:	f1b9 0f00 	cmp.w	r9, #0
 800fe64:	f106 0603 	add.w	r6, r6, #3
 800fe68:	dd48      	ble.n	800fefc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 800fe6a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 800fe6e:	1417      	asrs	r7, r2, #16
 800fe70:	9902      	ldr	r1, [sp, #8]
 800fe72:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800fe76:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe7a:	fb0b 1707 	mla	r7, fp, r7, r1
 800fe7e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 800fe82:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fe84:	f817 700a 	ldrb.w	r7, [r7, sl]
 800fe88:	fb1b fb05 	smulbb	fp, fp, r5
 800fe8c:	4408      	add	r0, r1
 800fe8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fe90:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800fe94:	440a      	add	r2, r1
 800fe96:	eb0e 0a07 	add.w	sl, lr, r7
 800fe9a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800fe9e:	fb07 b708 	mla	r7, r7, r8, fp
 800fea2:	b2bf      	uxth	r7, r7
 800fea4:	f107 0b01 	add.w	fp, r7, #1
 800fea8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800feac:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 800feb0:	fb1b fb05 	smulbb	fp, fp, r5
 800feb4:	123f      	asrs	r7, r7, #8
 800feb6:	f806 7c06 	strb.w	r7, [r6, #-6]
 800feba:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800febe:	fb07 b708 	mla	r7, r7, r8, fp
 800fec2:	b2bf      	uxth	r7, r7
 800fec4:	f107 0b01 	add.w	fp, r7, #1
 800fec8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800fecc:	123f      	asrs	r7, r7, #8
 800fece:	f806 7c05 	strb.w	r7, [r6, #-5]
 800fed2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 800fed6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 800feda:	fb1a fa05 	smulbb	sl, sl, r5
 800fede:	fb07 a708 	mla	r7, r7, r8, sl
 800fee2:	b2bf      	uxth	r7, r7
 800fee4:	f107 0a01 	add.w	sl, r7, #1
 800fee8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 800feec:	123f      	asrs	r7, r7, #8
 800feee:	f806 7c04 	strb.w	r7, [r6, #-4]
 800fef2:	e7b5      	b.n	800fe60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 800fef4:	2700      	movs	r7, #0
 800fef6:	1bde      	subs	r6, r3, r7
 800fef8:	2e00      	cmp	r6, #0
 800fefa:	dc42      	bgt.n	800ff82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 800fefc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff04:	441c      	add	r4, r3
 800ff06:	9b01      	ldr	r3, [sp, #4]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f340 8092 	ble.w	8010032 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800ff0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff14:	ee30 0a04 	vadd.f32	s0, s0, s8
 800ff18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800ff1c:	eef0 6a62 	vmov.f32	s13, s5
 800ff20:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff24:	ee31 1a05 	vadd.f32	s2, s2, s10
 800ff28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ff2c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 800ff30:	eef0 6a43 	vmov.f32	s13, s6
 800ff34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ff38:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 800ff3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800ff40:	ee61 7a27 	vmul.f32	s15, s2, s15
 800ff44:	ee77 2a62 	vsub.f32	s5, s14, s5
 800ff48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800ff4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800ff50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800ff54:	ee12 2a90 	vmov	r2, s5
 800ff58:	eef0 2a47 	vmov.f32	s5, s14
 800ff5c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ff60:	ee13 2a10 	vmov	r2, s6
 800ff64:	9311      	str	r3, [sp, #68]	; 0x44
 800ff66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff68:	eeb0 3a67 	vmov.f32	s6, s15
 800ff6c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ff70:	9312      	str	r3, [sp, #72]	; 0x48
 800ff72:	9b01      	ldr	r3, [sp, #4]
 800ff74:	9a03      	ldr	r2, [sp, #12]
 800ff76:	3b01      	subs	r3, #1
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff7c:	bf08      	it	eq
 800ff7e:	4613      	moveq	r3, r2
 800ff80:	e73a      	b.n	800fdf8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800ff82:	ea5f 4a20 	movs.w	sl, r0, asr #16
 800ff86:	d44e      	bmi.n	8010026 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ff88:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800ff8c:	4556      	cmp	r6, sl
 800ff8e:	dd4a      	ble.n	8010026 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ff90:	ea5f 4b22 	movs.w	fp, r2, asr #16
 800ff94:	d447      	bmi.n	8010026 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ff96:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ff9a:	4559      	cmp	r1, fp
 800ff9c:	dd43      	ble.n	8010026 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ff9e:	fa0f f986 	sxth.w	r9, r6
 800ffa2:	9902      	ldr	r1, [sp, #8]
 800ffa4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800ffa8:	fb0b 1909 	mla	r9, fp, r9, r1
 800ffac:	f814 b006 	ldrb.w	fp, [r4, r6]
 800ffb0:	f819 900a 	ldrb.w	r9, [r9, sl]
 800ffb4:	fb1b fb05 	smulbb	fp, fp, r5
 800ffb8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800ffbc:	eb0e 0a09 	add.w	sl, lr, r9
 800ffc0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 800ffc4:	fb09 b908 	mla	r9, r9, r8, fp
 800ffc8:	fa1f f989 	uxth.w	r9, r9
 800ffcc:	f109 0b01 	add.w	fp, r9, #1
 800ffd0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800ffd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 800ffd8:	f804 9006 	strb.w	r9, [r4, r6]
 800ffdc:	4426      	add	r6, r4
 800ffde:	f89a 9001 	ldrb.w	r9, [sl, #1]
 800ffe2:	f896 b001 	ldrb.w	fp, [r6, #1]
 800ffe6:	fb1b fb05 	smulbb	fp, fp, r5
 800ffea:	fb09 b908 	mla	r9, r9, r8, fp
 800ffee:	fa1f f989 	uxth.w	r9, r9
 800fff2:	f109 0b01 	add.w	fp, r9, #1
 800fff6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800fffa:	ea4f 2929 	mov.w	r9, r9, asr #8
 800fffe:	f886 9001 	strb.w	r9, [r6, #1]
 8010002:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010006:	f896 a002 	ldrb.w	sl, [r6, #2]
 801000a:	fb1a fa05 	smulbb	sl, sl, r5
 801000e:	fb09 a908 	mla	r9, r9, r8, sl
 8010012:	fa1f f989 	uxth.w	r9, r9
 8010016:	f109 0a01 	add.w	sl, r9, #1
 801001a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801001e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010022:	f886 9002 	strb.w	r9, [r6, #2]
 8010026:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010028:	3701      	adds	r7, #1
 801002a:	4408      	add	r0, r1
 801002c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801002e:	440a      	add	r2, r1
 8010030:	e761      	b.n	800fef6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010032:	b005      	add	sp, #20
 8010034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010038 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801003e:	4693      	mov	fp, r2
 8010040:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010046:	6868      	ldr	r0, [r5, #4]
 8010048:	6877      	ldr	r7, [r6, #4]
 801004a:	9100      	str	r1, [sp, #0]
 801004c:	3704      	adds	r7, #4
 801004e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010052:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8010056:	fb00 2404 	mla	r4, r0, r4, r2
 801005a:	682a      	ldr	r2, [r5, #0]
 801005c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010060:	4414      	add	r4, r2
 8010062:	6832      	ldr	r2, [r6, #0]
 8010064:	9201      	str	r2, [sp, #4]
 8010066:	9a00      	ldr	r2, [sp, #0]
 8010068:	2a00      	cmp	r2, #0
 801006a:	dc03      	bgt.n	8010074 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801006c:	f1bb 0f00 	cmp.w	fp, #0
 8010070:	f340 80bc 	ble.w	80101ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8010074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010076:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801007a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801007e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010080:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8010084:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010088:	2b00      	cmp	r3, #0
 801008a:	dd0c      	ble.n	80100a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801008c:	1405      	asrs	r5, r0, #16
 801008e:	d405      	bmi.n	801009c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010090:	4555      	cmp	r5, sl
 8010092:	da03      	bge.n	801009c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010094:	1415      	asrs	r5, r2, #16
 8010096:	d401      	bmi.n	801009c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010098:	454d      	cmp	r5, r9
 801009a:	db05      	blt.n	80100a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801009c:	4440      	add	r0, r8
 801009e:	4472      	add	r2, lr
 80100a0:	3b01      	subs	r3, #1
 80100a2:	3403      	adds	r4, #3
 80100a4:	e7f0      	b.n	8010088 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80100a6:	d03f      	beq.n	8010128 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80100a8:	1e5d      	subs	r5, r3, #1
 80100aa:	fb08 0c05 	mla	ip, r8, r5, r0
 80100ae:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80100b2:	d42e      	bmi.n	8010112 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100b4:	45d4      	cmp	ip, sl
 80100b6:	da2c      	bge.n	8010112 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100b8:	fb0e 2505 	mla	r5, lr, r5, r2
 80100bc:	142d      	asrs	r5, r5, #16
 80100be:	d428      	bmi.n	8010112 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100c0:	454d      	cmp	r5, r9
 80100c2:	da26      	bge.n	8010112 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100c4:	1ce5      	adds	r5, r4, #3
 80100c6:	469c      	mov	ip, r3
 80100c8:	f1bc 0f00 	cmp.w	ip, #0
 80100cc:	f105 0503 	add.w	r5, r5, #3
 80100d0:	dd25      	ble.n	801011e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80100d2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80100d6:	ea4f 4922 	mov.w	r9, r2, asr #16
 80100da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80100de:	4472      	add	r2, lr
 80100e0:	468a      	mov	sl, r1
 80100e2:	9901      	ldr	r1, [sp, #4]
 80100e4:	fb0a 1909 	mla	r9, sl, r9, r1
 80100e8:	1401      	asrs	r1, r0, #16
 80100ea:	4440      	add	r0, r8
 80100ec:	f819 9001 	ldrb.w	r9, [r9, r1]
 80100f0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80100f4:	eb07 0a09 	add.w	sl, r7, r9
 80100f8:	f817 9009 	ldrb.w	r9, [r7, r9]
 80100fc:	f805 9c06 	strb.w	r9, [r5, #-6]
 8010100:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010104:	f805 9c05 	strb.w	r9, [r5, #-5]
 8010108:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801010c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8010110:	e7da      	b.n	80100c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8010112:	2500      	movs	r5, #0
 8010114:	eba3 0c05 	sub.w	ip, r3, r5
 8010118:	f1bc 0f00 	cmp.w	ip, #0
 801011c:	dc3b      	bgt.n	8010196 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801011e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010122:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010126:	441c      	add	r4, r3
 8010128:	9b00      	ldr	r3, [sp, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	dd5e      	ble.n	80101ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801012e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010134:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010138:	eeb0 6a62 	vmov.f32	s12, s5
 801013c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010140:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010144:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010148:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801014c:	eeb0 6a43 	vmov.f32	s12, s6
 8010150:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010154:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010158:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801015c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010160:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010164:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010168:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801016c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010170:	ee12 2a90 	vmov	r2, s5
 8010174:	eef0 2a47 	vmov.f32	s5, s14
 8010178:	fb92 f8f3 	sdiv	r8, r2, r3
 801017c:	ee13 2a10 	vmov	r2, s6
 8010180:	eeb0 3a67 	vmov.f32	s6, s15
 8010184:	fb92 fef3 	sdiv	lr, r2, r3
 8010188:	9b00      	ldr	r3, [sp, #0]
 801018a:	3b01      	subs	r3, #1
 801018c:	9300      	str	r3, [sp, #0]
 801018e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010190:	bf08      	it	eq
 8010192:	465b      	moveq	r3, fp
 8010194:	e767      	b.n	8010066 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8010196:	ea5f 4920 	movs.w	r9, r0, asr #16
 801019a:	d423      	bmi.n	80101e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801019c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80101a0:	45cc      	cmp	ip, r9
 80101a2:	dd1f      	ble.n	80101e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101a4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80101a8:	d41c      	bmi.n	80101e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101aa:	68f1      	ldr	r1, [r6, #12]
 80101ac:	4551      	cmp	r1, sl
 80101ae:	dd19      	ble.n	80101e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101b0:	fa0f fc8c 	sxth.w	ip, ip
 80101b4:	9901      	ldr	r1, [sp, #4]
 80101b6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80101ba:	f81c c009 	ldrb.w	ip, [ip, r9]
 80101be:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80101c2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80101c6:	eb07 090c 	add.w	r9, r7, ip
 80101ca:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80101ce:	f804 a00c 	strb.w	sl, [r4, ip]
 80101d2:	44a4      	add	ip, r4
 80101d4:	f899 a001 	ldrb.w	sl, [r9, #1]
 80101d8:	f88c a001 	strb.w	sl, [ip, #1]
 80101dc:	f899 9002 	ldrb.w	r9, [r9, #2]
 80101e0:	f88c 9002 	strb.w	r9, [ip, #2]
 80101e4:	4440      	add	r0, r8
 80101e6:	4472      	add	r2, lr
 80101e8:	3501      	adds	r5, #1
 80101ea:	e793      	b.n	8010114 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80101ec:	b003      	add	sp, #12
 80101ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80101f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f6:	b085      	sub	sp, #20
 80101f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80101fe:	9202      	str	r2, [sp, #8]
 8010200:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010204:	6860      	ldr	r0, [r4, #4]
 8010206:	9203      	str	r2, [sp, #12]
 8010208:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801020c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010210:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010214:	fb00 2505 	mla	r5, r0, r5, r2
 8010218:	6822      	ldr	r2, [r4, #0]
 801021a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801021e:	4415      	add	r5, r2
 8010220:	f8dc 2000 	ldr.w	r2, [ip]
 8010224:	9200      	str	r2, [sp, #0]
 8010226:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801022a:	3204      	adds	r2, #4
 801022c:	9201      	str	r2, [sp, #4]
 801022e:	2900      	cmp	r1, #0
 8010230:	dc03      	bgt.n	801023a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010232:	9a02      	ldr	r2, [sp, #8]
 8010234:	2a00      	cmp	r2, #0
 8010236:	f340 8127 	ble.w	8010488 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801023a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801023c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010240:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010244:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010246:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801024a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801024e:	2b00      	cmp	r3, #0
 8010250:	dd0d      	ble.n	801026e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8010252:	1422      	asrs	r2, r4, #16
 8010254:	d405      	bmi.n	8010262 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010256:	4542      	cmp	r2, r8
 8010258:	da03      	bge.n	8010262 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801025a:	1402      	asrs	r2, r0, #16
 801025c:	d401      	bmi.n	8010262 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801025e:	42ba      	cmp	r2, r7
 8010260:	db06      	blt.n	8010270 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8010262:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010264:	4474      	add	r4, lr
 8010266:	3b01      	subs	r3, #1
 8010268:	3503      	adds	r5, #3
 801026a:	4410      	add	r0, r2
 801026c:	e7ef      	b.n	801024e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801026e:	d075      	beq.n	801035c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8010270:	1e5a      	subs	r2, r3, #1
 8010272:	fb0e 4602 	mla	r6, lr, r2, r4
 8010276:	1436      	asrs	r6, r6, #16
 8010278:	d465      	bmi.n	8010346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801027a:	4546      	cmp	r6, r8
 801027c:	da63      	bge.n	8010346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801027e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010280:	fb06 0202 	mla	r2, r6, r2, r0
 8010284:	1412      	asrs	r2, r2, #16
 8010286:	d45e      	bmi.n	8010346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8010288:	42ba      	cmp	r2, r7
 801028a:	da5c      	bge.n	8010346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801028c:	1cef      	adds	r7, r5, #3
 801028e:	4699      	mov	r9, r3
 8010290:	f1b9 0f00 	cmp.w	r9, #0
 8010294:	dd5d      	ble.n	8010352 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8010296:	1402      	asrs	r2, r0, #16
 8010298:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801029c:	1426      	asrs	r6, r4, #16
 801029e:	4692      	mov	sl, r2
 80102a0:	9a00      	ldr	r2, [sp, #0]
 80102a2:	fb08 220a 	mla	r2, r8, sl, r2
 80102a6:	5d92      	ldrb	r2, [r2, r6]
 80102a8:	9e01      	ldr	r6, [sp, #4]
 80102aa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80102ae:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80102b2:	d041      	beq.n	8010338 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80102b4:	9a03      	ldr	r2, [sp, #12]
 80102b6:	fa5f fb86 	uxtb.w	fp, r6
 80102ba:	fb02 f808 	mul.w	r8, r2, r8
 80102be:	f108 0201 	add.w	r2, r8, #1
 80102c2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80102c6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80102ca:	1212      	asrs	r2, r2, #8
 80102cc:	fa1f fa82 	uxth.w	sl, r2
 80102d0:	43d2      	mvns	r2, r2
 80102d2:	fb1b fb0a 	smulbb	fp, fp, sl
 80102d6:	b2d2      	uxtb	r2, r2
 80102d8:	fb08 b802 	mla	r8, r8, r2, fp
 80102dc:	fa1f f888 	uxth.w	r8, r8
 80102e0:	f108 0b01 	add.w	fp, r8, #1
 80102e4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80102e8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80102ec:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80102f0:	fb1b fb0a 	smulbb	fp, fp, sl
 80102f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80102f8:	fb16 fa0a 	smulbb	sl, r6, sl
 80102fc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8010300:	f807 8c03 	strb.w	r8, [r7, #-3]
 8010304:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8010308:	fb06 aa02 	mla	sl, r6, r2, sl
 801030c:	fb08 b802 	mla	r8, r8, r2, fp
 8010310:	fa1f fa8a 	uxth.w	sl, sl
 8010314:	fa1f f888 	uxth.w	r8, r8
 8010318:	f10a 0601 	add.w	r6, sl, #1
 801031c:	f108 0b01 	add.w	fp, r8, #1
 8010320:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8010324:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010328:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801032c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010330:	f807 ac01 	strb.w	sl, [r7, #-1]
 8010334:	f807 8c02 	strb.w	r8, [r7, #-2]
 8010338:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801033a:	4474      	add	r4, lr
 801033c:	3703      	adds	r7, #3
 801033e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010342:	4410      	add	r0, r2
 8010344:	e7a4      	b.n	8010290 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8010346:	f04f 0800 	mov.w	r8, #0
 801034a:	eba3 0208 	sub.w	r2, r3, r8
 801034e:	2a00      	cmp	r2, #0
 8010350:	dc3b      	bgt.n	80103ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8010352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010356:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801035a:	441d      	add	r5, r3
 801035c:	2900      	cmp	r1, #0
 801035e:	f340 8093 	ble.w	8010488 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8010362:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010368:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801036c:	3901      	subs	r1, #1
 801036e:	eeb0 6a62 	vmov.f32	s12, s5
 8010372:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010376:	ee31 1a05 	vadd.f32	s2, s2, s10
 801037a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801037e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010382:	eeb0 6a43 	vmov.f32	s12, s6
 8010386:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801038a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801038e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010392:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010396:	ee77 2a62 	vsub.f32	s5, s14, s5
 801039a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801039e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80103a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80103a6:	ee12 2a90 	vmov	r2, s5
 80103aa:	eef0 2a47 	vmov.f32	s5, s14
 80103ae:	fb92 fef3 	sdiv	lr, r2, r3
 80103b2:	ee13 2a10 	vmov	r2, s6
 80103b6:	eeb0 3a67 	vmov.f32	s6, s15
 80103ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80103be:	9a02      	ldr	r2, [sp, #8]
 80103c0:	9312      	str	r3, [sp, #72]	; 0x48
 80103c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103c4:	bf08      	it	eq
 80103c6:	4613      	moveq	r3, r2
 80103c8:	e731      	b.n	801022e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80103ca:	1427      	asrs	r7, r4, #16
 80103cc:	d456      	bmi.n	801047c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103ce:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80103d2:	42be      	cmp	r6, r7
 80103d4:	dd52      	ble.n	801047c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103d6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80103da:	d44f      	bmi.n	801047c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80103e0:	454a      	cmp	r2, r9
 80103e2:	dd4b      	ble.n	801047c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103e4:	9a00      	ldr	r2, [sp, #0]
 80103e6:	b236      	sxth	r6, r6
 80103e8:	fb09 2606 	mla	r6, r9, r6, r2
 80103ec:	5df2      	ldrb	r2, [r6, r7]
 80103ee:	9e01      	ldr	r6, [sp, #4]
 80103f0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80103f4:	0e3a      	lsrs	r2, r7, #24
 80103f6:	d041      	beq.n	801047c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103f8:	9e03      	ldr	r6, [sp, #12]
 80103fa:	fa5f fb87 	uxtb.w	fp, r7
 80103fe:	4372      	muls	r2, r6
 8010400:	1c56      	adds	r6, r2, #1
 8010402:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8010406:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801040a:	1212      	asrs	r2, r2, #8
 801040c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8010410:	fa1f fa82 	uxth.w	sl, r2
 8010414:	43d2      	mvns	r2, r2
 8010416:	fb1b fb0a 	smulbb	fp, fp, sl
 801041a:	b2d2      	uxtb	r2, r2
 801041c:	fb09 b902 	mla	r9, r9, r2, fp
 8010420:	fa1f f989 	uxth.w	r9, r9
 8010424:	f109 0b01 	add.w	fp, r9, #1
 8010428:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801042c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8010430:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8010434:	fb1b fb0a 	smulbb	fp, fp, sl
 8010438:	ea4f 2929 	mov.w	r9, r9, asr #8
 801043c:	fb17 fa0a 	smulbb	sl, r7, sl
 8010440:	f805 9006 	strb.w	r9, [r5, r6]
 8010444:	442e      	add	r6, r5
 8010446:	78b7      	ldrb	r7, [r6, #2]
 8010448:	f896 9001 	ldrb.w	r9, [r6, #1]
 801044c:	fb07 aa02 	mla	sl, r7, r2, sl
 8010450:	fb09 b902 	mla	r9, r9, r2, fp
 8010454:	fa1f fa8a 	uxth.w	sl, sl
 8010458:	fa1f f989 	uxth.w	r9, r9
 801045c:	f10a 0701 	add.w	r7, sl, #1
 8010460:	f109 0b01 	add.w	fp, r9, #1
 8010464:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010468:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801046c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010470:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010474:	f886 a002 	strb.w	sl, [r6, #2]
 8010478:	f886 9001 	strb.w	r9, [r6, #1]
 801047c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801047e:	4474      	add	r4, lr
 8010480:	f108 0801 	add.w	r8, r8, #1
 8010484:	4410      	add	r0, r2
 8010486:	e760      	b.n	801034a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8010488:	b005      	add	sp, #20
 801048a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801048e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801048e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010492:	b085      	sub	sp, #20
 8010494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010498:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801049a:	9203      	str	r2, [sp, #12]
 801049c:	6868      	ldr	r0, [r5, #4]
 801049e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80104a2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80104a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80104aa:	fb00 2404 	mla	r4, r0, r4, r2
 80104ae:	682a      	ldr	r2, [r5, #0]
 80104b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80104b4:	4414      	add	r4, r2
 80104b6:	f8dc 2000 	ldr.w	r2, [ip]
 80104ba:	9201      	str	r2, [sp, #4]
 80104bc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80104c0:	3204      	adds	r2, #4
 80104c2:	9202      	str	r2, [sp, #8]
 80104c4:	2900      	cmp	r1, #0
 80104c6:	dc03      	bgt.n	80104d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80104c8:	9a03      	ldr	r2, [sp, #12]
 80104ca:	2a00      	cmp	r2, #0
 80104cc:	f340 8137 	ble.w	801073e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80104d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104d2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80104d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80104da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80104dc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80104e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	dd0d      	ble.n	8010504 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80104e8:	1405      	asrs	r5, r0, #16
 80104ea:	d405      	bmi.n	80104f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80104ec:	4545      	cmp	r5, r8
 80104ee:	da03      	bge.n	80104f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80104f0:	1415      	asrs	r5, r2, #16
 80104f2:	d401      	bmi.n	80104f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80104f4:	42bd      	cmp	r5, r7
 80104f6:	db06      	blt.n	8010506 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80104f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80104fa:	4470      	add	r0, lr
 80104fc:	3b01      	subs	r3, #1
 80104fe:	3403      	adds	r4, #3
 8010500:	442a      	add	r2, r5
 8010502:	e7ef      	b.n	80104e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8010504:	d070      	beq.n	80105e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8010506:	1e5d      	subs	r5, r3, #1
 8010508:	fb0e 0605 	mla	r6, lr, r5, r0
 801050c:	1436      	asrs	r6, r6, #16
 801050e:	d462      	bmi.n	80105d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010510:	4546      	cmp	r6, r8
 8010512:	da60      	bge.n	80105d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010514:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010516:	fb06 2505 	mla	r5, r6, r5, r2
 801051a:	142d      	asrs	r5, r5, #16
 801051c:	d45b      	bmi.n	80105d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801051e:	42bd      	cmp	r5, r7
 8010520:	da59      	bge.n	80105d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010522:	1ce5      	adds	r5, r4, #3
 8010524:	469a      	mov	sl, r3
 8010526:	f1ba 0f00 	cmp.w	sl, #0
 801052a:	dd58      	ble.n	80105de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801052c:	1416      	asrs	r6, r2, #16
 801052e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010532:	1407      	asrs	r7, r0, #16
 8010534:	46b1      	mov	r9, r6
 8010536:	9e01      	ldr	r6, [sp, #4]
 8010538:	fb08 6609 	mla	r6, r8, r9, r6
 801053c:	5df6      	ldrb	r6, [r6, r7]
 801053e:	9f02      	ldr	r7, [sp, #8]
 8010540:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8010544:	0e37      	lsrs	r7, r6, #24
 8010546:	2fff      	cmp	r7, #255	; 0xff
 8010548:	f000 80f0 	beq.w	801072c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801054c:	fa5f f887 	uxtb.w	r8, r7
 8010550:	b3d7      	cbz	r7, 80105c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010552:	fa1f f788 	uxth.w	r7, r8
 8010556:	ea6f 0808 	mvn.w	r8, r8
 801055a:	fa5f fb86 	uxtb.w	fp, r6
 801055e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8010562:	fa5f f888 	uxtb.w	r8, r8
 8010566:	fb1b fb07 	smulbb	fp, fp, r7
 801056a:	fb09 b908 	mla	r9, r9, r8, fp
 801056e:	fa1f f989 	uxth.w	r9, r9
 8010572:	f109 0b01 	add.w	fp, r9, #1
 8010576:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801057a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801057e:	fb1b fb08 	smulbb	fp, fp, r8
 8010582:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010586:	f805 9c03 	strb.w	r9, [r5, #-3]
 801058a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801058e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8010592:	fb09 b907 	mla	r9, r9, r7, fp
 8010596:	fa1f f989 	uxth.w	r9, r9
 801059a:	f109 0b01 	add.w	fp, r9, #1
 801059e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80105a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80105a6:	f805 9c02 	strb.w	r9, [r5, #-2]
 80105aa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80105ae:	fb19 f808 	smulbb	r8, r9, r8
 80105b2:	fb06 8607 	mla	r6, r6, r7, r8
 80105b6:	b2b6      	uxth	r6, r6
 80105b8:	f106 0801 	add.w	r8, r6, #1
 80105bc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80105c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80105c4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80105c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80105ca:	4470      	add	r0, lr
 80105cc:	3503      	adds	r5, #3
 80105ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80105d2:	4432      	add	r2, r6
 80105d4:	e7a7      	b.n	8010526 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80105d6:	2600      	movs	r6, #0
 80105d8:	1b9d      	subs	r5, r3, r6
 80105da:	2d00      	cmp	r5, #0
 80105dc:	dc3b      	bgt.n	8010656 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80105de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80105e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80105e6:	441c      	add	r4, r3
 80105e8:	2900      	cmp	r1, #0
 80105ea:	f340 80a8 	ble.w	801073e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80105ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80105f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80105f8:	3901      	subs	r1, #1
 80105fa:	eeb0 6a62 	vmov.f32	s12, s5
 80105fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010602:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010606:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801060a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801060e:	eeb0 6a43 	vmov.f32	s12, s6
 8010612:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010616:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801061a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801061e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010622:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010626:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801062a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801062e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010632:	ee12 2a90 	vmov	r2, s5
 8010636:	eef0 2a47 	vmov.f32	s5, s14
 801063a:	fb92 fef3 	sdiv	lr, r2, r3
 801063e:	ee13 2a10 	vmov	r2, s6
 8010642:	eeb0 3a67 	vmov.f32	s6, s15
 8010646:	fb92 f3f3 	sdiv	r3, r2, r3
 801064a:	9a03      	ldr	r2, [sp, #12]
 801064c:	9312      	str	r3, [sp, #72]	; 0x48
 801064e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010650:	bf08      	it	eq
 8010652:	4613      	moveq	r3, r2
 8010654:	e736      	b.n	80104c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8010656:	ea5f 4820 	movs.w	r8, r0, asr #16
 801065a:	d457      	bmi.n	801070c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801065c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8010660:	4547      	cmp	r7, r8
 8010662:	dd53      	ble.n	801070c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8010664:	ea5f 4922 	movs.w	r9, r2, asr #16
 8010668:	d450      	bmi.n	801070c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801066a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801066e:	454d      	cmp	r5, r9
 8010670:	dd4c      	ble.n	801070c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8010672:	9d01      	ldr	r5, [sp, #4]
 8010674:	b23f      	sxth	r7, r7
 8010676:	fb09 5707 	mla	r7, r9, r7, r5
 801067a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801067e:	9f02      	ldr	r7, [sp, #8]
 8010680:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8010684:	0e2f      	lsrs	r7, r5, #24
 8010686:	2fff      	cmp	r7, #255	; 0xff
 8010688:	d045      	beq.n	8010716 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801068a:	fa5f f987 	uxtb.w	r9, r7
 801068e:	b3ef      	cbz	r7, 801070c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8010690:	fa1f f889 	uxth.w	r8, r9
 8010694:	ea6f 0909 	mvn.w	r9, r9
 8010698:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801069c:	fa5f fb85 	uxtb.w	fp, r5
 80106a0:	f814 a007 	ldrb.w	sl, [r4, r7]
 80106a4:	fa5f f989 	uxtb.w	r9, r9
 80106a8:	fb1b fb08 	smulbb	fp, fp, r8
 80106ac:	fb0a ba09 	mla	sl, sl, r9, fp
 80106b0:	fa1f fa8a 	uxth.w	sl, sl
 80106b4:	f10a 0b01 	add.w	fp, sl, #1
 80106b8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80106bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80106c0:	f804 a007 	strb.w	sl, [r4, r7]
 80106c4:	4427      	add	r7, r4
 80106c6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80106ca:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80106ce:	f897 b001 	ldrb.w	fp, [r7, #1]
 80106d2:	fb1b fb09 	smulbb	fp, fp, r9
 80106d6:	fb0a ba08 	mla	sl, sl, r8, fp
 80106da:	fa1f fa8a 	uxth.w	sl, sl
 80106de:	f10a 0b01 	add.w	fp, sl, #1
 80106e2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80106e6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80106ea:	f887 a001 	strb.w	sl, [r7, #1]
 80106ee:	f897 a002 	ldrb.w	sl, [r7, #2]
 80106f2:	fb1a f909 	smulbb	r9, sl, r9
 80106f6:	fb05 9508 	mla	r5, r5, r8, r9
 80106fa:	b2ad      	uxth	r5, r5
 80106fc:	f105 0901 	add.w	r9, r5, #1
 8010700:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8010704:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010708:	f887 9002 	strb.w	r9, [r7, #2]
 801070c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801070e:	4470      	add	r0, lr
 8010710:	3601      	adds	r6, #1
 8010712:	442a      	add	r2, r5
 8010714:	e760      	b.n	80105d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010716:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801071a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801071e:	55e5      	strb	r5, [r4, r7]
 8010720:	4427      	add	r7, r4
 8010722:	0c2d      	lsrs	r5, r5, #16
 8010724:	f887 8001 	strb.w	r8, [r7, #1]
 8010728:	70bd      	strb	r5, [r7, #2]
 801072a:	e7ef      	b.n	801070c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801072c:	0a37      	lsrs	r7, r6, #8
 801072e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8010732:	0c36      	lsrs	r6, r6, #16
 8010734:	f805 7c02 	strb.w	r7, [r5, #-2]
 8010738:	f805 6c01 	strb.w	r6, [r5, #-1]
 801073c:	e744      	b.n	80105c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801073e:	b005      	add	sp, #20
 8010740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010744 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010748:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801074a:	9201      	str	r2, [sp, #4]
 801074c:	6870      	ldr	r0, [r6, #4]
 801074e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8010752:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8010756:	fa1f fe85 	uxth.w	lr, r5
 801075a:	43ed      	mvns	r5, r5
 801075c:	f8dc 8000 	ldr.w	r8, [ip]
 8010760:	b2ed      	uxtb	r5, r5
 8010762:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010766:	fb00 2404 	mla	r4, r0, r4, r2
 801076a:	6832      	ldr	r2, [r6, #0]
 801076c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010770:	4414      	add	r4, r2
 8010772:	2900      	cmp	r1, #0
 8010774:	dc03      	bgt.n	801077e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8010776:	9a01      	ldr	r2, [sp, #4]
 8010778:	2a00      	cmp	r2, #0
 801077a:	f340 810d 	ble.w	8010998 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801077e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010780:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8010784:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801078a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801078e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010792:	2b00      	cmp	r3, #0
 8010794:	dd0e      	ble.n	80107b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010796:	1406      	asrs	r6, r0, #16
 8010798:	d405      	bmi.n	80107a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801079a:	4556      	cmp	r6, sl
 801079c:	da03      	bge.n	80107a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801079e:	1416      	asrs	r6, r2, #16
 80107a0:	d401      	bmi.n	80107a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80107a2:	454e      	cmp	r6, r9
 80107a4:	db07      	blt.n	80107b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80107a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80107a8:	3b01      	subs	r3, #1
 80107aa:	3403      	adds	r4, #3
 80107ac:	4430      	add	r0, r6
 80107ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80107b0:	4432      	add	r2, r6
 80107b2:	e7ee      	b.n	8010792 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80107b4:	d060      	beq.n	8010878 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80107b6:	1e5e      	subs	r6, r3, #1
 80107b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80107ba:	fb07 0706 	mla	r7, r7, r6, r0
 80107be:	143f      	asrs	r7, r7, #16
 80107c0:	d451      	bmi.n	8010866 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107c2:	4557      	cmp	r7, sl
 80107c4:	da4f      	bge.n	8010866 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107c6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80107c8:	fb07 2606 	mla	r6, r7, r6, r2
 80107cc:	1436      	asrs	r6, r6, #16
 80107ce:	d44a      	bmi.n	8010866 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107d0:	454e      	cmp	r6, r9
 80107d2:	da48      	bge.n	8010866 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107d4:	1ce6      	adds	r6, r4, #3
 80107d6:	4699      	mov	r9, r3
 80107d8:	f1b9 0f00 	cmp.w	r9, #0
 80107dc:	f106 0603 	add.w	r6, r6, #3
 80107e0:	dd45      	ble.n	801086e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80107e2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80107e6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80107ea:	1417      	asrs	r7, r2, #16
 80107ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80107f0:	fb0b a707 	mla	r7, fp, r7, sl
 80107f4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80107f8:	fb1b fb05 	smulbb	fp, fp, r5
 80107fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010800:	eb08 0a07 	add.w	sl, r8, r7
 8010804:	f818 7007 	ldrb.w	r7, [r8, r7]
 8010808:	fb07 b70e 	mla	r7, r7, lr, fp
 801080c:	b2bf      	uxth	r7, r7
 801080e:	f107 0b01 	add.w	fp, r7, #1
 8010812:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010816:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801081a:	fb1b fb05 	smulbb	fp, fp, r5
 801081e:	123f      	asrs	r7, r7, #8
 8010820:	f806 7c06 	strb.w	r7, [r6, #-6]
 8010824:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8010828:	fb07 b70e 	mla	r7, r7, lr, fp
 801082c:	b2bf      	uxth	r7, r7
 801082e:	f107 0b01 	add.w	fp, r7, #1
 8010832:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010836:	123f      	asrs	r7, r7, #8
 8010838:	f806 7c05 	strb.w	r7, [r6, #-5]
 801083c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8010840:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8010844:	fb1a fa05 	smulbb	sl, sl, r5
 8010848:	fb07 a70e 	mla	r7, r7, lr, sl
 801084c:	b2bf      	uxth	r7, r7
 801084e:	f107 0a01 	add.w	sl, r7, #1
 8010852:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8010856:	123f      	asrs	r7, r7, #8
 8010858:	f806 7c04 	strb.w	r7, [r6, #-4]
 801085c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801085e:	4438      	add	r0, r7
 8010860:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010862:	443a      	add	r2, r7
 8010864:	e7b8      	b.n	80107d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8010866:	2700      	movs	r7, #0
 8010868:	1bde      	subs	r6, r3, r7
 801086a:	2e00      	cmp	r6, #0
 801086c:	dc3f      	bgt.n	80108ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801086e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010876:	441c      	add	r4, r3
 8010878:	2900      	cmp	r1, #0
 801087a:	f340 808d 	ble.w	8010998 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801087e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010884:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010888:	3901      	subs	r1, #1
 801088a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801088e:	eef0 6a62 	vmov.f32	s13, s5
 8010892:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010896:	ee31 1a05 	vadd.f32	s2, s2, s10
 801089a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801089e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80108a2:	eef0 6a43 	vmov.f32	s13, s6
 80108a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80108aa:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80108ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80108b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80108b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80108ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80108be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80108c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80108c6:	ee12 2a90 	vmov	r2, s5
 80108ca:	eef0 2a47 	vmov.f32	s5, s14
 80108ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80108d2:	ee13 2a10 	vmov	r2, s6
 80108d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80108d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108da:	eeb0 3a67 	vmov.f32	s6, s15
 80108de:	fb92 f3f3 	sdiv	r3, r2, r3
 80108e2:	9a01      	ldr	r2, [sp, #4]
 80108e4:	9310      	str	r3, [sp, #64]	; 0x40
 80108e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108e8:	bf08      	it	eq
 80108ea:	4613      	moveq	r3, r2
 80108ec:	e741      	b.n	8010772 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80108ee:	ea5f 4920 	movs.w	r9, r0, asr #16
 80108f2:	d44b      	bmi.n	801098c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80108f4:	f8dc b008 	ldr.w	fp, [ip, #8]
 80108f8:	45cb      	cmp	fp, r9
 80108fa:	dd47      	ble.n	801098c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80108fc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010900:	d444      	bmi.n	801098c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8010902:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8010906:	4556      	cmp	r6, sl
 8010908:	dd40      	ble.n	801098c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801090a:	fa0f f68b 	sxth.w	r6, fp
 801090e:	fb0a 9906 	mla	r9, sl, r6, r9
 8010912:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8010916:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801091a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801091e:	fb1b fb05 	smulbb	fp, fp, r5
 8010922:	eb08 0a09 	add.w	sl, r8, r9
 8010926:	f818 9009 	ldrb.w	r9, [r8, r9]
 801092a:	fb09 b90e 	mla	r9, r9, lr, fp
 801092e:	fa1f f989 	uxth.w	r9, r9
 8010932:	f109 0b01 	add.w	fp, r9, #1
 8010936:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801093a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801093e:	f804 9006 	strb.w	r9, [r4, r6]
 8010942:	4426      	add	r6, r4
 8010944:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010948:	f896 b001 	ldrb.w	fp, [r6, #1]
 801094c:	fb1b fb05 	smulbb	fp, fp, r5
 8010950:	fb09 b90e 	mla	r9, r9, lr, fp
 8010954:	fa1f f989 	uxth.w	r9, r9
 8010958:	f109 0b01 	add.w	fp, r9, #1
 801095c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010960:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010964:	f886 9001 	strb.w	r9, [r6, #1]
 8010968:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801096c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8010970:	fb1a fa05 	smulbb	sl, sl, r5
 8010974:	fb09 a90e 	mla	r9, r9, lr, sl
 8010978:	fa1f f989 	uxth.w	r9, r9
 801097c:	f109 0a01 	add.w	sl, r9, #1
 8010980:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8010984:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010988:	f886 9002 	strb.w	r9, [r6, #2]
 801098c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801098e:	3701      	adds	r7, #1
 8010990:	4430      	add	r0, r6
 8010992:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010994:	4432      	add	r2, r6
 8010996:	e767      	b.n	8010868 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8010998:	b003      	add	sp, #12
 801099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801099e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801099e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80109a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109a8:	9201      	str	r2, [sp, #4]
 80109aa:	6868      	ldr	r0, [r5, #4]
 80109ac:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80109ae:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80109b2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80109b6:	fb00 2404 	mla	r4, r0, r4, r2
 80109ba:	682a      	ldr	r2, [r5, #0]
 80109bc:	f8d7 8000 	ldr.w	r8, [r7]
 80109c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80109c4:	4414      	add	r4, r2
 80109c6:	2900      	cmp	r1, #0
 80109c8:	dc03      	bgt.n	80109d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80109ca:	9a01      	ldr	r2, [sp, #4]
 80109cc:	2a00      	cmp	r2, #0
 80109ce:	f340 80af 	ble.w	8010b30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80109d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109d4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80109d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80109dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109de:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80109e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	dd0c      	ble.n	8010a04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80109ea:	1405      	asrs	r5, r0, #16
 80109ec:	d405      	bmi.n	80109fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80109ee:	4555      	cmp	r5, sl
 80109f0:	da03      	bge.n	80109fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80109f2:	1415      	asrs	r5, r2, #16
 80109f4:	d401      	bmi.n	80109fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80109f6:	454d      	cmp	r5, r9
 80109f8:	db05      	blt.n	8010a06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80109fa:	4470      	add	r0, lr
 80109fc:	4462      	add	r2, ip
 80109fe:	3b01      	subs	r3, #1
 8010a00:	3403      	adds	r4, #3
 8010a02:	e7f0      	b.n	80109e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010a04:	d038      	beq.n	8010a78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010a06:	1e5d      	subs	r5, r3, #1
 8010a08:	fb0e 0605 	mla	r6, lr, r5, r0
 8010a0c:	1436      	asrs	r6, r6, #16
 8010a0e:	d42a      	bmi.n	8010a66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a10:	4556      	cmp	r6, sl
 8010a12:	da28      	bge.n	8010a66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a14:	fb0c 2505 	mla	r5, ip, r5, r2
 8010a18:	142d      	asrs	r5, r5, #16
 8010a1a:	d424      	bmi.n	8010a66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a1c:	454d      	cmp	r5, r9
 8010a1e:	da22      	bge.n	8010a66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a20:	1ce6      	adds	r6, r4, #3
 8010a22:	4699      	mov	r9, r3
 8010a24:	f1b9 0f00 	cmp.w	r9, #0
 8010a28:	f106 0603 	add.w	r6, r6, #3
 8010a2c:	dd1f      	ble.n	8010a6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8010a2e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8010a32:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8010a36:	1415      	asrs	r5, r2, #16
 8010a38:	4470      	add	r0, lr
 8010a3a:	4462      	add	r2, ip
 8010a3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a40:	fb0b a505 	mla	r5, fp, r5, sl
 8010a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a48:	eb08 0a05 	add.w	sl, r8, r5
 8010a4c:	f818 5005 	ldrb.w	r5, [r8, r5]
 8010a50:	f806 5c06 	strb.w	r5, [r6, #-6]
 8010a54:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8010a58:	f806 5c05 	strb.w	r5, [r6, #-5]
 8010a5c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8010a60:	f806 5c04 	strb.w	r5, [r6, #-4]
 8010a64:	e7de      	b.n	8010a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8010a66:	2600      	movs	r6, #0
 8010a68:	1b9d      	subs	r5, r3, r6
 8010a6a:	2d00      	cmp	r5, #0
 8010a6c:	dc38      	bgt.n	8010ae0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8010a6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010a72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a76:	441c      	add	r4, r3
 8010a78:	2900      	cmp	r1, #0
 8010a7a:	dd59      	ble.n	8010b30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8010a7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010a86:	3901      	subs	r1, #1
 8010a88:	eeb0 6a62 	vmov.f32	s12, s5
 8010a8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010a90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010a94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010a98:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010a9c:	eeb0 6a43 	vmov.f32	s12, s6
 8010aa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010aa4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010aa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010aac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010ab0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010ab4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010ab8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010abc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010ac0:	ee12 2a90 	vmov	r2, s5
 8010ac4:	eef0 2a47 	vmov.f32	s5, s14
 8010ac8:	fb92 fef3 	sdiv	lr, r2, r3
 8010acc:	ee13 2a10 	vmov	r2, s6
 8010ad0:	eeb0 3a67 	vmov.f32	s6, s15
 8010ad4:	fb92 fcf3 	sdiv	ip, r2, r3
 8010ad8:	9a01      	ldr	r2, [sp, #4]
 8010ada:	bf08      	it	eq
 8010adc:	4613      	moveq	r3, r2
 8010ade:	e772      	b.n	80109c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8010ae0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010ae4:	d420      	bmi.n	8010b28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010ae6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8010aea:	45cb      	cmp	fp, r9
 8010aec:	dd1c      	ble.n	8010b28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010aee:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010af2:	d419      	bmi.n	8010b28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010af4:	68fd      	ldr	r5, [r7, #12]
 8010af6:	4555      	cmp	r5, sl
 8010af8:	dd16      	ble.n	8010b28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010afa:	fa0f f58b 	sxth.w	r5, fp
 8010afe:	fb0a 9505 	mla	r5, sl, r5, r9
 8010b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b06:	f818 9005 	ldrb.w	r9, [r8, r5]
 8010b0a:	eb08 0b05 	add.w	fp, r8, r5
 8010b0e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8010b12:	f804 9005 	strb.w	r9, [r4, r5]
 8010b16:	4425      	add	r5, r4
 8010b18:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8010b1c:	f885 9001 	strb.w	r9, [r5, #1]
 8010b20:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8010b24:	f885 9002 	strb.w	r9, [r5, #2]
 8010b28:	4470      	add	r0, lr
 8010b2a:	4462      	add	r2, ip
 8010b2c:	3601      	adds	r6, #1
 8010b2e:	e79b      	b.n	8010a68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8010b30:	b003      	add	sp, #12
 8010b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010b42:	9202      	str	r2, [sp, #8]
 8010b44:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010b48:	6860      	ldr	r0, [r4, #4]
 8010b4a:	9203      	str	r2, [sp, #12]
 8010b4c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010b50:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010b54:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010b58:	fb00 2505 	mla	r5, r0, r5, r2
 8010b5c:	6822      	ldr	r2, [r4, #0]
 8010b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b62:	4415      	add	r5, r2
 8010b64:	f8dc 2000 	ldr.w	r2, [ip]
 8010b68:	9201      	str	r2, [sp, #4]
 8010b6a:	2900      	cmp	r1, #0
 8010b6c:	dc03      	bgt.n	8010b76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8010b6e:	9a02      	ldr	r2, [sp, #8]
 8010b70:	2a00      	cmp	r2, #0
 8010b72:	f340 8122 	ble.w	8010dba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8010b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b78:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010b7c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010b80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b82:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010b86:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	dd0d      	ble.n	8010baa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8010b8e:	1422      	asrs	r2, r4, #16
 8010b90:	d405      	bmi.n	8010b9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010b92:	4542      	cmp	r2, r8
 8010b94:	da03      	bge.n	8010b9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010b96:	1402      	asrs	r2, r0, #16
 8010b98:	d401      	bmi.n	8010b9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010b9a:	42ba      	cmp	r2, r7
 8010b9c:	db06      	blt.n	8010bac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010b9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ba0:	4474      	add	r4, lr
 8010ba2:	3b01      	subs	r3, #1
 8010ba4:	3503      	adds	r5, #3
 8010ba6:	4410      	add	r0, r2
 8010ba8:	e7ef      	b.n	8010b8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8010baa:	d072      	beq.n	8010c92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8010bac:	1e5a      	subs	r2, r3, #1
 8010bae:	fb0e 4602 	mla	r6, lr, r2, r4
 8010bb2:	1436      	asrs	r6, r6, #16
 8010bb4:	d462      	bmi.n	8010c7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bb6:	4546      	cmp	r6, r8
 8010bb8:	da60      	bge.n	8010c7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010bbc:	fb06 0202 	mla	r2, r6, r2, r0
 8010bc0:	1412      	asrs	r2, r2, #16
 8010bc2:	d45b      	bmi.n	8010c7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bc4:	42ba      	cmp	r2, r7
 8010bc6:	da59      	bge.n	8010c7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bc8:	1cef      	adds	r7, r5, #3
 8010bca:	4699      	mov	r9, r3
 8010bcc:	f1b9 0f00 	cmp.w	r9, #0
 8010bd0:	dd5a      	ble.n	8010c88 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8010bd2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010bd6:	1426      	asrs	r6, r4, #16
 8010bd8:	1402      	asrs	r2, r0, #16
 8010bda:	fb08 6202 	mla	r2, r8, r2, r6
 8010bde:	9e01      	ldr	r6, [sp, #4]
 8010be0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8010be4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8010be8:	d041      	beq.n	8010c6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010bea:	9a03      	ldr	r2, [sp, #12]
 8010bec:	fa5f fb86 	uxtb.w	fp, r6
 8010bf0:	fb02 f808 	mul.w	r8, r2, r8
 8010bf4:	f108 0201 	add.w	r2, r8, #1
 8010bf8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8010bfc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8010c00:	1212      	asrs	r2, r2, #8
 8010c02:	fa1f fa82 	uxth.w	sl, r2
 8010c06:	43d2      	mvns	r2, r2
 8010c08:	fb1b fb0a 	smulbb	fp, fp, sl
 8010c0c:	b2d2      	uxtb	r2, r2
 8010c0e:	fb08 b802 	mla	r8, r8, r2, fp
 8010c12:	fa1f f888 	uxth.w	r8, r8
 8010c16:	f108 0b01 	add.w	fp, r8, #1
 8010c1a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010c1e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8010c22:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8010c26:	fb1b fb0a 	smulbb	fp, fp, sl
 8010c2a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010c2e:	fb16 fa0a 	smulbb	sl, r6, sl
 8010c32:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8010c36:	f807 8c03 	strb.w	r8, [r7, #-3]
 8010c3a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8010c3e:	fb06 aa02 	mla	sl, r6, r2, sl
 8010c42:	fb08 b802 	mla	r8, r8, r2, fp
 8010c46:	fa1f fa8a 	uxth.w	sl, sl
 8010c4a:	fa1f f888 	uxth.w	r8, r8
 8010c4e:	f10a 0601 	add.w	r6, sl, #1
 8010c52:	f108 0b01 	add.w	fp, r8, #1
 8010c56:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8010c5a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010c5e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010c62:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010c66:	f807 ac01 	strb.w	sl, [r7, #-1]
 8010c6a:	f807 8c02 	strb.w	r8, [r7, #-2]
 8010c6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010c70:	4474      	add	r4, lr
 8010c72:	3703      	adds	r7, #3
 8010c74:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c78:	4410      	add	r0, r2
 8010c7a:	e7a7      	b.n	8010bcc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8010c7c:	f04f 0800 	mov.w	r8, #0
 8010c80:	eba3 0208 	sub.w	r2, r3, r8
 8010c84:	2a00      	cmp	r2, #0
 8010c86:	dc3b      	bgt.n	8010d00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8010c88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010c8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c90:	441d      	add	r5, r3
 8010c92:	2900      	cmp	r1, #0
 8010c94:	f340 8091 	ble.w	8010dba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8010c98:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010ca2:	3901      	subs	r1, #1
 8010ca4:	eeb0 6a62 	vmov.f32	s12, s5
 8010ca8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010cac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010cb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010cb4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010cb8:	eeb0 6a43 	vmov.f32	s12, s6
 8010cbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010cc0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8010cc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010cc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010ccc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010cd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010cd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010cd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010cdc:	ee12 2a90 	vmov	r2, s5
 8010ce0:	eef0 2a47 	vmov.f32	s5, s14
 8010ce4:	fb92 fef3 	sdiv	lr, r2, r3
 8010ce8:	ee13 2a10 	vmov	r2, s6
 8010cec:	eeb0 3a67 	vmov.f32	s6, s15
 8010cf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8010cf4:	9a02      	ldr	r2, [sp, #8]
 8010cf6:	9312      	str	r3, [sp, #72]	; 0x48
 8010cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cfa:	bf08      	it	eq
 8010cfc:	4613      	moveq	r3, r2
 8010cfe:	e734      	b.n	8010b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8010d00:	1427      	asrs	r7, r4, #16
 8010d02:	d454      	bmi.n	8010dae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d04:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010d08:	42be      	cmp	r6, r7
 8010d0a:	dd50      	ble.n	8010dae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d0c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010d10:	d44d      	bmi.n	8010dae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d12:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010d16:	454a      	cmp	r2, r9
 8010d18:	dd49      	ble.n	8010dae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d1a:	b236      	sxth	r6, r6
 8010d1c:	9a01      	ldr	r2, [sp, #4]
 8010d1e:	fb09 7606 	mla	r6, r9, r6, r7
 8010d22:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8010d26:	0e3a      	lsrs	r2, r7, #24
 8010d28:	d041      	beq.n	8010dae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d2a:	9e03      	ldr	r6, [sp, #12]
 8010d2c:	fa5f fb87 	uxtb.w	fp, r7
 8010d30:	4372      	muls	r2, r6
 8010d32:	1c56      	adds	r6, r2, #1
 8010d34:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8010d38:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8010d3c:	1212      	asrs	r2, r2, #8
 8010d3e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8010d42:	fa1f fa82 	uxth.w	sl, r2
 8010d46:	43d2      	mvns	r2, r2
 8010d48:	fb1b fb0a 	smulbb	fp, fp, sl
 8010d4c:	b2d2      	uxtb	r2, r2
 8010d4e:	fb09 b902 	mla	r9, r9, r2, fp
 8010d52:	fa1f f989 	uxth.w	r9, r9
 8010d56:	f109 0b01 	add.w	fp, r9, #1
 8010d5a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010d5e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8010d62:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8010d66:	fb1b fb0a 	smulbb	fp, fp, sl
 8010d6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010d6e:	fb17 fa0a 	smulbb	sl, r7, sl
 8010d72:	f805 9006 	strb.w	r9, [r5, r6]
 8010d76:	442e      	add	r6, r5
 8010d78:	78b7      	ldrb	r7, [r6, #2]
 8010d7a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8010d7e:	fb07 aa02 	mla	sl, r7, r2, sl
 8010d82:	fb09 b902 	mla	r9, r9, r2, fp
 8010d86:	fa1f fa8a 	uxth.w	sl, sl
 8010d8a:	fa1f f989 	uxth.w	r9, r9
 8010d8e:	f10a 0701 	add.w	r7, sl, #1
 8010d92:	f109 0b01 	add.w	fp, r9, #1
 8010d96:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010d9a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010d9e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010da2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010da6:	f886 a002 	strb.w	sl, [r6, #2]
 8010daa:	f886 9001 	strb.w	r9, [r6, #1]
 8010dae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010db0:	4474      	add	r4, lr
 8010db2:	f108 0801 	add.w	r8, r8, #1
 8010db6:	4410      	add	r0, r2
 8010db8:	e762      	b.n	8010c80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010dba:	b005      	add	sp, #20
 8010dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010dc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dca:	9201      	str	r2, [sp, #4]
 8010dcc:	6860      	ldr	r0, [r4, #4]
 8010dce:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8010dd2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8010dd6:	fb00 2505 	mla	r5, r0, r5, r2
 8010dda:	6822      	ldr	r2, [r4, #0]
 8010ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010de0:	4415      	add	r5, r2
 8010de2:	f8dc 2000 	ldr.w	r2, [ip]
 8010de6:	9200      	str	r2, [sp, #0]
 8010de8:	2900      	cmp	r1, #0
 8010dea:	dc03      	bgt.n	8010df4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8010dec:	9a01      	ldr	r2, [sp, #4]
 8010dee:	2a00      	cmp	r2, #0
 8010df0:	f340 812b 	ble.w	801104a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010df4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010df6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8010dfa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e00:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010e04:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	dd0e      	ble.n	8010e2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010e0c:	1422      	asrs	r2, r4, #16
 8010e0e:	d405      	bmi.n	8010e1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e10:	4572      	cmp	r2, lr
 8010e12:	da03      	bge.n	8010e1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e14:	1402      	asrs	r2, r0, #16
 8010e16:	d401      	bmi.n	8010e1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e18:	42ba      	cmp	r2, r7
 8010e1a:	db07      	blt.n	8010e2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8010e1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	3503      	adds	r5, #3
 8010e22:	4414      	add	r4, r2
 8010e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e26:	4410      	add	r0, r2
 8010e28:	e7ee      	b.n	8010e08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010e2a:	d06f      	beq.n	8010f0c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8010e2c:	1e5a      	subs	r2, r3, #1
 8010e2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010e30:	fb06 4602 	mla	r6, r6, r2, r4
 8010e34:	1436      	asrs	r6, r6, #16
 8010e36:	d45e      	bmi.n	8010ef6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e38:	4576      	cmp	r6, lr
 8010e3a:	da5c      	bge.n	8010ef6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e3c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010e3e:	fb06 0202 	mla	r2, r6, r2, r0
 8010e42:	1412      	asrs	r2, r2, #16
 8010e44:	d457      	bmi.n	8010ef6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e46:	42ba      	cmp	r2, r7
 8010e48:	da55      	bge.n	8010ef6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e4a:	1cee      	adds	r6, r5, #3
 8010e4c:	469a      	mov	sl, r3
 8010e4e:	f1ba 0f00 	cmp.w	sl, #0
 8010e52:	dd56      	ble.n	8010f02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8010e54:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8010e58:	1427      	asrs	r7, r4, #16
 8010e5a:	1402      	asrs	r2, r0, #16
 8010e5c:	fb0e 7202 	mla	r2, lr, r2, r7
 8010e60:	9f00      	ldr	r7, [sp, #0]
 8010e62:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8010e66:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8010e6a:	d03c      	beq.n	8010ee6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8010e6c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8010e70:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8010e74:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8010e78:	fa5f f28e 	uxtb.w	r2, lr
 8010e7c:	b2ff      	uxtb	r7, r7
 8010e7e:	f000 80dd 	beq.w	801103c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8010e82:	fa1f f882 	uxth.w	r8, r2
 8010e86:	43d2      	mvns	r2, r2
 8010e88:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8010e8c:	fb17 f708 	smulbb	r7, r7, r8
 8010e90:	b2d2      	uxtb	r2, r2
 8010e92:	fb19 f908 	smulbb	r9, r9, r8
 8010e96:	fb0e 7702 	mla	r7, lr, r2, r7
 8010e9a:	fb1b f808 	smulbb	r8, fp, r8
 8010e9e:	b2bf      	uxth	r7, r7
 8010ea0:	f107 0e01 	add.w	lr, r7, #1
 8010ea4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8010ea8:	123f      	asrs	r7, r7, #8
 8010eaa:	f806 7c03 	strb.w	r7, [r6, #-3]
 8010eae:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8010eb2:	fb07 9902 	mla	r9, r7, r2, r9
 8010eb6:	fa1f f989 	uxth.w	r9, r9
 8010eba:	f109 0701 	add.w	r7, r9, #1
 8010ebe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8010ec2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8010ec6:	fb07 8802 	mla	r8, r7, r2, r8
 8010eca:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010ece:	fa1f f888 	uxth.w	r8, r8
 8010ed2:	f806 9c02 	strb.w	r9, [r6, #-2]
 8010ed6:	f108 0201 	add.w	r2, r8, #1
 8010eda:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8010ede:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010ee2:	f806 8c01 	strb.w	r8, [r6, #-1]
 8010ee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ee8:	3603      	adds	r6, #3
 8010eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010eee:	4414      	add	r4, r2
 8010ef0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ef2:	4410      	add	r0, r2
 8010ef4:	e7ab      	b.n	8010e4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8010ef6:	f04f 0e00 	mov.w	lr, #0
 8010efa:	eba3 020e 	sub.w	r2, r3, lr
 8010efe:	2a00      	cmp	r2, #0
 8010f00:	dc3d      	bgt.n	8010f7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8010f02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f0a:	441d      	add	r5, r3
 8010f0c:	2900      	cmp	r1, #0
 8010f0e:	f340 809c 	ble.w	801104a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010f12:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010f1c:	3901      	subs	r1, #1
 8010f1e:	eeb0 6a62 	vmov.f32	s12, s5
 8010f22:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010f26:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010f2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f2e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010f32:	eeb0 6a43 	vmov.f32	s12, s6
 8010f36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f3a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010f3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010f42:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010f46:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010f4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010f4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010f52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010f56:	ee12 2a90 	vmov	r2, s5
 8010f5a:	eef0 2a47 	vmov.f32	s5, s14
 8010f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f62:	ee13 2a10 	vmov	r2, s6
 8010f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f6a:	eeb0 3a67 	vmov.f32	s6, s15
 8010f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f72:	9a01      	ldr	r2, [sp, #4]
 8010f74:	9310      	str	r3, [sp, #64]	; 0x40
 8010f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f78:	bf08      	it	eq
 8010f7a:	4613      	moveq	r3, r2
 8010f7c:	e734      	b.n	8010de8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8010f7e:	1427      	asrs	r7, r4, #16
 8010f80:	d44d      	bmi.n	801101e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010f82:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010f86:	42be      	cmp	r6, r7
 8010f88:	dd49      	ble.n	801101e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010f8a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8010f8e:	d446      	bmi.n	801101e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010f90:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010f94:	4542      	cmp	r2, r8
 8010f96:	dd42      	ble.n	801101e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010f98:	b236      	sxth	r6, r6
 8010f9a:	9a00      	ldr	r2, [sp, #0]
 8010f9c:	fb08 7606 	mla	r6, r8, r6, r7
 8010fa0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8010fa4:	0e3a      	lsrs	r2, r7, #24
 8010fa6:	d03a      	beq.n	801101e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fa8:	2aff      	cmp	r2, #255	; 0xff
 8010faa:	b2d6      	uxtb	r6, r2
 8010fac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8010fb0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8010fb4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8010fb8:	b2ff      	uxtb	r7, r7
 8010fba:	d037      	beq.n	801102c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8010fbc:	fa1f f986 	uxth.w	r9, r6
 8010fc0:	4472      	add	r2, lr
 8010fc2:	43f6      	mvns	r6, r6
 8010fc4:	f815 8002 	ldrb.w	r8, [r5, r2]
 8010fc8:	fb17 f709 	smulbb	r7, r7, r9
 8010fcc:	fb1a fa09 	smulbb	sl, sl, r9
 8010fd0:	b2f6      	uxtb	r6, r6
 8010fd2:	fb1b f909 	smulbb	r9, fp, r9
 8010fd6:	fb08 7706 	mla	r7, r8, r6, r7
 8010fda:	b2bf      	uxth	r7, r7
 8010fdc:	f107 0801 	add.w	r8, r7, #1
 8010fe0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8010fe4:	123f      	asrs	r7, r7, #8
 8010fe6:	54af      	strb	r7, [r5, r2]
 8010fe8:	442a      	add	r2, r5
 8010fea:	7857      	ldrb	r7, [r2, #1]
 8010fec:	fb07 aa06 	mla	sl, r7, r6, sl
 8010ff0:	fa1f fa8a 	uxth.w	sl, sl
 8010ff4:	f10a 0701 	add.w	r7, sl, #1
 8010ff8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010ffc:	7897      	ldrb	r7, [r2, #2]
 8010ffe:	fb07 9906 	mla	r9, r7, r6, r9
 8011002:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011006:	fa1f f989 	uxth.w	r9, r9
 801100a:	f882 a001 	strb.w	sl, [r2, #1]
 801100e:	f109 0601 	add.w	r6, r9, #1
 8011012:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8011016:	ea4f 2929 	mov.w	r9, r9, asr #8
 801101a:	f882 9002 	strb.w	r9, [r2, #2]
 801101e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011020:	f10e 0e01 	add.w	lr, lr, #1
 8011024:	4414      	add	r4, r2
 8011026:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011028:	4410      	add	r0, r2
 801102a:	e766      	b.n	8010efa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801102c:	4472      	add	r2, lr
 801102e:	54af      	strb	r7, [r5, r2]
 8011030:	442a      	add	r2, r5
 8011032:	f882 a001 	strb.w	sl, [r2, #1]
 8011036:	f882 b002 	strb.w	fp, [r2, #2]
 801103a:	e7f0      	b.n	801101e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801103c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011040:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011044:	f806 bc01 	strb.w	fp, [r6, #-1]
 8011048:	e74d      	b.n	8010ee6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801104a:	b003      	add	sp, #12
 801104c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011050 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011054:	b087      	sub	sp, #28
 8011056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801105a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801105c:	9204      	str	r2, [sp, #16]
 801105e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011062:	6860      	ldr	r0, [r4, #4]
 8011064:	9205      	str	r2, [sp, #20]
 8011066:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801106a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801106e:	9101      	str	r1, [sp, #4]
 8011070:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8011074:	fb00 2505 	mla	r5, r0, r5, r2
 8011078:	6822      	ldr	r2, [r4, #0]
 801107a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801107e:	4415      	add	r5, r2
 8011080:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011084:	3201      	adds	r2, #1
 8011086:	f022 0201 	bic.w	r2, r2, #1
 801108a:	9202      	str	r2, [sp, #8]
 801108c:	f8dc 2000 	ldr.w	r2, [ip]
 8011090:	9203      	str	r2, [sp, #12]
 8011092:	9a01      	ldr	r2, [sp, #4]
 8011094:	2a00      	cmp	r2, #0
 8011096:	dc03      	bgt.n	80110a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8011098:	9a04      	ldr	r2, [sp, #16]
 801109a:	2a00      	cmp	r2, #0
 801109c:	f340 8135 	ble.w	801130a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80110a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80110a2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80110a6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80110aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110ac:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80110b0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	dd0d      	ble.n	80110d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80110b8:	1422      	asrs	r2, r4, #16
 80110ba:	d405      	bmi.n	80110c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110bc:	4542      	cmp	r2, r8
 80110be:	da03      	bge.n	80110c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110c0:	1402      	asrs	r2, r0, #16
 80110c2:	d401      	bmi.n	80110c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110c4:	42ba      	cmp	r2, r7
 80110c6:	db06      	blt.n	80110d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80110c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110ca:	4474      	add	r4, lr
 80110cc:	3b01      	subs	r3, #1
 80110ce:	3503      	adds	r5, #3
 80110d0:	4410      	add	r0, r2
 80110d2:	e7ef      	b.n	80110b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80110d4:	d077      	beq.n	80111c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80110d6:	1e5a      	subs	r2, r3, #1
 80110d8:	fb0e 4602 	mla	r6, lr, r2, r4
 80110dc:	1436      	asrs	r6, r6, #16
 80110de:	d469      	bmi.n	80111b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80110e0:	4546      	cmp	r6, r8
 80110e2:	da67      	bge.n	80111b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80110e4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80110e6:	fb06 0202 	mla	r2, r6, r2, r0
 80110ea:	1412      	asrs	r2, r2, #16
 80110ec:	d462      	bmi.n	80111b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80110ee:	42ba      	cmp	r2, r7
 80110f0:	da60      	bge.n	80111b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80110f2:	1cee      	adds	r6, r5, #3
 80110f4:	4699      	mov	r9, r3
 80110f6:	f1b9 0f00 	cmp.w	r9, #0
 80110fa:	dd5f      	ble.n	80111bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80110fc:	1422      	asrs	r2, r4, #16
 80110fe:	9902      	ldr	r1, [sp, #8]
 8011100:	1407      	asrs	r7, r0, #16
 8011102:	fb01 2707 	mla	r7, r1, r7, r2
 8011106:	9903      	ldr	r1, [sp, #12]
 8011108:	087a      	lsrs	r2, r7, #1
 801110a:	5c8a      	ldrb	r2, [r1, r2]
 801110c:	07f9      	lsls	r1, r7, #31
 801110e:	bf54      	ite	pl
 8011110:	f002 020f 	andpl.w	r2, r2, #15
 8011114:	1112      	asrmi	r2, r2, #4
 8011116:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801111a:	b2d2      	uxtb	r2, r2
 801111c:	2a00      	cmp	r2, #0
 801111e:	d042      	beq.n	80111a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8011120:	497b      	ldr	r1, [pc, #492]	; (8011310 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011122:	680f      	ldr	r7, [r1, #0]
 8011124:	9905      	ldr	r1, [sp, #20]
 8011126:	fa5f fb87 	uxtb.w	fp, r7
 801112a:	434a      	muls	r2, r1
 801112c:	f102 0801 	add.w	r8, r2, #1
 8011130:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8011134:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8011138:	1212      	asrs	r2, r2, #8
 801113a:	fa1f fa82 	uxth.w	sl, r2
 801113e:	43d2      	mvns	r2, r2
 8011140:	fb1b fb0a 	smulbb	fp, fp, sl
 8011144:	b2d2      	uxtb	r2, r2
 8011146:	fb08 b802 	mla	r8, r8, r2, fp
 801114a:	fa1f f888 	uxth.w	r8, r8
 801114e:	f108 0b01 	add.w	fp, r8, #1
 8011152:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011156:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801115a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801115e:	fb1b fb0a 	smulbb	fp, fp, sl
 8011162:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011166:	fb17 fa0a 	smulbb	sl, r7, sl
 801116a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801116e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8011172:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8011176:	fb07 aa02 	mla	sl, r7, r2, sl
 801117a:	fb08 b802 	mla	r8, r8, r2, fp
 801117e:	fa1f fa8a 	uxth.w	sl, sl
 8011182:	fa1f f888 	uxth.w	r8, r8
 8011186:	f10a 0701 	add.w	r7, sl, #1
 801118a:	f108 0b01 	add.w	fp, r8, #1
 801118e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011192:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011196:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801119a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801119e:	f806 ac01 	strb.w	sl, [r6, #-1]
 80111a2:	f806 8c02 	strb.w	r8, [r6, #-2]
 80111a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80111a8:	4474      	add	r4, lr
 80111aa:	3603      	adds	r6, #3
 80111ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80111b0:	4410      	add	r0, r2
 80111b2:	e7a0      	b.n	80110f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80111b4:	2700      	movs	r7, #0
 80111b6:	1bda      	subs	r2, r3, r7
 80111b8:	2a00      	cmp	r2, #0
 80111ba:	dc3e      	bgt.n	801123a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80111bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80111c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80111c4:	441d      	add	r5, r3
 80111c6:	9b01      	ldr	r3, [sp, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f340 809e 	ble.w	801130a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80111ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80111d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80111d8:	eeb0 6a62 	vmov.f32	s12, s5
 80111dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80111e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80111e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80111e8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80111ec:	eeb0 6a43 	vmov.f32	s12, s6
 80111f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80111f4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80111f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80111fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011200:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011204:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011208:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801120c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011210:	ee12 2a90 	vmov	r2, s5
 8011214:	eef0 2a47 	vmov.f32	s5, s14
 8011218:	fb92 fef3 	sdiv	lr, r2, r3
 801121c:	ee13 2a10 	vmov	r2, s6
 8011220:	eeb0 3a67 	vmov.f32	s6, s15
 8011224:	fb92 f3f3 	sdiv	r3, r2, r3
 8011228:	9314      	str	r3, [sp, #80]	; 0x50
 801122a:	9b01      	ldr	r3, [sp, #4]
 801122c:	9a04      	ldr	r2, [sp, #16]
 801122e:	3b01      	subs	r3, #1
 8011230:	9301      	str	r3, [sp, #4]
 8011232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011234:	bf08      	it	eq
 8011236:	4613      	moveq	r3, r2
 8011238:	e72b      	b.n	8011092 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801123a:	1426      	asrs	r6, r4, #16
 801123c:	d460      	bmi.n	8011300 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801123e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011242:	42b2      	cmp	r2, r6
 8011244:	dd5c      	ble.n	8011300 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011246:	ea5f 4820 	movs.w	r8, r0, asr #16
 801124a:	d459      	bmi.n	8011300 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801124c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011250:	4542      	cmp	r2, r8
 8011252:	dd55      	ble.n	8011300 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011254:	9a02      	ldr	r2, [sp, #8]
 8011256:	9903      	ldr	r1, [sp, #12]
 8011258:	fb08 6602 	mla	r6, r8, r2, r6
 801125c:	0872      	lsrs	r2, r6, #1
 801125e:	07f6      	lsls	r6, r6, #31
 8011260:	5c8a      	ldrb	r2, [r1, r2]
 8011262:	bf54      	ite	pl
 8011264:	f002 020f 	andpl.w	r2, r2, #15
 8011268:	1112      	asrmi	r2, r2, #4
 801126a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801126e:	b2d2      	uxtb	r2, r2
 8011270:	2a00      	cmp	r2, #0
 8011272:	d045      	beq.n	8011300 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011274:	4926      	ldr	r1, [pc, #152]	; (8011310 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011276:	f8d1 8000 	ldr.w	r8, [r1]
 801127a:	9905      	ldr	r1, [sp, #20]
 801127c:	fa5f fb88 	uxtb.w	fp, r8
 8011280:	434a      	muls	r2, r1
 8011282:	1c56      	adds	r6, r2, #1
 8011284:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8011288:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801128c:	1212      	asrs	r2, r2, #8
 801128e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011292:	fa1f fa82 	uxth.w	sl, r2
 8011296:	43d2      	mvns	r2, r2
 8011298:	fb1b fb0a 	smulbb	fp, fp, sl
 801129c:	b2d2      	uxtb	r2, r2
 801129e:	fb09 b902 	mla	r9, r9, r2, fp
 80112a2:	fa1f f989 	uxth.w	r9, r9
 80112a6:	f109 0b01 	add.w	fp, r9, #1
 80112aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80112ae:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80112b2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80112b6:	fb1b fb0a 	smulbb	fp, fp, sl
 80112ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80112be:	fb18 fa0a 	smulbb	sl, r8, sl
 80112c2:	f805 9006 	strb.w	r9, [r5, r6]
 80112c6:	442e      	add	r6, r5
 80112c8:	f896 8002 	ldrb.w	r8, [r6, #2]
 80112cc:	f896 9001 	ldrb.w	r9, [r6, #1]
 80112d0:	fb08 aa02 	mla	sl, r8, r2, sl
 80112d4:	fb09 b902 	mla	r9, r9, r2, fp
 80112d8:	fa1f fa8a 	uxth.w	sl, sl
 80112dc:	fa1f f989 	uxth.w	r9, r9
 80112e0:	f10a 0801 	add.w	r8, sl, #1
 80112e4:	f109 0b01 	add.w	fp, r9, #1
 80112e8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80112ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80112f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80112f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80112f8:	f886 a002 	strb.w	sl, [r6, #2]
 80112fc:	f886 9001 	strb.w	r9, [r6, #1]
 8011300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011302:	4474      	add	r4, lr
 8011304:	3701      	adds	r7, #1
 8011306:	4410      	add	r0, r2
 8011308:	e755      	b.n	80111b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801130a:	b007      	add	sp, #28
 801130c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011310:	2400ae0c 	.word	0x2400ae0c

08011314 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011318:	b085      	sub	sp, #20
 801131a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801131e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011320:	9203      	str	r2, [sp, #12]
 8011322:	6860      	ldr	r0, [r4, #4]
 8011324:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011328:	9100      	str	r1, [sp, #0]
 801132a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801132e:	fb00 2606 	mla	r6, r0, r6, r2
 8011332:	6822      	ldr	r2, [r4, #0]
 8011334:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011338:	4416      	add	r6, r2
 801133a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801133e:	3201      	adds	r2, #1
 8011340:	f022 0201 	bic.w	r2, r2, #1
 8011344:	9201      	str	r2, [sp, #4]
 8011346:	f8dc 2000 	ldr.w	r2, [ip]
 801134a:	9202      	str	r2, [sp, #8]
 801134c:	9a00      	ldr	r2, [sp, #0]
 801134e:	2a00      	cmp	r2, #0
 8011350:	dc03      	bgt.n	801135a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8011352:	9a03      	ldr	r2, [sp, #12]
 8011354:	2a00      	cmp	r2, #0
 8011356:	f340 8140 	ble.w	80115da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801135a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801135c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011360:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8011364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011366:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801136a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801136e:	2b00      	cmp	r3, #0
 8011370:	dd0e      	ble.n	8011390 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011372:	142a      	asrs	r2, r5, #16
 8011374:	d405      	bmi.n	8011382 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011376:	4572      	cmp	r2, lr
 8011378:	da03      	bge.n	8011382 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801137a:	1422      	asrs	r2, r4, #16
 801137c:	d401      	bmi.n	8011382 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801137e:	42ba      	cmp	r2, r7
 8011380:	db07      	blt.n	8011392 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8011382:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011384:	3b01      	subs	r3, #1
 8011386:	3603      	adds	r6, #3
 8011388:	4415      	add	r5, r2
 801138a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801138c:	4414      	add	r4, r2
 801138e:	e7ee      	b.n	801136e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8011390:	d072      	beq.n	8011478 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011392:	1e5a      	subs	r2, r3, #1
 8011394:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011396:	fb00 5002 	mla	r0, r0, r2, r5
 801139a:	1400      	asrs	r0, r0, #16
 801139c:	d463      	bmi.n	8011466 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801139e:	4570      	cmp	r0, lr
 80113a0:	da61      	bge.n	8011466 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80113a4:	fb00 4202 	mla	r2, r0, r2, r4
 80113a8:	1412      	asrs	r2, r2, #16
 80113aa:	d45c      	bmi.n	8011466 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113ac:	42ba      	cmp	r2, r7
 80113ae:	da5a      	bge.n	8011466 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113b0:	1cf0      	adds	r0, r6, #3
 80113b2:	469a      	mov	sl, r3
 80113b4:	f1ba 0f00 	cmp.w	sl, #0
 80113b8:	dd59      	ble.n	801146e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80113ba:	142a      	asrs	r2, r5, #16
 80113bc:	9901      	ldr	r1, [sp, #4]
 80113be:	1427      	asrs	r7, r4, #16
 80113c0:	fb01 2707 	mla	r7, r1, r7, r2
 80113c4:	9902      	ldr	r1, [sp, #8]
 80113c6:	087a      	lsrs	r2, r7, #1
 80113c8:	5c8a      	ldrb	r2, [r1, r2]
 80113ca:	07f9      	lsls	r1, r7, #31
 80113cc:	bf54      	ite	pl
 80113ce:	f002 020f 	andpl.w	r2, r2, #15
 80113d2:	1112      	asrmi	r2, r2, #4
 80113d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80113d8:	b2d2      	uxtb	r2, r2
 80113da:	2a00      	cmp	r2, #0
 80113dc:	d03b      	beq.n	8011456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80113de:	4980      	ldr	r1, [pc, #512]	; (80115e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80113e0:	2aff      	cmp	r2, #255	; 0xff
 80113e2:	680f      	ldr	r7, [r1, #0]
 80113e4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80113e8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80113ec:	b2ff      	uxtb	r7, r7
 80113ee:	f000 80ed 	beq.w	80115cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80113f2:	fa1f f882 	uxth.w	r8, r2
 80113f6:	43d2      	mvns	r2, r2
 80113f8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80113fc:	fb17 f708 	smulbb	r7, r7, r8
 8011400:	b2d2      	uxtb	r2, r2
 8011402:	fb19 f908 	smulbb	r9, r9, r8
 8011406:	fb0e 7702 	mla	r7, lr, r2, r7
 801140a:	fb1b f808 	smulbb	r8, fp, r8
 801140e:	b2bf      	uxth	r7, r7
 8011410:	f107 0e01 	add.w	lr, r7, #1
 8011414:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011418:	123f      	asrs	r7, r7, #8
 801141a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801141e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8011422:	fb07 9902 	mla	r9, r7, r2, r9
 8011426:	fa1f f989 	uxth.w	r9, r9
 801142a:	f109 0701 	add.w	r7, r9, #1
 801142e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8011432:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8011436:	fb07 8802 	mla	r8, r7, r2, r8
 801143a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801143e:	fa1f f888 	uxth.w	r8, r8
 8011442:	f800 9c02 	strb.w	r9, [r0, #-2]
 8011446:	f108 0201 	add.w	r2, r8, #1
 801144a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801144e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011452:	f800 8c01 	strb.w	r8, [r0, #-1]
 8011456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011458:	3003      	adds	r0, #3
 801145a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801145e:	4415      	add	r5, r2
 8011460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011462:	4414      	add	r4, r2
 8011464:	e7a6      	b.n	80113b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8011466:	2700      	movs	r7, #0
 8011468:	1bda      	subs	r2, r3, r7
 801146a:	2a00      	cmp	r2, #0
 801146c:	dc40      	bgt.n	80114f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801146e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011472:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011476:	441e      	add	r6, r3
 8011478:	9b00      	ldr	r3, [sp, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	f340 80ad 	ble.w	80115da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8011480:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011486:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801148a:	eeb0 6a62 	vmov.f32	s12, s5
 801148e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011492:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011496:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801149a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801149e:	eeb0 6a43 	vmov.f32	s12, s6
 80114a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80114a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80114aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80114ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80114b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80114b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80114ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80114be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80114c2:	ee12 2a90 	vmov	r2, s5
 80114c6:	eef0 2a47 	vmov.f32	s5, s14
 80114ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80114ce:	ee13 2a10 	vmov	r2, s6
 80114d2:	9311      	str	r3, [sp, #68]	; 0x44
 80114d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114d6:	eeb0 3a67 	vmov.f32	s6, s15
 80114da:	fb92 f3f3 	sdiv	r3, r2, r3
 80114de:	9312      	str	r3, [sp, #72]	; 0x48
 80114e0:	9b00      	ldr	r3, [sp, #0]
 80114e2:	9a03      	ldr	r2, [sp, #12]
 80114e4:	3b01      	subs	r3, #1
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114ea:	bf08      	it	eq
 80114ec:	4613      	moveq	r3, r2
 80114ee:	e72d      	b.n	801134c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80114f0:	1428      	asrs	r0, r5, #16
 80114f2:	d45c      	bmi.n	80115ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80114f4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80114f8:	4282      	cmp	r2, r0
 80114fa:	dd58      	ble.n	80115ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80114fc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8011500:	d455      	bmi.n	80115ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8011502:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011506:	4572      	cmp	r2, lr
 8011508:	dd51      	ble.n	80115ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801150a:	9a01      	ldr	r2, [sp, #4]
 801150c:	9902      	ldr	r1, [sp, #8]
 801150e:	fb0e 0002 	mla	r0, lr, r2, r0
 8011512:	0842      	lsrs	r2, r0, #1
 8011514:	07c0      	lsls	r0, r0, #31
 8011516:	5c8a      	ldrb	r2, [r1, r2]
 8011518:	bf54      	ite	pl
 801151a:	f002 020f 	andpl.w	r2, r2, #15
 801151e:	1112      	asrmi	r2, r2, #4
 8011520:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011524:	b2d2      	uxtb	r2, r2
 8011526:	2a00      	cmp	r2, #0
 8011528:	d041      	beq.n	80115ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801152a:	492d      	ldr	r1, [pc, #180]	; (80115e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801152c:	2aff      	cmp	r2, #255	; 0xff
 801152e:	6808      	ldr	r0, [r1, #0]
 8011530:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8011534:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8011538:	fa5f fe80 	uxtb.w	lr, r0
 801153c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8011540:	d03b      	beq.n	80115ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8011542:	fa1f f982 	uxth.w	r9, r2
 8011546:	4438      	add	r0, r7
 8011548:	43d2      	mvns	r2, r2
 801154a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801154e:	fb1e fe09 	smulbb	lr, lr, r9
 8011552:	fb1a fa09 	smulbb	sl, sl, r9
 8011556:	b2d2      	uxtb	r2, r2
 8011558:	fb1b f909 	smulbb	r9, fp, r9
 801155c:	fb08 ee02 	mla	lr, r8, r2, lr
 8011560:	fa1f fe8e 	uxth.w	lr, lr
 8011564:	f10e 0801 	add.w	r8, lr, #1
 8011568:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801156c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8011570:	f806 e000 	strb.w	lr, [r6, r0]
 8011574:	4430      	add	r0, r6
 8011576:	f890 e001 	ldrb.w	lr, [r0, #1]
 801157a:	fb0e aa02 	mla	sl, lr, r2, sl
 801157e:	fa1f fa8a 	uxth.w	sl, sl
 8011582:	f10a 0e01 	add.w	lr, sl, #1
 8011586:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801158a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801158e:	fb0e 9902 	mla	r9, lr, r2, r9
 8011592:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011596:	fa1f f989 	uxth.w	r9, r9
 801159a:	f880 a001 	strb.w	sl, [r0, #1]
 801159e:	f109 0201 	add.w	r2, r9, #1
 80115a2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80115a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80115aa:	f880 9002 	strb.w	r9, [r0, #2]
 80115ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80115b0:	3701      	adds	r7, #1
 80115b2:	4415      	add	r5, r2
 80115b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80115b6:	4414      	add	r4, r2
 80115b8:	e756      	b.n	8011468 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80115ba:	4438      	add	r0, r7
 80115bc:	f806 e000 	strb.w	lr, [r6, r0]
 80115c0:	4430      	add	r0, r6
 80115c2:	f880 a001 	strb.w	sl, [r0, #1]
 80115c6:	f880 b002 	strb.w	fp, [r0, #2]
 80115ca:	e7f0      	b.n	80115ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80115cc:	f800 7c03 	strb.w	r7, [r0, #-3]
 80115d0:	f800 9c02 	strb.w	r9, [r0, #-2]
 80115d4:	f800 bc01 	strb.w	fp, [r0, #-1]
 80115d8:	e73d      	b.n	8011456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80115da:	b005      	add	sp, #20
 80115dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e0:	2400ae0c 	.word	0x2400ae0c

080115e4 <_ZN8touchgfx8LCD24bppD1Ev>:
 80115e4:	4770      	bx	lr

080115e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80115e6:	4770      	bx	lr

080115e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80115e8:	4770      	bx	lr

080115ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80115ea:	4770      	bx	lr

080115ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80115ec:	4770      	bx	lr

080115ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80115ee:	4770      	bx	lr

080115f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80115f0:	4770      	bx	lr

080115f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80115f2:	4770      	bx	lr

080115f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80115f4:	4770      	bx	lr

080115f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80115f6:	4770      	bx	lr

080115f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80115f8:	4770      	bx	lr

080115fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80115fa:	4770      	bx	lr

080115fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80115fc:	4770      	bx	lr

080115fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80115fe:	4770      	bx	lr

08011600 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011600:	4770      	bx	lr

08011602 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011602:	4770      	bx	lr

08011604 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011604:	4770      	bx	lr

08011606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011606:	4770      	bx	lr

08011608 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8011608:	4770      	bx	lr

0801160a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801160a:	4770      	bx	lr

0801160c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801160c:	4770      	bx	lr
	...

08011610 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8011610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011612:	4606      	mov	r6, r0
 8011614:	b087      	sub	sp, #28
 8011616:	4615      	mov	r5, r2
 8011618:	461f      	mov	r7, r3
 801161a:	b353      	cbz	r3, 8011672 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801161c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011620:	2b00      	cmp	r3, #0
 8011622:	dd26      	ble.n	8011672 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8011624:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011628:	2b00      	cmp	r3, #0
 801162a:	dd22      	ble.n	8011672 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801162c:	6808      	ldr	r0, [r1, #0]
 801162e:	aa04      	add	r2, sp, #16
 8011630:	6849      	ldr	r1, [r1, #4]
 8011632:	4c1b      	ldr	r4, [pc, #108]	; (80116a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8011634:	c203      	stmia	r2!, {r0, r1}
 8011636:	a804      	add	r0, sp, #16
 8011638:	f7fb fb74 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801163c:	6820      	ldr	r0, [r4, #0]
 801163e:	6803      	ldr	r3, [r0, #0]
 8011640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011642:	4798      	blx	r3
 8011644:	2fff      	cmp	r7, #255	; 0xff
 8011646:	d016      	beq.n	8011676 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8011648:	f010 0f08 	tst.w	r0, #8
 801164c:	6820      	ldr	r0, [r4, #0]
 801164e:	d015      	beq.n	801167c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8011650:	2400      	movs	r4, #0
 8011652:	6801      	ldr	r1, [r0, #0]
 8011654:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011658:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801165c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8011660:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8011664:	9401      	str	r4, [sp, #4]
 8011666:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801166a:	9400      	str	r4, [sp, #0]
 801166c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801166e:	4629      	mov	r1, r5
 8011670:	47a0      	blx	r4
 8011672:	b007      	add	sp, #28
 8011674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011676:	f010 0f02 	tst.w	r0, #2
 801167a:	e7e7      	b.n	801164c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801167c:	6803      	ldr	r3, [r0, #0]
 801167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011680:	4798      	blx	r3
 8011682:	4b08      	ldr	r3, [pc, #32]	; (80116a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8011684:	4601      	mov	r1, r0
 8011686:	4630      	mov	r0, r6
 8011688:	881a      	ldrh	r2, [r3, #0]
 801168a:	6833      	ldr	r3, [r6, #0]
 801168c:	e9cd 5700 	strd	r5, r7, [sp]
 8011690:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011692:	ab04      	add	r3, sp, #16
 8011694:	47a8      	blx	r5
 8011696:	6820      	ldr	r0, [r4, #0]
 8011698:	6803      	ldr	r3, [r0, #0]
 801169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169c:	4798      	blx	r3
 801169e:	e7e8      	b.n	8011672 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80116a0:	2400ae04 	.word	0x2400ae04
 80116a4:	2400adfe 	.word	0x2400adfe

080116a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80116a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116ac:	b08b      	sub	sp, #44	; 0x2c
 80116ae:	460d      	mov	r5, r1
 80116b0:	4616      	mov	r6, r2
 80116b2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80116b6:	f1b8 0f00 	cmp.w	r8, #0
 80116ba:	d047      	beq.n	801174c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80116bc:	6810      	ldr	r0, [r2, #0]
 80116be:	ac06      	add	r4, sp, #24
 80116c0:	6851      	ldr	r1, [r2, #4]
 80116c2:	4f51      	ldr	r7, [pc, #324]	; (8011808 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80116c4:	c403      	stmia	r4!, {r0, r1}
 80116c6:	6818      	ldr	r0, [r3, #0]
 80116c8:	ac08      	add	r4, sp, #32
 80116ca:	6859      	ldr	r1, [r3, #4]
 80116cc:	c403      	stmia	r4!, {r0, r1}
 80116ce:	a806      	add	r0, sp, #24
 80116d0:	f7fb fb28 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80116d4:	4631      	mov	r1, r6
 80116d6:	a808      	add	r0, sp, #32
 80116d8:	f7fb fb4c 	bl	800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80116dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80116e0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80116e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80116e8:	6838      	ldr	r0, [r7, #0]
 80116ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 80116ee:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80116f2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80116f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80116fa:	440d      	add	r5, r1
 80116fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8011700:	440a      	add	r2, r1
 8011702:	f8ad 2020 	strh.w	r2, [sp, #32]
 8011706:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801170a:	4413      	add	r3, r2
 801170c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011710:	6803      	ldr	r3, [r0, #0]
 8011712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011714:	4798      	blx	r3
 8011716:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801171a:	d01a      	beq.n	8011752 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801171c:	f010 0f04 	tst.w	r0, #4
 8011720:	6838      	ldr	r0, [r7, #0]
 8011722:	d019      	beq.n	8011758 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8011724:	2100      	movs	r1, #0
 8011726:	6807      	ldr	r7, [r0, #0]
 8011728:	b2a4      	uxth	r4, r4
 801172a:	f8cd 800c 	str.w	r8, [sp, #12]
 801172e:	b2b6      	uxth	r6, r6
 8011730:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8011734:	9401      	str	r4, [sp, #4]
 8011736:	9600      	str	r6, [sp, #0]
 8011738:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801173c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8011740:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011744:	9102      	str	r1, [sp, #8]
 8011746:	4629      	mov	r1, r5
 8011748:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801174a:	47a0      	blx	r4
 801174c:	b00b      	add	sp, #44	; 0x2c
 801174e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011752:	f010 0f01 	tst.w	r0, #1
 8011756:	e7e3      	b.n	8011720 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8011758:	6803      	ldr	r3, [r0, #0]
 801175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175c:	4798      	blx	r3
 801175e:	4a2b      	ldr	r2, [pc, #172]	; (801180c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8011760:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8011764:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011768:	8813      	ldrh	r3, [r2, #0]
 801176a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801176e:	fb03 f404 	mul.w	r4, r3, r4
 8011772:	fb03 c101 	mla	r1, r3, r1, ip
 8011776:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801177a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801177e:	4408      	add	r0, r1
 8011780:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011784:	4404      	add	r4, r0
 8011786:	d02e      	beq.n	80117e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8011788:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801178c:	1b9b      	subs	r3, r3, r6
 801178e:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8011792:	1b96      	subs	r6, r2, r6
 8011794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011798:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801179c:	42a0      	cmp	r0, r4
 801179e:	d22d      	bcs.n	80117fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80117a0:	eb00 0e01 	add.w	lr, r0, r1
 80117a4:	4570      	cmp	r0, lr
 80117a6:	d210      	bcs.n	80117ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80117a8:	f890 9000 	ldrb.w	r9, [r0]
 80117ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80117b0:	fb19 f90c 	smulbb	r9, r9, ip
 80117b4:	fb02 9208 	mla	r2, r2, r8, r9
 80117b8:	b292      	uxth	r2, r2
 80117ba:	f102 0901 	add.w	r9, r2, #1
 80117be:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80117c2:	1212      	asrs	r2, r2, #8
 80117c4:	f800 2b01 	strb.w	r2, [r0], #1
 80117c8:	e7ec      	b.n	80117a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80117ca:	4418      	add	r0, r3
 80117cc:	4435      	add	r5, r6
 80117ce:	e7e5      	b.n	801179c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80117d0:	8813      	ldrh	r3, [r2, #0]
 80117d2:	1b9b      	subs	r3, r3, r6
 80117d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117d8:	4418      	add	r0, r3
 80117da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80117de:	1b9b      	subs	r3, r3, r6
 80117e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117e4:	441d      	add	r5, r3
 80117e6:	42a0      	cmp	r0, r4
 80117e8:	d208      	bcs.n	80117fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80117ea:	eb00 0c01 	add.w	ip, r0, r1
 80117ee:	4560      	cmp	r0, ip
 80117f0:	d2ee      	bcs.n	80117d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80117f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80117f6:	f800 3b01 	strb.w	r3, [r0], #1
 80117fa:	e7f8      	b.n	80117ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80117fc:	6838      	ldr	r0, [r7, #0]
 80117fe:	6803      	ldr	r3, [r0, #0]
 8011800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011802:	4798      	blx	r3
 8011804:	e7a2      	b.n	801174c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8011806:	bf00      	nop
 8011808:	2400ae04 	.word	0x2400ae04
 801180c:	2400adfe 	.word	0x2400adfe

08011810 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8011810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011812:	2300      	movs	r3, #0
 8011814:	b085      	sub	sp, #20
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	4b41      	ldr	r3, [pc, #260]	; (8011920 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d136      	bne.n	801188e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8011820:	4a40      	ldr	r2, [pc, #256]	; (8011924 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8011822:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011826:	f8ad 2004 	strh.w	r2, [sp, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d131      	bne.n	8011892 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801182e:	4b3e      	ldr	r3, [pc, #248]	; (8011928 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8011830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011834:	ac02      	add	r4, sp, #8
 8011836:	6808      	ldr	r0, [r1, #0]
 8011838:	f8ad 3006 	strh.w	r3, [sp, #6]
 801183c:	ab02      	add	r3, sp, #8
 801183e:	6849      	ldr	r1, [r1, #4]
 8011840:	4d3a      	ldr	r5, [pc, #232]	; (801192c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8011842:	c303      	stmia	r3!, {r0, r1}
 8011844:	4669      	mov	r1, sp
 8011846:	4620      	mov	r0, r4
 8011848:	f7fb fa94 	bl	800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801184c:	4668      	mov	r0, sp
 801184e:	f7fb fa69 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011852:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011856:	f8bd 2000 	ldrh.w	r2, [sp]
 801185a:	462e      	mov	r6, r5
 801185c:	6828      	ldr	r0, [r5, #0]
 801185e:	4413      	add	r3, r2
 8011860:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011864:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011868:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801186c:	4413      	add	r3, r2
 801186e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011872:	6803      	ldr	r3, [r0, #0]
 8011874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011876:	4798      	blx	r3
 8011878:	f010 0f01 	tst.w	r0, #1
 801187c:	d00b      	beq.n	8011896 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801187e:	6828      	ldr	r0, [r5, #0]
 8011880:	6803      	ldr	r3, [r0, #0]
 8011882:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011888:	4798      	blx	r3
 801188a:	b005      	add	sp, #20
 801188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801188e:	4a26      	ldr	r2, [pc, #152]	; (8011928 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8011890:	e7c7      	b.n	8011822 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8011892:	4b24      	ldr	r3, [pc, #144]	; (8011924 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8011894:	e7cc      	b.n	8011830 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8011896:	6830      	ldr	r0, [r6, #0]
 8011898:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801189c:	6803      	ldr	r3, [r0, #0]
 801189e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80118a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a4:	4798      	blx	r3
 80118a6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80118aa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80118ae:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80118b2:	fb14 3402 	smlabb	r4, r4, r2, r3
 80118b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80118ba:	4404      	add	r4, r0
 80118bc:	6830      	ldr	r0, [r6, #0]
 80118be:	6803      	ldr	r3, [r0, #0]
 80118c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c2:	4798      	blx	r3
 80118c4:	4917      	ldr	r1, [pc, #92]	; (8011924 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80118c6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80118ca:	880b      	ldrh	r3, [r1, #0]
 80118cc:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80118d0:	fb03 c202 	mla	r2, r3, r2, ip
 80118d4:	437b      	muls	r3, r7
 80118d6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80118da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80118de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80118e2:	4410      	add	r0, r2
 80118e4:	18c2      	adds	r2, r0, r3
 80118e6:	4290      	cmp	r0, r2
 80118e8:	d214      	bcs.n	8011914 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80118ea:	eb00 0c07 	add.w	ip, r0, r7
 80118ee:	4560      	cmp	r0, ip
 80118f0:	d204      	bcs.n	80118fc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80118f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80118f6:	f800 3b01 	strb.w	r3, [r0], #1
 80118fa:	e7f8      	b.n	80118ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80118fc:	880b      	ldrh	r3, [r1, #0]
 80118fe:	1b5b      	subs	r3, r3, r5
 8011900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011904:	4418      	add	r0, r3
 8011906:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801190a:	1b5b      	subs	r3, r3, r5
 801190c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011910:	441c      	add	r4, r3
 8011912:	e7e8      	b.n	80118e6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8011914:	6830      	ldr	r0, [r6, #0]
 8011916:	6803      	ldr	r3, [r0, #0]
 8011918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191a:	4798      	blx	r3
 801191c:	e7b5      	b.n	801188a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801191e:	bf00      	nop
 8011920:	2400adfc 	.word	0x2400adfc
 8011924:	2400adfe 	.word	0x2400adfe
 8011928:	2400ae00 	.word	0x2400ae00
 801192c:	2400ae04 	.word	0x2400ae04

08011930 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8011930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011934:	b089      	sub	sp, #36	; 0x24
 8011936:	4607      	mov	r7, r0
 8011938:	4689      	mov	r9, r1
 801193a:	4692      	mov	sl, r2
 801193c:	ac08      	add	r4, sp, #32
 801193e:	461e      	mov	r6, r3
 8011940:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8011944:	4620      	mov	r0, r4
 8011946:	f7fe f8ef 	bl	800fb28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	4605      	mov	r5, r0
 801194e:	4620      	mov	r0, r4
 8011950:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8011954:	f7fe f834 	bl	800f9c0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011958:	4683      	mov	fp, r0
 801195a:	4620      	mov	r0, r4
 801195c:	f7fe f864 	bl	800fa28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011960:	4653      	mov	r3, sl
 8011962:	464a      	mov	r2, r9
 8011964:	4639      	mov	r1, r7
 8011966:	9500      	str	r5, [sp, #0]
 8011968:	e9cd b001 	strd	fp, r0, [sp, #4]
 801196c:	a806      	add	r0, sp, #24
 801196e:	47c0      	blx	r8
 8011970:	a906      	add	r1, sp, #24
 8011972:	4630      	mov	r0, r6
 8011974:	f7fd ff08 	bl	800f788 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8011978:	4628      	mov	r0, r5
 801197a:	b009      	add	sp, #36	; 0x24
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011980 <_ZN8touchgfx8LCD24bppD0Ev>:
 8011980:	b510      	push	{r4, lr}
 8011982:	4604      	mov	r4, r0
 8011984:	2158      	movs	r1, #88	; 0x58
 8011986:	f006 f8f6 	bl	8017b76 <_ZdlPvj>
 801198a:	4620      	mov	r0, r4
 801198c:	bd10      	pop	{r4, pc}

0801198e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801198e:	b510      	push	{r4, lr}
 8011990:	4604      	mov	r4, r0
 8011992:	2104      	movs	r1, #4
 8011994:	f006 f8ef 	bl	8017b76 <_ZdlPvj>
 8011998:	4620      	mov	r0, r4
 801199a:	bd10      	pop	{r4, pc}

0801199c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801199c:	b510      	push	{r4, lr}
 801199e:	4604      	mov	r4, r0
 80119a0:	2104      	movs	r1, #4
 80119a2:	f006 f8e8 	bl	8017b76 <_ZdlPvj>
 80119a6:	4620      	mov	r0, r4
 80119a8:	bd10      	pop	{r4, pc}

080119aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80119aa:	b510      	push	{r4, lr}
 80119ac:	4604      	mov	r4, r0
 80119ae:	2104      	movs	r1, #4
 80119b0:	f006 f8e1 	bl	8017b76 <_ZdlPvj>
 80119b4:	4620      	mov	r0, r4
 80119b6:	bd10      	pop	{r4, pc}

080119b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80119b8:	b510      	push	{r4, lr}
 80119ba:	4604      	mov	r4, r0
 80119bc:	2104      	movs	r1, #4
 80119be:	f006 f8da 	bl	8017b76 <_ZdlPvj>
 80119c2:	4620      	mov	r0, r4
 80119c4:	bd10      	pop	{r4, pc}

080119c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80119c6:	b510      	push	{r4, lr}
 80119c8:	4604      	mov	r4, r0
 80119ca:	2104      	movs	r1, #4
 80119cc:	f006 f8d3 	bl	8017b76 <_ZdlPvj>
 80119d0:	4620      	mov	r0, r4
 80119d2:	bd10      	pop	{r4, pc}

080119d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80119d4:	b510      	push	{r4, lr}
 80119d6:	4604      	mov	r4, r0
 80119d8:	2104      	movs	r1, #4
 80119da:	f006 f8cc 	bl	8017b76 <_ZdlPvj>
 80119de:	4620      	mov	r0, r4
 80119e0:	bd10      	pop	{r4, pc}

080119e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80119e2:	b510      	push	{r4, lr}
 80119e4:	4604      	mov	r4, r0
 80119e6:	2104      	movs	r1, #4
 80119e8:	f006 f8c5 	bl	8017b76 <_ZdlPvj>
 80119ec:	4620      	mov	r0, r4
 80119ee:	bd10      	pop	{r4, pc}

080119f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80119f0:	b510      	push	{r4, lr}
 80119f2:	4604      	mov	r4, r0
 80119f4:	2104      	movs	r1, #4
 80119f6:	f006 f8be 	bl	8017b76 <_ZdlPvj>
 80119fa:	4620      	mov	r0, r4
 80119fc:	bd10      	pop	{r4, pc}

080119fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80119fe:	b510      	push	{r4, lr}
 8011a00:	4604      	mov	r4, r0
 8011a02:	2104      	movs	r1, #4
 8011a04:	f006 f8b7 	bl	8017b76 <_ZdlPvj>
 8011a08:	4620      	mov	r0, r4
 8011a0a:	bd10      	pop	{r4, pc}

08011a0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8011a0c:	b510      	push	{r4, lr}
 8011a0e:	4604      	mov	r4, r0
 8011a10:	2104      	movs	r1, #4
 8011a12:	f006 f8b0 	bl	8017b76 <_ZdlPvj>
 8011a16:	4620      	mov	r0, r4
 8011a18:	bd10      	pop	{r4, pc}

08011a1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8011a1a:	b510      	push	{r4, lr}
 8011a1c:	4604      	mov	r4, r0
 8011a1e:	2104      	movs	r1, #4
 8011a20:	f006 f8a9 	bl	8017b76 <_ZdlPvj>
 8011a24:	4620      	mov	r0, r4
 8011a26:	bd10      	pop	{r4, pc}

08011a28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8011a28:	b510      	push	{r4, lr}
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	2104      	movs	r1, #4
 8011a2e:	f006 f8a2 	bl	8017b76 <_ZdlPvj>
 8011a32:	4620      	mov	r0, r4
 8011a34:	bd10      	pop	{r4, pc}

08011a36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8011a36:	b510      	push	{r4, lr}
 8011a38:	4604      	mov	r4, r0
 8011a3a:	2104      	movs	r1, #4
 8011a3c:	f006 f89b 	bl	8017b76 <_ZdlPvj>
 8011a40:	4620      	mov	r0, r4
 8011a42:	bd10      	pop	{r4, pc}

08011a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	4604      	mov	r4, r0
 8011a48:	2104      	movs	r1, #4
 8011a4a:	f006 f894 	bl	8017b76 <_ZdlPvj>
 8011a4e:	4620      	mov	r0, r4
 8011a50:	bd10      	pop	{r4, pc}

08011a52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011a52:	b510      	push	{r4, lr}
 8011a54:	4604      	mov	r4, r0
 8011a56:	2104      	movs	r1, #4
 8011a58:	f006 f88d 	bl	8017b76 <_ZdlPvj>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	bd10      	pop	{r4, pc}

08011a60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011a60:	b510      	push	{r4, lr}
 8011a62:	4604      	mov	r4, r0
 8011a64:	2104      	movs	r1, #4
 8011a66:	f006 f886 	bl	8017b76 <_ZdlPvj>
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	bd10      	pop	{r4, pc}

08011a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	4604      	mov	r4, r0
 8011a72:	2104      	movs	r1, #4
 8011a74:	f006 f87f 	bl	8017b76 <_ZdlPvj>
 8011a78:	4620      	mov	r0, r4
 8011a7a:	bd10      	pop	{r4, pc}

08011a7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8011a7c:	b510      	push	{r4, lr}
 8011a7e:	4604      	mov	r4, r0
 8011a80:	2104      	movs	r1, #4
 8011a82:	f006 f878 	bl	8017b76 <_ZdlPvj>
 8011a86:	4620      	mov	r0, r4
 8011a88:	bd10      	pop	{r4, pc}

08011a8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8011a8a:	b510      	push	{r4, lr}
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	2104      	movs	r1, #4
 8011a90:	f006 f871 	bl	8017b76 <_ZdlPvj>
 8011a94:	4620      	mov	r0, r4
 8011a96:	bd10      	pop	{r4, pc}

08011a98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8011a98:	b510      	push	{r4, lr}
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	2104      	movs	r1, #4
 8011a9e:	f006 f86a 	bl	8017b76 <_ZdlPvj>
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	bd10      	pop	{r4, pc}

08011aa6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8011aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aaa:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011aae:	9c06      	ldr	r4, [sp, #24]
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d06e      	beq.n	8011b92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011ab4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8011ab8:	2d00      	cmp	r5, #0
 8011aba:	dd6a      	ble.n	8011b92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011abc:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8011ac0:	f1bc 0f00 	cmp.w	ip, #0
 8011ac4:	dd65      	ble.n	8011b92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011ac6:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8011aca:	28ff      	cmp	r0, #255	; 0xff
 8011acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ad0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8011ad4:	fb02 3306 	mla	r3, r2, r6, r3
 8011ad8:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8011adc:	b2e4      	uxtb	r4, r4
 8011ade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ae2:	4419      	add	r1, r3
 8011ae4:	fb02 f30c 	mul.w	r3, r2, ip
 8011ae8:	eba2 0205 	sub.w	r2, r2, r5
 8011aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011af4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011af8:	440b      	add	r3, r1
 8011afa:	d03e      	beq.n	8011b7a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8011afc:	fa1f fc80 	uxth.w	ip, r0
 8011b00:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8011b04:	fb06 f60c 	mul.w	r6, r6, ip
 8011b08:	b280      	uxth	r0, r0
 8011b0a:	fb07 f70c 	mul.w	r7, r7, ip
 8011b0e:	fb04 f40c 	mul.w	r4, r4, ip
 8011b12:	4299      	cmp	r1, r3
 8011b14:	d23d      	bcs.n	8011b92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011b16:	eb01 0c05 	add.w	ip, r1, r5
 8011b1a:	458c      	cmp	ip, r1
 8011b1c:	f101 0e03 	add.w	lr, r1, #3
 8011b20:	d928      	bls.n	8011b74 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8011b22:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8011b26:	fb11 f100 	smulbb	r1, r1, r0
 8011b2a:	4421      	add	r1, r4
 8011b2c:	b289      	uxth	r1, r1
 8011b2e:	f101 0801 	add.w	r8, r1, #1
 8011b32:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b36:	1209      	asrs	r1, r1, #8
 8011b38:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8011b3c:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8011b40:	fb11 f100 	smulbb	r1, r1, r0
 8011b44:	4439      	add	r1, r7
 8011b46:	b289      	uxth	r1, r1
 8011b48:	f101 0801 	add.w	r8, r1, #1
 8011b4c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b50:	1209      	asrs	r1, r1, #8
 8011b52:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8011b56:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8011b5a:	fb11 f100 	smulbb	r1, r1, r0
 8011b5e:	4431      	add	r1, r6
 8011b60:	b289      	uxth	r1, r1
 8011b62:	f101 0801 	add.w	r8, r1, #1
 8011b66:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b6a:	1209      	asrs	r1, r1, #8
 8011b6c:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8011b70:	4671      	mov	r1, lr
 8011b72:	e7d2      	b.n	8011b1a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8011b74:	4411      	add	r1, r2
 8011b76:	e7cc      	b.n	8011b12 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8011b78:	4411      	add	r1, r2
 8011b7a:	4299      	cmp	r1, r3
 8011b7c:	d209      	bcs.n	8011b92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011b7e:	1948      	adds	r0, r1, r5
 8011b80:	4281      	cmp	r1, r0
 8011b82:	d2f9      	bcs.n	8011b78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8011b84:	700c      	strb	r4, [r1, #0]
 8011b86:	3103      	adds	r1, #3
 8011b88:	f801 7c02 	strb.w	r7, [r1, #-2]
 8011b8c:	f801 6c01 	strb.w	r6, [r1, #-1]
 8011b90:	e7f6      	b.n	8011b80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8011b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011b98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8011b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9c:	b093      	sub	sp, #76	; 0x4c
 8011b9e:	4699      	mov	r9, r3
 8011ba0:	4617      	mov	r7, r2
 8011ba2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ba6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8011baa:	4604      	mov	r4, r0
 8011bac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bb0:	a80c      	add	r0, sp, #48	; 0x30
 8011bb2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8011bb6:	460d      	mov	r5, r1
 8011bb8:	4649      	mov	r1, r9
 8011bba:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8011bbe:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8011bc2:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8011bc6:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8011bca:	f7f9 f93b 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 8011bce:	4639      	mov	r1, r7
 8011bd0:	a80c      	add	r0, sp, #48	; 0x30
 8011bd2:	f7f9 f937 	bl	800ae44 <_ZN8touchgfx4RectaNERKS0_>
 8011bd6:	4b78      	ldr	r3, [pc, #480]	; (8011db8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8011bd8:	8818      	ldrh	r0, [r3, #0]
 8011bda:	4b78      	ldr	r3, [pc, #480]	; (8011dbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8011bdc:	b202      	sxth	r2, r0
 8011bde:	8819      	ldrh	r1, [r3, #0]
 8011be0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011be4:	b20f      	sxth	r7, r1
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	da07      	bge.n	8011bfa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8011bea:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8011bee:	4463      	add	r3, ip
 8011bf0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8011bfa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011bfe:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8011c02:	1ad2      	subs	r2, r2, r3
 8011c04:	4594      	cmp	ip, r2
 8011c06:	bfc4      	itt	gt
 8011c08:	1ac2      	subgt	r2, r0, r3
 8011c0a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8011c0e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8011c12:	2a00      	cmp	r2, #0
 8011c14:	da07      	bge.n	8011c26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8011c16:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8011c1a:	4462      	add	r2, ip
 8011c1c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8011c20:	2200      	movs	r2, #0
 8011c22:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8011c26:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8011c2a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8011c2e:	1abf      	subs	r7, r7, r2
 8011c30:	45bc      	cmp	ip, r7
 8011c32:	f8df c190 	ldr.w	ip, [pc, #400]	; 8011dc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8011c36:	bfc8      	it	gt
 8011c38:	1a8f      	subgt	r7, r1, r2
 8011c3a:	f89c c000 	ldrb.w	ip, [ip]
 8011c3e:	bfc8      	it	gt
 8011c40:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8011c44:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8011c48:	f1bc 0f00 	cmp.w	ip, #0
 8011c4c:	d176      	bne.n	8011d3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8011c4e:	4287      	cmp	r7, r0
 8011c50:	bf14      	ite	ne
 8011c52:	2100      	movne	r1, #0
 8011c54:	2101      	moveq	r1, #1
 8011c56:	2f00      	cmp	r7, #0
 8011c58:	9107      	str	r1, [sp, #28]
 8011c5a:	dd73      	ble.n	8011d44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8011c5c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8011c60:	2900      	cmp	r1, #0
 8011c62:	9104      	str	r1, [sp, #16]
 8011c64:	dd6e      	ble.n	8011d44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8011c66:	f8b9 1000 	ldrh.w	r1, [r9]
 8011c6a:	a80e      	add	r0, sp, #56	; 0x38
 8011c6c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8011c70:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011c74:	1a5b      	subs	r3, r3, r1
 8011c76:	a910      	add	r1, sp, #64	; 0x40
 8011c78:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8011c7c:	b21b      	sxth	r3, r3
 8011c7e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8011c82:	f8df a144 	ldr.w	sl, [pc, #324]	; 8011dc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8011c86:	9305      	str	r3, [sp, #20]
 8011c88:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8011c8c:	1ad2      	subs	r2, r2, r3
 8011c8e:	b213      	sxth	r3, r2
 8011c90:	9306      	str	r3, [sp, #24]
 8011c92:	9b05      	ldr	r3, [sp, #20]
 8011c94:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8011c98:	9b06      	ldr	r3, [sp, #24]
 8011c9a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011c9e:	9b04      	ldr	r3, [sp, #16]
 8011ca0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	9310      	str	r3, [sp, #64]	; 0x40
 8011ca8:	f7fb f864 	bl	800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011cac:	4640      	mov	r0, r8
 8011cae:	f7fb f839 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011cb2:	a810      	add	r0, sp, #64	; 0x40
 8011cb4:	f7fb f836 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011cb8:	4b41      	ldr	r3, [pc, #260]	; (8011dc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8011cba:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	9308      	str	r3, [sp, #32]
 8011cc4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8011cc8:	b21b      	sxth	r3, r3
 8011cca:	9303      	str	r3, [sp, #12]
 8011ccc:	682b      	ldr	r3, [r5, #0]
 8011cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cd0:	4798      	blx	r3
 8011cd2:	9a03      	ldr	r2, [sp, #12]
 8011cd4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011cd8:	4681      	mov	r9, r0
 8011cda:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011cde:	fb13 f302 	smulbb	r3, r3, r2
 8011ce2:	2203      	movs	r2, #3
 8011ce4:	f8da 0000 	ldr.w	r0, [sl]
 8011ce8:	fb15 3302 	smlabb	r3, r5, r2, r3
 8011cec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8011cee:	920b      	str	r2, [sp, #44]	; 0x2c
 8011cf0:	441d      	add	r5, r3
 8011cf2:	6803      	ldr	r3, [r0, #0]
 8011cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf6:	4798      	blx	r3
 8011cf8:	9009      	str	r0, [sp, #36]	; 0x24
 8011cfa:	f8da 0000 	ldr.w	r0, [sl]
 8011cfe:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8011d02:	6803      	ldr	r3, [r0, #0]
 8011d04:	910a      	str	r1, [sp, #40]	; 0x28
 8011d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d08:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8011d0c:	4798      	blx	r3
 8011d0e:	f010 0f01 	tst.w	r0, #1
 8011d12:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011d16:	d01e      	beq.n	8011d56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8011d18:	f8da 0000 	ldr.w	r0, [sl]
 8011d1c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8011d20:	6803      	ldr	r3, [r0, #0]
 8011d22:	9200      	str	r2, [sp, #0]
 8011d24:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8011d26:	462b      	mov	r3, r5
 8011d28:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011d2c:	47b0      	blx	r6
 8011d2e:	9b05      	ldr	r3, [sp, #20]
 8011d30:	80a7      	strh	r7, [r4, #4]
 8011d32:	8023      	strh	r3, [r4, #0]
 8011d34:	9b06      	ldr	r3, [sp, #24]
 8011d36:	8063      	strh	r3, [r4, #2]
 8011d38:	9b04      	ldr	r3, [sp, #16]
 8011d3a:	e007      	b.n	8011d4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8011d3c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8011d40:	4288      	cmp	r0, r1
 8011d42:	e785      	b.n	8011c50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8011d44:	2300      	movs	r3, #0
 8011d46:	8023      	strh	r3, [r4, #0]
 8011d48:	8063      	strh	r3, [r4, #2]
 8011d4a:	80a3      	strh	r3, [r4, #4]
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	80e3      	strh	r3, [r4, #6]
 8011d50:	b013      	add	sp, #76	; 0x4c
 8011d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d56:	fb09 f606 	mul.w	r6, r9, r6
 8011d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d5c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8011d60:	9a07      	ldr	r2, [sp, #28]
 8011d62:	4433      	add	r3, r6
 8011d64:	461e      	mov	r6, r3
 8011d66:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8011d6a:	b16a      	cbz	r2, 8011d88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8011d6c:	9a08      	ldr	r2, [sp, #32]
 8011d6e:	4593      	cmp	fp, r2
 8011d70:	d10a      	bne.n	8011d88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8011d72:	f8da 0000 	ldr.w	r0, [sl]
 8011d76:	fb09 f303 	mul.w	r3, r9, r3
 8011d7a:	4629      	mov	r1, r5
 8011d7c:	6802      	ldr	r2, [r0, #0]
 8011d7e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8011d82:	4632      	mov	r2, r6
 8011d84:	47d0      	blx	sl
 8011d86:	e7d2      	b.n	8011d2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8011d88:	9a03      	ldr	r2, [sp, #12]
 8011d8a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8011dc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8011d8e:	fb02 5803 	mla	r8, r2, r3, r5
 8011d92:	4545      	cmp	r5, r8
 8011d94:	d2cb      	bcs.n	8011d2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8011d96:	f8db 0000 	ldr.w	r0, [fp]
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8011da0:	6802      	ldr	r2, [r0, #0]
 8011da2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011da6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8011daa:	4632      	mov	r2, r6
 8011dac:	47d0      	blx	sl
 8011dae:	9b03      	ldr	r3, [sp, #12]
 8011db0:	444e      	add	r6, r9
 8011db2:	441d      	add	r5, r3
 8011db4:	e7ed      	b.n	8011d92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8011db6:	bf00      	nop
 8011db8:	2400adf8 	.word	0x2400adf8
 8011dbc:	2400adfa 	.word	0x2400adfa
 8011dc0:	2400adfe 	.word	0x2400adfe
 8011dc4:	2400adfc 	.word	0x2400adfc
 8011dc8:	2400ae04 	.word	0x2400ae04

08011dcc <_ZN8touchgfx8LCD24bppC1Ev>:
 8011dcc:	2200      	movs	r2, #0
 8011dce:	490c      	ldr	r1, [pc, #48]	; (8011e00 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8011dd0:	6042      	str	r2, [r0, #4]
 8011dd2:	6001      	str	r1, [r0, #0]
 8011dd4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8011dd8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8011ddc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011de0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8011de4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8011de8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8011dec:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8011df0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8011df4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8011df8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8011dfc:	4770      	bx	lr
 8011dfe:	bf00      	nop
 8011e00:	0801a5d0 	.word	0x0801a5d0

08011e04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8011e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e08:	b091      	sub	sp, #68	; 0x44
 8011e0a:	4607      	mov	r7, r0
 8011e0c:	4688      	mov	r8, r1
 8011e0e:	6810      	ldr	r0, [r2, #0]
 8011e10:	6851      	ldr	r1, [r2, #4]
 8011e12:	ac0c      	add	r4, sp, #48	; 0x30
 8011e14:	4616      	mov	r6, r2
 8011e16:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8011e1a:	4d64      	ldr	r5, [pc, #400]	; (8011fac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8011e1c:	f8df a190 	ldr.w	sl, [pc, #400]	; 8011fb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8011e20:	c403      	stmia	r4!, {r0, r1}
 8011e22:	6818      	ldr	r0, [r3, #0]
 8011e24:	ac0e      	add	r4, sp, #56	; 0x38
 8011e26:	6859      	ldr	r1, [r3, #4]
 8011e28:	c403      	stmia	r4!, {r0, r1}
 8011e2a:	a80c      	add	r0, sp, #48	; 0x30
 8011e2c:	f7fa ff7a 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011e30:	4631      	mov	r1, r6
 8011e32:	a80e      	add	r0, sp, #56	; 0x38
 8011e34:	f7fa ff9e 	bl	800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011e38:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8011e3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011e40:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011e44:	6828      	ldr	r0, [r5, #0]
 8011e46:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011e4a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8011e4e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8011e52:	440f      	add	r7, r1
 8011e54:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8011e58:	440a      	add	r2, r1
 8011e5a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8011e5e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011e62:	4413      	add	r3, r2
 8011e64:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011e68:	6803      	ldr	r3, [r0, #0]
 8011e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e6c:	4798      	blx	r3
 8011e6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011e72:	6828      	ldr	r0, [r5, #0]
 8011e74:	d01f      	beq.n	8011eb6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8011e76:	2201      	movs	r2, #1
 8011e78:	2500      	movs	r5, #0
 8011e7a:	6801      	ldr	r1, [r0, #0]
 8011e7c:	b2a4      	uxth	r4, r4
 8011e7e:	b2b6      	uxth	r6, r6
 8011e80:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011e84:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8011e88:	250b      	movs	r5, #11
 8011e8a:	9507      	str	r5, [sp, #28]
 8011e8c:	f8ba 5000 	ldrh.w	r5, [sl]
 8011e90:	f8cd 9010 	str.w	r9, [sp, #16]
 8011e94:	9602      	str	r6, [sp, #8]
 8011e96:	9401      	str	r4, [sp, #4]
 8011e98:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8011e9c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011ea0:	9203      	str	r2, [sp, #12]
 8011ea2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011ea6:	9200      	str	r2, [sp, #0]
 8011ea8:	4642      	mov	r2, r8
 8011eaa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8011eac:	4639      	mov	r1, r7
 8011eae:	47a0      	blx	r4
 8011eb0:	b011      	add	sp, #68	; 0x44
 8011eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb6:	6803      	ldr	r3, [r0, #0]
 8011eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eba:	4798      	blx	r3
 8011ebc:	f8ba 5000 	ldrh.w	r5, [sl]
 8011ec0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8011ec4:	f04f 0e04 	mov.w	lr, #4
 8011ec8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011ecc:	436e      	muls	r6, r5
 8011ece:	fb05 2303 	mla	r3, r5, r3, r2
 8011ed2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011ed6:	1b2d      	subs	r5, r5, r4
 8011ed8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ee0:	4418      	add	r0, r3
 8011ee2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8011ee6:	1982      	adds	r2, r0, r6
 8011ee8:	1b1b      	subs	r3, r3, r4
 8011eea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ef0:	4290      	cmp	r0, r2
 8011ef2:	d254      	bcs.n	8011f9e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8011ef4:	eb00 0a04 	add.w	sl, r0, r4
 8011ef8:	4550      	cmp	r0, sl
 8011efa:	d24c      	bcs.n	8011f96 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8011efc:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011f00:	fb1e e101 	smlabb	r1, lr, r1, lr
 8011f04:	eb08 0c01 	add.w	ip, r8, r1
 8011f08:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8011f0c:	b173      	cbz	r3, 8011f2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011f0e:	2bff      	cmp	r3, #255	; 0xff
 8011f10:	f818 b001 	ldrb.w	fp, [r8, r1]
 8011f14:	d10c      	bne.n	8011f30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011f16:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011f1a:	d109      	bne.n	8011f30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011f1c:	f880 b000 	strb.w	fp, [r0]
 8011f20:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8011f24:	7043      	strb	r3, [r0, #1]
 8011f26:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8011f2a:	7083      	strb	r3, [r0, #2]
 8011f2c:	3003      	adds	r0, #3
 8011f2e:	e7e3      	b.n	8011ef8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8011f30:	fb09 f103 	mul.w	r1, r9, r3
 8011f34:	1c4b      	adds	r3, r1, #1
 8011f36:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8011f3a:	7801      	ldrb	r1, [r0, #0]
 8011f3c:	121b      	asrs	r3, r3, #8
 8011f3e:	b29e      	uxth	r6, r3
 8011f40:	43db      	mvns	r3, r3
 8011f42:	fb1b fb06 	smulbb	fp, fp, r6
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	fb01 b103 	mla	r1, r1, r3, fp
 8011f4c:	b289      	uxth	r1, r1
 8011f4e:	f101 0b01 	add.w	fp, r1, #1
 8011f52:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8011f56:	f890 b001 	ldrb.w	fp, [r0, #1]
 8011f5a:	fb1b fb03 	smulbb	fp, fp, r3
 8011f5e:	1209      	asrs	r1, r1, #8
 8011f60:	7001      	strb	r1, [r0, #0]
 8011f62:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8011f66:	fb01 b106 	mla	r1, r1, r6, fp
 8011f6a:	b289      	uxth	r1, r1
 8011f6c:	f101 0b01 	add.w	fp, r1, #1
 8011f70:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8011f74:	1209      	asrs	r1, r1, #8
 8011f76:	7041      	strb	r1, [r0, #1]
 8011f78:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011f7c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8011f80:	fb1c f303 	smulbb	r3, ip, r3
 8011f84:	fb01 3606 	mla	r6, r1, r6, r3
 8011f88:	b2b6      	uxth	r6, r6
 8011f8a:	1c73      	adds	r3, r6, #1
 8011f8c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8011f90:	1236      	asrs	r6, r6, #8
 8011f92:	7086      	strb	r6, [r0, #2]
 8011f94:	e7ca      	b.n	8011f2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f98:	4428      	add	r0, r5
 8011f9a:	441f      	add	r7, r3
 8011f9c:	e7a8      	b.n	8011ef0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8011f9e:	4b03      	ldr	r3, [pc, #12]	; (8011fac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8011fa0:	6818      	ldr	r0, [r3, #0]
 8011fa2:	6803      	ldr	r3, [r0, #0]
 8011fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa6:	4798      	blx	r3
 8011fa8:	e782      	b.n	8011eb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011faa:	bf00      	nop
 8011fac:	2400ae04 	.word	0x2400ae04
 8011fb0:	2400adfe 	.word	0x2400adfe

08011fb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb8:	b091      	sub	sp, #68	; 0x44
 8011fba:	4680      	mov	r8, r0
 8011fbc:	460e      	mov	r6, r1
 8011fbe:	6810      	ldr	r0, [r2, #0]
 8011fc0:	6851      	ldr	r1, [r2, #4]
 8011fc2:	ad0c      	add	r5, sp, #48	; 0x30
 8011fc4:	4614      	mov	r4, r2
 8011fc6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8011fca:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8012164 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8011fce:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012168 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8011fd2:	c503      	stmia	r5!, {r0, r1}
 8011fd4:	6818      	ldr	r0, [r3, #0]
 8011fd6:	ad0e      	add	r5, sp, #56	; 0x38
 8011fd8:	6859      	ldr	r1, [r3, #4]
 8011fda:	c503      	stmia	r5!, {r0, r1}
 8011fdc:	a80c      	add	r0, sp, #48	; 0x30
 8011fde:	f7fa fea1 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011fe2:	4621      	mov	r1, r4
 8011fe4:	a80e      	add	r0, sp, #56	; 0x38
 8011fe6:	f7fa fec5 	bl	800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011fea:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8011fee:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011ff2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011ff6:	f8d9 0000 	ldr.w	r0, [r9]
 8011ffa:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011ffe:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8012002:	eb08 0401 	add.w	r4, r8, r1
 8012006:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801200a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801200e:	440a      	add	r2, r1
 8012010:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012014:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012018:	4413      	add	r3, r2
 801201a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801201e:	6803      	ldr	r3, [r0, #0]
 8012020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012022:	4798      	blx	r3
 8012024:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012028:	f8d9 0000 	ldr.w	r0, [r9]
 801202c:	d022      	beq.n	8012074 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801202e:	2200      	movs	r2, #0
 8012030:	f04f 0c01 	mov.w	ip, #1
 8012034:	6801      	ldr	r1, [r0, #0]
 8012036:	b2ad      	uxth	r5, r5
 8012038:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801203c:	e9cd c208 	strd	ip, r2, [sp, #32]
 8012040:	f04f 0c0b 	mov.w	ip, #11
 8012044:	f8cd c01c 	str.w	ip, [sp, #28]
 8012048:	f8ba c000 	ldrh.w	ip, [sl]
 801204c:	9704      	str	r7, [sp, #16]
 801204e:	9502      	str	r5, [sp, #8]
 8012050:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8012054:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012058:	9203      	str	r2, [sp, #12]
 801205a:	fa1f f288 	uxth.w	r2, r8
 801205e:	9201      	str	r2, [sp, #4]
 8012060:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012064:	9200      	str	r2, [sp, #0]
 8012066:	4632      	mov	r2, r6
 8012068:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801206a:	4621      	mov	r1, r4
 801206c:	47a8      	blx	r5
 801206e:	b011      	add	sp, #68	; 0x44
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	6803      	ldr	r3, [r0, #0]
 8012076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012078:	4798      	blx	r3
 801207a:	f8ba 2000 	ldrh.w	r2, [sl]
 801207e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012082:	f04f 0e03 	mov.w	lr, #3
 8012086:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801208a:	4355      	muls	r5, r2
 801208c:	fa1f fc87 	uxth.w	ip, r7
 8012090:	fb02 1303 	mla	r3, r2, r3, r1
 8012094:	eba2 0208 	sub.w	r2, r2, r8
 8012098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801209c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80120a4:	4418      	add	r0, r3
 80120a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80120a8:	1943      	adds	r3, r0, r5
 80120aa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80120ae:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80120b2:	eba2 0208 	sub.w	r2, r2, r8
 80120b6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80120ba:	b2ad      	uxth	r5, r5
 80120bc:	4298      	cmp	r0, r3
 80120be:	d24a      	bcs.n	8012156 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80120c0:	eb00 0908 	add.w	r9, r0, r8
 80120c4:	4621      	mov	r1, r4
 80120c6:	4548      	cmp	r0, r9
 80120c8:	460c      	mov	r4, r1
 80120ca:	d240      	bcs.n	801214e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80120cc:	f04f 0a04 	mov.w	sl, #4
 80120d0:	7824      	ldrb	r4, [r4, #0]
 80120d2:	2fff      	cmp	r7, #255	; 0xff
 80120d4:	f101 0101 	add.w	r1, r1, #1
 80120d8:	fb1e a404 	smlabb	r4, lr, r4, sl
 80120dc:	eb06 0a04 	add.w	sl, r6, r4
 80120e0:	f816 b004 	ldrb.w	fp, [r6, r4]
 80120e4:	d02b      	beq.n	801213e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80120e6:	7804      	ldrb	r4, [r0, #0]
 80120e8:	fb14 f405 	smulbb	r4, r4, r5
 80120ec:	fb0b 440c 	mla	r4, fp, ip, r4
 80120f0:	b2a4      	uxth	r4, r4
 80120f2:	f104 0b01 	add.w	fp, r4, #1
 80120f6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80120fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 80120fe:	fb1b fb05 	smulbb	fp, fp, r5
 8012102:	1224      	asrs	r4, r4, #8
 8012104:	7004      	strb	r4, [r0, #0]
 8012106:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801210a:	fb04 b40c 	mla	r4, r4, ip, fp
 801210e:	b2a4      	uxth	r4, r4
 8012110:	f104 0b01 	add.w	fp, r4, #1
 8012114:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8012118:	1224      	asrs	r4, r4, #8
 801211a:	7044      	strb	r4, [r0, #1]
 801211c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8012120:	f890 a002 	ldrb.w	sl, [r0, #2]
 8012124:	fb1a fa05 	smulbb	sl, sl, r5
 8012128:	fb04 a40c 	mla	r4, r4, ip, sl
 801212c:	b2a4      	uxth	r4, r4
 801212e:	f104 0a01 	add.w	sl, r4, #1
 8012132:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8012136:	1224      	asrs	r4, r4, #8
 8012138:	7084      	strb	r4, [r0, #2]
 801213a:	3003      	adds	r0, #3
 801213c:	e7c3      	b.n	80120c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801213e:	f880 b000 	strb.w	fp, [r0]
 8012142:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8012146:	7044      	strb	r4, [r0, #1]
 8012148:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801214c:	e7f4      	b.n	8012138 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801214e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012150:	4420      	add	r0, r4
 8012152:	188c      	adds	r4, r1, r2
 8012154:	e7b2      	b.n	80120bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8012156:	4b03      	ldr	r3, [pc, #12]	; (8012164 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8012158:	6818      	ldr	r0, [r3, #0]
 801215a:	6803      	ldr	r3, [r0, #0]
 801215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801215e:	4798      	blx	r3
 8012160:	e785      	b.n	801206e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8012162:	bf00      	nop
 8012164:	2400ae04 	.word	0x2400ae04
 8012168:	2400adfe 	.word	0x2400adfe

0801216c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801216c:	b430      	push	{r4, r5}
 801216e:	780d      	ldrb	r5, [r1, #0]
 8012170:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8012174:	b11d      	cbz	r5, 801217e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8012176:	2d01      	cmp	r5, #1
 8012178:	d005      	beq.n	8012186 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801217a:	bc30      	pop	{r4, r5}
 801217c:	4770      	bx	lr
 801217e:	9402      	str	r4, [sp, #8]
 8012180:	bc30      	pop	{r4, r5}
 8012182:	f7ff be3f 	b.w	8011e04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8012186:	9402      	str	r4, [sp, #8]
 8012188:	bc30      	pop	{r4, r5}
 801218a:	f7ff bf13 	b.w	8011fb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08012190 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8012190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012194:	4605      	mov	r5, r0
 8012196:	b08f      	sub	sp, #60	; 0x3c
 8012198:	460c      	mov	r4, r1
 801219a:	461f      	mov	r7, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d052      	beq.n	8012246 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80121a0:	6808      	ldr	r0, [r1, #0]
 80121a2:	ab0a      	add	r3, sp, #40	; 0x28
 80121a4:	6849      	ldr	r1, [r1, #4]
 80121a6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8012370 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80121aa:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8012374 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80121ae:	c303      	stmia	r3!, {r0, r1}
 80121b0:	6810      	ldr	r0, [r2, #0]
 80121b2:	ab0c      	add	r3, sp, #48	; 0x30
 80121b4:	6851      	ldr	r1, [r2, #4]
 80121b6:	c303      	stmia	r3!, {r0, r1}
 80121b8:	a80a      	add	r0, sp, #40	; 0x28
 80121ba:	f7fa fdb3 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80121be:	4621      	mov	r1, r4
 80121c0:	a80c      	add	r0, sp, #48	; 0x30
 80121c2:	f7fa fdd7 	bl	800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80121c6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80121ca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80121ce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80121d2:	f8d8 0000 	ldr.w	r0, [r8]
 80121d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80121da:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 80121de:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 80121e2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80121e6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80121ea:	440a      	add	r2, r1
 80121ec:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80121f0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80121f4:	4413      	add	r3, r2
 80121f6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80121fa:	6803      	ldr	r3, [r0, #0]
 80121fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fe:	4798      	blx	r3
 8012200:	2fff      	cmp	r7, #255	; 0xff
 8012202:	d023      	beq.n	801224c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8012204:	f010 0f04 	tst.w	r0, #4
 8012208:	f8d8 0000 	ldr.w	r0, [r8]
 801220c:	d021      	beq.n	8012252 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801220e:	2100      	movs	r1, #0
 8012210:	f04f 0e01 	mov.w	lr, #1
 8012214:	f8d0 c000 	ldr.w	ip, [r0]
 8012218:	b2a4      	uxth	r4, r4
 801221a:	9106      	str	r1, [sp, #24]
 801221c:	b2b6      	uxth	r6, r6
 801221e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012222:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012226:	e9cd e107 	strd	lr, r1, [sp, #28]
 801222a:	f8b9 e000 	ldrh.w	lr, [r9]
 801222e:	9703      	str	r7, [sp, #12]
 8012230:	9401      	str	r4, [sp, #4]
 8012232:	9600      	str	r6, [sp, #0]
 8012234:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8012238:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801223c:	9102      	str	r1, [sp, #8]
 801223e:	4629      	mov	r1, r5
 8012240:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8012244:	47a0      	blx	r4
 8012246:	b00f      	add	sp, #60	; 0x3c
 8012248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801224c:	f010 0f01 	tst.w	r0, #1
 8012250:	e7da      	b.n	8012208 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8012252:	6803      	ldr	r3, [r0, #0]
 8012254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012256:	4798      	blx	r3
 8012258:	f8b9 1000 	ldrh.w	r1, [r9]
 801225c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012260:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8012264:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012268:	434c      	muls	r4, r1
 801226a:	2fff      	cmp	r7, #255	; 0xff
 801226c:	fb01 2303 	mla	r3, r1, r3, r2
 8012270:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012274:	eba1 0106 	sub.w	r1, r1, r6
 8012278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801227c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012280:	4418      	add	r0, r3
 8012282:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8012286:	eba3 0606 	sub.w	r6, r3, r6
 801228a:	4404      	add	r4, r0
 801228c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8012290:	d04a      	beq.n	8012328 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8012292:	43fa      	mvns	r2, r7
 8012294:	b2bb      	uxth	r3, r7
 8012296:	b2d7      	uxtb	r7, r2
 8012298:	42a0      	cmp	r0, r4
 801229a:	d263      	bcs.n	8012364 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801229c:	eb00 0e0c 	add.w	lr, r0, ip
 80122a0:	4586      	cmp	lr, r0
 80122a2:	f100 0803 	add.w	r8, r0, #3
 80122a6:	d93a      	bls.n	801231e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80122a8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80122ac:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80122b0:	00d0      	lsls	r0, r2, #3
 80122b2:	fb19 f907 	smulbb	r9, r9, r7
 80122b6:	b2c0      	uxtb	r0, r0
 80122b8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80122bc:	fb00 9003 	mla	r0, r0, r3, r9
 80122c0:	b280      	uxth	r0, r0
 80122c2:	f100 0901 	add.w	r9, r0, #1
 80122c6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80122ca:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80122ce:	fb19 f907 	smulbb	r9, r9, r7
 80122d2:	1200      	asrs	r0, r0, #8
 80122d4:	f808 0c03 	strb.w	r0, [r8, #-3]
 80122d8:	10d0      	asrs	r0, r2, #3
 80122da:	1212      	asrs	r2, r2, #8
 80122dc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80122e0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80122e4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80122e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80122ec:	fb00 9003 	mla	r0, r0, r3, r9
 80122f0:	b280      	uxth	r0, r0
 80122f2:	f100 0901 	add.w	r9, r0, #1
 80122f6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80122fa:	1200      	asrs	r0, r0, #8
 80122fc:	f808 0c02 	strb.w	r0, [r8, #-2]
 8012300:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8012304:	fb10 f007 	smulbb	r0, r0, r7
 8012308:	fb02 0203 	mla	r2, r2, r3, r0
 801230c:	b292      	uxth	r2, r2
 801230e:	1c50      	adds	r0, r2, #1
 8012310:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8012314:	4640      	mov	r0, r8
 8012316:	1212      	asrs	r2, r2, #8
 8012318:	f808 2c01 	strb.w	r2, [r8, #-1]
 801231c:	e7c0      	b.n	80122a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801231e:	4408      	add	r0, r1
 8012320:	4435      	add	r5, r6
 8012322:	e7b9      	b.n	8012298 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8012324:	4408      	add	r0, r1
 8012326:	4435      	add	r5, r6
 8012328:	42a0      	cmp	r0, r4
 801232a:	d21b      	bcs.n	8012364 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801232c:	eb00 070c 	add.w	r7, r0, ip
 8012330:	42b8      	cmp	r0, r7
 8012332:	d2f7      	bcs.n	8012324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8012334:	f835 3b02 	ldrh.w	r3, [r5], #2
 8012338:	3003      	adds	r0, #3
 801233a:	00da      	lsls	r2, r3, #3
 801233c:	b2d2      	uxtb	r2, r2
 801233e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8012342:	f800 2c03 	strb.w	r2, [r0, #-3]
 8012346:	10da      	asrs	r2, r3, #3
 8012348:	121b      	asrs	r3, r3, #8
 801234a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801234e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012352:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8012356:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801235a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801235e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012362:	e7e5      	b.n	8012330 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8012364:	4b02      	ldr	r3, [pc, #8]	; (8012370 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8012366:	6818      	ldr	r0, [r3, #0]
 8012368:	6803      	ldr	r3, [r0, #0]
 801236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236c:	4798      	blx	r3
 801236e:	e76a      	b.n	8012246 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8012370:	2400ae04 	.word	0x2400ae04
 8012374:	2400adfe 	.word	0x2400adfe

08012378 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8012378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801237c:	b08a      	sub	sp, #40	; 0x28
 801237e:	460d      	mov	r5, r1
 8012380:	4604      	mov	r4, r0
 8012382:	461e      	mov	r6, r3
 8012384:	6808      	ldr	r0, [r1, #0]
 8012386:	ab06      	add	r3, sp, #24
 8012388:	6849      	ldr	r1, [r1, #4]
 801238a:	4f5d      	ldr	r7, [pc, #372]	; (8012500 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801238c:	c303      	stmia	r3!, {r0, r1}
 801238e:	6810      	ldr	r0, [r2, #0]
 8012390:	ab08      	add	r3, sp, #32
 8012392:	6851      	ldr	r1, [r2, #4]
 8012394:	c303      	stmia	r3!, {r0, r1}
 8012396:	a806      	add	r0, sp, #24
 8012398:	f7fa fcc4 	bl	800cd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801239c:	4629      	mov	r1, r5
 801239e:	a808      	add	r0, sp, #32
 80123a0:	f7fa fce8 	bl	800cd74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80123a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80123a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80123ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80123b0:	6838      	ldr	r0, [r7, #0]
 80123b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80123b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80123ba:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80123be:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80123c2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80123c6:	440a      	add	r2, r1
 80123c8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80123cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80123d0:	4413      	add	r3, r2
 80123d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80123d6:	6803      	ldr	r3, [r0, #0]
 80123d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123da:	4798      	blx	r3
 80123dc:	2eff      	cmp	r6, #255	; 0xff
 80123de:	d119      	bne.n	8012414 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80123e0:	f010 0f20 	tst.w	r0, #32
 80123e4:	6838      	ldr	r0, [r7, #0]
 80123e6:	d018      	beq.n	801241a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80123e8:	b2ad      	uxth	r5, r5
 80123ea:	2700      	movs	r7, #0
 80123ec:	6801      	ldr	r1, [r0, #0]
 80123ee:	9501      	str	r5, [sp, #4]
 80123f0:	fa1f f588 	uxth.w	r5, r8
 80123f4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80123f8:	9500      	str	r5, [sp, #0]
 80123fa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80123fe:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8012402:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8012406:	9602      	str	r6, [sp, #8]
 8012408:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801240a:	4621      	mov	r1, r4
 801240c:	47a8      	blx	r5
 801240e:	b00a      	add	sp, #40	; 0x28
 8012410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012414:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012418:	e7e4      	b.n	80123e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801241a:	6803      	ldr	r3, [r0, #0]
 801241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801241e:	4798      	blx	r3
 8012420:	4b38      	ldr	r3, [pc, #224]	; (8012504 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8012422:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012426:	f8b3 c000 	ldrh.w	ip, [r3]
 801242a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801242e:	fb0c f505 	mul.w	r5, ip, r5
 8012432:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8012436:	fb0c 2303 	mla	r3, ip, r3, r2
 801243a:	ebac 0c08 	sub.w	ip, ip, r8
 801243e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012442:	ebae 0e08 	sub.w	lr, lr, r8
 8012446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801244a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801244e:	4418      	add	r0, r3
 8012450:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8012454:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8012458:	4405      	add	r5, r0
 801245a:	42a8      	cmp	r0, r5
 801245c:	d24a      	bcs.n	80124f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801245e:	eb00 0803 	add.w	r8, r0, r3
 8012462:	4540      	cmp	r0, r8
 8012464:	d243      	bcs.n	80124ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8012466:	78e2      	ldrb	r2, [r4, #3]
 8012468:	b15a      	cbz	r2, 8012482 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801246a:	2aff      	cmp	r2, #255	; 0xff
 801246c:	f894 9000 	ldrb.w	r9, [r4]
 8012470:	d10a      	bne.n	8012488 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8012472:	2eff      	cmp	r6, #255	; 0xff
 8012474:	d108      	bne.n	8012488 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8012476:	f880 9000 	strb.w	r9, [r0]
 801247a:	7862      	ldrb	r2, [r4, #1]
 801247c:	7042      	strb	r2, [r0, #1]
 801247e:	78a2      	ldrb	r2, [r4, #2]
 8012480:	7082      	strb	r2, [r0, #2]
 8012482:	3003      	adds	r0, #3
 8012484:	3404      	adds	r4, #4
 8012486:	e7ec      	b.n	8012462 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8012488:	4372      	muls	r2, r6
 801248a:	1c51      	adds	r1, r2, #1
 801248c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8012490:	1209      	asrs	r1, r1, #8
 8012492:	fa1f fa81 	uxth.w	sl, r1
 8012496:	43c9      	mvns	r1, r1
 8012498:	fb19 f90a 	smulbb	r9, r9, sl
 801249c:	b2ca      	uxtb	r2, r1
 801249e:	7801      	ldrb	r1, [r0, #0]
 80124a0:	fb01 9902 	mla	r9, r1, r2, r9
 80124a4:	fa1f f989 	uxth.w	r9, r9
 80124a8:	f109 0101 	add.w	r1, r9, #1
 80124ac:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80124b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80124b4:	f880 9000 	strb.w	r9, [r0]
 80124b8:	f890 9001 	ldrb.w	r9, [r0, #1]
 80124bc:	7861      	ldrb	r1, [r4, #1]
 80124be:	fb19 f902 	smulbb	r9, r9, r2
 80124c2:	fb01 910a 	mla	r1, r1, sl, r9
 80124c6:	b289      	uxth	r1, r1
 80124c8:	f101 0901 	add.w	r9, r1, #1
 80124cc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80124d0:	1209      	asrs	r1, r1, #8
 80124d2:	7041      	strb	r1, [r0, #1]
 80124d4:	7881      	ldrb	r1, [r0, #2]
 80124d6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80124da:	fb11 f202 	smulbb	r2, r1, r2
 80124de:	fb09 220a 	mla	r2, r9, sl, r2
 80124e2:	b292      	uxth	r2, r2
 80124e4:	1c51      	adds	r1, r2, #1
 80124e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80124ea:	1212      	asrs	r2, r2, #8
 80124ec:	e7c8      	b.n	8012480 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80124ee:	4460      	add	r0, ip
 80124f0:	4474      	add	r4, lr
 80124f2:	e7b2      	b.n	801245a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80124f4:	6838      	ldr	r0, [r7, #0]
 80124f6:	6803      	ldr	r3, [r0, #0]
 80124f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124fa:	4798      	blx	r3
 80124fc:	e787      	b.n	801240e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80124fe:	bf00      	nop
 8012500:	2400ae04 	.word	0x2400ae04
 8012504:	2400adfe 	.word	0x2400adfe

08012508 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801250c:	b085      	sub	sp, #20
 801250e:	4606      	mov	r6, r0
 8012510:	460c      	mov	r4, r1
 8012512:	4691      	mov	r9, r2
 8012514:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8012518:	4698      	mov	r8, r3
 801251a:	b31d      	cbz	r5, 8012564 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801251c:	4608      	mov	r0, r1
 801251e:	f7fd fa4f 	bl	800f9c0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012522:	4607      	mov	r7, r0
 8012524:	4620      	mov	r0, r4
 8012526:	f7fd fa7f 	bl	800fa28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801252a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801252e:	4620      	mov	r0, r4
 8012530:	f8ad 9008 	strh.w	r9, [sp, #8]
 8012534:	f8ad 800a 	strh.w	r8, [sp, #10]
 8012538:	f8ad 700c 	strh.w	r7, [sp, #12]
 801253c:	f7fd fb78 	bl	800fc30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012540:	280b      	cmp	r0, #11
 8012542:	d80f      	bhi.n	8012564 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8012544:	e8df f000 	tbb	[pc, r0]
 8012548:	0e062920 	.word	0x0e062920
 801254c:	0e0e0e0e 	.word	0x0e0e0e0e
 8012550:	110e0e0e 	.word	0x110e0e0e
 8012554:	4620      	mov	r0, r4
 8012556:	f7fd fae7 	bl	800fb28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801255a:	462b      	mov	r3, r5
 801255c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801255e:	a902      	add	r1, sp, #8
 8012560:	f7ff ff0a 	bl	8012378 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012564:	b005      	add	sp, #20
 8012566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801256a:	4620      	mov	r0, r4
 801256c:	f7fd fadc 	bl	800fb28 <_ZNK8touchgfx6Bitmap7getDataEv>
 8012570:	4606      	mov	r6, r0
 8012572:	4620      	mov	r0, r4
 8012574:	f7fd fb08 	bl	800fb88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8012578:	9500      	str	r5, [sp, #0]
 801257a:	4601      	mov	r1, r0
 801257c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801257e:	aa02      	add	r2, sp, #8
 8012580:	4630      	mov	r0, r6
 8012582:	f7ff fdf3 	bl	801216c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8012586:	e7ed      	b.n	8012564 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8012588:	4620      	mov	r0, r4
 801258a:	f7fd facd 	bl	800fb28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801258e:	462b      	mov	r3, r5
 8012590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012592:	a902      	add	r1, sp, #8
 8012594:	f7ff fdfc 	bl	8012190 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8012598:	e7e4      	b.n	8012564 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801259a:	6833      	ldr	r3, [r6, #0]
 801259c:	4620      	mov	r0, r4
 801259e:	68df      	ldr	r7, [r3, #12]
 80125a0:	f7fd fac2 	bl	800fb28 <_ZNK8touchgfx6Bitmap7getDataEv>
 80125a4:	2300      	movs	r3, #0
 80125a6:	4601      	mov	r1, r0
 80125a8:	aa02      	add	r2, sp, #8
 80125aa:	4630      	mov	r0, r6
 80125ac:	e9cd 5300 	strd	r5, r3, [sp]
 80125b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125b2:	47b8      	blx	r7
 80125b4:	e7d6      	b.n	8012564 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080125b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80125b6:	b4f0      	push	{r4, r5, r6, r7}
 80125b8:	4616      	mov	r6, r2
 80125ba:	461c      	mov	r4, r3
 80125bc:	460d      	mov	r5, r1
 80125be:	9a04      	ldr	r2, [sp, #16]
 80125c0:	2e01      	cmp	r6, #1
 80125c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80125c6:	d00e      	beq.n	80125e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80125c8:	d303      	bcc.n	80125d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80125ca:	2e02      	cmp	r6, #2
 80125cc:	d006      	beq.n	80125dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80125ce:	bcf0      	pop	{r4, r5, r6, r7}
 80125d0:	4770      	bx	lr
 80125d2:	4621      	mov	r1, r4
 80125d4:	4628      	mov	r0, r5
 80125d6:	bcf0      	pop	{r4, r5, r6, r7}
 80125d8:	f7ff bdda 	b.w	8012190 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80125dc:	4621      	mov	r1, r4
 80125de:	4628      	mov	r0, r5
 80125e0:	bcf0      	pop	{r4, r5, r6, r7}
 80125e2:	f7ff bec9 	b.w	8012378 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80125e6:	6805      	ldr	r5, [r0, #0]
 80125e8:	2600      	movs	r6, #0
 80125ea:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80125ee:	68ed      	ldr	r5, [r5, #12]
 80125f0:	4613      	mov	r3, r2
 80125f2:	4622      	mov	r2, r4
 80125f4:	46ac      	mov	ip, r5
 80125f6:	bcf0      	pop	{r4, r5, r6, r7}
 80125f8:	4760      	bx	ip
	...

080125fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80125fc:	b160      	cbz	r0, 8012618 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80125fe:	2903      	cmp	r1, #3
 8012600:	d818      	bhi.n	8012634 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8012602:	e8df f001 	tbb	[pc, r1]
 8012606:	1902      	.short	0x1902
 8012608:	1b06      	.short	0x1b06
 801260a:	4b0e      	ldr	r3, [pc, #56]	; (8012644 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801260c:	8818      	ldrh	r0, [r3, #0]
 801260e:	4240      	negs	r0, r0
 8012610:	4770      	bx	lr
 8012612:	4b0c      	ldr	r3, [pc, #48]	; (8012644 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8012614:	8818      	ldrh	r0, [r3, #0]
 8012616:	4770      	bx	lr
 8012618:	2903      	cmp	r1, #3
 801261a:	d80b      	bhi.n	8012634 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801261c:	a301      	add	r3, pc, #4	; (adr r3, 8012624 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801261e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012622:	bf00      	nop
 8012624:	08012639 	.word	0x08012639
 8012628:	08012613 	.word	0x08012613
 801262c:	0801263d 	.word	0x0801263d
 8012630:	0801260b 	.word	0x0801260b
 8012634:	2000      	movs	r0, #0
 8012636:	4770      	bx	lr
 8012638:	2001      	movs	r0, #1
 801263a:	4770      	bx	lr
 801263c:	f04f 30ff 	mov.w	r0, #4294967295
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	2400adfe 	.word	0x2400adfe

08012648 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8012648:	b160      	cbz	r0, 8012664 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801264a:	2903      	cmp	r1, #3
 801264c:	d818      	bhi.n	8012680 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801264e:	e8df f001 	tbb	[pc, r1]
 8012652:	0219      	.short	0x0219
 8012654:	051b      	.short	0x051b
 8012656:	4b0e      	ldr	r3, [pc, #56]	; (8012690 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8012658:	8818      	ldrh	r0, [r3, #0]
 801265a:	4770      	bx	lr
 801265c:	4b0c      	ldr	r3, [pc, #48]	; (8012690 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801265e:	8818      	ldrh	r0, [r3, #0]
 8012660:	4240      	negs	r0, r0
 8012662:	4770      	bx	lr
 8012664:	2903      	cmp	r1, #3
 8012666:	d80b      	bhi.n	8012680 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8012668:	a301      	add	r3, pc, #4	; (adr r3, 8012670 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801266a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801266e:	bf00      	nop
 8012670:	08012657 	.word	0x08012657
 8012674:	08012689 	.word	0x08012689
 8012678:	0801265d 	.word	0x0801265d
 801267c:	08012685 	.word	0x08012685
 8012680:	2000      	movs	r0, #0
 8012682:	4770      	bx	lr
 8012684:	2001      	movs	r0, #1
 8012686:	4770      	bx	lr
 8012688:	f04f 30ff 	mov.w	r0, #4294967295
 801268c:	4770      	bx	lr
 801268e:	bf00      	nop
 8012690:	2400adfe 	.word	0x2400adfe

08012694 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8012694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012698:	b097      	sub	sp, #92	; 0x5c
 801269a:	910b      	str	r1, [sp, #44]	; 0x2c
 801269c:	a912      	add	r1, sp, #72	; 0x48
 801269e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80126a2:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80126a6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80126aa:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80126ae:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80126b2:	e881 000c 	stmia.w	r1, {r2, r3}
 80126b6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80126ba:	930a      	str	r3, [sp, #40]	; 0x28
 80126bc:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80126c0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80126c4:	9311      	str	r3, [sp, #68]	; 0x44
 80126c6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80126ca:	798d      	ldrb	r5, [r1, #6]
 80126cc:	930c      	str	r3, [sp, #48]	; 0x30
 80126ce:	7b4b      	ldrb	r3, [r1, #13]
 80126d0:	0158      	lsls	r0, r3, #5
 80126d2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80126d6:	4328      	orrs	r0, r5
 80126d8:	9009      	str	r0, [sp, #36]	; 0x24
 80126da:	f000 817c 	beq.w	80129d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80126de:	011b      	lsls	r3, r3, #4
 80126e0:	79c8      	ldrb	r0, [r1, #7]
 80126e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126e6:	4303      	orrs	r3, r0
 80126e8:	930e      	str	r3, [sp, #56]	; 0x38
 80126ea:	f000 8174 	beq.w	80129d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80126ee:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	2f00      	cmp	r7, #0
 80126f6:	f000 8116 	beq.w	8012926 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80126fa:	1aff      	subs	r7, r7, r3
 80126fc:	b2bf      	uxth	r7, r7
 80126fe:	043b      	lsls	r3, r7, #16
 8012700:	d502      	bpl.n	8012708 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8012702:	1bf6      	subs	r6, r6, r7
 8012704:	2700      	movs	r7, #0
 8012706:	b236      	sxth	r6, r6
 8012708:	f9b2 1000 	ldrsh.w	r1, [r2]
 801270c:	a812      	add	r0, sp, #72	; 0x48
 801270e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8012712:	428e      	cmp	r6, r1
 8012714:	b28b      	uxth	r3, r1
 8012716:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801271a:	bfbf      	itttt	lt
 801271c:	18ff      	addlt	r7, r7, r3
 801271e:	1bbe      	sublt	r6, r7, r6
 8012720:	b2b7      	uxthlt	r7, r6
 8012722:	460e      	movlt	r6, r1
 8012724:	8891      	ldrh	r1, [r2, #4]
 8012726:	440b      	add	r3, r1
 8012728:	4631      	mov	r1, r6
 801272a:	b21b      	sxth	r3, r3
 801272c:	9310      	str	r3, [sp, #64]	; 0x40
 801272e:	88d3      	ldrh	r3, [r2, #6]
 8012730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012732:	449a      	add	sl, r3
 8012734:	fa0f f38a 	sxth.w	r3, sl
 8012738:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801273c:	930f      	str	r3, [sp, #60]	; 0x3c
 801273e:	4bb5      	ldr	r3, [pc, #724]	; (8012a14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8012740:	f893 b000 	ldrb.w	fp, [r3]
 8012744:	f10b 3cff 	add.w	ip, fp, #4294967295
 8012748:	f1dc 0300 	rsbs	r3, ip, #0
 801274c:	eb43 030c 	adc.w	r3, r3, ip
 8012750:	930d      	str	r3, [sp, #52]	; 0x34
 8012752:	464b      	mov	r3, r9
 8012754:	f7fa f960 	bl	800ca18 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8012758:	4631      	mov	r1, r6
 801275a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801275e:	464b      	mov	r3, r9
 8012760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012762:	a812      	add	r0, sp, #72	; 0x48
 8012764:	f7fa f975 	bl	800ca52 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8012768:	a916      	add	r1, sp, #88	; 0x58
 801276a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801276e:	a815      	add	r0, sp, #84	; 0x54
 8012770:	f7fa fa96 	bl	800cca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8012774:	f1b9 0f00 	cmp.w	r9, #0
 8012778:	f040 80d8 	bne.w	801292c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801277c:	f1bb 0f01 	cmp.w	fp, #1
 8012780:	f040 80dc 	bne.w	801293c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8012784:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012786:	b153      	cbz	r3, 801279e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8012788:	2508      	movs	r5, #8
 801278a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801278c:	fb95 f3f8 	sdiv	r3, r5, r8
 8012790:	1e5d      	subs	r5, r3, #1
 8012792:	4415      	add	r5, r2
 8012794:	fb95 f5f3 	sdiv	r5, r5, r3
 8012798:	fb15 f503 	smulbb	r5, r5, r3
 801279c:	b2ad      	uxth	r5, r5
 801279e:	b907      	cbnz	r7, 80127a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80127a0:	b16c      	cbz	r4, 80127be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80127a2:	fb04 7305 	mla	r3, r4, r5, r7
 80127a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80127a8:	ebaa 0a04 	sub.w	sl, sl, r4
 80127ac:	fb08 f303 	mul.w	r3, r8, r3
 80127b0:	fa1f fa8a 	uxth.w	sl, sl
 80127b4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80127b8:	f003 0407 	and.w	r4, r3, #7
 80127bc:	9226      	str	r2, [sp, #152]	; 0x98
 80127be:	4649      	mov	r1, r9
 80127c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80127c2:	f7ff ff1b 	bl	80125fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80127c6:	4683      	mov	fp, r0
 80127c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80127ca:	f7ff ff3d 	bl	8012648 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80127ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127d2:	4681      	mov	r9, r0
 80127d4:	1a9b      	subs	r3, r3, r2
 80127d6:	459a      	cmp	sl, r3
 80127d8:	bfa8      	it	ge
 80127da:	469a      	movge	sl, r3
 80127dc:	f1ba 0f00 	cmp.w	sl, #0
 80127e0:	f340 80f9 	ble.w	80129d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80127e4:	1bf6      	subs	r6, r6, r7
 80127e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127e8:	1b9e      	subs	r6, r3, r6
 80127ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ec:	429e      	cmp	r6, r3
 80127ee:	bfd4      	ite	le
 80127f0:	ebc7 0706 	rsble	r7, r7, r6
 80127f4:	ebc7 0703 	rsbgt	r7, r7, r3
 80127f8:	2f00      	cmp	r7, #0
 80127fa:	f340 80ec 	ble.w	80129d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80127fe:	1bed      	subs	r5, r5, r7
 8012800:	fb08 f305 	mul.w	r3, r8, r5
 8012804:	930d      	str	r3, [sp, #52]	; 0x34
 8012806:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012808:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801280c:	930e      	str	r3, [sp, #56]	; 0x38
 801280e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012810:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012814:	930f      	str	r3, [sp, #60]	; 0x3c
 8012816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012818:	b2db      	uxtb	r3, r3
 801281a:	9310      	str	r3, [sp, #64]	; 0x40
 801281c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801281e:	2b00      	cmp	r3, #0
 8012820:	f040 80de 	bne.w	80129e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8012824:	4b7c      	ldr	r3, [pc, #496]	; (8012a18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8012826:	6818      	ldr	r0, [r3, #0]
 8012828:	6803      	ldr	r3, [r0, #0]
 801282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801282c:	4798      	blx	r3
 801282e:	2301      	movs	r3, #1
 8012830:	4a7a      	ldr	r2, [pc, #488]	; (8012a1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8012832:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8012836:	fb07 9b1b 	mls	fp, r7, fp, r9
 801283a:	fa03 f308 	lsl.w	r3, r3, r8
 801283e:	8811      	ldrh	r1, [r2, #0]
 8012840:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8012844:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8012848:	3b01      	subs	r3, #1
 801284a:	fb06 bb07 	mla	fp, r6, r7, fp
 801284e:	b2db      	uxtb	r3, r3
 8012850:	930a      	str	r3, [sp, #40]	; 0x28
 8012852:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8012856:	fb01 2303 	mla	r3, r1, r3, r2
 801285a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801285e:	18c3      	adds	r3, r0, r3
 8012860:	9309      	str	r3, [sp, #36]	; 0x24
 8012862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012864:	781a      	ldrb	r2, [r3, #0]
 8012866:	4122      	asrs	r2, r4
 8012868:	b2d2      	uxtb	r2, r2
 801286a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801286e:	f0c0 80d7 	bcc.w	8012a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8012872:	46be      	mov	lr, r7
 8012874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012876:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801287a:	f0c0 80ba 	bcc.w	80129f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801287e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012880:	4013      	ands	r3, r2
 8012882:	d041      	beq.n	8012908 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8012884:	20ff      	movs	r0, #255	; 0xff
 8012886:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012888:	fb90 f5f5 	sdiv	r5, r0, r5
 801288c:	436b      	muls	r3, r5
 801288e:	2bfe      	cmp	r3, #254	; 0xfe
 8012890:	dd03      	ble.n	801289a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8012892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012894:	4285      	cmp	r5, r0
 8012896:	f000 80a5 	beq.w	80129e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801289a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801289c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801289e:	fb15 f303 	smulbb	r3, r5, r3
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	1c5d      	adds	r5, r3, #1
 80128a6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80128aa:	780d      	ldrb	r5, [r1, #0]
 80128ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80128b0:	fa1f fc83 	uxth.w	ip, r3
 80128b4:	43db      	mvns	r3, r3
 80128b6:	fb10 f90c 	smulbb	r9, r0, ip
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80128be:	fb05 9503 	mla	r5, r5, r3, r9
 80128c2:	b2ad      	uxth	r5, r5
 80128c4:	f105 0901 	add.w	r9, r5, #1
 80128c8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80128cc:	fb10 f90c 	smulbb	r9, r0, ip
 80128d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80128d2:	122d      	asrs	r5, r5, #8
 80128d4:	fb10 fc0c 	smulbb	ip, r0, ip
 80128d8:	700d      	strb	r5, [r1, #0]
 80128da:	784d      	ldrb	r5, [r1, #1]
 80128dc:	fb05 9503 	mla	r5, r5, r3, r9
 80128e0:	b2ad      	uxth	r5, r5
 80128e2:	f105 0901 	add.w	r9, r5, #1
 80128e6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80128ea:	122d      	asrs	r5, r5, #8
 80128ec:	704d      	strb	r5, [r1, #1]
 80128ee:	788d      	ldrb	r5, [r1, #2]
 80128f0:	fb05 cc03 	mla	ip, r5, r3, ip
 80128f4:	fa1f fc8c 	uxth.w	ip, ip
 80128f8:	f10c 0301 	add.w	r3, ip, #1
 80128fc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8012900:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8012904:	f881 c002 	strb.w	ip, [r1, #2]
 8012908:	4444      	add	r4, r8
 801290a:	4431      	add	r1, r6
 801290c:	b2a4      	uxth	r4, r4
 801290e:	2c07      	cmp	r4, #7
 8012910:	bf89      	itett	hi
 8012912:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8012914:	fa42 f208 	asrls.w	r2, r2, r8
 8012918:	2400      	movhi	r4, #0
 801291a:	785a      	ldrbhi	r2, [r3, #1]
 801291c:	bf8a      	itet	hi
 801291e:	3301      	addhi	r3, #1
 8012920:	b2d2      	uxtbls	r2, r2
 8012922:	9326      	strhi	r3, [sp, #152]	; 0x98
 8012924:	e7a7      	b.n	8012876 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8012926:	441e      	add	r6, r3
 8012928:	b236      	sxth	r6, r6
 801292a:	e6ed      	b.n	8012708 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801292c:	f1b9 0f01 	cmp.w	r9, #1
 8012930:	f47f af28 	bne.w	8012784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8012934:	f1bb 0f01 	cmp.w	fp, #1
 8012938:	f47f af24 	bne.w	8012784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801293c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8012a18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8012940:	f8db 0000 	ldr.w	r0, [fp]
 8012944:	6803      	ldr	r3, [r0, #0]
 8012946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012948:	4798      	blx	r3
 801294a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801294e:	465a      	mov	r2, fp
 8012950:	d006      	beq.n	8012960 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8012952:	f1b8 0f04 	cmp.w	r8, #4
 8012956:	d141      	bne.n	80129dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8012958:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801295a:	3300      	adds	r3, #0
 801295c:	bf18      	it	ne
 801295e:	2301      	movne	r3, #1
 8012960:	0580      	lsls	r0, r0, #22
 8012962:	d566      	bpl.n	8012a32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8012964:	f1b8 0f08 	cmp.w	r8, #8
 8012968:	d163      	bne.n	8012a32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801296a:	2b00      	cmp	r3, #0
 801296c:	bf0c      	ite	eq
 801296e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8012972:	f44f 7180 	movne.w	r1, #256	; 0x100
 8012976:	2f00      	cmp	r7, #0
 8012978:	f47f af04 	bne.w	8012784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801297c:	2c00      	cmp	r4, #0
 801297e:	f47f af01 	bne.w	8012784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8012982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012984:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012986:	18f3      	adds	r3, r6, r3
 8012988:	4283      	cmp	r3, r0
 801298a:	f73f aefb 	bgt.w	8012784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801298e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012992:	4403      	add	r3, r0
 8012994:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012996:	4283      	cmp	r3, r0
 8012998:	f73f aef4 	bgt.w	8012784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801299c:	f1b8 0f08 	cmp.w	r8, #8
 80129a0:	6810      	ldr	r0, [r2, #0]
 80129a2:	f04f 0600 	mov.w	r6, #0
 80129a6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80129aa:	bf18      	it	ne
 80129ac:	3501      	addne	r5, #1
 80129ae:	6804      	ldr	r4, [r0, #0]
 80129b0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80129b4:	bf18      	it	ne
 80129b6:	f025 0501 	bicne.w	r5, r5, #1
 80129ba:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80129be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80129c0:	bf18      	it	ne
 80129c2:	b2ad      	uxthne	r5, r5
 80129c4:	9104      	str	r1, [sp, #16]
 80129c6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80129c8:	e9cd 5a00 	strd	r5, sl, [sp]
 80129cc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80129d0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80129d2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80129d4:	47a0      	blx	r4
 80129d6:	b017      	add	sp, #92	; 0x5c
 80129d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129dc:	2300      	movs	r3, #0
 80129de:	e7bf      	b.n	8012960 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80129e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80129e2:	e724      	b.n	801282e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 80129e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129e6:	700b      	strb	r3, [r1, #0]
 80129e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80129ea:	704b      	strb	r3, [r1, #1]
 80129ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129ee:	708b      	strb	r3, [r1, #2]
 80129f0:	e78a      	b.n	8012908 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80129f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129f4:	b153      	cbz	r3, 8012a0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80129f6:	441c      	add	r4, r3
 80129f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80129fa:	b2a4      	uxth	r4, r4
 80129fc:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8012a00:	f004 0407 	and.w	r4, r4, #7
 8012a04:	781a      	ldrb	r2, [r3, #0]
 8012a06:	9326      	str	r3, [sp, #152]	; 0x98
 8012a08:	4122      	asrs	r2, r4
 8012a0a:	b2d2      	uxtb	r2, r2
 8012a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a0e:	445b      	add	r3, fp
 8012a10:	9309      	str	r3, [sp, #36]	; 0x24
 8012a12:	e72a      	b.n	801286a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8012a14:	2400adfc 	.word	0x2400adfc
 8012a18:	2400ae04 	.word	0x2400ae04
 8012a1c:	2400adfe 	.word	0x2400adfe
 8012a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d1d7      	bne.n	80129d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012a26:	4b06      	ldr	r3, [pc, #24]	; (8012a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8012a28:	6818      	ldr	r0, [r3, #0]
 8012a2a:	6803      	ldr	r3, [r0, #0]
 8012a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2e:	4798      	blx	r3
 8012a30:	e7d1      	b.n	80129d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f43f aea6 	beq.w	8012784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8012a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012a3c:	e79b      	b.n	8012976 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8012a3e:	bf00      	nop
 8012a40:	2400ae04 	.word	0x2400ae04

08012a44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8012a44:	b538      	push	{r3, r4, r5, lr}
 8012a46:	4c15      	ldr	r4, [pc, #84]	; (8012a9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8012a48:	4605      	mov	r5, r0
 8012a4a:	7823      	ldrb	r3, [r4, #0]
 8012a4c:	f3bf 8f5b 	dmb	ish
 8012a50:	07da      	lsls	r2, r3, #31
 8012a52:	d40b      	bmi.n	8012a6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8012a54:	4620      	mov	r0, r4
 8012a56:	f005 f890 	bl	8017b7a <__cxa_guard_acquire>
 8012a5a:	b138      	cbz	r0, 8012a6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	f005 f898 	bl	8017b92 <__cxa_guard_release>
 8012a62:	4a0f      	ldr	r2, [pc, #60]	; (8012aa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8012a64:	490f      	ldr	r1, [pc, #60]	; (8012aa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8012a66:	4810      	ldr	r0, [pc, #64]	; (8012aa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8012a68:	f005 f880 	bl	8017b6c <__aeabi_atexit>
 8012a6c:	4c0f      	ldr	r4, [pc, #60]	; (8012aac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8012a6e:	7823      	ldrb	r3, [r4, #0]
 8012a70:	f3bf 8f5b 	dmb	ish
 8012a74:	07db      	lsls	r3, r3, #31
 8012a76:	d40b      	bmi.n	8012a90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f005 f87e 	bl	8017b7a <__cxa_guard_acquire>
 8012a7e:	b138      	cbz	r0, 8012a90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8012a80:	4620      	mov	r0, r4
 8012a82:	f005 f886 	bl	8017b92 <__cxa_guard_release>
 8012a86:	4a06      	ldr	r2, [pc, #24]	; (8012aa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8012a88:	4909      	ldr	r1, [pc, #36]	; (8012ab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8012a8a:	480a      	ldr	r0, [pc, #40]	; (8012ab4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8012a8c:	f005 f86e 	bl	8017b6c <__aeabi_atexit>
 8012a90:	4b05      	ldr	r3, [pc, #20]	; (8012aa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8012a92:	612b      	str	r3, [r5, #16]
 8012a94:	4b07      	ldr	r3, [pc, #28]	; (8012ab4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8012a96:	616b      	str	r3, [r5, #20]
 8012a98:	bd38      	pop	{r3, r4, r5, pc}
 8012a9a:	bf00      	nop
 8012a9c:	2400aed0 	.word	0x2400aed0
 8012aa0:	24000000 	.word	0x24000000
 8012aa4:	08011609 	.word	0x08011609
 8012aa8:	24000094 	.word	0x24000094
 8012aac:	2400aed4 	.word	0x2400aed4
 8012ab0:	08011607 	.word	0x08011607
 8012ab4:	24000098 	.word	0x24000098

08012ab8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	4c15      	ldr	r4, [pc, #84]	; (8012b10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8012abc:	4605      	mov	r5, r0
 8012abe:	7823      	ldrb	r3, [r4, #0]
 8012ac0:	f3bf 8f5b 	dmb	ish
 8012ac4:	07da      	lsls	r2, r3, #31
 8012ac6:	d40b      	bmi.n	8012ae0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f005 f856 	bl	8017b7a <__cxa_guard_acquire>
 8012ace:	b138      	cbz	r0, 8012ae0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f005 f85e 	bl	8017b92 <__cxa_guard_release>
 8012ad6:	4a0f      	ldr	r2, [pc, #60]	; (8012b14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8012ad8:	490f      	ldr	r1, [pc, #60]	; (8012b18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8012ada:	4810      	ldr	r0, [pc, #64]	; (8012b1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8012adc:	f005 f846 	bl	8017b6c <__aeabi_atexit>
 8012ae0:	4c0f      	ldr	r4, [pc, #60]	; (8012b20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8012ae2:	7823      	ldrb	r3, [r4, #0]
 8012ae4:	f3bf 8f5b 	dmb	ish
 8012ae8:	07db      	lsls	r3, r3, #31
 8012aea:	d40b      	bmi.n	8012b04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8012aec:	4620      	mov	r0, r4
 8012aee:	f005 f844 	bl	8017b7a <__cxa_guard_acquire>
 8012af2:	b138      	cbz	r0, 8012b04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8012af4:	4620      	mov	r0, r4
 8012af6:	f005 f84c 	bl	8017b92 <__cxa_guard_release>
 8012afa:	4a06      	ldr	r2, [pc, #24]	; (8012b14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8012afc:	4909      	ldr	r1, [pc, #36]	; (8012b24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8012afe:	480a      	ldr	r0, [pc, #40]	; (8012b28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8012b00:	f005 f834 	bl	8017b6c <__aeabi_atexit>
 8012b04:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8012b06:	60ab      	str	r3, [r5, #8]
 8012b08:	4b07      	ldr	r3, [pc, #28]	; (8012b28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8012b0a:	60eb      	str	r3, [r5, #12]
 8012b0c:	bd38      	pop	{r3, r4, r5, pc}
 8012b0e:	bf00      	nop
 8012b10:	2400aeb0 	.word	0x2400aeb0
 8012b14:	24000000 	.word	0x24000000
 8012b18:	0801160d 	.word	0x0801160d
 8012b1c:	24000074 	.word	0x24000074
 8012b20:	2400aeb4 	.word	0x2400aeb4
 8012b24:	0801160b 	.word	0x0801160b
 8012b28:	24000078 	.word	0x24000078

08012b2c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8012b2c:	b510      	push	{r4, lr}
 8012b2e:	4604      	mov	r4, r0
 8012b30:	f7ff ff88 	bl	8012a44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8012b34:	4620      	mov	r0, r4
 8012b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b3a:	f7ff bfbd 	b.w	8012ab8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08012b40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4c15      	ldr	r4, [pc, #84]	; (8012b98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8012b44:	4605      	mov	r5, r0
 8012b46:	7823      	ldrb	r3, [r4, #0]
 8012b48:	f3bf 8f5b 	dmb	ish
 8012b4c:	07da      	lsls	r2, r3, #31
 8012b4e:	d40b      	bmi.n	8012b68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8012b50:	4620      	mov	r0, r4
 8012b52:	f005 f812 	bl	8017b7a <__cxa_guard_acquire>
 8012b56:	b138      	cbz	r0, 8012b68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f005 f81a 	bl	8017b92 <__cxa_guard_release>
 8012b5e:	4a0f      	ldr	r2, [pc, #60]	; (8012b9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8012b60:	490f      	ldr	r1, [pc, #60]	; (8012ba0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8012b62:	4810      	ldr	r0, [pc, #64]	; (8012ba4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8012b64:	f005 f802 	bl	8017b6c <__aeabi_atexit>
 8012b68:	4c0f      	ldr	r4, [pc, #60]	; (8012ba8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8012b6a:	7823      	ldrb	r3, [r4, #0]
 8012b6c:	f3bf 8f5b 	dmb	ish
 8012b70:	07db      	lsls	r3, r3, #31
 8012b72:	d40b      	bmi.n	8012b8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8012b74:	4620      	mov	r0, r4
 8012b76:	f005 f800 	bl	8017b7a <__cxa_guard_acquire>
 8012b7a:	b138      	cbz	r0, 8012b8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f005 f808 	bl	8017b92 <__cxa_guard_release>
 8012b82:	4a06      	ldr	r2, [pc, #24]	; (8012b9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8012b84:	4909      	ldr	r1, [pc, #36]	; (8012bac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8012b86:	480a      	ldr	r0, [pc, #40]	; (8012bb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8012b88:	f004 fff0 	bl	8017b6c <__aeabi_atexit>
 8012b8c:	4b05      	ldr	r3, [pc, #20]	; (8012ba4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8012b8e:	622b      	str	r3, [r5, #32]
 8012b90:	4b07      	ldr	r3, [pc, #28]	; (8012bb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8012b92:	626b      	str	r3, [r5, #36]	; 0x24
 8012b94:	bd38      	pop	{r3, r4, r5, pc}
 8012b96:	bf00      	nop
 8012b98:	2400aed8 	.word	0x2400aed8
 8012b9c:	24000000 	.word	0x24000000
 8012ba0:	08011601 	.word	0x08011601
 8012ba4:	2400009c 	.word	0x2400009c
 8012ba8:	2400aedc 	.word	0x2400aedc
 8012bac:	080115ff 	.word	0x080115ff
 8012bb0:	240000a0 	.word	0x240000a0

08012bb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	4c15      	ldr	r4, [pc, #84]	; (8012c0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8012bb8:	4605      	mov	r5, r0
 8012bba:	7823      	ldrb	r3, [r4, #0]
 8012bbc:	f3bf 8f5b 	dmb	ish
 8012bc0:	07da      	lsls	r2, r3, #31
 8012bc2:	d40b      	bmi.n	8012bdc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f004 ffd8 	bl	8017b7a <__cxa_guard_acquire>
 8012bca:	b138      	cbz	r0, 8012bdc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f004 ffe0 	bl	8017b92 <__cxa_guard_release>
 8012bd2:	4a0f      	ldr	r2, [pc, #60]	; (8012c10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8012bd4:	490f      	ldr	r1, [pc, #60]	; (8012c14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8012bd6:	4810      	ldr	r0, [pc, #64]	; (8012c18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8012bd8:	f004 ffc8 	bl	8017b6c <__aeabi_atexit>
 8012bdc:	4c0f      	ldr	r4, [pc, #60]	; (8012c1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8012bde:	7823      	ldrb	r3, [r4, #0]
 8012be0:	f3bf 8f5b 	dmb	ish
 8012be4:	07db      	lsls	r3, r3, #31
 8012be6:	d40b      	bmi.n	8012c00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8012be8:	4620      	mov	r0, r4
 8012bea:	f004 ffc6 	bl	8017b7a <__cxa_guard_acquire>
 8012bee:	b138      	cbz	r0, 8012c00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f004 ffce 	bl	8017b92 <__cxa_guard_release>
 8012bf6:	4a06      	ldr	r2, [pc, #24]	; (8012c10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8012bf8:	4909      	ldr	r1, [pc, #36]	; (8012c20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8012bfa:	480a      	ldr	r0, [pc, #40]	; (8012c24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8012bfc:	f004 ffb6 	bl	8017b6c <__aeabi_atexit>
 8012c00:	4b05      	ldr	r3, [pc, #20]	; (8012c18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8012c02:	61ab      	str	r3, [r5, #24]
 8012c04:	4b07      	ldr	r3, [pc, #28]	; (8012c24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8012c06:	61eb      	str	r3, [r5, #28]
 8012c08:	bd38      	pop	{r3, r4, r5, pc}
 8012c0a:	bf00      	nop
 8012c0c:	2400aeb8 	.word	0x2400aeb8
 8012c10:	24000000 	.word	0x24000000
 8012c14:	08011605 	.word	0x08011605
 8012c18:	2400007c 	.word	0x2400007c
 8012c1c:	2400aebc 	.word	0x2400aebc
 8012c20:	08011603 	.word	0x08011603
 8012c24:	24000080 	.word	0x24000080

08012c28 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8012c28:	b510      	push	{r4, lr}
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	f7ff ff88 	bl	8012b40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8012c30:	4620      	mov	r0, r4
 8012c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c36:	f7ff bfbd 	b.w	8012bb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08012c3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8012c3c:	b538      	push	{r3, r4, r5, lr}
 8012c3e:	4c15      	ldr	r4, [pc, #84]	; (8012c94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8012c40:	4605      	mov	r5, r0
 8012c42:	7823      	ldrb	r3, [r4, #0]
 8012c44:	f3bf 8f5b 	dmb	ish
 8012c48:	07da      	lsls	r2, r3, #31
 8012c4a:	d40b      	bmi.n	8012c64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f004 ff94 	bl	8017b7a <__cxa_guard_acquire>
 8012c52:	b138      	cbz	r0, 8012c64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8012c54:	4620      	mov	r0, r4
 8012c56:	f004 ff9c 	bl	8017b92 <__cxa_guard_release>
 8012c5a:	4a0f      	ldr	r2, [pc, #60]	; (8012c98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8012c5c:	490f      	ldr	r1, [pc, #60]	; (8012c9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8012c5e:	4810      	ldr	r0, [pc, #64]	; (8012ca0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8012c60:	f004 ff84 	bl	8017b6c <__aeabi_atexit>
 8012c64:	4c0f      	ldr	r4, [pc, #60]	; (8012ca4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8012c66:	7823      	ldrb	r3, [r4, #0]
 8012c68:	f3bf 8f5b 	dmb	ish
 8012c6c:	07db      	lsls	r3, r3, #31
 8012c6e:	d40b      	bmi.n	8012c88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8012c70:	4620      	mov	r0, r4
 8012c72:	f004 ff82 	bl	8017b7a <__cxa_guard_acquire>
 8012c76:	b138      	cbz	r0, 8012c88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8012c78:	4620      	mov	r0, r4
 8012c7a:	f004 ff8a 	bl	8017b92 <__cxa_guard_release>
 8012c7e:	4a06      	ldr	r2, [pc, #24]	; (8012c98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8012c80:	4909      	ldr	r1, [pc, #36]	; (8012ca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8012c82:	480a      	ldr	r0, [pc, #40]	; (8012cac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8012c84:	f004 ff72 	bl	8017b6c <__aeabi_atexit>
 8012c88:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8012c8a:	632b      	str	r3, [r5, #48]	; 0x30
 8012c8c:	4b07      	ldr	r3, [pc, #28]	; (8012cac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8012c8e:	636b      	str	r3, [r5, #52]	; 0x34
 8012c90:	bd38      	pop	{r3, r4, r5, pc}
 8012c92:	bf00      	nop
 8012c94:	2400aec0 	.word	0x2400aec0
 8012c98:	24000000 	.word	0x24000000
 8012c9c:	080115f9 	.word	0x080115f9
 8012ca0:	24000084 	.word	0x24000084
 8012ca4:	2400aec4 	.word	0x2400aec4
 8012ca8:	080115f7 	.word	0x080115f7
 8012cac:	24000088 	.word	0x24000088

08012cb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8012cb0:	b538      	push	{r3, r4, r5, lr}
 8012cb2:	4c15      	ldr	r4, [pc, #84]	; (8012d08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8012cb4:	4605      	mov	r5, r0
 8012cb6:	7823      	ldrb	r3, [r4, #0]
 8012cb8:	f3bf 8f5b 	dmb	ish
 8012cbc:	07da      	lsls	r2, r3, #31
 8012cbe:	d40b      	bmi.n	8012cd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f004 ff5a 	bl	8017b7a <__cxa_guard_acquire>
 8012cc6:	b138      	cbz	r0, 8012cd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f004 ff62 	bl	8017b92 <__cxa_guard_release>
 8012cce:	4a0f      	ldr	r2, [pc, #60]	; (8012d0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8012cd0:	490f      	ldr	r1, [pc, #60]	; (8012d10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8012cd2:	4810      	ldr	r0, [pc, #64]	; (8012d14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8012cd4:	f004 ff4a 	bl	8017b6c <__aeabi_atexit>
 8012cd8:	4c0f      	ldr	r4, [pc, #60]	; (8012d18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8012cda:	7823      	ldrb	r3, [r4, #0]
 8012cdc:	f3bf 8f5b 	dmb	ish
 8012ce0:	07db      	lsls	r3, r3, #31
 8012ce2:	d40b      	bmi.n	8012cfc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f004 ff48 	bl	8017b7a <__cxa_guard_acquire>
 8012cea:	b138      	cbz	r0, 8012cfc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8012cec:	4620      	mov	r0, r4
 8012cee:	f004 ff50 	bl	8017b92 <__cxa_guard_release>
 8012cf2:	4a06      	ldr	r2, [pc, #24]	; (8012d0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8012cf4:	4909      	ldr	r1, [pc, #36]	; (8012d1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8012cf6:	480a      	ldr	r0, [pc, #40]	; (8012d20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8012cf8:	f004 ff38 	bl	8017b6c <__aeabi_atexit>
 8012cfc:	4b05      	ldr	r3, [pc, #20]	; (8012d14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8012cfe:	62ab      	str	r3, [r5, #40]	; 0x28
 8012d00:	4b07      	ldr	r3, [pc, #28]	; (8012d20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8012d02:	62eb      	str	r3, [r5, #44]	; 0x2c
 8012d04:	bd38      	pop	{r3, r4, r5, pc}
 8012d06:	bf00      	nop
 8012d08:	2400ae98 	.word	0x2400ae98
 8012d0c:	24000000 	.word	0x24000000
 8012d10:	080115fd 	.word	0x080115fd
 8012d14:	2400005c 	.word	0x2400005c
 8012d18:	2400ae9c 	.word	0x2400ae9c
 8012d1c:	080115fb 	.word	0x080115fb
 8012d20:	24000060 	.word	0x24000060

08012d24 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8012d24:	b510      	push	{r4, lr}
 8012d26:	4604      	mov	r4, r0
 8012d28:	f7ff ff88 	bl	8012c3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d32:	f7ff bfbd 	b.w	8012cb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08012d38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8012d38:	b538      	push	{r3, r4, r5, lr}
 8012d3a:	4c15      	ldr	r4, [pc, #84]	; (8012d90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8012d3c:	4605      	mov	r5, r0
 8012d3e:	7823      	ldrb	r3, [r4, #0]
 8012d40:	f3bf 8f5b 	dmb	ish
 8012d44:	07da      	lsls	r2, r3, #31
 8012d46:	d40b      	bmi.n	8012d60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f004 ff16 	bl	8017b7a <__cxa_guard_acquire>
 8012d4e:	b138      	cbz	r0, 8012d60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8012d50:	4620      	mov	r0, r4
 8012d52:	f004 ff1e 	bl	8017b92 <__cxa_guard_release>
 8012d56:	4a0f      	ldr	r2, [pc, #60]	; (8012d94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8012d58:	490f      	ldr	r1, [pc, #60]	; (8012d98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8012d5a:	4810      	ldr	r0, [pc, #64]	; (8012d9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8012d5c:	f004 ff06 	bl	8017b6c <__aeabi_atexit>
 8012d60:	4c0f      	ldr	r4, [pc, #60]	; (8012da0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8012d62:	7823      	ldrb	r3, [r4, #0]
 8012d64:	f3bf 8f5b 	dmb	ish
 8012d68:	07db      	lsls	r3, r3, #31
 8012d6a:	d40b      	bmi.n	8012d84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f004 ff04 	bl	8017b7a <__cxa_guard_acquire>
 8012d72:	b138      	cbz	r0, 8012d84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8012d74:	4620      	mov	r0, r4
 8012d76:	f004 ff0c 	bl	8017b92 <__cxa_guard_release>
 8012d7a:	4a06      	ldr	r2, [pc, #24]	; (8012d94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8012d7c:	4909      	ldr	r1, [pc, #36]	; (8012da4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8012d7e:	480a      	ldr	r0, [pc, #40]	; (8012da8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8012d80:	f004 fef4 	bl	8017b6c <__aeabi_atexit>
 8012d84:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8012d86:	642b      	str	r3, [r5, #64]	; 0x40
 8012d88:	4b07      	ldr	r3, [pc, #28]	; (8012da8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8012d8a:	646b      	str	r3, [r5, #68]	; 0x44
 8012d8c:	bd38      	pop	{r3, r4, r5, pc}
 8012d8e:	bf00      	nop
 8012d90:	2400aec8 	.word	0x2400aec8
 8012d94:	24000000 	.word	0x24000000
 8012d98:	080115f1 	.word	0x080115f1
 8012d9c:	2400008c 	.word	0x2400008c
 8012da0:	2400aecc 	.word	0x2400aecc
 8012da4:	080115ef 	.word	0x080115ef
 8012da8:	24000090 	.word	0x24000090

08012dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	4c15      	ldr	r4, [pc, #84]	; (8012e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8012db0:	4605      	mov	r5, r0
 8012db2:	7823      	ldrb	r3, [r4, #0]
 8012db4:	f3bf 8f5b 	dmb	ish
 8012db8:	07da      	lsls	r2, r3, #31
 8012dba:	d40b      	bmi.n	8012dd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f004 fedc 	bl	8017b7a <__cxa_guard_acquire>
 8012dc2:	b138      	cbz	r0, 8012dd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f004 fee4 	bl	8017b92 <__cxa_guard_release>
 8012dca:	4a0f      	ldr	r2, [pc, #60]	; (8012e08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8012dcc:	490f      	ldr	r1, [pc, #60]	; (8012e0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8012dce:	4810      	ldr	r0, [pc, #64]	; (8012e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8012dd0:	f004 fecc 	bl	8017b6c <__aeabi_atexit>
 8012dd4:	4c0f      	ldr	r4, [pc, #60]	; (8012e14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8012dd6:	7823      	ldrb	r3, [r4, #0]
 8012dd8:	f3bf 8f5b 	dmb	ish
 8012ddc:	07db      	lsls	r3, r3, #31
 8012dde:	d40b      	bmi.n	8012df8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8012de0:	4620      	mov	r0, r4
 8012de2:	f004 feca 	bl	8017b7a <__cxa_guard_acquire>
 8012de6:	b138      	cbz	r0, 8012df8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8012de8:	4620      	mov	r0, r4
 8012dea:	f004 fed2 	bl	8017b92 <__cxa_guard_release>
 8012dee:	4a06      	ldr	r2, [pc, #24]	; (8012e08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8012df0:	4909      	ldr	r1, [pc, #36]	; (8012e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8012df2:	480a      	ldr	r0, [pc, #40]	; (8012e1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8012df4:	f004 feba 	bl	8017b6c <__aeabi_atexit>
 8012df8:	4b05      	ldr	r3, [pc, #20]	; (8012e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8012dfa:	63ab      	str	r3, [r5, #56]	; 0x38
 8012dfc:	4b07      	ldr	r3, [pc, #28]	; (8012e1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8012dfe:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012e00:	bd38      	pop	{r3, r4, r5, pc}
 8012e02:	bf00      	nop
 8012e04:	2400aea8 	.word	0x2400aea8
 8012e08:	24000000 	.word	0x24000000
 8012e0c:	080115f5 	.word	0x080115f5
 8012e10:	2400006c 	.word	0x2400006c
 8012e14:	2400aeac 	.word	0x2400aeac
 8012e18:	080115f3 	.word	0x080115f3
 8012e1c:	24000070 	.word	0x24000070

08012e20 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8012e20:	b510      	push	{r4, lr}
 8012e22:	4604      	mov	r4, r0
 8012e24:	f7ff ff88 	bl	8012d38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8012e28:	4620      	mov	r0, r4
 8012e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e2e:	f7ff bfbd 	b.w	8012dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08012e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8012e34:	b538      	push	{r3, r4, r5, lr}
 8012e36:	4c15      	ldr	r4, [pc, #84]	; (8012e8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8012e38:	4605      	mov	r5, r0
 8012e3a:	7823      	ldrb	r3, [r4, #0]
 8012e3c:	f3bf 8f5b 	dmb	ish
 8012e40:	07da      	lsls	r2, r3, #31
 8012e42:	d40b      	bmi.n	8012e5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8012e44:	4620      	mov	r0, r4
 8012e46:	f004 fe98 	bl	8017b7a <__cxa_guard_acquire>
 8012e4a:	b138      	cbz	r0, 8012e5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f004 fea0 	bl	8017b92 <__cxa_guard_release>
 8012e52:	4a0f      	ldr	r2, [pc, #60]	; (8012e90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8012e54:	490f      	ldr	r1, [pc, #60]	; (8012e94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8012e56:	4810      	ldr	r0, [pc, #64]	; (8012e98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8012e58:	f004 fe88 	bl	8017b6c <__aeabi_atexit>
 8012e5c:	4c0f      	ldr	r4, [pc, #60]	; (8012e9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8012e5e:	7823      	ldrb	r3, [r4, #0]
 8012e60:	f3bf 8f5b 	dmb	ish
 8012e64:	07db      	lsls	r3, r3, #31
 8012e66:	d40b      	bmi.n	8012e80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f004 fe86 	bl	8017b7a <__cxa_guard_acquire>
 8012e6e:	b138      	cbz	r0, 8012e80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8012e70:	4620      	mov	r0, r4
 8012e72:	f004 fe8e 	bl	8017b92 <__cxa_guard_release>
 8012e76:	4a06      	ldr	r2, [pc, #24]	; (8012e90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8012e78:	4909      	ldr	r1, [pc, #36]	; (8012ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8012e7a:	480a      	ldr	r0, [pc, #40]	; (8012ea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8012e7c:	f004 fe76 	bl	8017b6c <__aeabi_atexit>
 8012e80:	4b05      	ldr	r3, [pc, #20]	; (8012e98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8012e82:	652b      	str	r3, [r5, #80]	; 0x50
 8012e84:	4b07      	ldr	r3, [pc, #28]	; (8012ea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8012e86:	656b      	str	r3, [r5, #84]	; 0x54
 8012e88:	bd38      	pop	{r3, r4, r5, pc}
 8012e8a:	bf00      	nop
 8012e8c:	2400aea0 	.word	0x2400aea0
 8012e90:	24000000 	.word	0x24000000
 8012e94:	080115e9 	.word	0x080115e9
 8012e98:	24000064 	.word	0x24000064
 8012e9c:	2400aea4 	.word	0x2400aea4
 8012ea0:	080115e7 	.word	0x080115e7
 8012ea4:	24000068 	.word	0x24000068

08012ea8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8012ea8:	b538      	push	{r3, r4, r5, lr}
 8012eaa:	4c15      	ldr	r4, [pc, #84]	; (8012f00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8012eac:	4605      	mov	r5, r0
 8012eae:	7823      	ldrb	r3, [r4, #0]
 8012eb0:	f3bf 8f5b 	dmb	ish
 8012eb4:	07da      	lsls	r2, r3, #31
 8012eb6:	d40b      	bmi.n	8012ed0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f004 fe5e 	bl	8017b7a <__cxa_guard_acquire>
 8012ebe:	b138      	cbz	r0, 8012ed0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f004 fe66 	bl	8017b92 <__cxa_guard_release>
 8012ec6:	4a0f      	ldr	r2, [pc, #60]	; (8012f04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8012ec8:	490f      	ldr	r1, [pc, #60]	; (8012f08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8012eca:	4810      	ldr	r0, [pc, #64]	; (8012f0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8012ecc:	f004 fe4e 	bl	8017b6c <__aeabi_atexit>
 8012ed0:	4c0f      	ldr	r4, [pc, #60]	; (8012f10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8012ed2:	7823      	ldrb	r3, [r4, #0]
 8012ed4:	f3bf 8f5b 	dmb	ish
 8012ed8:	07db      	lsls	r3, r3, #31
 8012eda:	d40b      	bmi.n	8012ef4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8012edc:	4620      	mov	r0, r4
 8012ede:	f004 fe4c 	bl	8017b7a <__cxa_guard_acquire>
 8012ee2:	b138      	cbz	r0, 8012ef4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f004 fe54 	bl	8017b92 <__cxa_guard_release>
 8012eea:	4a06      	ldr	r2, [pc, #24]	; (8012f04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8012eec:	4909      	ldr	r1, [pc, #36]	; (8012f14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8012eee:	480a      	ldr	r0, [pc, #40]	; (8012f18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8012ef0:	f004 fe3c 	bl	8017b6c <__aeabi_atexit>
 8012ef4:	4b05      	ldr	r3, [pc, #20]	; (8012f0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8012ef6:	64ab      	str	r3, [r5, #72]	; 0x48
 8012ef8:	4b07      	ldr	r3, [pc, #28]	; (8012f18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8012efa:	64eb      	str	r3, [r5, #76]	; 0x4c
 8012efc:	bd38      	pop	{r3, r4, r5, pc}
 8012efe:	bf00      	nop
 8012f00:	2400ae90 	.word	0x2400ae90
 8012f04:	24000000 	.word	0x24000000
 8012f08:	080115ed 	.word	0x080115ed
 8012f0c:	24000054 	.word	0x24000054
 8012f10:	2400ae94 	.word	0x2400ae94
 8012f14:	080115eb 	.word	0x080115eb
 8012f18:	24000058 	.word	0x24000058

08012f1c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8012f1c:	b510      	push	{r4, lr}
 8012f1e:	4604      	mov	r4, r0
 8012f20:	f7ff ff88 	bl	8012e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8012f24:	4620      	mov	r0, r4
 8012f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f2a:	f7ff bfbd 	b.w	8012ea8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08012f2e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8012f2e:	b510      	push	{r4, lr}
 8012f30:	4604      	mov	r4, r0
 8012f32:	f7ff fff3 	bl	8012f1c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8012f36:	4620      	mov	r0, r4
 8012f38:	f7ff ff72 	bl	8012e20 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f7ff fe73 	bl	8012c28 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8012f42:	4620      	mov	r0, r4
 8012f44:	f7ff fdf2 	bl	8012b2c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8012f48:	4620      	mov	r0, r4
 8012f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f4e:	f7ff bee9 	b.w	8012d24 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08012f52 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8012f52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f56:	b087      	sub	sp, #28
 8012f58:	788d      	ldrb	r5, [r1, #2]
 8012f5a:	f891 9000 	ldrb.w	r9, [r1]
 8012f5e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8012f62:	9501      	str	r5, [sp, #4]
 8012f64:	784d      	ldrb	r5, [r1, #1]
 8012f66:	9203      	str	r2, [sp, #12]
 8012f68:	9502      	str	r5, [sp, #8]
 8012f6a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8012f6e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8012f72:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012f76:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8012f7a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8012f7e:	fb06 0708 	mla	r7, r6, r8, r0
 8012f82:	2e00      	cmp	r6, #0
 8012f84:	eb02 0a07 	add.w	sl, r2, r7
 8012f88:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8012f8c:	9d01      	ldr	r5, [sp, #4]
 8012f8e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8012f92:	ea45 0509 	orr.w	r5, r5, r9
 8012f96:	9505      	str	r5, [sp, #20]
 8012f98:	f2c0 80b2 	blt.w	8013100 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8012f9c:	45b3      	cmp	fp, r6
 8012f9e:	f340 80af 	ble.w	8013100 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	f2c0 80aa 	blt.w	80130fc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8012fa8:	4580      	cmp	r8, r0
 8012faa:	f340 80a7 	ble.w	80130fc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8012fae:	9a03      	ldr	r2, [sp, #12]
 8012fb0:	5dd7      	ldrb	r7, [r2, r7]
 8012fb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012fb6:	441f      	add	r7, r3
 8012fb8:	1c42      	adds	r2, r0, #1
 8012fba:	f100 80a4 	bmi.w	8013106 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012fbe:	4590      	cmp	r8, r2
 8012fc0:	f340 80a1 	ble.w	8013106 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012fc4:	2c00      	cmp	r4, #0
 8012fc6:	f000 809e 	beq.w	8013106 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012fca:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8012fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012fd2:	441d      	add	r5, r3
 8012fd4:	3601      	adds	r6, #1
 8012fd6:	f100 809a 	bmi.w	801310e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8012fda:	45b3      	cmp	fp, r6
 8012fdc:	f340 8097 	ble.w	801310e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8012fe0:	f1bc 0f00 	cmp.w	ip, #0
 8012fe4:	f000 8093 	beq.w	801310e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	f2c0 808e 	blt.w	801310a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8012fee:	4580      	cmp	r8, r0
 8012ff0:	f340 808b 	ble.w	801310a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8012ff4:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8012ff8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012ffc:	441e      	add	r6, r3
 8012ffe:	3001      	adds	r0, #1
 8013000:	f100 8088 	bmi.w	8013114 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013004:	4580      	cmp	r8, r0
 8013006:	f340 8085 	ble.w	8013114 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801300a:	2c00      	cmp	r4, #0
 801300c:	f000 8082 	beq.w	8013114 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013010:	44d0      	add	r8, sl
 8013012:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013016:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801301a:	4413      	add	r3, r2
 801301c:	b2a4      	uxth	r4, r4
 801301e:	f895 a000 	ldrb.w	sl, [r5]
 8013022:	fa1f fc8c 	uxth.w	ip, ip
 8013026:	fb04 fb0c 	mul.w	fp, r4, ip
 801302a:	0124      	lsls	r4, r4, #4
 801302c:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8013030:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8013034:	eba4 040b 	sub.w	r4, r4, fp
 8013038:	fa1f f08c 	uxth.w	r0, ip
 801303c:	b2a2      	uxth	r2, r4
 801303e:	783c      	ldrb	r4, [r7, #0]
 8013040:	eba8 0800 	sub.w	r8, r8, r0
 8013044:	fa1f fc8e 	uxth.w	ip, lr
 8013048:	fb02 fa0a 	mul.w	sl, r2, sl
 801304c:	ea6f 0e0e 	mvn.w	lr, lr
 8013050:	fa1f f888 	uxth.w	r8, r8
 8013054:	fa5f fe8e 	uxtb.w	lr, lr
 8013058:	fb08 aa04 	mla	sl, r8, r4, sl
 801305c:	7834      	ldrb	r4, [r6, #0]
 801305e:	fb19 f90e 	smulbb	r9, r9, lr
 8013062:	fb00 aa04 	mla	sl, r0, r4, sl
 8013066:	781c      	ldrb	r4, [r3, #0]
 8013068:	fb0b a404 	mla	r4, fp, r4, sl
 801306c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013070:	fb04 990c 	mla	r9, r4, ip, r9
 8013074:	fa1f f989 	uxth.w	r9, r9
 8013078:	f109 0401 	add.w	r4, r9, #1
 801307c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8013080:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013084:	f881 9000 	strb.w	r9, [r1]
 8013088:	f895 9001 	ldrb.w	r9, [r5, #1]
 801308c:	787c      	ldrb	r4, [r7, #1]
 801308e:	fb02 f909 	mul.w	r9, r2, r9
 8013092:	fb08 9904 	mla	r9, r8, r4, r9
 8013096:	7874      	ldrb	r4, [r6, #1]
 8013098:	fb00 9904 	mla	r9, r0, r4, r9
 801309c:	785c      	ldrb	r4, [r3, #1]
 801309e:	fb0b 9404 	mla	r4, fp, r4, r9
 80130a2:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80130a6:	9c02      	ldr	r4, [sp, #8]
 80130a8:	fb14 f90e 	smulbb	r9, r4, lr
 80130ac:	fb0a 940c 	mla	r4, sl, ip, r9
 80130b0:	b2a4      	uxth	r4, r4
 80130b2:	f104 0901 	add.w	r9, r4, #1
 80130b6:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80130ba:	1224      	asrs	r4, r4, #8
 80130bc:	704c      	strb	r4, [r1, #1]
 80130be:	78ad      	ldrb	r5, [r5, #2]
 80130c0:	78bc      	ldrb	r4, [r7, #2]
 80130c2:	436a      	muls	r2, r5
 80130c4:	789b      	ldrb	r3, [r3, #2]
 80130c6:	fb08 2204 	mla	r2, r8, r4, r2
 80130ca:	78b4      	ldrb	r4, [r6, #2]
 80130cc:	fb00 2004 	mla	r0, r0, r4, r2
 80130d0:	fb0b 0b03 	mla	fp, fp, r3, r0
 80130d4:	9b01      	ldr	r3, [sp, #4]
 80130d6:	fb13 fe0e 	smulbb	lr, r3, lr
 80130da:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80130de:	fb0b ec0c 	mla	ip, fp, ip, lr
 80130e2:	fa1f fc8c 	uxth.w	ip, ip
 80130e6:	f10c 0e01 	add.w	lr, ip, #1
 80130ea:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80130ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80130f2:	f881 c002 	strb.w	ip, [r1, #2]
 80130f6:	b007      	add	sp, #28
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	af05      	add	r7, sp, #20
 80130fe:	e75b      	b.n	8012fb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8013100:	ad05      	add	r5, sp, #20
 8013102:	462f      	mov	r7, r5
 8013104:	e766      	b.n	8012fd4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8013106:	ad05      	add	r5, sp, #20
 8013108:	e764      	b.n	8012fd4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801310a:	ae05      	add	r6, sp, #20
 801310c:	e777      	b.n	8012ffe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801310e:	ab05      	add	r3, sp, #20
 8013110:	461e      	mov	r6, r3
 8013112:	e783      	b.n	801301c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8013114:	ab05      	add	r3, sp, #20
 8013116:	e781      	b.n	801301c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08013118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801311c:	b093      	sub	sp, #76	; 0x4c
 801311e:	9210      	str	r2, [sp, #64]	; 0x40
 8013120:	9309      	str	r3, [sp, #36]	; 0x24
 8013122:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013124:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8013128:	9011      	str	r0, [sp, #68]	; 0x44
 801312a:	930e      	str	r3, [sp, #56]	; 0x38
 801312c:	6850      	ldr	r0, [r2, #4]
 801312e:	910d      	str	r1, [sp, #52]	; 0x34
 8013130:	6812      	ldr	r2, [r2, #0]
 8013132:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8013136:	fb00 1303 	mla	r3, r0, r3, r1
 801313a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801313e:	18d3      	adds	r3, r2, r3
 8013140:	930a      	str	r3, [sp, #40]	; 0x28
 8013142:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	930c      	str	r3, [sp, #48]	; 0x30
 8013148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801314a:	685c      	ldr	r4, [r3, #4]
 801314c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801314e:	3404      	adds	r4, #4
 8013150:	43db      	mvns	r3, r3
 8013152:	b2db      	uxtb	r3, r3
 8013154:	930b      	str	r3, [sp, #44]	; 0x2c
 8013156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013158:	2b00      	cmp	r3, #0
 801315a:	dc03      	bgt.n	8013164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801315c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801315e:	2b00      	cmp	r3, #0
 8013160:	f340 8250 	ble.w	8013604 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8013164:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013166:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801316a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801316e:	1e48      	subs	r0, r1, #1
 8013170:	1e55      	subs	r5, r2, #1
 8013172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013174:	2b00      	cmp	r3, #0
 8013176:	f340 80ee 	ble.w	8013356 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801317a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801317c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801317e:	1436      	asrs	r6, r6, #16
 8013180:	ea4f 4323 	mov.w	r3, r3, asr #16
 8013184:	d406      	bmi.n	8013194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013186:	4286      	cmp	r6, r0
 8013188:	da04      	bge.n	8013194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801318a:	2b00      	cmp	r3, #0
 801318c:	db02      	blt.n	8013194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801318e:	42ab      	cmp	r3, r5
 8013190:	f2c0 80e2 	blt.w	8013358 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8013194:	3601      	adds	r6, #1
 8013196:	f100 80cf 	bmi.w	8013338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801319a:	42b1      	cmp	r1, r6
 801319c:	f2c0 80cc 	blt.w	8013338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131a0:	3301      	adds	r3, #1
 80131a2:	f100 80c9 	bmi.w	8013338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131a6:	429a      	cmp	r2, r3
 80131a8:	f2c0 80c6 	blt.w	8013338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131ac:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80131b0:	f1bb 0f00 	cmp.w	fp, #0
 80131b4:	f340 80f1 	ble.w	801339a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80131b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80131ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80131bc:	9824      	ldr	r0, [sp, #144]	; 0x90
 80131be:	141d      	asrs	r5, r3, #16
 80131c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131c2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80131c6:	68c7      	ldr	r7, [r0, #12]
 80131c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80131ca:	1418      	asrs	r0, r3, #16
 80131cc:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80131d0:	6892      	ldr	r2, [r2, #8]
 80131d2:	f100 8137 	bmi.w	8013444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80131d6:	f102 3cff 	add.w	ip, r2, #4294967295
 80131da:	4560      	cmp	r0, ip
 80131dc:	f280 8132 	bge.w	8013444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80131e0:	2d00      	cmp	r5, #0
 80131e2:	f2c0 812f 	blt.w	8013444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80131e6:	f107 3cff 	add.w	ip, r7, #4294967295
 80131ea:	4565      	cmp	r5, ip
 80131ec:	f280 812a 	bge.w	8013444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80131f0:	b212      	sxth	r2, r2
 80131f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80131f4:	fb05 0002 	mla	r0, r5, r2, r0
 80131f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80131fa:	f817 c000 	ldrb.w	ip, [r7, r0]
 80131fe:	4405      	add	r5, r0
 8013200:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013204:	eb04 0e0c 	add.w	lr, r4, ip
 8013208:	f1b8 0f00 	cmp.w	r8, #0
 801320c:	f000 810c 	beq.w	8013428 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8013210:	786f      	ldrb	r7, [r5, #1]
 8013212:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013216:	4427      	add	r7, r4
 8013218:	2900      	cmp	r1, #0
 801321a:	f000 810d 	beq.w	8013438 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801321e:	18a8      	adds	r0, r5, r2
 8013220:	5caa      	ldrb	r2, [r5, r2]
 8013222:	7840      	ldrb	r0, [r0, #1]
 8013224:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013228:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801322c:	4422      	add	r2, r4
 801322e:	4420      	add	r0, r4
 8013230:	fa1f f388 	uxth.w	r3, r8
 8013234:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8013238:	b289      	uxth	r1, r1
 801323a:	f897 c000 	ldrb.w	ip, [r7]
 801323e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013242:	fb03 f901 	mul.w	r9, r3, r1
 8013246:	011b      	lsls	r3, r3, #4
 8013248:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801324c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8013250:	eba3 0309 	sub.w	r3, r3, r9
 8013254:	b289      	uxth	r1, r1
 8013256:	b29b      	uxth	r3, r3
 8013258:	eba8 0801 	sub.w	r8, r8, r1
 801325c:	fb03 fc0c 	mul.w	ip, r3, ip
 8013260:	fa1f f888 	uxth.w	r8, r8
 8013264:	930f      	str	r3, [sp, #60]	; 0x3c
 8013266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013268:	fb08 cc0a 	mla	ip, r8, sl, ip
 801326c:	f892 a000 	ldrb.w	sl, [r2]
 8013270:	fb01 cc0a 	mla	ip, r1, sl, ip
 8013274:	f890 a000 	ldrb.w	sl, [r0]
 8013278:	fb09 cc0a 	mla	ip, r9, sl, ip
 801327c:	f896 a000 	ldrb.w	sl, [r6]
 8013280:	fb1a fa03 	smulbb	sl, sl, r3
 8013284:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8013288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801328a:	fb0c ac05 	mla	ip, ip, r5, sl
 801328e:	fa1f fc8c 	uxth.w	ip, ip
 8013292:	f10c 0a01 	add.w	sl, ip, #1
 8013296:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801329a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801329e:	f886 a000 	strb.w	sl, [r6]
 80132a2:	f897 c001 	ldrb.w	ip, [r7, #1]
 80132a6:	f89e a001 	ldrb.w	sl, [lr, #1]
 80132aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80132ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132b0:	fb08 cc0a 	mla	ip, r8, sl, ip
 80132b4:	f892 a001 	ldrb.w	sl, [r2, #1]
 80132b8:	fb01 cc0a 	mla	ip, r1, sl, ip
 80132bc:	f890 a001 	ldrb.w	sl, [r0, #1]
 80132c0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80132c4:	f896 a001 	ldrb.w	sl, [r6, #1]
 80132c8:	fb1a fa03 	smulbb	sl, sl, r3
 80132cc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80132d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132d2:	fb0c ac05 	mla	ip, ip, r5, sl
 80132d6:	fa1f fc8c 	uxth.w	ip, ip
 80132da:	f10c 0a01 	add.w	sl, ip, #1
 80132de:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80132e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80132e6:	f886 c001 	strb.w	ip, [r6, #1]
 80132ea:	78bf      	ldrb	r7, [r7, #2]
 80132ec:	f89e c002 	ldrb.w	ip, [lr, #2]
 80132f0:	437b      	muls	r3, r7
 80132f2:	fb08 330c 	mla	r3, r8, ip, r3
 80132f6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80132fa:	7882      	ldrb	r2, [r0, #2]
 80132fc:	fb01 310c 	mla	r1, r1, ip, r3
 8013300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013302:	fb09 1902 	mla	r9, r9, r2, r1
 8013306:	78b1      	ldrb	r1, [r6, #2]
 8013308:	fb11 f103 	smulbb	r1, r1, r3
 801330c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8013310:	fb09 1505 	mla	r5, r9, r5, r1
 8013314:	b2ad      	uxth	r5, r5
 8013316:	1c6b      	adds	r3, r5, #1
 8013318:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801331c:	122d      	asrs	r5, r5, #8
 801331e:	70b5      	strb	r5, [r6, #2]
 8013320:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013322:	3603      	adds	r6, #3
 8013324:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013326:	f10b 3bff 	add.w	fp, fp, #4294967295
 801332a:	4413      	add	r3, r2
 801332c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801332e:	931d      	str	r3, [sp, #116]	; 0x74
 8013330:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013332:	4413      	add	r3, r2
 8013334:	931e      	str	r3, [sp, #120]	; 0x78
 8013336:	e73b      	b.n	80131b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013338:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801333a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801333c:	4433      	add	r3, r6
 801333e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013340:	931d      	str	r3, [sp, #116]	; 0x74
 8013342:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013344:	4433      	add	r3, r6
 8013346:	931e      	str	r3, [sp, #120]	; 0x78
 8013348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801334a:	3b01      	subs	r3, #1
 801334c:	9309      	str	r3, [sp, #36]	; 0x24
 801334e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013350:	3303      	adds	r3, #3
 8013352:	930a      	str	r3, [sp, #40]	; 0x28
 8013354:	e70d      	b.n	8013172 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8013356:	d028      	beq.n	80133aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8013358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801335a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801335c:	3b01      	subs	r3, #1
 801335e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8013360:	fb00 5003 	mla	r0, r0, r3, r5
 8013364:	1400      	asrs	r0, r0, #16
 8013366:	f53f af21 	bmi.w	80131ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801336a:	3901      	subs	r1, #1
 801336c:	4288      	cmp	r0, r1
 801336e:	f6bf af1d 	bge.w	80131ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8013372:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013374:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013376:	fb01 0303 	mla	r3, r1, r3, r0
 801337a:	141b      	asrs	r3, r3, #16
 801337c:	f53f af16 	bmi.w	80131ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8013380:	3a01      	subs	r2, #1
 8013382:	4293      	cmp	r3, r2
 8013384:	f6bf af12 	bge.w	80131ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8013388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801338a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801338e:	1cdf      	adds	r7, r3, #3
 8013390:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8013394:	f1b9 0f00 	cmp.w	r9, #0
 8013398:	dc73      	bgt.n	8013482 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801339a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801339c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801339e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80133a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80133a6:	441a      	add	r2, r3
 80133a8:	920a      	str	r2, [sp, #40]	; 0x28
 80133aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f340 8129 	ble.w	8013604 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80133b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80133b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80133b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80133bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80133c0:	eef0 6a62 	vmov.f32	s13, s5
 80133c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80133cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80133d0:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80133d4:	eef0 6a43 	vmov.f32	s13, s6
 80133d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80133dc:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80133e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80133e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80133e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80133ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80133f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80133f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80133f8:	ee12 2a90 	vmov	r2, s5
 80133fc:	eef0 2a47 	vmov.f32	s5, s14
 8013400:	fb92 f3f3 	sdiv	r3, r2, r3
 8013404:	ee13 2a10 	vmov	r2, s6
 8013408:	931f      	str	r3, [sp, #124]	; 0x7c
 801340a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801340c:	eeb0 3a67 	vmov.f32	s6, s15
 8013410:	fb92 f3f3 	sdiv	r3, r2, r3
 8013414:	9320      	str	r3, [sp, #128]	; 0x80
 8013416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013418:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801341a:	3b01      	subs	r3, #1
 801341c:	930d      	str	r3, [sp, #52]	; 0x34
 801341e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013420:	bf08      	it	eq
 8013422:	4613      	moveq	r3, r2
 8013424:	9309      	str	r3, [sp, #36]	; 0x24
 8013426:	e696      	b.n	8013156 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8013428:	b149      	cbz	r1, 801343e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801342a:	5caa      	ldrb	r2, [r5, r2]
 801342c:	4670      	mov	r0, lr
 801342e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013432:	4422      	add	r2, r4
 8013434:	4677      	mov	r7, lr
 8013436:	e6fb      	b.n	8013230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8013438:	4670      	mov	r0, lr
 801343a:	4672      	mov	r2, lr
 801343c:	e6f8      	b.n	8013230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801343e:	4670      	mov	r0, lr
 8013440:	4672      	mov	r2, lr
 8013442:	e7f7      	b.n	8013434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8013444:	f110 0c01 	adds.w	ip, r0, #1
 8013448:	f53f af6a 	bmi.w	8013320 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801344c:	4562      	cmp	r2, ip
 801344e:	f6ff af67 	blt.w	8013320 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8013452:	f115 0c01 	adds.w	ip, r5, #1
 8013456:	f53f af63 	bmi.w	8013320 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801345a:	4567      	cmp	r7, ip
 801345c:	f6ff af60 	blt.w	8013320 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8013460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013462:	b23f      	sxth	r7, r7
 8013464:	b212      	sxth	r2, r2
 8013466:	9002      	str	r0, [sp, #8]
 8013468:	9701      	str	r7, [sp, #4]
 801346a:	9200      	str	r2, [sp, #0]
 801346c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801346e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013470:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8013474:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8013478:	4623      	mov	r3, r4
 801347a:	4631      	mov	r1, r6
 801347c:	f7ff fd69 	bl	8012f52 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8013480:	e74e      	b.n	8013320 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8013482:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013484:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013486:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801348a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801348c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801348e:	1400      	asrs	r0, r0, #16
 8013490:	142d      	asrs	r5, r5, #16
 8013492:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013494:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8013498:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801349c:	fb02 5000 	mla	r0, r2, r0, r5
 80134a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134a2:	f815 e000 	ldrb.w	lr, [r5, r0]
 80134a6:	eb05 0c00 	add.w	ip, r5, r0
 80134aa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80134ae:	eb04 060e 	add.w	r6, r4, lr
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	f000 8097 	beq.w	80135e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80134b8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80134bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134c0:	4425      	add	r5, r4
 80134c2:	2900      	cmp	r1, #0
 80134c4:	f000 8098 	beq.w	80135f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80134c8:	eb0c 0002 	add.w	r0, ip, r2
 80134cc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80134d0:	7840      	ldrb	r0, [r0, #1]
 80134d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80134d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80134da:	4422      	add	r2, r4
 80134dc:	4420      	add	r0, r4
 80134de:	b29b      	uxth	r3, r3
 80134e0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80134e4:	b289      	uxth	r1, r1
 80134e6:	f895 e000 	ldrb.w	lr, [r5]
 80134ea:	3703      	adds	r7, #3
 80134ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80134f0:	fb03 f801 	mul.w	r8, r3, r1
 80134f4:	011b      	lsls	r3, r3, #4
 80134f6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80134fa:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80134fe:	eba3 0308 	sub.w	r3, r3, r8
 8013502:	b289      	uxth	r1, r1
 8013504:	b29b      	uxth	r3, r3
 8013506:	ebac 0c01 	sub.w	ip, ip, r1
 801350a:	fb03 fe0e 	mul.w	lr, r3, lr
 801350e:	fa1f fc8c 	uxth.w	ip, ip
 8013512:	930f      	str	r3, [sp, #60]	; 0x3c
 8013514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013516:	fb0c ee0b 	mla	lr, ip, fp, lr
 801351a:	f892 b000 	ldrb.w	fp, [r2]
 801351e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013522:	f890 b000 	ldrb.w	fp, [r0]
 8013526:	fb08 ee0b 	mla	lr, r8, fp, lr
 801352a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801352e:	fb1b fb03 	smulbb	fp, fp, r3
 8013532:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8013536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013538:	fb0e be0a 	mla	lr, lr, sl, fp
 801353c:	fa1f fe8e 	uxth.w	lr, lr
 8013540:	f10e 0b01 	add.w	fp, lr, #1
 8013544:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8013548:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801354c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8013550:	f895 e001 	ldrb.w	lr, [r5, #1]
 8013554:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013558:	fb03 fe0e 	mul.w	lr, r3, lr
 801355c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801355e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013562:	f892 b001 	ldrb.w	fp, [r2, #1]
 8013566:	fb01 ee0b 	mla	lr, r1, fp, lr
 801356a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801356e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8013572:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8013576:	fb1b fb03 	smulbb	fp, fp, r3
 801357a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801357e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013580:	fb0e be0a 	mla	lr, lr, sl, fp
 8013584:	fa1f fe8e 	uxth.w	lr, lr
 8013588:	f10e 0b01 	add.w	fp, lr, #1
 801358c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8013590:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013594:	f807 ec05 	strb.w	lr, [r7, #-5]
 8013598:	78ad      	ldrb	r5, [r5, #2]
 801359a:	78b6      	ldrb	r6, [r6, #2]
 801359c:	436b      	muls	r3, r5
 801359e:	7895      	ldrb	r5, [r2, #2]
 80135a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80135a2:	fb0c 3306 	mla	r3, ip, r6, r3
 80135a6:	fb01 3305 	mla	r3, r1, r5, r3
 80135aa:	7885      	ldrb	r5, [r0, #2]
 80135ac:	fb08 3805 	mla	r8, r8, r5, r3
 80135b0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80135b4:	fb13 f302 	smulbb	r3, r3, r2
 80135b8:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80135bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80135be:	fb08 380a 	mla	r8, r8, sl, r3
 80135c2:	fa1f f888 	uxth.w	r8, r8
 80135c6:	f108 0301 	add.w	r3, r8, #1
 80135ca:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80135ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80135d0:	4413      	add	r3, r2
 80135d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80135d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80135d8:	931d      	str	r3, [sp, #116]	; 0x74
 80135da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80135dc:	f807 8c04 	strb.w	r8, [r7, #-4]
 80135e0:	4413      	add	r3, r2
 80135e2:	931e      	str	r3, [sp, #120]	; 0x78
 80135e4:	e6d6      	b.n	8013394 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80135e6:	b151      	cbz	r1, 80135fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80135e8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80135ec:	4630      	mov	r0, r6
 80135ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80135f2:	4422      	add	r2, r4
 80135f4:	4635      	mov	r5, r6
 80135f6:	e772      	b.n	80134de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80135f8:	4630      	mov	r0, r6
 80135fa:	4632      	mov	r2, r6
 80135fc:	e76f      	b.n	80134de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80135fe:	4630      	mov	r0, r6
 8013600:	4632      	mov	r2, r6
 8013602:	e7f7      	b.n	80135f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8013604:	b013      	add	sp, #76	; 0x4c
 8013606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801360a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801360a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801360e:	784c      	ldrb	r4, [r1, #1]
 8013610:	f891 a002 	ldrb.w	sl, [r1, #2]
 8013614:	0224      	lsls	r4, r4, #8
 8013616:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801361a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801361e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013622:	f891 a000 	ldrb.w	sl, [r1]
 8013626:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801362a:	ea44 040a 	orr.w	r4, r4, sl
 801362e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8013632:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8013636:	9401      	str	r4, [sp, #4]
 8013638:	fb05 c70e 	mla	r7, r5, lr, ip
 801363c:	2d00      	cmp	r5, #0
 801363e:	eb02 0807 	add.w	r8, r2, r7
 8013642:	db72      	blt.n	801372a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8013644:	45a9      	cmp	r9, r5
 8013646:	dd70      	ble.n	801372a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8013648:	f1bc 0f00 	cmp.w	ip, #0
 801364c:	db6b      	blt.n	8013726 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801364e:	45e6      	cmp	lr, ip
 8013650:	dd69      	ble.n	8013726 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8013652:	5dd7      	ldrb	r7, [r2, r7]
 8013654:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013658:	441f      	add	r7, r3
 801365a:	f11c 0201 	adds.w	r2, ip, #1
 801365e:	d467      	bmi.n	8013730 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013660:	4596      	cmp	lr, r2
 8013662:	dd65      	ble.n	8013730 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013664:	2800      	cmp	r0, #0
 8013666:	d063      	beq.n	8013730 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013668:	f898 4001 	ldrb.w	r4, [r8, #1]
 801366c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013670:	441c      	add	r4, r3
 8013672:	3501      	adds	r5, #1
 8013674:	d460      	bmi.n	8013738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8013676:	45a9      	cmp	r9, r5
 8013678:	dd5e      	ble.n	8013738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801367a:	2e00      	cmp	r6, #0
 801367c:	d05c      	beq.n	8013738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801367e:	f1bc 0f00 	cmp.w	ip, #0
 8013682:	db57      	blt.n	8013734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8013684:	45e6      	cmp	lr, ip
 8013686:	dd55      	ble.n	8013734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8013688:	f818 500e 	ldrb.w	r5, [r8, lr]
 801368c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013690:	441d      	add	r5, r3
 8013692:	f11c 0201 	adds.w	r2, ip, #1
 8013696:	d452      	bmi.n	801373e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8013698:	4596      	cmp	lr, r2
 801369a:	dd50      	ble.n	801373e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801369c:	2800      	cmp	r0, #0
 801369e:	d04e      	beq.n	801373e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80136a0:	44c6      	add	lr, r8
 80136a2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80136a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80136aa:	4413      	add	r3, r2
 80136ac:	b280      	uxth	r0, r0
 80136ae:	f897 8000 	ldrb.w	r8, [r7]
 80136b2:	b2b2      	uxth	r2, r6
 80136b4:	fb00 f602 	mul.w	r6, r0, r2
 80136b8:	0100      	lsls	r0, r0, #4
 80136ba:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80136be:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 80136c2:	1b80      	subs	r0, r0, r6
 80136c4:	fa1f fc82 	uxth.w	ip, r2
 80136c8:	b282      	uxth	r2, r0
 80136ca:	7820      	ldrb	r0, [r4, #0]
 80136cc:	ebae 0e0c 	sub.w	lr, lr, ip
 80136d0:	4350      	muls	r0, r2
 80136d2:	fa1f fe8e 	uxth.w	lr, lr
 80136d6:	fb0e 0808 	mla	r8, lr, r8, r0
 80136da:	7828      	ldrb	r0, [r5, #0]
 80136dc:	fb0c 8800 	mla	r8, ip, r0, r8
 80136e0:	7818      	ldrb	r0, [r3, #0]
 80136e2:	fb06 8000 	mla	r0, r6, r0, r8
 80136e6:	1200      	asrs	r0, r0, #8
 80136e8:	7008      	strb	r0, [r1, #0]
 80136ea:	7860      	ldrb	r0, [r4, #1]
 80136ec:	f897 8001 	ldrb.w	r8, [r7, #1]
 80136f0:	4350      	muls	r0, r2
 80136f2:	fb0e 0808 	mla	r8, lr, r8, r0
 80136f6:	7868      	ldrb	r0, [r5, #1]
 80136f8:	fb0c 8800 	mla	r8, ip, r0, r8
 80136fc:	7858      	ldrb	r0, [r3, #1]
 80136fe:	fb06 8000 	mla	r0, r6, r0, r8
 8013702:	1200      	asrs	r0, r0, #8
 8013704:	7048      	strb	r0, [r1, #1]
 8013706:	78a0      	ldrb	r0, [r4, #2]
 8013708:	78bf      	ldrb	r7, [r7, #2]
 801370a:	4350      	muls	r0, r2
 801370c:	78aa      	ldrb	r2, [r5, #2]
 801370e:	fb0e 0007 	mla	r0, lr, r7, r0
 8013712:	fb0c 0c02 	mla	ip, ip, r2, r0
 8013716:	789a      	ldrb	r2, [r3, #2]
 8013718:	fb06 c202 	mla	r2, r6, r2, ip
 801371c:	1212      	asrs	r2, r2, #8
 801371e:	708a      	strb	r2, [r1, #2]
 8013720:	b002      	add	sp, #8
 8013722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013726:	af01      	add	r7, sp, #4
 8013728:	e797      	b.n	801365a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801372a:	ac01      	add	r4, sp, #4
 801372c:	4627      	mov	r7, r4
 801372e:	e7a0      	b.n	8013672 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8013730:	ac01      	add	r4, sp, #4
 8013732:	e79e      	b.n	8013672 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8013734:	ad01      	add	r5, sp, #4
 8013736:	e7ac      	b.n	8013692 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8013738:	ab01      	add	r3, sp, #4
 801373a:	461d      	mov	r5, r3
 801373c:	e7b6      	b.n	80136ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801373e:	ab01      	add	r3, sp, #4
 8013740:	e7b4      	b.n	80136ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08013742 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013746:	b08d      	sub	sp, #52	; 0x34
 8013748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801374c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8013750:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013752:	900b      	str	r0, [sp, #44]	; 0x2c
 8013754:	9306      	str	r3, [sp, #24]
 8013756:	6850      	ldr	r0, [r2, #4]
 8013758:	6812      	ldr	r2, [r2, #0]
 801375a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801375c:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8013760:	fb00 1303 	mla	r3, r0, r3, r1
 8013764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013768:	18d3      	adds	r3, r2, r3
 801376a:	9307      	str	r3, [sp, #28]
 801376c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	9308      	str	r3, [sp, #32]
 8013772:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013774:	685d      	ldr	r5, [r3, #4]
 8013776:	3504      	adds	r5, #4
 8013778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801377a:	2b00      	cmp	r3, #0
 801377c:	dc03      	bgt.n	8013786 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801377e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013780:	2b00      	cmp	r3, #0
 8013782:	f340 81e6 	ble.w	8013b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8013786:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013788:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801378c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013790:	1e48      	subs	r0, r1, #1
 8013792:	1e56      	subs	r6, r2, #1
 8013794:	9b06      	ldr	r3, [sp, #24]
 8013796:	2b00      	cmp	r3, #0
 8013798:	f340 80bd 	ble.w	8013916 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801379c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801379e:	1427      	asrs	r7, r4, #16
 80137a0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80137a4:	d406      	bmi.n	80137b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137a6:	4287      	cmp	r7, r0
 80137a8:	da04      	bge.n	80137b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	db02      	blt.n	80137b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137ae:	42b3      	cmp	r3, r6
 80137b0:	f2c0 80b2 	blt.w	8013918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80137b4:	3701      	adds	r7, #1
 80137b6:	f100 80a1 	bmi.w	80138fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137ba:	42b9      	cmp	r1, r7
 80137bc:	f2c0 809e 	blt.w	80138fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137c0:	3301      	adds	r3, #1
 80137c2:	f100 809b 	bmi.w	80138fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137c6:	429a      	cmp	r2, r3
 80137c8:	f2c0 8098 	blt.w	80138fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137cc:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80137d0:	f1bb 0f00 	cmp.w	fp, #0
 80137d4:	f340 80bf 	ble.w	8013956 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80137d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80137da:	981e      	ldr	r0, [sp, #120]	; 0x78
 80137dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80137de:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80137e2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80137e6:	1420      	asrs	r0, r4, #16
 80137e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80137ea:	ea4f 4723 	mov.w	r7, r3, asr #16
 80137ee:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80137f2:	6892      	ldr	r2, [r2, #8]
 80137f4:	f100 8103 	bmi.w	80139fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80137f8:	f102 3eff 	add.w	lr, r2, #4294967295
 80137fc:	4570      	cmp	r0, lr
 80137fe:	f280 80fe 	bge.w	80139fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013802:	2f00      	cmp	r7, #0
 8013804:	f2c0 80fb 	blt.w	80139fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013808:	f10c 3eff 	add.w	lr, ip, #4294967295
 801380c:	4577      	cmp	r7, lr
 801380e:	f280 80f6 	bge.w	80139fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013812:	b212      	sxth	r2, r2
 8013814:	fb07 0002 	mla	r0, r7, r2, r0
 8013818:	9f08      	ldr	r7, [sp, #32]
 801381a:	f817 8000 	ldrb.w	r8, [r7, r0]
 801381e:	eb07 0e00 	add.w	lr, r7, r0
 8013822:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013826:	eb05 0c08 	add.w	ip, r5, r8
 801382a:	2b00      	cmp	r3, #0
 801382c:	f000 80d8 	beq.w	80139e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8013830:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8013834:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013838:	442f      	add	r7, r5
 801383a:	2900      	cmp	r1, #0
 801383c:	f000 80d9 	beq.w	80139f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013840:	eb0e 0002 	add.w	r0, lr, r2
 8013844:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013848:	7840      	ldrb	r0, [r0, #1]
 801384a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801384e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013852:	442a      	add	r2, r5
 8013854:	4428      	add	r0, r5
 8013856:	b29b      	uxth	r3, r3
 8013858:	f815 a008 	ldrb.w	sl, [r5, r8]
 801385c:	b289      	uxth	r1, r1
 801385e:	f897 8000 	ldrb.w	r8, [r7]
 8013862:	fb03 f901 	mul.w	r9, r3, r1
 8013866:	011b      	lsls	r3, r3, #4
 8013868:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801386c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8013870:	eba3 0309 	sub.w	r3, r3, r9
 8013874:	b289      	uxth	r1, r1
 8013876:	b29b      	uxth	r3, r3
 8013878:	ebae 0e01 	sub.w	lr, lr, r1
 801387c:	fb03 f808 	mul.w	r8, r3, r8
 8013880:	fa1f fe8e 	uxth.w	lr, lr
 8013884:	fb0e 880a 	mla	r8, lr, sl, r8
 8013888:	f892 a000 	ldrb.w	sl, [r2]
 801388c:	fb01 880a 	mla	r8, r1, sl, r8
 8013890:	f890 a000 	ldrb.w	sl, [r0]
 8013894:	fb09 880a 	mla	r8, r9, sl, r8
 8013898:	ea4f 2828 	mov.w	r8, r8, asr #8
 801389c:	f886 8000 	strb.w	r8, [r6]
 80138a0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80138a4:	f89c a001 	ldrb.w	sl, [ip, #1]
 80138a8:	fb03 f808 	mul.w	r8, r3, r8
 80138ac:	fb0e 880a 	mla	r8, lr, sl, r8
 80138b0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80138b4:	fb01 880a 	mla	r8, r1, sl, r8
 80138b8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80138bc:	fb09 880a 	mla	r8, r9, sl, r8
 80138c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80138c4:	f886 8001 	strb.w	r8, [r6, #1]
 80138c8:	78bf      	ldrb	r7, [r7, #2]
 80138ca:	f89c c002 	ldrb.w	ip, [ip, #2]
 80138ce:	437b      	muls	r3, r7
 80138d0:	7892      	ldrb	r2, [r2, #2]
 80138d2:	fb0e 330c 	mla	r3, lr, ip, r3
 80138d6:	fb01 3102 	mla	r1, r1, r2, r3
 80138da:	7882      	ldrb	r2, [r0, #2]
 80138dc:	fb09 1902 	mla	r9, r9, r2, r1
 80138e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80138e4:	f886 9002 	strb.w	r9, [r6, #2]
 80138e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80138ea:	3603      	adds	r6, #3
 80138ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80138ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80138f2:	441c      	add	r4, r3
 80138f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80138f6:	4413      	add	r3, r2
 80138f8:	9318      	str	r3, [sp, #96]	; 0x60
 80138fa:	e769      	b.n	80137d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80138fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80138fe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8013900:	441c      	add	r4, r3
 8013902:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013904:	443b      	add	r3, r7
 8013906:	9318      	str	r3, [sp, #96]	; 0x60
 8013908:	9b06      	ldr	r3, [sp, #24]
 801390a:	3b01      	subs	r3, #1
 801390c:	9306      	str	r3, [sp, #24]
 801390e:	9b07      	ldr	r3, [sp, #28]
 8013910:	3303      	adds	r3, #3
 8013912:	9307      	str	r3, [sp, #28]
 8013914:	e73e      	b.n	8013794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8013916:	d026      	beq.n	8013966 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8013918:	9b06      	ldr	r3, [sp, #24]
 801391a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801391c:	3b01      	subs	r3, #1
 801391e:	fb00 4003 	mla	r0, r0, r3, r4
 8013922:	1400      	asrs	r0, r0, #16
 8013924:	f53f af52 	bmi.w	80137cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013928:	3901      	subs	r1, #1
 801392a:	4288      	cmp	r0, r1
 801392c:	f6bf af4e 	bge.w	80137cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013930:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013932:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013934:	fb01 0303 	mla	r3, r1, r3, r0
 8013938:	141b      	asrs	r3, r3, #16
 801393a:	f53f af47 	bmi.w	80137cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801393e:	3a01      	subs	r2, #1
 8013940:	4293      	cmp	r3, r2
 8013942:	f6bf af43 	bge.w	80137cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013946:	9b07      	ldr	r3, [sp, #28]
 8013948:	f8dd a018 	ldr.w	sl, [sp, #24]
 801394c:	f103 0803 	add.w	r8, r3, #3
 8013950:	f1ba 0f00 	cmp.w	sl, #0
 8013954:	dc71      	bgt.n	8013a3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8013956:	9b06      	ldr	r3, [sp, #24]
 8013958:	9a07      	ldr	r2, [sp, #28]
 801395a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801395e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013962:	441a      	add	r2, r3
 8013964:	9207      	str	r2, [sp, #28]
 8013966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013968:	2b00      	cmp	r3, #0
 801396a:	f340 80f2 	ble.w	8013b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801396e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013972:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013974:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013978:	eeb0 6a62 	vmov.f32	s12, s5
 801397c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013980:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013984:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013988:	ee16 4a10 	vmov	r4, s12
 801398c:	eeb0 6a43 	vmov.f32	s12, s6
 8013990:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013994:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8013998:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801399c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80139a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80139a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80139a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80139ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80139b0:	ee12 2a90 	vmov	r2, s5
 80139b4:	eef0 2a47 	vmov.f32	s5, s14
 80139b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139bc:	ee13 2a10 	vmov	r2, s6
 80139c0:	9319      	str	r3, [sp, #100]	; 0x64
 80139c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80139c4:	eeb0 3a67 	vmov.f32	s6, s15
 80139c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139cc:	931a      	str	r3, [sp, #104]	; 0x68
 80139ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139d2:	3b01      	subs	r3, #1
 80139d4:	9309      	str	r3, [sp, #36]	; 0x24
 80139d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80139d8:	bf08      	it	eq
 80139da:	4613      	moveq	r3, r2
 80139dc:	9306      	str	r3, [sp, #24]
 80139de:	e6cb      	b.n	8013778 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80139e0:	b151      	cbz	r1, 80139f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80139e2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80139e6:	4660      	mov	r0, ip
 80139e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80139ec:	442a      	add	r2, r5
 80139ee:	4667      	mov	r7, ip
 80139f0:	e731      	b.n	8013856 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80139f2:	4660      	mov	r0, ip
 80139f4:	4662      	mov	r2, ip
 80139f6:	e72e      	b.n	8013856 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80139f8:	4660      	mov	r0, ip
 80139fa:	4662      	mov	r2, ip
 80139fc:	e7f7      	b.n	80139ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80139fe:	f110 0e01 	adds.w	lr, r0, #1
 8013a02:	f53f af71 	bmi.w	80138e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a06:	4572      	cmp	r2, lr
 8013a08:	f6ff af6e 	blt.w	80138e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a0c:	f117 0e01 	adds.w	lr, r7, #1
 8013a10:	f53f af6a 	bmi.w	80138e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a14:	45f4      	cmp	ip, lr
 8013a16:	f6ff af67 	blt.w	80138e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a1a:	b212      	sxth	r2, r2
 8013a1c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8013a20:	fa0f f38c 	sxth.w	r3, ip
 8013a24:	9200      	str	r2, [sp, #0]
 8013a26:	4631      	mov	r1, r6
 8013a28:	9a08      	ldr	r2, [sp, #32]
 8013a2a:	9301      	str	r3, [sp, #4]
 8013a2c:	462b      	mov	r3, r5
 8013a2e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8013a32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013a34:	f7ff fde9 	bl	801360a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8013a38:	e756      	b.n	80138e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a3c:	1426      	asrs	r6, r4, #16
 8013a3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013a40:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8013a44:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8013a48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a4a:	1400      	asrs	r0, r0, #16
 8013a4c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8013a50:	fb02 6000 	mla	r0, r2, r0, r6
 8013a54:	9e08      	ldr	r6, [sp, #32]
 8013a56:	f816 e000 	ldrb.w	lr, [r6, r0]
 8013a5a:	eb06 0c00 	add.w	ip, r6, r0
 8013a5e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013a62:	eb05 070e 	add.w	r7, r5, lr
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d064      	beq.n	8013b34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8013a6a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8013a6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013a72:	442e      	add	r6, r5
 8013a74:	2900      	cmp	r1, #0
 8013a76:	d066      	beq.n	8013b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8013a78:	eb0c 0002 	add.w	r0, ip, r2
 8013a7c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013a80:	7840      	ldrb	r0, [r0, #1]
 8013a82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013a86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013a8a:	442a      	add	r2, r5
 8013a8c:	4428      	add	r0, r5
 8013a8e:	b29b      	uxth	r3, r3
 8013a90:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8013a94:	b289      	uxth	r1, r1
 8013a96:	f896 e000 	ldrb.w	lr, [r6]
 8013a9a:	f108 0803 	add.w	r8, r8, #3
 8013a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013aa2:	fb03 f901 	mul.w	r9, r3, r1
 8013aa6:	011b      	lsls	r3, r3, #4
 8013aa8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8013aac:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8013ab0:	eba3 0309 	sub.w	r3, r3, r9
 8013ab4:	b289      	uxth	r1, r1
 8013ab6:	b29b      	uxth	r3, r3
 8013ab8:	ebac 0c01 	sub.w	ip, ip, r1
 8013abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8013ac0:	fa1f fc8c 	uxth.w	ip, ip
 8013ac4:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013ac8:	f892 b000 	ldrb.w	fp, [r2]
 8013acc:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013ad0:	f890 b000 	ldrb.w	fp, [r0]
 8013ad4:	fb09 ee0b 	mla	lr, r9, fp, lr
 8013ad8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013adc:	f808 ec06 	strb.w	lr, [r8, #-6]
 8013ae0:	f896 e001 	ldrb.w	lr, [r6, #1]
 8013ae4:	f897 b001 	ldrb.w	fp, [r7, #1]
 8013ae8:	fb03 fe0e 	mul.w	lr, r3, lr
 8013aec:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013af0:	f892 b001 	ldrb.w	fp, [r2, #1]
 8013af4:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013af8:	f890 b001 	ldrb.w	fp, [r0, #1]
 8013afc:	fb09 ee0b 	mla	lr, r9, fp, lr
 8013b00:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013b04:	f808 ec05 	strb.w	lr, [r8, #-5]
 8013b08:	78b6      	ldrb	r6, [r6, #2]
 8013b0a:	78bf      	ldrb	r7, [r7, #2]
 8013b0c:	4373      	muls	r3, r6
 8013b0e:	7896      	ldrb	r6, [r2, #2]
 8013b10:	7882      	ldrb	r2, [r0, #2]
 8013b12:	fb0c 3307 	mla	r3, ip, r7, r3
 8013b16:	fb01 3306 	mla	r3, r1, r6, r3
 8013b1a:	fb09 3902 	mla	r9, r9, r2, r3
 8013b1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b22:	441c      	add	r4, r3
 8013b24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013b26:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013b2a:	4413      	add	r3, r2
 8013b2c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8013b30:	9318      	str	r3, [sp, #96]	; 0x60
 8013b32:	e70d      	b.n	8013950 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8013b34:	b151      	cbz	r1, 8013b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8013b36:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013b3a:	4638      	mov	r0, r7
 8013b3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013b40:	442a      	add	r2, r5
 8013b42:	463e      	mov	r6, r7
 8013b44:	e7a3      	b.n	8013a8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8013b46:	4638      	mov	r0, r7
 8013b48:	463a      	mov	r2, r7
 8013b4a:	e7a0      	b.n	8013a8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8013b4c:	4638      	mov	r0, r7
 8013b4e:	463a      	mov	r2, r7
 8013b50:	e7f7      	b.n	8013b42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8013b52:	b00d      	add	sp, #52	; 0x34
 8013b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8013b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8013b60:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8013b64:	2d00      	cmp	r5, #0
 8013b66:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8013b6a:	fb05 700c 	mla	r0, r5, ip, r7
 8013b6e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8013b72:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8013b76:	eb02 0800 	add.w	r8, r2, r0
 8013b7a:	f2c0 8118 	blt.w	8013dae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8013b7e:	45a9      	cmp	r9, r5
 8013b80:	f340 8115 	ble.w	8013dae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8013b84:	2f00      	cmp	r7, #0
 8013b86:	f2c0 8110 	blt.w	8013daa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8013b8a:	45bc      	cmp	ip, r7
 8013b8c:	f340 810d 	ble.w	8013daa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8013b90:	5c12      	ldrb	r2, [r2, r0]
 8013b92:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013b96:	1c7a      	adds	r2, r7, #1
 8013b98:	f100 810c 	bmi.w	8013db4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8013b9c:	4594      	cmp	ip, r2
 8013b9e:	f340 8109 	ble.w	8013db4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8013ba2:	2c00      	cmp	r4, #0
 8013ba4:	f000 8108 	beq.w	8013db8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8013ba8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013bac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013bb0:	3501      	adds	r5, #1
 8013bb2:	f100 8105 	bmi.w	8013dc0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8013bb6:	45a9      	cmp	r9, r5
 8013bb8:	f340 8102 	ble.w	8013dc0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8013bbc:	f1be 0f00 	cmp.w	lr, #0
 8013bc0:	f000 8101 	beq.w	8013dc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8013bc4:	2f00      	cmp	r7, #0
 8013bc6:	f2c0 80f9 	blt.w	8013dbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8013bca:	45bc      	cmp	ip, r7
 8013bcc:	f340 80f6 	ble.w	8013dbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8013bd0:	f818 200c 	ldrb.w	r2, [r8, ip]
 8013bd4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013bd8:	3701      	adds	r7, #1
 8013bda:	f100 80f7 	bmi.w	8013dcc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8013bde:	45bc      	cmp	ip, r7
 8013be0:	f340 80f4 	ble.w	8013dcc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8013be4:	2c00      	cmp	r4, #0
 8013be6:	f000 80f3 	beq.w	8013dd0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8013bea:	44c4      	add	ip, r8
 8013bec:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8013bf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013bf4:	fa1f fc84 	uxth.w	ip, r4
 8013bf8:	fa1f f48e 	uxth.w	r4, lr
 8013bfc:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8013c00:	fb04 fe0c 	mul.w	lr, r4, ip
 8013c04:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8013c08:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8013c0c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8013c10:	ebac 070e 	sub.w	r7, ip, lr
 8013c14:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8013c18:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8013c1c:	b2a4      	uxth	r4, r4
 8013c1e:	b2bf      	uxth	r7, r7
 8013c20:	1b1b      	subs	r3, r3, r4
 8013c22:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8013c26:	fb07 fc0a 	mul.w	ip, r7, sl
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8013c30:	9300      	str	r3, [sp, #0]
 8013c32:	fb04 cc09 	mla	ip, r4, r9, ip
 8013c36:	fb0e cc08 	mla	ip, lr, r8, ip
 8013c3a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8013c3e:	9301      	str	r3, [sp, #4]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	f000 80af 	beq.w	8013da4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8013c46:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8013c4a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8013c4e:	fb0b fc0c 	mul.w	ip, fp, ip
 8013c52:	fb0b f606 	mul.w	r6, fp, r6
 8013c56:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8013c5a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8013c5e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8013c62:	44dc      	add	ip, fp
 8013c64:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8013c68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8013c6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013c70:	fb0a fb0b 	mul.w	fp, sl, fp
 8013c74:	fb0a fa00 	mul.w	sl, sl, r0
 8013c78:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8013c7c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8013c80:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8013c84:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8013c88:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8013c8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013c90:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8013c94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013c98:	0a36      	lsrs	r6, r6, #8
 8013c9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013c9e:	44dc      	add	ip, fp
 8013ca0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8013ca4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8013ca8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8013cac:	fb09 fb0b 	mul.w	fp, r9, fp
 8013cb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013cb4:	fb09 f905 	mul.w	r9, r9, r5
 8013cb8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8013cbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013cc0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8013cc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013cc8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8013ccc:	fb0c fc07 	mul.w	ip, ip, r7
 8013cd0:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8013cd4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8013cd8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8013cdc:	4458      	add	r0, fp
 8013cde:	fb08 f505 	mul.w	r5, r8, r5
 8013ce2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8013ce6:	fb08 f802 	mul.w	r8, r8, r2
 8013cea:	0a00      	lsrs	r0, r0, #8
 8013cec:	0a2a      	lsrs	r2, r5, #8
 8013cee:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8013cf2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8013cf6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8013cfa:	4415      	add	r5, r2
 8013cfc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8013d00:	0a2d      	lsrs	r5, r5, #8
 8013d02:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013d06:	9a00      	ldr	r2, [sp, #0]
 8013d08:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8013d0c:	fb03 cc02 	mla	ip, r3, r2, ip
 8013d10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8013d14:	9b01      	ldr	r3, [sp, #4]
 8013d16:	fb05 c50e 	mla	r5, r5, lr, ip
 8013d1a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8013d1e:	fb00 5004 	mla	r0, r0, r4, r5
 8013d22:	0a00      	lsrs	r0, r0, #8
 8013d24:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8013d28:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8013d2c:	4378      	muls	r0, r7
 8013d2e:	fb02 0006 	mla	r0, r2, r6, r0
 8013d32:	fb0e 0e08 	mla	lr, lr, r8, r0
 8013d36:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8013d3a:	fb04 e000 	mla	r0, r4, r0, lr
 8013d3e:	0a00      	lsrs	r0, r0, #8
 8013d40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8013d44:	4328      	orrs	r0, r5
 8013d46:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013d4a:	b2ad      	uxth	r5, r5
 8013d4c:	b2c4      	uxtb	r4, r0
 8013d4e:	436b      	muls	r3, r5
 8013d50:	fb14 f405 	smulbb	r4, r4, r5
 8013d54:	1c5a      	adds	r2, r3, #1
 8013d56:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8013d5a:	780b      	ldrb	r3, [r1, #0]
 8013d5c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8013d60:	b2d2      	uxtb	r2, r2
 8013d62:	fb03 4302 	mla	r3, r3, r2, r4
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	1c5c      	adds	r4, r3, #1
 8013d6a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8013d6e:	784c      	ldrb	r4, [r1, #1]
 8013d70:	fb14 f402 	smulbb	r4, r4, r2
 8013d74:	121b      	asrs	r3, r3, #8
 8013d76:	700b      	strb	r3, [r1, #0]
 8013d78:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013d7c:	fb03 4305 	mla	r3, r3, r5, r4
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	1c5c      	adds	r4, r3, #1
 8013d84:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8013d88:	0c04      	lsrs	r4, r0, #16
 8013d8a:	7888      	ldrb	r0, [r1, #2]
 8013d8c:	121b      	asrs	r3, r3, #8
 8013d8e:	fb10 f002 	smulbb	r0, r0, r2
 8013d92:	704b      	strb	r3, [r1, #1]
 8013d94:	fb04 0005 	mla	r0, r4, r5, r0
 8013d98:	b280      	uxth	r0, r0
 8013d9a:	1c43      	adds	r3, r0, #1
 8013d9c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8013da0:	1200      	asrs	r0, r0, #8
 8013da2:	7088      	strb	r0, [r1, #2]
 8013da4:	b003      	add	sp, #12
 8013da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013daa:	2600      	movs	r6, #0
 8013dac:	e6f3      	b.n	8013b96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8013dae:	2000      	movs	r0, #0
 8013db0:	4606      	mov	r6, r0
 8013db2:	e6fd      	b.n	8013bb0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013db4:	2000      	movs	r0, #0
 8013db6:	e6fb      	b.n	8013bb0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013db8:	4620      	mov	r0, r4
 8013dba:	e6f9      	b.n	8013bb0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013dbc:	2500      	movs	r5, #0
 8013dbe:	e70b      	b.n	8013bd8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	4615      	mov	r5, r2
 8013dc4:	e716      	b.n	8013bf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013dc6:	4672      	mov	r2, lr
 8013dc8:	4675      	mov	r5, lr
 8013dca:	e713      	b.n	8013bf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013dcc:	2200      	movs	r2, #0
 8013dce:	e711      	b.n	8013bf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013dd0:	4622      	mov	r2, r4
 8013dd2:	e70f      	b.n	8013bf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08013dd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd8:	b09f      	sub	sp, #124	; 0x7c
 8013dda:	921b      	str	r2, [sp, #108]	; 0x6c
 8013ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dde:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8013de0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8013de4:	901d      	str	r0, [sp, #116]	; 0x74
 8013de6:	931c      	str	r3, [sp, #112]	; 0x70
 8013de8:	6850      	ldr	r0, [r2, #4]
 8013dea:	9119      	str	r1, [sp, #100]	; 0x64
 8013dec:	6812      	ldr	r2, [r2, #0]
 8013dee:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013df0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8013df4:	fb00 1303 	mla	r3, r0, r3, r1
 8013df8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013dfc:	18d3      	adds	r3, r2, r3
 8013dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8013e00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	9312      	str	r3, [sp, #72]	; 0x48
 8013e06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e08:	685e      	ldr	r6, [r3, #4]
 8013e0a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8013e0e:	3604      	adds	r6, #4
 8013e10:	930d      	str	r3, [sp, #52]	; 0x34
 8013e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	dc03      	bgt.n	8013e20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8013e18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f340 8378 	ble.w	8014510 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8013e20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013e26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013e2a:	1e48      	subs	r0, r1, #1
 8013e2c:	1e57      	subs	r7, r2, #1
 8013e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f340 818c 	ble.w	801414e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8013e36:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8013e38:	142b      	asrs	r3, r5, #16
 8013e3a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8013e3e:	d406      	bmi.n	8013e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e40:	4584      	cmp	ip, r0
 8013e42:	da04      	bge.n	8013e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	db02      	blt.n	8013e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e48:	42bb      	cmp	r3, r7
 8013e4a:	f2c0 8181 	blt.w	8014150 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8013e4e:	f11c 0c01 	adds.w	ip, ip, #1
 8013e52:	f100 816f 	bmi.w	8014134 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e56:	4561      	cmp	r1, ip
 8013e58:	f2c0 816c 	blt.w	8014134 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	f100 8169 	bmi.w	8014134 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e62:	429a      	cmp	r2, r3
 8013e64:	f2c0 8166 	blt.w	8014134 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f340 818c 	ble.w	801418e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8013e76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013e78:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8013e7c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8013e80:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8013e84:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e86:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8013e8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013e8c:	141b      	asrs	r3, r3, #16
 8013e8e:	f100 81d0 	bmi.w	8014232 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8013e96:	4543      	cmp	r3, r8
 8013e98:	f280 81cb 	bge.w	8014232 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013e9c:	f1bc 0f00 	cmp.w	ip, #0
 8013ea0:	f2c0 81c7 	blt.w	8014232 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ea4:	f10e 38ff 	add.w	r8, lr, #4294967295
 8013ea8:	45c4      	cmp	ip, r8
 8013eaa:	f280 81c2 	bge.w	8014232 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013eae:	b200      	sxth	r0, r0
 8013eb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013eb2:	fb0c 3300 	mla	r3, ip, r0, r3
 8013eb6:	eb04 0803 	add.w	r8, r4, r3
 8013eba:	5ce3      	ldrb	r3, [r4, r3]
 8013ebc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013ec0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8013ec4:	2a00      	cmp	r2, #0
 8013ec6:	f000 81a9 	beq.w	801421c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8013eca:	f898 c001 	ldrb.w	ip, [r8, #1]
 8013ece:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8013ed2:	940e      	str	r4, [sp, #56]	; 0x38
 8013ed4:	0e24      	lsrs	r4, r4, #24
 8013ed6:	9415      	str	r4, [sp, #84]	; 0x54
 8013ed8:	b179      	cbz	r1, 8013efa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013eda:	eb08 0c00 	add.w	ip, r8, r0
 8013ede:	f818 0000 	ldrb.w	r0, [r8, r0]
 8013ee2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8013ee6:	900a      	str	r0, [sp, #40]	; 0x28
 8013ee8:	0e00      	lsrs	r0, r0, #24
 8013eea:	9013      	str	r0, [sp, #76]	; 0x4c
 8013eec:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8013ef0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8013ef4:	900f      	str	r0, [sp, #60]	; 0x3c
 8013ef6:	0e00      	lsrs	r0, r0, #24
 8013ef8:	9016      	str	r0, [sp, #88]	; 0x58
 8013efa:	b292      	uxth	r2, r2
 8013efc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013efe:	b289      	uxth	r1, r1
 8013f00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013f02:	fb02 f901 	mul.w	r9, r2, r1
 8013f06:	0112      	lsls	r2, r2, #4
 8013f08:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8013f0c:	eba2 0809 	sub.w	r8, r2, r9
 8013f10:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8013f14:	b289      	uxth	r1, r1
 8013f16:	fa1f f888 	uxth.w	r8, r8
 8013f1a:	1a52      	subs	r2, r2, r1
 8013f1c:	fb08 f000 	mul.w	r0, r8, r0
 8013f20:	b292      	uxth	r2, r2
 8013f22:	fb02 000e 	mla	r0, r2, lr, r0
 8013f26:	fb01 0004 	mla	r0, r1, r4, r0
 8013f2a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8013f2c:	fb09 0004 	mla	r0, r9, r4, r0
 8013f30:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8013f34:	2800      	cmp	r0, #0
 8013f36:	f000 80f2 	beq.w	801411e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8013f3a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013f3e:	d01b      	beq.n	8013f78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8013f40:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8013f44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013f48:	fb0e fa0a 	mul.w	sl, lr, sl
 8013f4c:	fb0e fe03 	mul.w	lr, lr, r3
 8013f50:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013f54:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8013f58:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8013f5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013f60:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8013f64:	4453      	add	r3, sl
 8013f66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013f6a:	0a1b      	lsrs	r3, r3, #8
 8013f6c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8013f70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013f74:	ea43 030c 	orr.w	r3, r3, ip
 8013f78:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013f7a:	2cff      	cmp	r4, #255	; 0xff
 8013f7c:	d021      	beq.n	8013fc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8013f7e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013f80:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8013f84:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013f86:	fb04 fb0b 	mul.w	fp, r4, fp
 8013f8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013f8c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013f90:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013f92:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8013f96:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013f9a:	fb04 fa0a 	mul.w	sl, r4, sl
 8013f9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013fa2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8013fa6:	44de      	add	lr, fp
 8013fa8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8013fac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8013fb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013fb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013fb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013fbc:	ea4e 040a 	orr.w	r4, lr, sl
 8013fc0:	940e      	str	r4, [sp, #56]	; 0x38
 8013fc2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013fc4:	2cff      	cmp	r4, #255	; 0xff
 8013fc6:	d021      	beq.n	801400c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8013fc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013fca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8013fce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013fd0:	fb04 fb0b 	mul.w	fp, r4, fp
 8013fd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013fd6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013fda:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013fdc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8013fe0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013fe4:	fb04 fa0a 	mul.w	sl, r4, sl
 8013fe8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013fec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8013ff0:	44de      	add	lr, fp
 8013ff2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8013ff6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8013ffa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013ffe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014002:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014006:	ea4e 040a 	orr.w	r4, lr, sl
 801400a:	940a      	str	r4, [sp, #40]	; 0x28
 801400c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801400e:	2cff      	cmp	r4, #255	; 0xff
 8014010:	d021      	beq.n	8014056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8014012:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014014:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014018:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801401a:	fb04 fb0b 	mul.w	fp, r4, fp
 801401e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014020:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014024:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014026:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801402a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801402e:	fb04 fa0a 	mul.w	sl, r4, sl
 8014032:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014036:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801403a:	44de      	add	lr, fp
 801403c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014040:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014044:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014048:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801404c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014050:	ea4e 040a 	orr.w	r4, lr, sl
 8014054:	940f      	str	r4, [sp, #60]	; 0x3c
 8014056:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014058:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801405c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014060:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014066:	fb08 fc0c 	mul.w	ip, r8, ip
 801406a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801406e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014072:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014074:	fb01 cc0e 	mla	ip, r1, lr, ip
 8014078:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801407c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801407e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014082:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8014086:	fb08 f80e 	mul.w	r8, r8, lr
 801408a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801408e:	fb02 8303 	mla	r3, r2, r3, r8
 8014092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014094:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014098:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801409c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801409e:	fb01 330a 	mla	r3, r1, sl, r3
 80140a2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80140a6:	fb09 3901 	mla	r9, r9, r1, r3
 80140aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80140ae:	4343      	muls	r3, r0
 80140b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80140b4:	1c58      	adds	r0, r3, #1
 80140b6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80140ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80140be:	ea4c 0c09 	orr.w	ip, ip, r9
 80140c2:	783b      	ldrb	r3, [r7, #0]
 80140c4:	fa5f f28c 	uxtb.w	r2, ip
 80140c8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80140cc:	fb12 f201 	smulbb	r2, r2, r1
 80140d0:	b2c0      	uxtb	r0, r0
 80140d2:	fb03 2300 	mla	r3, r3, r0, r2
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	1c5a      	adds	r2, r3, #1
 80140da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80140de:	787a      	ldrb	r2, [r7, #1]
 80140e0:	fb12 f200 	smulbb	r2, r2, r0
 80140e4:	121b      	asrs	r3, r3, #8
 80140e6:	703b      	strb	r3, [r7, #0]
 80140e8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80140ec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80140f0:	fb03 2301 	mla	r3, r3, r1, r2
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	1c5a      	adds	r2, r3, #1
 80140f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80140fc:	121b      	asrs	r3, r3, #8
 80140fe:	707b      	strb	r3, [r7, #1]
 8014100:	78bb      	ldrb	r3, [r7, #2]
 8014102:	fb13 f000 	smulbb	r0, r3, r0
 8014106:	fb0c 0c01 	mla	ip, ip, r1, r0
 801410a:	fa1f fc8c 	uxth.w	ip, ip
 801410e:	f10c 0301 	add.w	r3, ip, #1
 8014112:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014116:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801411a:	f887 c002 	strb.w	ip, [r7, #2]
 801411e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014120:	3703      	adds	r7, #3
 8014122:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014124:	441a      	add	r2, r3
 8014126:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014128:	441d      	add	r5, r3
 801412a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801412c:	9229      	str	r2, [sp, #164]	; 0xa4
 801412e:	3b01      	subs	r3, #1
 8014130:	931a      	str	r3, [sp, #104]	; 0x68
 8014132:	e69c      	b.n	8013e6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8014134:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014136:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014138:	441c      	add	r4, r3
 801413a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801413c:	441d      	add	r5, r3
 801413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014140:	9429      	str	r4, [sp, #164]	; 0xa4
 8014142:	3b01      	subs	r3, #1
 8014144:	9309      	str	r3, [sp, #36]	; 0x24
 8014146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014148:	3303      	adds	r3, #3
 801414a:	930c      	str	r3, [sp, #48]	; 0x30
 801414c:	e66f      	b.n	8013e2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801414e:	d026      	beq.n	801419e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8014150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014152:	982b      	ldr	r0, [sp, #172]	; 0xac
 8014154:	3b01      	subs	r3, #1
 8014156:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014158:	fb00 4003 	mla	r0, r0, r3, r4
 801415c:	1400      	asrs	r0, r0, #16
 801415e:	f53f ae83 	bmi.w	8013e68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014162:	3901      	subs	r1, #1
 8014164:	4288      	cmp	r0, r1
 8014166:	f6bf ae7f 	bge.w	8013e68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801416a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801416c:	fb01 5303 	mla	r3, r1, r3, r5
 8014170:	141b      	asrs	r3, r3, #16
 8014172:	f53f ae79 	bmi.w	8013e68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014176:	3a01      	subs	r2, #1
 8014178:	4293      	cmp	r3, r2
 801417a:	f6bf ae75 	bge.w	8013e68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801417e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014180:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8014184:	f103 0e03 	add.w	lr, r3, #3
 8014188:	f1bb 0f00 	cmp.w	fp, #0
 801418c:	dc71      	bgt.n	8014272 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801418e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014190:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8014194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014196:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801419a:	4423      	add	r3, r4
 801419c:	930c      	str	r3, [sp, #48]	; 0x30
 801419e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	f340 81b5 	ble.w	8014510 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80141a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80141ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80141b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80141b4:	eef0 6a62 	vmov.f32	s13, s5
 80141b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80141c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80141c4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80141c8:	eef0 6a43 	vmov.f32	s13, s6
 80141cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80141d0:	ee16 5a90 	vmov	r5, s13
 80141d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80141d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80141dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80141e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80141e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80141e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80141ec:	ee12 2a90 	vmov	r2, s5
 80141f0:	eef0 2a47 	vmov.f32	s5, s14
 80141f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80141f8:	ee13 2a10 	vmov	r2, s6
 80141fc:	932b      	str	r3, [sp, #172]	; 0xac
 80141fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014200:	eeb0 3a67 	vmov.f32	s6, s15
 8014204:	fb92 f3f3 	sdiv	r3, r2, r3
 8014208:	932c      	str	r3, [sp, #176]	; 0xb0
 801420a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801420c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801420e:	3b01      	subs	r3, #1
 8014210:	9319      	str	r3, [sp, #100]	; 0x64
 8014212:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014214:	bf08      	it	eq
 8014216:	4613      	moveq	r3, r2
 8014218:	9309      	str	r3, [sp, #36]	; 0x24
 801421a:	e5fa      	b.n	8013e12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801421c:	2900      	cmp	r1, #0
 801421e:	f43f ae6c 	beq.w	8013efa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014222:	f818 0000 	ldrb.w	r0, [r8, r0]
 8014226:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801422a:	900a      	str	r0, [sp, #40]	; 0x28
 801422c:	0e00      	lsrs	r0, r0, #24
 801422e:	9013      	str	r0, [sp, #76]	; 0x4c
 8014230:	e663      	b.n	8013efa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014232:	f113 0801 	adds.w	r8, r3, #1
 8014236:	f53f af72 	bmi.w	801411e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801423a:	4540      	cmp	r0, r8
 801423c:	f6ff af6f 	blt.w	801411e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014240:	f11c 0801 	adds.w	r8, ip, #1
 8014244:	f53f af6b 	bmi.w	801411e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014248:	45c6      	cmp	lr, r8
 801424a:	f6ff af68 	blt.w	801411e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801424e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014250:	b200      	sxth	r0, r0
 8014252:	9302      	str	r3, [sp, #8]
 8014254:	fa0f f38e 	sxth.w	r3, lr
 8014258:	9000      	str	r0, [sp, #0]
 801425a:	9301      	str	r3, [sp, #4]
 801425c:	4633      	mov	r3, r6
 801425e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014260:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8014264:	e9cd c203 	strd	ip, r2, [sp, #12]
 8014268:	4639      	mov	r1, r7
 801426a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801426c:	f7ff fc74 	bl	8013b58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8014270:	e755      	b.n	801411e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014272:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014274:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014278:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801427a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801427e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014280:	1427      	asrs	r7, r4, #16
 8014282:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014284:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014288:	142b      	asrs	r3, r5, #16
 801428a:	fb01 7303 	mla	r3, r1, r3, r7
 801428e:	18e7      	adds	r7, r4, r3
 8014290:	5ce3      	ldrb	r3, [r4, r3]
 8014292:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014296:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801429a:	2a00      	cmp	r2, #0
 801429c:	f000 812e 	beq.w	80144fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80142a0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80142a4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80142a8:	9410      	str	r4, [sp, #64]	; 0x40
 80142aa:	0e24      	lsrs	r4, r4, #24
 80142ac:	9417      	str	r4, [sp, #92]	; 0x5c
 80142ae:	b170      	cbz	r0, 80142ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80142b0:	eb07 0801 	add.w	r8, r7, r1
 80142b4:	5c79      	ldrb	r1, [r7, r1]
 80142b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80142ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80142bc:	0e09      	lsrs	r1, r1, #24
 80142be:	9114      	str	r1, [sp, #80]	; 0x50
 80142c0:	f898 1001 	ldrb.w	r1, [r8, #1]
 80142c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80142c8:	9111      	str	r1, [sp, #68]	; 0x44
 80142ca:	0e09      	lsrs	r1, r1, #24
 80142cc:	9118      	str	r1, [sp, #96]	; 0x60
 80142ce:	b292      	uxth	r2, r2
 80142d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80142d2:	b280      	uxth	r0, r0
 80142d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80142d6:	fb02 f900 	mul.w	r9, r2, r0
 80142da:	0112      	lsls	r2, r2, #4
 80142dc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80142e0:	eba2 0809 	sub.w	r8, r2, r9
 80142e4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80142e8:	b280      	uxth	r0, r0
 80142ea:	fa1f f888 	uxth.w	r8, r8
 80142ee:	1a12      	subs	r2, r2, r0
 80142f0:	fb08 f101 	mul.w	r1, r8, r1
 80142f4:	b292      	uxth	r2, r2
 80142f6:	fb02 110c 	mla	r1, r2, ip, r1
 80142fa:	fb00 1104 	mla	r1, r0, r4, r1
 80142fe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014300:	fb09 1104 	mla	r1, r9, r4, r1
 8014304:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014308:	2900      	cmp	r1, #0
 801430a:	f000 80ec 	beq.w	80144e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801430e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8014312:	d019      	beq.n	8014348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8014314:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801431c:	fb0c fa0a 	mul.w	sl, ip, sl
 8014320:	fb0c fc03 	mul.w	ip, ip, r3
 8014324:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014328:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801432c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8014330:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014334:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8014338:	4453      	add	r3, sl
 801433a:	0a3f      	lsrs	r7, r7, #8
 801433c:	0a1b      	lsrs	r3, r3, #8
 801433e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014342:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014346:	433b      	orrs	r3, r7
 8014348:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801434a:	2cff      	cmp	r4, #255	; 0xff
 801434c:	d020      	beq.n	8014390 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801434e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014350:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014354:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014356:	4367      	muls	r7, r4
 8014358:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801435a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801435e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014362:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014364:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014368:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801436c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014370:	44bc      	add	ip, r7
 8014372:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014376:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801437a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801437e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014382:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014386:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801438a:	ea4c 040a 	orr.w	r4, ip, sl
 801438e:	9410      	str	r4, [sp, #64]	; 0x40
 8014390:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014392:	2cff      	cmp	r4, #255	; 0xff
 8014394:	d020      	beq.n	80143d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8014396:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014398:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801439c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801439e:	4367      	muls	r7, r4
 80143a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80143a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80143a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80143aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80143ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80143b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80143b8:	44bc      	add	ip, r7
 80143ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80143be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80143c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80143c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80143ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80143d2:	ea4c 040a 	orr.w	r4, ip, sl
 80143d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80143d8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80143da:	2cff      	cmp	r4, #255	; 0xff
 80143dc:	d020      	beq.n	8014420 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80143de:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80143e0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80143e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80143e6:	4367      	muls	r7, r4
 80143e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80143ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80143ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80143f2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80143f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80143f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8014400:	44bc      	add	ip, r7
 8014402:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014406:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801440a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801440e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014412:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014416:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801441a:	ea4c 040a 	orr.w	r4, ip, sl
 801441e:	9411      	str	r4, [sp, #68]	; 0x44
 8014420:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014422:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8014426:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801442a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801442e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014430:	fb08 f707 	mul.w	r7, r8, r7
 8014434:	fb02 770c 	mla	r7, r2, ip, r7
 8014438:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801443c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801443e:	fb00 770c 	mla	r7, r0, ip, r7
 8014442:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014446:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014448:	fb09 770c 	mla	r7, r9, ip, r7
 801444c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8014450:	fb08 f80c 	mul.w	r8, r8, ip
 8014454:	0a3f      	lsrs	r7, r7, #8
 8014456:	fb02 8303 	mla	r3, r2, r3, r8
 801445a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801445c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014460:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014464:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014466:	fb00 330a 	mla	r3, r0, sl, r3
 801446a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801446e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014470:	fb09 3c0c 	mla	ip, r9, ip, r3
 8014474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014476:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801447a:	434b      	muls	r3, r1
 801447c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014480:	1c59      	adds	r1, r3, #1
 8014482:	ea47 070c 	orr.w	r7, r7, ip
 8014486:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801448a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801448e:	b2fa      	uxtb	r2, r7
 8014490:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8014494:	fb12 f200 	smulbb	r2, r2, r0
 8014498:	b2c9      	uxtb	r1, r1
 801449a:	fb03 2301 	mla	r3, r3, r1, r2
 801449e:	b29b      	uxth	r3, r3
 80144a0:	1c5a      	adds	r2, r3, #1
 80144a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80144a6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80144aa:	fb12 f201 	smulbb	r2, r2, r1
 80144ae:	121b      	asrs	r3, r3, #8
 80144b0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80144b4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80144b8:	0c3f      	lsrs	r7, r7, #16
 80144ba:	fb03 2300 	mla	r3, r3, r0, r2
 80144be:	b29b      	uxth	r3, r3
 80144c0:	1c5a      	adds	r2, r3, #1
 80144c2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80144c6:	121b      	asrs	r3, r3, #8
 80144c8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80144cc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80144d0:	fb13 f101 	smulbb	r1, r3, r1
 80144d4:	fb07 1700 	mla	r7, r7, r0, r1
 80144d8:	b2bf      	uxth	r7, r7
 80144da:	1c7b      	adds	r3, r7, #1
 80144dc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80144e0:	123f      	asrs	r7, r7, #8
 80144e2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80144e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80144e8:	f10e 0e03 	add.w	lr, lr, #3
 80144ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80144ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80144f2:	441a      	add	r2, r3
 80144f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80144f6:	9229      	str	r2, [sp, #164]	; 0xa4
 80144f8:	441d      	add	r5, r3
 80144fa:	e645      	b.n	8014188 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	f43f aee6 	beq.w	80142ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8014502:	5c79      	ldrb	r1, [r7, r1]
 8014504:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014508:	910b      	str	r1, [sp, #44]	; 0x2c
 801450a:	0e09      	lsrs	r1, r1, #24
 801450c:	9114      	str	r1, [sp, #80]	; 0x50
 801450e:	e6de      	b.n	80142ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8014510:	b01f      	add	sp, #124	; 0x7c
 8014512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014516 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8014516:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801451a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801451e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8014522:	2d00      	cmp	r5, #0
 8014524:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8014528:	fb05 700e 	mla	r0, r5, lr, r7
 801452c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8014530:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8014534:	eb02 0800 	add.w	r8, r2, r0
 8014538:	f2c0 8105 	blt.w	8014746 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801453c:	45a9      	cmp	r9, r5
 801453e:	f340 8102 	ble.w	8014746 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8014542:	2f00      	cmp	r7, #0
 8014544:	f2c0 80fd 	blt.w	8014742 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8014548:	45be      	cmp	lr, r7
 801454a:	f340 80fa 	ble.w	8014742 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801454e:	5c12      	ldrb	r2, [r2, r0]
 8014550:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014554:	1c7a      	adds	r2, r7, #1
 8014556:	f100 80f9 	bmi.w	801474c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801455a:	4596      	cmp	lr, r2
 801455c:	f340 80f6 	ble.w	801474c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8014560:	2c00      	cmp	r4, #0
 8014562:	f000 80f5 	beq.w	8014750 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8014566:	f898 2001 	ldrb.w	r2, [r8, #1]
 801456a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801456e:	3501      	adds	r5, #1
 8014570:	f100 80f2 	bmi.w	8014758 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8014574:	45a9      	cmp	r9, r5
 8014576:	f340 80ef 	ble.w	8014758 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801457a:	f1bc 0f00 	cmp.w	ip, #0
 801457e:	f000 80ee 	beq.w	801475e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8014582:	2f00      	cmp	r7, #0
 8014584:	f2c0 80e6 	blt.w	8014754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8014588:	45be      	cmp	lr, r7
 801458a:	f340 80e3 	ble.w	8014754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801458e:	f818 200e 	ldrb.w	r2, [r8, lr]
 8014592:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014596:	3701      	adds	r7, #1
 8014598:	f100 80e4 	bmi.w	8014764 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801459c:	45be      	cmp	lr, r7
 801459e:	f340 80e1 	ble.w	8014764 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80145a2:	2c00      	cmp	r4, #0
 80145a4:	f000 80e0 	beq.w	8014768 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80145a8:	44c6      	add	lr, r8
 80145aa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80145ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80145b2:	b2a3      	uxth	r3, r4
 80145b4:	fa1f fc8c 	uxth.w	ip, ip
 80145b8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80145bc:	fb0c fe03 	mul.w	lr, ip, r3
 80145c0:	011b      	lsls	r3, r3, #4
 80145c2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80145c6:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80145ca:	eba3 070e 	sub.w	r7, r3, lr
 80145ce:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80145d2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80145d6:	fa1f f48c 	uxth.w	r4, ip
 80145da:	b2bf      	uxth	r7, r7
 80145dc:	1b1b      	subs	r3, r3, r4
 80145de:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80145e2:	fb07 fc0a 	mul.w	ip, r7, sl
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	fb03 cc0b 	mla	ip, r3, fp, ip
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	fb04 cc09 	mla	ip, r4, r9, ip
 80145f2:	fb0e cc08 	mla	ip, lr, r8, ip
 80145f6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80145fa:	9301      	str	r3, [sp, #4]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	f000 809d 	beq.w	801473c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8014602:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8014606:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801460a:	fb0b fc0c 	mul.w	ip, fp, ip
 801460e:	fb0b f606 	mul.w	r6, fp, r6
 8014612:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014616:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801461a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801461e:	44dc      	add	ip, fp
 8014620:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8014624:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014628:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801462c:	fb0a fb0b 	mul.w	fp, sl, fp
 8014630:	fb0a fa00 	mul.w	sl, sl, r0
 8014634:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8014638:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801463c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8014640:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014644:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014648:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801464c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8014650:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014654:	0a36      	lsrs	r6, r6, #8
 8014656:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801465a:	44dc      	add	ip, fp
 801465c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014660:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014664:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014668:	fb09 fb0b 	mul.w	fp, r9, fp
 801466c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014670:	fb09 f905 	mul.w	r9, r9, r5
 8014674:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8014678:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801467c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8014680:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014684:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8014688:	fb0c fc07 	mul.w	ip, ip, r7
 801468c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8014690:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8014694:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014698:	4458      	add	r0, fp
 801469a:	fb08 f505 	mul.w	r5, r8, r5
 801469e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80146a2:	fb08 f802 	mul.w	r8, r8, r2
 80146a6:	0a00      	lsrs	r0, r0, #8
 80146a8:	0a2a      	lsrs	r2, r5, #8
 80146aa:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80146ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80146b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80146b6:	4415      	add	r5, r2
 80146b8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80146bc:	0a2d      	lsrs	r5, r5, #8
 80146be:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80146c2:	9a00      	ldr	r2, [sp, #0]
 80146c4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80146c8:	fb03 cc02 	mla	ip, r3, r2, ip
 80146cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80146d0:	9b01      	ldr	r3, [sp, #4]
 80146d2:	fb05 c50e 	mla	r5, r5, lr, ip
 80146d6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80146da:	43db      	mvns	r3, r3
 80146dc:	fb00 5004 	mla	r0, r0, r4, r5
 80146e0:	b2db      	uxtb	r3, r3
 80146e2:	0a00      	lsrs	r0, r0, #8
 80146e4:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80146e8:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80146ec:	4378      	muls	r0, r7
 80146ee:	fb02 0006 	mla	r0, r2, r6, r0
 80146f2:	780a      	ldrb	r2, [r1, #0]
 80146f4:	fb0e 0e08 	mla	lr, lr, r8, r0
 80146f8:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80146fc:	fb04 e000 	mla	r0, r4, r0, lr
 8014700:	fb02 f403 	mul.w	r4, r2, r3
 8014704:	0a00      	lsrs	r0, r0, #8
 8014706:	1c62      	adds	r2, r4, #1
 8014708:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801470c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8014710:	4328      	orrs	r0, r5
 8014712:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014716:	700a      	strb	r2, [r1, #0]
 8014718:	784a      	ldrb	r2, [r1, #1]
 801471a:	435a      	muls	r2, r3
 801471c:	1c54      	adds	r4, r2, #1
 801471e:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8014722:	0a02      	lsrs	r2, r0, #8
 8014724:	0c00      	lsrs	r0, r0, #16
 8014726:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801472a:	704a      	strb	r2, [r1, #1]
 801472c:	788a      	ldrb	r2, [r1, #2]
 801472e:	4353      	muls	r3, r2
 8014730:	1c5a      	adds	r2, r3, #1
 8014732:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014736:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801473a:	7088      	strb	r0, [r1, #2]
 801473c:	b003      	add	sp, #12
 801473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014742:	2600      	movs	r6, #0
 8014744:	e706      	b.n	8014554 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8014746:	2000      	movs	r0, #0
 8014748:	4606      	mov	r6, r0
 801474a:	e710      	b.n	801456e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801474c:	2000      	movs	r0, #0
 801474e:	e70e      	b.n	801456e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8014750:	4620      	mov	r0, r4
 8014752:	e70c      	b.n	801456e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8014754:	2500      	movs	r5, #0
 8014756:	e71e      	b.n	8014596 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8014758:	2200      	movs	r2, #0
 801475a:	4615      	mov	r5, r2
 801475c:	e729      	b.n	80145b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801475e:	4662      	mov	r2, ip
 8014760:	4665      	mov	r5, ip
 8014762:	e726      	b.n	80145b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8014764:	2200      	movs	r2, #0
 8014766:	e724      	b.n	80145b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8014768:	4622      	mov	r2, r4
 801476a:	e722      	b.n	80145b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801476c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014770:	b09b      	sub	sp, #108	; 0x6c
 8014772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014776:	9218      	str	r2, [sp, #96]	; 0x60
 8014778:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801477a:	9019      	str	r0, [sp, #100]	; 0x64
 801477c:	9116      	str	r1, [sp, #88]	; 0x58
 801477e:	6850      	ldr	r0, [r2, #4]
 8014780:	9307      	str	r3, [sp, #28]
 8014782:	6812      	ldr	r2, [r2, #0]
 8014784:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014786:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801478a:	fb00 1303 	mla	r3, r0, r3, r1
 801478e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014792:	18d3      	adds	r3, r2, r3
 8014794:	930a      	str	r3, [sp, #40]	; 0x28
 8014796:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	930f      	str	r3, [sp, #60]	; 0x3c
 801479c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801479e:	685e      	ldr	r6, [r3, #4]
 80147a0:	3604      	adds	r6, #4
 80147a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	dc03      	bgt.n	80147b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80147a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	f340 834f 	ble.w	8014e4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80147b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80147b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80147b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80147ba:	1e48      	subs	r0, r1, #1
 80147bc:	1e57      	subs	r7, r2, #1
 80147be:	9b07      	ldr	r3, [sp, #28]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	f340 8178 	ble.w	8014ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80147c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80147c8:	142b      	asrs	r3, r5, #16
 80147ca:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80147ce:	d406      	bmi.n	80147de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80147d0:	4584      	cmp	ip, r0
 80147d2:	da04      	bge.n	80147de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	db02      	blt.n	80147de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80147d8:	42bb      	cmp	r3, r7
 80147da:	f2c0 816d 	blt.w	8014ab8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80147de:	f11c 0c01 	adds.w	ip, ip, #1
 80147e2:	f100 815b 	bmi.w	8014a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80147e6:	4561      	cmp	r1, ip
 80147e8:	f2c0 8158 	blt.w	8014a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80147ec:	3301      	adds	r3, #1
 80147ee:	f100 8155 	bmi.w	8014a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80147f2:	429a      	cmp	r2, r3
 80147f4:	f2c0 8152 	blt.w	8014a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80147f8:	9b07      	ldr	r3, [sp, #28]
 80147fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80147fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80147fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014800:	2b00      	cmp	r3, #0
 8014802:	f340 8178 	ble.w	8014af6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8014806:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014808:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801480c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014810:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014814:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014816:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801481a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801481c:	141b      	asrs	r3, r3, #16
 801481e:	f100 81ba 	bmi.w	8014b96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8014822:	f101 38ff 	add.w	r8, r1, #4294967295
 8014826:	4543      	cmp	r3, r8
 8014828:	f280 81b5 	bge.w	8014b96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801482c:	f1bc 0f00 	cmp.w	ip, #0
 8014830:	f2c0 81b1 	blt.w	8014b96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8014834:	f10e 38ff 	add.w	r8, lr, #4294967295
 8014838:	45c4      	cmp	ip, r8
 801483a:	f280 81ac 	bge.w	8014b96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801483e:	b209      	sxth	r1, r1
 8014840:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014842:	fb0c 3301 	mla	r3, ip, r1, r3
 8014846:	eb04 0803 	add.w	r8, r4, r3
 801484a:	5ce3      	ldrb	r3, [r4, r3]
 801484c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014850:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8014854:	2a00      	cmp	r2, #0
 8014856:	f000 8193 	beq.w	8014b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801485a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801485e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8014862:	940b      	str	r4, [sp, #44]	; 0x2c
 8014864:	0e24      	lsrs	r4, r4, #24
 8014866:	9412      	str	r4, [sp, #72]	; 0x48
 8014868:	b178      	cbz	r0, 801488a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801486a:	eb08 0c01 	add.w	ip, r8, r1
 801486e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8014872:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014876:	9108      	str	r1, [sp, #32]
 8014878:	0e09      	lsrs	r1, r1, #24
 801487a:	9110      	str	r1, [sp, #64]	; 0x40
 801487c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8014880:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014884:	910c      	str	r1, [sp, #48]	; 0x30
 8014886:	0e09      	lsrs	r1, r1, #24
 8014888:	9113      	str	r1, [sp, #76]	; 0x4c
 801488a:	b292      	uxth	r2, r2
 801488c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801488e:	b280      	uxth	r0, r0
 8014890:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014892:	fb02 f900 	mul.w	r9, r2, r0
 8014896:	0112      	lsls	r2, r2, #4
 8014898:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801489c:	eba2 0809 	sub.w	r8, r2, r9
 80148a0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80148a4:	b280      	uxth	r0, r0
 80148a6:	fa1f f888 	uxth.w	r8, r8
 80148aa:	1a12      	subs	r2, r2, r0
 80148ac:	fb08 f101 	mul.w	r1, r8, r1
 80148b0:	b292      	uxth	r2, r2
 80148b2:	fb02 110e 	mla	r1, r2, lr, r1
 80148b6:	fb00 1104 	mla	r1, r0, r4, r1
 80148ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80148bc:	fb09 1104 	mla	r1, r9, r4, r1
 80148c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80148c4:	2900      	cmp	r1, #0
 80148c6:	f000 80de 	beq.w	8014a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80148ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80148ce:	d01b      	beq.n	8014908 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80148d0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80148d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80148d8:	fb0e fa0a 	mul.w	sl, lr, sl
 80148dc:	fb0e fe03 	mul.w	lr, lr, r3
 80148e0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80148e4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80148e8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80148ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80148f0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80148f4:	4453      	add	r3, sl
 80148f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80148fa:	0a1b      	lsrs	r3, r3, #8
 80148fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014900:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014904:	ea43 030c 	orr.w	r3, r3, ip
 8014908:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801490a:	2cff      	cmp	r4, #255	; 0xff
 801490c:	d021      	beq.n	8014952 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801490e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014910:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014914:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014916:	fb04 fb0b 	mul.w	fp, r4, fp
 801491a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801491c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014920:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014922:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014926:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801492a:	fb04 fa0a 	mul.w	sl, r4, sl
 801492e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014932:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014936:	44de      	add	lr, fp
 8014938:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801493c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014940:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014944:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014948:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801494c:	ea4e 040a 	orr.w	r4, lr, sl
 8014950:	940b      	str	r4, [sp, #44]	; 0x2c
 8014952:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014954:	2cff      	cmp	r4, #255	; 0xff
 8014956:	d021      	beq.n	801499c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8014958:	9c08      	ldr	r4, [sp, #32]
 801495a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801495e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014960:	fb04 fb0b 	mul.w	fp, r4, fp
 8014964:	9c08      	ldr	r4, [sp, #32]
 8014966:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801496a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801496c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014970:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014974:	fb04 fa0a 	mul.w	sl, r4, sl
 8014978:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801497c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014980:	44de      	add	lr, fp
 8014982:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014986:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801498a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801498e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014992:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014996:	ea4e 040a 	orr.w	r4, lr, sl
 801499a:	9408      	str	r4, [sp, #32]
 801499c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801499e:	2cff      	cmp	r4, #255	; 0xff
 80149a0:	d021      	beq.n	80149e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80149a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80149a4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80149a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149aa:	fb04 fb0b 	mul.w	fp, r4, fp
 80149ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80149b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80149b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149b6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80149ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80149be:	fb04 fa0a 	mul.w	sl, r4, sl
 80149c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149c6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80149ca:	44de      	add	lr, fp
 80149cc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80149d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80149d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80149d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80149e0:	ea4e 040a 	orr.w	r4, lr, sl
 80149e4:	940c      	str	r4, [sp, #48]	; 0x30
 80149e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80149e8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80149ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80149f0:	43c9      	mvns	r1, r1
 80149f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80149f6:	9c08      	ldr	r4, [sp, #32]
 80149f8:	b2c9      	uxtb	r1, r1
 80149fa:	fb08 fc0c 	mul.w	ip, r8, ip
 80149fe:	fb02 cc0e 	mla	ip, r2, lr, ip
 8014a02:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014a06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014a08:	fb00 cc0e 	mla	ip, r0, lr, ip
 8014a0c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014a10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014a12:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014a16:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8014a1a:	fb08 f80e 	mul.w	r8, r8, lr
 8014a1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014a22:	fb02 8303 	mla	r3, r2, r3, r8
 8014a26:	9a08      	ldr	r2, [sp, #32]
 8014a28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014a2c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a32:	fb00 330a 	mla	r3, r0, sl, r3
 8014a36:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8014a3a:	fb09 3900 	mla	r9, r9, r0, r3
 8014a3e:	783b      	ldrb	r3, [r7, #0]
 8014a40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014a44:	fb03 f201 	mul.w	r2, r3, r1
 8014a48:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014a4c:	1c53      	adds	r3, r2, #1
 8014a4e:	ea4c 0c09 	orr.w	ip, ip, r9
 8014a52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014a56:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8014a5a:	703b      	strb	r3, [r7, #0]
 8014a5c:	787b      	ldrb	r3, [r7, #1]
 8014a5e:	434b      	muls	r3, r1
 8014a60:	1c5a      	adds	r2, r3, #1
 8014a62:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8014a66:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8014a6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014a6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014a72:	707b      	strb	r3, [r7, #1]
 8014a74:	78bb      	ldrb	r3, [r7, #2]
 8014a76:	4359      	muls	r1, r3
 8014a78:	1c4b      	adds	r3, r1, #1
 8014a7a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8014a7e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8014a82:	f887 c002 	strb.w	ip, [r7, #2]
 8014a86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014a88:	3703      	adds	r7, #3
 8014a8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014a8c:	441a      	add	r2, r3
 8014a8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014a90:	441d      	add	r5, r3
 8014a92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a94:	9225      	str	r2, [sp, #148]	; 0x94
 8014a96:	3b01      	subs	r3, #1
 8014a98:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a9a:	e6b0      	b.n	80147fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014a9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014a9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014aa0:	441c      	add	r4, r3
 8014aa2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014aa4:	441d      	add	r5, r3
 8014aa6:	9b07      	ldr	r3, [sp, #28]
 8014aa8:	9425      	str	r4, [sp, #148]	; 0x94
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	9307      	str	r3, [sp, #28]
 8014aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ab0:	3303      	adds	r3, #3
 8014ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ab4:	e683      	b.n	80147be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8014ab6:	d026      	beq.n	8014b06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8014ab8:	9b07      	ldr	r3, [sp, #28]
 8014aba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8014abc:	3b01      	subs	r3, #1
 8014abe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014ac0:	fb00 4003 	mla	r0, r0, r3, r4
 8014ac4:	1400      	asrs	r0, r0, #16
 8014ac6:	f53f ae97 	bmi.w	80147f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014aca:	3901      	subs	r1, #1
 8014acc:	4288      	cmp	r0, r1
 8014ace:	f6bf ae93 	bge.w	80147f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014ad2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014ad4:	fb01 5303 	mla	r3, r1, r3, r5
 8014ad8:	141b      	asrs	r3, r3, #16
 8014ada:	f53f ae8d 	bmi.w	80147f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014ade:	3a01      	subs	r2, #1
 8014ae0:	4293      	cmp	r3, r2
 8014ae2:	f6bf ae89 	bge.w	80147f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ae8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8014aec:	f103 0e03 	add.w	lr, r3, #3
 8014af0:	f1bb 0f00 	cmp.w	fp, #0
 8014af4:	dc6d      	bgt.n	8014bd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8014af6:	9b07      	ldr	r3, [sp, #28]
 8014af8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8014afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014afe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014b02:	4423      	add	r3, r4
 8014b04:	930a      	str	r3, [sp, #40]	; 0x28
 8014b06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	f340 81a0 	ble.w	8014e4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8014b0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014b12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014b18:	eeb0 6a62 	vmov.f32	s12, s5
 8014b1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014b20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014b24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b28:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8014b2c:	eeb0 6a43 	vmov.f32	s12, s6
 8014b30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b34:	ee16 5a10 	vmov	r5, s12
 8014b38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014b3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014b40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014b44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014b48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014b4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014b50:	ee12 2a90 	vmov	r2, s5
 8014b54:	eef0 2a47 	vmov.f32	s5, s14
 8014b58:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b5c:	ee13 2a10 	vmov	r2, s6
 8014b60:	9327      	str	r3, [sp, #156]	; 0x9c
 8014b62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b64:	eeb0 3a67 	vmov.f32	s6, s15
 8014b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b6c:	9328      	str	r3, [sp, #160]	; 0xa0
 8014b6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b70:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b72:	3b01      	subs	r3, #1
 8014b74:	9316      	str	r3, [sp, #88]	; 0x58
 8014b76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b78:	bf08      	it	eq
 8014b7a:	4613      	moveq	r3, r2
 8014b7c:	9307      	str	r3, [sp, #28]
 8014b7e:	e610      	b.n	80147a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	f43f ae82 	beq.w	801488a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014b86:	f818 1001 	ldrb.w	r1, [r8, r1]
 8014b8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014b8e:	9108      	str	r1, [sp, #32]
 8014b90:	0e09      	lsrs	r1, r1, #24
 8014b92:	9110      	str	r1, [sp, #64]	; 0x40
 8014b94:	e679      	b.n	801488a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014b96:	f113 0801 	adds.w	r8, r3, #1
 8014b9a:	f53f af74 	bmi.w	8014a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014b9e:	4541      	cmp	r1, r8
 8014ba0:	f6ff af71 	blt.w	8014a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014ba4:	f11c 0801 	adds.w	r8, ip, #1
 8014ba8:	f53f af6d 	bmi.w	8014a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bac:	45c6      	cmp	lr, r8
 8014bae:	f6ff af6a 	blt.w	8014a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bb2:	b209      	sxth	r1, r1
 8014bb4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8014bb8:	fa0f f38e 	sxth.w	r3, lr
 8014bbc:	9100      	str	r1, [sp, #0]
 8014bbe:	4639      	mov	r1, r7
 8014bc0:	9301      	str	r3, [sp, #4]
 8014bc2:	4633      	mov	r3, r6
 8014bc4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8014bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014bcc:	f7ff fca3 	bl	8014516 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8014bd0:	e759      	b.n	8014a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014bd4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014bd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014bda:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014bde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014be0:	1427      	asrs	r7, r4, #16
 8014be2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014be4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014be8:	142b      	asrs	r3, r5, #16
 8014bea:	fb01 7303 	mla	r3, r1, r3, r7
 8014bee:	18e7      	adds	r7, r4, r3
 8014bf0:	5ce3      	ldrb	r3, [r4, r3]
 8014bf2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014bf6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8014bfa:	2a00      	cmp	r2, #0
 8014bfc:	f000 811d 	beq.w	8014e3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8014c00:	f897 8001 	ldrb.w	r8, [r7, #1]
 8014c04:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8014c08:	940d      	str	r4, [sp, #52]	; 0x34
 8014c0a:	0e24      	lsrs	r4, r4, #24
 8014c0c:	9414      	str	r4, [sp, #80]	; 0x50
 8014c0e:	b170      	cbz	r0, 8014c2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014c10:	eb07 0801 	add.w	r8, r7, r1
 8014c14:	5c79      	ldrb	r1, [r7, r1]
 8014c16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014c1a:	9109      	str	r1, [sp, #36]	; 0x24
 8014c1c:	0e09      	lsrs	r1, r1, #24
 8014c1e:	9111      	str	r1, [sp, #68]	; 0x44
 8014c20:	f898 1001 	ldrb.w	r1, [r8, #1]
 8014c24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014c28:	910e      	str	r1, [sp, #56]	; 0x38
 8014c2a:	0e09      	lsrs	r1, r1, #24
 8014c2c:	9115      	str	r1, [sp, #84]	; 0x54
 8014c2e:	b292      	uxth	r2, r2
 8014c30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014c32:	b280      	uxth	r0, r0
 8014c34:	fb02 f900 	mul.w	r9, r2, r0
 8014c38:	0112      	lsls	r2, r2, #4
 8014c3a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8014c3e:	eba2 0809 	sub.w	r8, r2, r9
 8014c42:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8014c46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c48:	b280      	uxth	r0, r0
 8014c4a:	fa1f f888 	uxth.w	r8, r8
 8014c4e:	1a09      	subs	r1, r1, r0
 8014c50:	fb08 f202 	mul.w	r2, r8, r2
 8014c54:	b289      	uxth	r1, r1
 8014c56:	fb01 220c 	mla	r2, r1, ip, r2
 8014c5a:	fb00 2204 	mla	r2, r0, r4, r2
 8014c5e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014c60:	fb09 2204 	mla	r2, r9, r4, r2
 8014c64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014c68:	2a00      	cmp	r2, #0
 8014c6a:	f000 80db 	beq.w	8014e24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8014c6e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8014c72:	d019      	beq.n	8014ca8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8014c74:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014c78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014c7c:	fb0c fa0a 	mul.w	sl, ip, sl
 8014c80:	fb0c fc03 	mul.w	ip, ip, r3
 8014c84:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014c88:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014c8c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8014c90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014c94:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8014c98:	4453      	add	r3, sl
 8014c9a:	0a3f      	lsrs	r7, r7, #8
 8014c9c:	0a1b      	lsrs	r3, r3, #8
 8014c9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014ca2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014ca6:	433b      	orrs	r3, r7
 8014ca8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014caa:	2cff      	cmp	r4, #255	; 0xff
 8014cac:	d020      	beq.n	8014cf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8014cae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014cb0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014cb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014cb6:	4367      	muls	r7, r4
 8014cb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014cba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014cbe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014cc2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014cc4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014cc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014ccc:	fb04 fa0a 	mul.w	sl, r4, sl
 8014cd0:	44bc      	add	ip, r7
 8014cd2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014cd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014cda:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014cde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014ce2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014ce6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014cea:	ea4c 040a 	orr.w	r4, ip, sl
 8014cee:	940d      	str	r4, [sp, #52]	; 0x34
 8014cf0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014cf2:	2cff      	cmp	r4, #255	; 0xff
 8014cf4:	d020      	beq.n	8014d38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8014cf6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014cf8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014cfc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014cfe:	4367      	muls	r7, r4
 8014d00:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d02:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014d06:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014d0c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014d10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d14:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d18:	44bc      	add	ip, r7
 8014d1a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014d1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d32:	ea4c 040a 	orr.w	r4, ip, sl
 8014d36:	9409      	str	r4, [sp, #36]	; 0x24
 8014d38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d3a:	2cff      	cmp	r4, #255	; 0xff
 8014d3c:	d020      	beq.n	8014d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8014d3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d40:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014d44:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d46:	4367      	muls	r7, r4
 8014d48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d4a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014d4e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d52:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d54:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014d58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d60:	44bc      	add	ip, r7
 8014d62:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014d66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d6a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d7a:	ea4c 040a 	orr.w	r4, ip, sl
 8014d7e:	940e      	str	r4, [sp, #56]	; 0x38
 8014d80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014d82:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8014d86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014d8a:	43d2      	mvns	r2, r2
 8014d8c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014d90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d92:	b2d2      	uxtb	r2, r2
 8014d94:	fb08 f707 	mul.w	r7, r8, r7
 8014d98:	fb01 770c 	mla	r7, r1, ip, r7
 8014d9c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014da0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014da2:	fb00 770c 	mla	r7, r0, ip, r7
 8014da6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014daa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014dac:	fb09 770c 	mla	r7, r9, ip, r7
 8014db0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8014db4:	fb08 f80c 	mul.w	r8, r8, ip
 8014db8:	0a3f      	lsrs	r7, r7, #8
 8014dba:	fb01 8303 	mla	r3, r1, r3, r8
 8014dbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dc0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014dc4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8014dc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014dca:	fb00 330a 	mla	r3, r0, sl, r3
 8014dce:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8014dd2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8014dd6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8014dda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014dde:	fb03 f102 	mul.w	r1, r3, r2
 8014de2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014de6:	1c4b      	adds	r3, r1, #1
 8014de8:	ea47 070c 	orr.w	r7, r7, ip
 8014dec:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014df0:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8014df4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8014df8:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8014dfc:	4353      	muls	r3, r2
 8014dfe:	1c59      	adds	r1, r3, #1
 8014e00:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8014e04:	0a3b      	lsrs	r3, r7, #8
 8014e06:	0c3f      	lsrs	r7, r7, #16
 8014e08:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014e0c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8014e10:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8014e14:	435a      	muls	r2, r3
 8014e16:	1c53      	adds	r3, r2, #1
 8014e18:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8014e1c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8014e20:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8014e24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014e26:	f10e 0e03 	add.w	lr, lr, #3
 8014e2a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e30:	441a      	add	r2, r3
 8014e32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014e34:	9225      	str	r2, [sp, #148]	; 0x94
 8014e36:	441d      	add	r5, r3
 8014e38:	e65a      	b.n	8014af0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	f43f aef7 	beq.w	8014c2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014e40:	5c79      	ldrb	r1, [r7, r1]
 8014e42:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014e46:	9109      	str	r1, [sp, #36]	; 0x24
 8014e48:	0e09      	lsrs	r1, r1, #24
 8014e4a:	9111      	str	r1, [sp, #68]	; 0x44
 8014e4c:	e6ef      	b.n	8014c2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014e4e:	b01b      	add	sp, #108	; 0x6c
 8014e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e54 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8014e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e58:	b08d      	sub	sp, #52	; 0x34
 8014e5a:	468b      	mov	fp, r1
 8014e5c:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8014e60:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8014e64:	fb0c 5703 	mla	r7, ip, r3, r5
 8014e68:	f1bc 0f00 	cmp.w	ip, #0
 8014e6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8014e6e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014e72:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8014e76:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8014e7a:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8014e7e:	eb02 0607 	add.w	r6, r2, r7
 8014e82:	f89b 4000 	ldrb.w	r4, [fp]
 8014e86:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8014e8a:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8014e8e:	f2c0 80c1 	blt.w	8015014 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8014e92:	45e6      	cmp	lr, ip
 8014e94:	f340 80be 	ble.w	8015014 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8014e98:	2d00      	cmp	r5, #0
 8014e9a:	f2c0 80b7 	blt.w	801500c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8014e9e:	42ab      	cmp	r3, r5
 8014ea0:	f340 80b4 	ble.w	801500c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8014ea4:	5dd2      	ldrb	r2, [r2, r7]
 8014ea6:	9205      	str	r2, [sp, #20]
 8014ea8:	7872      	ldrb	r2, [r6, #1]
 8014eaa:	9206      	str	r2, [sp, #24]
 8014eac:	78b2      	ldrb	r2, [r6, #2]
 8014eae:	9207      	str	r2, [sp, #28]
 8014eb0:	1c6a      	adds	r2, r5, #1
 8014eb2:	f100 80b6 	bmi.w	8015022 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014eb6:	4293      	cmp	r3, r2
 8014eb8:	f340 80b3 	ble.w	8015022 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014ebc:	f1b8 0f00 	cmp.w	r8, #0
 8014ec0:	f000 80af 	beq.w	8015022 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014ec4:	78f2      	ldrb	r2, [r6, #3]
 8014ec6:	9201      	str	r2, [sp, #4]
 8014ec8:	7932      	ldrb	r2, [r6, #4]
 8014eca:	9202      	str	r2, [sp, #8]
 8014ecc:	7972      	ldrb	r2, [r6, #5]
 8014ece:	9203      	str	r2, [sp, #12]
 8014ed0:	f11c 0c01 	adds.w	ip, ip, #1
 8014ed4:	f100 80ad 	bmi.w	8015032 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014ed8:	45e6      	cmp	lr, ip
 8014eda:	f340 80aa 	ble.w	8015032 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014ede:	f1ba 0f00 	cmp.w	sl, #0
 8014ee2:	f000 80a6 	beq.w	8015032 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014ee6:	2d00      	cmp	r5, #0
 8014ee8:	f2c0 809f 	blt.w	801502a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8014eec:	42ab      	cmp	r3, r5
 8014eee:	f340 809c 	ble.w	801502a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8014ef2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014ef6:	f816 9002 	ldrb.w	r9, [r6, r2]
 8014efa:	2203      	movs	r2, #3
 8014efc:	fb03 6c02 	mla	ip, r3, r2, r6
 8014f00:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8014f04:	f89c e002 	ldrb.w	lr, [ip, #2]
 8014f08:	9704      	str	r7, [sp, #16]
 8014f0a:	3501      	adds	r5, #1
 8014f0c:	f100 8098 	bmi.w	8015040 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f10:	42ab      	cmp	r3, r5
 8014f12:	f340 8095 	ble.w	8015040 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f16:	f1b8 0f00 	cmp.w	r8, #0
 8014f1a:	f000 8091 	beq.w	8015040 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f1e:	f04f 0c03 	mov.w	ip, #3
 8014f22:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8014f26:	5cb5      	ldrb	r5, [r6, r2]
 8014f28:	fb03 620c 	mla	r2, r3, ip, r6
 8014f2c:	fb03 630c 	mla	r3, r3, ip, r6
 8014f30:	7912      	ldrb	r2, [r2, #4]
 8014f32:	795e      	ldrb	r6, [r3, #5]
 8014f34:	fa1f f388 	uxth.w	r3, r8
 8014f38:	fa1f fc8a 	uxth.w	ip, sl
 8014f3c:	fb03 f70c 	mul.w	r7, r3, ip
 8014f40:	011b      	lsls	r3, r3, #4
 8014f42:	9708      	str	r7, [sp, #32]
 8014f44:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8014f48:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8014f4c:	1bdb      	subs	r3, r3, r7
 8014f4e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8014f52:	fa1f fc8c 	uxth.w	ip, ip
 8014f56:	b29b      	uxth	r3, r3
 8014f58:	9709      	str	r7, [sp, #36]	; 0x24
 8014f5a:	ebaa 0a0c 	sub.w	sl, sl, ip
 8014f5e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014f60:	930a      	str	r3, [sp, #40]	; 0x28
 8014f62:	fa1f fa8a 	uxth.w	sl, sl
 8014f66:	ea6f 0807 	mvn.w	r8, r7
 8014f6a:	9f01      	ldr	r7, [sp, #4]
 8014f6c:	435f      	muls	r7, r3
 8014f6e:	9b05      	ldr	r3, [sp, #20]
 8014f70:	fa5f f888 	uxtb.w	r8, r8
 8014f74:	fb0a 7703 	mla	r7, sl, r3, r7
 8014f78:	9b08      	ldr	r3, [sp, #32]
 8014f7a:	fb14 f408 	smulbb	r4, r4, r8
 8014f7e:	fb0c 7709 	mla	r7, ip, r9, r7
 8014f82:	fb10 f008 	smulbb	r0, r0, r8
 8014f86:	fb11 f108 	smulbb	r1, r1, r8
 8014f8a:	fb03 7705 	mla	r7, r3, r5, r7
 8014f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f90:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8014f94:	fb07 4703 	mla	r7, r7, r3, r4
 8014f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f9a:	b2bf      	uxth	r7, r7
 8014f9c:	1c7c      	adds	r4, r7, #1
 8014f9e:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8014fa2:	1224      	asrs	r4, r4, #8
 8014fa4:	f88b 4000 	strb.w	r4, [fp]
 8014fa8:	9c02      	ldr	r4, [sp, #8]
 8014faa:	435c      	muls	r4, r3
 8014fac:	9b06      	ldr	r3, [sp, #24]
 8014fae:	fb0a 4403 	mla	r4, sl, r3, r4
 8014fb2:	9b04      	ldr	r3, [sp, #16]
 8014fb4:	fb0c 4403 	mla	r4, ip, r3, r4
 8014fb8:	9b08      	ldr	r3, [sp, #32]
 8014fba:	fb03 4402 	mla	r4, r3, r2, r4
 8014fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014fc2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8014fc6:	fb04 0403 	mla	r4, r4, r3, r0
 8014fca:	9b03      	ldr	r3, [sp, #12]
 8014fcc:	435a      	muls	r2, r3
 8014fce:	b2a4      	uxth	r4, r4
 8014fd0:	4613      	mov	r3, r2
 8014fd2:	9a07      	ldr	r2, [sp, #28]
 8014fd4:	1c60      	adds	r0, r4, #1
 8014fd6:	fb0a 3a02 	mla	sl, sl, r2, r3
 8014fda:	9b08      	ldr	r3, [sp, #32]
 8014fdc:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8014fe0:	fb0c ac0e 	mla	ip, ip, lr, sl
 8014fe4:	1224      	asrs	r4, r4, #8
 8014fe6:	fb03 c606 	mla	r6, r3, r6, ip
 8014fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fec:	f88b 4001 	strb.w	r4, [fp, #1]
 8014ff0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8014ff4:	fb06 1103 	mla	r1, r6, r3, r1
 8014ff8:	b289      	uxth	r1, r1
 8014ffa:	1c4e      	adds	r6, r1, #1
 8014ffc:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8015000:	1209      	asrs	r1, r1, #8
 8015002:	f88b 1002 	strb.w	r1, [fp, #2]
 8015006:	b00d      	add	sp, #52	; 0x34
 8015008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801500c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015010:	9405      	str	r4, [sp, #20]
 8015012:	e74d      	b.n	8014eb0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8015014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015018:	9401      	str	r4, [sp, #4]
 801501a:	9405      	str	r4, [sp, #20]
 801501c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015020:	e756      	b.n	8014ed0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8015022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015026:	9401      	str	r4, [sp, #4]
 8015028:	e752      	b.n	8014ed0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801502a:	468e      	mov	lr, r1
 801502c:	9004      	str	r0, [sp, #16]
 801502e:	46a1      	mov	r9, r4
 8015030:	e76b      	b.n	8014f0a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8015032:	460e      	mov	r6, r1
 8015034:	4602      	mov	r2, r0
 8015036:	4625      	mov	r5, r4
 8015038:	468e      	mov	lr, r1
 801503a:	9004      	str	r0, [sp, #16]
 801503c:	46a1      	mov	r9, r4
 801503e:	e779      	b.n	8014f34 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8015040:	460e      	mov	r6, r1
 8015042:	4602      	mov	r2, r0
 8015044:	4625      	mov	r5, r4
 8015046:	e775      	b.n	8014f34 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08015048 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801504c:	b09f      	sub	sp, #124	; 0x7c
 801504e:	920e      	str	r2, [sp, #56]	; 0x38
 8015050:	9307      	str	r3, [sp, #28]
 8015052:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015054:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8015058:	901d      	str	r0, [sp, #116]	; 0x74
 801505a:	930c      	str	r3, [sp, #48]	; 0x30
 801505c:	6850      	ldr	r0, [r2, #4]
 801505e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015060:	6812      	ldr	r2, [r2, #0]
 8015062:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8015066:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801506a:	fb00 1303 	mla	r3, r0, r3, r1
 801506e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015072:	18d3      	adds	r3, r2, r3
 8015074:	9308      	str	r3, [sp, #32]
 8015076:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	930a      	str	r3, [sp, #40]	; 0x28
 801507c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801507e:	43db      	mvns	r3, r3
 8015080:	b2db      	uxtb	r3, r3
 8015082:	9309      	str	r3, [sp, #36]	; 0x24
 8015084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015086:	2b00      	cmp	r3, #0
 8015088:	dc03      	bgt.n	8015092 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801508a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801508c:	2b00      	cmp	r3, #0
 801508e:	f340 81f5 	ble.w	801547c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8015092:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015094:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015098:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801509c:	1e48      	subs	r0, r1, #1
 801509e:	1e54      	subs	r4, r2, #1
 80150a0:	9b07      	ldr	r3, [sp, #28]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	f340 80d5 	ble.w	8015252 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80150a8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80150ac:	ea4f 4328 	mov.w	r3, r8, asr #16
 80150b0:	d406      	bmi.n	80150c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150b2:	4285      	cmp	r5, r0
 80150b4:	da04      	bge.n	80150c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	db02      	blt.n	80150c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150ba:	42a3      	cmp	r3, r4
 80150bc:	f2c0 80ca 	blt.w	8015254 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80150c0:	3501      	adds	r5, #1
 80150c2:	f100 80bb 	bmi.w	801523c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150c6:	42a9      	cmp	r1, r5
 80150c8:	f2c0 80b8 	blt.w	801523c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150cc:	3301      	adds	r3, #1
 80150ce:	f100 80b5 	bmi.w	801523c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150d2:	429a      	cmp	r2, r3
 80150d4:	f2c0 80b2 	blt.w	801523c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150d8:	9b07      	ldr	r3, [sp, #28]
 80150da:	9d08      	ldr	r5, [sp, #32]
 80150dc:	930d      	str	r3, [sp, #52]	; 0x34
 80150de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f340 80d6 	ble.w	8015292 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80150e6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80150e8:	ea4f 4428 	mov.w	r4, r8, asr #16
 80150ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80150ee:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80150f2:	68c6      	ldr	r6, [r0, #12]
 80150f4:	ea5f 402a 	movs.w	r0, sl, asr #16
 80150f8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	f100 810f 	bmi.w	8015320 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015102:	1e5f      	subs	r7, r3, #1
 8015104:	42b8      	cmp	r0, r7
 8015106:	f280 810b 	bge.w	8015320 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801510a:	2c00      	cmp	r4, #0
 801510c:	f2c0 8108 	blt.w	8015320 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015110:	1e77      	subs	r7, r6, #1
 8015112:	42bc      	cmp	r4, r7
 8015114:	f280 8104 	bge.w	8015320 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015118:	b21b      	sxth	r3, r3
 801511a:	fb04 0003 	mla	r0, r4, r3, r0
 801511e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015120:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015124:	1826      	adds	r6, r4, r0
 8015126:	5c24      	ldrb	r4, [r4, r0]
 8015128:	78b7      	ldrb	r7, [r6, #2]
 801512a:	7870      	ldrb	r0, [r6, #1]
 801512c:	970f      	str	r7, [sp, #60]	; 0x3c
 801512e:	7977      	ldrb	r7, [r6, #5]
 8015130:	f896 e003 	ldrb.w	lr, [r6, #3]
 8015134:	f896 c004 	ldrb.w	ip, [r6, #4]
 8015138:	9710      	str	r7, [sp, #64]	; 0x40
 801513a:	b1c9      	cbz	r1, 8015170 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801513c:	f04f 0b03 	mov.w	fp, #3
 8015140:	f06f 0904 	mvn.w	r9, #4
 8015144:	3605      	adds	r6, #5
 8015146:	fb13 930b 	smlabb	r3, r3, fp, r9
 801514a:	eb06 0b03 	add.w	fp, r6, r3
 801514e:	5cf3      	ldrb	r3, [r6, r3]
 8015150:	9311      	str	r3, [sp, #68]	; 0x44
 8015152:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8015156:	9313      	str	r3, [sp, #76]	; 0x4c
 8015158:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801515c:	9315      	str	r3, [sp, #84]	; 0x54
 801515e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8015162:	9312      	str	r3, [sp, #72]	; 0x48
 8015164:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8015168:	9314      	str	r3, [sp, #80]	; 0x50
 801516a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801516e:	9316      	str	r3, [sp, #88]	; 0x58
 8015170:	b292      	uxth	r2, r2
 8015172:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015174:	b289      	uxth	r1, r1
 8015176:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801517a:	fb02 f601 	mul.w	r6, r2, r1
 801517e:	0112      	lsls	r2, r2, #4
 8015180:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8015184:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8015188:	1b92      	subs	r2, r2, r6
 801518a:	b289      	uxth	r1, r1
 801518c:	b292      	uxth	r2, r2
 801518e:	eba9 0901 	sub.w	r9, r9, r1
 8015192:	fb02 fe0e 	mul.w	lr, r2, lr
 8015196:	fa1f f989 	uxth.w	r9, r9
 801519a:	fb02 fc0c 	mul.w	ip, r2, ip
 801519e:	fb09 e404 	mla	r4, r9, r4, lr
 80151a2:	f895 e000 	ldrb.w	lr, [r5]
 80151a6:	fb09 c000 	mla	r0, r9, r0, ip
 80151aa:	fb01 4407 	mla	r4, r1, r7, r4
 80151ae:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80151b0:	fb06 4407 	mla	r4, r6, r7, r4
 80151b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80151b6:	fb1e fe07 	smulbb	lr, lr, r7
 80151ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80151be:	fb04 e403 	mla	r4, r4, r3, lr
 80151c2:	b2a4      	uxth	r4, r4
 80151c4:	f104 0e01 	add.w	lr, r4, #1
 80151c8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80151cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80151ce:	fb01 0004 	mla	r0, r1, r4, r0
 80151d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80151d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80151d8:	fb06 0004 	mla	r0, r6, r4, r0
 80151dc:	786c      	ldrb	r4, [r5, #1]
 80151de:	f885 e000 	strb.w	lr, [r5]
 80151e2:	fb14 f407 	smulbb	r4, r4, r7
 80151e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80151ea:	fb00 4003 	mla	r0, r0, r3, r4
 80151ee:	b280      	uxth	r0, r0
 80151f0:	1c44      	adds	r4, r0, #1
 80151f2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80151f6:	1200      	asrs	r0, r0, #8
 80151f8:	7068      	strb	r0, [r5, #1]
 80151fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80151fc:	4342      	muls	r2, r0
 80151fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015200:	fb09 2200 	mla	r2, r9, r0, r2
 8015204:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015206:	fb01 2100 	mla	r1, r1, r0, r2
 801520a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801520c:	fb06 1602 	mla	r6, r6, r2, r1
 8015210:	78a9      	ldrb	r1, [r5, #2]
 8015212:	fb11 f107 	smulbb	r1, r1, r7
 8015216:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801521a:	fb06 1303 	mla	r3, r6, r3, r1
 801521e:	b29b      	uxth	r3, r3
 8015220:	1c5e      	adds	r6, r3, #1
 8015222:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8015226:	121b      	asrs	r3, r3, #8
 8015228:	70ab      	strb	r3, [r5, #2]
 801522a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801522c:	3503      	adds	r5, #3
 801522e:	449a      	add	sl, r3
 8015230:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015232:	4498      	add	r8, r3
 8015234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015236:	3b01      	subs	r3, #1
 8015238:	930d      	str	r3, [sp, #52]	; 0x34
 801523a:	e750      	b.n	80150de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801523c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801523e:	449a      	add	sl, r3
 8015240:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015242:	4498      	add	r8, r3
 8015244:	9b07      	ldr	r3, [sp, #28]
 8015246:	3b01      	subs	r3, #1
 8015248:	9307      	str	r3, [sp, #28]
 801524a:	9b08      	ldr	r3, [sp, #32]
 801524c:	3303      	adds	r3, #3
 801524e:	9308      	str	r3, [sp, #32]
 8015250:	e726      	b.n	80150a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8015252:	d026      	beq.n	80152a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8015254:	9b07      	ldr	r3, [sp, #28]
 8015256:	982b      	ldr	r0, [sp, #172]	; 0xac
 8015258:	3b01      	subs	r3, #1
 801525a:	fb00 a003 	mla	r0, r0, r3, sl
 801525e:	1400      	asrs	r0, r0, #16
 8015260:	f53f af3a 	bmi.w	80150d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015264:	3901      	subs	r1, #1
 8015266:	4288      	cmp	r0, r1
 8015268:	f6bf af36 	bge.w	80150d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801526c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801526e:	fb01 8303 	mla	r3, r1, r3, r8
 8015272:	141b      	asrs	r3, r3, #16
 8015274:	f53f af30 	bmi.w	80150d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015278:	3a01      	subs	r2, #1
 801527a:	4293      	cmp	r3, r2
 801527c:	f6bf af2c 	bge.w	80150d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015280:	9b08      	ldr	r3, [sp, #32]
 8015282:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015286:	1cdd      	adds	r5, r3, #3
 8015288:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801528c:	f1bc 0f00 	cmp.w	ip, #0
 8015290:	dc5f      	bgt.n	8015352 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8015292:	9b07      	ldr	r3, [sp, #28]
 8015294:	9a08      	ldr	r2, [sp, #32]
 8015296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801529a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801529e:	441a      	add	r2, r3
 80152a0:	9208      	str	r2, [sp, #32]
 80152a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f340 80e9 	ble.w	801547c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80152aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80152b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80152b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80152b8:	eef0 6a62 	vmov.f32	s13, s5
 80152bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80152c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80152c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80152c8:	ee16 aa90 	vmov	sl, s13
 80152cc:	eef0 6a43 	vmov.f32	s13, s6
 80152d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80152d4:	ee16 8a90 	vmov	r8, s13
 80152d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80152dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80152e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80152e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80152e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80152ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80152f0:	ee12 2a90 	vmov	r2, s5
 80152f4:	eef0 2a47 	vmov.f32	s5, s14
 80152f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80152fc:	ee13 2a10 	vmov	r2, s6
 8015300:	932b      	str	r3, [sp, #172]	; 0xac
 8015302:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015304:	eeb0 3a67 	vmov.f32	s6, s15
 8015308:	fb92 f3f3 	sdiv	r3, r2, r3
 801530c:	932c      	str	r3, [sp, #176]	; 0xb0
 801530e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015312:	3b01      	subs	r3, #1
 8015314:	930b      	str	r3, [sp, #44]	; 0x2c
 8015316:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015318:	bf08      	it	eq
 801531a:	4613      	moveq	r3, r2
 801531c:	9307      	str	r3, [sp, #28]
 801531e:	e6b1      	b.n	8015084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015320:	1c47      	adds	r7, r0, #1
 8015322:	d482      	bmi.n	801522a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015324:	42bb      	cmp	r3, r7
 8015326:	db80      	blt.n	801522a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015328:	1c67      	adds	r7, r4, #1
 801532a:	f53f af7e 	bmi.w	801522a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801532e:	42be      	cmp	r6, r7
 8015330:	f6ff af7b 	blt.w	801522a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015334:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015336:	b236      	sxth	r6, r6
 8015338:	9001      	str	r0, [sp, #4]
 801533a:	b21b      	sxth	r3, r3
 801533c:	9600      	str	r6, [sp, #0]
 801533e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015340:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8015344:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8015348:	4629      	mov	r1, r5
 801534a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801534c:	f7ff fd82 	bl	8014e54 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8015350:	e76b      	b.n	801522a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015352:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8015354:	ea4f 402a 	mov.w	r0, sl, asr #16
 8015358:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801535c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8015360:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8015364:	ea4f 4128 	mov.w	r1, r8, asr #16
 8015368:	fb07 0101 	mla	r1, r7, r1, r0
 801536c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801536e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015372:	1844      	adds	r4, r0, r1
 8015374:	5c40      	ldrb	r0, [r0, r1]
 8015376:	78a6      	ldrb	r6, [r4, #2]
 8015378:	7861      	ldrb	r1, [r4, #1]
 801537a:	960f      	str	r6, [sp, #60]	; 0x3c
 801537c:	78e6      	ldrb	r6, [r4, #3]
 801537e:	910d      	str	r1, [sp, #52]	; 0x34
 8015380:	9610      	str	r6, [sp, #64]	; 0x40
 8015382:	f894 9004 	ldrb.w	r9, [r4, #4]
 8015386:	f894 b005 	ldrb.w	fp, [r4, #5]
 801538a:	b192      	cbz	r2, 80153b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801538c:	f06f 0604 	mvn.w	r6, #4
 8015390:	2103      	movs	r1, #3
 8015392:	3405      	adds	r4, #5
 8015394:	fb17 6701 	smlabb	r7, r7, r1, r6
 8015398:	19e6      	adds	r6, r4, r7
 801539a:	5de4      	ldrb	r4, [r4, r7]
 801539c:	9417      	str	r4, [sp, #92]	; 0x5c
 801539e:	7874      	ldrb	r4, [r6, #1]
 80153a0:	9419      	str	r4, [sp, #100]	; 0x64
 80153a2:	78b4      	ldrb	r4, [r6, #2]
 80153a4:	941b      	str	r4, [sp, #108]	; 0x6c
 80153a6:	78f4      	ldrb	r4, [r6, #3]
 80153a8:	9418      	str	r4, [sp, #96]	; 0x60
 80153aa:	7934      	ldrb	r4, [r6, #4]
 80153ac:	941a      	str	r4, [sp, #104]	; 0x68
 80153ae:	7974      	ldrb	r4, [r6, #5]
 80153b0:	941c      	str	r4, [sp, #112]	; 0x70
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80153b6:	b292      	uxth	r2, r2
 80153b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153ba:	3503      	adds	r5, #3
 80153bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80153c0:	fb03 f402 	mul.w	r4, r3, r2
 80153c4:	011b      	lsls	r3, r3, #4
 80153c6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80153ca:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80153ce:	1b1b      	subs	r3, r3, r4
 80153d0:	b292      	uxth	r2, r2
 80153d2:	b29b      	uxth	r3, r3
 80153d4:	1ab6      	subs	r6, r6, r2
 80153d6:	435f      	muls	r7, r3
 80153d8:	b2b6      	uxth	r6, r6
 80153da:	fb03 f909 	mul.w	r9, r3, r9
 80153de:	fb03 fb0b 	mul.w	fp, r3, fp
 80153e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153e4:	fb06 7000 	mla	r0, r6, r0, r7
 80153e8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80153ea:	fb06 bb03 	mla	fp, r6, r3, fp
 80153ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153f0:	fb02 0007 	mla	r0, r2, r7, r0
 80153f4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80153f6:	fb02 bb03 	mla	fp, r2, r3, fp
 80153fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80153fc:	fb04 0007 	mla	r0, r4, r7, r0
 8015400:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8015404:	fb17 f701 	smulbb	r7, r7, r1
 8015408:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801540c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801540e:	fb00 700e 	mla	r0, r0, lr, r7
 8015412:	fb06 9101 	mla	r1, r6, r1, r9
 8015416:	b280      	uxth	r0, r0
 8015418:	1c47      	adds	r7, r0, #1
 801541a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801541e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015420:	1200      	asrs	r0, r0, #8
 8015422:	f805 0c06 	strb.w	r0, [r5, #-6]
 8015426:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015428:	fb02 1100 	mla	r1, r2, r0, r1
 801542c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801542e:	fb04 1100 	mla	r1, r4, r0, r1
 8015432:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8015436:	fb04 b403 	mla	r4, r4, r3, fp
 801543a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801543e:	fb10 f007 	smulbb	r0, r0, r7
 8015442:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015446:	fb13 f307 	smulbb	r3, r3, r7
 801544a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801544e:	fb01 010e 	mla	r1, r1, lr, r0
 8015452:	fb04 340e 	mla	r4, r4, lr, r3
 8015456:	b289      	uxth	r1, r1
 8015458:	b2a4      	uxth	r4, r4
 801545a:	1c48      	adds	r0, r1, #1
 801545c:	1c63      	adds	r3, r4, #1
 801545e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8015462:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8015466:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015468:	1209      	asrs	r1, r1, #8
 801546a:	1224      	asrs	r4, r4, #8
 801546c:	449a      	add	sl, r3
 801546e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015470:	f805 1c05 	strb.w	r1, [r5, #-5]
 8015474:	f805 4c04 	strb.w	r4, [r5, #-4]
 8015478:	4498      	add	r8, r3
 801547a:	e707      	b.n	801528c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801547c:	b01f      	add	sp, #124	; 0x7c
 801547e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8015482:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015486:	b087      	sub	sp, #28
 8015488:	780d      	ldrb	r5, [r1, #0]
 801548a:	784c      	ldrb	r4, [r1, #1]
 801548c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8015490:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8015494:	9004      	str	r0, [sp, #16]
 8015496:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801549a:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801549e:	9005      	str	r0, [sp, #20]
 80154a0:	fb06 bc03 	mla	ip, r6, r3, fp
 80154a4:	2e00      	cmp	r6, #0
 80154a6:	7888      	ldrb	r0, [r1, #2]
 80154a8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80154ac:	eb02 090c 	add.w	r9, r2, ip
 80154b0:	f2c0 8084 	blt.w	80155bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80154b4:	42b7      	cmp	r7, r6
 80154b6:	f340 8081 	ble.w	80155bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80154ba:	f1bb 0f00 	cmp.w	fp, #0
 80154be:	db79      	blt.n	80155b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80154c0:	455b      	cmp	r3, fp
 80154c2:	dd77      	ble.n	80155b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80154c4:	f812 200c 	ldrb.w	r2, [r2, ip]
 80154c8:	9201      	str	r2, [sp, #4]
 80154ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 80154ce:	9202      	str	r2, [sp, #8]
 80154d0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80154d4:	9203      	str	r2, [sp, #12]
 80154d6:	f11b 0201 	adds.w	r2, fp, #1
 80154da:	d476      	bmi.n	80155ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80154dc:	4293      	cmp	r3, r2
 80154de:	dd74      	ble.n	80155ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80154e0:	9a04      	ldr	r2, [sp, #16]
 80154e2:	2a00      	cmp	r2, #0
 80154e4:	d071      	beq.n	80155ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80154e6:	f899 8003 	ldrb.w	r8, [r9, #3]
 80154ea:	f899 c004 	ldrb.w	ip, [r9, #4]
 80154ee:	f899 a005 	ldrb.w	sl, [r9, #5]
 80154f2:	3601      	adds	r6, #1
 80154f4:	d471      	bmi.n	80155da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80154f6:	42b7      	cmp	r7, r6
 80154f8:	dd6f      	ble.n	80155da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80154fa:	9a05      	ldr	r2, [sp, #20]
 80154fc:	2a00      	cmp	r2, #0
 80154fe:	d06c      	beq.n	80155da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8015500:	f1bb 0f00 	cmp.w	fp, #0
 8015504:	db65      	blt.n	80155d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8015506:	455b      	cmp	r3, fp
 8015508:	dd63      	ble.n	80155d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801550a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801550e:	f819 e002 	ldrb.w	lr, [r9, r2]
 8015512:	2203      	movs	r2, #3
 8015514:	fb03 9602 	mla	r6, r3, r2, r9
 8015518:	7877      	ldrb	r7, [r6, #1]
 801551a:	78b6      	ldrb	r6, [r6, #2]
 801551c:	f11b 0b01 	adds.w	fp, fp, #1
 8015520:	d40c      	bmi.n	801553c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8015522:	455b      	cmp	r3, fp
 8015524:	dd0a      	ble.n	801553c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8015526:	9a04      	ldr	r2, [sp, #16]
 8015528:	b142      	cbz	r2, 801553c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801552a:	2203      	movs	r2, #3
 801552c:	fb13 2002 	smlabb	r0, r3, r2, r2
 8015530:	f819 5000 	ldrb.w	r5, [r9, r0]
 8015534:	fb03 9002 	mla	r0, r3, r2, r9
 8015538:	7904      	ldrb	r4, [r0, #4]
 801553a:	7940      	ldrb	r0, [r0, #5]
 801553c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015540:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015544:	fb03 fb02 	mul.w	fp, r3, r2
 8015548:	011b      	lsls	r3, r3, #4
 801554a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801554e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8015552:	eba3 030b 	sub.w	r3, r3, fp
 8015556:	b292      	uxth	r2, r2
 8015558:	b29b      	uxth	r3, r3
 801555a:	eba9 0902 	sub.w	r9, r9, r2
 801555e:	9304      	str	r3, [sp, #16]
 8015560:	fa1f f989 	uxth.w	r9, r9
 8015564:	fb03 f808 	mul.w	r8, r3, r8
 8015568:	9b01      	ldr	r3, [sp, #4]
 801556a:	fb09 8803 	mla	r8, r9, r3, r8
 801556e:	9b04      	ldr	r3, [sp, #16]
 8015570:	fb03 fc0c 	mul.w	ip, r3, ip
 8015574:	9b02      	ldr	r3, [sp, #8]
 8015576:	fb02 880e 	mla	r8, r2, lr, r8
 801557a:	fb09 cc03 	mla	ip, r9, r3, ip
 801557e:	9b04      	ldr	r3, [sp, #16]
 8015580:	fb0b 8805 	mla	r8, fp, r5, r8
 8015584:	fb02 c707 	mla	r7, r2, r7, ip
 8015588:	fb03 f30a 	mul.w	r3, r3, sl
 801558c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015590:	fb0b 7404 	mla	r4, fp, r4, r7
 8015594:	f881 8000 	strb.w	r8, [r1]
 8015598:	1224      	asrs	r4, r4, #8
 801559a:	704c      	strb	r4, [r1, #1]
 801559c:	9c03      	ldr	r4, [sp, #12]
 801559e:	fb09 3904 	mla	r9, r9, r4, r3
 80155a2:	fb02 9206 	mla	r2, r2, r6, r9
 80155a6:	fb0b 2000 	mla	r0, fp, r0, r2
 80155aa:	1200      	asrs	r0, r0, #8
 80155ac:	7088      	strb	r0, [r1, #2]
 80155ae:	b007      	add	sp, #28
 80155b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155b4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80155b8:	9501      	str	r5, [sp, #4]
 80155ba:	e78c      	b.n	80154d6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80155bc:	4682      	mov	sl, r0
 80155be:	46a4      	mov	ip, r4
 80155c0:	46a8      	mov	r8, r5
 80155c2:	9501      	str	r5, [sp, #4]
 80155c4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80155c8:	e793      	b.n	80154f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80155ca:	4682      	mov	sl, r0
 80155cc:	46a4      	mov	ip, r4
 80155ce:	46a8      	mov	r8, r5
 80155d0:	e78f      	b.n	80154f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80155d2:	4606      	mov	r6, r0
 80155d4:	4627      	mov	r7, r4
 80155d6:	46ae      	mov	lr, r5
 80155d8:	e7a0      	b.n	801551c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80155da:	4606      	mov	r6, r0
 80155dc:	4627      	mov	r7, r4
 80155de:	46ae      	mov	lr, r5
 80155e0:	e7ac      	b.n	801553c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080155e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80155e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155e6:	b09b      	sub	sp, #108	; 0x6c
 80155e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80155ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80155ec:	9019      	str	r0, [sp, #100]	; 0x64
 80155ee:	9109      	str	r1, [sp, #36]	; 0x24
 80155f0:	6850      	ldr	r0, [r2, #4]
 80155f2:	9306      	str	r3, [sp, #24]
 80155f4:	6812      	ldr	r2, [r2, #0]
 80155f6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80155fa:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80155fe:	fb00 1303 	mla	r3, r0, r3, r1
 8015602:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015606:	18d3      	adds	r3, r2, r3
 8015608:	9307      	str	r3, [sp, #28]
 801560a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	9308      	str	r3, [sp, #32]
 8015610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015612:	2b00      	cmp	r3, #0
 8015614:	dc03      	bgt.n	801561e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015618:	2b00      	cmp	r3, #0
 801561a:	f340 81ab 	ble.w	8015974 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801561e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015620:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015624:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015628:	1e48      	subs	r0, r1, #1
 801562a:	1e55      	subs	r5, r2, #1
 801562c:	9b06      	ldr	r3, [sp, #24]
 801562e:	2b00      	cmp	r3, #0
 8015630:	f340 80b1 	ble.w	8015796 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015634:	ea5f 462b 	movs.w	r6, fp, asr #16
 8015638:	ea4f 4324 	mov.w	r3, r4, asr #16
 801563c:	d406      	bmi.n	801564c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801563e:	4286      	cmp	r6, r0
 8015640:	da04      	bge.n	801564c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015642:	2b00      	cmp	r3, #0
 8015644:	db02      	blt.n	801564c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015646:	42ab      	cmp	r3, r5
 8015648:	f2c0 80a6 	blt.w	8015798 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801564c:	3601      	adds	r6, #1
 801564e:	f100 8097 	bmi.w	8015780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015652:	42b1      	cmp	r1, r6
 8015654:	f2c0 8094 	blt.w	8015780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015658:	3301      	adds	r3, #1
 801565a:	f100 8091 	bmi.w	8015780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801565e:	429a      	cmp	r2, r3
 8015660:	f2c0 808e 	blt.w	8015780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015664:	9b06      	ldr	r3, [sp, #24]
 8015666:	9e07      	ldr	r6, [sp, #28]
 8015668:	930a      	str	r3, [sp, #40]	; 0x28
 801566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801566c:	2b00      	cmp	r3, #0
 801566e:	f340 80b0 	ble.w	80157d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8015672:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015674:	1425      	asrs	r5, r4, #16
 8015676:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015678:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801567c:	68c7      	ldr	r7, [r0, #12]
 801567e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8015682:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8015686:	689b      	ldr	r3, [r3, #8]
 8015688:	f100 80ea 	bmi.w	8015860 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801568c:	f103 3cff 	add.w	ip, r3, #4294967295
 8015690:	4560      	cmp	r0, ip
 8015692:	f280 80e5 	bge.w	8015860 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015696:	2d00      	cmp	r5, #0
 8015698:	f2c0 80e2 	blt.w	8015860 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801569c:	f107 3cff 	add.w	ip, r7, #4294967295
 80156a0:	4565      	cmp	r5, ip
 80156a2:	f280 80dd 	bge.w	8015860 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156a6:	b21b      	sxth	r3, r3
 80156a8:	fb05 0003 	mla	r0, r5, r3, r0
 80156ac:	9d08      	ldr	r5, [sp, #32]
 80156ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80156b2:	182f      	adds	r7, r5, r0
 80156b4:	5c2d      	ldrb	r5, [r5, r0]
 80156b6:	7878      	ldrb	r0, [r7, #1]
 80156b8:	f897 e002 	ldrb.w	lr, [r7, #2]
 80156bc:	900c      	str	r0, [sp, #48]	; 0x30
 80156be:	f897 9003 	ldrb.w	r9, [r7, #3]
 80156c2:	f897 8004 	ldrb.w	r8, [r7, #4]
 80156c6:	f897 a005 	ldrb.w	sl, [r7, #5]
 80156ca:	b1c9      	cbz	r1, 8015700 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80156cc:	f04f 0c03 	mov.w	ip, #3
 80156d0:	f06f 0004 	mvn.w	r0, #4
 80156d4:	3705      	adds	r7, #5
 80156d6:	fb13 030c 	smlabb	r3, r3, ip, r0
 80156da:	eb07 0c03 	add.w	ip, r7, r3
 80156de:	5cfb      	ldrb	r3, [r7, r3]
 80156e0:	930d      	str	r3, [sp, #52]	; 0x34
 80156e2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80156e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80156e8:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80156ec:	9311      	str	r3, [sp, #68]	; 0x44
 80156ee:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80156f2:	930e      	str	r3, [sp, #56]	; 0x38
 80156f4:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80156f8:	9310      	str	r3, [sp, #64]	; 0x40
 80156fa:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80156fe:	9312      	str	r3, [sp, #72]	; 0x48
 8015700:	b292      	uxth	r2, r2
 8015702:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015704:	b289      	uxth	r1, r1
 8015706:	fb02 f301 	mul.w	r3, r2, r1
 801570a:	0112      	lsls	r2, r2, #4
 801570c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8015710:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8015714:	1ad2      	subs	r2, r2, r3
 8015716:	b289      	uxth	r1, r1
 8015718:	b292      	uxth	r2, r2
 801571a:	1a7f      	subs	r7, r7, r1
 801571c:	fb02 f909 	mul.w	r9, r2, r9
 8015720:	b2bf      	uxth	r7, r7
 8015722:	fb02 f808 	mul.w	r8, r2, r8
 8015726:	fb02 fa0a 	mul.w	sl, r2, sl
 801572a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801572c:	fb07 9905 	mla	r9, r7, r5, r9
 8015730:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015732:	fb07 8800 	mla	r8, r7, r0, r8
 8015736:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015738:	fb07 aa0e 	mla	sl, r7, lr, sl
 801573c:	fb01 9905 	mla	r9, r1, r5, r9
 8015740:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015742:	fb01 8800 	mla	r8, r1, r0, r8
 8015746:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015748:	fb01 a102 	mla	r1, r1, r2, sl
 801574c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801574e:	fb03 9905 	mla	r9, r3, r5, r9
 8015752:	fb03 8800 	mla	r8, r3, r0, r8
 8015756:	fb03 1302 	mla	r3, r3, r2, r1
 801575a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801575e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015762:	121b      	asrs	r3, r3, #8
 8015764:	f886 9000 	strb.w	r9, [r6]
 8015768:	f886 8001 	strb.w	r8, [r6, #1]
 801576c:	70b3      	strb	r3, [r6, #2]
 801576e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015770:	3603      	adds	r6, #3
 8015772:	449b      	add	fp, r3
 8015774:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015776:	441c      	add	r4, r3
 8015778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801577a:	3b01      	subs	r3, #1
 801577c:	930a      	str	r3, [sp, #40]	; 0x28
 801577e:	e774      	b.n	801566a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8015780:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015782:	449b      	add	fp, r3
 8015784:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015786:	441c      	add	r4, r3
 8015788:	9b06      	ldr	r3, [sp, #24]
 801578a:	3b01      	subs	r3, #1
 801578c:	9306      	str	r3, [sp, #24]
 801578e:	9b07      	ldr	r3, [sp, #28]
 8015790:	3303      	adds	r3, #3
 8015792:	9307      	str	r3, [sp, #28]
 8015794:	e74a      	b.n	801562c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015796:	d024      	beq.n	80157e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8015798:	9b06      	ldr	r3, [sp, #24]
 801579a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801579c:	3b01      	subs	r3, #1
 801579e:	fb00 b003 	mla	r0, r0, r3, fp
 80157a2:	1400      	asrs	r0, r0, #16
 80157a4:	f53f af5e 	bmi.w	8015664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157a8:	3901      	subs	r1, #1
 80157aa:	4288      	cmp	r0, r1
 80157ac:	f6bf af5a 	bge.w	8015664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157b0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80157b2:	fb01 4303 	mla	r3, r1, r3, r4
 80157b6:	141b      	asrs	r3, r3, #16
 80157b8:	f53f af54 	bmi.w	8015664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157bc:	3a01      	subs	r2, #1
 80157be:	4293      	cmp	r3, r2
 80157c0:	f6bf af50 	bge.w	8015664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157c4:	9b07      	ldr	r3, [sp, #28]
 80157c6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80157ca:	1cde      	adds	r6, r3, #3
 80157cc:	f1be 0f00 	cmp.w	lr, #0
 80157d0:	dc5f      	bgt.n	8015892 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80157d2:	9b06      	ldr	r3, [sp, #24]
 80157d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80157d8:	9b07      	ldr	r3, [sp, #28]
 80157da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80157de:	4423      	add	r3, r4
 80157e0:	9307      	str	r3, [sp, #28]
 80157e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	f340 80c5 	ble.w	8015974 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80157ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80157ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80157f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80157f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80157f8:	eef0 6a62 	vmov.f32	s13, s5
 80157fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015800:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015804:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015808:	ee16 ba90 	vmov	fp, s13
 801580c:	eef0 6a43 	vmov.f32	s13, s6
 8015810:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015814:	ee16 4a90 	vmov	r4, s13
 8015818:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801581c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015820:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015824:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015828:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801582c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015830:	ee12 2a90 	vmov	r2, s5
 8015834:	eef0 2a47 	vmov.f32	s5, s14
 8015838:	fb92 f3f3 	sdiv	r3, r2, r3
 801583c:	ee13 2a10 	vmov	r2, s6
 8015840:	9327      	str	r3, [sp, #156]	; 0x9c
 8015842:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015844:	eeb0 3a67 	vmov.f32	s6, s15
 8015848:	fb92 f3f3 	sdiv	r3, r2, r3
 801584c:	9328      	str	r3, [sp, #160]	; 0xa0
 801584e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015850:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015852:	3b01      	subs	r3, #1
 8015854:	9309      	str	r3, [sp, #36]	; 0x24
 8015856:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015858:	bf08      	it	eq
 801585a:	4613      	moveq	r3, r2
 801585c:	9306      	str	r3, [sp, #24]
 801585e:	e6d7      	b.n	8015610 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015860:	f110 0c01 	adds.w	ip, r0, #1
 8015864:	d483      	bmi.n	801576e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015866:	4563      	cmp	r3, ip
 8015868:	db81      	blt.n	801576e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801586a:	f115 0c01 	adds.w	ip, r5, #1
 801586e:	f53f af7e 	bmi.w	801576e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015872:	4567      	cmp	r7, ip
 8015874:	f6ff af7b 	blt.w	801576e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015878:	b23f      	sxth	r7, r7
 801587a:	b21b      	sxth	r3, r3
 801587c:	9700      	str	r7, [sp, #0]
 801587e:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8015882:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8015886:	9a08      	ldr	r2, [sp, #32]
 8015888:	4631      	mov	r1, r6
 801588a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801588c:	f7ff fdf9 	bl	8015482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8015890:	e76d      	b.n	801576e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015892:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8015894:	ea4f 402b 	mov.w	r0, fp, asr #16
 8015898:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801589c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80158a0:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80158a4:	1421      	asrs	r1, r4, #16
 80158a6:	930a      	str	r3, [sp, #40]	; 0x28
 80158a8:	fb0c 0101 	mla	r1, ip, r1, r0
 80158ac:	9808      	ldr	r0, [sp, #32]
 80158ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158b2:	1845      	adds	r5, r0, r1
 80158b4:	5c40      	ldrb	r0, [r0, r1]
 80158b6:	796f      	ldrb	r7, [r5, #5]
 80158b8:	7869      	ldrb	r1, [r5, #1]
 80158ba:	f895 8002 	ldrb.w	r8, [r5, #2]
 80158be:	f895 a003 	ldrb.w	sl, [r5, #3]
 80158c2:	f895 9004 	ldrb.w	r9, [r5, #4]
 80158c6:	970c      	str	r7, [sp, #48]	; 0x30
 80158c8:	b1a2      	cbz	r2, 80158f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80158ca:	2703      	movs	r7, #3
 80158cc:	f06f 0304 	mvn.w	r3, #4
 80158d0:	3505      	adds	r5, #5
 80158d2:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80158d6:	eb05 070c 	add.w	r7, r5, ip
 80158da:	f815 500c 	ldrb.w	r5, [r5, ip]
 80158de:	9513      	str	r5, [sp, #76]	; 0x4c
 80158e0:	787d      	ldrb	r5, [r7, #1]
 80158e2:	9515      	str	r5, [sp, #84]	; 0x54
 80158e4:	78bd      	ldrb	r5, [r7, #2]
 80158e6:	9517      	str	r5, [sp, #92]	; 0x5c
 80158e8:	78fd      	ldrb	r5, [r7, #3]
 80158ea:	9514      	str	r5, [sp, #80]	; 0x50
 80158ec:	793d      	ldrb	r5, [r7, #4]
 80158ee:	9516      	str	r5, [sp, #88]	; 0x58
 80158f0:	797d      	ldrb	r5, [r7, #5]
 80158f2:	9518      	str	r5, [sp, #96]	; 0x60
 80158f4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80158f8:	b292      	uxth	r2, r2
 80158fa:	3603      	adds	r6, #3
 80158fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015900:	fb03 f502 	mul.w	r5, r3, r2
 8015904:	011b      	lsls	r3, r3, #4
 8015906:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801590a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801590e:	1b5b      	subs	r3, r3, r5
 8015910:	b292      	uxth	r2, r2
 8015912:	b29b      	uxth	r3, r3
 8015914:	1abf      	subs	r7, r7, r2
 8015916:	fb03 f909 	mul.w	r9, r3, r9
 801591a:	b2bf      	uxth	r7, r7
 801591c:	fb03 fa0a 	mul.w	sl, r3, sl
 8015920:	fb07 9901 	mla	r9, r7, r1, r9
 8015924:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015926:	fb07 aa00 	mla	sl, r7, r0, sl
 801592a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801592c:	fb02 9901 	mla	r9, r2, r1, r9
 8015930:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015932:	fb02 aa00 	mla	sl, r2, r0, sl
 8015936:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015938:	fb05 9901 	mla	r9, r5, r1, r9
 801593c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801593e:	fb05 aa00 	mla	sl, r5, r0, sl
 8015942:	434b      	muls	r3, r1
 8015944:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015946:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801594a:	fb07 3308 	mla	r3, r7, r8, r3
 801594e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015952:	f806 ac06 	strb.w	sl, [r6, #-6]
 8015956:	fb02 3201 	mla	r2, r2, r1, r3
 801595a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801595c:	f806 9c05 	strb.w	r9, [r6, #-5]
 8015960:	fb05 2503 	mla	r5, r5, r3, r2
 8015964:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015966:	122d      	asrs	r5, r5, #8
 8015968:	449b      	add	fp, r3
 801596a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801596c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8015970:	441c      	add	r4, r3
 8015972:	e72b      	b.n	80157cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8015974:	b01b      	add	sp, #108	; 0x6c
 8015976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801597a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801597a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801597e:	b087      	sub	sp, #28
 8015980:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8015984:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8015988:	fb05 7003 	mla	r0, r5, r3, r7
 801598c:	2d00      	cmp	r5, #0
 801598e:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8015992:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8015996:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801599a:	f2c0 811f 	blt.w	8015bdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801599e:	45a8      	cmp	r8, r5
 80159a0:	f340 811c 	ble.w	8015bdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80159a4:	2f00      	cmp	r7, #0
 80159a6:	f2c0 8117 	blt.w	8015bd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80159aa:	42bb      	cmp	r3, r7
 80159ac:	f340 8114 	ble.w	8015bd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80159b0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80159b4:	1c7a      	adds	r2, r7, #1
 80159b6:	f100 8114 	bmi.w	8015be2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80159ba:	4293      	cmp	r3, r2
 80159bc:	f340 8111 	ble.w	8015be2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80159c0:	2c00      	cmp	r4, #0
 80159c2:	f000 8110 	beq.w	8015be6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 80159c6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80159ca:	3501      	adds	r5, #1
 80159cc:	f100 810f 	bmi.w	8015bee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80159d0:	45a8      	cmp	r8, r5
 80159d2:	f340 810c 	ble.w	8015bee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80159d6:	f1be 0f00 	cmp.w	lr, #0
 80159da:	f000 810b 	beq.w	8015bf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80159de:	2f00      	cmp	r7, #0
 80159e0:	f2c0 8103 	blt.w	8015bea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80159e4:	42bb      	cmp	r3, r7
 80159e6:	f340 8100 	ble.w	8015bea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80159ea:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80159ee:	3701      	adds	r7, #1
 80159f0:	f100 8103 	bmi.w	8015bfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80159f4:	42bb      	cmp	r3, r7
 80159f6:	f340 8100 	ble.w	8015bfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80159fa:	2c00      	cmp	r4, #0
 80159fc:	f000 80ff 	beq.w	8015bfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8015a00:	3301      	adds	r3, #1
 8015a02:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015a06:	fa1f fc84 	uxth.w	ip, r4
 8015a0a:	fa1f fe8e 	uxth.w	lr, lr
 8015a0e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8015a12:	fb0c f90e 	mul.w	r9, ip, lr
 8015a16:	0e13      	lsrs	r3, r2, #24
 8015a18:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8015a1c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8015a20:	9302      	str	r3, [sp, #8]
 8015a22:	ebac 0709 	sub.w	r7, ip, r9
 8015a26:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8015a2a:	fa1f f48e 	uxth.w	r4, lr
 8015a2e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8015a32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015a36:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8015a3a:	fb0a fe0e 	mul.w	lr, sl, lr
 8015a3e:	1b1b      	subs	r3, r3, r4
 8015a40:	fb0a f606 	mul.w	r6, sl, r6
 8015a44:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8015a48:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8015a4c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015a56:	b2bf      	uxth	r7, r7
 8015a58:	9301      	str	r3, [sp, #4]
 8015a5a:	44e6      	add	lr, ip
 8015a5c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8015a60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015a64:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8015a68:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8015a6c:	9303      	str	r3, [sp, #12]
 8015a6e:	0a33      	lsrs	r3, r6, #8
 8015a70:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8015a74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015a78:	9304      	str	r3, [sp, #16]
 8015a7a:	fb0b f606 	mul.w	r6, fp, r6
 8015a7e:	fb0b f000 	mul.w	r0, fp, r0
 8015a82:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8015a86:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015a8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015a8e:	44b6      	add	lr, r6
 8015a90:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8015a94:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8015a98:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8015a9c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8015aa0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015aa4:	fb08 f606 	mul.w	r6, r8, r6
 8015aa8:	0a03      	lsrs	r3, r0, #8
 8015aaa:	fb08 f505 	mul.w	r5, r8, r5
 8015aae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015ab2:	0a30      	lsrs	r0, r6, #8
 8015ab4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015ab8:	9305      	str	r3, [sp, #20]
 8015aba:	0e13      	lsrs	r3, r2, #24
 8015abc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015ac0:	fb0e fe07 	mul.w	lr, lr, r7
 8015ac4:	4430      	add	r0, r6
 8015ac6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8015aca:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015ace:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8015ad2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015ad6:	0a00      	lsrs	r0, r0, #8
 8015ad8:	435e      	muls	r6, r3
 8015ada:	0a2d      	lsrs	r5, r5, #8
 8015adc:	435a      	muls	r2, r3
 8015ade:	9b03      	ldr	r3, [sp, #12]
 8015ae0:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8015ae4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015ae8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015aec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015af0:	44b4      	add	ip, r6
 8015af2:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8015af6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015afa:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8015afe:	9e01      	ldr	r6, [sp, #4]
 8015b00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b04:	fb03 ee06 	mla	lr, r3, r6, lr
 8015b08:	9b04      	ldr	r3, [sp, #16]
 8015b0a:	0a12      	lsrs	r2, r2, #8
 8015b0c:	fb0c ee09 	mla	lr, ip, r9, lr
 8015b10:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8015b14:	9b05      	ldr	r3, [sp, #20]
 8015b16:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015b1a:	fb00 ee04 	mla	lr, r0, r4, lr
 8015b1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015b22:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8015b26:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8015b2a:	9b01      	ldr	r3, [sp, #4]
 8015b2c:	fb07 fe0e 	mul.w	lr, r7, lr
 8015b30:	fb07 f70b 	mul.w	r7, r7, fp
 8015b34:	fb03 ee06 	mla	lr, r3, r6, lr
 8015b38:	fb03 730a 	mla	r3, r3, sl, r7
 8015b3c:	fb09 e202 	mla	r2, r9, r2, lr
 8015b40:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8015b44:	fb04 2e0e 	mla	lr, r4, lr, r2
 8015b48:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8015b4c:	fb04 3408 	mla	r4, r4, r8, r3
 8015b50:	9b02      	ldr	r3, [sp, #8]
 8015b52:	b292      	uxth	r2, r2
 8015b54:	fb09 4903 	mla	r9, r9, r3, r4
 8015b58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015b5c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8015b60:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8015b64:	fb09 f902 	mul.w	r9, r9, r2
 8015b68:	ea40 0e0e 	orr.w	lr, r0, lr
 8015b6c:	f109 0301 	add.w	r3, r9, #1
 8015b70:	fa5f f08e 	uxtb.w	r0, lr
 8015b74:	fb10 f002 	smulbb	r0, r0, r2
 8015b78:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8015b7c:	780b      	ldrb	r3, [r1, #0]
 8015b7e:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8015b82:	fa5f f989 	uxtb.w	r9, r9
 8015b86:	fb03 0309 	mla	r3, r3, r9, r0
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	1c58      	adds	r0, r3, #1
 8015b8e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015b92:	7848      	ldrb	r0, [r1, #1]
 8015b94:	fb10 f009 	smulbb	r0, r0, r9
 8015b98:	121b      	asrs	r3, r3, #8
 8015b9a:	700b      	strb	r3, [r1, #0]
 8015b9c:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8015ba0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015ba4:	fb03 0302 	mla	r3, r3, r2, r0
 8015ba8:	b29b      	uxth	r3, r3
 8015baa:	1c58      	adds	r0, r3, #1
 8015bac:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015bb0:	121b      	asrs	r3, r3, #8
 8015bb2:	704b      	strb	r3, [r1, #1]
 8015bb4:	788b      	ldrb	r3, [r1, #2]
 8015bb6:	fb13 f909 	smulbb	r9, r3, r9
 8015bba:	fb0e 9e02 	mla	lr, lr, r2, r9
 8015bbe:	fa1f fe8e 	uxth.w	lr, lr
 8015bc2:	f10e 0301 	add.w	r3, lr, #1
 8015bc6:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8015bca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015bce:	f881 e002 	strb.w	lr, [r1, #2]
 8015bd2:	b007      	add	sp, #28
 8015bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bd8:	2600      	movs	r6, #0
 8015bda:	e6eb      	b.n	80159b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8015bdc:	2000      	movs	r0, #0
 8015bde:	4606      	mov	r6, r0
 8015be0:	e6f3      	b.n	80159ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015be2:	2000      	movs	r0, #0
 8015be4:	e6f1      	b.n	80159ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015be6:	4620      	mov	r0, r4
 8015be8:	e6ef      	b.n	80159ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015bea:	2500      	movs	r5, #0
 8015bec:	e6ff      	b.n	80159ee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8015bee:	2200      	movs	r2, #0
 8015bf0:	4615      	mov	r5, r2
 8015bf2:	e708      	b.n	8015a06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015bf4:	4672      	mov	r2, lr
 8015bf6:	4675      	mov	r5, lr
 8015bf8:	e705      	b.n	8015a06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	e703      	b.n	8015a06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015bfe:	4622      	mov	r2, r4
 8015c00:	e701      	b.n	8015a06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08015c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c06:	b09d      	sub	sp, #116	; 0x74
 8015c08:	9219      	str	r2, [sp, #100]	; 0x64
 8015c0a:	9307      	str	r3, [sp, #28]
 8015c0c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015c0e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8015c12:	901b      	str	r0, [sp, #108]	; 0x6c
 8015c14:	931a      	str	r3, [sp, #104]	; 0x68
 8015c16:	6850      	ldr	r0, [r2, #4]
 8015c18:	9117      	str	r1, [sp, #92]	; 0x5c
 8015c1a:	6812      	ldr	r2, [r2, #0]
 8015c1c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8015c20:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8015c24:	fb00 1303 	mla	r3, r0, r3, r1
 8015c28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c2c:	18d3      	adds	r3, r2, r3
 8015c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	9310      	str	r3, [sp, #64]	; 0x40
 8015c36:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8015c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	dc03      	bgt.n	8015c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015c42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	f340 8368 	ble.w	801631a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8015c4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015c50:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015c54:	1e48      	subs	r0, r1, #1
 8015c56:	1e57      	subs	r7, r2, #1
 8015c58:	9b07      	ldr	r3, [sp, #28]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	f340 8187 	ble.w	8015f6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8015c60:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8015c64:	ea4f 4326 	mov.w	r3, r6, asr #16
 8015c68:	d406      	bmi.n	8015c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c6a:	4584      	cmp	ip, r0
 8015c6c:	da04      	bge.n	8015c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	db02      	blt.n	8015c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c72:	42bb      	cmp	r3, r7
 8015c74:	f2c0 817c 	blt.w	8015f70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015c78:	f11c 0c01 	adds.w	ip, ip, #1
 8015c7c:	f100 816c 	bmi.w	8015f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015c80:	4561      	cmp	r1, ip
 8015c82:	f2c0 8169 	blt.w	8015f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015c86:	3301      	adds	r3, #1
 8015c88:	f100 8166 	bmi.w	8015f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	f2c0 8163 	blt.w	8015f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015c92:	9b07      	ldr	r3, [sp, #28]
 8015c94:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015c96:	9318      	str	r3, [sp, #96]	; 0x60
 8015c98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	f340 8186 	ble.w	8015fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8015ca0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015ca2:	142a      	asrs	r2, r5, #16
 8015ca4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8015ca8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015cac:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8015cb0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8015cb4:	f100 81cb 	bmi.w	801604e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cb8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8015cbc:	4542      	cmp	r2, r8
 8015cbe:	f280 81c6 	bge.w	801604e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cc2:	2800      	cmp	r0, #0
 8015cc4:	f2c0 81c3 	blt.w	801604e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cc8:	f103 38ff 	add.w	r8, r3, #4294967295
 8015ccc:	4540      	cmp	r0, r8
 8015cce:	f280 81be 	bge.w	801604e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cd2:	fa0f f38e 	sxth.w	r3, lr
 8015cd6:	fb00 2203 	mla	r2, r0, r3, r2
 8015cda:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015cdc:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8015ce0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8015ce4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8015ce8:	2900      	cmp	r1, #0
 8015cea:	f000 81a6 	beq.w	801603a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8015cee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015cf2:	900c      	str	r0, [sp, #48]	; 0x30
 8015cf4:	0e00      	lsrs	r0, r0, #24
 8015cf6:	9013      	str	r0, [sp, #76]	; 0x4c
 8015cf8:	f1bc 0f00 	cmp.w	ip, #0
 8015cfc:	d00f      	beq.n	8015d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8015cfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015d02:	3b01      	subs	r3, #1
 8015d04:	009b      	lsls	r3, r3, #2
 8015d06:	3304      	adds	r3, #4
 8015d08:	eb08 0003 	add.w	r0, r8, r3
 8015d0c:	f858 3003 	ldr.w	r3, [r8, r3]
 8015d10:	9308      	str	r3, [sp, #32]
 8015d12:	0e1b      	lsrs	r3, r3, #24
 8015d14:	9311      	str	r3, [sp, #68]	; 0x44
 8015d16:	6843      	ldr	r3, [r0, #4]
 8015d18:	930d      	str	r3, [sp, #52]	; 0x34
 8015d1a:	0e1b      	lsrs	r3, r3, #24
 8015d1c:	9314      	str	r3, [sp, #80]	; 0x50
 8015d1e:	b289      	uxth	r1, r1
 8015d20:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015d22:	fa1f fc8c 	uxth.w	ip, ip
 8015d26:	0108      	lsls	r0, r1, #4
 8015d28:	fb01 f90c 	mul.w	r9, r1, ip
 8015d2c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8015d30:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8015d34:	eba0 0809 	sub.w	r8, r0, r9
 8015d38:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015d3a:	fa1f f18c 	uxth.w	r1, ip
 8015d3e:	fa1f f888 	uxth.w	r8, r8
 8015d42:	1a5b      	subs	r3, r3, r1
 8015d44:	fb08 f000 	mul.w	r0, r8, r0
 8015d48:	b29b      	uxth	r3, r3
 8015d4a:	fb03 000e 	mla	r0, r3, lr, r0
 8015d4e:	fb01 0004 	mla	r0, r1, r4, r0
 8015d52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015d54:	fb09 0004 	mla	r0, r9, r4, r0
 8015d58:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	f000 80f2 	beq.w	8015f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015d62:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015d66:	d01b      	beq.n	8015da0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015d68:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8015d6c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015d70:	fb0e fa0a 	mul.w	sl, lr, sl
 8015d74:	fb0e fe02 	mul.w	lr, lr, r2
 8015d78:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8015d7c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015d80:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8015d84:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015d88:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015d8c:	4452      	add	r2, sl
 8015d8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015d92:	0a12      	lsrs	r2, r2, #8
 8015d94:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015d98:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015d9c:	ea42 020c 	orr.w	r2, r2, ip
 8015da0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015da2:	2cff      	cmp	r4, #255	; 0xff
 8015da4:	d021      	beq.n	8015dea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015da6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015da8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015dac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dae:	fb04 fb0b 	mul.w	fp, r4, fp
 8015db2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015db4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015db8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015dbe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015dc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8015dc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015dca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015dce:	44de      	add	lr, fp
 8015dd0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015dd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015dd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015ddc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015de0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015de4:	ea4e 040a 	orr.w	r4, lr, sl
 8015de8:	940c      	str	r4, [sp, #48]	; 0x30
 8015dea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015dec:	2cff      	cmp	r4, #255	; 0xff
 8015dee:	d021      	beq.n	8015e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8015df0:	9c08      	ldr	r4, [sp, #32]
 8015df2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015df6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015df8:	fb04 fb0b 	mul.w	fp, r4, fp
 8015dfc:	9c08      	ldr	r4, [sp, #32]
 8015dfe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015e04:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e08:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e0c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e14:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e18:	44de      	add	lr, fp
 8015e1a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e2e:	ea4e 040a 	orr.w	r4, lr, sl
 8015e32:	9408      	str	r4, [sp, #32]
 8015e34:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e36:	2cff      	cmp	r4, #255	; 0xff
 8015e38:	d021      	beq.n	8015e7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8015e3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e3c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015e40:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e42:	fb04 fb0b 	mul.w	fp, r4, fp
 8015e46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e48:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e4c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e4e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e52:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e56:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e5e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e62:	44de      	add	lr, fp
 8015e64:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e74:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e78:	ea4e 040a 	orr.w	r4, lr, sl
 8015e7c:	940d      	str	r4, [sp, #52]	; 0x34
 8015e7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015e80:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8015e84:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015e88:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015e8c:	9c08      	ldr	r4, [sp, #32]
 8015e8e:	fb08 fc0c 	mul.w	ip, r8, ip
 8015e92:	fb03 cc0e 	mla	ip, r3, lr, ip
 8015e96:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015e9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e9c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8015ea0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015ea4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ea6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8015eaa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015eae:	fb08 f80e 	mul.w	r8, r8, lr
 8015eb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015eb6:	fb03 8202 	mla	r2, r3, r2, r8
 8015eba:	9b08      	ldr	r3, [sp, #32]
 8015ebc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015ec0:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8015ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ec6:	fb01 220a 	mla	r2, r1, sl, r2
 8015eca:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8015ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ed0:	fb09 2901 	mla	r9, r9, r1, r2
 8015ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ed6:	4343      	muls	r3, r0
 8015ed8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015edc:	1c58      	adds	r0, r3, #1
 8015ede:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8015ee2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015ee6:	783b      	ldrb	r3, [r7, #0]
 8015ee8:	ea4c 0c09 	orr.w	ip, ip, r9
 8015eec:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8015ef0:	fa5f f28c 	uxtb.w	r2, ip
 8015ef4:	b2c0      	uxtb	r0, r0
 8015ef6:	fb12 f201 	smulbb	r2, r2, r1
 8015efa:	fb03 2300 	mla	r3, r3, r0, r2
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	1c5a      	adds	r2, r3, #1
 8015f02:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f06:	787a      	ldrb	r2, [r7, #1]
 8015f08:	fb12 f200 	smulbb	r2, r2, r0
 8015f0c:	121b      	asrs	r3, r3, #8
 8015f0e:	703b      	strb	r3, [r7, #0]
 8015f10:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8015f14:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015f18:	fb03 2301 	mla	r3, r3, r1, r2
 8015f1c:	b29b      	uxth	r3, r3
 8015f1e:	1c5a      	adds	r2, r3, #1
 8015f20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f24:	121b      	asrs	r3, r3, #8
 8015f26:	707b      	strb	r3, [r7, #1]
 8015f28:	78bb      	ldrb	r3, [r7, #2]
 8015f2a:	fb13 f000 	smulbb	r0, r3, r0
 8015f2e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8015f32:	fa1f fc8c 	uxth.w	ip, ip
 8015f36:	f10c 0301 	add.w	r3, ip, #1
 8015f3a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015f3e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015f42:	f887 c002 	strb.w	ip, [r7, #2]
 8015f46:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015f48:	3703      	adds	r7, #3
 8015f4a:	441d      	add	r5, r3
 8015f4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f4e:	441e      	add	r6, r3
 8015f50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015f52:	3b01      	subs	r3, #1
 8015f54:	9318      	str	r3, [sp, #96]	; 0x60
 8015f56:	e69f      	b.n	8015c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015f58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015f5a:	441d      	add	r5, r3
 8015f5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f5e:	441e      	add	r6, r3
 8015f60:	9b07      	ldr	r3, [sp, #28]
 8015f62:	3b01      	subs	r3, #1
 8015f64:	9307      	str	r3, [sp, #28]
 8015f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f68:	3303      	adds	r3, #3
 8015f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f6c:	e674      	b.n	8015c58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8015f6e:	d025      	beq.n	8015fbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8015f70:	9b07      	ldr	r3, [sp, #28]
 8015f72:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8015f74:	3b01      	subs	r3, #1
 8015f76:	fb00 5003 	mla	r0, r0, r3, r5
 8015f7a:	1400      	asrs	r0, r0, #16
 8015f7c:	f53f ae89 	bmi.w	8015c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015f80:	3901      	subs	r1, #1
 8015f82:	4288      	cmp	r0, r1
 8015f84:	f6bf ae85 	bge.w	8015c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015f88:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015f8a:	fb01 6303 	mla	r3, r1, r3, r6
 8015f8e:	141b      	asrs	r3, r3, #16
 8015f90:	f53f ae7f 	bmi.w	8015c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015f94:	3a01      	subs	r2, #1
 8015f96:	4293      	cmp	r3, r2
 8015f98:	f6bf ae7b 	bge.w	8015c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f9e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8015fa2:	f103 0e03 	add.w	lr, r3, #3
 8015fa6:	f1bb 0f00 	cmp.w	fp, #0
 8015faa:	dc6e      	bgt.n	801608a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8015fac:	9b07      	ldr	r3, [sp, #28]
 8015fae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015fb8:	4423      	add	r3, r4
 8015fba:	930a      	str	r3, [sp, #40]	; 0x28
 8015fbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	f340 81ab 	ble.w	801631a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8015fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015fca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015fce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015fd2:	eef0 6a62 	vmov.f32	s13, s5
 8015fd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015fda:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015fde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015fe2:	ee16 5a90 	vmov	r5, s13
 8015fe6:	eef0 6a43 	vmov.f32	s13, s6
 8015fea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015fee:	ee16 6a90 	vmov	r6, s13
 8015ff2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015ff6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ffa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015ffe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016002:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016006:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801600a:	ee12 2a90 	vmov	r2, s5
 801600e:	eef0 2a47 	vmov.f32	s5, s14
 8016012:	fb92 f3f3 	sdiv	r3, r2, r3
 8016016:	ee13 2a10 	vmov	r2, s6
 801601a:	9329      	str	r3, [sp, #164]	; 0xa4
 801601c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801601e:	eeb0 3a67 	vmov.f32	s6, s15
 8016022:	fb92 f3f3 	sdiv	r3, r2, r3
 8016026:	932a      	str	r3, [sp, #168]	; 0xa8
 8016028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801602a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801602c:	3b01      	subs	r3, #1
 801602e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016032:	bf08      	it	eq
 8016034:	4613      	moveq	r3, r2
 8016036:	9307      	str	r3, [sp, #28]
 8016038:	e600      	b.n	8015c3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801603a:	f1bc 0f00 	cmp.w	ip, #0
 801603e:	f43f ae6e 	beq.w	8015d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016042:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016046:	9308      	str	r3, [sp, #32]
 8016048:	0e1b      	lsrs	r3, r3, #24
 801604a:	9311      	str	r3, [sp, #68]	; 0x44
 801604c:	e667      	b.n	8015d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801604e:	f112 0801 	adds.w	r8, r2, #1
 8016052:	f53f af78 	bmi.w	8015f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016056:	45c6      	cmp	lr, r8
 8016058:	f6ff af75 	blt.w	8015f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801605c:	f110 0801 	adds.w	r8, r0, #1
 8016060:	f53f af71 	bmi.w	8015f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016064:	4543      	cmp	r3, r8
 8016066:	f6ff af6e 	blt.w	8015f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801606a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801606c:	b21b      	sxth	r3, r3
 801606e:	9201      	str	r2, [sp, #4]
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	fa0f f38e 	sxth.w	r3, lr
 8016076:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801607c:	e9cd c404 	strd	ip, r4, [sp, #16]
 8016080:	4639      	mov	r1, r7
 8016082:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016084:	f7ff fc79 	bl	801597a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8016088:	e75d      	b.n	8015f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801608a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801608c:	142f      	asrs	r7, r5, #16
 801608e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016090:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016094:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8016098:	1433      	asrs	r3, r6, #16
 801609a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801609e:	fb02 7303 	mla	r3, r2, r3, r7
 80160a2:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80160a6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80160aa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80160ae:	2900      	cmp	r1, #0
 80160b0:	f000 812a 	beq.w	8016308 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80160b4:	687c      	ldr	r4, [r7, #4]
 80160b6:	940e      	str	r4, [sp, #56]	; 0x38
 80160b8:	0e24      	lsrs	r4, r4, #24
 80160ba:	9415      	str	r4, [sp, #84]	; 0x54
 80160bc:	b178      	cbz	r0, 80160de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80160be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80160c2:	3a01      	subs	r2, #1
 80160c4:	0092      	lsls	r2, r2, #2
 80160c6:	3204      	adds	r2, #4
 80160c8:	eb07 0802 	add.w	r8, r7, r2
 80160cc:	58ba      	ldr	r2, [r7, r2]
 80160ce:	9209      	str	r2, [sp, #36]	; 0x24
 80160d0:	0e12      	lsrs	r2, r2, #24
 80160d2:	9212      	str	r2, [sp, #72]	; 0x48
 80160d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80160d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80160da:	0e12      	lsrs	r2, r2, #24
 80160dc:	9216      	str	r2, [sp, #88]	; 0x58
 80160de:	b289      	uxth	r1, r1
 80160e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80160e2:	b280      	uxth	r0, r0
 80160e4:	fb01 f900 	mul.w	r9, r1, r0
 80160e8:	0109      	lsls	r1, r1, #4
 80160ea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80160ee:	eba1 0809 	sub.w	r8, r1, r9
 80160f2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80160f6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80160f8:	b280      	uxth	r0, r0
 80160fa:	fa1f f888 	uxth.w	r8, r8
 80160fe:	1a12      	subs	r2, r2, r0
 8016100:	fb08 f101 	mul.w	r1, r8, r1
 8016104:	b292      	uxth	r2, r2
 8016106:	fb02 110c 	mla	r1, r2, ip, r1
 801610a:	fb00 1104 	mla	r1, r0, r4, r1
 801610e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016110:	fb09 1104 	mla	r1, r9, r4, r1
 8016114:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016118:	2900      	cmp	r1, #0
 801611a:	f000 80ec 	beq.w	80162f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801611e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016122:	d019      	beq.n	8016158 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8016124:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016128:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801612c:	fb0c fa0a 	mul.w	sl, ip, sl
 8016130:	fb0c fc03 	mul.w	ip, ip, r3
 8016134:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016138:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801613c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016140:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016144:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8016148:	4453      	add	r3, sl
 801614a:	0a3f      	lsrs	r7, r7, #8
 801614c:	0a1b      	lsrs	r3, r3, #8
 801614e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8016152:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016156:	433b      	orrs	r3, r7
 8016158:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801615a:	2cff      	cmp	r4, #255	; 0xff
 801615c:	d020      	beq.n	80161a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801615e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016160:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016164:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016166:	4367      	muls	r7, r4
 8016168:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801616a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801616e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016172:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016174:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016178:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801617c:	fb04 fa0a 	mul.w	sl, r4, sl
 8016180:	44bc      	add	ip, r7
 8016182:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016186:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801618a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801618e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016192:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016196:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801619a:	ea4c 040a 	orr.w	r4, ip, sl
 801619e:	940e      	str	r4, [sp, #56]	; 0x38
 80161a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161a2:	2cff      	cmp	r4, #255	; 0xff
 80161a4:	d020      	beq.n	80161e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80161a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80161ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161ae:	4367      	muls	r7, r4
 80161b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80161b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80161ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80161c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161c4:	fb04 fa0a 	mul.w	sl, r4, sl
 80161c8:	44bc      	add	ip, r7
 80161ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80161ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80161d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80161d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80161de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80161e2:	ea4c 040a 	orr.w	r4, ip, sl
 80161e6:	9409      	str	r4, [sp, #36]	; 0x24
 80161e8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80161ea:	2cff      	cmp	r4, #255	; 0xff
 80161ec:	d020      	beq.n	8016230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80161ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80161f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80161f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80161f6:	4367      	muls	r7, r4
 80161f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80161fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80161fe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016202:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016204:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016208:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801620c:	fb04 fa0a 	mul.w	sl, r4, sl
 8016210:	44bc      	add	ip, r7
 8016212:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016216:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801621a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801621e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016222:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016226:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801622a:	ea4c 040a 	orr.w	r4, ip, sl
 801622e:	940f      	str	r4, [sp, #60]	; 0x3c
 8016230:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016232:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8016236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801623a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801623e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016240:	fb08 f707 	mul.w	r7, r8, r7
 8016244:	fb02 770c 	mla	r7, r2, ip, r7
 8016248:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801624c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801624e:	fb00 770c 	mla	r7, r0, ip, r7
 8016252:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016256:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016258:	fb09 770c 	mla	r7, r9, ip, r7
 801625c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8016260:	fb08 f80c 	mul.w	r8, r8, ip
 8016264:	0a3f      	lsrs	r7, r7, #8
 8016266:	fb02 8303 	mla	r3, r2, r3, r8
 801626a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801626c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8016270:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8016274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016276:	fb00 330a 	mla	r3, r0, sl, r3
 801627a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801627e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016280:	fb09 3c0c 	mla	ip, r9, ip, r3
 8016284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016286:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801628a:	434b      	muls	r3, r1
 801628c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016290:	1c59      	adds	r1, r3, #1
 8016292:	ea47 070c 	orr.w	r7, r7, ip
 8016296:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801629a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801629e:	b2fa      	uxtb	r2, r7
 80162a0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80162a4:	fb12 f200 	smulbb	r2, r2, r0
 80162a8:	b2c9      	uxtb	r1, r1
 80162aa:	fb03 2301 	mla	r3, r3, r1, r2
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	1c5a      	adds	r2, r3, #1
 80162b2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80162b6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80162ba:	fb12 f201 	smulbb	r2, r2, r1
 80162be:	121b      	asrs	r3, r3, #8
 80162c0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80162c4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80162c8:	0c3f      	lsrs	r7, r7, #16
 80162ca:	fb03 2300 	mla	r3, r3, r0, r2
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	1c5a      	adds	r2, r3, #1
 80162d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80162d6:	121b      	asrs	r3, r3, #8
 80162d8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80162dc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80162e0:	fb13 f101 	smulbb	r1, r3, r1
 80162e4:	fb07 1700 	mla	r7, r7, r0, r1
 80162e8:	b2bf      	uxth	r7, r7
 80162ea:	1c79      	adds	r1, r7, #1
 80162ec:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80162f0:	123f      	asrs	r7, r7, #8
 80162f2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80162f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80162f8:	f10e 0e03 	add.w	lr, lr, #3
 80162fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016300:	441d      	add	r5, r3
 8016302:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016304:	441e      	add	r6, r3
 8016306:	e64e      	b.n	8015fa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8016308:	2800      	cmp	r0, #0
 801630a:	f43f aee8 	beq.w	80160de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801630e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8016312:	9209      	str	r2, [sp, #36]	; 0x24
 8016314:	0e12      	lsrs	r2, r2, #24
 8016316:	9212      	str	r2, [sp, #72]	; 0x48
 8016318:	e6e1      	b.n	80160de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801631a:	b01d      	add	sp, #116	; 0x74
 801631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016320 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8016320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016324:	b087      	sub	sp, #28
 8016326:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801632a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801632e:	fb05 7003 	mla	r0, r5, r3, r7
 8016332:	2d00      	cmp	r5, #0
 8016334:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016338:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801633c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8016340:	f2c0 810a 	blt.w	8016558 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8016344:	45a8      	cmp	r8, r5
 8016346:	f340 8107 	ble.w	8016558 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801634a:	2f00      	cmp	r7, #0
 801634c:	f2c0 8102 	blt.w	8016554 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8016350:	42bb      	cmp	r3, r7
 8016352:	f340 80ff 	ble.w	8016554 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8016356:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801635a:	1c7a      	adds	r2, r7, #1
 801635c:	f100 80ff 	bmi.w	801655e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8016360:	4293      	cmp	r3, r2
 8016362:	f340 80fc 	ble.w	801655e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8016366:	2c00      	cmp	r4, #0
 8016368:	f000 80fb 	beq.w	8016562 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801636c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016370:	3501      	adds	r5, #1
 8016372:	f100 80fa 	bmi.w	801656a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8016376:	45a8      	cmp	r8, r5
 8016378:	f340 80f7 	ble.w	801656a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801637c:	f1be 0f00 	cmp.w	lr, #0
 8016380:	f000 80f6 	beq.w	8016570 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8016384:	2f00      	cmp	r7, #0
 8016386:	f2c0 80ee 	blt.w	8016566 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801638a:	42bb      	cmp	r3, r7
 801638c:	f340 80eb 	ble.w	8016566 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8016390:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8016394:	3701      	adds	r7, #1
 8016396:	f100 80ee 	bmi.w	8016576 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801639a:	42bb      	cmp	r3, r7
 801639c:	f340 80eb 	ble.w	8016576 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80163a0:	2c00      	cmp	r4, #0
 80163a2:	f000 80ea 	beq.w	801657a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80163a6:	3301      	adds	r3, #1
 80163a8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80163ac:	fa1f fc84 	uxth.w	ip, r4
 80163b0:	fa1f fe8e 	uxth.w	lr, lr
 80163b4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80163b8:	fb0c f90e 	mul.w	r9, ip, lr
 80163bc:	0e13      	lsrs	r3, r2, #24
 80163be:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80163c2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80163c6:	9302      	str	r3, [sp, #8]
 80163c8:	ebac 0709 	sub.w	r7, ip, r9
 80163cc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80163d0:	fa1f f48e 	uxth.w	r4, lr
 80163d4:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80163d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80163dc:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80163e0:	fb0a fe0e 	mul.w	lr, sl, lr
 80163e4:	1b1b      	subs	r3, r3, r4
 80163e6:	fb0a f606 	mul.w	r6, sl, r6
 80163ea:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80163ee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80163f2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80163f6:	b29b      	uxth	r3, r3
 80163f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80163fc:	b2bf      	uxth	r7, r7
 80163fe:	9301      	str	r3, [sp, #4]
 8016400:	44e6      	add	lr, ip
 8016402:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8016406:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801640a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801640e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8016412:	9303      	str	r3, [sp, #12]
 8016414:	0a33      	lsrs	r3, r6, #8
 8016416:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801641a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801641e:	9304      	str	r3, [sp, #16]
 8016420:	fb0b f606 	mul.w	r6, fp, r6
 8016424:	fb0b f000 	mul.w	r0, fp, r0
 8016428:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801642c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8016430:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016434:	44b6      	add	lr, r6
 8016436:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801643a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801643e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8016442:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8016446:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801644a:	fb08 f606 	mul.w	r6, r8, r6
 801644e:	0a03      	lsrs	r3, r0, #8
 8016450:	fb08 f505 	mul.w	r5, r8, r5
 8016454:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016458:	0a30      	lsrs	r0, r6, #8
 801645a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801645e:	9305      	str	r3, [sp, #20]
 8016460:	0e13      	lsrs	r3, r2, #24
 8016462:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016466:	fb0e fe07 	mul.w	lr, lr, r7
 801646a:	4430      	add	r0, r6
 801646c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8016470:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016474:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8016478:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801647c:	0a00      	lsrs	r0, r0, #8
 801647e:	435e      	muls	r6, r3
 8016480:	0a2d      	lsrs	r5, r5, #8
 8016482:	435a      	muls	r2, r3
 8016484:	9b03      	ldr	r3, [sp, #12]
 8016486:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801648a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801648e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016492:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016496:	44b4      	add	ip, r6
 8016498:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801649c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80164a0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80164a4:	9e01      	ldr	r6, [sp, #4]
 80164a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80164aa:	fb03 ee06 	mla	lr, r3, r6, lr
 80164ae:	9b04      	ldr	r3, [sp, #16]
 80164b0:	0a12      	lsrs	r2, r2, #8
 80164b2:	fb0c ee09 	mla	lr, ip, r9, lr
 80164b6:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80164ba:	9b05      	ldr	r3, [sp, #20]
 80164bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80164c0:	fb00 ee04 	mla	lr, r0, r4, lr
 80164c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80164c8:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80164cc:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80164d0:	9b01      	ldr	r3, [sp, #4]
 80164d2:	fb07 fe0e 	mul.w	lr, r7, lr
 80164d6:	fb07 f70b 	mul.w	r7, r7, fp
 80164da:	fb03 ee06 	mla	lr, r3, r6, lr
 80164de:	fb03 730a 	mla	r3, r3, sl, r7
 80164e2:	fb09 e202 	mla	r2, r9, r2, lr
 80164e6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80164ea:	fb04 2e0e 	mla	lr, r4, lr, r2
 80164ee:	fb04 3408 	mla	r4, r4, r8, r3
 80164f2:	9b02      	ldr	r3, [sp, #8]
 80164f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80164f8:	fb09 4903 	mla	r9, r9, r3, r4
 80164fc:	780b      	ldrb	r3, [r1, #0]
 80164fe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016502:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8016506:	ea40 0e0e 	orr.w	lr, r0, lr
 801650a:	fa5f f989 	uxtb.w	r9, r9
 801650e:	fb03 f209 	mul.w	r2, r3, r9
 8016512:	1c53      	adds	r3, r2, #1
 8016514:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016518:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801651c:	700b      	strb	r3, [r1, #0]
 801651e:	784b      	ldrb	r3, [r1, #1]
 8016520:	fb03 f309 	mul.w	r3, r3, r9
 8016524:	1c5a      	adds	r2, r3, #1
 8016526:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801652a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801652e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8016532:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016536:	704b      	strb	r3, [r1, #1]
 8016538:	788b      	ldrb	r3, [r1, #2]
 801653a:	fb03 f909 	mul.w	r9, r3, r9
 801653e:	f109 0301 	add.w	r3, r9, #1
 8016542:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8016546:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801654a:	f881 e002 	strb.w	lr, [r1, #2]
 801654e:	b007      	add	sp, #28
 8016550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016554:	2600      	movs	r6, #0
 8016556:	e700      	b.n	801635a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8016558:	2000      	movs	r0, #0
 801655a:	4606      	mov	r6, r0
 801655c:	e708      	b.n	8016370 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801655e:	2000      	movs	r0, #0
 8016560:	e706      	b.n	8016370 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8016562:	4620      	mov	r0, r4
 8016564:	e704      	b.n	8016370 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8016566:	2500      	movs	r5, #0
 8016568:	e714      	b.n	8016394 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801656a:	2200      	movs	r2, #0
 801656c:	4615      	mov	r5, r2
 801656e:	e71d      	b.n	80163ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8016570:	4672      	mov	r2, lr
 8016572:	4675      	mov	r5, lr
 8016574:	e71a      	b.n	80163ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8016576:	2200      	movs	r2, #0
 8016578:	e718      	b.n	80163ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801657a:	4622      	mov	r2, r4
 801657c:	e716      	b.n	80163ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801657e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801657e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016582:	b099      	sub	sp, #100	; 0x64
 8016584:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8016588:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801658a:	9017      	str	r0, [sp, #92]	; 0x5c
 801658c:	9306      	str	r3, [sp, #24]
 801658e:	6850      	ldr	r0, [r2, #4]
 8016590:	6812      	ldr	r2, [r2, #0]
 8016592:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8016596:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801659a:	fb00 1303 	mla	r3, r0, r3, r1
 801659e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80165a2:	18d3      	adds	r3, r2, r3
 80165a4:	9309      	str	r3, [sp, #36]	; 0x24
 80165a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	930e      	str	r3, [sp, #56]	; 0x38
 80165ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	dc03      	bgt.n	80165ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80165b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	f340 8360 	ble.w	8016c7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80165ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80165bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80165c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80165c4:	1e48      	subs	r0, r1, #1
 80165c6:	1e57      	subs	r7, r2, #1
 80165c8:	9b06      	ldr	r3, [sp, #24]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f340 817b 	ble.w	80168c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80165d0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80165d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80165d8:	d406      	bmi.n	80165e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80165da:	4584      	cmp	ip, r0
 80165dc:	da04      	bge.n	80165e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80165de:	2b00      	cmp	r3, #0
 80165e0:	db02      	blt.n	80165e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80165e2:	42bb      	cmp	r3, r7
 80165e4:	f2c0 8170 	blt.w	80168c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80165e8:	f11c 0c01 	adds.w	ip, ip, #1
 80165ec:	f100 8160 	bmi.w	80168b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80165f0:	4561      	cmp	r1, ip
 80165f2:	f2c0 815d 	blt.w	80168b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80165f6:	3301      	adds	r3, #1
 80165f8:	f100 815a 	bmi.w	80168b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80165fc:	429a      	cmp	r2, r3
 80165fe:	f2c0 8157 	blt.w	80168b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8016602:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016606:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016608:	f1b8 0f00 	cmp.w	r8, #0
 801660c:	f340 8179 	ble.w	8016902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016610:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016612:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8016616:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016618:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801661c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8016620:	142a      	asrs	r2, r5, #16
 8016622:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016626:	689b      	ldr	r3, [r3, #8]
 8016628:	f100 81be 	bmi.w	80169a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801662c:	f103 39ff 	add.w	r9, r3, #4294967295
 8016630:	454a      	cmp	r2, r9
 8016632:	f280 81b9 	bge.w	80169a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8016636:	f1bc 0f00 	cmp.w	ip, #0
 801663a:	f2c0 81b5 	blt.w	80169a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801663e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8016642:	45cc      	cmp	ip, r9
 8016644:	f280 81b0 	bge.w	80169a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8016648:	b21b      	sxth	r3, r3
 801664a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801664c:	fb0c 2203 	mla	r2, ip, r3, r2
 8016650:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8016654:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016658:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801665c:	2900      	cmp	r1, #0
 801665e:	f000 8197 	beq.w	8016990 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8016662:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8016666:	940a      	str	r4, [sp, #40]	; 0x28
 8016668:	0e24      	lsrs	r4, r4, #24
 801666a:	9411      	str	r4, [sp, #68]	; 0x44
 801666c:	b180      	cbz	r0, 8016690 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801666e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016672:	3b01      	subs	r3, #1
 8016674:	009b      	lsls	r3, r3, #2
 8016676:	3304      	adds	r3, #4
 8016678:	eb09 0c03 	add.w	ip, r9, r3
 801667c:	f859 3003 	ldr.w	r3, [r9, r3]
 8016680:	9307      	str	r3, [sp, #28]
 8016682:	0e1b      	lsrs	r3, r3, #24
 8016684:	930f      	str	r3, [sp, #60]	; 0x3c
 8016686:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801668a:	930b      	str	r3, [sp, #44]	; 0x2c
 801668c:	0e1b      	lsrs	r3, r3, #24
 801668e:	9312      	str	r3, [sp, #72]	; 0x48
 8016690:	b289      	uxth	r1, r1
 8016692:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016694:	b280      	uxth	r0, r0
 8016696:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016698:	fb01 fa00 	mul.w	sl, r1, r0
 801669c:	0109      	lsls	r1, r1, #4
 801669e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80166a2:	eba1 090a 	sub.w	r9, r1, sl
 80166a6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80166aa:	b280      	uxth	r0, r0
 80166ac:	fa1f f989 	uxth.w	r9, r9
 80166b0:	1a09      	subs	r1, r1, r0
 80166b2:	fb09 f303 	mul.w	r3, r9, r3
 80166b6:	b289      	uxth	r1, r1
 80166b8:	fb01 330e 	mla	r3, r1, lr, r3
 80166bc:	fb00 3304 	mla	r3, r0, r4, r3
 80166c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80166c2:	fb0a 3304 	mla	r3, sl, r4, r3
 80166c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	f000 80e8 	beq.w	80168a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80166d0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80166d4:	d01b      	beq.n	801670e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80166d6:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80166da:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80166de:	fb0e fb0b 	mul.w	fp, lr, fp
 80166e2:	fb0e fe02 	mul.w	lr, lr, r2
 80166e6:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80166ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80166ee:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80166f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80166f6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80166fa:	445a      	add	r2, fp
 80166fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016700:	0a12      	lsrs	r2, r2, #8
 8016702:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016706:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801670a:	ea42 020c 	orr.w	r2, r2, ip
 801670e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016710:	2cff      	cmp	r4, #255	; 0xff
 8016712:	d021      	beq.n	8016758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8016714:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016716:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801671a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801671c:	fb04 fc0c 	mul.w	ip, r4, ip
 8016720:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016722:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016726:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801672a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801672c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016730:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016734:	fb04 fb0b 	mul.w	fp, r4, fp
 8016738:	44e6      	add	lr, ip
 801673a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801673e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016742:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8016746:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801674a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801674e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8016752:	ea4e 040b 	orr.w	r4, lr, fp
 8016756:	940a      	str	r4, [sp, #40]	; 0x28
 8016758:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801675a:	2cff      	cmp	r4, #255	; 0xff
 801675c:	d021      	beq.n	80167a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801675e:	9c07      	ldr	r4, [sp, #28]
 8016760:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016764:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016766:	fb04 fc0c 	mul.w	ip, r4, ip
 801676a:	9c07      	ldr	r4, [sp, #28]
 801676c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016770:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8016774:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016776:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801677a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801677e:	fb04 fb0b 	mul.w	fp, r4, fp
 8016782:	44e6      	add	lr, ip
 8016784:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8016788:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801678c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8016790:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016794:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8016798:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801679c:	ea4e 040b 	orr.w	r4, lr, fp
 80167a0:	9407      	str	r4, [sp, #28]
 80167a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167a4:	2cff      	cmp	r4, #255	; 0xff
 80167a6:	d021      	beq.n	80167ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80167a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80167ae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167b0:	fb04 fc0c 	mul.w	ip, r4, ip
 80167b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167b6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80167ba:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80167be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80167c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80167cc:	44e6      	add	lr, ip
 80167ce:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80167d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80167d6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80167da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167de:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80167e2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80167e6:	ea4e 040b 	orr.w	r4, lr, fp
 80167ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80167ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80167ee:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80167f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80167f6:	2bff      	cmp	r3, #255	; 0xff
 80167f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80167fc:	9c07      	ldr	r4, [sp, #28]
 80167fe:	fb09 fc0c 	mul.w	ip, r9, ip
 8016802:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016806:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801680a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801680c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8016810:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016814:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016816:	fb0a cc0e 	mla	ip, sl, lr, ip
 801681a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801681e:	fb09 f90e 	mul.w	r9, r9, lr
 8016822:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016826:	fb01 9202 	mla	r2, r1, r2, r9
 801682a:	9907      	ldr	r1, [sp, #28]
 801682c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016830:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8016834:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016836:	fb00 220b 	mla	r2, r0, fp, r2
 801683a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801683e:	fb0a 2a00 	mla	sl, sl, r0, r2
 8016842:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016846:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801684a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801684e:	fa5f f08c 	uxtb.w	r0, ip
 8016852:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8016856:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801685a:	f000 80a2 	beq.w	80169a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801685e:	43db      	mvns	r3, r3
 8016860:	783a      	ldrb	r2, [r7, #0]
 8016862:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016866:	b2db      	uxtb	r3, r3
 8016868:	fb02 fe03 	mul.w	lr, r2, r3
 801686c:	fb0a fa03 	mul.w	sl, sl, r3
 8016870:	f10e 0201 	add.w	r2, lr, #1
 8016874:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8016878:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801687c:	703a      	strb	r2, [r7, #0]
 801687e:	787a      	ldrb	r2, [r7, #1]
 8016880:	fb02 f003 	mul.w	r0, r2, r3
 8016884:	f10a 0301 	add.w	r3, sl, #1
 8016888:	1c42      	adds	r2, r0, #1
 801688a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801688e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8016892:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8016896:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801689a:	707a      	strb	r2, [r7, #1]
 801689c:	f887 c002 	strb.w	ip, [r7, #2]
 80168a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80168a2:	3703      	adds	r7, #3
 80168a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80168a8:	441d      	add	r5, r3
 80168aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168ac:	441e      	add	r6, r3
 80168ae:	e6ab      	b.n	8016608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80168b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80168b2:	441d      	add	r5, r3
 80168b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168b6:	441e      	add	r6, r3
 80168b8:	9b06      	ldr	r3, [sp, #24]
 80168ba:	3b01      	subs	r3, #1
 80168bc:	9306      	str	r3, [sp, #24]
 80168be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168c0:	3303      	adds	r3, #3
 80168c2:	9309      	str	r3, [sp, #36]	; 0x24
 80168c4:	e680      	b.n	80165c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80168c6:	d024      	beq.n	8016912 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80168c8:	9b06      	ldr	r3, [sp, #24]
 80168ca:	9825      	ldr	r0, [sp, #148]	; 0x94
 80168cc:	3b01      	subs	r3, #1
 80168ce:	fb00 5003 	mla	r0, r0, r3, r5
 80168d2:	1400      	asrs	r0, r0, #16
 80168d4:	f53f ae95 	bmi.w	8016602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80168d8:	3901      	subs	r1, #1
 80168da:	4288      	cmp	r0, r1
 80168dc:	f6bf ae91 	bge.w	8016602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80168e0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80168e2:	fb01 6303 	mla	r3, r1, r3, r6
 80168e6:	141b      	asrs	r3, r3, #16
 80168e8:	f53f ae8b 	bmi.w	8016602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80168ec:	3a01      	subs	r2, #1
 80168ee:	4293      	cmp	r3, r2
 80168f0:	f6bf ae87 	bge.w	8016602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80168f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168f6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80168fa:	1cdf      	adds	r7, r3, #3
 80168fc:	f1bb 0f00 	cmp.w	fp, #0
 8016900:	dc6e      	bgt.n	80169e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8016902:	9b06      	ldr	r3, [sp, #24]
 8016904:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801690a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801690e:	4423      	add	r3, r4
 8016910:	9309      	str	r3, [sp, #36]	; 0x24
 8016912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016914:	2b00      	cmp	r3, #0
 8016916:	f340 81b0 	ble.w	8016c7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801691a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801691e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016920:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016924:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016928:	eef0 6a62 	vmov.f32	s13, s5
 801692c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016930:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016934:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016938:	ee16 5a90 	vmov	r5, s13
 801693c:	eef0 6a43 	vmov.f32	s13, s6
 8016940:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016944:	ee16 6a90 	vmov	r6, s13
 8016948:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801694c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016950:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016954:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016958:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801695c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016960:	ee12 2a90 	vmov	r2, s5
 8016964:	eef0 2a47 	vmov.f32	s5, s14
 8016968:	fb92 f3f3 	sdiv	r3, r2, r3
 801696c:	ee13 2a10 	vmov	r2, s6
 8016970:	9325      	str	r3, [sp, #148]	; 0x94
 8016972:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016974:	eeb0 3a67 	vmov.f32	s6, s15
 8016978:	fb92 f3f3 	sdiv	r3, r2, r3
 801697c:	9326      	str	r3, [sp, #152]	; 0x98
 801697e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016980:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016982:	3b01      	subs	r3, #1
 8016984:	9315      	str	r3, [sp, #84]	; 0x54
 8016986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016988:	bf08      	it	eq
 801698a:	4613      	moveq	r3, r2
 801698c:	9306      	str	r3, [sp, #24]
 801698e:	e60d      	b.n	80165ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016990:	2800      	cmp	r0, #0
 8016992:	f43f ae7d 	beq.w	8016690 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8016996:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801699a:	9307      	str	r3, [sp, #28]
 801699c:	0e1b      	lsrs	r3, r3, #24
 801699e:	930f      	str	r3, [sp, #60]	; 0x3c
 80169a0:	e676      	b.n	8016690 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80169a2:	7038      	strb	r0, [r7, #0]
 80169a4:	7079      	strb	r1, [r7, #1]
 80169a6:	e779      	b.n	801689c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80169a8:	f112 0901 	adds.w	r9, r2, #1
 80169ac:	f53f af78 	bmi.w	80168a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169b0:	454b      	cmp	r3, r9
 80169b2:	f6ff af75 	blt.w	80168a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169b6:	f11c 0901 	adds.w	r9, ip, #1
 80169ba:	f53f af71 	bmi.w	80168a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169be:	45ce      	cmp	lr, r9
 80169c0:	f6ff af6e 	blt.w	80168a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169c4:	b21b      	sxth	r3, r3
 80169c6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80169ca:	fa0f f28e 	sxth.w	r2, lr
 80169ce:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80169d2:	9200      	str	r2, [sp, #0]
 80169d4:	4639      	mov	r1, r7
 80169d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80169da:	f7ff fca1 	bl	8016320 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80169de:	e75f      	b.n	80168a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80169e2:	1429      	asrs	r1, r5, #16
 80169e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80169e6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80169ea:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80169ee:	1433      	asrs	r3, r6, #16
 80169f0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80169f4:	fb0c 1303 	mla	r3, ip, r3, r1
 80169f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80169fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80169fe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016a02:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8016a06:	2a00      	cmp	r2, #0
 8016a08:	f000 8129 	beq.w	8016c5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8016a0c:	684c      	ldr	r4, [r1, #4]
 8016a0e:	940c      	str	r4, [sp, #48]	; 0x30
 8016a10:	0e24      	lsrs	r4, r4, #24
 8016a12:	9413      	str	r4, [sp, #76]	; 0x4c
 8016a14:	b198      	cbz	r0, 8016a3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016a16:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8016a1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016a1e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8016a22:	f10c 0c04 	add.w	ip, ip, #4
 8016a26:	eb01 080c 	add.w	r8, r1, ip
 8016a2a:	f851 100c 	ldr.w	r1, [r1, ip]
 8016a2e:	9108      	str	r1, [sp, #32]
 8016a30:	0e09      	lsrs	r1, r1, #24
 8016a32:	9110      	str	r1, [sp, #64]	; 0x40
 8016a34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016a38:	910d      	str	r1, [sp, #52]	; 0x34
 8016a3a:	0e09      	lsrs	r1, r1, #24
 8016a3c:	9114      	str	r1, [sp, #80]	; 0x50
 8016a3e:	b292      	uxth	r2, r2
 8016a40:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016a42:	b280      	uxth	r0, r0
 8016a44:	fb02 f900 	mul.w	r9, r2, r0
 8016a48:	0112      	lsls	r2, r2, #4
 8016a4a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8016a4e:	eba2 0809 	sub.w	r8, r2, r9
 8016a52:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8016a56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a58:	b280      	uxth	r0, r0
 8016a5a:	fa1f f888 	uxth.w	r8, r8
 8016a5e:	1a09      	subs	r1, r1, r0
 8016a60:	fb08 f202 	mul.w	r2, r8, r2
 8016a64:	b289      	uxth	r1, r1
 8016a66:	fb01 220e 	mla	r2, r1, lr, r2
 8016a6a:	fb00 2204 	mla	r2, r0, r4, r2
 8016a6e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016a70:	fb09 2204 	mla	r2, r9, r4, r2
 8016a74:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016a78:	2a00      	cmp	r2, #0
 8016a7a:	f000 80e8 	beq.w	8016c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8016a7e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016a82:	d01b      	beq.n	8016abc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8016a84:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016a88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016a8c:	fb0e fa0a 	mul.w	sl, lr, sl
 8016a90:	fb0e fe03 	mul.w	lr, lr, r3
 8016a94:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016a98:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016a9c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016aa0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016aa4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016aa8:	4453      	add	r3, sl
 8016aaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016aae:	0a1b      	lsrs	r3, r3, #8
 8016ab0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016ab4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ab8:	ea43 030c 	orr.w	r3, r3, ip
 8016abc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016abe:	2cff      	cmp	r4, #255	; 0xff
 8016ac0:	d021      	beq.n	8016b06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8016ac2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016ac4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016ac8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016aca:	fb04 fc0c 	mul.w	ip, r4, ip
 8016ace:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016ad0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016ad4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016ad8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016ada:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016ade:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016ae2:	fb04 fa0a 	mul.w	sl, r4, sl
 8016ae6:	44e6      	add	lr, ip
 8016ae8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016aec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016af0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016af4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016af8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016afc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b00:	ea4e 040a 	orr.w	r4, lr, sl
 8016b04:	940c      	str	r4, [sp, #48]	; 0x30
 8016b06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b08:	2cff      	cmp	r4, #255	; 0xff
 8016b0a:	d021      	beq.n	8016b50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8016b0c:	9c08      	ldr	r4, [sp, #32]
 8016b0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016b12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b14:	fb04 fc0c 	mul.w	ip, r4, ip
 8016b18:	9c08      	ldr	r4, [sp, #32]
 8016b1a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016b1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b20:	fb04 fa0e 	mul.w	sl, r4, lr
 8016b24:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016b28:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016b2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b30:	44e6      	add	lr, ip
 8016b32:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016b36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016b3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016b42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b4a:	ea4e 040a 	orr.w	r4, lr, sl
 8016b4e:	9408      	str	r4, [sp, #32]
 8016b50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b52:	2cff      	cmp	r4, #255	; 0xff
 8016b54:	d021      	beq.n	8016b9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8016b56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b58:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016b5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b5e:	fb04 fc0c 	mul.w	ip, r4, ip
 8016b62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b64:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016b68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016b6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016b72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b76:	fb04 fa0a 	mul.w	sl, r4, sl
 8016b7a:	44e6      	add	lr, ip
 8016b7c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016b80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016b88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016b90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b94:	ea4e 040a 	orr.w	r4, lr, sl
 8016b98:	940d      	str	r4, [sp, #52]	; 0x34
 8016b9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016b9c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8016ba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016ba4:	2aff      	cmp	r2, #255	; 0xff
 8016ba6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016baa:	9c08      	ldr	r4, [sp, #32]
 8016bac:	fb08 fc0c 	mul.w	ip, r8, ip
 8016bb0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016bb4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016bb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016bba:	fb00 cc0e 	mla	ip, r0, lr, ip
 8016bbe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016bc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016bc4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8016bc8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016bcc:	fb08 f80e 	mul.w	r8, r8, lr
 8016bd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016bd4:	fb01 8303 	mla	r3, r1, r3, r8
 8016bd8:	9908      	ldr	r1, [sp, #32]
 8016bda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016bde:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8016be2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016be4:	fb00 330a 	mla	r3, r0, sl, r3
 8016be8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8016bec:	fb09 3e0e 	mla	lr, r9, lr, r3
 8016bf0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016bf4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016bf8:	ea4c 0c0e 	orr.w	ip, ip, lr
 8016bfc:	fa5f f08c 	uxtb.w	r0, ip
 8016c00:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8016c04:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8016c08:	d032      	beq.n	8016c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8016c0a:	43d2      	mvns	r2, r2
 8016c0c:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8016c10:	b2d2      	uxtb	r2, r2
 8016c12:	fb0e fe02 	mul.w	lr, lr, r2
 8016c16:	f10e 0301 	add.w	r3, lr, #1
 8016c1a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8016c1e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8016c22:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8016c26:	4350      	muls	r0, r2
 8016c28:	f807 3c03 	strb.w	r3, [r7, #-3]
 8016c2c:	1c43      	adds	r3, r0, #1
 8016c2e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016c32:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8016c36:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8016c3a:	4353      	muls	r3, r2
 8016c3c:	f807 1c02 	strb.w	r1, [r7, #-2]
 8016c40:	1c5a      	adds	r2, r3, #1
 8016c42:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016c46:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8016c4a:	f807 cc01 	strb.w	ip, [r7, #-1]
 8016c4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016c50:	3703      	adds	r7, #3
 8016c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016c56:	441d      	add	r5, r3
 8016c58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c5a:	441e      	add	r6, r3
 8016c5c:	e64e      	b.n	80168fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8016c5e:	2800      	cmp	r0, #0
 8016c60:	f43f aeed 	beq.w	8016a3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016c64:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8016c68:	9108      	str	r1, [sp, #32]
 8016c6a:	0e09      	lsrs	r1, r1, #24
 8016c6c:	9110      	str	r1, [sp, #64]	; 0x40
 8016c6e:	e6e6      	b.n	8016a3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016c70:	f807 0c03 	strb.w	r0, [r7, #-3]
 8016c74:	f807 1c02 	strb.w	r1, [r7, #-2]
 8016c78:	e7e7      	b.n	8016c4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8016c7a:	b019      	add	sp, #100	; 0x64
 8016c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8016c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c84:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8016c88:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8016c8c:	2c00      	cmp	r4, #0
 8016c8e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8016c92:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8016c96:	fb00 4e03 	mla	lr, r0, r3, r4
 8016c9a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8016c9e:	f2c0 80b8 	blt.w	8016e12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016ca2:	45a1      	cmp	r9, r4
 8016ca4:	f340 80b5 	ble.w	8016e12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016ca8:	2800      	cmp	r0, #0
 8016caa:	f2c0 80b2 	blt.w	8016e12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cae:	4580      	cmp	r8, r0
 8016cb0:	f340 80af 	ble.w	8016e12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cb4:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8016cb8:	f01e 0f01 	tst.w	lr, #1
 8016cbc:	5d56      	ldrb	r6, [r2, r5]
 8016cbe:	bf0c      	ite	eq
 8016cc0:	f006 060f 	andeq.w	r6, r6, #15
 8016cc4:	1136      	asrne	r6, r6, #4
 8016cc6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8016cca:	b2f6      	uxtb	r6, r6
 8016ccc:	f114 0a01 	adds.w	sl, r4, #1
 8016cd0:	f100 80a1 	bmi.w	8016e16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016cd4:	45d1      	cmp	r9, sl
 8016cd6:	f340 809e 	ble.w	8016e16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	f2c0 809b 	blt.w	8016e16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016ce0:	4580      	cmp	r8, r0
 8016ce2:	f340 8098 	ble.w	8016e16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016ce6:	2f00      	cmp	r7, #0
 8016ce8:	f000 8097 	beq.w	8016e1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8016cec:	f10e 0b01 	add.w	fp, lr, #1
 8016cf0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8016cf4:	f01b 0f01 	tst.w	fp, #1
 8016cf8:	5d55      	ldrb	r5, [r2, r5]
 8016cfa:	bf0c      	ite	eq
 8016cfc:	f005 050f 	andeq.w	r5, r5, #15
 8016d00:	112d      	asrne	r5, r5, #4
 8016d02:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8016d06:	b2ed      	uxtb	r5, r5
 8016d08:	f1bc 0f00 	cmp.w	ip, #0
 8016d0c:	f000 8089 	beq.w	8016e22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8016d10:	2c00      	cmp	r4, #0
 8016d12:	f100 0001 	add.w	r0, r0, #1
 8016d16:	f2c0 8082 	blt.w	8016e1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d1a:	45a1      	cmp	r9, r4
 8016d1c:	dd7f      	ble.n	8016e1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	db7d      	blt.n	8016e1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d22:	4580      	cmp	r8, r0
 8016d24:	dd7b      	ble.n	8016e1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d26:	eb03 0b0e 	add.w	fp, r3, lr
 8016d2a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8016d2e:	f01b 0f01 	tst.w	fp, #1
 8016d32:	5d14      	ldrb	r4, [r2, r4]
 8016d34:	bf0c      	ite	eq
 8016d36:	f004 040f 	andeq.w	r4, r4, #15
 8016d3a:	1124      	asrne	r4, r4, #4
 8016d3c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8016d40:	b2e4      	uxtb	r4, r4
 8016d42:	f1ba 0f00 	cmp.w	sl, #0
 8016d46:	db6f      	blt.n	8016e28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d48:	45d1      	cmp	r9, sl
 8016d4a:	dd6d      	ble.n	8016e28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d4c:	2800      	cmp	r0, #0
 8016d4e:	db6b      	blt.n	8016e28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d50:	4580      	cmp	r8, r0
 8016d52:	dd69      	ble.n	8016e28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d54:	2f00      	cmp	r7, #0
 8016d56:	d069      	beq.n	8016e2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8016d58:	3301      	adds	r3, #1
 8016d5a:	449e      	add	lr, r3
 8016d5c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8016d60:	f01e 0f01 	tst.w	lr, #1
 8016d64:	5cd0      	ldrb	r0, [r2, r3]
 8016d66:	bf0c      	ite	eq
 8016d68:	f000 000f 	andeq.w	r0, r0, #15
 8016d6c:	1100      	asrne	r0, r0, #4
 8016d6e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016d72:	b2c3      	uxtb	r3, r0
 8016d74:	b2ba      	uxth	r2, r7
 8016d76:	fa1f fc8c 	uxth.w	ip, ip
 8016d7a:	fb02 f00c 	mul.w	r0, r2, ip
 8016d7e:	0112      	lsls	r2, r2, #4
 8016d80:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8016d84:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8016d88:	1a12      	subs	r2, r2, r0
 8016d8a:	fa1f fc8c 	uxth.w	ip, ip
 8016d8e:	b292      	uxth	r2, r2
 8016d90:	eba7 070c 	sub.w	r7, r7, ip
 8016d94:	436a      	muls	r2, r5
 8016d96:	b2bf      	uxth	r7, r7
 8016d98:	fb06 2207 	mla	r2, r6, r7, r2
 8016d9c:	fb0c 2404 	mla	r4, ip, r4, r2
 8016da0:	fb00 4303 	mla	r3, r0, r3, r4
 8016da4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016da8:	b38b      	cbz	r3, 8016e0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8016daa:	4a21      	ldr	r2, [pc, #132]	; (8016e30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8016dac:	6814      	ldr	r4, [r2, #0]
 8016dae:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8016db2:	b2e5      	uxtb	r5, r4
 8016db4:	4353      	muls	r3, r2
 8016db6:	1c5a      	adds	r2, r3, #1
 8016db8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016dbc:	1212      	asrs	r2, r2, #8
 8016dbe:	b290      	uxth	r0, r2
 8016dc0:	43d2      	mvns	r2, r2
 8016dc2:	fb15 f500 	smulbb	r5, r5, r0
 8016dc6:	b2d3      	uxtb	r3, r2
 8016dc8:	780a      	ldrb	r2, [r1, #0]
 8016dca:	fb02 5203 	mla	r2, r2, r3, r5
 8016dce:	b292      	uxth	r2, r2
 8016dd0:	1c55      	adds	r5, r2, #1
 8016dd2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8016dd6:	784d      	ldrb	r5, [r1, #1]
 8016dd8:	fb15 f503 	smulbb	r5, r5, r3
 8016ddc:	1212      	asrs	r2, r2, #8
 8016dde:	700a      	strb	r2, [r1, #0]
 8016de0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8016de4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8016de8:	fb02 5200 	mla	r2, r2, r0, r5
 8016dec:	b292      	uxth	r2, r2
 8016dee:	1c55      	adds	r5, r2, #1
 8016df0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8016df4:	1212      	asrs	r2, r2, #8
 8016df6:	704a      	strb	r2, [r1, #1]
 8016df8:	788a      	ldrb	r2, [r1, #2]
 8016dfa:	fb12 f303 	smulbb	r3, r2, r3
 8016dfe:	fb04 3300 	mla	r3, r4, r0, r3
 8016e02:	b29b      	uxth	r3, r3
 8016e04:	1c5a      	adds	r2, r3, #1
 8016e06:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016e0a:	121b      	asrs	r3, r3, #8
 8016e0c:	708b      	strb	r3, [r1, #2]
 8016e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e12:	2600      	movs	r6, #0
 8016e14:	e75a      	b.n	8016ccc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8016e16:	2500      	movs	r5, #0
 8016e18:	e776      	b.n	8016d08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8016e1a:	463d      	mov	r5, r7
 8016e1c:	e774      	b.n	8016d08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8016e1e:	2400      	movs	r4, #0
 8016e20:	e78f      	b.n	8016d42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8016e22:	4663      	mov	r3, ip
 8016e24:	4664      	mov	r4, ip
 8016e26:	e7a5      	b.n	8016d74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e28:	2300      	movs	r3, #0
 8016e2a:	e7a3      	b.n	8016d74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e2c:	463b      	mov	r3, r7
 8016e2e:	e7a1      	b.n	8016d74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e30:	2400ae0c 	.word	0x2400ae0c

08016e34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e38:	b097      	sub	sp, #92	; 0x5c
 8016e3a:	9214      	str	r2, [sp, #80]	; 0x50
 8016e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e3e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016e40:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8016e44:	9015      	str	r0, [sp, #84]	; 0x54
 8016e46:	910c      	str	r1, [sp, #48]	; 0x30
 8016e48:	6850      	ldr	r0, [r2, #4]
 8016e4a:	930e      	str	r3, [sp, #56]	; 0x38
 8016e4c:	6812      	ldr	r2, [r2, #0]
 8016e4e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8016e52:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8016e56:	fb00 1303 	mla	r3, r0, r3, r1
 8016e5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e5e:	eb02 0a03 	add.w	sl, r2, r3
 8016e62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e64:	689b      	ldr	r3, [r3, #8]
 8016e66:	3301      	adds	r3, #1
 8016e68:	f023 0301 	bic.w	r3, r3, #1
 8016e6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e70:	681f      	ldr	r7, [r3, #0]
 8016e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	dc03      	bgt.n	8016e80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8016e78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	f340 8247 	ble.w	801730e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8016e80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016e86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016e8a:	1e48      	subs	r0, r1, #1
 8016e8c:	f102 3cff 	add.w	ip, r2, #4294967295
 8016e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	f340 80e5 	ble.w	8017062 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8016e98:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8016e9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016ea0:	d406      	bmi.n	8016eb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016ea2:	4586      	cmp	lr, r0
 8016ea4:	da04      	bge.n	8016eb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	db02      	blt.n	8016eb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016eaa:	4563      	cmp	r3, ip
 8016eac:	f2c0 80da 	blt.w	8017064 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8016eb0:	f11e 0e01 	adds.w	lr, lr, #1
 8016eb4:	f100 80cb 	bmi.w	801704e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016eb8:	4571      	cmp	r1, lr
 8016eba:	f2c0 80c8 	blt.w	801704e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	f100 80c5 	bmi.w	801704e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	f2c0 80c2 	blt.w	801704e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ecc:	46d0      	mov	r8, sl
 8016ece:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8016ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8016ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f340 80e3 	ble.w	80170a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8016edc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016ede:	1430      	asrs	r0, r6, #16
 8016ee0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8016ee4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8016ee8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8016eec:	142b      	asrs	r3, r5, #16
 8016eee:	f100 812e 	bmi.w	801714e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016ef2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8016ef6:	455b      	cmp	r3, fp
 8016ef8:	f280 8129 	bge.w	801714e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016efc:	2800      	cmp	r0, #0
 8016efe:	f2c0 8126 	blt.w	801714e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f02:	f10e 3bff 	add.w	fp, lr, #4294967295
 8016f06:	4558      	cmp	r0, fp
 8016f08:	f280 8121 	bge.w	801714e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f0c:	fb00 3309 	mla	r3, r0, r9, r3
 8016f10:	0858      	lsrs	r0, r3, #1
 8016f12:	07dc      	lsls	r4, r3, #31
 8016f14:	f817 c000 	ldrb.w	ip, [r7, r0]
 8016f18:	bf54      	ite	pl
 8016f1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8016f1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8016f22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8016f26:	fa5f fc8c 	uxtb.w	ip, ip
 8016f2a:	2a00      	cmp	r2, #0
 8016f2c:	f000 80fe 	beq.w	801712c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8016f30:	1c58      	adds	r0, r3, #1
 8016f32:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016f36:	07c0      	lsls	r0, r0, #31
 8016f38:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8016f3c:	bf54      	ite	pl
 8016f3e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8016f42:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8016f46:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8016f4a:	fa5f f08e 	uxtb.w	r0, lr
 8016f4e:	9010      	str	r0, [sp, #64]	; 0x40
 8016f50:	b1d9      	cbz	r1, 8016f8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016f52:	444b      	add	r3, r9
 8016f54:	0858      	lsrs	r0, r3, #1
 8016f56:	07dc      	lsls	r4, r3, #31
 8016f58:	f103 0301 	add.w	r3, r3, #1
 8016f5c:	5c38      	ldrb	r0, [r7, r0]
 8016f5e:	bf54      	ite	pl
 8016f60:	f000 000f 	andpl.w	r0, r0, #15
 8016f64:	1100      	asrmi	r0, r0, #4
 8016f66:	07dc      	lsls	r4, r3, #31
 8016f68:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016f6c:	b2c0      	uxtb	r0, r0
 8016f6e:	900a      	str	r0, [sp, #40]	; 0x28
 8016f70:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8016f74:	f817 e000 	ldrb.w	lr, [r7, r0]
 8016f78:	bf54      	ite	pl
 8016f7a:	f00e 030f 	andpl.w	r3, lr, #15
 8016f7e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8016f82:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8016f86:	b2db      	uxtb	r3, r3
 8016f88:	9311      	str	r3, [sp, #68]	; 0x44
 8016f8a:	b292      	uxth	r2, r2
 8016f8c:	b289      	uxth	r1, r1
 8016f8e:	0113      	lsls	r3, r2, #4
 8016f90:	fb02 f001 	mul.w	r0, r2, r1
 8016f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016f96:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8016f9a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8016f9e:	1a1b      	subs	r3, r3, r0
 8016fa0:	b289      	uxth	r1, r1
 8016fa2:	b29b      	uxth	r3, r3
 8016fa4:	ebae 0e01 	sub.w	lr, lr, r1
 8016fa8:	4353      	muls	r3, r2
 8016faa:	fa1f fe8e 	uxth.w	lr, lr
 8016fae:	fb0c 320e 	mla	r2, ip, lr, r3
 8016fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fb4:	fb01 2203 	mla	r2, r1, r3, r2
 8016fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fba:	fb00 2203 	mla	r2, r0, r3, r2
 8016fbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016fc2:	2a00      	cmp	r2, #0
 8016fc4:	d039      	beq.n	801703a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016fc6:	4bc7      	ldr	r3, [pc, #796]	; (80172e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8016fc8:	6819      	ldr	r1, [r3, #0]
 8016fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fcc:	fa5f fc81 	uxtb.w	ip, r1
 8016fd0:	435a      	muls	r2, r3
 8016fd2:	1c53      	adds	r3, r2, #1
 8016fd4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016fd8:	1212      	asrs	r2, r2, #8
 8016fda:	b290      	uxth	r0, r2
 8016fdc:	43d2      	mvns	r2, r2
 8016fde:	fb1c fc00 	smulbb	ip, ip, r0
 8016fe2:	b2d3      	uxtb	r3, r2
 8016fe4:	f898 2000 	ldrb.w	r2, [r8]
 8016fe8:	fb02 c203 	mla	r2, r2, r3, ip
 8016fec:	b292      	uxth	r2, r2
 8016fee:	f102 0c01 	add.w	ip, r2, #1
 8016ff2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016ff6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8016ffa:	fb1c fc03 	smulbb	ip, ip, r3
 8016ffe:	1212      	asrs	r2, r2, #8
 8017000:	f888 2000 	strb.w	r2, [r8]
 8017004:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8017008:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801700c:	fb02 c200 	mla	r2, r2, r0, ip
 8017010:	b292      	uxth	r2, r2
 8017012:	f102 0c01 	add.w	ip, r2, #1
 8017016:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801701a:	1212      	asrs	r2, r2, #8
 801701c:	f888 2001 	strb.w	r2, [r8, #1]
 8017020:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017024:	fb12 f303 	smulbb	r3, r2, r3
 8017028:	fb01 3300 	mla	r3, r1, r0, r3
 801702c:	b29b      	uxth	r3, r3
 801702e:	1c5a      	adds	r2, r3, #1
 8017030:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017034:	121b      	asrs	r3, r3, #8
 8017036:	f888 3002 	strb.w	r3, [r8, #2]
 801703a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801703c:	f108 0803 	add.w	r8, r8, #3
 8017040:	441d      	add	r5, r3
 8017042:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017044:	441e      	add	r6, r3
 8017046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017048:	3b01      	subs	r3, #1
 801704a:	930d      	str	r3, [sp, #52]	; 0x34
 801704c:	e742      	b.n	8016ed4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801704e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017050:	f10a 0a03 	add.w	sl, sl, #3
 8017054:	441d      	add	r5, r3
 8017056:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017058:	441e      	add	r6, r3
 801705a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801705c:	3b01      	subs	r3, #1
 801705e:	9309      	str	r3, [sp, #36]	; 0x24
 8017060:	e716      	b.n	8016e90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017062:	d024      	beq.n	80170ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8017064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017066:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017068:	3b01      	subs	r3, #1
 801706a:	fb00 5003 	mla	r0, r0, r3, r5
 801706e:	1400      	asrs	r0, r0, #16
 8017070:	f53f af2b 	bmi.w	8016eca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017074:	3901      	subs	r1, #1
 8017076:	4288      	cmp	r0, r1
 8017078:	f6bf af27 	bge.w	8016eca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801707c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801707e:	fb01 6303 	mla	r3, r1, r3, r6
 8017082:	141b      	asrs	r3, r3, #16
 8017084:	f53f af21 	bmi.w	8016eca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017088:	3a01      	subs	r2, #1
 801708a:	4293      	cmp	r3, r2
 801708c:	f6bf af1d 	bge.w	8016eca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017090:	f10a 0e03 	add.w	lr, sl, #3
 8017094:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8017098:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801709c:	f1b8 0f00 	cmp.w	r8, #0
 80170a0:	dc76      	bgt.n	8017190 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80170a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80170a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80170ac:	44a2      	add	sl, r4
 80170ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f340 812c 	ble.w	801730e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80170b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80170ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80170c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80170c4:	eef0 6a62 	vmov.f32	s13, s5
 80170c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80170d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80170d4:	ee16 5a90 	vmov	r5, s13
 80170d8:	eef0 6a43 	vmov.f32	s13, s6
 80170dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80170e0:	ee16 6a90 	vmov	r6, s13
 80170e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80170e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80170ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80170f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80170f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80170f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80170fc:	ee12 2a90 	vmov	r2, s5
 8017100:	eef0 2a47 	vmov.f32	s5, s14
 8017104:	fb92 f3f3 	sdiv	r3, r2, r3
 8017108:	ee13 2a10 	vmov	r2, s6
 801710c:	9323      	str	r3, [sp, #140]	; 0x8c
 801710e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017110:	eeb0 3a67 	vmov.f32	s6, s15
 8017114:	fb92 f3f3 	sdiv	r3, r2, r3
 8017118:	9324      	str	r3, [sp, #144]	; 0x90
 801711a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801711c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801711e:	3b01      	subs	r3, #1
 8017120:	930c      	str	r3, [sp, #48]	; 0x30
 8017122:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017124:	bf08      	it	eq
 8017126:	4613      	moveq	r3, r2
 8017128:	9309      	str	r3, [sp, #36]	; 0x24
 801712a:	e6a2      	b.n	8016e72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801712c:	2900      	cmp	r1, #0
 801712e:	f43f af2c 	beq.w	8016f8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017132:	eb09 0003 	add.w	r0, r9, r3
 8017136:	0843      	lsrs	r3, r0, #1
 8017138:	07c0      	lsls	r0, r0, #31
 801713a:	5cfb      	ldrb	r3, [r7, r3]
 801713c:	bf54      	ite	pl
 801713e:	f003 030f 	andpl.w	r3, r3, #15
 8017142:	111b      	asrmi	r3, r3, #4
 8017144:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017148:	b2db      	uxtb	r3, r3
 801714a:	930a      	str	r3, [sp, #40]	; 0x28
 801714c:	e71d      	b.n	8016f8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801714e:	f113 0b01 	adds.w	fp, r3, #1
 8017152:	f53f af72 	bmi.w	801703a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017156:	45dc      	cmp	ip, fp
 8017158:	f6ff af6f 	blt.w	801703a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801715c:	f110 0b01 	adds.w	fp, r0, #1
 8017160:	f53f af6b 	bmi.w	801703a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017164:	45de      	cmp	lr, fp
 8017166:	f6ff af68 	blt.w	801703a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801716a:	9302      	str	r3, [sp, #8]
 801716c:	fa0f f38e 	sxth.w	r3, lr
 8017170:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017172:	9301      	str	r3, [sp, #4]
 8017174:	fa0f f38c 	sxth.w	r3, ip
 8017178:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801717c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8017180:	9300      	str	r3, [sp, #0]
 8017182:	463a      	mov	r2, r7
 8017184:	464b      	mov	r3, r9
 8017186:	4641      	mov	r1, r8
 8017188:	9815      	ldr	r0, [sp, #84]	; 0x54
 801718a:	f7ff fd79 	bl	8016c80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801718e:	e754      	b.n	801703a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017190:	142a      	asrs	r2, r5, #16
 8017192:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017196:	1433      	asrs	r3, r6, #16
 8017198:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801719c:	fb09 2303 	mla	r3, r9, r3, r2
 80171a0:	085a      	lsrs	r2, r3, #1
 80171a2:	07dc      	lsls	r4, r3, #31
 80171a4:	5cba      	ldrb	r2, [r7, r2]
 80171a6:	bf54      	ite	pl
 80171a8:	f002 020f 	andpl.w	r2, r2, #15
 80171ac:	1112      	asrmi	r2, r2, #4
 80171ae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80171b2:	b2d2      	uxtb	r2, r2
 80171b4:	2900      	cmp	r1, #0
 80171b6:	f000 8097 	beq.w	80172e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80171ba:	f103 0b01 	add.w	fp, r3, #1
 80171be:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80171c2:	f01b 0f01 	tst.w	fp, #1
 80171c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80171ca:	bf0c      	ite	eq
 80171cc:	f00c 0c0f 	andeq.w	ip, ip, #15
 80171d0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80171d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80171d8:	fa5f f48c 	uxtb.w	r4, ip
 80171dc:	9412      	str	r4, [sp, #72]	; 0x48
 80171de:	b300      	cbz	r0, 8017222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80171e0:	444b      	add	r3, r9
 80171e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80171e6:	07dc      	lsls	r4, r3, #31
 80171e8:	f103 0301 	add.w	r3, r3, #1
 80171ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80171f0:	bf54      	ite	pl
 80171f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80171f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80171fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80171fe:	fa5f f48c 	uxtb.w	r4, ip
 8017202:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017206:	940b      	str	r4, [sp, #44]	; 0x2c
 8017208:	07dc      	lsls	r4, r3, #31
 801720a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801720e:	bf54      	ite	pl
 8017210:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017214:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017218:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801721c:	fa5f f38c 	uxtb.w	r3, ip
 8017220:	9313      	str	r3, [sp, #76]	; 0x4c
 8017222:	b289      	uxth	r1, r1
 8017224:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017226:	b280      	uxth	r0, r0
 8017228:	fb01 f300 	mul.w	r3, r1, r0
 801722c:	0109      	lsls	r1, r1, #4
 801722e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8017232:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8017236:	1ac9      	subs	r1, r1, r3
 8017238:	b280      	uxth	r0, r0
 801723a:	b289      	uxth	r1, r1
 801723c:	ebac 0c00 	sub.w	ip, ip, r0
 8017240:	4361      	muls	r1, r4
 8017242:	fa1f fc8c 	uxth.w	ip, ip
 8017246:	fb02 120c 	mla	r2, r2, ip, r1
 801724a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801724c:	fb00 2001 	mla	r0, r0, r1, r2
 8017250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017252:	fb03 0302 	mla	r3, r3, r2, r0
 8017256:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801725a:	2b00      	cmp	r3, #0
 801725c:	d039      	beq.n	80172d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801725e:	4a21      	ldr	r2, [pc, #132]	; (80172e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8017260:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017264:	6810      	ldr	r0, [r2, #0]
 8017266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017268:	fa5f fc80 	uxtb.w	ip, r0
 801726c:	4353      	muls	r3, r2
 801726e:	1c5a      	adds	r2, r3, #1
 8017270:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017274:	121b      	asrs	r3, r3, #8
 8017276:	b29a      	uxth	r2, r3
 8017278:	43db      	mvns	r3, r3
 801727a:	fb1c fc02 	smulbb	ip, ip, r2
 801727e:	b2db      	uxtb	r3, r3
 8017280:	fb01 c103 	mla	r1, r1, r3, ip
 8017284:	b289      	uxth	r1, r1
 8017286:	f101 0c01 	add.w	ip, r1, #1
 801728a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801728e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8017292:	fb1c fc03 	smulbb	ip, ip, r3
 8017296:	1209      	asrs	r1, r1, #8
 8017298:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801729c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80172a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80172a4:	fb01 c102 	mla	r1, r1, r2, ip
 80172a8:	b289      	uxth	r1, r1
 80172aa:	f101 0c01 	add.w	ip, r1, #1
 80172ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80172b2:	1209      	asrs	r1, r1, #8
 80172b4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80172b8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80172bc:	fb11 f303 	smulbb	r3, r1, r3
 80172c0:	fb00 3002 	mla	r0, r0, r2, r3
 80172c4:	b280      	uxth	r0, r0
 80172c6:	1c42      	adds	r2, r0, #1
 80172c8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80172cc:	1200      	asrs	r0, r0, #8
 80172ce:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80172d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80172d4:	f10e 0e03 	add.w	lr, lr, #3
 80172d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80172dc:	441d      	add	r5, r3
 80172de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80172e0:	441e      	add	r6, r3
 80172e2:	e6db      	b.n	801709c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80172e4:	2400ae0c 	.word	0x2400ae0c
 80172e8:	2800      	cmp	r0, #0
 80172ea:	d09a      	beq.n	8017222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80172ec:	444b      	add	r3, r9
 80172ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80172f2:	07db      	lsls	r3, r3, #31
 80172f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80172f8:	bf54      	ite	pl
 80172fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80172fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017302:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017306:	fa5f f38c 	uxtb.w	r3, ip
 801730a:	930b      	str	r3, [sp, #44]	; 0x2c
 801730c:	e789      	b.n	8017222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801730e:	b017      	add	sp, #92	; 0x5c
 8017310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017314 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8017314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017318:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801731c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017320:	2d00      	cmp	r5, #0
 8017322:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8017326:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801732a:	fb04 5e03 	mla	lr, r4, r3, r5
 801732e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8017332:	f2c0 80b1 	blt.w	8017498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017336:	45a9      	cmp	r9, r5
 8017338:	f340 80ae 	ble.w	8017498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801733c:	2c00      	cmp	r4, #0
 801733e:	f2c0 80ab 	blt.w	8017498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017342:	45a0      	cmp	r8, r4
 8017344:	f340 80a8 	ble.w	8017498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017348:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801734c:	f01e 0f01 	tst.w	lr, #1
 8017350:	5d97      	ldrb	r7, [r2, r6]
 8017352:	bf0c      	ite	eq
 8017354:	f007 070f 	andeq.w	r7, r7, #15
 8017358:	113f      	asrne	r7, r7, #4
 801735a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801735e:	b2ff      	uxtb	r7, r7
 8017360:	f115 0a01 	adds.w	sl, r5, #1
 8017364:	f100 809a 	bmi.w	801749c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8017368:	45d1      	cmp	r9, sl
 801736a:	f340 8097 	ble.w	801749c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801736e:	2c00      	cmp	r4, #0
 8017370:	f2c0 8094 	blt.w	801749c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8017374:	45a0      	cmp	r8, r4
 8017376:	f340 8091 	ble.w	801749c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801737a:	2800      	cmp	r0, #0
 801737c:	f000 8090 	beq.w	80174a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8017380:	f10e 0b01 	add.w	fp, lr, #1
 8017384:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8017388:	f01b 0f01 	tst.w	fp, #1
 801738c:	5d96      	ldrb	r6, [r2, r6]
 801738e:	bf0c      	ite	eq
 8017390:	f006 060f 	andeq.w	r6, r6, #15
 8017394:	1136      	asrne	r6, r6, #4
 8017396:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801739a:	b2f6      	uxtb	r6, r6
 801739c:	f1bc 0f00 	cmp.w	ip, #0
 80173a0:	f000 8082 	beq.w	80174a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80173a4:	2d00      	cmp	r5, #0
 80173a6:	f104 0401 	add.w	r4, r4, #1
 80173aa:	db7b      	blt.n	80174a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173ac:	45a9      	cmp	r9, r5
 80173ae:	dd79      	ble.n	80174a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173b0:	2c00      	cmp	r4, #0
 80173b2:	db77      	blt.n	80174a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173b4:	45a0      	cmp	r8, r4
 80173b6:	dd75      	ble.n	80174a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173b8:	eb03 0b0e 	add.w	fp, r3, lr
 80173bc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80173c0:	f01b 0f01 	tst.w	fp, #1
 80173c4:	5d55      	ldrb	r5, [r2, r5]
 80173c6:	bf0c      	ite	eq
 80173c8:	f005 050f 	andeq.w	r5, r5, #15
 80173cc:	112d      	asrne	r5, r5, #4
 80173ce:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80173d2:	b2ed      	uxtb	r5, r5
 80173d4:	f1ba 0f00 	cmp.w	sl, #0
 80173d8:	db69      	blt.n	80174ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80173da:	45d1      	cmp	r9, sl
 80173dc:	dd67      	ble.n	80174ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80173de:	2c00      	cmp	r4, #0
 80173e0:	db65      	blt.n	80174ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80173e2:	45a0      	cmp	r8, r4
 80173e4:	dd63      	ble.n	80174ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80173e6:	2800      	cmp	r0, #0
 80173e8:	d063      	beq.n	80174b2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80173ea:	3301      	adds	r3, #1
 80173ec:	449e      	add	lr, r3
 80173ee:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80173f2:	f01e 0f01 	tst.w	lr, #1
 80173f6:	5cd4      	ldrb	r4, [r2, r3]
 80173f8:	bf0c      	ite	eq
 80173fa:	f004 040f 	andeq.w	r4, r4, #15
 80173fe:	1124      	asrne	r4, r4, #4
 8017400:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8017404:	b2e3      	uxtb	r3, r4
 8017406:	b282      	uxth	r2, r0
 8017408:	fa1f fc8c 	uxth.w	ip, ip
 801740c:	fb02 f40c 	mul.w	r4, r2, ip
 8017410:	0112      	lsls	r2, r2, #4
 8017412:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8017416:	fa1f f08c 	uxth.w	r0, ip
 801741a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801741e:	1b12      	subs	r2, r2, r4
 8017420:	ebac 0c00 	sub.w	ip, ip, r0
 8017424:	b292      	uxth	r2, r2
 8017426:	fa1f fc8c 	uxth.w	ip, ip
 801742a:	4372      	muls	r2, r6
 801742c:	fb07 220c 	mla	r2, r7, ip, r2
 8017430:	fb00 2005 	mla	r0, r0, r5, r2
 8017434:	fb04 0303 	mla	r3, r4, r3, r0
 8017438:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801743c:	b353      	cbz	r3, 8017494 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801743e:	4a1e      	ldr	r2, [pc, #120]	; (80174b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8017440:	7808      	ldrb	r0, [r1, #0]
 8017442:	6814      	ldr	r4, [r2, #0]
 8017444:	b29a      	uxth	r2, r3
 8017446:	43db      	mvns	r3, r3
 8017448:	b2e5      	uxtb	r5, r4
 801744a:	b2db      	uxtb	r3, r3
 801744c:	fb15 f502 	smulbb	r5, r5, r2
 8017450:	fb00 5003 	mla	r0, r0, r3, r5
 8017454:	b280      	uxth	r0, r0
 8017456:	1c45      	adds	r5, r0, #1
 8017458:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801745c:	784d      	ldrb	r5, [r1, #1]
 801745e:	fb15 f503 	smulbb	r5, r5, r3
 8017462:	1200      	asrs	r0, r0, #8
 8017464:	7008      	strb	r0, [r1, #0]
 8017466:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801746a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801746e:	fb00 5002 	mla	r0, r0, r2, r5
 8017472:	b280      	uxth	r0, r0
 8017474:	1c45      	adds	r5, r0, #1
 8017476:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801747a:	1200      	asrs	r0, r0, #8
 801747c:	7048      	strb	r0, [r1, #1]
 801747e:	7888      	ldrb	r0, [r1, #2]
 8017480:	fb10 f303 	smulbb	r3, r0, r3
 8017484:	fb04 3202 	mla	r2, r4, r2, r3
 8017488:	b292      	uxth	r2, r2
 801748a:	1c53      	adds	r3, r2, #1
 801748c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017490:	1212      	asrs	r2, r2, #8
 8017492:	708a      	strb	r2, [r1, #2]
 8017494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017498:	2700      	movs	r7, #0
 801749a:	e761      	b.n	8017360 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801749c:	2600      	movs	r6, #0
 801749e:	e77d      	b.n	801739c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80174a0:	4606      	mov	r6, r0
 80174a2:	e77b      	b.n	801739c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80174a4:	2500      	movs	r5, #0
 80174a6:	e795      	b.n	80173d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80174a8:	4663      	mov	r3, ip
 80174aa:	4665      	mov	r5, ip
 80174ac:	e7ab      	b.n	8017406 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174ae:	2300      	movs	r3, #0
 80174b0:	e7a9      	b.n	8017406 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174b2:	4603      	mov	r3, r0
 80174b4:	e7a7      	b.n	8017406 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174b6:	bf00      	nop
 80174b8:	2400ae0c 	.word	0x2400ae0c

080174bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80174bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c0:	b093      	sub	sp, #76	; 0x4c
 80174c2:	461c      	mov	r4, r3
 80174c4:	920c      	str	r2, [sp, #48]	; 0x30
 80174c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174c8:	9011      	str	r0, [sp, #68]	; 0x44
 80174ca:	9107      	str	r1, [sp, #28]
 80174cc:	6850      	ldr	r0, [r2, #4]
 80174ce:	6812      	ldr	r2, [r2, #0]
 80174d0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80174d4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 80174d8:	fb00 1303 	mla	r3, r0, r3, r1
 80174dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80174e0:	eb02 0b03 	add.w	fp, r2, r3
 80174e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80174e6:	689b      	ldr	r3, [r3, #8]
 80174e8:	3301      	adds	r3, #1
 80174ea:	f023 0301 	bic.w	r3, r3, #1
 80174ee:	9309      	str	r3, [sp, #36]	; 0x24
 80174f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80174f2:	f8d3 8000 	ldr.w	r8, [r3]
 80174f6:	9b07      	ldr	r3, [sp, #28]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	dc03      	bgt.n	8017504 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80174fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174fe:	2b00      	cmp	r3, #0
 8017500:	f340 822b 	ble.w	801795a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8017504:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017506:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801750a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801750e:	1e48      	subs	r0, r1, #1
 8017510:	1e57      	subs	r7, r2, #1
 8017512:	2c00      	cmp	r4, #0
 8017514:	f340 80d7 	ble.w	80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8017518:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801751c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017520:	d406      	bmi.n	8017530 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017522:	4584      	cmp	ip, r0
 8017524:	da04      	bge.n	8017530 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017526:	2b00      	cmp	r3, #0
 8017528:	db02      	blt.n	8017530 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801752a:	42bb      	cmp	r3, r7
 801752c:	f2c0 80cc 	blt.w	80176c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8017530:	f11c 0c01 	adds.w	ip, ip, #1
 8017534:	f100 80bf 	bmi.w	80176b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017538:	4561      	cmp	r1, ip
 801753a:	f2c0 80bc 	blt.w	80176b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801753e:	3301      	adds	r3, #1
 8017540:	f100 80b9 	bmi.w	80176b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017544:	429a      	cmp	r2, r3
 8017546:	f2c0 80b6 	blt.w	80176b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801754a:	46a2      	mov	sl, r4
 801754c:	465f      	mov	r7, fp
 801754e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017552:	f1ba 0f00 	cmp.w	sl, #0
 8017556:	f340 80d4 	ble.w	8017702 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801755a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801755e:	1430      	asrs	r0, r6, #16
 8017560:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017564:	9308      	str	r3, [sp, #32]
 8017566:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017568:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801756c:	142b      	asrs	r3, r5, #16
 801756e:	f100 8124 	bmi.w	80177ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8017572:	f10c 32ff 	add.w	r2, ip, #4294967295
 8017576:	4293      	cmp	r3, r2
 8017578:	f280 811f 	bge.w	80177ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801757c:	2800      	cmp	r0, #0
 801757e:	f2c0 811c 	blt.w	80177ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8017582:	f10e 32ff 	add.w	r2, lr, #4294967295
 8017586:	4290      	cmp	r0, r2
 8017588:	f280 8117 	bge.w	80177ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801758c:	fb00 3309 	mla	r3, r0, r9, r3
 8017590:	0858      	lsrs	r0, r3, #1
 8017592:	07da      	lsls	r2, r3, #31
 8017594:	9a08      	ldr	r2, [sp, #32]
 8017596:	f818 c000 	ldrb.w	ip, [r8, r0]
 801759a:	bf54      	ite	pl
 801759c:	f00c 0c0f 	andpl.w	ip, ip, #15
 80175a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80175a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80175a8:	fa5f fc8c 	uxtb.w	ip, ip
 80175ac:	2a00      	cmp	r2, #0
 80175ae:	f000 80ed 	beq.w	801778c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80175b2:	1c58      	adds	r0, r3, #1
 80175b4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80175b8:	07c0      	lsls	r0, r0, #31
 80175ba:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80175be:	bf54      	ite	pl
 80175c0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80175c4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80175c8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80175cc:	fa5f fe8e 	uxtb.w	lr, lr
 80175d0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80175d4:	b1c9      	cbz	r1, 801760a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80175d6:	444b      	add	r3, r9
 80175d8:	0858      	lsrs	r0, r3, #1
 80175da:	07da      	lsls	r2, r3, #31
 80175dc:	f818 0000 	ldrb.w	r0, [r8, r0]
 80175e0:	bf54      	ite	pl
 80175e2:	f000 000f 	andpl.w	r0, r0, #15
 80175e6:	1100      	asrmi	r0, r0, #4
 80175e8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80175ec:	b2c0      	uxtb	r0, r0
 80175ee:	900a      	str	r0, [sp, #40]	; 0x28
 80175f0:	1c58      	adds	r0, r3, #1
 80175f2:	0843      	lsrs	r3, r0, #1
 80175f4:	07c2      	lsls	r2, r0, #31
 80175f6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80175fa:	bf54      	ite	pl
 80175fc:	f003 030f 	andpl.w	r3, r3, #15
 8017600:	111b      	asrmi	r3, r3, #4
 8017602:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017606:	b2db      	uxtb	r3, r3
 8017608:	930e      	str	r3, [sp, #56]	; 0x38
 801760a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801760e:	b289      	uxth	r1, r1
 8017610:	fb02 f301 	mul.w	r3, r2, r1
 8017614:	0112      	lsls	r2, r2, #4
 8017616:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801761a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801761e:	1ad2      	subs	r2, r2, r3
 8017620:	b289      	uxth	r1, r1
 8017622:	b292      	uxth	r2, r2
 8017624:	1a40      	subs	r0, r0, r1
 8017626:	fa1f fe80 	uxth.w	lr, r0
 801762a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801762c:	4342      	muls	r2, r0
 801762e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8017632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017634:	fb01 c102 	mla	r1, r1, r2, ip
 8017638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801763a:	fb03 1302 	mla	r3, r3, r2, r1
 801763e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017642:	b383      	cbz	r3, 80176a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017644:	4ac6      	ldr	r2, [pc, #792]	; (8017960 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8017646:	2bff      	cmp	r3, #255	; 0xff
 8017648:	6812      	ldr	r2, [r2, #0]
 801764a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801764e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8017652:	b2d2      	uxtb	r2, r2
 8017654:	f000 80ac 	beq.w	80177b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8017658:	b299      	uxth	r1, r3
 801765a:	43db      	mvns	r3, r3
 801765c:	f897 c000 	ldrb.w	ip, [r7]
 8017660:	fb12 f201 	smulbb	r2, r2, r1
 8017664:	b2db      	uxtb	r3, r3
 8017666:	fb10 f001 	smulbb	r0, r0, r1
 801766a:	fb0c 2203 	mla	r2, ip, r3, r2
 801766e:	fb1e f101 	smulbb	r1, lr, r1
 8017672:	b292      	uxth	r2, r2
 8017674:	f102 0c01 	add.w	ip, r2, #1
 8017678:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801767c:	1212      	asrs	r2, r2, #8
 801767e:	703a      	strb	r2, [r7, #0]
 8017680:	787a      	ldrb	r2, [r7, #1]
 8017682:	fb02 0003 	mla	r0, r2, r3, r0
 8017686:	b280      	uxth	r0, r0
 8017688:	1c42      	adds	r2, r0, #1
 801768a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801768e:	78ba      	ldrb	r2, [r7, #2]
 8017690:	fb02 1303 	mla	r3, r2, r3, r1
 8017694:	1200      	asrs	r0, r0, #8
 8017696:	b29b      	uxth	r3, r3
 8017698:	7078      	strb	r0, [r7, #1]
 801769a:	f103 0e01 	add.w	lr, r3, #1
 801769e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80176a2:	121b      	asrs	r3, r3, #8
 80176a4:	70bb      	strb	r3, [r7, #2]
 80176a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176a8:	3703      	adds	r7, #3
 80176aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176ae:	441d      	add	r5, r3
 80176b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80176b2:	441e      	add	r6, r3
 80176b4:	e74d      	b.n	8017552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80176b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176b8:	3c01      	subs	r4, #1
 80176ba:	f10b 0b03 	add.w	fp, fp, #3
 80176be:	441d      	add	r5, r3
 80176c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80176c2:	441e      	add	r6, r3
 80176c4:	e725      	b.n	8017512 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80176c6:	d021      	beq.n	801770c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80176c8:	1e63      	subs	r3, r4, #1
 80176ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80176cc:	fb00 5003 	mla	r0, r0, r3, r5
 80176d0:	1400      	asrs	r0, r0, #16
 80176d2:	f53f af3a 	bmi.w	801754a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80176d6:	3901      	subs	r1, #1
 80176d8:	4288      	cmp	r0, r1
 80176da:	f6bf af36 	bge.w	801754a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80176de:	9920      	ldr	r1, [sp, #128]	; 0x80
 80176e0:	fb01 6303 	mla	r3, r1, r3, r6
 80176e4:	141b      	asrs	r3, r3, #16
 80176e6:	f53f af30 	bmi.w	801754a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80176ea:	3a01      	subs	r2, #1
 80176ec:	4293      	cmp	r3, r2
 80176ee:	f6bf af2c 	bge.w	801754a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80176f2:	f10b 0c03 	add.w	ip, fp, #3
 80176f6:	46a6      	mov	lr, r4
 80176f8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80176fc:	f1be 0f00 	cmp.w	lr, #0
 8017700:	dc79      	bgt.n	80177f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8017702:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8017706:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801770a:	44a3      	add	fp, r4
 801770c:	9b07      	ldr	r3, [sp, #28]
 801770e:	2b00      	cmp	r3, #0
 8017710:	f340 8123 	ble.w	801795a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8017714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017718:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801771a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801771e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017722:	eef0 6a62 	vmov.f32	s13, s5
 8017726:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801772a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801772e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017732:	ee16 5a90 	vmov	r5, s13
 8017736:	eef0 6a43 	vmov.f32	s13, s6
 801773a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801773e:	ee16 6a90 	vmov	r6, s13
 8017742:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017746:	ee61 7a27 	vmul.f32	s15, s2, s15
 801774a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801774e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017752:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017756:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801775a:	ee12 2a90 	vmov	r2, s5
 801775e:	eef0 2a47 	vmov.f32	s5, s14
 8017762:	fb92 f3f3 	sdiv	r3, r2, r3
 8017766:	ee13 2a10 	vmov	r2, s6
 801776a:	931f      	str	r3, [sp, #124]	; 0x7c
 801776c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801776e:	eeb0 3a67 	vmov.f32	s6, s15
 8017772:	fb92 f3f3 	sdiv	r3, r2, r3
 8017776:	9320      	str	r3, [sp, #128]	; 0x80
 8017778:	9b07      	ldr	r3, [sp, #28]
 801777a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801777c:	3b01      	subs	r3, #1
 801777e:	9307      	str	r3, [sp, #28]
 8017780:	bf08      	it	eq
 8017782:	4614      	moveq	r4, r2
 8017784:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017786:	bf18      	it	ne
 8017788:	461c      	movne	r4, r3
 801778a:	e6b4      	b.n	80174f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801778c:	2900      	cmp	r1, #0
 801778e:	f43f af3c 	beq.w	801760a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017792:	eb09 0003 	add.w	r0, r9, r3
 8017796:	0843      	lsrs	r3, r0, #1
 8017798:	07c0      	lsls	r0, r0, #31
 801779a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801779e:	bf54      	ite	pl
 80177a0:	f003 030f 	andpl.w	r3, r3, #15
 80177a4:	111b      	asrmi	r3, r3, #4
 80177a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80177aa:	b2db      	uxtb	r3, r3
 80177ac:	930a      	str	r3, [sp, #40]	; 0x28
 80177ae:	e72c      	b.n	801760a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80177b0:	703a      	strb	r2, [r7, #0]
 80177b2:	7078      	strb	r0, [r7, #1]
 80177b4:	f887 e002 	strb.w	lr, [r7, #2]
 80177b8:	e775      	b.n	80176a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177ba:	1c5a      	adds	r2, r3, #1
 80177bc:	f53f af73 	bmi.w	80176a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177c0:	4594      	cmp	ip, r2
 80177c2:	f6ff af70 	blt.w	80176a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177c6:	1c42      	adds	r2, r0, #1
 80177c8:	f53f af6d 	bmi.w	80176a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177cc:	4596      	cmp	lr, r2
 80177ce:	f6ff af6a 	blt.w	80176a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177d2:	9302      	str	r3, [sp, #8]
 80177d4:	fa0f f38e 	sxth.w	r3, lr
 80177d8:	9a08      	ldr	r2, [sp, #32]
 80177da:	9301      	str	r3, [sp, #4]
 80177dc:	fa0f f38c 	sxth.w	r3, ip
 80177e0:	9105      	str	r1, [sp, #20]
 80177e2:	4639      	mov	r1, r7
 80177e4:	9300      	str	r3, [sp, #0]
 80177e6:	464b      	mov	r3, r9
 80177e8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80177ec:	4642      	mov	r2, r8
 80177ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80177f0:	f7ff fd90 	bl	8017314 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80177f4:	e757      	b.n	80176a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177f6:	142a      	asrs	r2, r5, #16
 80177f8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80177fc:	1433      	asrs	r3, r6, #16
 80177fe:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8017802:	fb09 2303 	mla	r3, r9, r3, r2
 8017806:	085a      	lsrs	r2, r3, #1
 8017808:	07d9      	lsls	r1, r3, #31
 801780a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801780e:	bf54      	ite	pl
 8017810:	f002 020f 	andpl.w	r2, r2, #15
 8017814:	1112      	asrmi	r2, r2, #4
 8017816:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801781a:	b2d2      	uxtb	r2, r2
 801781c:	2800      	cmp	r0, #0
 801781e:	f000 8085 	beq.w	801792c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017822:	f103 0a01 	add.w	sl, r3, #1
 8017826:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801782a:	f01a 0f01 	tst.w	sl, #1
 801782e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017832:	bf0c      	ite	eq
 8017834:	f001 010f 	andeq.w	r1, r1, #15
 8017838:	1109      	asrne	r1, r1, #4
 801783a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801783e:	b2c9      	uxtb	r1, r1
 8017840:	910f      	str	r1, [sp, #60]	; 0x3c
 8017842:	b1df      	cbz	r7, 801787c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8017844:	444b      	add	r3, r9
 8017846:	0859      	lsrs	r1, r3, #1
 8017848:	f013 0f01 	tst.w	r3, #1
 801784c:	f103 0301 	add.w	r3, r3, #1
 8017850:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017854:	bf0c      	ite	eq
 8017856:	f001 010f 	andeq.w	r1, r1, #15
 801785a:	1109      	asrne	r1, r1, #4
 801785c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017860:	b2c9      	uxtb	r1, r1
 8017862:	910b      	str	r1, [sp, #44]	; 0x2c
 8017864:	0859      	lsrs	r1, r3, #1
 8017866:	07db      	lsls	r3, r3, #31
 8017868:	f818 1001 	ldrb.w	r1, [r8, r1]
 801786c:	bf54      	ite	pl
 801786e:	f001 010f 	andpl.w	r1, r1, #15
 8017872:	1109      	asrmi	r1, r1, #4
 8017874:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017878:	b2c9      	uxtb	r1, r1
 801787a:	9110      	str	r1, [sp, #64]	; 0x40
 801787c:	b280      	uxth	r0, r0
 801787e:	b2bf      	uxth	r7, r7
 8017880:	fb00 f307 	mul.w	r3, r0, r7
 8017884:	0100      	lsls	r0, r0, #4
 8017886:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801788a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801788e:	1ac0      	subs	r0, r0, r3
 8017890:	b2bf      	uxth	r7, r7
 8017892:	b280      	uxth	r0, r0
 8017894:	1bc9      	subs	r1, r1, r7
 8017896:	fa1f fa81 	uxth.w	sl, r1
 801789a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801789c:	4348      	muls	r0, r1
 801789e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178a0:	fb02 020a 	mla	r2, r2, sl, r0
 80178a4:	fb07 2701 	mla	r7, r7, r1, r2
 80178a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80178aa:	fb03 7302 	mla	r3, r3, r2, r7
 80178ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80178b2:	b393      	cbz	r3, 801791a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80178b4:	4a2a      	ldr	r2, [pc, #168]	; (8017960 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80178b6:	2bff      	cmp	r3, #255	; 0xff
 80178b8:	6811      	ldr	r1, [r2, #0]
 80178ba:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80178be:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80178c2:	b2c9      	uxtb	r1, r1
 80178c4:	d042      	beq.n	801794c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80178c6:	b298      	uxth	r0, r3
 80178c8:	43db      	mvns	r3, r3
 80178ca:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80178ce:	fb11 f100 	smulbb	r1, r1, r0
 80178d2:	b2db      	uxtb	r3, r3
 80178d4:	fb17 f700 	smulbb	r7, r7, r0
 80178d8:	fb02 1103 	mla	r1, r2, r3, r1
 80178dc:	fb1a f000 	smulbb	r0, sl, r0
 80178e0:	b289      	uxth	r1, r1
 80178e2:	1c4a      	adds	r2, r1, #1
 80178e4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80178e8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80178ec:	fb02 7703 	mla	r7, r2, r3, r7
 80178f0:	1209      	asrs	r1, r1, #8
 80178f2:	b2bf      	uxth	r7, r7
 80178f4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80178f8:	1c7a      	adds	r2, r7, #1
 80178fa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80178fe:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8017902:	fb02 0303 	mla	r3, r2, r3, r0
 8017906:	123f      	asrs	r7, r7, #8
 8017908:	b29b      	uxth	r3, r3
 801790a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801790e:	1c5a      	adds	r2, r3, #1
 8017910:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017914:	121b      	asrs	r3, r3, #8
 8017916:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801791a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801791c:	f10c 0c03 	add.w	ip, ip, #3
 8017920:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017924:	441d      	add	r5, r3
 8017926:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017928:	441e      	add	r6, r3
 801792a:	e6e7      	b.n	80176fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801792c:	2f00      	cmp	r7, #0
 801792e:	d0a5      	beq.n	801787c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8017930:	444b      	add	r3, r9
 8017932:	0859      	lsrs	r1, r3, #1
 8017934:	07db      	lsls	r3, r3, #31
 8017936:	f818 1001 	ldrb.w	r1, [r8, r1]
 801793a:	bf54      	ite	pl
 801793c:	f001 010f 	andpl.w	r1, r1, #15
 8017940:	1109      	asrmi	r1, r1, #4
 8017942:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017946:	b2c9      	uxtb	r1, r1
 8017948:	910b      	str	r1, [sp, #44]	; 0x2c
 801794a:	e797      	b.n	801787c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801794c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8017950:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8017954:	f80c ac01 	strb.w	sl, [ip, #-1]
 8017958:	e7df      	b.n	801791a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801795a:	b013      	add	sp, #76	; 0x4c
 801795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017960:	2400ae0c 	.word	0x2400ae0c

08017964 <CRC_Lock>:
 8017964:	4a20      	ldr	r2, [pc, #128]	; (80179e8 <CRC_Lock+0x84>)
 8017966:	b530      	push	{r4, r5, lr}
 8017968:	6813      	ldr	r3, [r2, #0]
 801796a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801796e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8017972:	f023 0301 	bic.w	r3, r3, #1
 8017976:	6013      	str	r3, [r2, #0]
 8017978:	4b1c      	ldr	r3, [pc, #112]	; (80179ec <CRC_Lock+0x88>)
 801797a:	681a      	ldr	r2, [r3, #0]
 801797c:	4022      	ands	r2, r4
 801797e:	42aa      	cmp	r2, r5
 8017980:	d005      	beq.n	801798e <CRC_Lock+0x2a>
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	f24c 2270 	movw	r2, #49776	; 0xc270
 8017988:	4023      	ands	r3, r4
 801798a:	4293      	cmp	r3, r2
 801798c:	d124      	bne.n	80179d8 <CRC_Lock+0x74>
 801798e:	4b18      	ldr	r3, [pc, #96]	; (80179f0 <CRC_Lock+0x8c>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	bb0b      	cbnz	r3, 80179d8 <CRC_Lock+0x74>
 8017994:	4b17      	ldr	r3, [pc, #92]	; (80179f4 <CRC_Lock+0x90>)
 8017996:	681a      	ldr	r2, [r3, #0]
 8017998:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801799c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80179a0:	d00d      	beq.n	80179be <CRC_Lock+0x5a>
 80179a2:	681a      	ldr	r2, [r3, #0]
 80179a4:	f240 4483 	movw	r4, #1155	; 0x483
 80179a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80179ac:	42a2      	cmp	r2, r4
 80179ae:	d006      	beq.n	80179be <CRC_Lock+0x5a>
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	f240 4285 	movw	r2, #1157	; 0x485
 80179b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80179ba:	4293      	cmp	r3, r2
 80179bc:	d10c      	bne.n	80179d8 <CRC_Lock+0x74>
 80179be:	4b0e      	ldr	r3, [pc, #56]	; (80179f8 <CRC_Lock+0x94>)
 80179c0:	2201      	movs	r2, #1
 80179c2:	601a      	str	r2, [r3, #0]
 80179c4:	681a      	ldr	r2, [r3, #0]
 80179c6:	2a00      	cmp	r2, #0
 80179c8:	d1fc      	bne.n	80179c4 <CRC_Lock+0x60>
 80179ca:	4b0c      	ldr	r3, [pc, #48]	; (80179fc <CRC_Lock+0x98>)
 80179cc:	6018      	str	r0, [r3, #0]
 80179ce:	6818      	ldr	r0, [r3, #0]
 80179d0:	1a43      	subs	r3, r0, r1
 80179d2:	4258      	negs	r0, r3
 80179d4:	4158      	adcs	r0, r3
 80179d6:	bd30      	pop	{r4, r5, pc}
 80179d8:	4b09      	ldr	r3, [pc, #36]	; (8017a00 <CRC_Lock+0x9c>)
 80179da:	2201      	movs	r2, #1
 80179dc:	601a      	str	r2, [r3, #0]
 80179de:	681a      	ldr	r2, [r3, #0]
 80179e0:	2a00      	cmp	r2, #0
 80179e2:	d1fc      	bne.n	80179de <CRC_Lock+0x7a>
 80179e4:	4b07      	ldr	r3, [pc, #28]	; (8017a04 <CRC_Lock+0xa0>)
 80179e6:	e7f1      	b.n	80179cc <CRC_Lock+0x68>
 80179e8:	e0002000 	.word	0xe0002000
 80179ec:	e000ed00 	.word	0xe000ed00
 80179f0:	e0042000 	.word	0xe0042000
 80179f4:	5c001000 	.word	0x5c001000
 80179f8:	58024c08 	.word	0x58024c08
 80179fc:	58024c00 	.word	0x58024c00
 8017a00:	40023008 	.word	0x40023008
 8017a04:	40023000 	.word	0x40023000

08017a08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8017a08:	6101      	str	r1, [r0, #16]
 8017a0a:	4770      	bx	lr

08017a0c <_ZN8touchgfx8Gestures4tickEv>:
 8017a0c:	7b83      	ldrb	r3, [r0, #14]
 8017a0e:	b14b      	cbz	r3, 8017a24 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8017a10:	8903      	ldrh	r3, [r0, #8]
 8017a12:	3301      	adds	r3, #1
 8017a14:	b29b      	uxth	r3, r3
 8017a16:	2b07      	cmp	r3, #7
 8017a18:	8103      	strh	r3, [r0, #8]
 8017a1a:	bf81      	itttt	hi
 8017a1c:	2300      	movhi	r3, #0
 8017a1e:	8143      	strhhi	r3, [r0, #10]
 8017a20:	8183      	strhhi	r3, [r0, #12]
 8017a22:	7383      	strbhi	r3, [r0, #14]
 8017a24:	4770      	bx	lr
	...

08017a28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8017a28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017a2c:	4698      	mov	r8, r3
 8017a2e:	8883      	ldrh	r3, [r0, #4]
 8017a30:	4604      	mov	r4, r0
 8017a32:	4617      	mov	r7, r2
 8017a34:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a38:	eba8 0303 	sub.w	r3, r8, r3
 8017a3c:	4a19      	ldr	r2, [pc, #100]	; (8017aa4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8017a3e:	460e      	mov	r6, r1
 8017a40:	b21b      	sxth	r3, r3
 8017a42:	88c1      	ldrh	r1, [r0, #6]
 8017a44:	9200      	str	r2, [sp, #0]
 8017a46:	2000      	movs	r0, #0
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	8aa2      	ldrh	r2, [r4, #20]
 8017a4c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8017a50:	bfb8      	it	lt
 8017a52:	425b      	neglt	r3, r3
 8017a54:	f88d 0004 	strb.w	r0, [sp, #4]
 8017a58:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017a5c:	b21b      	sxth	r3, r3
 8017a5e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8017a62:	f8ad 500c 	strh.w	r5, [sp, #12]
 8017a66:	4293      	cmp	r3, r2
 8017a68:	dc07      	bgt.n	8017a7a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8017a6a:	1a69      	subs	r1, r5, r1
 8017a6c:	b209      	sxth	r1, r1
 8017a6e:	2900      	cmp	r1, #0
 8017a70:	bfb8      	it	lt
 8017a72:	4249      	neglt	r1, r1
 8017a74:	b209      	sxth	r1, r1
 8017a76:	428a      	cmp	r2, r1
 8017a78:	da10      	bge.n	8017a9c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8017a7a:	6920      	ldr	r0, [r4, #16]
 8017a7c:	4669      	mov	r1, sp
 8017a7e:	eba8 0606 	sub.w	r6, r8, r6
 8017a82:	1bef      	subs	r7, r5, r7
 8017a84:	6803      	ldr	r3, [r0, #0]
 8017a86:	685b      	ldr	r3, [r3, #4]
 8017a88:	4798      	blx	r3
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	2001      	movs	r0, #1
 8017a8e:	8166      	strh	r6, [r4, #10]
 8017a90:	8123      	strh	r3, [r4, #8]
 8017a92:	81a7      	strh	r7, [r4, #12]
 8017a94:	f8a4 8004 	strh.w	r8, [r4, #4]
 8017a98:	80e5      	strh	r5, [r4, #6]
 8017a9a:	73a0      	strb	r0, [r4, #14]
 8017a9c:	b004      	add	sp, #16
 8017a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aa2:	bf00      	nop
 8017aa4:	0801a3e4 	.word	0x0801a3e4

08017aa8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8017aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aaa:	461e      	mov	r6, r3
 8017aac:	1e4b      	subs	r3, r1, #1
 8017aae:	b085      	sub	sp, #20
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	2b01      	cmp	r3, #1
 8017ab4:	460d      	mov	r5, r1
 8017ab6:	4617      	mov	r7, r2
 8017ab8:	d84b      	bhi.n	8017b52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8017aba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017abe:	1cd3      	adds	r3, r2, #3
 8017ac0:	b29b      	uxth	r3, r3
 8017ac2:	2b06      	cmp	r3, #6
 8017ac4:	d916      	bls.n	8017af4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8017ac6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8017b68 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8017aca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017ace:	f8cd c004 	str.w	ip, [sp, #4]
 8017ad2:	f04f 0c00 	mov.w	ip, #0
 8017ad6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017ada:	6900      	ldr	r0, [r0, #16]
 8017adc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8017ae0:	a901      	add	r1, sp, #4
 8017ae2:	f88d c008 	strb.w	ip, [sp, #8]
 8017ae6:	f8ad 200a 	strh.w	r2, [sp, #10]
 8017aea:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017aee:	6803      	ldr	r3, [r0, #0]
 8017af0:	689b      	ldr	r3, [r3, #8]
 8017af2:	4798      	blx	r3
 8017af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017af8:	1cd3      	adds	r3, r2, #3
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	2b06      	cmp	r3, #6
 8017afe:	d916      	bls.n	8017b2e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b00:	f8df c064 	ldr.w	ip, [pc, #100]	; 8017b68 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8017b04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017b08:	f8cd c004 	str.w	ip, [sp, #4]
 8017b0c:	f04f 0c01 	mov.w	ip, #1
 8017b10:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017b14:	6920      	ldr	r0, [r4, #16]
 8017b16:	f8ad 100c 	strh.w	r1, [sp, #12]
 8017b1a:	a901      	add	r1, sp, #4
 8017b1c:	f88d c008 	strb.w	ip, [sp, #8]
 8017b20:	f8ad 200a 	strh.w	r2, [sp, #10]
 8017b24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b28:	6803      	ldr	r3, [r0, #0]
 8017b2a:	689b      	ldr	r3, [r3, #8]
 8017b2c:	4798      	blx	r3
 8017b2e:	4b0d      	ldr	r3, [pc, #52]	; (8017b64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8017b30:	a901      	add	r1, sp, #4
 8017b32:	6920      	ldr	r0, [r4, #16]
 8017b34:	9301      	str	r3, [sp, #4]
 8017b36:	2300      	movs	r3, #0
 8017b38:	f88d 5008 	strb.w	r5, [sp, #8]
 8017b3c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8017b40:	f8ad 600c 	strh.w	r6, [sp, #12]
 8017b44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b48:	6803      	ldr	r3, [r0, #0]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	4798      	blx	r3
 8017b4e:	b005      	add	sp, #20
 8017b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b52:	2900      	cmp	r1, #0
 8017b54:	d1eb      	bne.n	8017b2e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b56:	80a2      	strh	r2, [r4, #4]
 8017b58:	80c6      	strh	r6, [r0, #6]
 8017b5a:	60a1      	str	r1, [r4, #8]
 8017b5c:	81a1      	strh	r1, [r4, #12]
 8017b5e:	73a1      	strb	r1, [r4, #14]
 8017b60:	e7e5      	b.n	8017b2e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b62:	bf00      	nop
 8017b64:	0801a3d0 	.word	0x0801a3d0
 8017b68:	0801a3f8 	.word	0x0801a3f8

08017b6c <__aeabi_atexit>:
 8017b6c:	460b      	mov	r3, r1
 8017b6e:	4601      	mov	r1, r0
 8017b70:	4618      	mov	r0, r3
 8017b72:	f000 b853 	b.w	8017c1c <__cxa_atexit>

08017b76 <_ZdlPvj>:
 8017b76:	f000 b812 	b.w	8017b9e <_ZdlPv>

08017b7a <__cxa_guard_acquire>:
 8017b7a:	6803      	ldr	r3, [r0, #0]
 8017b7c:	07db      	lsls	r3, r3, #31
 8017b7e:	d406      	bmi.n	8017b8e <__cxa_guard_acquire+0x14>
 8017b80:	7843      	ldrb	r3, [r0, #1]
 8017b82:	b103      	cbz	r3, 8017b86 <__cxa_guard_acquire+0xc>
 8017b84:	deff      	udf	#255	; 0xff
 8017b86:	2301      	movs	r3, #1
 8017b88:	7043      	strb	r3, [r0, #1]
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	4770      	bx	lr
 8017b8e:	2000      	movs	r0, #0
 8017b90:	4770      	bx	lr

08017b92 <__cxa_guard_release>:
 8017b92:	2301      	movs	r3, #1
 8017b94:	6003      	str	r3, [r0, #0]
 8017b96:	4770      	bx	lr

08017b98 <__cxa_pure_virtual>:
 8017b98:	b508      	push	{r3, lr}
 8017b9a:	f000 f80f 	bl	8017bbc <_ZSt9terminatev>

08017b9e <_ZdlPv>:
 8017b9e:	f000 b989 	b.w	8017eb4 <free>

08017ba2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8017ba2:	b508      	push	{r3, lr}
 8017ba4:	4780      	blx	r0
 8017ba6:	f000 f80e 	bl	8017bc6 <abort>
	...

08017bac <_ZSt13get_terminatev>:
 8017bac:	4b02      	ldr	r3, [pc, #8]	; (8017bb8 <_ZSt13get_terminatev+0xc>)
 8017bae:	6818      	ldr	r0, [r3, #0]
 8017bb0:	f3bf 8f5b 	dmb	ish
 8017bb4:	4770      	bx	lr
 8017bb6:	bf00      	nop
 8017bb8:	240000a4 	.word	0x240000a4

08017bbc <_ZSt9terminatev>:
 8017bbc:	b508      	push	{r3, lr}
 8017bbe:	f7ff fff5 	bl	8017bac <_ZSt13get_terminatev>
 8017bc2:	f7ff ffee 	bl	8017ba2 <_ZN10__cxxabiv111__terminateEPFvvE>

08017bc6 <abort>:
 8017bc6:	b508      	push	{r3, lr}
 8017bc8:	2006      	movs	r0, #6
 8017bca:	f000 fe01 	bl	80187d0 <raise>
 8017bce:	2001      	movs	r0, #1
 8017bd0:	f7ea fb22 	bl	8002218 <_exit>

08017bd4 <__assert_func>:
 8017bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bd6:	4614      	mov	r4, r2
 8017bd8:	461a      	mov	r2, r3
 8017bda:	4b09      	ldr	r3, [pc, #36]	; (8017c00 <__assert_func+0x2c>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	4605      	mov	r5, r0
 8017be0:	68d8      	ldr	r0, [r3, #12]
 8017be2:	b14c      	cbz	r4, 8017bf8 <__assert_func+0x24>
 8017be4:	4b07      	ldr	r3, [pc, #28]	; (8017c04 <__assert_func+0x30>)
 8017be6:	9100      	str	r1, [sp, #0]
 8017be8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017bec:	4906      	ldr	r1, [pc, #24]	; (8017c08 <__assert_func+0x34>)
 8017bee:	462b      	mov	r3, r5
 8017bf0:	f000 f8fe 	bl	8017df0 <fiprintf>
 8017bf4:	f7ff ffe7 	bl	8017bc6 <abort>
 8017bf8:	4b04      	ldr	r3, [pc, #16]	; (8017c0c <__assert_func+0x38>)
 8017bfa:	461c      	mov	r4, r3
 8017bfc:	e7f3      	b.n	8017be6 <__assert_func+0x12>
 8017bfe:	bf00      	nop
 8017c00:	240000a8 	.word	0x240000a8
 8017c04:	0801a620 	.word	0x0801a620
 8017c08:	0801a62d 	.word	0x0801a62d
 8017c0c:	0801a65b 	.word	0x0801a65b

08017c10 <atexit>:
 8017c10:	2300      	movs	r3, #0
 8017c12:	4601      	mov	r1, r0
 8017c14:	461a      	mov	r2, r3
 8017c16:	4618      	mov	r0, r3
 8017c18:	f000 bf0c 	b.w	8018a34 <__register_exitproc>

08017c1c <__cxa_atexit>:
 8017c1c:	b510      	push	{r4, lr}
 8017c1e:	4c05      	ldr	r4, [pc, #20]	; (8017c34 <__cxa_atexit+0x18>)
 8017c20:	4613      	mov	r3, r2
 8017c22:	b12c      	cbz	r4, 8017c30 <__cxa_atexit+0x14>
 8017c24:	460a      	mov	r2, r1
 8017c26:	4601      	mov	r1, r0
 8017c28:	2002      	movs	r0, #2
 8017c2a:	f000 ff03 	bl	8018a34 <__register_exitproc>
 8017c2e:	bd10      	pop	{r4, pc}
 8017c30:	4620      	mov	r0, r4
 8017c32:	e7fc      	b.n	8017c2e <__cxa_atexit+0x12>
 8017c34:	08018a35 	.word	0x08018a35

08017c38 <__errno>:
 8017c38:	4b01      	ldr	r3, [pc, #4]	; (8017c40 <__errno+0x8>)
 8017c3a:	6818      	ldr	r0, [r3, #0]
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop
 8017c40:	240000a8 	.word	0x240000a8

08017c44 <std>:
 8017c44:	2300      	movs	r3, #0
 8017c46:	b510      	push	{r4, lr}
 8017c48:	4604      	mov	r4, r0
 8017c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8017c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017c52:	6083      	str	r3, [r0, #8]
 8017c54:	8181      	strh	r1, [r0, #12]
 8017c56:	6643      	str	r3, [r0, #100]	; 0x64
 8017c58:	81c2      	strh	r2, [r0, #14]
 8017c5a:	6183      	str	r3, [r0, #24]
 8017c5c:	4619      	mov	r1, r3
 8017c5e:	2208      	movs	r2, #8
 8017c60:	305c      	adds	r0, #92	; 0x5c
 8017c62:	f000 f93d 	bl	8017ee0 <memset>
 8017c66:	4b05      	ldr	r3, [pc, #20]	; (8017c7c <std+0x38>)
 8017c68:	6263      	str	r3, [r4, #36]	; 0x24
 8017c6a:	4b05      	ldr	r3, [pc, #20]	; (8017c80 <std+0x3c>)
 8017c6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c6e:	4b05      	ldr	r3, [pc, #20]	; (8017c84 <std+0x40>)
 8017c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017c72:	4b05      	ldr	r3, [pc, #20]	; (8017c88 <std+0x44>)
 8017c74:	6224      	str	r4, [r4, #32]
 8017c76:	6323      	str	r3, [r4, #48]	; 0x30
 8017c78:	bd10      	pop	{r4, pc}
 8017c7a:	bf00      	nop
 8017c7c:	08018809 	.word	0x08018809
 8017c80:	0801882b 	.word	0x0801882b
 8017c84:	08018863 	.word	0x08018863
 8017c88:	08018887 	.word	0x08018887

08017c8c <_cleanup_r>:
 8017c8c:	4901      	ldr	r1, [pc, #4]	; (8017c94 <_cleanup_r+0x8>)
 8017c8e:	f000 b8c1 	b.w	8017e14 <_fwalk_reent>
 8017c92:	bf00      	nop
 8017c94:	08018c25 	.word	0x08018c25

08017c98 <__sfmoreglue>:
 8017c98:	b570      	push	{r4, r5, r6, lr}
 8017c9a:	2268      	movs	r2, #104	; 0x68
 8017c9c:	1e4d      	subs	r5, r1, #1
 8017c9e:	4355      	muls	r5, r2
 8017ca0:	460e      	mov	r6, r1
 8017ca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017ca6:	f000 f98f 	bl	8017fc8 <_malloc_r>
 8017caa:	4604      	mov	r4, r0
 8017cac:	b140      	cbz	r0, 8017cc0 <__sfmoreglue+0x28>
 8017cae:	2100      	movs	r1, #0
 8017cb0:	e9c0 1600 	strd	r1, r6, [r0]
 8017cb4:	300c      	adds	r0, #12
 8017cb6:	60a0      	str	r0, [r4, #8]
 8017cb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017cbc:	f000 f910 	bl	8017ee0 <memset>
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	bd70      	pop	{r4, r5, r6, pc}

08017cc4 <__sfp_lock_acquire>:
 8017cc4:	4801      	ldr	r0, [pc, #4]	; (8017ccc <__sfp_lock_acquire+0x8>)
 8017cc6:	f000 b8ea 	b.w	8017e9e <__retarget_lock_acquire_recursive>
 8017cca:	bf00      	nop
 8017ccc:	2400aee2 	.word	0x2400aee2

08017cd0 <__sfp_lock_release>:
 8017cd0:	4801      	ldr	r0, [pc, #4]	; (8017cd8 <__sfp_lock_release+0x8>)
 8017cd2:	f000 b8e6 	b.w	8017ea2 <__retarget_lock_release_recursive>
 8017cd6:	bf00      	nop
 8017cd8:	2400aee2 	.word	0x2400aee2

08017cdc <__sinit_lock_acquire>:
 8017cdc:	4801      	ldr	r0, [pc, #4]	; (8017ce4 <__sinit_lock_acquire+0x8>)
 8017cde:	f000 b8de 	b.w	8017e9e <__retarget_lock_acquire_recursive>
 8017ce2:	bf00      	nop
 8017ce4:	2400aee3 	.word	0x2400aee3

08017ce8 <__sinit_lock_release>:
 8017ce8:	4801      	ldr	r0, [pc, #4]	; (8017cf0 <__sinit_lock_release+0x8>)
 8017cea:	f000 b8da 	b.w	8017ea2 <__retarget_lock_release_recursive>
 8017cee:	bf00      	nop
 8017cf0:	2400aee3 	.word	0x2400aee3

08017cf4 <__sinit>:
 8017cf4:	b510      	push	{r4, lr}
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	f7ff fff0 	bl	8017cdc <__sinit_lock_acquire>
 8017cfc:	69a3      	ldr	r3, [r4, #24]
 8017cfe:	b11b      	cbz	r3, 8017d08 <__sinit+0x14>
 8017d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d04:	f7ff bff0 	b.w	8017ce8 <__sinit_lock_release>
 8017d08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017d0c:	6523      	str	r3, [r4, #80]	; 0x50
 8017d0e:	4b13      	ldr	r3, [pc, #76]	; (8017d5c <__sinit+0x68>)
 8017d10:	4a13      	ldr	r2, [pc, #76]	; (8017d60 <__sinit+0x6c>)
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	62a2      	str	r2, [r4, #40]	; 0x28
 8017d16:	42a3      	cmp	r3, r4
 8017d18:	bf04      	itt	eq
 8017d1a:	2301      	moveq	r3, #1
 8017d1c:	61a3      	streq	r3, [r4, #24]
 8017d1e:	4620      	mov	r0, r4
 8017d20:	f000 f820 	bl	8017d64 <__sfp>
 8017d24:	6060      	str	r0, [r4, #4]
 8017d26:	4620      	mov	r0, r4
 8017d28:	f000 f81c 	bl	8017d64 <__sfp>
 8017d2c:	60a0      	str	r0, [r4, #8]
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f000 f818 	bl	8017d64 <__sfp>
 8017d34:	2200      	movs	r2, #0
 8017d36:	60e0      	str	r0, [r4, #12]
 8017d38:	2104      	movs	r1, #4
 8017d3a:	6860      	ldr	r0, [r4, #4]
 8017d3c:	f7ff ff82 	bl	8017c44 <std>
 8017d40:	68a0      	ldr	r0, [r4, #8]
 8017d42:	2201      	movs	r2, #1
 8017d44:	2109      	movs	r1, #9
 8017d46:	f7ff ff7d 	bl	8017c44 <std>
 8017d4a:	68e0      	ldr	r0, [r4, #12]
 8017d4c:	2202      	movs	r2, #2
 8017d4e:	2112      	movs	r1, #18
 8017d50:	f7ff ff78 	bl	8017c44 <std>
 8017d54:	2301      	movs	r3, #1
 8017d56:	61a3      	str	r3, [r4, #24]
 8017d58:	e7d2      	b.n	8017d00 <__sinit+0xc>
 8017d5a:	bf00      	nop
 8017d5c:	0801a6bc 	.word	0x0801a6bc
 8017d60:	08017c8d 	.word	0x08017c8d

08017d64 <__sfp>:
 8017d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d66:	4607      	mov	r7, r0
 8017d68:	f7ff ffac 	bl	8017cc4 <__sfp_lock_acquire>
 8017d6c:	4b1e      	ldr	r3, [pc, #120]	; (8017de8 <__sfp+0x84>)
 8017d6e:	681e      	ldr	r6, [r3, #0]
 8017d70:	69b3      	ldr	r3, [r6, #24]
 8017d72:	b913      	cbnz	r3, 8017d7a <__sfp+0x16>
 8017d74:	4630      	mov	r0, r6
 8017d76:	f7ff ffbd 	bl	8017cf4 <__sinit>
 8017d7a:	3648      	adds	r6, #72	; 0x48
 8017d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017d80:	3b01      	subs	r3, #1
 8017d82:	d503      	bpl.n	8017d8c <__sfp+0x28>
 8017d84:	6833      	ldr	r3, [r6, #0]
 8017d86:	b30b      	cbz	r3, 8017dcc <__sfp+0x68>
 8017d88:	6836      	ldr	r6, [r6, #0]
 8017d8a:	e7f7      	b.n	8017d7c <__sfp+0x18>
 8017d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017d90:	b9d5      	cbnz	r5, 8017dc8 <__sfp+0x64>
 8017d92:	4b16      	ldr	r3, [pc, #88]	; (8017dec <__sfp+0x88>)
 8017d94:	60e3      	str	r3, [r4, #12]
 8017d96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d9a:	6665      	str	r5, [r4, #100]	; 0x64
 8017d9c:	f000 f87e 	bl	8017e9c <__retarget_lock_init_recursive>
 8017da0:	f7ff ff96 	bl	8017cd0 <__sfp_lock_release>
 8017da4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017da8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017dac:	6025      	str	r5, [r4, #0]
 8017dae:	61a5      	str	r5, [r4, #24]
 8017db0:	2208      	movs	r2, #8
 8017db2:	4629      	mov	r1, r5
 8017db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017db8:	f000 f892 	bl	8017ee0 <memset>
 8017dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dc8:	3468      	adds	r4, #104	; 0x68
 8017dca:	e7d9      	b.n	8017d80 <__sfp+0x1c>
 8017dcc:	2104      	movs	r1, #4
 8017dce:	4638      	mov	r0, r7
 8017dd0:	f7ff ff62 	bl	8017c98 <__sfmoreglue>
 8017dd4:	4604      	mov	r4, r0
 8017dd6:	6030      	str	r0, [r6, #0]
 8017dd8:	2800      	cmp	r0, #0
 8017dda:	d1d5      	bne.n	8017d88 <__sfp+0x24>
 8017ddc:	f7ff ff78 	bl	8017cd0 <__sfp_lock_release>
 8017de0:	230c      	movs	r3, #12
 8017de2:	603b      	str	r3, [r7, #0]
 8017de4:	e7ee      	b.n	8017dc4 <__sfp+0x60>
 8017de6:	bf00      	nop
 8017de8:	0801a6bc 	.word	0x0801a6bc
 8017dec:	ffff0001 	.word	0xffff0001

08017df0 <fiprintf>:
 8017df0:	b40e      	push	{r1, r2, r3}
 8017df2:	b503      	push	{r0, r1, lr}
 8017df4:	4601      	mov	r1, r0
 8017df6:	ab03      	add	r3, sp, #12
 8017df8:	4805      	ldr	r0, [pc, #20]	; (8017e10 <fiprintf+0x20>)
 8017dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dfe:	6800      	ldr	r0, [r0, #0]
 8017e00:	9301      	str	r3, [sp, #4]
 8017e02:	f000 f97f 	bl	8018104 <_vfiprintf_r>
 8017e06:	b002      	add	sp, #8
 8017e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e0c:	b003      	add	sp, #12
 8017e0e:	4770      	bx	lr
 8017e10:	240000a8 	.word	0x240000a8

08017e14 <_fwalk_reent>:
 8017e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e18:	4606      	mov	r6, r0
 8017e1a:	4688      	mov	r8, r1
 8017e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e20:	2700      	movs	r7, #0
 8017e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e26:	f1b9 0901 	subs.w	r9, r9, #1
 8017e2a:	d505      	bpl.n	8017e38 <_fwalk_reent+0x24>
 8017e2c:	6824      	ldr	r4, [r4, #0]
 8017e2e:	2c00      	cmp	r4, #0
 8017e30:	d1f7      	bne.n	8017e22 <_fwalk_reent+0xe>
 8017e32:	4638      	mov	r0, r7
 8017e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e38:	89ab      	ldrh	r3, [r5, #12]
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d907      	bls.n	8017e4e <_fwalk_reent+0x3a>
 8017e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e42:	3301      	adds	r3, #1
 8017e44:	d003      	beq.n	8017e4e <_fwalk_reent+0x3a>
 8017e46:	4629      	mov	r1, r5
 8017e48:	4630      	mov	r0, r6
 8017e4a:	47c0      	blx	r8
 8017e4c:	4307      	orrs	r7, r0
 8017e4e:	3568      	adds	r5, #104	; 0x68
 8017e50:	e7e9      	b.n	8017e26 <_fwalk_reent+0x12>
	...

08017e54 <__libc_init_array>:
 8017e54:	b570      	push	{r4, r5, r6, lr}
 8017e56:	4d0d      	ldr	r5, [pc, #52]	; (8017e8c <__libc_init_array+0x38>)
 8017e58:	4c0d      	ldr	r4, [pc, #52]	; (8017e90 <__libc_init_array+0x3c>)
 8017e5a:	1b64      	subs	r4, r4, r5
 8017e5c:	10a4      	asrs	r4, r4, #2
 8017e5e:	2600      	movs	r6, #0
 8017e60:	42a6      	cmp	r6, r4
 8017e62:	d109      	bne.n	8017e78 <__libc_init_array+0x24>
 8017e64:	4d0b      	ldr	r5, [pc, #44]	; (8017e94 <__libc_init_array+0x40>)
 8017e66:	4c0c      	ldr	r4, [pc, #48]	; (8017e98 <__libc_init_array+0x44>)
 8017e68:	f000 ffd0 	bl	8018e0c <_init>
 8017e6c:	1b64      	subs	r4, r4, r5
 8017e6e:	10a4      	asrs	r4, r4, #2
 8017e70:	2600      	movs	r6, #0
 8017e72:	42a6      	cmp	r6, r4
 8017e74:	d105      	bne.n	8017e82 <__libc_init_array+0x2e>
 8017e76:	bd70      	pop	{r4, r5, r6, pc}
 8017e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e7c:	4798      	blx	r3
 8017e7e:	3601      	adds	r6, #1
 8017e80:	e7ee      	b.n	8017e60 <__libc_init_array+0xc>
 8017e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e86:	4798      	blx	r3
 8017e88:	3601      	adds	r6, #1
 8017e8a:	e7f2      	b.n	8017e72 <__libc_init_array+0x1e>
 8017e8c:	0801a710 	.word	0x0801a710
 8017e90:	0801a710 	.word	0x0801a710
 8017e94:	0801a710 	.word	0x0801a710
 8017e98:	0801a724 	.word	0x0801a724

08017e9c <__retarget_lock_init_recursive>:
 8017e9c:	4770      	bx	lr

08017e9e <__retarget_lock_acquire_recursive>:
 8017e9e:	4770      	bx	lr

08017ea0 <__retarget_lock_release>:
 8017ea0:	4770      	bx	lr

08017ea2 <__retarget_lock_release_recursive>:
 8017ea2:	4770      	bx	lr

08017ea4 <malloc>:
 8017ea4:	4b02      	ldr	r3, [pc, #8]	; (8017eb0 <malloc+0xc>)
 8017ea6:	4601      	mov	r1, r0
 8017ea8:	6818      	ldr	r0, [r3, #0]
 8017eaa:	f000 b88d 	b.w	8017fc8 <_malloc_r>
 8017eae:	bf00      	nop
 8017eb0:	240000a8 	.word	0x240000a8

08017eb4 <free>:
 8017eb4:	4b02      	ldr	r3, [pc, #8]	; (8017ec0 <free+0xc>)
 8017eb6:	4601      	mov	r1, r0
 8017eb8:	6818      	ldr	r0, [r3, #0]
 8017eba:	f000 b819 	b.w	8017ef0 <_free_r>
 8017ebe:	bf00      	nop
 8017ec0:	240000a8 	.word	0x240000a8

08017ec4 <memcpy>:
 8017ec4:	440a      	add	r2, r1
 8017ec6:	4291      	cmp	r1, r2
 8017ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8017ecc:	d100      	bne.n	8017ed0 <memcpy+0xc>
 8017ece:	4770      	bx	lr
 8017ed0:	b510      	push	{r4, lr}
 8017ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017eda:	4291      	cmp	r1, r2
 8017edc:	d1f9      	bne.n	8017ed2 <memcpy+0xe>
 8017ede:	bd10      	pop	{r4, pc}

08017ee0 <memset>:
 8017ee0:	4402      	add	r2, r0
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	4293      	cmp	r3, r2
 8017ee6:	d100      	bne.n	8017eea <memset+0xa>
 8017ee8:	4770      	bx	lr
 8017eea:	f803 1b01 	strb.w	r1, [r3], #1
 8017eee:	e7f9      	b.n	8017ee4 <memset+0x4>

08017ef0 <_free_r>:
 8017ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ef2:	2900      	cmp	r1, #0
 8017ef4:	d044      	beq.n	8017f80 <_free_r+0x90>
 8017ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017efa:	9001      	str	r0, [sp, #4]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	f1a1 0404 	sub.w	r4, r1, #4
 8017f02:	bfb8      	it	lt
 8017f04:	18e4      	addlt	r4, r4, r3
 8017f06:	f000 ff41 	bl	8018d8c <__malloc_lock>
 8017f0a:	4a1e      	ldr	r2, [pc, #120]	; (8017f84 <_free_r+0x94>)
 8017f0c:	9801      	ldr	r0, [sp, #4]
 8017f0e:	6813      	ldr	r3, [r2, #0]
 8017f10:	b933      	cbnz	r3, 8017f20 <_free_r+0x30>
 8017f12:	6063      	str	r3, [r4, #4]
 8017f14:	6014      	str	r4, [r2, #0]
 8017f16:	b003      	add	sp, #12
 8017f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f1c:	f000 bf3c 	b.w	8018d98 <__malloc_unlock>
 8017f20:	42a3      	cmp	r3, r4
 8017f22:	d908      	bls.n	8017f36 <_free_r+0x46>
 8017f24:	6825      	ldr	r5, [r4, #0]
 8017f26:	1961      	adds	r1, r4, r5
 8017f28:	428b      	cmp	r3, r1
 8017f2a:	bf01      	itttt	eq
 8017f2c:	6819      	ldreq	r1, [r3, #0]
 8017f2e:	685b      	ldreq	r3, [r3, #4]
 8017f30:	1949      	addeq	r1, r1, r5
 8017f32:	6021      	streq	r1, [r4, #0]
 8017f34:	e7ed      	b.n	8017f12 <_free_r+0x22>
 8017f36:	461a      	mov	r2, r3
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	b10b      	cbz	r3, 8017f40 <_free_r+0x50>
 8017f3c:	42a3      	cmp	r3, r4
 8017f3e:	d9fa      	bls.n	8017f36 <_free_r+0x46>
 8017f40:	6811      	ldr	r1, [r2, #0]
 8017f42:	1855      	adds	r5, r2, r1
 8017f44:	42a5      	cmp	r5, r4
 8017f46:	d10b      	bne.n	8017f60 <_free_r+0x70>
 8017f48:	6824      	ldr	r4, [r4, #0]
 8017f4a:	4421      	add	r1, r4
 8017f4c:	1854      	adds	r4, r2, r1
 8017f4e:	42a3      	cmp	r3, r4
 8017f50:	6011      	str	r1, [r2, #0]
 8017f52:	d1e0      	bne.n	8017f16 <_free_r+0x26>
 8017f54:	681c      	ldr	r4, [r3, #0]
 8017f56:	685b      	ldr	r3, [r3, #4]
 8017f58:	6053      	str	r3, [r2, #4]
 8017f5a:	4421      	add	r1, r4
 8017f5c:	6011      	str	r1, [r2, #0]
 8017f5e:	e7da      	b.n	8017f16 <_free_r+0x26>
 8017f60:	d902      	bls.n	8017f68 <_free_r+0x78>
 8017f62:	230c      	movs	r3, #12
 8017f64:	6003      	str	r3, [r0, #0]
 8017f66:	e7d6      	b.n	8017f16 <_free_r+0x26>
 8017f68:	6825      	ldr	r5, [r4, #0]
 8017f6a:	1961      	adds	r1, r4, r5
 8017f6c:	428b      	cmp	r3, r1
 8017f6e:	bf04      	itt	eq
 8017f70:	6819      	ldreq	r1, [r3, #0]
 8017f72:	685b      	ldreq	r3, [r3, #4]
 8017f74:	6063      	str	r3, [r4, #4]
 8017f76:	bf04      	itt	eq
 8017f78:	1949      	addeq	r1, r1, r5
 8017f7a:	6021      	streq	r1, [r4, #0]
 8017f7c:	6054      	str	r4, [r2, #4]
 8017f7e:	e7ca      	b.n	8017f16 <_free_r+0x26>
 8017f80:	b003      	add	sp, #12
 8017f82:	bd30      	pop	{r4, r5, pc}
 8017f84:	2400aee4 	.word	0x2400aee4

08017f88 <sbrk_aligned>:
 8017f88:	b570      	push	{r4, r5, r6, lr}
 8017f8a:	4e0e      	ldr	r6, [pc, #56]	; (8017fc4 <sbrk_aligned+0x3c>)
 8017f8c:	460c      	mov	r4, r1
 8017f8e:	6831      	ldr	r1, [r6, #0]
 8017f90:	4605      	mov	r5, r0
 8017f92:	b911      	cbnz	r1, 8017f9a <sbrk_aligned+0x12>
 8017f94:	f000 fbe4 	bl	8018760 <_sbrk_r>
 8017f98:	6030      	str	r0, [r6, #0]
 8017f9a:	4621      	mov	r1, r4
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	f000 fbdf 	bl	8018760 <_sbrk_r>
 8017fa2:	1c43      	adds	r3, r0, #1
 8017fa4:	d00a      	beq.n	8017fbc <sbrk_aligned+0x34>
 8017fa6:	1cc4      	adds	r4, r0, #3
 8017fa8:	f024 0403 	bic.w	r4, r4, #3
 8017fac:	42a0      	cmp	r0, r4
 8017fae:	d007      	beq.n	8017fc0 <sbrk_aligned+0x38>
 8017fb0:	1a21      	subs	r1, r4, r0
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	f000 fbd4 	bl	8018760 <_sbrk_r>
 8017fb8:	3001      	adds	r0, #1
 8017fba:	d101      	bne.n	8017fc0 <sbrk_aligned+0x38>
 8017fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8017fc0:	4620      	mov	r0, r4
 8017fc2:	bd70      	pop	{r4, r5, r6, pc}
 8017fc4:	2400aee8 	.word	0x2400aee8

08017fc8 <_malloc_r>:
 8017fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fcc:	1ccd      	adds	r5, r1, #3
 8017fce:	f025 0503 	bic.w	r5, r5, #3
 8017fd2:	3508      	adds	r5, #8
 8017fd4:	2d0c      	cmp	r5, #12
 8017fd6:	bf38      	it	cc
 8017fd8:	250c      	movcc	r5, #12
 8017fda:	2d00      	cmp	r5, #0
 8017fdc:	4607      	mov	r7, r0
 8017fde:	db01      	blt.n	8017fe4 <_malloc_r+0x1c>
 8017fe0:	42a9      	cmp	r1, r5
 8017fe2:	d905      	bls.n	8017ff0 <_malloc_r+0x28>
 8017fe4:	230c      	movs	r3, #12
 8017fe6:	603b      	str	r3, [r7, #0]
 8017fe8:	2600      	movs	r6, #0
 8017fea:	4630      	mov	r0, r6
 8017fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ff0:	4e2e      	ldr	r6, [pc, #184]	; (80180ac <_malloc_r+0xe4>)
 8017ff2:	f000 fecb 	bl	8018d8c <__malloc_lock>
 8017ff6:	6833      	ldr	r3, [r6, #0]
 8017ff8:	461c      	mov	r4, r3
 8017ffa:	bb34      	cbnz	r4, 801804a <_malloc_r+0x82>
 8017ffc:	4629      	mov	r1, r5
 8017ffe:	4638      	mov	r0, r7
 8018000:	f7ff ffc2 	bl	8017f88 <sbrk_aligned>
 8018004:	1c43      	adds	r3, r0, #1
 8018006:	4604      	mov	r4, r0
 8018008:	d14d      	bne.n	80180a6 <_malloc_r+0xde>
 801800a:	6834      	ldr	r4, [r6, #0]
 801800c:	4626      	mov	r6, r4
 801800e:	2e00      	cmp	r6, #0
 8018010:	d140      	bne.n	8018094 <_malloc_r+0xcc>
 8018012:	6823      	ldr	r3, [r4, #0]
 8018014:	4631      	mov	r1, r6
 8018016:	4638      	mov	r0, r7
 8018018:	eb04 0803 	add.w	r8, r4, r3
 801801c:	f000 fba0 	bl	8018760 <_sbrk_r>
 8018020:	4580      	cmp	r8, r0
 8018022:	d13a      	bne.n	801809a <_malloc_r+0xd2>
 8018024:	6821      	ldr	r1, [r4, #0]
 8018026:	3503      	adds	r5, #3
 8018028:	1a6d      	subs	r5, r5, r1
 801802a:	f025 0503 	bic.w	r5, r5, #3
 801802e:	3508      	adds	r5, #8
 8018030:	2d0c      	cmp	r5, #12
 8018032:	bf38      	it	cc
 8018034:	250c      	movcc	r5, #12
 8018036:	4629      	mov	r1, r5
 8018038:	4638      	mov	r0, r7
 801803a:	f7ff ffa5 	bl	8017f88 <sbrk_aligned>
 801803e:	3001      	adds	r0, #1
 8018040:	d02b      	beq.n	801809a <_malloc_r+0xd2>
 8018042:	6823      	ldr	r3, [r4, #0]
 8018044:	442b      	add	r3, r5
 8018046:	6023      	str	r3, [r4, #0]
 8018048:	e00e      	b.n	8018068 <_malloc_r+0xa0>
 801804a:	6822      	ldr	r2, [r4, #0]
 801804c:	1b52      	subs	r2, r2, r5
 801804e:	d41e      	bmi.n	801808e <_malloc_r+0xc6>
 8018050:	2a0b      	cmp	r2, #11
 8018052:	d916      	bls.n	8018082 <_malloc_r+0xba>
 8018054:	1961      	adds	r1, r4, r5
 8018056:	42a3      	cmp	r3, r4
 8018058:	6025      	str	r5, [r4, #0]
 801805a:	bf18      	it	ne
 801805c:	6059      	strne	r1, [r3, #4]
 801805e:	6863      	ldr	r3, [r4, #4]
 8018060:	bf08      	it	eq
 8018062:	6031      	streq	r1, [r6, #0]
 8018064:	5162      	str	r2, [r4, r5]
 8018066:	604b      	str	r3, [r1, #4]
 8018068:	4638      	mov	r0, r7
 801806a:	f104 060b 	add.w	r6, r4, #11
 801806e:	f000 fe93 	bl	8018d98 <__malloc_unlock>
 8018072:	f026 0607 	bic.w	r6, r6, #7
 8018076:	1d23      	adds	r3, r4, #4
 8018078:	1af2      	subs	r2, r6, r3
 801807a:	d0b6      	beq.n	8017fea <_malloc_r+0x22>
 801807c:	1b9b      	subs	r3, r3, r6
 801807e:	50a3      	str	r3, [r4, r2]
 8018080:	e7b3      	b.n	8017fea <_malloc_r+0x22>
 8018082:	6862      	ldr	r2, [r4, #4]
 8018084:	42a3      	cmp	r3, r4
 8018086:	bf0c      	ite	eq
 8018088:	6032      	streq	r2, [r6, #0]
 801808a:	605a      	strne	r2, [r3, #4]
 801808c:	e7ec      	b.n	8018068 <_malloc_r+0xa0>
 801808e:	4623      	mov	r3, r4
 8018090:	6864      	ldr	r4, [r4, #4]
 8018092:	e7b2      	b.n	8017ffa <_malloc_r+0x32>
 8018094:	4634      	mov	r4, r6
 8018096:	6876      	ldr	r6, [r6, #4]
 8018098:	e7b9      	b.n	801800e <_malloc_r+0x46>
 801809a:	230c      	movs	r3, #12
 801809c:	603b      	str	r3, [r7, #0]
 801809e:	4638      	mov	r0, r7
 80180a0:	f000 fe7a 	bl	8018d98 <__malloc_unlock>
 80180a4:	e7a1      	b.n	8017fea <_malloc_r+0x22>
 80180a6:	6025      	str	r5, [r4, #0]
 80180a8:	e7de      	b.n	8018068 <_malloc_r+0xa0>
 80180aa:	bf00      	nop
 80180ac:	2400aee4 	.word	0x2400aee4

080180b0 <__sfputc_r>:
 80180b0:	6893      	ldr	r3, [r2, #8]
 80180b2:	3b01      	subs	r3, #1
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	b410      	push	{r4}
 80180b8:	6093      	str	r3, [r2, #8]
 80180ba:	da08      	bge.n	80180ce <__sfputc_r+0x1e>
 80180bc:	6994      	ldr	r4, [r2, #24]
 80180be:	42a3      	cmp	r3, r4
 80180c0:	db01      	blt.n	80180c6 <__sfputc_r+0x16>
 80180c2:	290a      	cmp	r1, #10
 80180c4:	d103      	bne.n	80180ce <__sfputc_r+0x1e>
 80180c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180ca:	f000 bbe1 	b.w	8018890 <__swbuf_r>
 80180ce:	6813      	ldr	r3, [r2, #0]
 80180d0:	1c58      	adds	r0, r3, #1
 80180d2:	6010      	str	r0, [r2, #0]
 80180d4:	7019      	strb	r1, [r3, #0]
 80180d6:	4608      	mov	r0, r1
 80180d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180dc:	4770      	bx	lr

080180de <__sfputs_r>:
 80180de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180e0:	4606      	mov	r6, r0
 80180e2:	460f      	mov	r7, r1
 80180e4:	4614      	mov	r4, r2
 80180e6:	18d5      	adds	r5, r2, r3
 80180e8:	42ac      	cmp	r4, r5
 80180ea:	d101      	bne.n	80180f0 <__sfputs_r+0x12>
 80180ec:	2000      	movs	r0, #0
 80180ee:	e007      	b.n	8018100 <__sfputs_r+0x22>
 80180f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180f4:	463a      	mov	r2, r7
 80180f6:	4630      	mov	r0, r6
 80180f8:	f7ff ffda 	bl	80180b0 <__sfputc_r>
 80180fc:	1c43      	adds	r3, r0, #1
 80180fe:	d1f3      	bne.n	80180e8 <__sfputs_r+0xa>
 8018100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018104 <_vfiprintf_r>:
 8018104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018108:	460d      	mov	r5, r1
 801810a:	b09d      	sub	sp, #116	; 0x74
 801810c:	4614      	mov	r4, r2
 801810e:	4698      	mov	r8, r3
 8018110:	4606      	mov	r6, r0
 8018112:	b118      	cbz	r0, 801811c <_vfiprintf_r+0x18>
 8018114:	6983      	ldr	r3, [r0, #24]
 8018116:	b90b      	cbnz	r3, 801811c <_vfiprintf_r+0x18>
 8018118:	f7ff fdec 	bl	8017cf4 <__sinit>
 801811c:	4b89      	ldr	r3, [pc, #548]	; (8018344 <_vfiprintf_r+0x240>)
 801811e:	429d      	cmp	r5, r3
 8018120:	d11b      	bne.n	801815a <_vfiprintf_r+0x56>
 8018122:	6875      	ldr	r5, [r6, #4]
 8018124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018126:	07d9      	lsls	r1, r3, #31
 8018128:	d405      	bmi.n	8018136 <_vfiprintf_r+0x32>
 801812a:	89ab      	ldrh	r3, [r5, #12]
 801812c:	059a      	lsls	r2, r3, #22
 801812e:	d402      	bmi.n	8018136 <_vfiprintf_r+0x32>
 8018130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018132:	f7ff feb4 	bl	8017e9e <__retarget_lock_acquire_recursive>
 8018136:	89ab      	ldrh	r3, [r5, #12]
 8018138:	071b      	lsls	r3, r3, #28
 801813a:	d501      	bpl.n	8018140 <_vfiprintf_r+0x3c>
 801813c:	692b      	ldr	r3, [r5, #16]
 801813e:	b9eb      	cbnz	r3, 801817c <_vfiprintf_r+0x78>
 8018140:	4629      	mov	r1, r5
 8018142:	4630      	mov	r0, r6
 8018144:	f000 fc08 	bl	8018958 <__swsetup_r>
 8018148:	b1c0      	cbz	r0, 801817c <_vfiprintf_r+0x78>
 801814a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801814c:	07dc      	lsls	r4, r3, #31
 801814e:	d50e      	bpl.n	801816e <_vfiprintf_r+0x6a>
 8018150:	f04f 30ff 	mov.w	r0, #4294967295
 8018154:	b01d      	add	sp, #116	; 0x74
 8018156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815a:	4b7b      	ldr	r3, [pc, #492]	; (8018348 <_vfiprintf_r+0x244>)
 801815c:	429d      	cmp	r5, r3
 801815e:	d101      	bne.n	8018164 <_vfiprintf_r+0x60>
 8018160:	68b5      	ldr	r5, [r6, #8]
 8018162:	e7df      	b.n	8018124 <_vfiprintf_r+0x20>
 8018164:	4b79      	ldr	r3, [pc, #484]	; (801834c <_vfiprintf_r+0x248>)
 8018166:	429d      	cmp	r5, r3
 8018168:	bf08      	it	eq
 801816a:	68f5      	ldreq	r5, [r6, #12]
 801816c:	e7da      	b.n	8018124 <_vfiprintf_r+0x20>
 801816e:	89ab      	ldrh	r3, [r5, #12]
 8018170:	0598      	lsls	r0, r3, #22
 8018172:	d4ed      	bmi.n	8018150 <_vfiprintf_r+0x4c>
 8018174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018176:	f7ff fe94 	bl	8017ea2 <__retarget_lock_release_recursive>
 801817a:	e7e9      	b.n	8018150 <_vfiprintf_r+0x4c>
 801817c:	2300      	movs	r3, #0
 801817e:	9309      	str	r3, [sp, #36]	; 0x24
 8018180:	2320      	movs	r3, #32
 8018182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018186:	f8cd 800c 	str.w	r8, [sp, #12]
 801818a:	2330      	movs	r3, #48	; 0x30
 801818c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018350 <_vfiprintf_r+0x24c>
 8018190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018194:	f04f 0901 	mov.w	r9, #1
 8018198:	4623      	mov	r3, r4
 801819a:	469a      	mov	sl, r3
 801819c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181a0:	b10a      	cbz	r2, 80181a6 <_vfiprintf_r+0xa2>
 80181a2:	2a25      	cmp	r2, #37	; 0x25
 80181a4:	d1f9      	bne.n	801819a <_vfiprintf_r+0x96>
 80181a6:	ebba 0b04 	subs.w	fp, sl, r4
 80181aa:	d00b      	beq.n	80181c4 <_vfiprintf_r+0xc0>
 80181ac:	465b      	mov	r3, fp
 80181ae:	4622      	mov	r2, r4
 80181b0:	4629      	mov	r1, r5
 80181b2:	4630      	mov	r0, r6
 80181b4:	f7ff ff93 	bl	80180de <__sfputs_r>
 80181b8:	3001      	adds	r0, #1
 80181ba:	f000 80aa 	beq.w	8018312 <_vfiprintf_r+0x20e>
 80181be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181c0:	445a      	add	r2, fp
 80181c2:	9209      	str	r2, [sp, #36]	; 0x24
 80181c4:	f89a 3000 	ldrb.w	r3, [sl]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	f000 80a2 	beq.w	8018312 <_vfiprintf_r+0x20e>
 80181ce:	2300      	movs	r3, #0
 80181d0:	f04f 32ff 	mov.w	r2, #4294967295
 80181d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181d8:	f10a 0a01 	add.w	sl, sl, #1
 80181dc:	9304      	str	r3, [sp, #16]
 80181de:	9307      	str	r3, [sp, #28]
 80181e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80181e4:	931a      	str	r3, [sp, #104]	; 0x68
 80181e6:	4654      	mov	r4, sl
 80181e8:	2205      	movs	r2, #5
 80181ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181ee:	4858      	ldr	r0, [pc, #352]	; (8018350 <_vfiprintf_r+0x24c>)
 80181f0:	f7e8 f87e 	bl	80002f0 <memchr>
 80181f4:	9a04      	ldr	r2, [sp, #16]
 80181f6:	b9d8      	cbnz	r0, 8018230 <_vfiprintf_r+0x12c>
 80181f8:	06d1      	lsls	r1, r2, #27
 80181fa:	bf44      	itt	mi
 80181fc:	2320      	movmi	r3, #32
 80181fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018202:	0713      	lsls	r3, r2, #28
 8018204:	bf44      	itt	mi
 8018206:	232b      	movmi	r3, #43	; 0x2b
 8018208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801820c:	f89a 3000 	ldrb.w	r3, [sl]
 8018210:	2b2a      	cmp	r3, #42	; 0x2a
 8018212:	d015      	beq.n	8018240 <_vfiprintf_r+0x13c>
 8018214:	9a07      	ldr	r2, [sp, #28]
 8018216:	4654      	mov	r4, sl
 8018218:	2000      	movs	r0, #0
 801821a:	f04f 0c0a 	mov.w	ip, #10
 801821e:	4621      	mov	r1, r4
 8018220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018224:	3b30      	subs	r3, #48	; 0x30
 8018226:	2b09      	cmp	r3, #9
 8018228:	d94e      	bls.n	80182c8 <_vfiprintf_r+0x1c4>
 801822a:	b1b0      	cbz	r0, 801825a <_vfiprintf_r+0x156>
 801822c:	9207      	str	r2, [sp, #28]
 801822e:	e014      	b.n	801825a <_vfiprintf_r+0x156>
 8018230:	eba0 0308 	sub.w	r3, r0, r8
 8018234:	fa09 f303 	lsl.w	r3, r9, r3
 8018238:	4313      	orrs	r3, r2
 801823a:	9304      	str	r3, [sp, #16]
 801823c:	46a2      	mov	sl, r4
 801823e:	e7d2      	b.n	80181e6 <_vfiprintf_r+0xe2>
 8018240:	9b03      	ldr	r3, [sp, #12]
 8018242:	1d19      	adds	r1, r3, #4
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	9103      	str	r1, [sp, #12]
 8018248:	2b00      	cmp	r3, #0
 801824a:	bfbb      	ittet	lt
 801824c:	425b      	neglt	r3, r3
 801824e:	f042 0202 	orrlt.w	r2, r2, #2
 8018252:	9307      	strge	r3, [sp, #28]
 8018254:	9307      	strlt	r3, [sp, #28]
 8018256:	bfb8      	it	lt
 8018258:	9204      	strlt	r2, [sp, #16]
 801825a:	7823      	ldrb	r3, [r4, #0]
 801825c:	2b2e      	cmp	r3, #46	; 0x2e
 801825e:	d10c      	bne.n	801827a <_vfiprintf_r+0x176>
 8018260:	7863      	ldrb	r3, [r4, #1]
 8018262:	2b2a      	cmp	r3, #42	; 0x2a
 8018264:	d135      	bne.n	80182d2 <_vfiprintf_r+0x1ce>
 8018266:	9b03      	ldr	r3, [sp, #12]
 8018268:	1d1a      	adds	r2, r3, #4
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	9203      	str	r2, [sp, #12]
 801826e:	2b00      	cmp	r3, #0
 8018270:	bfb8      	it	lt
 8018272:	f04f 33ff 	movlt.w	r3, #4294967295
 8018276:	3402      	adds	r4, #2
 8018278:	9305      	str	r3, [sp, #20]
 801827a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018360 <_vfiprintf_r+0x25c>
 801827e:	7821      	ldrb	r1, [r4, #0]
 8018280:	2203      	movs	r2, #3
 8018282:	4650      	mov	r0, sl
 8018284:	f7e8 f834 	bl	80002f0 <memchr>
 8018288:	b140      	cbz	r0, 801829c <_vfiprintf_r+0x198>
 801828a:	2340      	movs	r3, #64	; 0x40
 801828c:	eba0 000a 	sub.w	r0, r0, sl
 8018290:	fa03 f000 	lsl.w	r0, r3, r0
 8018294:	9b04      	ldr	r3, [sp, #16]
 8018296:	4303      	orrs	r3, r0
 8018298:	3401      	adds	r4, #1
 801829a:	9304      	str	r3, [sp, #16]
 801829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182a0:	482c      	ldr	r0, [pc, #176]	; (8018354 <_vfiprintf_r+0x250>)
 80182a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182a6:	2206      	movs	r2, #6
 80182a8:	f7e8 f822 	bl	80002f0 <memchr>
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d03f      	beq.n	8018330 <_vfiprintf_r+0x22c>
 80182b0:	4b29      	ldr	r3, [pc, #164]	; (8018358 <_vfiprintf_r+0x254>)
 80182b2:	bb1b      	cbnz	r3, 80182fc <_vfiprintf_r+0x1f8>
 80182b4:	9b03      	ldr	r3, [sp, #12]
 80182b6:	3307      	adds	r3, #7
 80182b8:	f023 0307 	bic.w	r3, r3, #7
 80182bc:	3308      	adds	r3, #8
 80182be:	9303      	str	r3, [sp, #12]
 80182c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c2:	443b      	add	r3, r7
 80182c4:	9309      	str	r3, [sp, #36]	; 0x24
 80182c6:	e767      	b.n	8018198 <_vfiprintf_r+0x94>
 80182c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80182cc:	460c      	mov	r4, r1
 80182ce:	2001      	movs	r0, #1
 80182d0:	e7a5      	b.n	801821e <_vfiprintf_r+0x11a>
 80182d2:	2300      	movs	r3, #0
 80182d4:	3401      	adds	r4, #1
 80182d6:	9305      	str	r3, [sp, #20]
 80182d8:	4619      	mov	r1, r3
 80182da:	f04f 0c0a 	mov.w	ip, #10
 80182de:	4620      	mov	r0, r4
 80182e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182e4:	3a30      	subs	r2, #48	; 0x30
 80182e6:	2a09      	cmp	r2, #9
 80182e8:	d903      	bls.n	80182f2 <_vfiprintf_r+0x1ee>
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d0c5      	beq.n	801827a <_vfiprintf_r+0x176>
 80182ee:	9105      	str	r1, [sp, #20]
 80182f0:	e7c3      	b.n	801827a <_vfiprintf_r+0x176>
 80182f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80182f6:	4604      	mov	r4, r0
 80182f8:	2301      	movs	r3, #1
 80182fa:	e7f0      	b.n	80182de <_vfiprintf_r+0x1da>
 80182fc:	ab03      	add	r3, sp, #12
 80182fe:	9300      	str	r3, [sp, #0]
 8018300:	462a      	mov	r2, r5
 8018302:	4b16      	ldr	r3, [pc, #88]	; (801835c <_vfiprintf_r+0x258>)
 8018304:	a904      	add	r1, sp, #16
 8018306:	4630      	mov	r0, r6
 8018308:	f3af 8000 	nop.w
 801830c:	4607      	mov	r7, r0
 801830e:	1c78      	adds	r0, r7, #1
 8018310:	d1d6      	bne.n	80182c0 <_vfiprintf_r+0x1bc>
 8018312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018314:	07d9      	lsls	r1, r3, #31
 8018316:	d405      	bmi.n	8018324 <_vfiprintf_r+0x220>
 8018318:	89ab      	ldrh	r3, [r5, #12]
 801831a:	059a      	lsls	r2, r3, #22
 801831c:	d402      	bmi.n	8018324 <_vfiprintf_r+0x220>
 801831e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018320:	f7ff fdbf 	bl	8017ea2 <__retarget_lock_release_recursive>
 8018324:	89ab      	ldrh	r3, [r5, #12]
 8018326:	065b      	lsls	r3, r3, #25
 8018328:	f53f af12 	bmi.w	8018150 <_vfiprintf_r+0x4c>
 801832c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801832e:	e711      	b.n	8018154 <_vfiprintf_r+0x50>
 8018330:	ab03      	add	r3, sp, #12
 8018332:	9300      	str	r3, [sp, #0]
 8018334:	462a      	mov	r2, r5
 8018336:	4b09      	ldr	r3, [pc, #36]	; (801835c <_vfiprintf_r+0x258>)
 8018338:	a904      	add	r1, sp, #16
 801833a:	4630      	mov	r0, r6
 801833c:	f000 f880 	bl	8018440 <_printf_i>
 8018340:	e7e4      	b.n	801830c <_vfiprintf_r+0x208>
 8018342:	bf00      	nop
 8018344:	0801a67c 	.word	0x0801a67c
 8018348:	0801a69c 	.word	0x0801a69c
 801834c:	0801a65c 	.word	0x0801a65c
 8018350:	0801a6c0 	.word	0x0801a6c0
 8018354:	0801a6ca 	.word	0x0801a6ca
 8018358:	00000000 	.word	0x00000000
 801835c:	080180df 	.word	0x080180df
 8018360:	0801a6c6 	.word	0x0801a6c6

08018364 <_printf_common>:
 8018364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018368:	4616      	mov	r6, r2
 801836a:	4699      	mov	r9, r3
 801836c:	688a      	ldr	r2, [r1, #8]
 801836e:	690b      	ldr	r3, [r1, #16]
 8018370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018374:	4293      	cmp	r3, r2
 8018376:	bfb8      	it	lt
 8018378:	4613      	movlt	r3, r2
 801837a:	6033      	str	r3, [r6, #0]
 801837c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018380:	4607      	mov	r7, r0
 8018382:	460c      	mov	r4, r1
 8018384:	b10a      	cbz	r2, 801838a <_printf_common+0x26>
 8018386:	3301      	adds	r3, #1
 8018388:	6033      	str	r3, [r6, #0]
 801838a:	6823      	ldr	r3, [r4, #0]
 801838c:	0699      	lsls	r1, r3, #26
 801838e:	bf42      	ittt	mi
 8018390:	6833      	ldrmi	r3, [r6, #0]
 8018392:	3302      	addmi	r3, #2
 8018394:	6033      	strmi	r3, [r6, #0]
 8018396:	6825      	ldr	r5, [r4, #0]
 8018398:	f015 0506 	ands.w	r5, r5, #6
 801839c:	d106      	bne.n	80183ac <_printf_common+0x48>
 801839e:	f104 0a19 	add.w	sl, r4, #25
 80183a2:	68e3      	ldr	r3, [r4, #12]
 80183a4:	6832      	ldr	r2, [r6, #0]
 80183a6:	1a9b      	subs	r3, r3, r2
 80183a8:	42ab      	cmp	r3, r5
 80183aa:	dc26      	bgt.n	80183fa <_printf_common+0x96>
 80183ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80183b0:	1e13      	subs	r3, r2, #0
 80183b2:	6822      	ldr	r2, [r4, #0]
 80183b4:	bf18      	it	ne
 80183b6:	2301      	movne	r3, #1
 80183b8:	0692      	lsls	r2, r2, #26
 80183ba:	d42b      	bmi.n	8018414 <_printf_common+0xb0>
 80183bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80183c0:	4649      	mov	r1, r9
 80183c2:	4638      	mov	r0, r7
 80183c4:	47c0      	blx	r8
 80183c6:	3001      	adds	r0, #1
 80183c8:	d01e      	beq.n	8018408 <_printf_common+0xa4>
 80183ca:	6823      	ldr	r3, [r4, #0]
 80183cc:	68e5      	ldr	r5, [r4, #12]
 80183ce:	6832      	ldr	r2, [r6, #0]
 80183d0:	f003 0306 	and.w	r3, r3, #6
 80183d4:	2b04      	cmp	r3, #4
 80183d6:	bf08      	it	eq
 80183d8:	1aad      	subeq	r5, r5, r2
 80183da:	68a3      	ldr	r3, [r4, #8]
 80183dc:	6922      	ldr	r2, [r4, #16]
 80183de:	bf0c      	ite	eq
 80183e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183e4:	2500      	movne	r5, #0
 80183e6:	4293      	cmp	r3, r2
 80183e8:	bfc4      	itt	gt
 80183ea:	1a9b      	subgt	r3, r3, r2
 80183ec:	18ed      	addgt	r5, r5, r3
 80183ee:	2600      	movs	r6, #0
 80183f0:	341a      	adds	r4, #26
 80183f2:	42b5      	cmp	r5, r6
 80183f4:	d11a      	bne.n	801842c <_printf_common+0xc8>
 80183f6:	2000      	movs	r0, #0
 80183f8:	e008      	b.n	801840c <_printf_common+0xa8>
 80183fa:	2301      	movs	r3, #1
 80183fc:	4652      	mov	r2, sl
 80183fe:	4649      	mov	r1, r9
 8018400:	4638      	mov	r0, r7
 8018402:	47c0      	blx	r8
 8018404:	3001      	adds	r0, #1
 8018406:	d103      	bne.n	8018410 <_printf_common+0xac>
 8018408:	f04f 30ff 	mov.w	r0, #4294967295
 801840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018410:	3501      	adds	r5, #1
 8018412:	e7c6      	b.n	80183a2 <_printf_common+0x3e>
 8018414:	18e1      	adds	r1, r4, r3
 8018416:	1c5a      	adds	r2, r3, #1
 8018418:	2030      	movs	r0, #48	; 0x30
 801841a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801841e:	4422      	add	r2, r4
 8018420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018428:	3302      	adds	r3, #2
 801842a:	e7c7      	b.n	80183bc <_printf_common+0x58>
 801842c:	2301      	movs	r3, #1
 801842e:	4622      	mov	r2, r4
 8018430:	4649      	mov	r1, r9
 8018432:	4638      	mov	r0, r7
 8018434:	47c0      	blx	r8
 8018436:	3001      	adds	r0, #1
 8018438:	d0e6      	beq.n	8018408 <_printf_common+0xa4>
 801843a:	3601      	adds	r6, #1
 801843c:	e7d9      	b.n	80183f2 <_printf_common+0x8e>
	...

08018440 <_printf_i>:
 8018440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018444:	7e0f      	ldrb	r7, [r1, #24]
 8018446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018448:	2f78      	cmp	r7, #120	; 0x78
 801844a:	4691      	mov	r9, r2
 801844c:	4680      	mov	r8, r0
 801844e:	460c      	mov	r4, r1
 8018450:	469a      	mov	sl, r3
 8018452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018456:	d807      	bhi.n	8018468 <_printf_i+0x28>
 8018458:	2f62      	cmp	r7, #98	; 0x62
 801845a:	d80a      	bhi.n	8018472 <_printf_i+0x32>
 801845c:	2f00      	cmp	r7, #0
 801845e:	f000 80d8 	beq.w	8018612 <_printf_i+0x1d2>
 8018462:	2f58      	cmp	r7, #88	; 0x58
 8018464:	f000 80a3 	beq.w	80185ae <_printf_i+0x16e>
 8018468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801846c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018470:	e03a      	b.n	80184e8 <_printf_i+0xa8>
 8018472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018476:	2b15      	cmp	r3, #21
 8018478:	d8f6      	bhi.n	8018468 <_printf_i+0x28>
 801847a:	a101      	add	r1, pc, #4	; (adr r1, 8018480 <_printf_i+0x40>)
 801847c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018480:	080184d9 	.word	0x080184d9
 8018484:	080184ed 	.word	0x080184ed
 8018488:	08018469 	.word	0x08018469
 801848c:	08018469 	.word	0x08018469
 8018490:	08018469 	.word	0x08018469
 8018494:	08018469 	.word	0x08018469
 8018498:	080184ed 	.word	0x080184ed
 801849c:	08018469 	.word	0x08018469
 80184a0:	08018469 	.word	0x08018469
 80184a4:	08018469 	.word	0x08018469
 80184a8:	08018469 	.word	0x08018469
 80184ac:	080185f9 	.word	0x080185f9
 80184b0:	0801851d 	.word	0x0801851d
 80184b4:	080185db 	.word	0x080185db
 80184b8:	08018469 	.word	0x08018469
 80184bc:	08018469 	.word	0x08018469
 80184c0:	0801861b 	.word	0x0801861b
 80184c4:	08018469 	.word	0x08018469
 80184c8:	0801851d 	.word	0x0801851d
 80184cc:	08018469 	.word	0x08018469
 80184d0:	08018469 	.word	0x08018469
 80184d4:	080185e3 	.word	0x080185e3
 80184d8:	682b      	ldr	r3, [r5, #0]
 80184da:	1d1a      	adds	r2, r3, #4
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	602a      	str	r2, [r5, #0]
 80184e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184e8:	2301      	movs	r3, #1
 80184ea:	e0a3      	b.n	8018634 <_printf_i+0x1f4>
 80184ec:	6820      	ldr	r0, [r4, #0]
 80184ee:	6829      	ldr	r1, [r5, #0]
 80184f0:	0606      	lsls	r6, r0, #24
 80184f2:	f101 0304 	add.w	r3, r1, #4
 80184f6:	d50a      	bpl.n	801850e <_printf_i+0xce>
 80184f8:	680e      	ldr	r6, [r1, #0]
 80184fa:	602b      	str	r3, [r5, #0]
 80184fc:	2e00      	cmp	r6, #0
 80184fe:	da03      	bge.n	8018508 <_printf_i+0xc8>
 8018500:	232d      	movs	r3, #45	; 0x2d
 8018502:	4276      	negs	r6, r6
 8018504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018508:	485e      	ldr	r0, [pc, #376]	; (8018684 <_printf_i+0x244>)
 801850a:	230a      	movs	r3, #10
 801850c:	e019      	b.n	8018542 <_printf_i+0x102>
 801850e:	680e      	ldr	r6, [r1, #0]
 8018510:	602b      	str	r3, [r5, #0]
 8018512:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018516:	bf18      	it	ne
 8018518:	b236      	sxthne	r6, r6
 801851a:	e7ef      	b.n	80184fc <_printf_i+0xbc>
 801851c:	682b      	ldr	r3, [r5, #0]
 801851e:	6820      	ldr	r0, [r4, #0]
 8018520:	1d19      	adds	r1, r3, #4
 8018522:	6029      	str	r1, [r5, #0]
 8018524:	0601      	lsls	r1, r0, #24
 8018526:	d501      	bpl.n	801852c <_printf_i+0xec>
 8018528:	681e      	ldr	r6, [r3, #0]
 801852a:	e002      	b.n	8018532 <_printf_i+0xf2>
 801852c:	0646      	lsls	r6, r0, #25
 801852e:	d5fb      	bpl.n	8018528 <_printf_i+0xe8>
 8018530:	881e      	ldrh	r6, [r3, #0]
 8018532:	4854      	ldr	r0, [pc, #336]	; (8018684 <_printf_i+0x244>)
 8018534:	2f6f      	cmp	r7, #111	; 0x6f
 8018536:	bf0c      	ite	eq
 8018538:	2308      	moveq	r3, #8
 801853a:	230a      	movne	r3, #10
 801853c:	2100      	movs	r1, #0
 801853e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018542:	6865      	ldr	r5, [r4, #4]
 8018544:	60a5      	str	r5, [r4, #8]
 8018546:	2d00      	cmp	r5, #0
 8018548:	bfa2      	ittt	ge
 801854a:	6821      	ldrge	r1, [r4, #0]
 801854c:	f021 0104 	bicge.w	r1, r1, #4
 8018550:	6021      	strge	r1, [r4, #0]
 8018552:	b90e      	cbnz	r6, 8018558 <_printf_i+0x118>
 8018554:	2d00      	cmp	r5, #0
 8018556:	d04d      	beq.n	80185f4 <_printf_i+0x1b4>
 8018558:	4615      	mov	r5, r2
 801855a:	fbb6 f1f3 	udiv	r1, r6, r3
 801855e:	fb03 6711 	mls	r7, r3, r1, r6
 8018562:	5dc7      	ldrb	r7, [r0, r7]
 8018564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018568:	4637      	mov	r7, r6
 801856a:	42bb      	cmp	r3, r7
 801856c:	460e      	mov	r6, r1
 801856e:	d9f4      	bls.n	801855a <_printf_i+0x11a>
 8018570:	2b08      	cmp	r3, #8
 8018572:	d10b      	bne.n	801858c <_printf_i+0x14c>
 8018574:	6823      	ldr	r3, [r4, #0]
 8018576:	07de      	lsls	r6, r3, #31
 8018578:	d508      	bpl.n	801858c <_printf_i+0x14c>
 801857a:	6923      	ldr	r3, [r4, #16]
 801857c:	6861      	ldr	r1, [r4, #4]
 801857e:	4299      	cmp	r1, r3
 8018580:	bfde      	ittt	le
 8018582:	2330      	movle	r3, #48	; 0x30
 8018584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018588:	f105 35ff 	addle.w	r5, r5, #4294967295
 801858c:	1b52      	subs	r2, r2, r5
 801858e:	6122      	str	r2, [r4, #16]
 8018590:	f8cd a000 	str.w	sl, [sp]
 8018594:	464b      	mov	r3, r9
 8018596:	aa03      	add	r2, sp, #12
 8018598:	4621      	mov	r1, r4
 801859a:	4640      	mov	r0, r8
 801859c:	f7ff fee2 	bl	8018364 <_printf_common>
 80185a0:	3001      	adds	r0, #1
 80185a2:	d14c      	bne.n	801863e <_printf_i+0x1fe>
 80185a4:	f04f 30ff 	mov.w	r0, #4294967295
 80185a8:	b004      	add	sp, #16
 80185aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ae:	4835      	ldr	r0, [pc, #212]	; (8018684 <_printf_i+0x244>)
 80185b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80185b4:	6829      	ldr	r1, [r5, #0]
 80185b6:	6823      	ldr	r3, [r4, #0]
 80185b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80185bc:	6029      	str	r1, [r5, #0]
 80185be:	061d      	lsls	r5, r3, #24
 80185c0:	d514      	bpl.n	80185ec <_printf_i+0x1ac>
 80185c2:	07df      	lsls	r7, r3, #31
 80185c4:	bf44      	itt	mi
 80185c6:	f043 0320 	orrmi.w	r3, r3, #32
 80185ca:	6023      	strmi	r3, [r4, #0]
 80185cc:	b91e      	cbnz	r6, 80185d6 <_printf_i+0x196>
 80185ce:	6823      	ldr	r3, [r4, #0]
 80185d0:	f023 0320 	bic.w	r3, r3, #32
 80185d4:	6023      	str	r3, [r4, #0]
 80185d6:	2310      	movs	r3, #16
 80185d8:	e7b0      	b.n	801853c <_printf_i+0xfc>
 80185da:	6823      	ldr	r3, [r4, #0]
 80185dc:	f043 0320 	orr.w	r3, r3, #32
 80185e0:	6023      	str	r3, [r4, #0]
 80185e2:	2378      	movs	r3, #120	; 0x78
 80185e4:	4828      	ldr	r0, [pc, #160]	; (8018688 <_printf_i+0x248>)
 80185e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80185ea:	e7e3      	b.n	80185b4 <_printf_i+0x174>
 80185ec:	0659      	lsls	r1, r3, #25
 80185ee:	bf48      	it	mi
 80185f0:	b2b6      	uxthmi	r6, r6
 80185f2:	e7e6      	b.n	80185c2 <_printf_i+0x182>
 80185f4:	4615      	mov	r5, r2
 80185f6:	e7bb      	b.n	8018570 <_printf_i+0x130>
 80185f8:	682b      	ldr	r3, [r5, #0]
 80185fa:	6826      	ldr	r6, [r4, #0]
 80185fc:	6961      	ldr	r1, [r4, #20]
 80185fe:	1d18      	adds	r0, r3, #4
 8018600:	6028      	str	r0, [r5, #0]
 8018602:	0635      	lsls	r5, r6, #24
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	d501      	bpl.n	801860c <_printf_i+0x1cc>
 8018608:	6019      	str	r1, [r3, #0]
 801860a:	e002      	b.n	8018612 <_printf_i+0x1d2>
 801860c:	0670      	lsls	r0, r6, #25
 801860e:	d5fb      	bpl.n	8018608 <_printf_i+0x1c8>
 8018610:	8019      	strh	r1, [r3, #0]
 8018612:	2300      	movs	r3, #0
 8018614:	6123      	str	r3, [r4, #16]
 8018616:	4615      	mov	r5, r2
 8018618:	e7ba      	b.n	8018590 <_printf_i+0x150>
 801861a:	682b      	ldr	r3, [r5, #0]
 801861c:	1d1a      	adds	r2, r3, #4
 801861e:	602a      	str	r2, [r5, #0]
 8018620:	681d      	ldr	r5, [r3, #0]
 8018622:	6862      	ldr	r2, [r4, #4]
 8018624:	2100      	movs	r1, #0
 8018626:	4628      	mov	r0, r5
 8018628:	f7e7 fe62 	bl	80002f0 <memchr>
 801862c:	b108      	cbz	r0, 8018632 <_printf_i+0x1f2>
 801862e:	1b40      	subs	r0, r0, r5
 8018630:	6060      	str	r0, [r4, #4]
 8018632:	6863      	ldr	r3, [r4, #4]
 8018634:	6123      	str	r3, [r4, #16]
 8018636:	2300      	movs	r3, #0
 8018638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801863c:	e7a8      	b.n	8018590 <_printf_i+0x150>
 801863e:	6923      	ldr	r3, [r4, #16]
 8018640:	462a      	mov	r2, r5
 8018642:	4649      	mov	r1, r9
 8018644:	4640      	mov	r0, r8
 8018646:	47d0      	blx	sl
 8018648:	3001      	adds	r0, #1
 801864a:	d0ab      	beq.n	80185a4 <_printf_i+0x164>
 801864c:	6823      	ldr	r3, [r4, #0]
 801864e:	079b      	lsls	r3, r3, #30
 8018650:	d413      	bmi.n	801867a <_printf_i+0x23a>
 8018652:	68e0      	ldr	r0, [r4, #12]
 8018654:	9b03      	ldr	r3, [sp, #12]
 8018656:	4298      	cmp	r0, r3
 8018658:	bfb8      	it	lt
 801865a:	4618      	movlt	r0, r3
 801865c:	e7a4      	b.n	80185a8 <_printf_i+0x168>
 801865e:	2301      	movs	r3, #1
 8018660:	4632      	mov	r2, r6
 8018662:	4649      	mov	r1, r9
 8018664:	4640      	mov	r0, r8
 8018666:	47d0      	blx	sl
 8018668:	3001      	adds	r0, #1
 801866a:	d09b      	beq.n	80185a4 <_printf_i+0x164>
 801866c:	3501      	adds	r5, #1
 801866e:	68e3      	ldr	r3, [r4, #12]
 8018670:	9903      	ldr	r1, [sp, #12]
 8018672:	1a5b      	subs	r3, r3, r1
 8018674:	42ab      	cmp	r3, r5
 8018676:	dcf2      	bgt.n	801865e <_printf_i+0x21e>
 8018678:	e7eb      	b.n	8018652 <_printf_i+0x212>
 801867a:	2500      	movs	r5, #0
 801867c:	f104 0619 	add.w	r6, r4, #25
 8018680:	e7f5      	b.n	801866e <_printf_i+0x22e>
 8018682:	bf00      	nop
 8018684:	0801a6d1 	.word	0x0801a6d1
 8018688:	0801a6e2 	.word	0x0801a6e2

0801868c <cleanup_glue>:
 801868c:	b538      	push	{r3, r4, r5, lr}
 801868e:	460c      	mov	r4, r1
 8018690:	6809      	ldr	r1, [r1, #0]
 8018692:	4605      	mov	r5, r0
 8018694:	b109      	cbz	r1, 801869a <cleanup_glue+0xe>
 8018696:	f7ff fff9 	bl	801868c <cleanup_glue>
 801869a:	4621      	mov	r1, r4
 801869c:	4628      	mov	r0, r5
 801869e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186a2:	f7ff bc25 	b.w	8017ef0 <_free_r>
	...

080186a8 <_reclaim_reent>:
 80186a8:	4b2c      	ldr	r3, [pc, #176]	; (801875c <_reclaim_reent+0xb4>)
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	4283      	cmp	r3, r0
 80186ae:	b570      	push	{r4, r5, r6, lr}
 80186b0:	4604      	mov	r4, r0
 80186b2:	d051      	beq.n	8018758 <_reclaim_reent+0xb0>
 80186b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80186b6:	b143      	cbz	r3, 80186ca <_reclaim_reent+0x22>
 80186b8:	68db      	ldr	r3, [r3, #12]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d14a      	bne.n	8018754 <_reclaim_reent+0xac>
 80186be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186c0:	6819      	ldr	r1, [r3, #0]
 80186c2:	b111      	cbz	r1, 80186ca <_reclaim_reent+0x22>
 80186c4:	4620      	mov	r0, r4
 80186c6:	f7ff fc13 	bl	8017ef0 <_free_r>
 80186ca:	6961      	ldr	r1, [r4, #20]
 80186cc:	b111      	cbz	r1, 80186d4 <_reclaim_reent+0x2c>
 80186ce:	4620      	mov	r0, r4
 80186d0:	f7ff fc0e 	bl	8017ef0 <_free_r>
 80186d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80186d6:	b111      	cbz	r1, 80186de <_reclaim_reent+0x36>
 80186d8:	4620      	mov	r0, r4
 80186da:	f7ff fc09 	bl	8017ef0 <_free_r>
 80186de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80186e0:	b111      	cbz	r1, 80186e8 <_reclaim_reent+0x40>
 80186e2:	4620      	mov	r0, r4
 80186e4:	f7ff fc04 	bl	8017ef0 <_free_r>
 80186e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80186ea:	b111      	cbz	r1, 80186f2 <_reclaim_reent+0x4a>
 80186ec:	4620      	mov	r0, r4
 80186ee:	f7ff fbff 	bl	8017ef0 <_free_r>
 80186f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80186f4:	b111      	cbz	r1, 80186fc <_reclaim_reent+0x54>
 80186f6:	4620      	mov	r0, r4
 80186f8:	f7ff fbfa 	bl	8017ef0 <_free_r>
 80186fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80186fe:	b111      	cbz	r1, 8018706 <_reclaim_reent+0x5e>
 8018700:	4620      	mov	r0, r4
 8018702:	f7ff fbf5 	bl	8017ef0 <_free_r>
 8018706:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018708:	b111      	cbz	r1, 8018710 <_reclaim_reent+0x68>
 801870a:	4620      	mov	r0, r4
 801870c:	f7ff fbf0 	bl	8017ef0 <_free_r>
 8018710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018712:	b111      	cbz	r1, 801871a <_reclaim_reent+0x72>
 8018714:	4620      	mov	r0, r4
 8018716:	f7ff fbeb 	bl	8017ef0 <_free_r>
 801871a:	69a3      	ldr	r3, [r4, #24]
 801871c:	b1e3      	cbz	r3, 8018758 <_reclaim_reent+0xb0>
 801871e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018720:	4620      	mov	r0, r4
 8018722:	4798      	blx	r3
 8018724:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018726:	b1b9      	cbz	r1, 8018758 <_reclaim_reent+0xb0>
 8018728:	4620      	mov	r0, r4
 801872a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801872e:	f7ff bfad 	b.w	801868c <cleanup_glue>
 8018732:	5949      	ldr	r1, [r1, r5]
 8018734:	b941      	cbnz	r1, 8018748 <_reclaim_reent+0xa0>
 8018736:	3504      	adds	r5, #4
 8018738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801873a:	2d80      	cmp	r5, #128	; 0x80
 801873c:	68d9      	ldr	r1, [r3, #12]
 801873e:	d1f8      	bne.n	8018732 <_reclaim_reent+0x8a>
 8018740:	4620      	mov	r0, r4
 8018742:	f7ff fbd5 	bl	8017ef0 <_free_r>
 8018746:	e7ba      	b.n	80186be <_reclaim_reent+0x16>
 8018748:	680e      	ldr	r6, [r1, #0]
 801874a:	4620      	mov	r0, r4
 801874c:	f7ff fbd0 	bl	8017ef0 <_free_r>
 8018750:	4631      	mov	r1, r6
 8018752:	e7ef      	b.n	8018734 <_reclaim_reent+0x8c>
 8018754:	2500      	movs	r5, #0
 8018756:	e7ef      	b.n	8018738 <_reclaim_reent+0x90>
 8018758:	bd70      	pop	{r4, r5, r6, pc}
 801875a:	bf00      	nop
 801875c:	240000a8 	.word	0x240000a8

08018760 <_sbrk_r>:
 8018760:	b538      	push	{r3, r4, r5, lr}
 8018762:	4d06      	ldr	r5, [pc, #24]	; (801877c <_sbrk_r+0x1c>)
 8018764:	2300      	movs	r3, #0
 8018766:	4604      	mov	r4, r0
 8018768:	4608      	mov	r0, r1
 801876a:	602b      	str	r3, [r5, #0]
 801876c:	f7e9 fd84 	bl	8002278 <_sbrk>
 8018770:	1c43      	adds	r3, r0, #1
 8018772:	d102      	bne.n	801877a <_sbrk_r+0x1a>
 8018774:	682b      	ldr	r3, [r5, #0]
 8018776:	b103      	cbz	r3, 801877a <_sbrk_r+0x1a>
 8018778:	6023      	str	r3, [r4, #0]
 801877a:	bd38      	pop	{r3, r4, r5, pc}
 801877c:	2400aff4 	.word	0x2400aff4

08018780 <_raise_r>:
 8018780:	291f      	cmp	r1, #31
 8018782:	b538      	push	{r3, r4, r5, lr}
 8018784:	4604      	mov	r4, r0
 8018786:	460d      	mov	r5, r1
 8018788:	d904      	bls.n	8018794 <_raise_r+0x14>
 801878a:	2316      	movs	r3, #22
 801878c:	6003      	str	r3, [r0, #0]
 801878e:	f04f 30ff 	mov.w	r0, #4294967295
 8018792:	bd38      	pop	{r3, r4, r5, pc}
 8018794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018796:	b112      	cbz	r2, 801879e <_raise_r+0x1e>
 8018798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801879c:	b94b      	cbnz	r3, 80187b2 <_raise_r+0x32>
 801879e:	4620      	mov	r0, r4
 80187a0:	f000 f830 	bl	8018804 <_getpid_r>
 80187a4:	462a      	mov	r2, r5
 80187a6:	4601      	mov	r1, r0
 80187a8:	4620      	mov	r0, r4
 80187aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187ae:	f000 b817 	b.w	80187e0 <_kill_r>
 80187b2:	2b01      	cmp	r3, #1
 80187b4:	d00a      	beq.n	80187cc <_raise_r+0x4c>
 80187b6:	1c59      	adds	r1, r3, #1
 80187b8:	d103      	bne.n	80187c2 <_raise_r+0x42>
 80187ba:	2316      	movs	r3, #22
 80187bc:	6003      	str	r3, [r0, #0]
 80187be:	2001      	movs	r0, #1
 80187c0:	e7e7      	b.n	8018792 <_raise_r+0x12>
 80187c2:	2400      	movs	r4, #0
 80187c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80187c8:	4628      	mov	r0, r5
 80187ca:	4798      	blx	r3
 80187cc:	2000      	movs	r0, #0
 80187ce:	e7e0      	b.n	8018792 <_raise_r+0x12>

080187d0 <raise>:
 80187d0:	4b02      	ldr	r3, [pc, #8]	; (80187dc <raise+0xc>)
 80187d2:	4601      	mov	r1, r0
 80187d4:	6818      	ldr	r0, [r3, #0]
 80187d6:	f7ff bfd3 	b.w	8018780 <_raise_r>
 80187da:	bf00      	nop
 80187dc:	240000a8 	.word	0x240000a8

080187e0 <_kill_r>:
 80187e0:	b538      	push	{r3, r4, r5, lr}
 80187e2:	4d07      	ldr	r5, [pc, #28]	; (8018800 <_kill_r+0x20>)
 80187e4:	2300      	movs	r3, #0
 80187e6:	4604      	mov	r4, r0
 80187e8:	4608      	mov	r0, r1
 80187ea:	4611      	mov	r1, r2
 80187ec:	602b      	str	r3, [r5, #0]
 80187ee:	f7e9 fd0b 	bl	8002208 <_kill>
 80187f2:	1c43      	adds	r3, r0, #1
 80187f4:	d102      	bne.n	80187fc <_kill_r+0x1c>
 80187f6:	682b      	ldr	r3, [r5, #0]
 80187f8:	b103      	cbz	r3, 80187fc <_kill_r+0x1c>
 80187fa:	6023      	str	r3, [r4, #0]
 80187fc:	bd38      	pop	{r3, r4, r5, pc}
 80187fe:	bf00      	nop
 8018800:	2400aff4 	.word	0x2400aff4

08018804 <_getpid_r>:
 8018804:	f7e9 bcfe 	b.w	8002204 <_getpid>

08018808 <__sread>:
 8018808:	b510      	push	{r4, lr}
 801880a:	460c      	mov	r4, r1
 801880c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018810:	f000 fac8 	bl	8018da4 <_read_r>
 8018814:	2800      	cmp	r0, #0
 8018816:	bfab      	itete	ge
 8018818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801881a:	89a3      	ldrhlt	r3, [r4, #12]
 801881c:	181b      	addge	r3, r3, r0
 801881e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018822:	bfac      	ite	ge
 8018824:	6563      	strge	r3, [r4, #84]	; 0x54
 8018826:	81a3      	strhlt	r3, [r4, #12]
 8018828:	bd10      	pop	{r4, pc}

0801882a <__swrite>:
 801882a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801882e:	461f      	mov	r7, r3
 8018830:	898b      	ldrh	r3, [r1, #12]
 8018832:	05db      	lsls	r3, r3, #23
 8018834:	4605      	mov	r5, r0
 8018836:	460c      	mov	r4, r1
 8018838:	4616      	mov	r6, r2
 801883a:	d505      	bpl.n	8018848 <__swrite+0x1e>
 801883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018840:	2302      	movs	r3, #2
 8018842:	2200      	movs	r2, #0
 8018844:	f000 fa2a 	bl	8018c9c <_lseek_r>
 8018848:	89a3      	ldrh	r3, [r4, #12]
 801884a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801884e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018852:	81a3      	strh	r3, [r4, #12]
 8018854:	4632      	mov	r2, r6
 8018856:	463b      	mov	r3, r7
 8018858:	4628      	mov	r0, r5
 801885a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801885e:	f000 b869 	b.w	8018934 <_write_r>

08018862 <__sseek>:
 8018862:	b510      	push	{r4, lr}
 8018864:	460c      	mov	r4, r1
 8018866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801886a:	f000 fa17 	bl	8018c9c <_lseek_r>
 801886e:	1c43      	adds	r3, r0, #1
 8018870:	89a3      	ldrh	r3, [r4, #12]
 8018872:	bf15      	itete	ne
 8018874:	6560      	strne	r0, [r4, #84]	; 0x54
 8018876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801887a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801887e:	81a3      	strheq	r3, [r4, #12]
 8018880:	bf18      	it	ne
 8018882:	81a3      	strhne	r3, [r4, #12]
 8018884:	bd10      	pop	{r4, pc}

08018886 <__sclose>:
 8018886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801888a:	f000 b935 	b.w	8018af8 <_close_r>
	...

08018890 <__swbuf_r>:
 8018890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018892:	460e      	mov	r6, r1
 8018894:	4614      	mov	r4, r2
 8018896:	4605      	mov	r5, r0
 8018898:	b118      	cbz	r0, 80188a2 <__swbuf_r+0x12>
 801889a:	6983      	ldr	r3, [r0, #24]
 801889c:	b90b      	cbnz	r3, 80188a2 <__swbuf_r+0x12>
 801889e:	f7ff fa29 	bl	8017cf4 <__sinit>
 80188a2:	4b21      	ldr	r3, [pc, #132]	; (8018928 <__swbuf_r+0x98>)
 80188a4:	429c      	cmp	r4, r3
 80188a6:	d12b      	bne.n	8018900 <__swbuf_r+0x70>
 80188a8:	686c      	ldr	r4, [r5, #4]
 80188aa:	69a3      	ldr	r3, [r4, #24]
 80188ac:	60a3      	str	r3, [r4, #8]
 80188ae:	89a3      	ldrh	r3, [r4, #12]
 80188b0:	071a      	lsls	r2, r3, #28
 80188b2:	d52f      	bpl.n	8018914 <__swbuf_r+0x84>
 80188b4:	6923      	ldr	r3, [r4, #16]
 80188b6:	b36b      	cbz	r3, 8018914 <__swbuf_r+0x84>
 80188b8:	6923      	ldr	r3, [r4, #16]
 80188ba:	6820      	ldr	r0, [r4, #0]
 80188bc:	1ac0      	subs	r0, r0, r3
 80188be:	6963      	ldr	r3, [r4, #20]
 80188c0:	b2f6      	uxtb	r6, r6
 80188c2:	4283      	cmp	r3, r0
 80188c4:	4637      	mov	r7, r6
 80188c6:	dc04      	bgt.n	80188d2 <__swbuf_r+0x42>
 80188c8:	4621      	mov	r1, r4
 80188ca:	4628      	mov	r0, r5
 80188cc:	f000 f9aa 	bl	8018c24 <_fflush_r>
 80188d0:	bb30      	cbnz	r0, 8018920 <__swbuf_r+0x90>
 80188d2:	68a3      	ldr	r3, [r4, #8]
 80188d4:	3b01      	subs	r3, #1
 80188d6:	60a3      	str	r3, [r4, #8]
 80188d8:	6823      	ldr	r3, [r4, #0]
 80188da:	1c5a      	adds	r2, r3, #1
 80188dc:	6022      	str	r2, [r4, #0]
 80188de:	701e      	strb	r6, [r3, #0]
 80188e0:	6963      	ldr	r3, [r4, #20]
 80188e2:	3001      	adds	r0, #1
 80188e4:	4283      	cmp	r3, r0
 80188e6:	d004      	beq.n	80188f2 <__swbuf_r+0x62>
 80188e8:	89a3      	ldrh	r3, [r4, #12]
 80188ea:	07db      	lsls	r3, r3, #31
 80188ec:	d506      	bpl.n	80188fc <__swbuf_r+0x6c>
 80188ee:	2e0a      	cmp	r6, #10
 80188f0:	d104      	bne.n	80188fc <__swbuf_r+0x6c>
 80188f2:	4621      	mov	r1, r4
 80188f4:	4628      	mov	r0, r5
 80188f6:	f000 f995 	bl	8018c24 <_fflush_r>
 80188fa:	b988      	cbnz	r0, 8018920 <__swbuf_r+0x90>
 80188fc:	4638      	mov	r0, r7
 80188fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018900:	4b0a      	ldr	r3, [pc, #40]	; (801892c <__swbuf_r+0x9c>)
 8018902:	429c      	cmp	r4, r3
 8018904:	d101      	bne.n	801890a <__swbuf_r+0x7a>
 8018906:	68ac      	ldr	r4, [r5, #8]
 8018908:	e7cf      	b.n	80188aa <__swbuf_r+0x1a>
 801890a:	4b09      	ldr	r3, [pc, #36]	; (8018930 <__swbuf_r+0xa0>)
 801890c:	429c      	cmp	r4, r3
 801890e:	bf08      	it	eq
 8018910:	68ec      	ldreq	r4, [r5, #12]
 8018912:	e7ca      	b.n	80188aa <__swbuf_r+0x1a>
 8018914:	4621      	mov	r1, r4
 8018916:	4628      	mov	r0, r5
 8018918:	f000 f81e 	bl	8018958 <__swsetup_r>
 801891c:	2800      	cmp	r0, #0
 801891e:	d0cb      	beq.n	80188b8 <__swbuf_r+0x28>
 8018920:	f04f 37ff 	mov.w	r7, #4294967295
 8018924:	e7ea      	b.n	80188fc <__swbuf_r+0x6c>
 8018926:	bf00      	nop
 8018928:	0801a67c 	.word	0x0801a67c
 801892c:	0801a69c 	.word	0x0801a69c
 8018930:	0801a65c 	.word	0x0801a65c

08018934 <_write_r>:
 8018934:	b538      	push	{r3, r4, r5, lr}
 8018936:	4d07      	ldr	r5, [pc, #28]	; (8018954 <_write_r+0x20>)
 8018938:	4604      	mov	r4, r0
 801893a:	4608      	mov	r0, r1
 801893c:	4611      	mov	r1, r2
 801893e:	2200      	movs	r2, #0
 8018940:	602a      	str	r2, [r5, #0]
 8018942:	461a      	mov	r2, r3
 8018944:	f7e9 fc7e 	bl	8002244 <_write>
 8018948:	1c43      	adds	r3, r0, #1
 801894a:	d102      	bne.n	8018952 <_write_r+0x1e>
 801894c:	682b      	ldr	r3, [r5, #0]
 801894e:	b103      	cbz	r3, 8018952 <_write_r+0x1e>
 8018950:	6023      	str	r3, [r4, #0]
 8018952:	bd38      	pop	{r3, r4, r5, pc}
 8018954:	2400aff4 	.word	0x2400aff4

08018958 <__swsetup_r>:
 8018958:	4b32      	ldr	r3, [pc, #200]	; (8018a24 <__swsetup_r+0xcc>)
 801895a:	b570      	push	{r4, r5, r6, lr}
 801895c:	681d      	ldr	r5, [r3, #0]
 801895e:	4606      	mov	r6, r0
 8018960:	460c      	mov	r4, r1
 8018962:	b125      	cbz	r5, 801896e <__swsetup_r+0x16>
 8018964:	69ab      	ldr	r3, [r5, #24]
 8018966:	b913      	cbnz	r3, 801896e <__swsetup_r+0x16>
 8018968:	4628      	mov	r0, r5
 801896a:	f7ff f9c3 	bl	8017cf4 <__sinit>
 801896e:	4b2e      	ldr	r3, [pc, #184]	; (8018a28 <__swsetup_r+0xd0>)
 8018970:	429c      	cmp	r4, r3
 8018972:	d10f      	bne.n	8018994 <__swsetup_r+0x3c>
 8018974:	686c      	ldr	r4, [r5, #4]
 8018976:	89a3      	ldrh	r3, [r4, #12]
 8018978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801897c:	0719      	lsls	r1, r3, #28
 801897e:	d42c      	bmi.n	80189da <__swsetup_r+0x82>
 8018980:	06dd      	lsls	r5, r3, #27
 8018982:	d411      	bmi.n	80189a8 <__swsetup_r+0x50>
 8018984:	2309      	movs	r3, #9
 8018986:	6033      	str	r3, [r6, #0]
 8018988:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801898c:	81a3      	strh	r3, [r4, #12]
 801898e:	f04f 30ff 	mov.w	r0, #4294967295
 8018992:	e03e      	b.n	8018a12 <__swsetup_r+0xba>
 8018994:	4b25      	ldr	r3, [pc, #148]	; (8018a2c <__swsetup_r+0xd4>)
 8018996:	429c      	cmp	r4, r3
 8018998:	d101      	bne.n	801899e <__swsetup_r+0x46>
 801899a:	68ac      	ldr	r4, [r5, #8]
 801899c:	e7eb      	b.n	8018976 <__swsetup_r+0x1e>
 801899e:	4b24      	ldr	r3, [pc, #144]	; (8018a30 <__swsetup_r+0xd8>)
 80189a0:	429c      	cmp	r4, r3
 80189a2:	bf08      	it	eq
 80189a4:	68ec      	ldreq	r4, [r5, #12]
 80189a6:	e7e6      	b.n	8018976 <__swsetup_r+0x1e>
 80189a8:	0758      	lsls	r0, r3, #29
 80189aa:	d512      	bpl.n	80189d2 <__swsetup_r+0x7a>
 80189ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189ae:	b141      	cbz	r1, 80189c2 <__swsetup_r+0x6a>
 80189b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189b4:	4299      	cmp	r1, r3
 80189b6:	d002      	beq.n	80189be <__swsetup_r+0x66>
 80189b8:	4630      	mov	r0, r6
 80189ba:	f7ff fa99 	bl	8017ef0 <_free_r>
 80189be:	2300      	movs	r3, #0
 80189c0:	6363      	str	r3, [r4, #52]	; 0x34
 80189c2:	89a3      	ldrh	r3, [r4, #12]
 80189c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80189c8:	81a3      	strh	r3, [r4, #12]
 80189ca:	2300      	movs	r3, #0
 80189cc:	6063      	str	r3, [r4, #4]
 80189ce:	6923      	ldr	r3, [r4, #16]
 80189d0:	6023      	str	r3, [r4, #0]
 80189d2:	89a3      	ldrh	r3, [r4, #12]
 80189d4:	f043 0308 	orr.w	r3, r3, #8
 80189d8:	81a3      	strh	r3, [r4, #12]
 80189da:	6923      	ldr	r3, [r4, #16]
 80189dc:	b94b      	cbnz	r3, 80189f2 <__swsetup_r+0x9a>
 80189de:	89a3      	ldrh	r3, [r4, #12]
 80189e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80189e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80189e8:	d003      	beq.n	80189f2 <__swsetup_r+0x9a>
 80189ea:	4621      	mov	r1, r4
 80189ec:	4630      	mov	r0, r6
 80189ee:	f000 f98d 	bl	8018d0c <__smakebuf_r>
 80189f2:	89a0      	ldrh	r0, [r4, #12]
 80189f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80189f8:	f010 0301 	ands.w	r3, r0, #1
 80189fc:	d00a      	beq.n	8018a14 <__swsetup_r+0xbc>
 80189fe:	2300      	movs	r3, #0
 8018a00:	60a3      	str	r3, [r4, #8]
 8018a02:	6963      	ldr	r3, [r4, #20]
 8018a04:	425b      	negs	r3, r3
 8018a06:	61a3      	str	r3, [r4, #24]
 8018a08:	6923      	ldr	r3, [r4, #16]
 8018a0a:	b943      	cbnz	r3, 8018a1e <__swsetup_r+0xc6>
 8018a0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018a10:	d1ba      	bne.n	8018988 <__swsetup_r+0x30>
 8018a12:	bd70      	pop	{r4, r5, r6, pc}
 8018a14:	0781      	lsls	r1, r0, #30
 8018a16:	bf58      	it	pl
 8018a18:	6963      	ldrpl	r3, [r4, #20]
 8018a1a:	60a3      	str	r3, [r4, #8]
 8018a1c:	e7f4      	b.n	8018a08 <__swsetup_r+0xb0>
 8018a1e:	2000      	movs	r0, #0
 8018a20:	e7f7      	b.n	8018a12 <__swsetup_r+0xba>
 8018a22:	bf00      	nop
 8018a24:	240000a8 	.word	0x240000a8
 8018a28:	0801a67c 	.word	0x0801a67c
 8018a2c:	0801a69c 	.word	0x0801a69c
 8018a30:	0801a65c 	.word	0x0801a65c

08018a34 <__register_exitproc>:
 8018a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a38:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8018af4 <__register_exitproc+0xc0>
 8018a3c:	4606      	mov	r6, r0
 8018a3e:	f8d8 0000 	ldr.w	r0, [r8]
 8018a42:	461f      	mov	r7, r3
 8018a44:	460d      	mov	r5, r1
 8018a46:	4691      	mov	r9, r2
 8018a48:	f7ff fa29 	bl	8017e9e <__retarget_lock_acquire_recursive>
 8018a4c:	4b25      	ldr	r3, [pc, #148]	; (8018ae4 <__register_exitproc+0xb0>)
 8018a4e:	681c      	ldr	r4, [r3, #0]
 8018a50:	b934      	cbnz	r4, 8018a60 <__register_exitproc+0x2c>
 8018a52:	4c25      	ldr	r4, [pc, #148]	; (8018ae8 <__register_exitproc+0xb4>)
 8018a54:	601c      	str	r4, [r3, #0]
 8018a56:	4b25      	ldr	r3, [pc, #148]	; (8018aec <__register_exitproc+0xb8>)
 8018a58:	b113      	cbz	r3, 8018a60 <__register_exitproc+0x2c>
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8018a60:	6863      	ldr	r3, [r4, #4]
 8018a62:	2b1f      	cmp	r3, #31
 8018a64:	dd07      	ble.n	8018a76 <__register_exitproc+0x42>
 8018a66:	f8d8 0000 	ldr.w	r0, [r8]
 8018a6a:	f7ff fa1a 	bl	8017ea2 <__retarget_lock_release_recursive>
 8018a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a76:	b34e      	cbz	r6, 8018acc <__register_exitproc+0x98>
 8018a78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8018a7c:	b988      	cbnz	r0, 8018aa2 <__register_exitproc+0x6e>
 8018a7e:	4b1c      	ldr	r3, [pc, #112]	; (8018af0 <__register_exitproc+0xbc>)
 8018a80:	b923      	cbnz	r3, 8018a8c <__register_exitproc+0x58>
 8018a82:	f8d8 0000 	ldr.w	r0, [r8]
 8018a86:	f7ff fa0b 	bl	8017ea0 <__retarget_lock_release>
 8018a8a:	e7f0      	b.n	8018a6e <__register_exitproc+0x3a>
 8018a8c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8018a90:	f7ff fa08 	bl	8017ea4 <malloc>
 8018a94:	2800      	cmp	r0, #0
 8018a96:	d0f4      	beq.n	8018a82 <__register_exitproc+0x4e>
 8018a98:	2300      	movs	r3, #0
 8018a9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8018a9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8018aa2:	6863      	ldr	r3, [r4, #4]
 8018aa4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8018aa8:	2201      	movs	r2, #1
 8018aaa:	409a      	lsls	r2, r3
 8018aac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8018ab0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8018ab4:	4313      	orrs	r3, r2
 8018ab6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8018aba:	2e02      	cmp	r6, #2
 8018abc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8018ac0:	bf02      	ittt	eq
 8018ac2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8018ac6:	4313      	orreq	r3, r2
 8018ac8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8018acc:	6863      	ldr	r3, [r4, #4]
 8018ace:	f8d8 0000 	ldr.w	r0, [r8]
 8018ad2:	1c5a      	adds	r2, r3, #1
 8018ad4:	3302      	adds	r3, #2
 8018ad6:	6062      	str	r2, [r4, #4]
 8018ad8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8018adc:	f7ff f9e1 	bl	8017ea2 <__retarget_lock_release_recursive>
 8018ae0:	2000      	movs	r0, #0
 8018ae2:	e7c6      	b.n	8018a72 <__register_exitproc+0x3e>
 8018ae4:	2400b084 	.word	0x2400b084
 8018ae8:	2400aff8 	.word	0x2400aff8
 8018aec:	0801a6f4 	.word	0x0801a6f4
 8018af0:	08017ea5 	.word	0x08017ea5
 8018af4:	2400010c 	.word	0x2400010c

08018af8 <_close_r>:
 8018af8:	b538      	push	{r3, r4, r5, lr}
 8018afa:	4d06      	ldr	r5, [pc, #24]	; (8018b14 <_close_r+0x1c>)
 8018afc:	2300      	movs	r3, #0
 8018afe:	4604      	mov	r4, r0
 8018b00:	4608      	mov	r0, r1
 8018b02:	602b      	str	r3, [r5, #0]
 8018b04:	f7e9 fbac 	bl	8002260 <_close>
 8018b08:	1c43      	adds	r3, r0, #1
 8018b0a:	d102      	bne.n	8018b12 <_close_r+0x1a>
 8018b0c:	682b      	ldr	r3, [r5, #0]
 8018b0e:	b103      	cbz	r3, 8018b12 <_close_r+0x1a>
 8018b10:	6023      	str	r3, [r4, #0]
 8018b12:	bd38      	pop	{r3, r4, r5, pc}
 8018b14:	2400aff4 	.word	0x2400aff4

08018b18 <__sflush_r>:
 8018b18:	898a      	ldrh	r2, [r1, #12]
 8018b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b1e:	4605      	mov	r5, r0
 8018b20:	0710      	lsls	r0, r2, #28
 8018b22:	460c      	mov	r4, r1
 8018b24:	d458      	bmi.n	8018bd8 <__sflush_r+0xc0>
 8018b26:	684b      	ldr	r3, [r1, #4]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	dc05      	bgt.n	8018b38 <__sflush_r+0x20>
 8018b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	dc02      	bgt.n	8018b38 <__sflush_r+0x20>
 8018b32:	2000      	movs	r0, #0
 8018b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b3a:	2e00      	cmp	r6, #0
 8018b3c:	d0f9      	beq.n	8018b32 <__sflush_r+0x1a>
 8018b3e:	2300      	movs	r3, #0
 8018b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b44:	682f      	ldr	r7, [r5, #0]
 8018b46:	602b      	str	r3, [r5, #0]
 8018b48:	d032      	beq.n	8018bb0 <__sflush_r+0x98>
 8018b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b4c:	89a3      	ldrh	r3, [r4, #12]
 8018b4e:	075a      	lsls	r2, r3, #29
 8018b50:	d505      	bpl.n	8018b5e <__sflush_r+0x46>
 8018b52:	6863      	ldr	r3, [r4, #4]
 8018b54:	1ac0      	subs	r0, r0, r3
 8018b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b58:	b10b      	cbz	r3, 8018b5e <__sflush_r+0x46>
 8018b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b5c:	1ac0      	subs	r0, r0, r3
 8018b5e:	2300      	movs	r3, #0
 8018b60:	4602      	mov	r2, r0
 8018b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b64:	6a21      	ldr	r1, [r4, #32]
 8018b66:	4628      	mov	r0, r5
 8018b68:	47b0      	blx	r6
 8018b6a:	1c43      	adds	r3, r0, #1
 8018b6c:	89a3      	ldrh	r3, [r4, #12]
 8018b6e:	d106      	bne.n	8018b7e <__sflush_r+0x66>
 8018b70:	6829      	ldr	r1, [r5, #0]
 8018b72:	291d      	cmp	r1, #29
 8018b74:	d82c      	bhi.n	8018bd0 <__sflush_r+0xb8>
 8018b76:	4a2a      	ldr	r2, [pc, #168]	; (8018c20 <__sflush_r+0x108>)
 8018b78:	40ca      	lsrs	r2, r1
 8018b7a:	07d6      	lsls	r6, r2, #31
 8018b7c:	d528      	bpl.n	8018bd0 <__sflush_r+0xb8>
 8018b7e:	2200      	movs	r2, #0
 8018b80:	6062      	str	r2, [r4, #4]
 8018b82:	04d9      	lsls	r1, r3, #19
 8018b84:	6922      	ldr	r2, [r4, #16]
 8018b86:	6022      	str	r2, [r4, #0]
 8018b88:	d504      	bpl.n	8018b94 <__sflush_r+0x7c>
 8018b8a:	1c42      	adds	r2, r0, #1
 8018b8c:	d101      	bne.n	8018b92 <__sflush_r+0x7a>
 8018b8e:	682b      	ldr	r3, [r5, #0]
 8018b90:	b903      	cbnz	r3, 8018b94 <__sflush_r+0x7c>
 8018b92:	6560      	str	r0, [r4, #84]	; 0x54
 8018b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b96:	602f      	str	r7, [r5, #0]
 8018b98:	2900      	cmp	r1, #0
 8018b9a:	d0ca      	beq.n	8018b32 <__sflush_r+0x1a>
 8018b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ba0:	4299      	cmp	r1, r3
 8018ba2:	d002      	beq.n	8018baa <__sflush_r+0x92>
 8018ba4:	4628      	mov	r0, r5
 8018ba6:	f7ff f9a3 	bl	8017ef0 <_free_r>
 8018baa:	2000      	movs	r0, #0
 8018bac:	6360      	str	r0, [r4, #52]	; 0x34
 8018bae:	e7c1      	b.n	8018b34 <__sflush_r+0x1c>
 8018bb0:	6a21      	ldr	r1, [r4, #32]
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	4628      	mov	r0, r5
 8018bb6:	47b0      	blx	r6
 8018bb8:	1c41      	adds	r1, r0, #1
 8018bba:	d1c7      	bne.n	8018b4c <__sflush_r+0x34>
 8018bbc:	682b      	ldr	r3, [r5, #0]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d0c4      	beq.n	8018b4c <__sflush_r+0x34>
 8018bc2:	2b1d      	cmp	r3, #29
 8018bc4:	d001      	beq.n	8018bca <__sflush_r+0xb2>
 8018bc6:	2b16      	cmp	r3, #22
 8018bc8:	d101      	bne.n	8018bce <__sflush_r+0xb6>
 8018bca:	602f      	str	r7, [r5, #0]
 8018bcc:	e7b1      	b.n	8018b32 <__sflush_r+0x1a>
 8018bce:	89a3      	ldrh	r3, [r4, #12]
 8018bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bd4:	81a3      	strh	r3, [r4, #12]
 8018bd6:	e7ad      	b.n	8018b34 <__sflush_r+0x1c>
 8018bd8:	690f      	ldr	r7, [r1, #16]
 8018bda:	2f00      	cmp	r7, #0
 8018bdc:	d0a9      	beq.n	8018b32 <__sflush_r+0x1a>
 8018bde:	0793      	lsls	r3, r2, #30
 8018be0:	680e      	ldr	r6, [r1, #0]
 8018be2:	bf08      	it	eq
 8018be4:	694b      	ldreq	r3, [r1, #20]
 8018be6:	600f      	str	r7, [r1, #0]
 8018be8:	bf18      	it	ne
 8018bea:	2300      	movne	r3, #0
 8018bec:	eba6 0807 	sub.w	r8, r6, r7
 8018bf0:	608b      	str	r3, [r1, #8]
 8018bf2:	f1b8 0f00 	cmp.w	r8, #0
 8018bf6:	dd9c      	ble.n	8018b32 <__sflush_r+0x1a>
 8018bf8:	6a21      	ldr	r1, [r4, #32]
 8018bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018bfc:	4643      	mov	r3, r8
 8018bfe:	463a      	mov	r2, r7
 8018c00:	4628      	mov	r0, r5
 8018c02:	47b0      	blx	r6
 8018c04:	2800      	cmp	r0, #0
 8018c06:	dc06      	bgt.n	8018c16 <__sflush_r+0xfe>
 8018c08:	89a3      	ldrh	r3, [r4, #12]
 8018c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c0e:	81a3      	strh	r3, [r4, #12]
 8018c10:	f04f 30ff 	mov.w	r0, #4294967295
 8018c14:	e78e      	b.n	8018b34 <__sflush_r+0x1c>
 8018c16:	4407      	add	r7, r0
 8018c18:	eba8 0800 	sub.w	r8, r8, r0
 8018c1c:	e7e9      	b.n	8018bf2 <__sflush_r+0xda>
 8018c1e:	bf00      	nop
 8018c20:	20400001 	.word	0x20400001

08018c24 <_fflush_r>:
 8018c24:	b538      	push	{r3, r4, r5, lr}
 8018c26:	690b      	ldr	r3, [r1, #16]
 8018c28:	4605      	mov	r5, r0
 8018c2a:	460c      	mov	r4, r1
 8018c2c:	b913      	cbnz	r3, 8018c34 <_fflush_r+0x10>
 8018c2e:	2500      	movs	r5, #0
 8018c30:	4628      	mov	r0, r5
 8018c32:	bd38      	pop	{r3, r4, r5, pc}
 8018c34:	b118      	cbz	r0, 8018c3e <_fflush_r+0x1a>
 8018c36:	6983      	ldr	r3, [r0, #24]
 8018c38:	b90b      	cbnz	r3, 8018c3e <_fflush_r+0x1a>
 8018c3a:	f7ff f85b 	bl	8017cf4 <__sinit>
 8018c3e:	4b14      	ldr	r3, [pc, #80]	; (8018c90 <_fflush_r+0x6c>)
 8018c40:	429c      	cmp	r4, r3
 8018c42:	d11b      	bne.n	8018c7c <_fflush_r+0x58>
 8018c44:	686c      	ldr	r4, [r5, #4]
 8018c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d0ef      	beq.n	8018c2e <_fflush_r+0xa>
 8018c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c50:	07d0      	lsls	r0, r2, #31
 8018c52:	d404      	bmi.n	8018c5e <_fflush_r+0x3a>
 8018c54:	0599      	lsls	r1, r3, #22
 8018c56:	d402      	bmi.n	8018c5e <_fflush_r+0x3a>
 8018c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c5a:	f7ff f920 	bl	8017e9e <__retarget_lock_acquire_recursive>
 8018c5e:	4628      	mov	r0, r5
 8018c60:	4621      	mov	r1, r4
 8018c62:	f7ff ff59 	bl	8018b18 <__sflush_r>
 8018c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c68:	07da      	lsls	r2, r3, #31
 8018c6a:	4605      	mov	r5, r0
 8018c6c:	d4e0      	bmi.n	8018c30 <_fflush_r+0xc>
 8018c6e:	89a3      	ldrh	r3, [r4, #12]
 8018c70:	059b      	lsls	r3, r3, #22
 8018c72:	d4dd      	bmi.n	8018c30 <_fflush_r+0xc>
 8018c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c76:	f7ff f914 	bl	8017ea2 <__retarget_lock_release_recursive>
 8018c7a:	e7d9      	b.n	8018c30 <_fflush_r+0xc>
 8018c7c:	4b05      	ldr	r3, [pc, #20]	; (8018c94 <_fflush_r+0x70>)
 8018c7e:	429c      	cmp	r4, r3
 8018c80:	d101      	bne.n	8018c86 <_fflush_r+0x62>
 8018c82:	68ac      	ldr	r4, [r5, #8]
 8018c84:	e7df      	b.n	8018c46 <_fflush_r+0x22>
 8018c86:	4b04      	ldr	r3, [pc, #16]	; (8018c98 <_fflush_r+0x74>)
 8018c88:	429c      	cmp	r4, r3
 8018c8a:	bf08      	it	eq
 8018c8c:	68ec      	ldreq	r4, [r5, #12]
 8018c8e:	e7da      	b.n	8018c46 <_fflush_r+0x22>
 8018c90:	0801a67c 	.word	0x0801a67c
 8018c94:	0801a69c 	.word	0x0801a69c
 8018c98:	0801a65c 	.word	0x0801a65c

08018c9c <_lseek_r>:
 8018c9c:	b538      	push	{r3, r4, r5, lr}
 8018c9e:	4d07      	ldr	r5, [pc, #28]	; (8018cbc <_lseek_r+0x20>)
 8018ca0:	4604      	mov	r4, r0
 8018ca2:	4608      	mov	r0, r1
 8018ca4:	4611      	mov	r1, r2
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	602a      	str	r2, [r5, #0]
 8018caa:	461a      	mov	r2, r3
 8018cac:	f7e9 fae2 	bl	8002274 <_lseek>
 8018cb0:	1c43      	adds	r3, r0, #1
 8018cb2:	d102      	bne.n	8018cba <_lseek_r+0x1e>
 8018cb4:	682b      	ldr	r3, [r5, #0]
 8018cb6:	b103      	cbz	r3, 8018cba <_lseek_r+0x1e>
 8018cb8:	6023      	str	r3, [r4, #0]
 8018cba:	bd38      	pop	{r3, r4, r5, pc}
 8018cbc:	2400aff4 	.word	0x2400aff4

08018cc0 <__swhatbuf_r>:
 8018cc0:	b570      	push	{r4, r5, r6, lr}
 8018cc2:	460e      	mov	r6, r1
 8018cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cc8:	2900      	cmp	r1, #0
 8018cca:	b096      	sub	sp, #88	; 0x58
 8018ccc:	4614      	mov	r4, r2
 8018cce:	461d      	mov	r5, r3
 8018cd0:	da08      	bge.n	8018ce4 <__swhatbuf_r+0x24>
 8018cd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	602a      	str	r2, [r5, #0]
 8018cda:	061a      	lsls	r2, r3, #24
 8018cdc:	d410      	bmi.n	8018d00 <__swhatbuf_r+0x40>
 8018cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ce2:	e00e      	b.n	8018d02 <__swhatbuf_r+0x42>
 8018ce4:	466a      	mov	r2, sp
 8018ce6:	f000 f86f 	bl	8018dc8 <_fstat_r>
 8018cea:	2800      	cmp	r0, #0
 8018cec:	dbf1      	blt.n	8018cd2 <__swhatbuf_r+0x12>
 8018cee:	9a01      	ldr	r2, [sp, #4]
 8018cf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018cf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018cf8:	425a      	negs	r2, r3
 8018cfa:	415a      	adcs	r2, r3
 8018cfc:	602a      	str	r2, [r5, #0]
 8018cfe:	e7ee      	b.n	8018cde <__swhatbuf_r+0x1e>
 8018d00:	2340      	movs	r3, #64	; 0x40
 8018d02:	2000      	movs	r0, #0
 8018d04:	6023      	str	r3, [r4, #0]
 8018d06:	b016      	add	sp, #88	; 0x58
 8018d08:	bd70      	pop	{r4, r5, r6, pc}
	...

08018d0c <__smakebuf_r>:
 8018d0c:	898b      	ldrh	r3, [r1, #12]
 8018d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d10:	079d      	lsls	r5, r3, #30
 8018d12:	4606      	mov	r6, r0
 8018d14:	460c      	mov	r4, r1
 8018d16:	d507      	bpl.n	8018d28 <__smakebuf_r+0x1c>
 8018d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018d1c:	6023      	str	r3, [r4, #0]
 8018d1e:	6123      	str	r3, [r4, #16]
 8018d20:	2301      	movs	r3, #1
 8018d22:	6163      	str	r3, [r4, #20]
 8018d24:	b002      	add	sp, #8
 8018d26:	bd70      	pop	{r4, r5, r6, pc}
 8018d28:	ab01      	add	r3, sp, #4
 8018d2a:	466a      	mov	r2, sp
 8018d2c:	f7ff ffc8 	bl	8018cc0 <__swhatbuf_r>
 8018d30:	9900      	ldr	r1, [sp, #0]
 8018d32:	4605      	mov	r5, r0
 8018d34:	4630      	mov	r0, r6
 8018d36:	f7ff f947 	bl	8017fc8 <_malloc_r>
 8018d3a:	b948      	cbnz	r0, 8018d50 <__smakebuf_r+0x44>
 8018d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d40:	059a      	lsls	r2, r3, #22
 8018d42:	d4ef      	bmi.n	8018d24 <__smakebuf_r+0x18>
 8018d44:	f023 0303 	bic.w	r3, r3, #3
 8018d48:	f043 0302 	orr.w	r3, r3, #2
 8018d4c:	81a3      	strh	r3, [r4, #12]
 8018d4e:	e7e3      	b.n	8018d18 <__smakebuf_r+0xc>
 8018d50:	4b0d      	ldr	r3, [pc, #52]	; (8018d88 <__smakebuf_r+0x7c>)
 8018d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8018d54:	89a3      	ldrh	r3, [r4, #12]
 8018d56:	6020      	str	r0, [r4, #0]
 8018d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d5c:	81a3      	strh	r3, [r4, #12]
 8018d5e:	9b00      	ldr	r3, [sp, #0]
 8018d60:	6163      	str	r3, [r4, #20]
 8018d62:	9b01      	ldr	r3, [sp, #4]
 8018d64:	6120      	str	r0, [r4, #16]
 8018d66:	b15b      	cbz	r3, 8018d80 <__smakebuf_r+0x74>
 8018d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	f000 f83d 	bl	8018dec <_isatty_r>
 8018d72:	b128      	cbz	r0, 8018d80 <__smakebuf_r+0x74>
 8018d74:	89a3      	ldrh	r3, [r4, #12]
 8018d76:	f023 0303 	bic.w	r3, r3, #3
 8018d7a:	f043 0301 	orr.w	r3, r3, #1
 8018d7e:	81a3      	strh	r3, [r4, #12]
 8018d80:	89a0      	ldrh	r0, [r4, #12]
 8018d82:	4305      	orrs	r5, r0
 8018d84:	81a5      	strh	r5, [r4, #12]
 8018d86:	e7cd      	b.n	8018d24 <__smakebuf_r+0x18>
 8018d88:	08017c8d 	.word	0x08017c8d

08018d8c <__malloc_lock>:
 8018d8c:	4801      	ldr	r0, [pc, #4]	; (8018d94 <__malloc_lock+0x8>)
 8018d8e:	f7ff b886 	b.w	8017e9e <__retarget_lock_acquire_recursive>
 8018d92:	bf00      	nop
 8018d94:	2400aee1 	.word	0x2400aee1

08018d98 <__malloc_unlock>:
 8018d98:	4801      	ldr	r0, [pc, #4]	; (8018da0 <__malloc_unlock+0x8>)
 8018d9a:	f7ff b882 	b.w	8017ea2 <__retarget_lock_release_recursive>
 8018d9e:	bf00      	nop
 8018da0:	2400aee1 	.word	0x2400aee1

08018da4 <_read_r>:
 8018da4:	b538      	push	{r3, r4, r5, lr}
 8018da6:	4d07      	ldr	r5, [pc, #28]	; (8018dc4 <_read_r+0x20>)
 8018da8:	4604      	mov	r4, r0
 8018daa:	4608      	mov	r0, r1
 8018dac:	4611      	mov	r1, r2
 8018dae:	2200      	movs	r2, #0
 8018db0:	602a      	str	r2, [r5, #0]
 8018db2:	461a      	mov	r2, r3
 8018db4:	f7e9 fa36 	bl	8002224 <_read>
 8018db8:	1c43      	adds	r3, r0, #1
 8018dba:	d102      	bne.n	8018dc2 <_read_r+0x1e>
 8018dbc:	682b      	ldr	r3, [r5, #0]
 8018dbe:	b103      	cbz	r3, 8018dc2 <_read_r+0x1e>
 8018dc0:	6023      	str	r3, [r4, #0]
 8018dc2:	bd38      	pop	{r3, r4, r5, pc}
 8018dc4:	2400aff4 	.word	0x2400aff4

08018dc8 <_fstat_r>:
 8018dc8:	b538      	push	{r3, r4, r5, lr}
 8018dca:	4d07      	ldr	r5, [pc, #28]	; (8018de8 <_fstat_r+0x20>)
 8018dcc:	2300      	movs	r3, #0
 8018dce:	4604      	mov	r4, r0
 8018dd0:	4608      	mov	r0, r1
 8018dd2:	4611      	mov	r1, r2
 8018dd4:	602b      	str	r3, [r5, #0]
 8018dd6:	f7e9 fa46 	bl	8002266 <_fstat>
 8018dda:	1c43      	adds	r3, r0, #1
 8018ddc:	d102      	bne.n	8018de4 <_fstat_r+0x1c>
 8018dde:	682b      	ldr	r3, [r5, #0]
 8018de0:	b103      	cbz	r3, 8018de4 <_fstat_r+0x1c>
 8018de2:	6023      	str	r3, [r4, #0]
 8018de4:	bd38      	pop	{r3, r4, r5, pc}
 8018de6:	bf00      	nop
 8018de8:	2400aff4 	.word	0x2400aff4

08018dec <_isatty_r>:
 8018dec:	b538      	push	{r3, r4, r5, lr}
 8018dee:	4d06      	ldr	r5, [pc, #24]	; (8018e08 <_isatty_r+0x1c>)
 8018df0:	2300      	movs	r3, #0
 8018df2:	4604      	mov	r4, r0
 8018df4:	4608      	mov	r0, r1
 8018df6:	602b      	str	r3, [r5, #0]
 8018df8:	f7e9 fa3a 	bl	8002270 <_isatty>
 8018dfc:	1c43      	adds	r3, r0, #1
 8018dfe:	d102      	bne.n	8018e06 <_isatty_r+0x1a>
 8018e00:	682b      	ldr	r3, [r5, #0]
 8018e02:	b103      	cbz	r3, 8018e06 <_isatty_r+0x1a>
 8018e04:	6023      	str	r3, [r4, #0]
 8018e06:	bd38      	pop	{r3, r4, r5, pc}
 8018e08:	2400aff4 	.word	0x2400aff4

08018e0c <_init>:
 8018e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e0e:	bf00      	nop
 8018e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e12:	bc08      	pop	{r3}
 8018e14:	469e      	mov	lr, r3
 8018e16:	4770      	bx	lr

08018e18 <_fini>:
 8018e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e1a:	bf00      	nop
 8018e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e1e:	bc08      	pop	{r3}
 8018e20:	469e      	mov	lr, r3
 8018e22:	4770      	bx	lr
