
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d778  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c18  0801da28  0801da28  0002da28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0801f640  0801f640  0002f640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f658  0801f658  0009fbb8  2**0
                  CONTENTS
  5 .ARM          00000000  0801f658  0801f658  0009fbb8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801f658  0801f658  0009fbb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0801f658  0801f658  0002f658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0801f66c  0801f66c  0002f66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000114  24000000  0801f674  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000baf0  24000114  0801f788  00030114  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400bc04  0801f788  0003bc04  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009fbb8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00040000  2**2
                  ALLOC
 14 FontFlashSection 000001a8  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000010  900001a8  900001a8  000401a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005fa00  900001b8  900001b8  000401b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0005d404  00000000  00000000  0009fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000afeda  00000000  00000000  000fcfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00012a1b  00000000  00000000  001acec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003970  00000000  00000000  001bf8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017746a  00000000  00000000  001c3250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003af8  00000000  00000000  0033a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0003778c  00000000  00000000  0033e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00040f96  00000000  00000000  00375944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  003b68da  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000af50  00000000  00000000  003b69ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000114 	.word	0x24000114
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801da10 	.word	0x0801da10

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000118 	.word	0x24000118
 80002ec:	0801da10 	.word	0x0801da10

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr  r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ea:	f006 fac9 	bl	8006980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f01c f8ef 	bl	801c5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f001 fcaf 	bl	8001d54 <main>
  bx  lr
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003fc:	0801f674 	.word	0x0801f674
  ldr  r0, =_sdata
 8000400:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000404:	24000114 	.word	0x24000114
  ldr  r2, =_sbss
 8000408:	24000114 	.word	0x24000114
  ldr  r3, = _ebss
 800040c:	2400bc04 	.word	0x2400bc04

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>

08000412 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000412:	4770      	bx	lr

08000414 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000416:	f000 ff51 	bl	80012bc <touchgfx_init>
}
 800041a:	bd08      	pop	{r3, pc}

0800041c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800041c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800041e:	f000 ffc7 	bl	80013b0 <touchgfx_taskEntry>
}
 8000422:	bd08      	pop	{r3, pc}

08000424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000426:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000428:	4a02      	ldr	r2, [pc, #8]	; (8000434 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800042a:	6002      	str	r2, [r0, #0]
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	0801da88 	.word	0x0801da88
 8000434:	0801da70 	.word	0x0801da70

08000438 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800043c:	2308      	movs	r3, #8
 800043e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000440:	2000      	movs	r0, #0
 8000442:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_ZN20STM32TouchController4initEv+0x24>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <_ZN20STM32TouchController4initEv+0x28>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000450:	4669      	mov	r1, sp
 8000452:	f006 f9a1 	bl	8006798 <BSP_TS_Init>
}
 8000456:	b005      	add	sp, #20
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	2400b97a 	.word	0x2400b97a
 8000460:	2400b97c 	.word	0x2400b97c

08000464 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	460d      	mov	r5, r1
 800046a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800046c:	2000      	movs	r0, #0
 800046e:	9001      	str	r0, [sp, #4]
 8000470:	9002      	str	r0, [sp, #8]
 8000472:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000474:	a901      	add	r1, sp, #4
 8000476:	f006 f9ff 	bl	8006878 <BSP_TS_GetState>
 800047a:	b140      	cbz	r0, 800048e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800048c:	e7fe      	b.n	800048c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	b913      	cbnz	r3, 8000498 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000492:	2000      	movs	r0, #0
}
 8000494:	b005      	add	sp, #20
 8000496:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800049c:	9b03      	ldr	r3, [sp, #12]
 800049e:	6023      	str	r3, [r4, #0]
        return true;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e7f7      	b.n	8000494 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

080004a4 <_ZN20STM32TouchControllerD0Ev>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <_ZN20STM32TouchControllerD0Ev+0x18>)
 80004aa:	6003      	str	r3, [r0, #0]
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 80004ae:	6003      	str	r3, [r0, #0]
 80004b0:	2104      	movs	r1, #4
 80004b2:	f01b ff1e 	bl	801c2f2 <_ZdlPvj>
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	0801da88 	.word	0x0801da88
 80004c0:	0801da70 	.word	0x0801da70

080004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004c4:	b508      	push	{r3, lr}
    switch (id)
 80004c6:	2803      	cmp	r0, #3
 80004c8:	d80e      	bhi.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	0e02      	.short	0x0e02
 80004d0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004e4:	f007 f867 	bl	80075b6 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004e8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f007 f85b 	bl	80075b6 <HAL_GPIO_WritePin>
        break;
 8000500:	e7f2      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8000504:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000508:	fab2 f282 	clz	r2, r2
 800050c:	0952      	lsrs	r2, r2, #5
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000514:	f007 f84f 	bl	80075b6 <HAL_GPIO_WritePin>
        break;
 8000518:	e7e6      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800051c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000520:	fab2 f282 	clz	r2, r2
 8000524:	0952      	lsrs	r2, r2, #5
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800052c:	f007 f843 	bl	80075b6 <HAL_GPIO_WritePin>
}
 8000530:	e7da      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000532:	bf00      	nop
 8000534:	24000130 	.word	0x24000130
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58022000 	.word	0x58022000

08000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000540:	b508      	push	{r3, lr}
    switch (id)
 8000542:	2803      	cmp	r0, #3
 8000544:	d80e      	bhi.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000546:	e8df f000 	tbb	[pc, r0]
 800054a:	0e02      	.short	0x0e02
 800054c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b103      	cbz	r3, 8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000556:	2001      	movs	r0, #1
 8000558:	4602      	mov	r2, r0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000560:	f007 f829 	bl	80075b6 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000564:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056c:	b903      	cbnz	r3, 8000570 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800056e:	2000      	movs	r0, #0
 8000570:	4602      	mov	r2, r0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f007 f81d 	bl	80075b6 <HAL_GPIO_WritePin>
        break;
 800057c:	e7f2      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000584:	b133      	cbz	r3, 8000594 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800058e:	f007 f812 	bl	80075b6 <HAL_GPIO_WritePin>
        break;
 8000592:	e7e7      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000594:	2200      	movs	r2, #0
 8000596:	e7f7      	b.n	8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800059a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059e:	b133      	cbz	r3, 80005ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 80005a8:	f007 f805 	bl	80075b6 <HAL_GPIO_WritePin>
}
 80005ac:	e7da      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f7      	b.n	80005a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005b2:	bf00      	nop
 80005b4:	24000130 	.word	0x24000130
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	58022000 	.word	0x58022000

080005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005c0:	b508      	push	{r3, lr}
    switch (id)
 80005c2:	2803      	cmp	r0, #3
 80005c4:	d808      	bhi.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005c6:	e8df f000 	tbb	[pc, r0]
 80005ca:	0802      	.short	0x0802
 80005cc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d4:	f006 fff5 	bl	80075c2 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e0:	f006 ffef 	bl	80075c2 <HAL_GPIO_TogglePin>
        break;
 80005e4:	e7f8      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005ec:	f006 ffe9 	bl	80075c2 <HAL_GPIO_TogglePin>
        break;
 80005f0:	e7f2      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005f8:	f006 ffe3 	bl	80075c2 <HAL_GPIO_TogglePin>
}
 80005fc:	e7ec      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005fe:	bf00      	nop
 8000600:	58021c00 	.word	0x58021c00
 8000604:	58022000 	.word	0x58022000

08000608 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8000608:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800060c:	2301      	movs	r3, #1
 800060e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000612:	4770      	bx	lr

08000614 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000614:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000616:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800061a:	b123      	cbz	r3, 8000626 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800061c:	6840      	ldr	r0, [r0, #4]
 800061e:	6803      	ldr	r3, [r0, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000624:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000626:	2000      	movs	r0, #0
 8000628:	e7fc      	b.n	8000624 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800062a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800062a:	2000      	movs	r0, #0
 800062c:	4770      	bx	lr
	...

08000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000630:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000632:	3900      	subs	r1, #0
 8000634:	bf18      	it	ne
 8000636:	2101      	movne	r1, #1
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800063a:	7019      	strb	r1, [r3, #0]
    }
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400b97f 	.word	0x2400b97f

08000644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000644:	2000      	movs	r0, #0
 8000646:	4770      	bx	lr

08000648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000648:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800064c:	b10b      	cbz	r3, 8000652 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800064e:	4608      	mov	r0, r1
 8000650:	4798      	blx	r3
        }
    }
 8000652:	bd08      	pop	{r3, pc}

08000654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000658:	4770      	bx	lr

0800065a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800065a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800065c:	6840      	ldr	r0, [r0, #4]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4798      	blx	r3
    }
 8000664:	bd08      	pop	{r3, pc}
	...

08000668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800066c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000670:	429a      	cmp	r2, r3
 8000672:	d00c      	beq.n	800068e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b9ab      	cbnz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800067c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000684:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b143      	cbz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000696:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800069a:	8818      	ldrh	r0, [r3, #0]
 800069c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800069e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
        }
    }
 80006a6:	4770      	bx	lr
 80006a8:	2400b978 	.word	0x2400b978
 80006ac:	2400b976 	.word	0x2400b976
 80006b0:	2400b974 	.word	0x2400b974

080006b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006b6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006ba:	6002      	str	r2, [r0, #0]
    {
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006be:	6002      	str	r2, [r0, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	0801dc18 	.word	0x0801dc18
 80006c8:	0801e218 	.word	0x0801e218
 80006cc:	0801ef94 	.word	0x0801ef94

080006d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006d0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006d2:	f000 fffd 	bl	80016d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006d6:	bd08      	pop	{r3, pc}

080006d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006d8:	b508      	push	{r3, lr}
 80006da:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e2:	4798      	blx	r3
    enableInterrupts();
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006e8:	4620      	mov	r0, r4
 80006ea:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006ec:	f000 f920 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f4:	4620      	mov	r0, r4
 80006f6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006fe:	f006 ff5a 	bl	80075b6 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4628      	mov	r0, r5
 800070a:	f006 ff54 	bl	80075b6 <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f006 f9b4 	bl	8006a7c <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2102      	movs	r1, #2
 8000718:	4628      	mov	r0, r5
 800071a:	f006 ff4c 	bl	80075b6 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800071e:	f000 f907 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000726:	4620      	mov	r0, r4
 8000728:	4798      	blx	r3
    for (;;)
 800072a:	e7f8      	b.n	800071e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800072c:	58022800 	.word	0x58022800
 8000730:	58020000 	.word	0x58020000

08000734 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000734:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000736:	f000 ff57 	bl	80015e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800073a:	bd08      	pop	{r3, pc}

0800073c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800073c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800073e:	f000 ff59 	bl	80015f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000744:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000746:	f000 ffeb 	bl	8001720 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075e:	e000      	b.n	8000762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000760:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000766:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800076e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000774:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000778:	4613      	mov	r3, r2
 800077a:	3a01      	subs	r2, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	2800      	cmp	r0, #0
 8000784:	d1ec      	bne.n	8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000796:	f000 fee5 	bl	8001564 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800079e:	f000 feeb 	bl	8001578 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80007a4:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80007a6:	f000 fef1 	bl	800158c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80007aa:	bd08      	pop	{r3, pc}

080007ac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80007ac:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80007ae:	f000 ff01 	bl	80015b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007b4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007b6:	b161      	cbz	r1, 80007d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007ba:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007bc:	3a00      	subs	r2, #0
 80007be:	bf18      	it	ne
 80007c0:	2201      	movne	r2, #1
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007c4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007c6:	6802      	ldr	r2, [r0, #0]
 80007c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4790      	blx	r2
    }
 80007d0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007dc:	f01b fdb8 	bl	801c350 <__assert_func>
 80007e0:	2400b97e 	.word	0x2400b97e
 80007e4:	0801da98 	.word	0x0801da98
 80007e8:	0801dad0 	.word	0x0801dad0
 80007ec:	0801db20 	.word	0x0801db20

080007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d808      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000804:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000808:	801a      	strh	r2, [r3, #0]
    }
 800080a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000810:	219e      	movs	r1, #158	; 0x9e
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000814:	f01b fd9c 	bl	801c350 <__assert_func>
 8000818:	2400b974 	.word	0x2400b974
 800081c:	2400b976 	.word	0x2400b976
 8000820:	2400b97a 	.word	0x2400b97a
 8000824:	2400b97c 	.word	0x2400b97c
 8000828:	0801db68 	.word	0x0801db68
 800082c:	0801dbcc 	.word	0x0801dbcc
 8000830:	0801db20 	.word	0x0801db20

08000834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000838:	f00f fd88 	bl	801034c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
    }
 8000846:	bd10      	pop	{r4, pc}

08000848 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000848:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800084a:	f00e ffcb 	bl	800f7e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800084e:	bd08      	pop	{r3, pc}

08000850 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000856:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN11TouchGFXHALD0Ev+0x20>)
 800085a:	6003      	str	r3, [r0, #0]
    {
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_ZN11TouchGFXHALD0Ev+0x24>)
 800085e:	6003      	str	r3, [r0, #0]
 8000860:	217c      	movs	r1, #124	; 0x7c
 8000862:	f01b fd46 	bl	801c2f2 <_ZdlPvj>
 8000866:	4620      	mov	r0, r4
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	0801dc18 	.word	0x0801dc18
 8000870:	0801e218 	.word	0x0801e218
 8000874:	0801ef94 	.word	0x0801ef94

08000878 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000878:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4608      	mov	r0, r1
 8000880:	f00b f80e 	bl	800b8a0 <osSemaphoreNew>
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000888:	b140      	cbz	r0, 800089c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f00b f8c5 	bl	800ba1e <osMessageQueueNew>
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000896:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	b130      	cbz	r0, 80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800089a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a4:	f01b fd54 	bl	801c350 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008ac:	212c      	movs	r1, #44	; 0x2c
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008b0:	f01b fd4e 	bl	801c350 <__assert_func>
 80008b4:	24000144 	.word	0x24000144
 80008b8:	24000140 	.word	0x24000140
 80008bc:	0801dce8 	.word	0x0801dce8
 80008c0:	0801dd34 	.word	0x0801dd34
 80008c4:	0801dd64 	.word	0x0801dd64
 80008c8:	0801ddc4 	.word	0x0801ddc4

080008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008cc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f00b f83f 	bl	800b958 <osSemaphoreAcquire>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000144 	.word	0x24000144

080008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f00b f86b 	bl	800b9c0 <osSemaphoreRelease>
}
 80008ea:	bd08      	pop	{r3, pc}
 80008ec:	24000144 	.word	0x24000144

080008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008f0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f00b f82e 	bl	800b958 <osSemaphoreAcquire>
}
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	24000144 	.word	0x24000144

08000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000904:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f00b f859 	bl	800b9c0 <osSemaphoreRelease>
}
 800090e:	bd08      	pop	{r3, pc}
 8000910:	24000144 	.word	0x24000144

08000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000914:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4903      	ldr	r1, [pc, #12]	; (8000928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	f00b f8c9 	bl	800bab6 <osMessageQueuePut>
}
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	24000004 	.word	0x24000004
 800092c:	24000140 	.word	0x24000140

08000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000934:	4c07      	ldr	r4, [pc, #28]	; (8000954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000936:	2300      	movs	r3, #0
 8000938:	461a      	mov	r2, r3
 800093a:	a901      	add	r1, sp, #4
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f00b f8fa 	bl	800bb36 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f00b f8f3 	bl	800bb36 <osMessageQueueGet>
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
 8000954:	24000140 	.word	0x24000140

08000958 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000958:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4798      	blx	r3
    }
 8000960:	bd08      	pop	{r3, pc}

08000962 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000962:	2001      	movs	r0, #1
 8000964:	4770      	bx	lr

08000966 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000966:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
    }
 800096e:	bd08      	pop	{r3, pc}

08000970 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000970:	b508      	push	{r3, lr}
        return instance;
 8000972:	4b03      	ldr	r3, [pc, #12]	; (8000980 <DMA2D_XferCpltCallback+0x10>)
 8000974:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2400b980 	.word	0x2400b980

08000984 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <_ZN8STM32DMAD1Ev+0x24>)
 8000986:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_ZN8STM32DMAD1Ev+0x28>)
 800098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800098e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000996:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_ZN8STM32DMAD1Ev+0x2c>)
 800099c:	60c2      	str	r2, [r0, #12]
    {
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_ZN8STM32DMAD1Ev+0x30>)
 80009a0:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_ZN8STM32DMAD1Ev+0x34>)
 80009a4:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80009a6:	4770      	bx	lr
 80009a8:	0801dfa4 	.word	0x0801dfa4
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	0801f0bc 	.word	0x0801f0bc
 80009b4:	0801df80 	.word	0x0801df80
 80009b8:	0801f06c 	.word	0x0801f06c

080009bc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009bc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_ZN8STM32DMA10initializeEv+0x40>)
 80009c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009e2:	f022 0210 	bic.w	r2, r2, #16
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8STM32DMA10initializeEv+0x48>)
 80009ec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	24001240 	.word	0x24001240
 8000a04:	08000971 	.word	0x08000971
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a10:	4770      	bx	lr

08000a12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
}
 8000a16:	f7ff ffb5 	bl	8000984 <_ZN8STM32DMAD1Ev>
 8000a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f01b fc67 	bl	801c2f2 <_ZdlPvj>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd10      	pop	{r4, pc}

08000a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a28:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a2a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d809      	bhi.n	8000a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a30:	e8df f003 	tbb	[pc, r3]
 8000a34:	080e1006 	.word	0x080e1006
 8000a38:	10080808 	.word	0x10080808
 8000a3c:	1010      	.short	0x1010
 8000a3e:	10          	.byte	0x10
 8000a3f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a40:	2002      	movs	r0, #2
        break;
 8000a42:	e008      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a48:	2187      	movs	r1, #135	; 0x87
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a4c:	f01b fc80 	bl	801c350 <__assert_func>
    switch (format)
 8000a50:	2000      	movs	r0, #0
 8000a52:	e000      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a54:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a58:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a5a:	8aca      	ldrh	r2, [r1, #22]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a66:	690a      	ldr	r2, [r1, #16]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a6a:	8b4a      	ldrh	r2, [r1, #26]
 8000a6c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a70:	eba2 020c 	sub.w	r2, r2, ip
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a76:	680b      	ldr	r3, [r1, #0]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d008      	beq.n	8000a8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a7e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a84:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a8a:	601a      	str	r2, [r3, #0]
    }
}
 8000a8c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a8e:	8b4a      	ldrh	r2, [r1, #26]
 8000a90:	8a8b      	ldrh	r3, [r1, #20]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a96:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a98:	8b4a      	ldrh	r2, [r1, #26]
 8000a9a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a9e:	eba2 020c 	sub.w	r2, r2, ip
 8000aa2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000aa4:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000aa6:	7f08      	ldrb	r0, [r1, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000aaa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000ab2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab4:	690a      	ldr	r2, [r1, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab8:	690a      	ldr	r2, [r1, #16]
 8000aba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e7e4      	b.n	8000a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ac2:	bf00      	nop
 8000ac4:	0801de08 	.word	0x0801de08
 8000ac8:	0801de24 	.word	0x0801de24
 8000acc:	0801de70 	.word	0x0801de70
 8000ad0:	52001000 	.word	0x52001000
 8000ad4:	00030201 	.word	0x00030201
 8000ad8:	00010009 	.word	0x00010009
 8000adc:	00020201 	.word	0x00020201

08000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ae2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ae4:	2b0b      	cmp	r3, #11
 8000ae6:	d815      	bhi.n	8000b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ae8:	e8df f003 	tbb	[pc, r3]
 8000aec:	141a1c06 	.word	0x141a1c06
 8000af0:	12141414 	.word	0x12141414
 8000af4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000afa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d820      	bhi.n	8000b42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000b00:	e8df f003 	tbb	[pc, r3]
 8000b04:	1f252712 	.word	0x1f252712
 8000b08:	1d1f1f1f 	.word	0x1d1f1f1f
 8000b0c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b10:	2005      	movs	r0, #5
        break;
 8000b12:	e7f2      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b18:	2166      	movs	r1, #102	; 0x66
 8000b1a:	4876      	ldr	r0, [pc, #472]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1c:	f01b fc18 	bl	801c350 <__assert_func>
    switch (format)
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ea      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7e8      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b28:	2402      	movs	r4, #2
    switch (format)
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d815      	bhi.n	8000b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	1c12      	.short	0x1c12
 8000b34:	1414141a 	.word	0x1414141a
 8000b38:	1c1c1c14 	.word	0x1c1c1c14
 8000b3c:	1c          	.byte	0x1c
 8000b3d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b3e:	2405      	movs	r4, #5
        break;
 8000b40:	e7f3      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b44:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b46:	2166      	movs	r1, #102	; 0x66
 8000b48:	486a      	ldr	r0, [pc, #424]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b4a:	f01b fc01 	bl	801c350 <__assert_func>
    switch (format)
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e7eb      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b52:	2401      	movs	r4, #1
 8000b54:	e7e9      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b56:	2502      	movs	r5, #2
        break;
 8000b58:	e008      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b5e:	2187      	movs	r1, #135	; 0x87
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b62:	f01b fbf5 	bl	801c350 <__assert_func>
    switch (format)
 8000b66:	2500      	movs	r5, #0
 8000b68:	e000      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b6a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b6c:	8b4a      	ldrh	r2, [r1, #26]
 8000b6e:	8a8b      	ldrh	r3, [r1, #20]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b76:	8b4a      	ldrh	r2, [r1, #26]
 8000b78:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b7c:	eba2 020c 	sub.w	r2, r2, ip
 8000b80:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b82:	8b0a      	ldrh	r2, [r1, #24]
 8000b84:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b88:	eba2 020c 	sub.w	r2, r2, ip
 8000b8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b8e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b90:	8aca      	ldrh	r2, [r1, #22]
 8000b92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9c:	690a      	ldr	r2, [r1, #16]
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000ba0:	684a      	ldr	r2, [r1, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	d036      	beq.n	8000c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000baa:	d813      	bhi.n	8000bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d07c      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d07a      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f040 8085 	bne.w	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bba:	7f0b      	ldrb	r3, [r1, #28]
 8000bbc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bc0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bc6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bca:	690a      	ldr	r2, [r1, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bd0:	601a      	str	r2, [r3, #0]
        break;
 8000bd2:	e020      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d010      	beq.n	8000bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d171      	bne.n	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be0:	7f0b      	ldrb	r3, [r1, #28]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bee:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bf8:	601a      	str	r2, [r3, #0]
        break;
 8000bfa:	e00c      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bfc:	7f0b      	ldrb	r3, [r1, #28]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000c00:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0e:	690a      	ldr	r2, [r1, #16]
 8000c10:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c18:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c1a:	7f0b      	ldrb	r3, [r1, #28]
 8000c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c26:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c28:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2a:	6908      	ldr	r0, [r1, #16]
 8000c2c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c2e:	1d10      	adds	r0, r2, #4
 8000c30:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	b18b      	cbz	r3, 8000c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d12c      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c3a:	7f0b      	ldrb	r3, [r1, #28]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d027      	beq.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c40:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c44:	69c4      	ldr	r4, [r0, #28]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c48:	4023      	ands	r3, r4
 8000c4a:	8852      	ldrh	r2, [r2, #2]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61c3      	str	r3, [r0, #28]
                break;
 8000c58:	e009      	b.n	8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c5c:	69c8      	ldr	r0, [r1, #28]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	8852      	ldrh	r2, [r2, #2]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c6a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c6c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	69d3      	ldr	r3, [r2, #28]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f013 0f20 	tst.w	r3, #32
 8000c80:	d1fa      	bne.n	8000c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c88:	b159      	cbz	r1, 8000ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7c2      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c90:	2100      	movs	r1, #0
 8000c92:	e7d6      	b.n	8000c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c98:	f240 1101 	movw	r1, #257	; 0x101
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c9e:	f01b fb57 	bl	801c350 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7b5      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000caa:	7f0b      	ldrb	r3, [r1, #28]
 8000cac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000cb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cba:	690a      	ldr	r2, [r1, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cc0:	601a      	str	r2, [r3, #0]
        break;
 8000cc2:	e7a8      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cc4:	7f0b      	ldrb	r3, [r1, #28]
 8000cc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cd2:	7f4a      	ldrb	r2, [r1, #29]
 8000cd4:	7f8b      	ldrb	r3, [r1, #30]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d003      	beq.n	8000ce2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e799      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ce4:	f240 2201 	movw	r2, #513	; 0x201
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e794      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cec:	0801de08 	.word	0x0801de08
 8000cf0:	0801ded0 	.word	0x0801ded0
 8000cf4:	0801de70 	.word	0x0801de70
 8000cf8:	0801de24 	.word	0x0801de24
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	00020201 	.word	0x00020201
 8000d04:	00020009 	.word	0x00020009
 8000d08:	0002000a 	.word	0x0002000a
 8000d0c:	ffff00ef 	.word	0xffff00ef
 8000d10:	0801df1c 	.word	0x0801df1c
 8000d14:	0801df38 	.word	0x0801df38
 8000d18:	00010201 	.word	0x00010201

08000d1c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_ZN8STM32DMAC1Ev+0x38>)
 8000d22:	f840 3b0c 	str.w	r3, [r0], #12
 8000d26:	6068      	str	r0, [r5, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	722b      	strb	r3, [r5, #8]
 8000d2c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d2e:	462c      	mov	r4, r5
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d32:	f844 3b20 	str.w	r3, [r4], #32
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f00f fc49 	bl	80105d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d3e:	235f      	movs	r3, #95	; 0x5f
 8000d40:	e003      	b.n	8000d4a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60e2      	str	r2, [r4, #12]
 8000d46:	3424      	adds	r4, #36	; 0x24
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf9      	bge.n	8000d42 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	0801f06c 	.word	0x0801f06c
 8000d58:	0801dfa4 	.word	0x0801dfa4

08000d5c <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d5e:	6003      	str	r3, [r0, #0]
    }
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	0801e008 	.word	0x0801e008

08000d68 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d68:	4770      	bx	lr

08000d6a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d6a:	4770      	bx	lr

08000d6c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d6c:	4770      	bx	lr

08000d6e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d6e:	4770      	bx	lr

08000d70 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d70:	4770      	bx	lr

08000d72 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d72:	4770      	bx	lr

08000d74 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d76:	6003      	str	r3, [r0, #0]
    }
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	0801e018 	.word	0x0801e018

08000d80 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d80:	4770      	bx	lr

08000d82 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d82:	4770      	bx	lr

08000d84 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d84:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d88:	6808      	ldr	r0, [r1, #0]
 8000d8a:	6849      	ldr	r1, [r1, #4]
 8000d8c:	c303      	stmia	r3!, {r0, r1}
    }
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d90:	b510      	push	{r4, lr}
 8000d92:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000d94:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000d98:	b158      	cbz	r0, 8000db2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4798      	blx	r3
 8000da0:	b138      	cbz	r0, 8000db2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000da2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000db2:	bd10      	pop	{r4, pc}

08000db4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000db6:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000dba:	6002      	str	r2, [r0, #0]
    {
 8000dbc:	4a03      	ldr	r2, [pc, #12]	; (8000dcc <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dbe:	6002      	str	r2, [r0, #0]
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	0801e058 	.word	0x0801e058
 8000dc8:	0801f20c 	.word	0x0801f20c
 8000dcc:	0801e018 	.word	0x0801e018

08000dd0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dd2:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000dd6:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000ddc:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000de2:	6002      	str	r2, [r0, #0]
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000de6:	6002      	str	r2, [r0, #0]
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000dea:	6002      	str	r2, [r0, #0]
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	0801e0bc 	.word	0x0801e0bc
 8000df4:	0801e0a4 	.word	0x0801e0a4
 8000df8:	0801e040 	.word	0x0801e040
 8000dfc:	0801e058 	.word	0x0801e058
 8000e00:	0801f20c 	.word	0x0801f20c
 8000e04:	0801e018 	.word	0x0801e018

08000e08 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <_ZN19FrontendApplicationD1Ev+0x24>)
 8000e0a:	6002      	str	r2, [r0, #0]
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <_ZN19FrontendApplicationD1Ev+0x28>)
 8000e0e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e12:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e18:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e1e:	6002      	str	r2, [r0, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e22:	6002      	str	r2, [r0, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e26:	6002      	str	r2, [r0, #0]
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	0801e108 	.word	0x0801e108
 8000e30:	0801e0bc 	.word	0x0801e0bc
 8000e34:	0801e0a4 	.word	0x0801e0a4
 8000e38:	0801e040 	.word	0x0801e040
 8000e3c:	0801e058 	.word	0x0801e058
 8000e40:	0801f20c 	.word	0x0801f20c
 8000e44:	0801e018 	.word	0x0801e018

08000e48 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e48:	4a02      	ldr	r2, [pc, #8]	; (8000e54 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e4a:	6002      	str	r2, [r0, #0]
    {
 8000e4c:	4a02      	ldr	r2, [pc, #8]	; (8000e58 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e4e:	6002      	str	r2, [r0, #0]
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	0801e154 	.word	0x0801e154
 8000e58:	0801e008 	.word	0x0801e008

08000e5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e5c:	4a02      	ldr	r2, [pc, #8]	; (8000e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e5e:	6002      	str	r2, [r0, #0]
    {
 8000e60:	4a02      	ldr	r2, [pc, #8]	; (8000e6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e62:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	0801e0a4 	.word	0x0801e0a4
 8000e6c:	0801e040 	.word	0x0801e040

08000e70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e70:	2001      	movs	r0, #1
 8000e72:	4770      	bx	lr

08000e74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e74:	200c      	movs	r0, #12
 8000e76:	4770      	bx	lr

08000e78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e7c:	0089      	lsls	r1, r1, #2
 8000e7e:	3108      	adds	r1, #8
    }
 8000e80:	4408      	add	r0, r1
 8000e82:	4770      	bx	lr

08000e84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e88:	0089      	lsls	r1, r1, #2
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e90:	2001      	movs	r0, #1
 8000e92:	4770      	bx	lr

08000e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e94:	2098      	movs	r0, #152	; 0x98
 8000e96:	4770      	bx	lr

08000e98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e98:	2398      	movs	r3, #152	; 0x98
 8000e9a:	fb03 f101 	mul.w	r1, r3, r1
 8000e9e:	3108      	adds	r1, #8
    }
 8000ea0:	4408      	add	r0, r1
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea4:	2398      	movs	r3, #152	; 0x98
 8000ea6:	fb03 f101 	mul.w	r1, r3, r1
 8000eaa:	3108      	adds	r1, #8
    }
 8000eac:	4408      	add	r0, r1
 8000eae:	4770      	bx	lr

08000eb0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	4770      	bx	lr

08000eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000eb4:	2010      	movs	r0, #16
 8000eb6:	4770      	bx	lr

08000eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb8:	0109      	lsls	r1, r1, #4
 8000eba:	3108      	adds	r1, #8
    }
 8000ebc:	4408      	add	r0, r1
 8000ebe:	4770      	bx	lr

08000ec0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ec0:	0109      	lsls	r1, r1, #4
 8000ec2:	3108      	adds	r1, #8
    }
 8000ec4:	4408      	add	r0, r1
 8000ec6:	4770      	bx	lr

08000ec8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000ec8:	b508      	push	{r3, lr}
 8000eca:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ecc:	6841      	ldr	r1, [r0, #4]
 8000ece:	68c2      	ldr	r2, [r0, #12]
 8000ed0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ed4:	f012 0f01 	tst.w	r2, #1
 8000ed8:	d102      	bne.n	8000ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4798      	blx	r3
    }
 8000ede:	bd08      	pop	{r3, pc}
 8000ee0:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ee4:	f851 200c 	ldr.w	r2, [r1, ip]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	58d3      	ldr	r3, [r2, r3]
 8000eec:	e7f6      	b.n	8000edc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000eee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000eee:	6843      	ldr	r3, [r0, #4]
 8000ef0:	b14b      	cbz	r3, 8000f06 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000ef2:	6883      	ldr	r3, [r0, #8]
 8000ef4:	b10b      	cbz	r3, 8000efa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4770      	bx	lr
 8000efa:	68c3      	ldr	r3, [r0, #12]
 8000efc:	f013 0f01 	tst.w	r3, #1
 8000f00:	d003      	beq.n	8000f0a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000f02:	2001      	movs	r0, #1
 8000f04:	4770      	bx	lr
 8000f06:	2000      	movs	r0, #0
 8000f08:	4770      	bx	lr
 8000f0a:	2000      	movs	r0, #0
    }
 8000f0c:	4770      	bx	lr
	...

08000f10 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f10:	b510      	push	{r4, lr}
 8000f12:	4604      	mov	r4, r0
    {
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f16:	6003      	str	r3, [r0, #0]
    }
 8000f18:	2104      	movs	r1, #4
 8000f1a:	f01b f9ea 	bl	801c2f2 <_ZdlPvj>
 8000f1e:	4620      	mov	r0, r4
 8000f20:	bd10      	pop	{r4, pc}
 8000f22:	bf00      	nop
 8000f24:	0801e018 	.word	0x0801e018

08000f28 <_ZN16FrontendHeapBaseD0Ev>:
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f2e:	6003      	str	r3, [r0, #0]
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f32:	6003      	str	r3, [r0, #0]
 8000f34:	2114      	movs	r1, #20
 8000f36:	f01b f9dc 	bl	801c2f2 <_ZdlPvj>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	bd10      	pop	{r4, pc}
 8000f3e:	bf00      	nop
 8000f40:	0801e154 	.word	0x0801e154
 8000f44:	0801e008 	.word	0x0801e008

08000f48 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	4604      	mov	r4, r0
    {
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f4e:	6003      	str	r3, [r0, #0]
    }
 8000f50:	2114      	movs	r1, #20
 8000f52:	f01b f9ce 	bl	801c2f2 <_ZdlPvj>
 8000f56:	4620      	mov	r0, r4
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0801e008 	.word	0x0801e008

08000f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f60:	b510      	push	{r4, lr}
 8000f62:	4604      	mov	r4, r0
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f66:	6003      	str	r3, [r0, #0]
    {
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f6a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	f01b f9c0 	bl	801c2f2 <_ZdlPvj>
 8000f72:	4620      	mov	r0, r4
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	bf00      	nop
 8000f78:	0801e0a4 	.word	0x0801e0a4
 8000f7c:	0801e040 	.word	0x0801e040

08000f80 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000f80:	b510      	push	{r4, lr}
 8000f82:	4604      	mov	r4, r0
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000f86:	6003      	str	r3, [r0, #0]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000f8a:	6003      	str	r3, [r0, #0]
    {
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000f8e:	6003      	str	r3, [r0, #0]
 8000f90:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f94:	f01b f9ad 	bl	801c2f2 <_ZdlPvj>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	bd10      	pop	{r4, pc}
 8000f9c:	0801e058 	.word	0x0801e058
 8000fa0:	0801f20c 	.word	0x0801f20c
 8000fa4:	0801e018 	.word	0x0801e018

08000fa8 <_ZN23FrontendApplicationBaseD0Ev>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fb2:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fb8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fbe:	6003      	str	r3, [r0, #0]
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fc2:	6003      	str	r3, [r0, #0]
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fc6:	6003      	str	r3, [r0, #0]
 8000fc8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000fcc:	f01b f991 	bl	801c2f2 <_ZdlPvj>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	bd10      	pop	{r4, pc}
 8000fd4:	0801e0bc 	.word	0x0801e0bc
 8000fd8:	0801e0a4 	.word	0x0801e0a4
 8000fdc:	0801e040 	.word	0x0801e040
 8000fe0:	0801e058 	.word	0x0801e058
 8000fe4:	0801f20c 	.word	0x0801f20c
 8000fe8:	0801e018 	.word	0x0801e018

08000fec <_ZN19FrontendApplicationD0Ev>:
 8000fec:	b510      	push	{r4, lr}
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <_ZN19FrontendApplicationD0Ev+0x30>)
 8000ff2:	6003      	str	r3, [r0, #0]
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <_ZN19FrontendApplicationD0Ev+0x34>)
 8000ff6:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <_ZN19FrontendApplicationD0Ev+0x38>)
 8000ffa:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8001000:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <_ZN19FrontendApplicationD0Ev+0x40>)
 8001006:	6003      	str	r3, [r0, #0]
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <_ZN19FrontendApplicationD0Ev+0x44>)
 800100a:	6003      	str	r3, [r0, #0]
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <_ZN19FrontendApplicationD0Ev+0x48>)
 800100e:	6003      	str	r3, [r0, #0]
 8001010:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001014:	f01b f96d 	bl	801c2f2 <_ZdlPvj>
 8001018:	4620      	mov	r0, r4
 800101a:	bd10      	pop	{r4, pc}
 800101c:	0801e108 	.word	0x0801e108
 8001020:	0801e0bc 	.word	0x0801e0bc
 8001024:	0801e0a4 	.word	0x0801e0a4
 8001028:	0801e040 	.word	0x0801e040
 800102c:	0801e058 	.word	0x0801e058
 8001030:	0801f20c 	.word	0x0801f20c
 8001034:	0801e018 	.word	0x0801e018

08001038 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001038:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 800103a:	4608      	mov	r0, r1
 800103c:	f001 ff0a 	bl	8002e54 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001040:	bd08      	pop	{r3, pc}

08001042 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8001042:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 8001044:	f001 ff06 	bl	8002e54 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001048:	bd08      	pop	{r3, pc}

0800104a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800104a:	b510      	push	{r4, lr}
 800104c:	4604      	mov	r4, r0
    {
        model.tick();
 800104e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8001052:	f002 fb8c 	bl	800376e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001056:	4620      	mov	r0, r4
 8001058:	f010 fad4 	bl	8011604 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800105c:	bd10      	pop	{r4, pc}
	...

08001060 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001066:	6003      	str	r3, [r0, #0]
 8001068:	f00e f907 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800106c:	4620      	mov	r0, r4
 800106e:	bd10      	pop	{r4, pc}
 8001070:	0801e1d0 	.word	0x0801e1d0

08001074 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001074:	b510      	push	{r4, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800107a:	6003      	str	r3, [r0, #0]
 800107c:	f00e f8fd 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001080:	2114      	movs	r1, #20
 8001082:	4620      	mov	r0, r4
 8001084:	f01b f935 	bl	801c2f2 <_ZdlPvj>
 8001088:	4620      	mov	r0, r4
 800108a:	bd10      	pop	{r4, pc}
 800108c:	0801e1d0 	.word	0x0801e1d0

08001090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001090:	b510      	push	{r4, lr}
 8001092:	4604      	mov	r4, r0
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001096:	6003      	str	r3, [r0, #0]
 8001098:	f00e f8ef 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800109c:	4620      	mov	r0, r4
 800109e:	bd10      	pop	{r4, pc}
 80010a0:	0801e19c 	.word	0x0801e19c

080010a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010aa:	6003      	str	r3, [r0, #0]
 80010ac:	f00e f8e5 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010b0:	21a0      	movs	r1, #160	; 0xa0
 80010b2:	4620      	mov	r0, r4
 80010b4:	f01b f91d 	bl	801c2f2 <_ZdlPvj>
 80010b8:	4620      	mov	r0, r4
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	0801e19c 	.word	0x0801e19c

080010c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010c0:	b510      	push	{r4, lr}
 80010c2:	4604      	mov	r4, r0
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010c6:	6003      	str	r3, [r0, #0]
 80010c8:	f00e f8d7 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010cc:	4620      	mov	r0, r4
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	0801e168 	.word	0x0801e168

080010d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010da:	6003      	str	r3, [r0, #0]
 80010dc:	f00e f8cd 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010e0:	2118      	movs	r1, #24
 80010e2:	4620      	mov	r0, r4
 80010e4:	f01b f905 	bl	801c2f2 <_ZdlPvj>
 80010e8:	4620      	mov	r0, r4
 80010ea:	bd10      	pop	{r4, pc}
 80010ec:	0801e168 	.word	0x0801e168

080010f0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80010f0:	b510      	push	{r4, lr}
 80010f2:	4604      	mov	r4, r0
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <_ZN12FrontendHeapD1Ev+0x60>)
 80010f6:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <_ZN12FrontendHeapD1Ev+0x64>)
 80010fa:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    virtual ~FrontendApplicationBase() { }
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <_ZN12FrontendHeapD1Ev+0x68>)
 8001100:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <_ZN12FrontendHeapD1Ev+0x6c>)
 8001106:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_ZN12FrontendHeapD1Ev+0x70>)
 800110c:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <_ZN12FrontendHeapD1Ev+0x74>)
 8001112:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <_ZN12FrontendHeapD1Ev+0x78>)
 8001118:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <_ZN12FrontendHeapD1Ev+0x7c>)
 800111e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_ZN12FrontendHeapD1Ev+0x80>)
 8001124:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001128:	f00e f8a7 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800112c:	4620      	mov	r0, r4
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_ZN12FrontendHeapD1Ev+0x84>)
 8001130:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001134:	f00e f8a1 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001138:	4620      	mov	r0, r4
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <_ZN12FrontendHeapD1Ev+0x88>)
 800113c:	f840 3f14 	str.w	r3, [r0, #20]!
 8001140:	f00e f89b 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <_ZN12FrontendHeapD1Ev+0x8c>)
 8001146:	6023      	str	r3, [r4, #0]
    {
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <_ZN12FrontendHeapD1Ev+0x90>)
 800114a:	6023      	str	r3, [r4, #0]
 800114c:	4620      	mov	r0, r4
 800114e:	bd10      	pop	{r4, pc}
 8001150:	0801e204 	.word	0x0801e204
 8001154:	0801e108 	.word	0x0801e108
 8001158:	0801e0bc 	.word	0x0801e0bc
 800115c:	0801e0a4 	.word	0x0801e0a4
 8001160:	0801e040 	.word	0x0801e040
 8001164:	0801e058 	.word	0x0801e058
 8001168:	0801f20c 	.word	0x0801f20c
 800116c:	0801e018 	.word	0x0801e018
 8001170:	0801e1d0 	.word	0x0801e1d0
 8001174:	0801e19c 	.word	0x0801e19c
 8001178:	0801e168 	.word	0x0801e168
 800117c:	0801e154 	.word	0x0801e154
 8001180:	0801e008 	.word	0x0801e008

08001184 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001184:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 8001186:	4c17      	ldr	r4, [pc, #92]	; (80011e4 <__tcf_0+0x60>)
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <__tcf_0+0x64>)
 800118a:	6023      	str	r3, [r4, #0]
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <__tcf_0+0x68>)
 800118e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <__tcf_0+0x6c>)
 8001194:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <__tcf_0+0x70>)
 800119a:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    {
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <__tcf_0+0x74>)
 80011a0:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <__tcf_0+0x78>)
 80011a6:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <__tcf_0+0x7c>)
 80011ac:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <__tcf_0+0x80>)
 80011b2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011b6:	4620      	mov	r0, r4
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__tcf_0+0x84>)
 80011ba:	f840 3fcc 	str.w	r3, [r0, #204]!
 80011be:	f00e f85c 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011c2:	4620      	mov	r0, r4
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <__tcf_0+0x88>)
 80011c6:	f840 3f2c 	str.w	r3, [r0, #44]!
 80011ca:	f00e f856 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011ce:	4620      	mov	r0, r4
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <__tcf_0+0x8c>)
 80011d2:	f840 3f14 	str.w	r3, [r0, #20]!
 80011d6:	f00e f850 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <__tcf_0+0x90>)
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <__tcf_0+0x94>)
 80011e0:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 80011e2:	bd10      	pop	{r4, pc}
 80011e4:	2400014c 	.word	0x2400014c
 80011e8:	0801e204 	.word	0x0801e204
 80011ec:	0801e108 	.word	0x0801e108
 80011f0:	0801e0bc 	.word	0x0801e0bc
 80011f4:	0801e0a4 	.word	0x0801e0a4
 80011f8:	0801e040 	.word	0x0801e040
 80011fc:	0801e058 	.word	0x0801e058
 8001200:	0801f20c 	.word	0x0801f20c
 8001204:	0801e018 	.word	0x0801e018
 8001208:	0801e1d0 	.word	0x0801e1d0
 800120c:	0801e19c 	.word	0x0801e19c
 8001210:	0801e168 	.word	0x0801e168
 8001214:	0801e154 	.word	0x0801e154
 8001218:	0801e008 	.word	0x0801e008

0800121c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800121c:	b510      	push	{r4, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <_ZN12FrontendHeapD0Ev+0x6c>)
 8001222:	6003      	str	r3, [r0, #0]
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <_ZN12FrontendHeapD0Ev+0x70>)
 8001226:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <_ZN12FrontendHeapD0Ev+0x74>)
 800122c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <_ZN12FrontendHeapD0Ev+0x78>)
 8001232:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001238:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <_ZN12FrontendHeapD0Ev+0x80>)
 800123e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <_ZN12FrontendHeapD0Ev+0x84>)
 8001244:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <_ZN12FrontendHeapD0Ev+0x88>)
 800124a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <_ZN12FrontendHeapD0Ev+0x8c>)
 8001250:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001254:	f00e f811 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001258:	4620      	mov	r0, r4
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <_ZN12FrontendHeapD0Ev+0x90>)
 800125c:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001260:	f00e f80b 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001264:	4620      	mov	r0, r4
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <_ZN12FrontendHeapD0Ev+0x94>)
 8001268:	f840 3f14 	str.w	r3, [r0, #20]!
 800126c:	f00e f805 	bl	800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_ZN12FrontendHeapD0Ev+0x98>)
 8001272:	6023      	str	r3, [r4, #0]
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_ZN12FrontendHeapD0Ev+0x9c>)
 8001276:	6023      	str	r3, [r4, #0]
 8001278:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800127c:	4620      	mov	r0, r4
 800127e:	f01b f838 	bl	801c2f2 <_ZdlPvj>
 8001282:	4620      	mov	r0, r4
 8001284:	bd10      	pop	{r4, pc}
 8001286:	bf00      	nop
 8001288:	0801e204 	.word	0x0801e204
 800128c:	0801e108 	.word	0x0801e108
 8001290:	0801e0bc 	.word	0x0801e0bc
 8001294:	0801e0a4 	.word	0x0801e0a4
 8001298:	0801e040 	.word	0x0801e040
 800129c:	0801e058 	.word	0x0801e058
 80012a0:	0801f20c 	.word	0x0801f20c
 80012a4:	0801e018 	.word	0x0801e018
 80012a8:	0801e1d0 	.word	0x0801e1d0
 80012ac:	0801e19c 	.word	0x0801e19c
 80012b0:	0801e168 	.word	0x0801e168
 80012b4:	0801e154 	.word	0x0801e154
 80012b8:	0801e008 	.word	0x0801e008

080012bc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80012c0:	f001 fd26 	bl	8002d10 <_ZN14BitmapDatabase11getInstanceEv>
 80012c4:	4605      	mov	r5, r0
 80012c6:	f001 fd27 	bl	8002d18 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80012ca:	4601      	mov	r1, r0
 80012cc:	2400      	movs	r4, #0
 80012ce:	9400      	str	r4, [sp, #0]
 80012d0:	4623      	mov	r3, r4
 80012d2:	4622      	mov	r2, r4
 80012d4:	4628      	mov	r0, r5
 80012d6:	f012 ff1d 	bl	8014114 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <touchgfx_init+0xc0>)
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <touchgfx_init+0xc4>)
 80012de:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80012e0:	4620      	mov	r0, r4
 80012e2:	f002 f879 	bl	80033d8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <touchgfx_init+0xc8>)
 80012e8:	f012 fdcc 	bl	8013e84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <touchgfx_init+0xcc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f3bf 8f5b 	dmb	ish
 80012f4:	f013 0f01 	tst.w	r3, #1
 80012f8:	d004      	beq.n	8001304 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80012fa:	4824      	ldr	r0, [pc, #144]	; (800138c <touchgfx_init+0xd0>)
 80012fc:	f7ff f9e8 	bl	80006d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8001300:	b003      	add	sp, #12
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <touchgfx_init+0xcc>)
 8001306:	f01a fff6 	bl	801c2f6 <__cxa_guard_acquire>
 800130a:	2800      	cmp	r0, #0
 800130c:	d0f5      	beq.n	80012fa <touchgfx_init+0x3e>
          frontendApplication(app)
 800130e:	4c20      	ldr	r4, [pc, #128]	; (8001390 <touchgfx_init+0xd4>)
 8001310:	4620      	mov	r0, r4
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <touchgfx_init+0xd8>)
 8001314:	f840 3b14 	str.w	r3, [r0], #20
 8001318:	6060      	str	r0, [r4, #4]
 800131a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 800131e:	60a7      	str	r7, [r4, #8]
 8001320:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
 8001324:	60e6      	str	r6, [r4, #12]
 8001326:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
 800132a:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <touchgfx_init+0xdc>)
 800132e:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <touchgfx_init+0xe0>)
 8001332:	6023      	str	r3, [r4, #0]
 8001334:	f00d ffa2 	bl	800f27c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <touchgfx_init+0xe4>)
 800133a:	6163      	str	r3, [r4, #20]
 800133c:	4638      	mov	r0, r7
 800133e:	f00d ff9d 	bl	800f27c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <touchgfx_init+0xe8>)
 8001344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001346:	4630      	mov	r0, r6
 8001348:	f00d ff98 	bl	800f27c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <touchgfx_init+0xec>)
 800134e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8001352:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8001356:	4630      	mov	r0, r6
 8001358:	f002 fa06 	bl	8003768 <_ZN5ModelC1Ev>
 800135c:	4622      	mov	r2, r4
 800135e:	4631      	mov	r1, r6
 8001360:	4628      	mov	r0, r5
 8001362:	f002 f9f7 	bl	8003754 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 8001366:	4628      	mov	r0, r5
 8001368:	f001 fd74 	bl	8002e54 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <touchgfx_init+0xf0>)
 800136e:	f01b f80d 	bl	801c38c <atexit>
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <touchgfx_init+0xcc>)
 8001374:	f01a ffcb 	bl	801c30e <__cxa_guard_release>
 8001378:	e7bf      	b.n	80012fa <touchgfx_init+0x3e>
 800137a:	bf00      	nop
 800137c:	2400b9dc 	.word	0x2400b9dc
 8001380:	240011a8 	.word	0x240011a8
 8001384:	24000008 	.word	0x24000008
 8001388:	24000148 	.word	0x24000148
 800138c:	2400112c 	.word	0x2400112c
 8001390:	2400014c 	.word	0x2400014c
 8001394:	0801e008 	.word	0x0801e008
 8001398:	0801e154 	.word	0x0801e154
 800139c:	0801e204 	.word	0x0801e204
 80013a0:	0801e168 	.word	0x0801e168
 80013a4:	0801e19c 	.word	0x0801e19c
 80013a8:	0801e1d0 	.word	0x0801e1d0
 80013ac:	08001185 	.word	0x08001185

080013b0 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 80013b0:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80013b2:	4802      	ldr	r0, [pc, #8]	; (80013bc <touchgfx_taskEntry+0xc>)
 80013b4:	f7ff f990 	bl	80006d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	2400112c 	.word	0x2400112c

080013c0 <_Z41__static_initialization_and_destruction_0ii>:
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	2801      	cmp	r0, #1
 80013ca:	d006      	beq.n	80013da <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80013cc:	b91c      	cbnz	r4, 80013d6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80013ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d2:	429d      	cmp	r5, r3
 80013d4:	d076      	beq.n	80014c4 <_Z41__static_initialization_and_destruction_0ii+0x104>
}
 80013d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013de:	4299      	cmp	r1, r3
 80013e0:	d1f4      	bne.n	80013cc <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchController
 80013e2:	4e45      	ldr	r6, [pc, #276]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80013e6:	6033      	str	r3, [r6, #0]
{
public:

    STM32TouchController() {}
 80013e8:	4b45      	ldr	r3, [pc, #276]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80013ea:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80013ec:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001544 <_Z41__static_initialization_and_destruction_0ii+0x184>
 80013f0:	4640      	mov	r0, r8
 80013f2:	f7ff fc93 	bl	8000d1c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80013f6:	4f43      	ldr	r7, [pc, #268]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80013f8:	4638      	mov	r0, r7
 80013fa:	f015 f8a5 	bl	8016548 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001400:	4a42      	ldr	r2, [pc, #264]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f8c3 8004 	str.w	r8, [r3, #4]
 8001408:	609f      	str	r7, [r3, #8]
 800140a:	60de      	str	r6, [r3, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001414:	839a      	strh	r2, [r3, #28]
 8001416:	83da      	strh	r2, [r3, #30]
 8001418:	841a      	strh	r2, [r3, #32]
 800141a:	845a      	strh	r2, [r3, #34]	; 0x22
 800141c:	849a      	strh	r2, [r3, #36]	; 0x24
 800141e:	84da      	strh	r2, [r3, #38]	; 0x26
 8001420:	851a      	strh	r2, [r3, #40]	; 0x28
 8001422:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
 8001428:	861a      	strh	r2, [r3, #48]	; 0x30
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
 8001436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800143a:	2101      	movs	r1, #1
 800143c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
 8001440:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001444:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001448:	64da      	str	r2, [r3, #76]	; 0x4c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800144a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800144e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8001452:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001456:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800145a:	659a      	str	r2, [r3, #88]	; 0x58
 800145c:	65da      	str	r2, [r3, #92]	; 0x5c
 800145e:	661a      	str	r2, [r3, #96]	; 0x60
 8001460:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8001464:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001468:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800146c:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 8001470:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001474:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001478:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800147c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001480:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001484:	671a      	str	r2, [r3, #112]	; 0x70
 8001486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800148a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800148e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001492:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
 8001496:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 800149a:	491d      	ldr	r1, [pc, #116]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800149c:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800149e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80014a2:	481c      	ldr	r0, [pc, #112]	; (8001514 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80014a4:	8001      	strh	r1, [r0, #0]
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80014a8:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80014aa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80014b0:	8001      	strh	r1, [r0, #0]
 80014b2:	481b      	ldr	r0, [pc, #108]	; (8001520 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80014b4:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80014b6:	491b      	ldr	r1, [pc, #108]	; (8001524 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80014b8:	700a      	strb	r2, [r1, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80014bc:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80014c0:	601a      	str	r2, [r3, #0]
    }
 80014c2:	e783      	b.n	80013cc <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80014c8:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80014cc:	601a      	str	r2, [r3, #0]
    {
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80014d0:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80014d6:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80014d8:	4a17      	ldr	r2, [pc, #92]	; (8001538 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80014da:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80014e0:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80014e4:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 80014e6:	4817      	ldr	r0, [pc, #92]	; (8001544 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80014e8:	f7ff fa4c 	bl	8000984 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80014f0:	601a      	str	r2, [r3, #0]
    {
 80014f2:	4a02      	ldr	r2, [pc, #8]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	e76e      	b.n	80013d6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80014f8:	24000388 	.word	0x24000388
 80014fc:	0801da70 	.word	0x0801da70
 8001500:	0801da88 	.word	0x0801da88
 8001504:	240011ac 	.word	0x240011ac
 8001508:	2400112c 	.word	0x2400112c
 800150c:	0801ef94 	.word	0x0801ef94
 8001510:	2400b980 	.word	0x2400b980
 8001514:	2400b974 	.word	0x2400b974
 8001518:	2400b97a 	.word	0x2400b97a
 800151c:	2400b976 	.word	0x2400b976
 8001520:	2400b97c 	.word	0x2400b97c
 8001524:	2400b978 	.word	0x2400b978
 8001528:	0801e218 	.word	0x0801e218
 800152c:	0801dc18 	.word	0x0801dc18
 8001530:	24000008 	.word	0x24000008
 8001534:	0801e398 	.word	0x0801e398
 8001538:	0801dff4 	.word	0x0801dff4
 800153c:	0801f518 	.word	0x0801f518
 8001540:	0801f1b4 	.word	0x0801f1b4
 8001544:	2400038c 	.word	0x2400038c

08001548 <_GLOBAL__sub_I_touchgfx_init>:
 8001548:	b508      	push	{r3, lr}
 800154a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff ff36 	bl	80013c0 <_Z41__static_initialization_and_destruction_0ii>
 8001554:	bd08      	pop	{r3, pc}

08001556 <_GLOBAL__sub_D_touchgfx_init>:
 8001556:	b508      	push	{r3, lr}
 8001558:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff ff2f 	bl	80013c0 <_Z41__static_initialization_and_destruction_0ii>
 8001562:	bd08      	pop	{r3, pc}

08001564 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001566:	2290      	movs	r2, #144	; 0x90
 8001568:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800156c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800157a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001584:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100

0800158c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800158e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80015a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015aa:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 80015b6:	68d3      	ldr	r3, [r2, #12]
 80015b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 80015c2:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80015c4:	6911      	ldr	r1, [r2, #16]
 80015c6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80015ca:	3901      	subs	r1, #1
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 80015ce:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80015d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80015da:	4770      	bx	lr
 80015dc:	50001000 	.word	0x50001000
 80015e0:	24001208 	.word	0x24001208
 80015e4:	24001206 	.word	0x24001206

080015e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80015e8:	4b01      	ldr	r3, [pc, #4]	; (80015f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80015ea:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 80015ee:	4770      	bx	lr
 80015f0:	50001000 	.word	0x50001000

080015f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80015f6:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80015fa:	2201      	movs	r2, #1
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015fe:	4770      	bx	lr
 8001600:	50001000 	.word	0x50001000

08001604 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800160c:	d025      	beq.n	800165a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 800160e:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001618:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800161c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001620:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001624:	e000      	b.n	8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001626:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001628:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800162c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001630:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001634:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 800163a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800163e:	4613      	mov	r3, r2
 8001640:	3a01      	subs	r2, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001646:	1e43      	subs	r3, r0, #1
 8001648:	2800      	cmp	r0, #0
 800164a:	d1ec      	bne.n	8001626 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 800164c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001668:	d025      	beq.n	80016b6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 800166a:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001674:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001678:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800167c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001680:	e000      	b.n	8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001682:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001684:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001688:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800168c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001690:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001694:	4908      	ldr	r1, [pc, #32]	; (80016b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001696:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800169a:	4613      	mov	r3, r2
 800169c:	3a01      	subs	r2, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f2      	bne.n	8001688 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 80016a2:	1e43      	subs	r3, r0, #1
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d1ec      	bne.n	8001682 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 80016a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016ac:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80016b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <_ZN20TouchGFXGeneratedHALD1Ev>:
 80016bc:	4a02      	ldr	r2, [pc, #8]	; (80016c8 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 80016be:	6002      	str	r2, [r0, #0]
 80016c0:	4a02      	ldr	r2, [pc, #8]	; (80016cc <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 80016c2:	6002      	str	r2, [r0, #0]
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	0801e218 	.word	0x0801e218
 80016cc:	0801ef94 	.word	0x0801ef94

080016d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4604      	mov	r4, r0
    HAL::initialize();
 80016d4:	f00e f8db 	bl	800f88e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80016dc:	f010 f8e4 	bl	80118a8 <_ZN8touchgfx11Application11getInstanceEv>
 80016e0:	4601      	mov	r1, r0
 80016e2:	4620      	mov	r0, r4
 80016e4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80016ec:	2300      	movs	r3, #0
 80016ee:	4a02      	ldr	r2, [pc, #8]	; (80016f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 80016f2:	4620      	mov	r0, r4
 80016f4:	47a8      	blx	r5
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	2409fa00 	.word	0x2409fa00
 80016fc:	24040000 	.word	0x24040000

08001700 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 8001700:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 8001702:	f00e f8ab 	bl	800f85c <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001706:	bd08      	pop	{r3, pc}

08001708 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8001708:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 800170a:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 800170e:	b113      	cbz	r3, 8001716 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001716:	f00e f8ad 	bl	800f874 <_ZN8touchgfx3HAL8endFrameEv>
}
 800171a:	bd08      	pop	{r3, pc}
 800171c:	24001204 	.word	0x24001204

08001720 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001720:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001722:	f00e f865 	bl	800f7f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800172e:	d021      	beq.n	8001774 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001738:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800173c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001740:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001744:	e000      	b.n	8001748 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001746:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001748:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800174c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001750:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001754:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800175a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800175e:	4613      	mov	r3, r2
 8001760:	3a01      	subs	r2, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f2      	bne.n	800174c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8001766:	1e43      	subs	r3, r0, #1
 8001768:	2800      	cmp	r0, #0
 800176a:	d1ec      	bne.n	8001746 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 800176c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001770:	f3bf 8f6f 	isb	sy
}
 8001774:	bd10      	pop	{r4, pc}
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 800177c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800177e:	f00e f9a0 	bl	800fac2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8001782:	bd08      	pop	{r3, pc}

08001784 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8001784:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8001786:	f00e f82d 	bl	800f7e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800178a:	bd08      	pop	{r3, pc}

0800178c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800178c:	b510      	push	{r4, lr}
 800178e:	4604      	mov	r4, r0
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8001792:	6003      	str	r3, [r0, #0]
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8001796:	6003      	str	r3, [r0, #0]
 8001798:	217c      	movs	r1, #124	; 0x7c
 800179a:	f01a fdaa 	bl	801c2f2 <_ZdlPvj>
 800179e:	4620      	mov	r0, r4
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	bf00      	nop
 80017a4:	0801e218 	.word	0x0801e218
 80017a8:	0801ef94 	.word	0x0801ef94

080017ac <HAL_LTDC_LineEventCallback>:
        return instance;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_LTDC_LineEventCallback+0x54>)
 80017ae:	681b      	ldr	r3, [r3, #0]

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
 80017b0:	b32b      	cbz	r3, 80017fe <HAL_LTDC_LineEventCallback+0x52>
    {
 80017b2:	b510      	push	{r4, lr}
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_LTDC_LineEventCallback+0x58>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_LTDC_LineEventCallback+0x5c>)
 80017ba:	8811      	ldrh	r1, [r2, #0]
 80017bc:	428b      	cmp	r3, r1
 80017be:	d00a      	beq.n	80017d6 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80017c0:	f006 fd56 	bl	8008270 <HAL_LTDC_ProgramLineEvent>
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_LTDC_LineEventCallback+0x54>)
 80017c6:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 80017c8:	6803      	ldr	r3, [r0, #0]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7fe feb6 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 80017d4:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_LTDC_LineEventCallback+0x60>)
 80017d8:	8819      	ldrh	r1, [r3, #0]
 80017da:	f006 fd49 	bl	8008270 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80017de:	4c08      	ldr	r4, [pc, #32]	; (8001800 <HAL_LTDC_LineEventCallback+0x54>)
 80017e0:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80017e2:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80017e6:	3301      	adds	r3, #1
 80017e8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80017ec:	f7ff f892 	bl	8000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80017f0:	6820      	ldr	r0, [r4, #0]
 80017f2:	f00e fdab 	bl	801034c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7fe fe64 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80017fc:	e7ea      	b.n	80017d4 <HAL_LTDC_LineEventCallback+0x28>
 80017fe:	4770      	bx	lr
 8001800:	2400b980 	.word	0x2400b980
 8001804:	50001000 	.word	0x50001000
 8001808:	24001208 	.word	0x24001208
 800180c:	24001206 	.word	0x24001206

08001810 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001810:	b530      	push	{r4, r5, lr}
 8001812:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001814:	2400      	movs	r4, #0
 8001816:	9400      	str	r4, [sp, #0]
 8001818:	9401      	str	r4, [sp, #4]
 800181a:	9402      	str	r4, [sp, #8]
 800181c:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800181e:	f005 f9a9 	bl	8006b74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001822:	2501      	movs	r5, #1
 8001824:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001828:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800182c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001830:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001832:	231b      	movs	r3, #27
 8001834:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001838:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800183c:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001840:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001844:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001848:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800184c:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001850:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001854:	4668      	mov	r0, sp
 8001856:	f005 f9ab 	bl	8006bb0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800185a:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800185e:	2319      	movs	r3, #25
 8001860:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001864:	2403      	movs	r4, #3
 8001866:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800186a:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800186e:	4668      	mov	r0, sp
 8001870:	f005 f99e 	bl	8006bb0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001874:	2302      	movs	r3, #2
 8001876:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800187a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800187e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8001880:	2313      	movs	r3, #19
 8001882:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001886:	4668      	mov	r0, sp
 8001888:	f005 f992 	bl	8006bb0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800188c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001890:	2311      	movs	r3, #17
 8001892:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001896:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800189a:	4668      	mov	r0, sp
 800189c:	f005 f988 	bl	8006bb0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018a0:	2004      	movs	r0, #4
 80018a2:	f005 f975 	bl	8006b90 <HAL_MPU_Enable>

}
 80018a6:	b005      	add	sp, #20
 80018a8:	bd30      	pop	{r4, r5, pc}
	...

080018ac <MX_CRC_Init>:
{
 80018ac:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_CRC_Init+0x1c>)
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_CRC_Init+0x20>)
 80018b2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018b8:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018ba:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018bc:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018be:	2301      	movs	r3, #1
 80018c0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018c2:	f005 f9a5 	bl	8006c10 <HAL_CRC_Init>
}
 80018c6:	bd08      	pop	{r3, pc}
 80018c8:	2400121c 	.word	0x2400121c
 80018cc:	40023000 	.word	0x40023000

080018d0 <MX_GPIO_Init>:
{
 80018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	2400      	movs	r4, #0
 80018d8:	9409      	str	r4, [sp, #36]	; 0x24
 80018da:	940a      	str	r4, [sp, #40]	; 0x28
 80018dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80018de:	940c      	str	r4, [sp, #48]	; 0x30
 80018e0:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <MX_GPIO_Init+0x1ec>)
 80018e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018f4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80018f8:	9201      	str	r2, [sp, #4]
 80018fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001904:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001908:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800190c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001910:	9202      	str	r2, [sp, #8]
 8001912:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001914:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001920:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001924:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001928:	9203      	str	r2, [sp, #12]
 800192a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800192c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001934:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001938:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800193c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001940:	9204      	str	r2, [sp, #16]
 8001942:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001944:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001950:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001954:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001958:	9205      	str	r2, [sp, #20]
 800195a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001968:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800196c:	f002 0201 	and.w	r2, r2, #1
 8001970:	9206      	str	r2, [sp, #24]
 8001972:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001974:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001980:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001984:	f002 0204 	and.w	r2, r2, #4
 8001988:	9207      	str	r2, [sp, #28]
 800198a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001990:	f042 0208 	orr.w	r2, r2, #8
 8001994:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001998:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	9308      	str	r3, [sp, #32]
 80019a2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|FRAME_RATE_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80019a4:	4e46      	ldr	r6, [pc, #280]	; (8001ac0 <MX_GPIO_Init+0x1f0>)
 80019a6:	4622      	mov	r2, r4
 80019a8:	f240 210e 	movw	r1, #526	; 0x20e
 80019ac:	4630      	mov	r0, r6
 80019ae:	f005 fe02 	bl	80075b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80019b2:	f8df a118 	ldr.w	sl, [pc, #280]	; 8001acc <MX_GPIO_Init+0x1fc>
 80019b6:	4622      	mov	r2, r4
 80019b8:	f640 0104 	movw	r1, #2052	; 0x804
 80019bc:	4650      	mov	r0, sl
 80019be:	f005 fdfa 	bl	80075b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80019c2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001ad0 <MX_GPIO_Init+0x200>
 80019c6:	4622      	mov	r2, r4
 80019c8:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80019cc:	4640      	mov	r0, r8
 80019ce:	f005 fdf2 	bl	80075b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80019d2:	4f3c      	ldr	r7, [pc, #240]	; (8001ac4 <MX_GPIO_Init+0x1f4>)
 80019d4:	4622      	mov	r2, r4
 80019d6:	2106      	movs	r1, #6
 80019d8:	4638      	mov	r0, r7
 80019da:	f005 fdec 	bl	80075b6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80019de:	2330      	movs	r3, #48	; 0x30
 80019e0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 80019e6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019ec:	a909      	add	r1, sp, #36	; 0x24
 80019ee:	4630      	mov	r0, r6
 80019f0:	f005 fc22 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80019f4:	230e      	movs	r3, #14
 80019f6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2501      	movs	r5, #1
 80019fa:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a00:	a909      	add	r1, sp, #36	; 0x24
 8001a02:	4630      	mov	r0, r6
 8001a04:	f005 fc18 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001a08:	f640 0304 	movw	r3, #2052	; 0x804
 8001a0c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a14:	a909      	add	r1, sp, #36	; 0x24
 8001a16:	4650      	mov	r0, sl
 8001a18:	f005 fc0e 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8001a1c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8001a20:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	f04f 0a03 	mov.w	sl, #3
 8001a2a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a2e:	a909      	add	r1, sp, #36	; 0x24
 8001a30:	4640      	mov	r0, r8
 8001a32:	f005 fc01 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8001a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8001a44:	a909      	add	r1, sp, #36	; 0x24
 8001a46:	4630      	mov	r0, r6
 8001a48:	f005 fbf6 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001a58:	a909      	add	r1, sp, #36	; 0x24
 8001a5a:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <MX_GPIO_Init+0x1f8>)
 8001a5c:	f005 fbec 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a60:	2604      	movs	r6, #4
 8001a62:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a64:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	a909      	add	r1, sp, #36	; 0x24
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	f005 fbe3 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a72:	2302      	movs	r3, #2
 8001a74:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	a909      	add	r1, sp, #36	; 0x24
 8001a7e:	4638      	mov	r0, r7
 8001a80:	f005 fbda 	bl	8007238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001a84:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	a909      	add	r1, sp, #36	; 0x24
 8001a8e:	4638      	mov	r0, r7
 8001a90:	f005 fbd2 	bl	8007238 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a94:	4622      	mov	r2, r4
 8001a96:	2105      	movs	r1, #5
 8001a98:	2017      	movs	r0, #23
 8001a9a:	f005 f815 	bl	8006ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a9e:	2017      	movs	r0, #23
 8001aa0:	f005 f848 	bl	8006b34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	2028      	movs	r0, #40	; 0x28
 8001aaa:	f005 f80d 	bl	8006ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aae:	2028      	movs	r0, #40	; 0x28
 8001ab0:	f005 f840 	bl	8006b34 <HAL_NVIC_EnableIRQ>
}
 8001ab4:	b00e      	add	sp, #56	; 0x38
 8001ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aba:	bf00      	nop
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	58022000 	.word	0x58022000
 8001ac4:	58020000 	.word	0x58020000
 8001ac8:	58020800 	.word	0x58020800
 8001acc:	58021800 	.word	0x58021800
 8001ad0:	58021c00 	.word	0x58021c00

08001ad4 <MX_DMA2D_Init>:
{
 8001ad4:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8001ad6:	4c0b      	ldr	r4, [pc, #44]	; (8001b04 <MX_DMA2D_Init+0x30>)
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_DMA2D_Init+0x34>)
 8001ada:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ae4:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001ae6:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001ae8:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001aea:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001aec:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001aee:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001af0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001af2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001af4:	4620      	mov	r0, r4
 8001af6:	f005 fa3b 	bl	8006f70 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001afa:	2101      	movs	r1, #1
 8001afc:	4620      	mov	r0, r4
 8001afe:	f005 fb19 	bl	8007134 <HAL_DMA2D_ConfigLayer>
}
 8001b02:	bd10      	pop	{r4, pc}
 8001b04:	24001240 	.word	0x24001240
 8001b08:	52001000 	.word	0x52001000

08001b0c <MX_LTDC_Init>:
{
 8001b0c:	b530      	push	{r4, r5, lr}
 8001b0e:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b10:	2234      	movs	r2, #52	; 0x34
 8001b12:	2100      	movs	r1, #0
 8001b14:	a801      	add	r0, sp, #4
 8001b16:	f01a fdb1 	bl	801c67c <memset>
  hltdc.Instance = LTDC;
 8001b1a:	4c23      	ldr	r4, [pc, #140]	; (8001ba8 <MX_LTDC_Init+0x9c>)
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <MX_LTDC_Init+0xa0>)
 8001b1e:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b20:	2500      	movs	r5, #0
 8001b22:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b24:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b26:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b28:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b2a:	2328      	movs	r3, #40	; 0x28
 8001b2c:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8001b2e:	2309      	movs	r3, #9
 8001b30:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001b32:	232a      	movs	r3, #42	; 0x2a
 8001b34:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b36:	230b      	movs	r3, #11
 8001b38:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001b3a:	f240 230a 	movw	r3, #522	; 0x20a
 8001b3e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b40:	f240 131b 	movw	r3, #283	; 0x11b
 8001b44:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8001b46:	f240 232a 	movw	r3, #554	; 0x22a
 8001b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001b4c:	f240 131d 	movw	r3, #285	; 0x11d
 8001b50:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b52:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b56:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b5a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f006 fa68 	bl	8008034 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8001b64:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001b66:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001b6a:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001b6c:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001b6e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001b72:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001b74:	2301      	movs	r3, #1
 8001b76:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001b78:	23ff      	movs	r3, #255	; 0xff
 8001b7a:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001b7c:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b82:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b84:	2005      	movs	r0, #5
 8001b86:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001b88:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001b8a:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001b8c:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001b8e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b92:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b96:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	a901      	add	r1, sp, #4
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f006 fb31 	bl	8008206 <HAL_LTDC_ConfigLayer>
}
 8001ba4:	b00f      	add	sp, #60	; 0x3c
 8001ba6:	bd30      	pop	{r4, r5, pc}
 8001ba8:	240012f4 	.word	0x240012f4
 8001bac:	50001000 	.word	0x50001000

08001bb0 <MX_I2C4_Init>:
{
 8001bb0:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8001bb2:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <MX_I2C4_Init+0x38>)
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <MX_I2C4_Init+0x3c>)
 8001bb6:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <MX_I2C4_Init+0x40>)
 8001bba:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001bbc:	2500      	movs	r5, #0
 8001bbe:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc4:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001bc6:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc8:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bcc:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f005 fed0 	bl	8007974 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f006 f8f4 	bl	8007dc6 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001bde:	4629      	mov	r1, r5
 8001be0:	4620      	mov	r0, r4
 8001be2:	f006 f91e 	bl	8007e22 <HAL_I2CEx_ConfigDigitalFilter>
}
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	240012a8 	.word	0x240012a8
 8001bec:	58001c00 	.word	0x58001c00
 8001bf0:	30808bd0 	.word	0x30808bd0

08001bf4 <MX_OCTOSPI1_Init>:
{
 8001bf4:	b530      	push	{r4, r5, lr}
 8001bf6:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 8001bf8:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_OCTOSPI1_Init+0x58>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_OCTOSPI1_Init+0x5c>)
 8001bfc:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8001bfe:	2501      	movs	r5, #1
 8001c00:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001c02:	2400      	movs	r4, #0
 8001c04:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001c06:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 8001c08:	231a      	movs	r3, #26
 8001c0a:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001c10:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001c12:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001c14:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8001c16:	2303      	movs	r3, #3
 8001c18:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001c1a:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001c1c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001c1e:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001c20:	2308      	movs	r3, #8
 8001c22:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001c24:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001c26:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001c28:	f006 ffa0 	bl	8008b6c <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001c2c:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001c30:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8001c34:	4620      	mov	r0, r4
 8001c36:	f004 fc99 	bl	800656c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8001c3a:	a901      	add	r1, sp, #4
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f004 fd0f 	bl	8006660 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8001c42:	4620      	mov	r0, r4
 8001c44:	f004 fc3a 	bl	80064bc <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8001c48:	b003      	add	sp, #12
 8001c4a:	bd30      	pop	{r4, r5, pc}
 8001c4c:	2400139c 	.word	0x2400139c
 8001c50:	52005000 	.word	0x52005000

08001c54 <MX_SPI2_Init>:
{
 8001c54:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MX_SPI2_Init+0x48>)
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_SPI2_Init+0x4c>)
 8001c5a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c60:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c62:	2300      	movs	r3, #0
 8001c64:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c66:	220f      	movs	r2, #15
 8001c68:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6a:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c6c:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c72:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c78:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c7a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001c80:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c82:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c84:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c86:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c88:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c8a:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c8c:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c8e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c90:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c92:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c94:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c96:	f008 fce5 	bl	800a664 <HAL_SPI_Init>
}
 8001c9a:	bd08      	pop	{r3, pc}
 8001c9c:	240013f8 	.word	0x240013f8
 8001ca0:	40003800 	.word	0x40003800

08001ca4 <SystemClock_Config>:
{
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca8:	224c      	movs	r2, #76	; 0x4c
 8001caa:	2100      	movs	r1, #0
 8001cac:	a809      	add	r0, sp, #36	; 0x24
 8001cae:	f01a fce5 	bl	801c67c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	a801      	add	r0, sp, #4
 8001cb8:	f01a fce0 	bl	801c67c <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <SystemClock_Config+0xa8>)
 8001cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001cc6:	2004      	movs	r0, #4
 8001cc8:	f006 ffd4 	bl	8008c74 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <SystemClock_Config+0xac>)
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cd8:	619a      	str	r2, [r3, #24]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <SystemClock_Config+0xac>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001cec:	d0fa      	beq.n	8001ce4 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <SystemClock_Config+0xa8>)
 8001cf0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d04:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d06:	2302      	movs	r3, #2
 8001d08:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001d10:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d14:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d16:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d18:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d1a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d20:	2400      	movs	r4, #0
 8001d22:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d24:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	a809      	add	r0, sp, #36	; 0x24
 8001d28:	f006 ffee 	bl	8008d08 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	233f      	movs	r3, #63	; 0x3f
 8001d2e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2103      	movs	r1, #3
 8001d32:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d36:	2308      	movs	r3, #8
 8001d38:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d3a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001d3c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001d3e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d40:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d42:	a801      	add	r0, sp, #4
 8001d44:	f007 fbec 	bl	8009520 <HAL_RCC_ClockConfig>
}
 8001d48:	b01c      	add	sp, #112	; 0x70
 8001d4a:	bd10      	pop	{r4, pc}
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58024800 	.word	0x58024800

08001d54 <main>:
{
 8001d54:	b508      	push	{r3, lr}
  MPU_Config();
 8001d56:	f7ff fd5b 	bl	8001810 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <main+0x104>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d62:	d113      	bne.n	8001d8c <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d68:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <main+0x104>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d78:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d82:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d88:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <main+0x104>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d94:	d127      	bne.n	8001de6 <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <main+0x104>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001da2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001da6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001daa:	e000      	b.n	8001dae <main+0x5a>
    } while(sets-- != 0U);
 8001dac:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001dae:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001db2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001db6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001dba:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001dbe:	4926      	ldr	r1, [pc, #152]	; (8001e58 <main+0x104>)
 8001dc0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	3a01      	subs	r2, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f2      	bne.n	8001db2 <main+0x5e>
    } while(sets-- != 0U);
 8001dcc:	1e43      	subs	r3, r0, #1
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d1ec      	bne.n	8001dac <main+0x58>
 8001dd2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001dd6:	694b      	ldr	r3, [r1, #20]
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	614b      	str	r3, [r1, #20]
 8001dde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001de2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001de6:	f004 fe09 	bl	80069fc <HAL_Init>
  SystemClock_Config();
 8001dea:	f7ff ff5b 	bl	8001ca4 <SystemClock_Config>
  MX_CRC_Init();
 8001dee:	f7ff fd5d 	bl	80018ac <MX_CRC_Init>
  MX_GPIO_Init();
 8001df2:	f7ff fd6d 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001df6:	f7ff fe6d 	bl	8001ad4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001dfa:	f7ff fe87 	bl	8001b0c <MX_LTDC_Init>
  MX_I2C4_Init();
 8001dfe:	f7ff fed7 	bl	8001bb0 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8001e02:	f7ff fef7 	bl	8001bf4 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 8001e06:	f7ff ff25 	bl	8001c54 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 8001e0a:	f7fe fb03 	bl	8000414 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001e0e:	f7fe fb00 	bl	8000412 <MX_TouchGFX_PreOSInit>
  wifi_initialise();
 8001e12:	f000 fead 	bl	8002b70 <wifi_initialise>
  osKernelInitialize();
 8001e16:	f009 fcb7 	bl	800b788 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <main+0x108>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	200a      	movs	r0, #10
 8001e20:	f009 fdfd 	bl	800ba1e <osMessageQueueNew>
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <main+0x10c>)
 8001e26:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <main+0x110>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	200a      	movs	r0, #10
 8001e2e:	f009 fdf6 	bl	800ba1e <osMessageQueueNew>
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <main+0x114>)
 8001e34:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8001e36:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <main+0x118>)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <main+0x11c>)
 8001e3c:	f009 fcd2 	bl	800b7e4 <osThreadNew>
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <main+0x120>)
 8001e42:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001e44:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <main+0x124>)
 8001e46:	2100      	movs	r1, #0
 8001e48:	480c      	ldr	r0, [pc, #48]	; (8001e7c <main+0x128>)
 8001e4a:	f009 fccb 	bl	800b7e4 <osThreadNew>
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <main+0x12c>)
 8001e50:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001e52:	f009 fcab 	bl	800b7ac <osKernelStart>
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <main+0x102>
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	0801e318 	.word	0x0801e318
 8001e60:	2400120c 	.word	0x2400120c
 8001e64:	0801e354 	.word	0x0801e354
 8001e68:	24001214 	.word	0x24001214
 8001e6c:	0801e36c 	.word	0x0801e36c
 8001e70:	08002c05 	.word	0x08002c05
 8001e74:	24001218 	.word	0x24001218
 8001e78:	0801e330 	.word	0x0801e330
 8001e7c:	0800041d 	.word	0x0800041d
 8001e80:	24001210 	.word	0x24001210

08001e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e86:	6802      	ldr	r2, [r0, #0]
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d000      	beq.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e8e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001e90:	f004 fde2 	bl	8006a58 <HAL_IncTick>
}
 8001e94:	e7fb      	b.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0xa>
 8001e96:	bf00      	nop
 8001e98:	40001000 	.word	0x40001000

08001e9c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <wait_cmddata_rdy_rising_event>:
}



int32_t wait_cmddata_rdy_rising_event(int32_t timeout)
{
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4605      	mov	r5, r0
#ifdef SEM_WAIT
    return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
    int32_t tickstart = HAL_GetTick();
 8001ea4:	f004 fde4 	bl	8006a70 <HAL_GetTick>
 8001ea8:	4604      	mov	r4, r0
    while (cmddata_rdy_rising_event == 1)
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <wait_cmddata_rdy_rising_event+0x28>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <wait_cmddata_rdy_rising_event+0x22>
    {
        if ((HAL_GetTick() - tickstart) > timeout)
 8001eb2:	f004 fddd 	bl	8006a70 <HAL_GetTick>
 8001eb6:	1b00      	subs	r0, r0, r4
 8001eb8:	42a8      	cmp	r0, r5
 8001eba:	d9f6      	bls.n	8001eaa <wait_cmddata_rdy_rising_event+0xa>
        {
            return -1;
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	e000      	b.n	8001ec4 <wait_cmddata_rdy_rising_event+0x24>
        }
    }
    return 0;
 8001ec2:	2000      	movs	r0, #0
#endif /* SEM_WAIT */
}
 8001ec4:	bd38      	pop	{r3, r4, r5, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24001b28 	.word	0x24001b28

08001ecc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001ecc:	b530      	push	{r4, r5, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	4604      	mov	r4, r0
    volatile        uint32_t ct = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	9301      	str	r3, [sp, #4]
    uint32_t        loop_per_us = 0;
    static uint32_t cycle_per_loop = 0;

    /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
    /* 10 cycle for STM32L4 */
    if (cycle_per_loop == 0)
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <SPI_WIFI_DelayUs+0x74>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b16b      	cbz	r3, 8001ef8 <SPI_WIFI_DelayUs+0x2c>
        {
            cycle_per_loop = 1;
        }
    }

    loop_per_us = SystemCoreClock / 1000000UL / cycle_per_loop;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <SPI_WIFI_DelayUs+0x78>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4819      	ldr	r0, [pc, #100]	; (8001f48 <SPI_WIFI_DelayUs+0x7c>)
 8001ee2:	fba0 2303 	umull	r2, r3, r0, r3
 8001ee6:	0c9b      	lsrs	r3, r3, #18
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <SPI_WIFI_DelayUs+0x74>)
 8001eea:	6810      	ldr	r0, [r2, #0]
 8001eec:	fbb3 f3f0 	udiv	r3, r3, r0
    ct = n * loop_per_us;
 8001ef0:	fb04 f303 	mul.w	r3, r4, r3
 8001ef4:	9301      	str	r3, [sp, #4]
    while (ct)
 8001ef6:	e01d      	b.n	8001f34 <SPI_WIFI_DelayUs+0x68>
        uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <SPI_WIFI_DelayUs+0x78>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <SPI_WIFI_DelayUs+0x80>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	099b      	lsrs	r3, r3, #6
        ct = cycle_per_ms;
 8001f04:	9301      	str	r3, [sp, #4]
        tick = HAL_GetTick();
 8001f06:	f004 fdb3 	bl	8006a70 <HAL_GetTick>
 8001f0a:	4605      	mov	r5, r0
        while (ct)
 8001f0c:	e002      	b.n	8001f14 <SPI_WIFI_DelayUs+0x48>
            ct--;
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
        while (ct)
 8001f14:	9b01      	ldr	r3, [sp, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <SPI_WIFI_DelayUs+0x42>
        cycle_per_loop = HAL_GetTick() - tick;
 8001f1a:	f004 fda9 	bl	8006a70 <HAL_GetTick>
 8001f1e:	1b40      	subs	r0, r0, r5
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <SPI_WIFI_DelayUs+0x74>)
 8001f22:	6018      	str	r0, [r3, #0]
        if (cycle_per_loop == 0)
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1d9      	bne.n	8001edc <SPI_WIFI_DelayUs+0x10>
            cycle_per_loop = 1;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e7d6      	b.n	8001edc <SPI_WIFI_DelayUs+0x10>
    {
        ct--;
 8001f2e:	9b01      	ldr	r3, [sp, #4]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	9301      	str	r3, [sp, #4]
    while (ct)
 8001f34:	9b01      	ldr	r3, [sp, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <SPI_WIFI_DelayUs+0x62>
    }
    return;
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	bd30      	pop	{r4, r5, pc}
 8001f3e:	bf00      	nop
 8001f40:	24001b2c 	.word	0x24001b2c
 8001f44:	24000040 	.word	0x24000040
 8001f48:	431bde83 	.word	0x431bde83
 8001f4c:	10624dd3 	.word	0x10624dd3

08001f50 <wait_spi_rx_event>:
{
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8001f54:	f004 fd8c 	bl	8006a70 <HAL_GetTick>
 8001f58:	4604      	mov	r4, r0
    while (spi_rx_event == 1)
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <wait_spi_rx_event+0x28>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <wait_spi_rx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8001f62:	f004 fd85 	bl	8006a70 <HAL_GetTick>
 8001f66:	1b00      	subs	r0, r0, r4
 8001f68:	42a8      	cmp	r0, r5
 8001f6a:	d9f6      	bls.n	8001f5a <wait_spi_rx_event+0xa>
            return -1;
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	e000      	b.n	8001f74 <wait_spi_rx_event+0x24>
    return 0;
 8001f72:	2000      	movs	r0, #0
}
 8001f74:	bd38      	pop	{r3, r4, r5, pc}
 8001f76:	bf00      	nop
 8001f78:	24001b30 	.word	0x24001b30

08001f7c <wait_spi_tx_event>:
{
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8001f80:	f004 fd76 	bl	8006a70 <HAL_GetTick>
 8001f84:	4604      	mov	r4, r0
    while (spi_tx_event == 1)
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <wait_spi_tx_event+0x28>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <wait_spi_tx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8001f8e:	f004 fd6f 	bl	8006a70 <HAL_GetTick>
 8001f92:	1b00      	subs	r0, r0, r4
 8001f94:	42a8      	cmp	r0, r5
 8001f96:	d9f6      	bls.n	8001f86 <wait_spi_tx_event+0xa>
            return -1;
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	e000      	b.n	8001fa0 <wait_spi_tx_event+0x24>
    return 0;
 8001f9e:	2000      	movs	r0, #0
}
 8001fa0:	bd38      	pop	{r3, r4, r5, pc}
 8001fa2:	bf00      	nop
 8001fa4:	24001b34 	.word	0x24001b34

08001fa8 <SPI_WIFI_ResetModule>:
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	b082      	sub	sp, #8
    uint32_t tickstart = HAL_GetTick();
 8001fac:	f004 fd60 	bl	8006a70 <HAL_GetTick>
 8001fb0:	4606      	mov	r6, r0
    WIFI_RESET_MODULE();
 8001fb2:	4c38      	ldr	r4, [pc, #224]	; (8002094 <SPI_WIFI_ResetModule+0xec>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f005 fafc 	bl	80075b6 <HAL_GPIO_WritePin>
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f004 fd5c 	bl	8006a7c <HAL_Delay>
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f005 faf4 	bl	80075b6 <HAL_GPIO_WritePin>
 8001fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd2:	f004 fd53 	bl	8006a7c <HAL_Delay>
    WIFI_ENABLE_NSS();
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fdc:	482e      	ldr	r0, [pc, #184]	; (8002098 <SPI_WIFI_ResetModule+0xf0>)
 8001fde:	f005 faea 	bl	80075b6 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff ff72 	bl	8001ecc <SPI_WIFI_DelayUs>
    uint8_t count = 0;
 8001fe8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 8001fea:	2120      	movs	r1, #32
 8001fec:	4829      	ldr	r0, [pc, #164]	; (8002094 <SPI_WIFI_ResetModule+0xec>)
 8001fee:	f005 fadb 	bl	80075a8 <HAL_GPIO_ReadPin>
 8001ff2:	2801      	cmp	r0, #1
 8001ff4:	d11c      	bne.n	8002030 <SPI_WIFI_ResetModule+0x88>
        Status = HAL_SPI_Receive(&hspi2, &Prompt[count], 1, 0xFFFF);
 8001ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	eb0d 0104 	add.w	r1, sp, r4
 8002000:	4826      	ldr	r0, [pc, #152]	; (800209c <SPI_WIFI_ResetModule+0xf4>)
 8002002:	f008 fd83 	bl	800ab0c <HAL_SPI_Receive>
 8002006:	4605      	mov	r5, r0
        count += 2;
 8002008:	3402      	adds	r4, #2
 800200a:	b2e4      	uxtb	r4, r4
        if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 800200c:	f004 fd30 	bl	8006a70 <HAL_GetTick>
 8002010:	1b83      	subs	r3, r0, r6
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d201      	bcs.n	800201c <SPI_WIFI_ResetModule+0x74>
 8002018:	2d00      	cmp	r5, #0
 800201a:	d0e6      	beq.n	8001fea <SPI_WIFI_ResetModule+0x42>
            WIFI_DISABLE_NSS();
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002022:	481d      	ldr	r0, [pc, #116]	; (8002098 <SPI_WIFI_ResetModule+0xf0>)
 8002024:	f005 fac7 	bl	80075b6 <HAL_GPIO_WritePin>
            return -1;
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
}
 800202c:	b002      	add	sp, #8
 800202e:	bd70      	pop	{r4, r5, r6, pc}
    WIFI_DISABLE_NSS();
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002036:	4818      	ldr	r0, [pc, #96]	; (8002098 <SPI_WIFI_ResetModule+0xf0>)
 8002038:	f005 fabd 	bl	80075b6 <HAL_GPIO_WritePin>
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800203c:	f89d 3000 	ldrb.w	r3, [sp]
 8002040:	2b15      	cmp	r3, #21
 8002042:	d115      	bne.n	8002070 <SPI_WIFI_ResetModule+0xc8>
 8002044:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002048:	2b15      	cmp	r3, #21
 800204a:	d114      	bne.n	8002076 <SPI_WIFI_ResetModule+0xce>
 800204c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002050:	2b0d      	cmp	r3, #13
 8002052:	d113      	bne.n	800207c <SPI_WIFI_ResetModule+0xd4>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002054:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002058:	2b0a      	cmp	r3, #10
 800205a:	d112      	bne.n	8002082 <SPI_WIFI_ResetModule+0xda>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800205c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002060:	2b3e      	cmp	r3, #62	; 0x3e
 8002062:	d111      	bne.n	8002088 <SPI_WIFI_ResetModule+0xe0>
 8002064:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002068:	2b20      	cmp	r3, #32
 800206a:	d110      	bne.n	800208e <SPI_WIFI_ResetModule+0xe6>
    return 0;
 800206c:	2000      	movs	r0, #0
 800206e:	e7dd      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
        return -1;
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	e7da      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002076:	f04f 30ff 	mov.w	r0, #4294967295
 800207a:	e7d7      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	e7d4      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002082:	f04f 30ff 	mov.w	r0, #4294967295
 8002086:	e7d1      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	e7ce      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 800208e:	f04f 30ff 	mov.w	r0, #4294967295
 8002092:	e7cb      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002094:	58022000 	.word	0x58022000
 8002098:	58020000 	.word	0x58020000
 800209c:	240013f8 	.word	0x240013f8

080020a0 <SPI_WIFI_ReceiveData>:
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	b083      	sub	sp, #12
 80020a4:	4605      	mov	r5, r0
 80020a6:	460e      	mov	r6, r1
 80020a8:	4617      	mov	r7, r2
    WIFI_DISABLE_NSS();
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	482b      	ldr	r0, [pc, #172]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 80020b2:	f005 fa80 	bl	80075b6 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80020b6:	200a      	movs	r0, #10
 80020b8:	f7ff ff08 	bl	8001ecc <SPI_WIFI_DelayUs>
    if (wait_cmddata_rdy_rising_event(timeout) < 0)
 80020bc:	4638      	mov	r0, r7
 80020be:	f7ff feef 	bl	8001ea0 <wait_cmddata_rdy_rising_event>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	db48      	blt.n	8002158 <SPI_WIFI_ReceiveData+0xb8>
    WIFI_ENABLE_NSS();
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 80020ce:	f005 fa72 	bl	80075b6 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(30);
 80020d2:	201e      	movs	r0, #30
 80020d4:	f7ff fefa 	bl	8001ecc <SPI_WIFI_DelayUs>
    int16_t length = 0;
 80020d8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80020da:	e016      	b.n	800210a <SPI_WIFI_ReceiveData+0x6a>
            spi_rx_event = 1;
 80020dc:	2201      	movs	r2, #1
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <SPI_WIFI_ReceiveData+0xc4>)
 80020e0:	601a      	str	r2, [r3, #0]
            if (HAL_SPI_Receive_IT(&hspi2, tmp, 1) != HAL_OK)
 80020e2:	a901      	add	r1, sp, #4
 80020e4:	4820      	ldr	r0, [pc, #128]	; (8002168 <SPI_WIFI_ReceiveData+0xc8>)
 80020e6:	f008 ffbd 	bl	800b064 <HAL_SPI_Receive_IT>
 80020ea:	bb08      	cbnz	r0, 8002130 <SPI_WIFI_ReceiveData+0x90>
            wait_spi_rx_event(timeout);
 80020ec:	4638      	mov	r0, r7
 80020ee:	f7ff ff2f 	bl	8001f50 <wait_spi_rx_event>
            pData[0] = tmp[0];
 80020f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020f6:	702b      	strb	r3, [r5, #0]
            pData[1] = tmp[1];
 80020f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80020fc:	706b      	strb	r3, [r5, #1]
            length += 2;
 80020fe:	3402      	adds	r4, #2
 8002100:	b224      	sxth	r4, r4
            pData  += 2;
 8002102:	3502      	adds	r5, #2
            if (length >= ES_WIFI_DATA_SIZE)
 8002104:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 8002108:	da1b      	bge.n	8002142 <SPI_WIFI_ReceiveData+0xa2>
    while (WIFI_IS_CMDDATA_READY())
 800210a:	2120      	movs	r1, #32
 800210c:	4817      	ldr	r0, [pc, #92]	; (800216c <SPI_WIFI_ReceiveData+0xcc>)
 800210e:	f005 fa4b 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002112:	2801      	cmp	r0, #1
 8002114:	d103      	bne.n	800211e <SPI_WIFI_ReceiveData+0x7e>
        if ((length < len) || (!len))
 8002116:	42b4      	cmp	r4, r6
 8002118:	dbe0      	blt.n	80020dc <SPI_WIFI_ReceiveData+0x3c>
 800211a:	2e00      	cmp	r6, #0
 800211c:	d0de      	beq.n	80020dc <SPI_WIFI_ReceiveData+0x3c>
    WIFI_DISABLE_NSS();
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002124:	480e      	ldr	r0, [pc, #56]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 8002126:	f005 fa46 	bl	80075b6 <HAL_GPIO_WritePin>
}
 800212a:	4620      	mov	r0, r4
 800212c:	b003      	add	sp, #12
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                WIFI_DISABLE_NSS();
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 8002138:	f005 fa3d 	bl	80075b6 <HAL_GPIO_WritePin>
                return ES_WIFI_ERROR_SPI_FAILED;
 800213c:	f04f 34ff 	mov.w	r4, #4294967295
 8002140:	e7f3      	b.n	800212a <SPI_WIFI_ReceiveData+0x8a>
                WIFI_DISABLE_NSS();
 8002142:	2201      	movs	r2, #1
 8002144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 800214a:	f005 fa34 	bl	80075b6 <HAL_GPIO_WritePin>
                SPI_WIFI_ResetModule();
 800214e:	f7ff ff2b 	bl	8001fa8 <SPI_WIFI_ResetModule>
                return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002152:	f06f 0403 	mvn.w	r4, #3
 8002156:	e7e8      	b.n	800212a <SPI_WIFI_ReceiveData+0x8a>
        return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002158:	f06f 0402 	mvn.w	r4, #2
 800215c:	e7e5      	b.n	800212a <SPI_WIFI_ReceiveData+0x8a>
 800215e:	bf00      	nop
 8002160:	58020000 	.word	0x58020000
 8002164:	24001b30 	.word	0x24001b30
 8002168:	240013f8 	.word	0x240013f8
 800216c:	58022000 	.word	0x58022000

08002170 <SPI_WIFI_DeInit>:
{
 8002170:	b508      	push	{r3, lr}
    HAL_SPI_DeInit(&hspi2);
 8002172:	4802      	ldr	r0, [pc, #8]	; (800217c <SPI_WIFI_DeInit+0xc>)
 8002174:	f008 fb2a 	bl	800a7cc <HAL_SPI_DeInit>
}
 8002178:	2000      	movs	r0, #0
 800217a:	bd08      	pop	{r3, pc}
 800217c:	240013f8 	.word	0x240013f8

08002180 <SPI_WIFI_MspInit>:
{
 8002180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002184:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002186:	4b4e      	ldr	r3, [pc, #312]	; (80022c0 <SPI_WIFI_MspInit+0x140>)
 8002188:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800218c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002190:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002194:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002198:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_FORCE_RESET();
 80021a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_SPI2_RELEASE_RESET();
 80021ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021c4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021c8:	f002 0201 	and.w	r2, r2, #1
 80021cc:	9202      	str	r2, [sp, #8]
 80021ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021d4:	f042 0204 	orr.w	r2, r2, #4
 80021d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021e0:	f002 0204 	and.w	r2, r2, #4
 80021e4:	9203      	str	r2, [sp, #12]
 80021e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 8002200:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80022c4 <SPI_WIFI_MspInit+0x144>
 8002204:	2200      	movs	r2, #0
 8002206:	2104      	movs	r1, #4
 8002208:	4640      	mov	r0, r8
 800220a:	f005 f9d4 	bl	80075b6 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       = GPIO_PIN_2;
 800220e:	f04f 0904 	mov.w	r9, #4
 8002212:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002216:	2501      	movs	r5, #1
 8002218:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 800221a:	2400      	movs	r4, #0
 800221c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800221e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002220:	a905      	add	r1, sp, #20
 8002222:	4640      	mov	r0, r8
 8002224:	f005 f808 	bl	8007238 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_5;
 8002228:	2320      	movs	r3, #32
 800222a:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800222c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002230:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002232:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002234:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002236:	a905      	add	r1, sp, #20
 8002238:	4640      	mov	r0, r8
 800223a:	f004 fffd 	bl	8007238 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_1;
 800223e:	2702      	movs	r7, #2
 8002240:	9705      	str	r7, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002242:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002244:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002246:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002248:	2605      	movs	r6, #5
 800224a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 800224c:	a905      	add	r1, sp, #20
 800224e:	4640      	mov	r0, r8
 8002250:	f004 fff2 	bl	8007238 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002254:	f5a8 5800 	sub.w	r8, r8, #8192	; 0x2000
 8002258:	462a      	mov	r2, r5
 800225a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225e:	4640      	mov	r0, r8
 8002260:	f005 f9a9 	bl	80075b6 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       =  GPIO_PIN_11;
 8002264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002268:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800226a:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 800226c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800226e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002270:	a905      	add	r1, sp, #20
 8002272:	4640      	mov	r0, r8
 8002274:	f004 ffe0 	bl	8007238 <HAL_GPIO_Init>
    GPIO_Init.Pin       =  GPIO_PIN_12;
 8002278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227c:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800227e:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002280:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002282:	9508      	str	r5, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002284:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002286:	a905      	add	r1, sp, #20
 8002288:	4640      	mov	r0, r8
 800228a:	f004 ffd5 	bl	8007238 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_3;
 800228e:	2308      	movs	r3, #8
 8002290:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002292:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002294:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002296:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002298:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 800229a:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 800229e:	a905      	add	r1, sp, #20
 80022a0:	4640      	mov	r0, r8
 80022a2:	f004 ffc9 	bl	8007238 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_2;
 80022a6:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80022aa:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_PULLUP;
 80022ac:	9507      	str	r5, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80022ae:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 80022b0:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 80022b2:	a905      	add	r1, sp, #20
 80022b4:	4640      	mov	r0, r8
 80022b6:	f004 ffbf 	bl	8007238 <HAL_GPIO_Init>
}
 80022ba:	b00b      	add	sp, #44	; 0x2c
 80022bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58022000 	.word	0x58022000

080022c8 <SPI_WIFI_Init>:
{
 80022c8:	b510      	push	{r4, lr}
    if (mode == ES_WIFI_INIT)
 80022ca:	bb78      	cbnz	r0, 800232c <SPI_WIFI_Init+0x64>
        hspi2.Instance               = SPI2;
 80022cc:	4c1a      	ldr	r4, [pc, #104]	; (8002338 <SPI_WIFI_Init+0x70>)
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <SPI_WIFI_Init+0x74>)
 80022d0:	6023      	str	r3, [r4, #0]
        SPI_WIFI_MspInit(&hspi2);
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ff54 	bl	8002180 <SPI_WIFI_MspInit>
        hspi2.Init.Mode              = SPI_MODE_MASTER;
 80022d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022dc:	6063      	str	r3, [r4, #4]
        hspi2.Init.Direction         = SPI_DIRECTION_2LINES;
 80022de:	2300      	movs	r3, #0
 80022e0:	60a3      	str	r3, [r4, #8]
        hspi2.Init.DataSize          = SPI_DATASIZE_16BIT;
 80022e2:	220f      	movs	r2, #15
 80022e4:	60e2      	str	r2, [r4, #12]
        hspi2.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80022e6:	6123      	str	r3, [r4, #16]
        hspi2.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80022e8:	6163      	str	r3, [r4, #20]
        hspi2.Init.NSS               = SPI_NSS_SOFT;
 80022ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ee:	61a2      	str	r2, [r4, #24]
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80022f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f4:	61e2      	str	r2, [r4, #28]
        hspi2.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80022f6:	6223      	str	r3, [r4, #32]
        hspi2.Init.TIMode            = SPI_TIMODE_DISABLE;
 80022f8:	6263      	str	r3, [r4, #36]	; 0x24
        hspi2.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80022fa:	62a3      	str	r3, [r4, #40]	; 0x28
        hspi2.Init.CRCPolynomial     = 0;
 80022fc:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022fe:	4620      	mov	r0, r4
 8002300:	f008 f9b0 	bl	800a664 <HAL_SPI_Init>
 8002304:	b9a8      	cbnz	r0, 8002332 <SPI_WIFI_Init+0x6a>
        HAL_NVIC_SetPriority((IRQn_Type)DATA_READY_IRQ, SPI_INTERFACE_PRIO, 0x00);
 8002306:	2200      	movs	r2, #0
 8002308:	4611      	mov	r1, r2
 800230a:	2017      	movs	r0, #23
 800230c:	f004 fbdc 	bl	8006ac8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)DATA_READY_IRQ);
 8002310:	2017      	movs	r0, #23
 8002312:	f004 fc0f 	bl	8006b34 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority((IRQn_Type)SPI2_IRQn, SPI_INTERFACE_PRIO, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	4611      	mov	r1, r2
 800231a:	2024      	movs	r0, #36	; 0x24
 800231c:	f004 fbd4 	bl	8006ac8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)SPI2_IRQn);
 8002320:	2024      	movs	r0, #36	; 0x24
 8002322:	f004 fc07 	bl	8006b34 <HAL_NVIC_EnableIRQ>
        SPI_WIFI_DelayUs(10);
 8002326:	200a      	movs	r0, #10
 8002328:	f7ff fdd0 	bl	8001ecc <SPI_WIFI_DelayUs>
    rc = SPI_WIFI_ResetModule();
 800232c:	f7ff fe3c 	bl	8001fa8 <SPI_WIFI_ResetModule>
}
 8002330:	bd10      	pop	{r4, pc}
            return -1;
 8002332:	f04f 30ff 	mov.w	r0, #4294967295
 8002336:	e7fb      	b.n	8002330 <SPI_WIFI_Init+0x68>
 8002338:	240013f8 	.word	0x240013f8
 800233c:	40003800 	.word	0x40003800

08002340 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_SPI_RxCpltCallback+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b113      	cbz	r3, 800234c <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8002346:	4b02      	ldr	r3, [pc, #8]	; (8002350 <HAL_SPI_RxCpltCallback+0x10>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    }
}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	24001b30 	.word	0x24001b30

08002354 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_SPI_TxCpltCallback+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b113      	cbz	r3, 8002360 <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 800235a:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_SPI_TxCpltCallback+0x10>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    }
}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	24001b34 	.word	0x24001b34

08002368 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
    if (cmddata_rdy_rising_event == 1)
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <SPI_WIFI_ISR+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d000      	beq.n	8002372 <SPI_WIFI_ISR+0xa>
    {
        SEM_SIGNAL(cmddata_rdy_rising_sem);
        cmddata_rdy_rising_event = 0;
    }
}
 8002370:	4770      	bx	lr
        cmddata_rdy_rising_event = 0;
 8002372:	4b02      	ldr	r3, [pc, #8]	; (800237c <SPI_WIFI_ISR+0x14>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	e7fa      	b.n	8002370 <SPI_WIFI_ISR+0x8>
 800237a:	bf00      	nop
 800237c:	24001b28 	.word	0x24001b28

08002380 <wait_cmddata_rdy_high>:
{
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002384:	f004 fb74 	bl	8006a70 <HAL_GetTick>
 8002388:	4604      	mov	r4, r0
    while (WIFI_IS_CMDDATA_READY() == 0)
 800238a:	e001      	b.n	8002390 <wait_cmddata_rdy_high+0x10>
        SPI_WIFI_ISR();
 800238c:	f7ff ffec 	bl	8002368 <SPI_WIFI_ISR>
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002390:	2120      	movs	r1, #32
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <wait_cmddata_rdy_high+0x30>)
 8002394:	f005 f908 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002398:	2801      	cmp	r0, #1
 800239a:	d007      	beq.n	80023ac <wait_cmddata_rdy_high+0x2c>
        if ((HAL_GetTick() - tickstart) > timeout)
 800239c:	f004 fb68 	bl	8006a70 <HAL_GetTick>
 80023a0:	1b00      	subs	r0, r0, r4
 80023a2:	42a8      	cmp	r0, r5
 80023a4:	d9f2      	bls.n	800238c <wait_cmddata_rdy_high+0xc>
            return -1;
 80023a6:	f04f 30ff 	mov.w	r0, #4294967295
 80023aa:	e000      	b.n	80023ae <wait_cmddata_rdy_high+0x2e>
    return 0;
 80023ac:	2000      	movs	r0, #0
}
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	58022000 	.word	0x58022000

080023b4 <SPI_WIFI_SendData>:
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	4606      	mov	r6, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	4615      	mov	r5, r2
    if (wait_cmddata_rdy_high(timeout) < 0)
 80023be:	4610      	mov	r0, r2
 80023c0:	f7ff ffde 	bl	8002380 <wait_cmddata_rdy_high>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	db47      	blt.n	8002458 <SPI_WIFI_SendData+0xa4>
    cmddata_rdy_rising_event = 1;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <SPI_WIFI_SendData+0xac>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    WIFI_ENABLE_NSS();
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d4:	4823      	ldr	r0, [pc, #140]	; (8002464 <SPI_WIFI_SendData+0xb0>)
 80023d6:	f005 f8ee 	bl	80075b6 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80023da:	200a      	movs	r0, #10
 80023dc:	f7ff fd76 	bl	8001ecc <SPI_WIFI_DelayUs>
    if (len > 1)
 80023e0:	2c01      	cmp	r4, #1
 80023e2:	d805      	bhi.n	80023f0 <SPI_WIFI_SendData+0x3c>
    if (len & 1)
 80023e4:	f014 0f01 	tst.w	r4, #1
 80023e8:	d119      	bne.n	800241e <SPI_WIFI_SendData+0x6a>
    return len;
 80023ea:	b220      	sxth	r0, r4
}
 80023ec:	b002      	add	sp, #8
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
        spi_tx_event = 1;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <SPI_WIFI_SendData+0xb4>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)pdata, len / 2) != HAL_OK)
 80023f6:	fa24 f202 	lsr.w	r2, r4, r2
 80023fa:	4631      	mov	r1, r6
 80023fc:	481b      	ldr	r0, [pc, #108]	; (800246c <SPI_WIFI_SendData+0xb8>)
 80023fe:	f008 fca7 	bl	800ad50 <HAL_SPI_Transmit_IT>
 8002402:	b918      	cbnz	r0, 800240c <SPI_WIFI_SendData+0x58>
        wait_spi_tx_event(timeout);
 8002404:	4628      	mov	r0, r5
 8002406:	f7ff fdb9 	bl	8001f7c <wait_spi_tx_event>
 800240a:	e7eb      	b.n	80023e4 <SPI_WIFI_SendData+0x30>
            WIFI_DISABLE_NSS();
 800240c:	2201      	movs	r2, #1
 800240e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002412:	4814      	ldr	r0, [pc, #80]	; (8002464 <SPI_WIFI_SendData+0xb0>)
 8002414:	f005 f8cf 	bl	80075b6 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	e7e6      	b.n	80023ec <SPI_WIFI_SendData+0x38>
        Padding[0] = pdata[len - 1];
 800241e:	1930      	adds	r0, r6, r4
 8002420:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002424:	f88d 3004 	strb.w	r3, [sp, #4]
        Padding[1] = '\n';
 8002428:	230a      	movs	r3, #10
 800242a:	f88d 3005 	strb.w	r3, [sp, #5]
        spi_tx_event = 1;
 800242e:	2201      	movs	r2, #1
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <SPI_WIFI_SendData+0xb4>)
 8002432:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, Padding, 1) != HAL_OK)
 8002434:	a901      	add	r1, sp, #4
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <SPI_WIFI_SendData+0xb8>)
 8002438:	f008 fc8a 	bl	800ad50 <HAL_SPI_Transmit_IT>
 800243c:	b918      	cbnz	r0, 8002446 <SPI_WIFI_SendData+0x92>
        wait_spi_tx_event(timeout);
 800243e:	4628      	mov	r0, r5
 8002440:	f7ff fd9c 	bl	8001f7c <wait_spi_tx_event>
 8002444:	e7d1      	b.n	80023ea <SPI_WIFI_SendData+0x36>
            WIFI_DISABLE_NSS();
 8002446:	2201      	movs	r2, #1
 8002448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <SPI_WIFI_SendData+0xb0>)
 800244e:	f005 f8b2 	bl	80075b6 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002452:	f04f 30ff 	mov.w	r0, #4294967295
 8002456:	e7c9      	b.n	80023ec <SPI_WIFI_SendData+0x38>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	e7c6      	b.n	80023ec <SPI_WIFI_SendData+0x38>
 800245e:	bf00      	nop
 8002460:	24001b28 	.word	0x24001b28
 8002464:	58020000 	.word	0x58020000
 8002468:	24001b34 	.word	0x24001b34
 800246c:	240013f8 	.word	0x240013f8

08002470 <wifi_probe>:
  * @brief  probe function to register wifi to connectivity framwotk
  * @param  None
  * @retval None
  */
int32_t wifi_probe(void **ll_drv_context)
{
 8002470:	b510      	push	{r4, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	4604      	mov	r4, r0
    if (ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <wifi_probe+0x2c>)
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <wifi_probe+0x30>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <wifi_probe+0x34>)
 8002480:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <wifi_probe+0x38>)
 8002482:	490a      	ldr	r1, [pc, #40]	; (80024ac <wifi_probe+0x3c>)
 8002484:	480a      	ldr	r0, [pc, #40]	; (80024b0 <wifi_probe+0x40>)
 8002486:	f001 feef 	bl	8004268 <ES_WIFI_RegisterBusIO>
 800248a:	b918      	cbnz	r0, 8002494 <wifi_probe+0x24>
                              SPI_WIFI_DeInit,
                              HAL_Delay,
                              SPI_WIFI_SendData,
                              SPI_WIFI_ReceiveData) == 0)
    {
        *ll_drv_context = &EsWifiObj;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <wifi_probe+0x40>)
 800248e:	6023      	str	r3, [r4, #0]
        return 0;
    }
    return -1;
}
 8002490:	b002      	add	sp, #8
 8002492:	bd10      	pop	{r4, pc}
    return -1;
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	e7fa      	b.n	8002490 <wifi_probe+0x20>
 800249a:	bf00      	nop
 800249c:	080020a1 	.word	0x080020a1
 80024a0:	080023b5 	.word	0x080023b5
 80024a4:	08006a7d 	.word	0x08006a7d
 80024a8:	08002171 	.word	0x08002171
 80024ac:	080022c9 	.word	0x080022c9
 80024b0:	24001480 	.word	0x24001480

080024b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 80024b4:	2820      	cmp	r0, #32
 80024b6:	d000      	beq.n	80024ba <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 80024b8:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 80024ba:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <HAL_GPIO_EXTI_Callback+0x10>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	e7fa      	b.n	80024b8 <HAL_GPIO_EXTI_Callback+0x4>
 80024c2:	bf00      	nop
 80024c4:	24001b28 	.word	0x24001b28

080024c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b500      	push	{lr}
 80024ca:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_MspInit+0x30>)
 80024ce:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 80024d2:	f042 0202 	orr.w	r2, r2, #2
 80024d6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 80024da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	210f      	movs	r1, #15
 80024ea:	f06f 0001 	mvn.w	r0, #1
 80024ee:	f004 faeb 	bl	8006ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f2:	b003      	add	sp, #12
 80024f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024f8:	58024400 	.word	0x58024400

080024fc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80024fc:	6802      	ldr	r2, [r0, #0]
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_CRC_MspInit+0x2c>)
 8002500:	429a      	cmp	r2, r3
 8002502:	d000      	beq.n	8002506 <HAL_CRC_MspInit+0xa>
 8002504:	4770      	bx	lr
{
 8002506:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_CRC_MspInit+0x30>)
 800250a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002516:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800251a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002522:	b002      	add	sp, #8
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023000 	.word	0x40023000
 800252c:	58024400 	.word	0x58024400

08002530 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002530:	6802      	ldr	r2, [r0, #0]
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_DMA2D_MspInit+0x40>)
 8002534:	429a      	cmp	r2, r3
 8002536:	d000      	beq.n	800253a <HAL_DMA2D_MspInit+0xa>
 8002538:	4770      	bx	lr
{
 800253a:	b500      	push	{lr}
 800253c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_DMA2D_MspInit+0x44>)
 8002540:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002544:	f042 0210 	orr.w	r2, r2, #16
 8002548:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800254c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2105      	movs	r1, #5
 800255c:	205a      	movs	r0, #90	; 0x5a
 800255e:	f004 fab3 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002562:	205a      	movs	r0, #90	; 0x5a
 8002564:	f004 fae6 	bl	8006b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002568:	b003      	add	sp, #12
 800256a:	f85d fb04 	ldr.w	pc, [sp], #4
 800256e:	bf00      	nop
 8002570:	52001000 	.word	0x52001000
 8002574:	58024400 	.word	0x58024400

08002578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002578:	b510      	push	{r4, lr}
 800257a:	b0b6      	sub	sp, #216	; 0xd8
 800257c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	2100      	movs	r1, #0
 8002580:	9131      	str	r1, [sp, #196]	; 0xc4
 8002582:	9132      	str	r1, [sp, #200]	; 0xc8
 8002584:	9133      	str	r1, [sp, #204]	; 0xcc
 8002586:	9134      	str	r1, [sp, #208]	; 0xd0
 8002588:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800258a:	22b8      	movs	r2, #184	; 0xb8
 800258c:	a803      	add	r0, sp, #12
 800258e:	f01a f875 	bl	801c67c <memset>
  if(hi2c->Instance==I2C4)
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_I2C_MspInit+0x8c>)
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800259a:	b036      	add	sp, #216	; 0xd8
 800259c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800259e:	2310      	movs	r3, #16
 80025a0:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	a803      	add	r0, sp, #12
 80025a4:	f007 fa82 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 80025a8:	bb40      	cbnz	r0, 80025fc <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025aa:	4c17      	ldr	r4, [pc, #92]	; (8002608 <HAL_I2C_MspInit+0x90>)
 80025ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80025b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80025c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025c8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d2:	2302      	movs	r3, #2
 80025d4:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80025d6:	2304      	movs	r3, #4
 80025d8:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025da:	a931      	add	r1, sp, #196	; 0xc4
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <HAL_I2C_MspInit+0x94>)
 80025de:	f004 fe2b 	bl	8007238 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80025e2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 80025e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ea:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 80025ee:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	9b02      	ldr	r3, [sp, #8]
}
 80025fa:	e7ce      	b.n	800259a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80025fc:	f7ff fc4e 	bl	8001e9c <Error_Handler>
 8002600:	e7d3      	b.n	80025aa <HAL_I2C_MspInit+0x32>
 8002602:	bf00      	nop
 8002604:	58001c00 	.word	0x58001c00
 8002608:	58024400 	.word	0x58024400
 800260c:	58020c00 	.word	0x58020c00

08002610 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8002610:	6802      	ldr	r2, [r0, #0]
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_I2C_MspDeInit+0x34>)
 8002614:	429a      	cmp	r2, r3
 8002616:	d000      	beq.n	800261a <HAL_I2C_MspDeInit+0xa>
 8002618:	4770      	bx	lr
{
 800261a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_I2C_MspDeInit+0x38>)
 800261e:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8002622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002626:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800262a:	4c08      	ldr	r4, [pc, #32]	; (800264c <HAL_I2C_MspDeInit+0x3c>)
 800262c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002630:	4620      	mov	r0, r4
 8002632:	f004 ff11 	bl	8007458 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263a:	4620      	mov	r0, r4
 800263c:	f004 ff0c 	bl	8007458 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002640:	bd10      	pop	{r4, pc}
 8002642:	bf00      	nop
 8002644:	58001c00 	.word	0x58001c00
 8002648:	58024400 	.word	0x58024400
 800264c:	58020c00 	.word	0x58020c00

08002650 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	b0b8      	sub	sp, #224	; 0xe0
 8002654:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	2100      	movs	r1, #0
 8002658:	9133      	str	r1, [sp, #204]	; 0xcc
 800265a:	9134      	str	r1, [sp, #208]	; 0xd0
 800265c:	9135      	str	r1, [sp, #212]	; 0xd4
 800265e:	9136      	str	r1, [sp, #216]	; 0xd8
 8002660:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002662:	22b8      	movs	r2, #184	; 0xb8
 8002664:	a805      	add	r0, sp, #20
 8002666:	f01a f809 	bl	801c67c <memset>
  if(hltdc->Instance==LTDC)
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_LTDC_MspInit+0x114>)
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002672:	b038      	add	sp, #224	; 0xe0
 8002674:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002676:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800267a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800267c:	2318      	movs	r3, #24
 800267e:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002680:	23c9      	movs	r3, #201	; 0xc9
 8002682:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002684:	2302      	movs	r3, #2
 8002686:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002688:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 800268a:	2315      	movs	r3, #21
 800268c:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800268e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002692:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002694:	f241 5356 	movw	r3, #5462	; 0x1556
 8002698:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269a:	a805      	add	r0, sp, #20
 800269c:	f007 fa06 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d15c      	bne.n	800275e <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026a4:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_LTDC_MspInit+0x118>)
 80026a6:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80026b2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80026b6:	f002 0208 	and.w	r2, r2, #8
 80026ba:	9201      	str	r2, [sp, #4]
 80026bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80026be:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80026ca:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026ce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80026d2:	9202      	str	r2, [sp, #8]
 80026d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026d6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80026e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80026ea:	9203      	str	r2, [sp, #12]
 80026ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026ee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80026fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	9304      	str	r3, [sp, #16]
 8002704:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002706:	23ff      	movs	r3, #255	; 0xff
 8002708:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2602      	movs	r6, #2
 800270c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2400      	movs	r4, #0
 8002710:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002714:	250e      	movs	r5, #14
 8002716:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002718:	a933      	add	r1, sp, #204	; 0xcc
 800271a:	4814      	ldr	r0, [pc, #80]	; (800276c <HAL_LTDC_MspInit+0x11c>)
 800271c:	f004 fd8c 	bl	8007238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8002720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002724:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800272c:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800272e:	a933      	add	r1, sp, #204	; 0xcc
 8002730:	480f      	ldr	r0, [pc, #60]	; (8002770 <HAL_LTDC_MspInit+0x120>)
 8002732:	f004 fd81 	bl	8007238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8002736:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800273a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002742:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002744:	a933      	add	r1, sp, #204	; 0xcc
 8002746:	480b      	ldr	r0, [pc, #44]	; (8002774 <HAL_LTDC_MspInit+0x124>)
 8002748:	f004 fd76 	bl	8007238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800274c:	4622      	mov	r2, r4
 800274e:	2105      	movs	r1, #5
 8002750:	2058      	movs	r0, #88	; 0x58
 8002752:	f004 f9b9 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002756:	2058      	movs	r0, #88	; 0x58
 8002758:	f004 f9ec 	bl	8006b34 <HAL_NVIC_EnableIRQ>
}
 800275c:	e789      	b.n	8002672 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 800275e:	f7ff fb9d 	bl	8001e9c <Error_Handler>
 8002762:	e79f      	b.n	80026a4 <HAL_LTDC_MspInit+0x54>
 8002764:	50001000 	.word	0x50001000
 8002768:	58024400 	.word	0x58024400
 800276c:	58022800 	.word	0x58022800
 8002770:	58022400 	.word	0x58022400
 8002774:	58022000 	.word	0x58022000

08002778 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002778:	b510      	push	{r4, lr}
 800277a:	b0b0      	sub	sp, #192	; 0xc0
 800277c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800277e:	22b8      	movs	r2, #184	; 0xb8
 8002780:	2100      	movs	r1, #0
 8002782:	a802      	add	r0, sp, #8
 8002784:	f019 ff7a 	bl	801c67c <memset>
  if(hospi->Instance==OCTOSPI1)
 8002788:	6822      	ldr	r2, [r4, #0]
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_OSPI_MspInit+0x8c>)
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002790:	b030      	add	sp, #192	; 0xc0
 8002792:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002798:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800279a:	2318      	movs	r3, #24
 800279c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800279e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80027a2:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80027a4:	2302      	movs	r3, #2
 80027a6:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80027a8:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80027aa:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80027ac:	2320      	movs	r3, #32
 80027ae:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80027b0:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b2:	a802      	add	r0, sp, #8
 80027b4:	f007 f97a 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 80027b8:	bb08      	cbnz	r0, 80027fe <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_OSPI_MspInit+0x90>)
 80027bc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80027c0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80027c4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80027c8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80027cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80027d4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80027d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027dc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80027e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80027e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2105      	movs	r1, #5
 80027f0:	205c      	movs	r0, #92	; 0x5c
 80027f2:	f004 f969 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80027f6:	205c      	movs	r0, #92	; 0x5c
 80027f8:	f004 f99c 	bl	8006b34 <HAL_NVIC_EnableIRQ>
}
 80027fc:	e7c8      	b.n	8002790 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80027fe:	f7ff fb4d 	bl	8001e9c <Error_Handler>
 8002802:	e7da      	b.n	80027ba <HAL_OSPI_MspInit+0x42>
 8002804:	52005000 	.word	0x52005000
 8002808:	58024400 	.word	0x58024400

0800280c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800280c:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 800280e:	6802      	ldr	r2, [r0, #0]
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_OSPI_MspDeInit+0x30>)
 8002812:	429a      	cmp	r2, r3
 8002814:	d000      	beq.n	8002818 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002816:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_OSPI_MspDeInit+0x34>)
 800281a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800281e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002822:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002826:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800282a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800282e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8002832:	205c      	movs	r0, #92	; 0x5c
 8002834:	f004 f98c 	bl	8006b50 <HAL_NVIC_DisableIRQ>
}
 8002838:	e7ed      	b.n	8002816 <HAL_OSPI_MspDeInit+0xa>
 800283a:	bf00      	nop
 800283c:	52005000 	.word	0x52005000
 8002840:	58024400 	.word	0x58024400

08002844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	b0b6      	sub	sp, #216	; 0xd8
 8002848:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284a:	2100      	movs	r1, #0
 800284c:	9131      	str	r1, [sp, #196]	; 0xc4
 800284e:	9132      	str	r1, [sp, #200]	; 0xc8
 8002850:	9133      	str	r1, [sp, #204]	; 0xcc
 8002852:	9134      	str	r1, [sp, #208]	; 0xd0
 8002854:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002856:	22b8      	movs	r2, #184	; 0xb8
 8002858:	a803      	add	r0, sp, #12
 800285a:	f019 ff0f 	bl	801c67c <memset>
  if(hspi->Instance==SPI2)
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_SPI_MspInit+0xc8>)
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002866:	b036      	add	sp, #216	; 0xd8
 8002868:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800286a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286e:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002870:	a803      	add	r0, sp, #12
 8002872:	f007 f91b 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 8002876:	2800      	cmp	r0, #0
 8002878:	d145      	bne.n	8002906 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_SPI_MspInit+0xcc>)
 800287c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002884:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002888:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800288c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002890:	9200      	str	r2, [sp, #0]
 8002892:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80028a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80028a4:	f002 0201 	and.w	r2, r2, #1
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80028b0:	f042 0204 	orr.w	r2, r2, #4
 80028b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80028b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	9302      	str	r3, [sp, #8]
 80028c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2602      	movs	r6, #2
 80028cc:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2400      	movs	r4, #0
 80028d0:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028d4:	2505      	movs	r5, #5
 80028d6:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d8:	a931      	add	r1, sp, #196	; 0xc4
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <HAL_SPI_MspInit+0xd0>)
 80028dc:	f004 fcac 	bl	8007238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028e0:	230c      	movs	r3, #12
 80028e2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ea:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ec:	a931      	add	r1, sp, #196	; 0xc4
 80028ee:	480a      	ldr	r0, [pc, #40]	; (8002918 <HAL_SPI_MspInit+0xd4>)
 80028f0:	f004 fca2 	bl	8007238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80028f4:	4622      	mov	r2, r4
 80028f6:	4621      	mov	r1, r4
 80028f8:	2024      	movs	r0, #36	; 0x24
 80028fa:	f004 f8e5 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80028fe:	2024      	movs	r0, #36	; 0x24
 8002900:	f004 f918 	bl	8006b34 <HAL_NVIC_EnableIRQ>
}
 8002904:	e7af      	b.n	8002866 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8002906:	f7ff fac9 	bl	8001e9c <Error_Handler>
 800290a:	e7b6      	b.n	800287a <HAL_SPI_MspInit+0x36>
 800290c:	40003800 	.word	0x40003800
 8002910:	58024400 	.word	0x58024400
 8002914:	58020000 	.word	0x58020000
 8002918:	58020800 	.word	0x58020800

0800291c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800291c:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 800291e:	6802      	ldr	r2, [r0, #0]
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_SPI_MspDeInit+0x34>)
 8002922:	429a      	cmp	r2, r3
 8002924:	d000      	beq.n	8002928 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8002926:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_SPI_MspDeInit+0x38>)
 800292a:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 800292e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002932:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <HAL_SPI_MspDeInit+0x3c>)
 800293c:	f004 fd8c 	bl	8007458 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8002940:	210c      	movs	r1, #12
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <HAL_SPI_MspDeInit+0x40>)
 8002944:	f004 fd88 	bl	8007458 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8002948:	2024      	movs	r0, #36	; 0x24
 800294a:	f004 f901 	bl	8006b50 <HAL_NVIC_DisableIRQ>
}
 800294e:	e7ea      	b.n	8002926 <HAL_SPI_MspDeInit+0xa>
 8002950:	40003800 	.word	0x40003800
 8002954:	58024400 	.word	0x58024400
 8002958:	58020000 	.word	0x58020000
 800295c:	58020800 	.word	0x58020800

08002960 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002960:	280f      	cmp	r0, #15
 8002962:	d901      	bls.n	8002968 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002966:	4770      	bx	lr
{
 8002968:	b510      	push	{r4, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800296e:	2200      	movs	r2, #0
 8002970:	4601      	mov	r1, r0
 8002972:	2036      	movs	r0, #54	; 0x36
 8002974:	f004 f8a8 	bl	8006ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002978:	2036      	movs	r0, #54	; 0x36
 800297a:	f004 f8db 	bl	8006b34 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_InitTick+0x88>)
 8002980:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_InitTick+0x8c>)
 8002984:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002988:	f042 0210 	orr.w	r2, r2, #16
 800298c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002990:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800299c:	a901      	add	r1, sp, #4
 800299e:	a802      	add	r0, sp, #8
 80029a0:	f006 ff4e 	bl	8009840 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029a4:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029a6:	b9bb      	cbnz	r3, 80029d8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029a8:	f006 ff26 	bl	80097f8 <HAL_RCC_GetPCLK1Freq>
 80029ac:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ae:	4810      	ldr	r0, [pc, #64]	; (80029f0 <HAL_InitTick+0x90>)
 80029b0:	fba0 2303 	umull	r2, r3, r0, r3
 80029b4:	0c9b      	lsrs	r3, r3, #18
 80029b6:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 80029b8:	480e      	ldr	r0, [pc, #56]	; (80029f4 <HAL_InitTick+0x94>)
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_InitTick+0x98>)
 80029bc:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029c2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029c4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029cc:	f008 fe9c 	bl	800b708 <HAL_TIM_Base_Init>
 80029d0:	b130      	cbz	r0, 80029e0 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80029d2:	2001      	movs	r0, #1
}
 80029d4:	b00a      	add	sp, #40	; 0x28
 80029d6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029d8:	f006 ff0e 	bl	80097f8 <HAL_RCC_GetPCLK1Freq>
 80029dc:	0043      	lsls	r3, r0, #1
 80029de:	e7e6      	b.n	80029ae <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <HAL_InitTick+0x94>)
 80029e2:	f008 fcf5 	bl	800b3d0 <HAL_TIM_Base_Start_IT>
 80029e6:	e7f5      	b.n	80029d4 <HAL_InitTick+0x74>
 80029e8:	2400004c 	.word	0x2400004c
 80029ec:	58024400 	.word	0x58024400
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	24001b38 	.word	0x24001b38
 80029f8:	40001000 	.word	0x40001000

080029fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029fc:	4770      	bx	lr

080029fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <HardFault_Handler>

08002a00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <MemManage_Handler>

08002a02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler>

08002a04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler>

08002a06 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a06:	4770      	bx	lr

08002a08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_DATRDY_Pin);
 8002a0a:	2020      	movs	r0, #32
 8002a0c:	f004 fde2 	bl	80075d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a10:	bd08      	pop	{r3, pc}
	...

08002a14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002a14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002a16:	4802      	ldr	r0, [pc, #8]	; (8002a20 <SPI2_IRQHandler+0xc>)
 8002a18:	f008 fbac 	bl	800b174 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002a1c:	bd08      	pop	{r3, pc}
 8002a1e:	bf00      	nop
 8002a20:	240013f8 	.word	0x240013f8

08002a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_Pin);
 8002a26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a2a:	f004 fdd3 	bl	80075d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a2e:	bd08      	pop	{r3, pc}

08002a30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a32:	4802      	ldr	r0, [pc, #8]	; (8002a3c <TIM6_DAC_IRQHandler+0xc>)
 8002a34:	f008 fd18 	bl	800b468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a38:	bd08      	pop	{r3, pc}
 8002a3a:	bf00      	nop
 8002a3c:	24001b38 	.word	0x24001b38

08002a40 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a42:	4802      	ldr	r0, [pc, #8]	; (8002a4c <LTDC_IRQHandler+0xc>)
 8002a44:	f005 fb72 	bl	800812c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a48:	bd08      	pop	{r3, pc}
 8002a4a:	bf00      	nop
 8002a4c:	240012f4 	.word	0x240012f4

08002a50 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a52:	4802      	ldr	r0, [pc, #8]	; (8002a5c <DMA2D_IRQHandler+0xc>)
 8002a54:	f004 fad0 	bl	8006ff8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a58:	bd08      	pop	{r3, pc}
 8002a5a:	bf00      	nop
 8002a5c:	24001240 	.word	0x24001240

08002a60 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8002a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8002a62:	4802      	ldr	r0, [pc, #8]	; (8002a6c <OCTOSPI1_IRQHandler+0xc>)
 8002a64:	f005 ff6c 	bl	8008940 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8002a68:	bd08      	pop	{r3, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2400139c 	.word	0x2400139c

08002a70 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002a70:	2001      	movs	r0, #1
 8002a72:	4770      	bx	lr

08002a74 <_kill>:

int _kill(int pid, int sig)
{
 8002a74:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002a76:	f019 fc9d 	bl	801c3b4 <__errno>
 8002a7a:	2316      	movs	r3, #22
 8002a7c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	bd08      	pop	{r3, pc}

08002a84 <_exit>:

void _exit (int status)
{
 8002a84:	b508      	push	{r3, lr}
	_kill(status, -1);
 8002a86:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8a:	f7ff fff3 	bl	8002a74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a8e:	e7fe      	b.n	8002a8e <_exit+0xa>

08002a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	460c      	mov	r4, r1
 8002a94:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	2500      	movs	r5, #0
 8002a98:	e006      	b.n	8002aa8 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8002a9a:	f3af 8000 	nop.w
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8002aa6:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	42b5      	cmp	r5, r6
 8002aaa:	dbf6      	blt.n	8002a9a <_read+0xa>
	}

return len;
}
 8002aac:	4630      	mov	r0, r6
 8002aae:	bd70      	pop	{r4, r5, r6, pc}

08002ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	e004      	b.n	8002ac4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8002aba:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002abe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	42b5      	cmp	r5, r6
 8002ac6:	dbf8      	blt.n	8002aba <_write+0xa>
	}
	return len;
}
 8002ac8:	4630      	mov	r0, r6
 8002aca:	bd70      	pop	{r4, r5, r6, pc}

08002acc <_close>:

int _close(int file)
{
	return -1;
}
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002ad8:	2000      	movs	r0, #0
 8002ada:	4770      	bx	lr

08002adc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002adc:	2001      	movs	r0, #1
 8002ade:	4770      	bx	lr

08002ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	4770      	bx	lr

08002ae4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ae4:	b508      	push	{r3, lr}
 8002ae6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <_sbrk+0x34>)
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	b142      	cbz	r2, 8002b00 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <_sbrk+0x34>)
 8002af0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002af2:	4403      	add	r3, r0
 8002af4:	466a      	mov	r2, sp
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d806      	bhi.n	8002b08 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <_sbrk+0x34>)
 8002afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002afe:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002b00:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <_sbrk+0x34>)
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <_sbrk+0x38>)
 8002b04:	6011      	str	r1, [r2, #0]
 8002b06:	e7f2      	b.n	8002aee <_sbrk+0xa>
		errno = ENOMEM;
 8002b08:	f019 fc54 	bl	801c3b4 <__errno>
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	e7f3      	b.n	8002afe <_sbrk+0x1a>
 8002b16:	bf00      	nop
 8002b18:	24001b84 	.word	0x24001b84
 8002b1c:	2400bc08 	.word	0x2400bc08

08002b20 <wifi_networkInit>:
  * @brief  Network interface initialization
  * @param  none
  * @retval 0 in case of success, an error code otherwise
  */
static int wifi_networkInit(void)
{
 8002b20:	b510      	push	{r4, lr}
  if (net_if_init(&netif, es_wifi_driver_ptr, &net_handler) != NET_OK)
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <wifi_networkInit+0x44>)
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <wifi_networkInit+0x48>)
 8002b26:	6819      	ldr	r1, [r3, #0]
 8002b28:	4810      	ldr	r0, [pc, #64]	; (8002b6c <wifi_networkInit+0x4c>)
 8002b2a:	f00b fad3 	bl	800e0d4 <net_if_init>
 8002b2e:	b998      	cbnz	r0, 8002b58 <wifi_networkInit+0x38>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_INITIALIZED,STATE_TRANSITION_TIMEOUT);
 8002b30:	4c0e      	ldr	r4, [pc, #56]	; (8002b6c <wifi_networkInit+0x4c>)
 8002b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b36:	2101      	movs	r1, #1
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f00b faa4 	bl	800e086 <net_if_wait_state>
  if ( net_if_start (&netif) != NET_OK )
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f00b fadd 	bl	800e0fe <net_if_start>
 8002b44:	4604      	mov	r4, r0
 8002b46:	b950      	cbnz	r0, 8002b5e <wifi_networkInit+0x3e>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_READY,STATE_TRANSITION_TIMEOUT);
 8002b48:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	4807      	ldr	r0, [pc, #28]	; (8002b6c <wifi_networkInit+0x4c>)
 8002b50:	f00b fa99 	bl	800e086 <net_if_wait_state>

  return 0;
}
 8002b54:	4620      	mov	r0, r4
 8002b56:	bd10      	pop	{r4, pc}
    return -1;
 8002b58:	f04f 34ff 	mov.w	r4, #4294967295
 8002b5c:	e7fa      	b.n	8002b54 <wifi_networkInit+0x34>
    return -1;
 8002b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b62:	e7f7      	b.n	8002b54 <wifi_networkInit+0x34>
 8002b64:	24001d90 	.word	0x24001d90
 8002b68:	2400000c 	.word	0x2400000c
 8002b6c:	24001d98 	.word	0x24001d98

08002b70 <wifi_initialise>:
  * @brief  Initializes module wifi network interface
  * @param  none
  * @retval none
  */
void wifi_initialise(void)
{
 8002b70:	b508      	push	{r3, lr}
    wifi_networkInit();
 8002b72:	f7ff ffd5 	bl	8002b20 <wifi_networkInit>
}
 8002b76:	bd08      	pop	{r3, pc}

08002b78 <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <wifi_scan+0x28>)
 8002b82:	f00b fa13 	bl	800dfac <net_wifi_scan>
  if (ret == NET_OK)
 8002b86:	4605      	mov	r5, r0
 8002b88:	b108      	cbz	r0, 8002b8e <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8002b8e:	220a      	movs	r2, #10
 8002b90:	4621      	mov	r1, r4
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <wifi_scan+0x28>)
 8002b94:	f00b fa24 	bl	800dfe0 <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	dcf6      	bgt.n	8002b8a <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8002b9c:	4605      	mov	r5, r0
  return ret;
 8002b9e:	e7f4      	b.n	8002b8a <wifi_scan+0x12>
 8002ba0:	24001d98 	.word	0x24001d98

08002ba4 <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 8002ba4:	b500      	push	{lr}
 8002ba6:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 8002ba8:	9001      	str	r0, [sp, #4]
 8002baa:	9102      	str	r1, [sp, #8]
 8002bac:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 8002bae:	a901      	add	r1, sp, #4
 8002bb0:	4813      	ldr	r0, [pc, #76]	; (8002c00 <wifi_connect+0x5c>)
 8002bb2:	f00b fa2b 	bl	800e00c <net_wifi_set_credentials>
 8002bb6:	b9e8      	cbnz	r0, 8002bf4 <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <wifi_connect+0x5c>)
 8002bba:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00b      	beq.n	8002bda <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <wifi_connect+0x5c>)
 8002bc4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d00b      	beq.n	8002be4 <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 8002bcc:	480c      	ldr	r0, [pc, #48]	; (8002c00 <wifi_connect+0x5c>)
 8002bce:	f00b fa9b 	bl	800e108 <net_if_connect>
 8002bd2:	b990      	cbnz	r0, 8002bfa <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 8002bd4:	b005      	add	sp, #20
 8002bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <wifi_connect+0x5c>)
 8002bdc:	2205      	movs	r2, #5
 8002bde:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8002be2:	e7ee      	b.n	8002bc2 <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 8002be4:	4806      	ldr	r0, [pc, #24]	; (8002c00 <wifi_connect+0x5c>)
 8002be6:	f00b fa94 	bl	800e112 <net_if_disconnect>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d0ee      	beq.n	8002bcc <wifi_connect+0x28>
      return  -1;
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	e7ef      	b.n	8002bd4 <wifi_connect+0x30>
    return -1;
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	e7ec      	b.n	8002bd4 <wifi_connect+0x30>
    return -1;
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfe:	e7e9      	b.n	8002bd4 <wifi_connect+0x30>
 8002c00:	24001d98 	.word	0x24001d98

08002c04 <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 8002c04:	b500      	push	{lr}
 8002c06:	b083      	sub	sp, #12
    uint8_t msg;
    uint8_t retvalue;

    wifi_scan(&APs[0]);
 8002c08:	4824      	ldr	r0, [pc, #144]	; (8002c9c <esWiFi_Task+0x98>)
 8002c0a:	f7ff ffb5 	bl	8002b78 <wifi_scan>
 8002c0e:	e015      	b.n	8002c3c <esWiFi_Task+0x38>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 8002c10:	4c22      	ldr	r4, [pc, #136]	; (8002c9c <esWiFi_Task+0x98>)
 8002c12:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002c16:	2100      	movs	r1, #0
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f019 fd2f 	bl	801c67c <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff ffaa 	bl	8002b78 <wifi_scan>
 8002c24:	b950      	cbnz	r0, 8002c3c <esWiFi_Task+0x38>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f10d 0106 	add.w	r1, sp, #6
 8002c34:	481a      	ldr	r0, [pc, #104]	; (8002ca0 <esWiFi_Task+0x9c>)
 8002c36:	6800      	ldr	r0, [r0, #0]
 8002c38:	f008 ff3d 	bl	800bab6 <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	2200      	movs	r2, #0
 8002c42:	f10d 0107 	add.w	r1, sp, #7
 8002c46:	4817      	ldr	r0, [pc, #92]	; (8002ca4 <esWiFi_Task+0xa0>)
 8002c48:	6800      	ldr	r0, [r0, #0]
 8002c4a:	f008 ff74 	bl	800bb36 <osMessageQueueGet>
        switch(msg)
 8002c4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0dc      	beq.n	8002c10 <esWiFi_Task+0xc>
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d1f0      	bne.n	8002c3c <esWiFi_Task+0x38>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 8002c5a:	4813      	ldr	r0, [pc, #76]	; (8002ca8 <esWiFi_Task+0xa4>)
 8002c5c:	f00b f8e4 	bl	800de28 <net_wifi_string_to_security>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4912      	ldr	r1, [pc, #72]	; (8002cac <esWiFi_Task+0xa8>)
 8002c64:	4812      	ldr	r0, [pc, #72]	; (8002cb0 <esWiFi_Task+0xac>)
 8002c66:	f7ff ff9d 	bl	8002ba4 <wifi_connect>
 8002c6a:	b158      	cbz	r0, 8002c84 <esWiFi_Task+0x80>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8002c72:	2300      	movs	r3, #0
 8002c74:	461a      	mov	r2, r3
 8002c76:	f10d 0106 	add.w	r1, sp, #6
 8002c7a:	4809      	ldr	r0, [pc, #36]	; (8002ca0 <esWiFi_Task+0x9c>)
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f008 ff1a 	bl	800bab6 <osMessageQueuePut>
 8002c82:	e7db      	b.n	8002c3c <esWiFi_Task+0x38>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f10d 0106 	add.w	r1, sp, #6
 8002c92:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <esWiFi_Task+0x9c>)
 8002c94:	6800      	ldr	r0, [r0, #0]
 8002c96:	f008 ff0e 	bl	800bab6 <osMessageQueuePut>
 8002c9a:	e7cf      	b.n	8002c3c <esWiFi_Task+0x38>
 8002c9c:	24001b88 	.word	0x24001b88
 8002ca0:	2400120c 	.word	0x2400120c
 8002ca4:	24001214 	.word	0x24001214
 8002ca8:	24001f30 	.word	0x24001f30
 8002cac:	24001f50 	.word	0x24001f50
 8002cb0:	24001f90 	.word	0x24001f90

08002cb4 <_ZN23ApplicationFontProviderD1Ev>:
 8002cb4:	4a02      	ldr	r2, [pc, #8]	; (8002cc0 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 8002cb6:	6002      	str	r2, [r0, #0]
 8002cb8:	4a02      	ldr	r2, [pc, #8]	; (8002cc4 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 8002cba:	6002      	str	r2, [r0, #0]
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	0801e398 	.word	0x0801e398
 8002cc4:	0801dff4 	.word	0x0801dff4

08002cc8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002cc8:	b508      	push	{r3, lr}
    switch (typography)
 8002cca:	2901      	cmp	r1, #1
 8002ccc:	d008      	beq.n	8002ce0 <_ZN23ApplicationFontProvider7getFontEt+0x18>
 8002cce:	2902      	cmp	r1, #2
 8002cd0:	d00a      	beq.n	8002ce8 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8002cd2:	b109      	cbz	r1, 8002cd8 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 8002cd4:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002cd6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002cd8:	f000 fbd6 	bl	8003488 <_ZN17TypedTextDatabase8getFontsEv>
 8002cdc:	6800      	ldr	r0, [r0, #0]
 8002cde:	e7fa      	b.n	8002cd6 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002ce0:	f000 fbd2 	bl	8003488 <_ZN17TypedTextDatabase8getFontsEv>
 8002ce4:	6840      	ldr	r0, [r0, #4]
 8002ce6:	e7f6      	b.n	8002cd6 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002ce8:	f000 fbce 	bl	8003488 <_ZN17TypedTextDatabase8getFontsEv>
 8002cec:	6880      	ldr	r0, [r0, #8]
 8002cee:	e7f2      	b.n	8002cd6 <_ZN23ApplicationFontProvider7getFontEt+0xe>

08002cf0 <_ZN23ApplicationFontProviderD0Ev>:
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 8002cf6:	6003      	str	r3, [r0, #0]
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 8002cfa:	6003      	str	r3, [r0, #0]
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	f019 faf8 	bl	801c2f2 <_ZdlPvj>
 8002d02:	4620      	mov	r0, r4
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	bf00      	nop
 8002d08:	0801e398 	.word	0x0801e398
 8002d0c:	0801dff4 	.word	0x0801dff4

08002d10 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002d10:	4800      	ldr	r0, [pc, #0]	; (8002d14 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002d12:	4770      	bx	lr
 8002d14:	0801e3a4 	.word	0x0801e3a4

08002d18 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002d18:	2001      	movs	r0, #1
 8002d1a:	4770      	bx	lr

08002d1c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8002d1c:	b169      	cbz	r1, 8002d3a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002d26:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002d2a:	6803      	ldr	r3, [r0, #0]
 8002d2c:	689c      	ldr	r4, [r3, #8]
 8002d2e:	f10d 0303 	add.w	r3, sp, #3
 8002d32:	aa01      	add	r2, sp, #4
 8002d34:	47a0      	blx	r4
        return glyph;
    }
 8002d36:	b002      	add	sp, #8
 8002d38:	bd10      	pop	{r4, pc}
            return 0;
 8002d3a:	2000      	movs	r0, #0
    }
 8002d3c:	4770      	bx	lr

08002d3e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002d3e:	8940      	ldrh	r0, [r0, #10]
 8002d40:	4770      	bx	lr

08002d42 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002d42:	8980      	ldrh	r0, [r0, #12]
 8002d44:	4770      	bx	lr

08002d46 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002d46:	8880      	ldrh	r0, [r0, #4]
 8002d48:	4770      	bx	lr

08002d4a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002d4a:	8883      	ldrh	r3, [r0, #4]
 8002d4c:	7980      	ldrb	r0, [r0, #6]
 8002d4e:	4418      	add	r0, r3
    }
 8002d50:	b280      	uxth	r0, r0
 8002d52:	4770      	bx	lr

08002d54 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002d54:	79c0      	ldrb	r0, [r0, #7]
    }
 8002d56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002d5a:	4770      	bx	lr

08002d5c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002d5c:	79c0      	ldrb	r0, [r0, #7]
    }
 8002d5e:	09c0      	lsrs	r0, r0, #7
 8002d60:	4770      	bx	lr
	...

08002d64 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8002d64:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8002d66:	6003      	str	r3, [r0, #0]
    }
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	0801e6ec 	.word	0x0801e6ec

08002d70 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8002d70:	4770      	bx	lr

08002d72 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002d72:	4770      	bx	lr

08002d74 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002d74:	4770      	bx	lr

08002d76 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002d76:	6041      	str	r1, [r0, #4]
    }
 8002d78:	4770      	bx	lr

08002d7a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	7203      	strb	r3, [r0, #8]
    }
 8002d7e:	4770      	bx	lr

08002d80 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002d80:	4a02      	ldr	r2, [pc, #8]	; (8002d8c <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8002d82:	6002      	str	r2, [r0, #0]
    {
 8002d84:	4a02      	ldr	r2, [pc, #8]	; (8002d90 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 8002d86:	6002      	str	r2, [r0, #0]
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	0801e710 	.word	0x0801e710
 8002d90:	0801e6ec 	.word	0x0801e6ec

08002d94 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002d94:	b510      	push	{r4, lr}
 8002d96:	4604      	mov	r4, r0
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8002d9a:	6003      	str	r3, [r0, #0]
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8002d9e:	6003      	str	r3, [r0, #0]
 8002da0:	210c      	movs	r1, #12
 8002da2:	f019 faa6 	bl	801c2f2 <_ZdlPvj>
 8002da6:	4620      	mov	r0, r4
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	bf00      	nop
 8002dac:	0801e710 	.word	0x0801e710
 8002db0:	0801e6ec 	.word	0x0801e6ec

08002db4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4604      	mov	r4, r0
    {
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8002dba:	6003      	str	r3, [r0, #0]
    }
 8002dbc:	210c      	movs	r1, #12
 8002dbe:	f019 fa98 	bl	801c2f2 <_ZdlPvj>
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	bf00      	nop
 8002dc8:	0801e6ec 	.word	0x0801e6ec

08002dcc <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002dcc:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002dce:	f00e fd6b 	bl	80118a8 <_ZN8touchgfx11Application11getInstanceEv>
 8002dd2:	f00f f90f 	bl	8011ff4 <_ZN8touchgfx11Application10invalidateEv>
    }
 8002dd6:	bd08      	pop	{r3, pc}

08002dd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4604      	mov	r4, r0
 8002ddc:	460d      	mov	r5, r1
 8002dde:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8002de0:	f00e fd84 	bl	80118ec <_ZN8touchgfx11ApplicationC1Ev>
 8002de4:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8002de6:	6023      	str	r3, [r4, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 8002dee:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
        instance = this;
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>)
 8002df4:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8002df8:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8002dfc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8002e02:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002e06:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 8002e0a:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8002e0e:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 8002e12:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 8002e16:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
        return instance;
 8002e1a:	4d0d      	ldr	r5, [pc, #52]	; (8002e50 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8002e1c:	6828      	ldr	r0, [r5, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002e1e:	6803      	ldr	r3, [r0, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002e2a:	b10a      	cbz	r2, 8002e30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
 8002e2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002e2e:	b900      	cbnz	r0, 8002e32 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5a>
        return instance->lcdRef;
 8002e30:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002e32:	f014 fc3a 	bl	80176aa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002e36:	4620      	mov	r0, r4
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	bf00      	nop
 8002e3c:	0801e058 	.word	0x0801e058
 8002e40:	2400b9cc 	.word	0x2400b9cc
 8002e44:	0801e0bc 	.word	0x0801e0bc
 8002e48:	0801e040 	.word	0x0801e040
 8002e4c:	0801e0a4 	.word	0x0801e0a4
 8002e50:	2400b980 	.word	0x2400b980

08002e54 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 8002e54:	b410      	push	{r4}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8002e5c:	9206      	str	r2, [sp, #24]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	9207      	str	r2, [sp, #28]
 8002e62:	46ec      	mov	ip, sp
 8002e64:	aa08      	add	r2, sp, #32
 8002e66:	e912 0003 	ldmdb	r2, {r0, r1}
 8002e6a:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8002e6e:	4c0c      	ldr	r4, [pc, #48]	; (8002ea0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8002e70:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8002e72:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8002e74:	9202      	str	r2, [sp, #8]
 8002e76:	9303      	str	r3, [sp, #12]
 8002e78:	aa04      	add	r2, sp, #16
 8002e7a:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002e7e:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8002e82:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8002e86:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8002e8a:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8002e8c:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8002e90:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8002e94:	b009      	add	sp, #36	; 0x24
 8002e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	08002ff9 	.word	0x08002ff9
 8002ea0:	0801e040 	.word	0x0801e040
 8002ea4:	0801e0a4 	.word	0x0801e0a4

08002ea8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	4607      	mov	r7, r0
 8002eae:	4688      	mov	r8, r1
 8002eb0:	4615      	mov	r5, r2
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002eb8:	6890      	ldr	r0, [r2, #8]
 8002eba:	6803      	ldr	r3, [r0, #0]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4798      	blx	r3
 8002ec0:	2897      	cmp	r0, #151	; 0x97
 8002ec2:	d976      	bls.n	8002fb2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002ec4:	6868      	ldr	r0, [r5, #4]
 8002ec6:	6803      	ldr	r3, [r0, #0]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4798      	blx	r3
 8002ecc:	280f      	cmp	r0, #15
 8002ece:	d976      	bls.n	8002fbe <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002ed0:	68e8      	ldr	r0, [r5, #12]
 8002ed2:	6803      	ldr	r3, [r0, #0]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4798      	blx	r3
 8002ed8:	280b      	cmp	r0, #11
 8002eda:	d976      	bls.n	8002fca <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
    Application::getInstance()->clearAllTimerWidgets();
 8002edc:	f00e fce4 	bl	80118a8 <_ZN8touchgfx11Application11getInstanceEv>
 8002ee0:	f00e fce8 	bl	80118b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002ee4:	f8d9 0000 	ldr.w	r0, [r9]
 8002ee8:	b110      	cbz	r0, 8002ef0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x48>
        (*currentTrans)->tearDown();
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4798      	blx	r3
    if (*currentTrans)
 8002ef0:	f8d9 0000 	ldr.w	r0, [r9]
 8002ef4:	b110      	cbz	r0, 8002efc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
        (*currentTrans)->~Transition();
 8002ef6:	6803      	ldr	r3, [r0, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4798      	blx	r3
    if (*currentScreen)
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	b110      	cbz	r0, 8002f06 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5e>
        (*currentScreen)->tearDownScreen();
 8002f00:	6803      	ldr	r3, [r0, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4798      	blx	r3
    if (*currentPresenter)
 8002f06:	f8d8 0000 	ldr.w	r0, [r8]
 8002f0a:	b110      	cbz	r0, 8002f12 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6a>
        (*currentPresenter)->deactivate();
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4798      	blx	r3
    if (*currentScreen)
 8002f12:	6838      	ldr	r0, [r7, #0]
 8002f14:	b110      	cbz	r0, 8002f1c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentScreen)->~Screen();
 8002f16:	6803      	ldr	r3, [r0, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4798      	blx	r3
    if (*currentPresenter)
 8002f1c:	f8d8 0000 	ldr.w	r0, [r8]
 8002f20:	b110      	cbz	r0, 8002f28 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
        (*currentPresenter)->~Presenter();
 8002f22:	6803      	ldr	r3, [r0, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002f28:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002f2a:	6803      	ldr	r3, [r0, #0]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4798      	blx	r3
 8002f32:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8002f34:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002f36:	6003      	str	r3, [r0, #0]
 8002f38:	f04f 0b00 	mov.w	fp, #0
 8002f3c:	f8c0 b004 	str.w	fp, [r0, #4]
 8002f40:	f880 b008 	strb.w	fp, [r0, #8]
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002f46:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002f48:	68a8      	ldr	r0, [r5, #8]
 8002f4a:	6803      	ldr	r3, [r0, #0]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	4659      	mov	r1, fp
 8002f50:	4798      	blx	r3
 8002f52:	4606      	mov	r6, r0
 8002f54:	f000 fd08 	bl	8003968 <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002f58:	6868      	ldr	r0, [r5, #4]
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	4659      	mov	r1, fp
 8002f60:	4798      	blx	r3
 8002f62:	4605      	mov	r5, r0
 8002f64:	4631      	mov	r1, r6
 8002f66:	f000 fc87 	bl	8003878 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8002f6a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002f6e:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8002f72:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	d02e      	beq.n	8002fd6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8002f78:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002f7a:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002f7e:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002f82:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8002f84:	6833      	ldr	r3, [r6, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4630      	mov	r0, r6
 8002f8a:	4798      	blx	r3
    newPresenter->activate();
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4628      	mov	r0, r5
 8002f92:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002f94:	4621      	mov	r1, r4
 8002f96:	4630      	mov	r0, r6
 8002f98:	f010 f86c 	bl	8013074 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4798      	blx	r3
    newTransition->invalidate();
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4620      	mov	r0, r4
 8002faa:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8002fac:	4628      	mov	r0, r5
 8002fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8002fb6:	21a3      	movs	r1, #163	; 0xa3
 8002fb8:	480c      	ldr	r0, [pc, #48]	; (8002fec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8002fba:	f019 f9c9 	bl	801c350 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8002fc2:	21a4      	movs	r1, #164	; 0xa4
 8002fc4:	4809      	ldr	r0, [pc, #36]	; (8002fec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8002fc6:	f019 f9c3 	bl	801c350 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8002fcc:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8002fce:	21a5      	movs	r1, #165	; 0xa5
 8002fd0:	4806      	ldr	r0, [pc, #24]	; (8002fec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8002fd2:	f019 f9bd 	bl	801c350 <__assert_func>
    model->bind(newPresenter);
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	e7cf      	b.n	8002f7a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 8002fda:	bf00      	nop
 8002fdc:	0801e6ec 	.word	0x0801e6ec
 8002fe0:	0801e710 	.word	0x0801e710
 8002fe4:	0801e3b8 	.word	0x0801e3b8
 8002fe8:	0801e448 	.word	0x0801e448
 8002fec:	0801e554 	.word	0x0801e554
 8002ff0:	0801e59c 	.word	0x0801e59c
 8002ff4:	0801e640 	.word	0x0801e640

08002ff8 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 8002ff8:	b500      	push	{lr}
 8002ffa:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002ffc:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8003004:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003008:	f500 719c 	add.w	r1, r0, #312	; 0x138
 800300c:	4803      	ldr	r0, [pc, #12]	; (800301c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 800300e:	f7ff ff4b 	bl	8002ea8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003012:	b003      	add	sp, #12
 8003014:	f85d fb04 	ldr.w	pc, [sp], #4
 8003018:	2400b9c0 	.word	0x2400b9c0
 800301c:	2400b9bc 	.word	0x2400b9bc

08003020 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003020:	6a00      	ldr	r0, [r0, #32]
 8003022:	4770      	bx	lr

08003024 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003024:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003026:	4770      	bx	lr

08003028 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003028:	4a03      	ldr	r2, [pc, #12]	; (8003038 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 800302a:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 800302e:	6002      	str	r2, [r0, #0]
    {
 8003030:	4a03      	ldr	r2, [pc, #12]	; (8003040 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8003032:	6002      	str	r2, [r0, #0]
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	0801e734 	.word	0x0801e734
 800303c:	0801f2c0 	.word	0x0801f2c0
 8003040:	0801e974 	.word	0x0801e974

08003044 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003044:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003046:	888b      	ldrh	r3, [r1, #4]
 8003048:	0adb      	lsrs	r3, r3, #11
 800304a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800304e:	680b      	ldr	r3, [r1, #0]
}
 8003050:	4418      	add	r0, r3
 8003052:	4770      	bx	lr

08003054 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003054:	4694      	mov	ip, r2
 8003056:	b1da      	cbz	r2, 8003090 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003058:	7b13      	ldrb	r3, [r2, #12]
 800305a:	b1db      	cbz	r3, 8003094 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800305c:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800305e:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8003062:	0200      	lsls	r0, r0, #8
 8003064:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003068:	f89c c00b 	ldrb.w	ip, [ip, #11]
 800306c:	ea40 000c 	orr.w	r0, r0, ip
 8003070:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003074:	b29b      	uxth	r3, r3
 8003076:	b17b      	cbz	r3, 8003098 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003078:	8810      	ldrh	r0, [r2, #0]
 800307a:	4288      	cmp	r0, r1
 800307c:	d005      	beq.n	800308a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 800307e:	4288      	cmp	r0, r1
 8003080:	d80c      	bhi.n	800309c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003082:	3b01      	subs	r3, #1
 8003084:	b29b      	uxth	r3, r3
 8003086:	3204      	adds	r2, #4
 8003088:	e7f5      	b.n	8003076 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 800308a:	f992 0002 	ldrsb.w	r0, [r2, #2]
 800308e:	4770      	bx	lr
        return 0;
 8003090:	2000      	movs	r0, #0
 8003092:	4770      	bx	lr
 8003094:	2000      	movs	r0, #0
 8003096:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8003098:	2000      	movs	r0, #0
 800309a:	4770      	bx	lr
 800309c:	2000      	movs	r0, #0
}
 800309e:	4770      	bx	lr

080030a0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 80030a6:	6003      	str	r3, [r0, #0]
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 80030aa:	6003      	str	r3, [r0, #0]
    {
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 80030ae:	6003      	str	r3, [r0, #0]
 80030b0:	2128      	movs	r1, #40	; 0x28
 80030b2:	f019 f91e 	bl	801c2f2 <_ZdlPvj>
 80030b6:	4620      	mov	r0, r4
 80030b8:	bd10      	pop	{r4, pc}
 80030ba:	bf00      	nop
 80030bc:	0801e734 	.word	0x0801e734
 80030c0:	0801f2c0 	.word	0x0801f2c0
 80030c4:	0801e974 	.word	0x0801e974

080030c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80030c8:	b530      	push	{r4, r5, lr}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80030ce:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80030d2:	9506      	str	r5, [sp, #24]
 80030d4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80030d8:	9505      	str	r5, [sp, #20]
 80030da:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80030de:	9504      	str	r5, [sp, #16]
 80030e0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80030e4:	9503      	str	r5, [sp, #12]
 80030e6:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80030ea:	9502      	str	r5, [sp, #8]
 80030ec:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80030f0:	9501      	str	r5, [sp, #4]
 80030f2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80030f6:	9500      	str	r5, [sp, #0]
 80030f8:	f00f fc1c 	bl	8012934 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 80030fe:	6023      	str	r3, [r4, #0]
 8003100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003102:	61a3      	str	r3, [r4, #24]
 8003104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003106:	61e3      	str	r3, [r4, #28]
 8003108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800310a:	6223      	str	r3, [r4, #32]
 800310c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800310e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003110:	4620      	mov	r0, r4
 8003112:	b009      	add	sp, #36	; 0x24
 8003114:	bd30      	pop	{r4, r5, pc}
 8003116:	bf00      	nop
 8003118:	0801e734 	.word	0x0801e734

0800311c <__tcf_0>:
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <__tcf_0+0x10>)
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__tcf_0+0x14>)
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	4a04      	ldr	r2, [pc, #16]	; (8003134 <__tcf_0+0x18>)
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <__tcf_0+0x1c>)
 8003128:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800312a:	4770      	bx	lr
 800312c:	24001e94 	.word	0x24001e94
 8003130:	0801e734 	.word	0x0801e734
 8003134:	0801f2c0 	.word	0x0801f2c0
 8003138:	0801e974 	.word	0x0801e974

0800313c <_Z23getFont_verdana_10_4bppv>:
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <_Z23getFont_verdana_10_4bppv+0x60>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f3bf 8f5b 	dmb	ish
 8003144:	f013 0f01 	tst.w	r3, #1
 8003148:	d001      	beq.n	800314e <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 800314a:	4815      	ldr	r0, [pc, #84]	; (80031a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800314c:	4770      	bx	lr
{
 800314e:	b500      	push	{lr}
 8003150:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003152:	4812      	ldr	r0, [pc, #72]	; (800319c <_Z23getFont_verdana_10_4bppv+0x60>)
 8003154:	f019 f8cf 	bl	801c2f6 <__cxa_guard_acquire>
 8003158:	b918      	cbnz	r0, 8003162 <_Z23getFont_verdana_10_4bppv+0x26>
}
 800315a:	4811      	ldr	r0, [pc, #68]	; (80031a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800315c:	b00d      	add	sp, #52	; 0x34
 800315e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003162:	2300      	movs	r3, #0
 8003164:	930a      	str	r3, [sp, #40]	; 0x28
 8003166:	9309      	str	r3, [sp, #36]	; 0x24
 8003168:	9308      	str	r3, [sp, #32]
 800316a:	223f      	movs	r2, #63	; 0x3f
 800316c:	9207      	str	r2, [sp, #28]
 800316e:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003170:	9206      	str	r2, [sp, #24]
 8003172:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003174:	9205      	str	r2, [sp, #20]
 8003176:	9304      	str	r3, [sp, #16]
 8003178:	9303      	str	r3, [sp, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	9202      	str	r2, [sp, #8]
 800317e:	2104      	movs	r1, #4
 8003180:	9101      	str	r1, [sp, #4]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	230a      	movs	r3, #10
 8003186:	4909      	ldr	r1, [pc, #36]	; (80031ac <_Z23getFont_verdana_10_4bppv+0x70>)
 8003188:	4805      	ldr	r0, [pc, #20]	; (80031a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800318a:	f7ff ff9d 	bl	80030c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800318e:	4808      	ldr	r0, [pc, #32]	; (80031b0 <_Z23getFont_verdana_10_4bppv+0x74>)
 8003190:	f019 f8fc 	bl	801c38c <atexit>
 8003194:	4801      	ldr	r0, [pc, #4]	; (800319c <_Z23getFont_verdana_10_4bppv+0x60>)
 8003196:	f019 f8ba 	bl	801c30e <__cxa_guard_release>
 800319a:	e7de      	b.n	800315a <_Z23getFont_verdana_10_4bppv+0x1e>
 800319c:	24001e90 	.word	0x24001e90
 80031a0:	24001e94 	.word	0x24001e94
 80031a4:	0801f640 	.word	0x0801f640
 80031a8:	0801f64c 	.word	0x0801f64c
 80031ac:	90000178 	.word	0x90000178
 80031b0:	0800311d 	.word	0x0800311d

080031b4 <__tcf_0>:
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <__tcf_0+0x10>)
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__tcf_0+0x14>)
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	4a04      	ldr	r2, [pc, #16]	; (80031cc <__tcf_0+0x18>)
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <__tcf_0+0x1c>)
 80031c0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80031c2:	4770      	bx	lr
 80031c4:	24001ec0 	.word	0x24001ec0
 80031c8:	0801e734 	.word	0x0801e734
 80031cc:	0801f2c0 	.word	0x0801f2c0
 80031d0:	0801e974 	.word	0x0801e974

080031d4 <_Z23getFont_verdana_20_4bppv>:
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <_Z23getFont_verdana_20_4bppv+0x60>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f3bf 8f5b 	dmb	ish
 80031dc:	f013 0f01 	tst.w	r3, #1
 80031e0:	d001      	beq.n	80031e6 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 80031e2:	4815      	ldr	r0, [pc, #84]	; (8003238 <_Z23getFont_verdana_20_4bppv+0x64>)
 80031e4:	4770      	bx	lr
{
 80031e6:	b500      	push	{lr}
 80031e8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80031ea:	4812      	ldr	r0, [pc, #72]	; (8003234 <_Z23getFont_verdana_20_4bppv+0x60>)
 80031ec:	f019 f883 	bl	801c2f6 <__cxa_guard_acquire>
 80031f0:	b918      	cbnz	r0, 80031fa <_Z23getFont_verdana_20_4bppv+0x26>
}
 80031f2:	4811      	ldr	r0, [pc, #68]	; (8003238 <_Z23getFont_verdana_20_4bppv+0x64>)
 80031f4:	b00d      	add	sp, #52	; 0x34
 80031f6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80031fa:	2300      	movs	r3, #0
 80031fc:	930a      	str	r3, [sp, #40]	; 0x28
 80031fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003200:	9308      	str	r3, [sp, #32]
 8003202:	223f      	movs	r2, #63	; 0x3f
 8003204:	9207      	str	r2, [sp, #28]
 8003206:	4a0d      	ldr	r2, [pc, #52]	; (800323c <_Z23getFont_verdana_20_4bppv+0x68>)
 8003208:	9206      	str	r2, [sp, #24]
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800320c:	9205      	str	r2, [sp, #20]
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	9303      	str	r3, [sp, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	9202      	str	r2, [sp, #8]
 8003216:	2104      	movs	r1, #4
 8003218:	9101      	str	r1, [sp, #4]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2314      	movs	r3, #20
 800321e:	4909      	ldr	r1, [pc, #36]	; (8003244 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003220:	4805      	ldr	r0, [pc, #20]	; (8003238 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003222:	f7ff ff51 	bl	80030c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003226:	4808      	ldr	r0, [pc, #32]	; (8003248 <_Z23getFont_verdana_20_4bppv+0x74>)
 8003228:	f019 f8b0 	bl	801c38c <atexit>
 800322c:	4801      	ldr	r0, [pc, #4]	; (8003234 <_Z23getFont_verdana_20_4bppv+0x60>)
 800322e:	f019 f86e 	bl	801c30e <__cxa_guard_release>
 8003232:	e7de      	b.n	80031f2 <_Z23getFont_verdana_20_4bppv+0x1e>
 8003234:	24001ebc 	.word	0x24001ebc
 8003238:	24001ec0 	.word	0x24001ec0
 800323c:	0801f644 	.word	0x0801f644
 8003240:	0801f650 	.word	0x0801f650
 8003244:	90000188 	.word	0x90000188
 8003248:	080031b5 	.word	0x080031b5

0800324c <__tcf_0>:
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <__tcf_0+0x10>)
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <__tcf_0+0x14>)
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__tcf_0+0x18>)
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <__tcf_0+0x1c>)
 8003258:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800325a:	4770      	bx	lr
 800325c:	24001eec 	.word	0x24001eec
 8003260:	0801e734 	.word	0x0801e734
 8003264:	0801f2c0 	.word	0x0801f2c0
 8003268:	0801e974 	.word	0x0801e974

0800326c <_Z23getFont_verdana_40_4bppv>:
 800326c:	4b17      	ldr	r3, [pc, #92]	; (80032cc <_Z23getFont_verdana_40_4bppv+0x60>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	f3bf 8f5b 	dmb	ish
 8003274:	f013 0f01 	tst.w	r3, #1
 8003278:	d001      	beq.n	800327e <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 800327a:	4815      	ldr	r0, [pc, #84]	; (80032d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 800327c:	4770      	bx	lr
{
 800327e:	b500      	push	{lr}
 8003280:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003282:	4812      	ldr	r0, [pc, #72]	; (80032cc <_Z23getFont_verdana_40_4bppv+0x60>)
 8003284:	f019 f837 	bl	801c2f6 <__cxa_guard_acquire>
 8003288:	b918      	cbnz	r0, 8003292 <_Z23getFont_verdana_40_4bppv+0x26>
}
 800328a:	4811      	ldr	r0, [pc, #68]	; (80032d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 800328c:	b00d      	add	sp, #52	; 0x34
 800328e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003292:	2300      	movs	r3, #0
 8003294:	930a      	str	r3, [sp, #40]	; 0x28
 8003296:	9309      	str	r3, [sp, #36]	; 0x24
 8003298:	9308      	str	r3, [sp, #32]
 800329a:	223f      	movs	r2, #63	; 0x3f
 800329c:	9207      	str	r2, [sp, #28]
 800329e:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <_Z23getFont_verdana_40_4bppv+0x68>)
 80032a0:	9206      	str	r2, [sp, #24]
 80032a2:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80032a4:	9205      	str	r2, [sp, #20]
 80032a6:	9304      	str	r3, [sp, #16]
 80032a8:	9303      	str	r3, [sp, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	9202      	str	r2, [sp, #8]
 80032ae:	2104      	movs	r1, #4
 80032b0:	9101      	str	r1, [sp, #4]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2328      	movs	r3, #40	; 0x28
 80032b6:	4909      	ldr	r1, [pc, #36]	; (80032dc <_Z23getFont_verdana_40_4bppv+0x70>)
 80032b8:	4805      	ldr	r0, [pc, #20]	; (80032d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 80032ba:	f7ff ff05 	bl	80030c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80032be:	4808      	ldr	r0, [pc, #32]	; (80032e0 <_Z23getFont_verdana_40_4bppv+0x74>)
 80032c0:	f019 f864 	bl	801c38c <atexit>
 80032c4:	4801      	ldr	r0, [pc, #4]	; (80032cc <_Z23getFont_verdana_40_4bppv+0x60>)
 80032c6:	f019 f822 	bl	801c30e <__cxa_guard_release>
 80032ca:	e7de      	b.n	800328a <_Z23getFont_verdana_40_4bppv+0x1e>
 80032cc:	24001ee8 	.word	0x24001ee8
 80032d0:	24001eec 	.word	0x24001eec
 80032d4:	0801f648 	.word	0x0801f648
 80032d8:	0801f654 	.word	0x0801f654
 80032dc:	90000198 	.word	0x90000198
 80032e0:	0800324d 	.word	0x0800324d

080032e4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 80032e4:	2000      	movs	r0, #0
 80032e6:	4770      	bx	lr

080032e8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80032e8:	2000      	movs	r0, #0
 80032ea:	4770      	bx	lr

080032ec <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80032ec:	2000      	movs	r0, #0
 80032ee:	4770      	bx	lr

080032f0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80032f0:	b40e      	push	{r1, r2, r3}
 80032f2:	b500      	push	{lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	ab03      	add	r3, sp, #12
 80032f8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80032fc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80032fe:	2100      	movs	r1, #0
 8003300:	f00f f948 	bl	8012594 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003304:	b002      	add	sp, #8
 8003306:	f85d eb04 	ldr.w	lr, [sp], #4
 800330a:	b003      	add	sp, #12
 800330c:	4770      	bx	lr

0800330e <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800330e:	b40c      	push	{r2, r3}
 8003310:	b500      	push	{lr}
 8003312:	b083      	sub	sp, #12
 8003314:	ab04      	add	r3, sp, #16
 8003316:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800331a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800331c:	f00f f93a 	bl	8012594 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003320:	b003      	add	sp, #12
 8003322:	f85d eb04 	ldr.w	lr, [sp], #4
 8003326:	b002      	add	sp, #8
 8003328:	4770      	bx	lr
	...

0800332c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800332c:	b510      	push	{r4, lr}
 800332e:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003330:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003332:	b133      	cbz	r3, 8003342 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003334:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003336:	b143      	cbz	r3, 800334a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8003338:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800333a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800333e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003340:	b94b      	cbnz	r3, 8003356 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003342:	4620      	mov	r0, r4
 8003344:	f010 fa64 	bl	8013810 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8003348:	bd10      	pop	{r4, pc}
            assert(used > 0);
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 800334c:	4a1c      	ldr	r2, [pc, #112]	; (80033c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800334e:	21c0      	movs	r1, #192	; 0xc0
 8003350:	481c      	ldr	r0, [pc, #112]	; (80033c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8003352:	f018 fffd 	bl	801c350 <__assert_func>
        substituteGlyphs();
 8003356:	f010 fb59 	bl	8013a0c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800335a:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 800335c:	2801      	cmp	r0, #1
 800335e:	d91d      	bls.n	800339c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8003360:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003362:	1c4b      	adds	r3, r1, #1
 8003364:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003366:	2b09      	cmp	r3, #9
 8003368:	d81e      	bhi.n	80033a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 800336a:	461a      	mov	r2, r3
 800336c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003370:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003374:	f640 123f 	movw	r2, #2367	; 0x93f
 8003378:	4594      	cmp	ip, r2
 800337a:	d1e2      	bne.n	8003342 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 800337c:	b1b8      	cbz	r0, 80033ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 800337e:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 8003382:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003384:	2b09      	cmp	r3, #9
 8003386:	d900      	bls.n	800338a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 8003388:	2300      	movs	r3, #0
 800338a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800338e:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003390:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003394:	f640 133f 	movw	r3, #2367	; 0x93f
 8003398:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 800339a:	e7d2      	b.n	8003342 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80033a0:	21c5      	movs	r1, #197	; 0xc5
 80033a2:	4808      	ldr	r0, [pc, #32]	; (80033c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80033a4:	f018 ffd4 	bl	801c350 <__assert_func>
            return buffer[index < size ? index : index - size];
 80033a8:	f1a3 020a 	sub.w	r2, r3, #10
 80033ac:	e7de      	b.n	800336c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80033ae:	4b03      	ldr	r3, [pc, #12]	; (80033bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80033b0:	4a03      	ldr	r2, [pc, #12]	; (80033c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80033b2:	21c0      	movs	r1, #192	; 0xc0
 80033b4:	4803      	ldr	r0, [pc, #12]	; (80033c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80033b6:	f018 ffcb 	bl	801c350 <__assert_func>
 80033ba:	bf00      	nop
 80033bc:	0801e784 	.word	0x0801e784
 80033c0:	0801e790 	.word	0x0801e790
 80033c4:	0801e83c 	.word	0x0801e83c
 80033c8:	0801e888 	.word	0x0801e888
 80033cc:	0801e898 	.word	0x0801e898

080033d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80033d0:	b508      	push	{r3, lr}
    fillInputBuffer();
 80033d2:	f010 f9e6 	bl	80137a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80033d6:	bd08      	pop	{r3, pc}

080033d8 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80033d8:	bb40      	cbnz	r0, 800342c <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80033da:	b538      	push	{r3, r4, r5, lr}
 80033dc:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80033e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80033e4:	b1c3      	cbz	r3, 8003418 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80033e6:	6819      	ldr	r1, [r3, #0]
 80033e8:	4419      	add	r1, r3
 80033ea:	4812      	ldr	r0, [pc, #72]	; (8003434 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80033ec:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	4419      	add	r1, r3
 80033f2:	4811      	ldr	r0, [pc, #68]	; (8003438 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80033f4:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80033f6:	689c      	ldr	r4, [r3, #8]
 80033f8:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 80033fa:	b164      	cbz	r4, 8003416 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80033fe:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003400:	f000 f842 	bl	8003488 <_ZN17TypedTextDatabase8getFontsEv>
 8003404:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003406:	f000 f83d 	bl	8003484 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800340c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003410:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003414:	8018      	strh	r0, [r3, #0]
    }
}
 8003416:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800341a:	490c      	ldr	r1, [pc, #48]	; (800344c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800341c:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8003422:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8003426:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800342a:	e7e6      	b.n	80033fa <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	24001f14 	.word	0x24001f14
 8003434:	24001f18 	.word	0x24001f18
 8003438:	24001f1c 	.word	0x24001f1c
 800343c:	24001f20 	.word	0x24001f20
 8003440:	2400b9d0 	.word	0x2400b9d0
 8003444:	2400b9d8 	.word	0x2400b9d8
 8003448:	2400b9d4 	.word	0x2400b9d4
 800344c:	900001ac 	.word	0x900001ac
 8003450:	900001a8 	.word	0x900001a8
 8003454:	900001b4 	.word	0x900001b4

08003458 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003458:	2801      	cmp	r0, #1
 800345a:	d000      	beq.n	800345e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800345c:	4770      	bx	lr
 800345e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003462:	4299      	cmp	r1, r3
 8003464:	d1fa      	bne.n	800345c <_Z41__static_initialization_and_destruction_0ii+0x4>
 8003466:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8003468:	f7ff feb4 	bl	80031d4 <_Z23getFont_verdana_20_4bppv>
};
 800346c:	4c04      	ldr	r4, [pc, #16]	; (8003480 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800346e:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003470:	f7ff fefc 	bl	800326c <_Z23getFont_verdana_40_4bppv>
};
 8003474:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003476:	f7ff fe61 	bl	800313c <_Z23getFont_verdana_10_4bppv>
};
 800347a:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800347c:	bd10      	pop	{r4, pc}
 800347e:	bf00      	nop
 8003480:	24001f24 	.word	0x24001f24

08003484 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8003484:	2000      	movs	r0, #0
 8003486:	4770      	bx	lr

08003488 <_ZN17TypedTextDatabase8getFontsEv>:
}
 8003488:	4800      	ldr	r0, [pc, #0]	; (800348c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800348a:	4770      	bx	lr
 800348c:	24001f24 	.word	0x24001f24

08003490 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8003490:	b508      	push	{r3, lr}
 8003492:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003496:	2001      	movs	r0, #1
 8003498:	f7ff ffde 	bl	8003458 <_Z41__static_initialization_and_destruction_0ii>
 800349c:	bd08      	pop	{r3, pc}

0800349e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800349e:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80034a0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80034a4:	b113      	cbz	r3, 80034ac <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 80034a6:	6803      	ldr	r3, [r0, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4798      	blx	r3
        }
    }
 80034ac:	bd08      	pop	{r3, pc}

080034ae <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80034ae:	2000      	movs	r0, #0
 80034b0:	4770      	bx	lr

080034b2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80034b2:	8081      	strh	r1, [r0, #4]
    }
 80034b4:	4770      	bx	lr

080034b6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80034b6:	80c1      	strh	r1, [r0, #6]
    }
 80034b8:	4770      	bx	lr

080034ba <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80034ba:	8101      	strh	r1, [r0, #8]
    }
 80034bc:	4770      	bx	lr

080034be <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80034be:	8141      	strh	r1, [r0, #10]
    }
 80034c0:	4770      	bx	lr

080034c2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80034c2:	4770      	bx	lr

080034c4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80034c4:	4770      	bx	lr

080034c6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80034c6:	4770      	bx	lr

080034c8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80034c8:	4770      	bx	lr

080034ca <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80034ca:	4770      	bx	lr

080034cc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80034cc:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 80034ce:	6804      	ldr	r4, [r0, #0]
 80034d0:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80034d2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 80034d6:	eba1 010c 	sub.w	r1, r1, ip
 80034da:	88c3      	ldrh	r3, [r0, #6]
 80034dc:	1ad2      	subs	r2, r2, r3
 80034de:	b212      	sxth	r2, r2
 80034e0:	b209      	sxth	r1, r1
 80034e2:	47a0      	blx	r4
    }
 80034e4:	bd10      	pop	{r4, pc}

080034e6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80034e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ea:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80034ec:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80034ee:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80034f4:	6010      	str	r0, [r2, #0]
    }
 80034f6:	4770      	bx	lr

080034f8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80034f8:	4770      	bx	lr

080034fa <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80034fa:	4770      	bx	lr

080034fc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80034fc:	4770      	bx	lr

080034fe <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80034fe:	4770      	bx	lr

08003500 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003500:	4770      	bx	lr

08003502 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8003502:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003506:	b11a      	cbz	r2, 8003510 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8003508:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800350c:	b102      	cbz	r2, 8003510 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800350e:	6018      	str	r0, [r3, #0]
        }
    }
 8003510:	4770      	bx	lr
	...

08003514 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8003516:	6002      	str	r2, [r0, #0]
    {
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 800351a:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 800351e:	6042      	str	r2, [r0, #4]
    {
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 8003522:	6042      	str	r2, [r0, #4]
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	0801ea30 	.word	0x0801ea30
 800352c:	0801f354 	.word	0x0801f354
 8003530:	0801eef8 	.word	0x0801eef8
 8003534:	0801f258 	.word	0x0801f258

08003538 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8003538:	b410      	push	{r4}
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <_ZN18mainScreenViewBaseD1Ev+0x30>)
 800353c:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <_ZN18mainScreenViewBaseD1Ev+0x34>)
 8003540:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 8003542:	490b      	ldr	r1, [pc, #44]	; (8003570 <_ZN18mainScreenViewBaseD1Ev+0x38>)
 8003544:	66c1      	str	r1, [r0, #108]	; 0x6c
 8003546:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 8003548:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 800354a:	4c0b      	ldr	r4, [pc, #44]	; (8003578 <_ZN18mainScreenViewBaseD1Ev+0x40>)
 800354c:	6404      	str	r4, [r0, #64]	; 0x40
 800354e:	6401      	str	r1, [r0, #64]	; 0x40
 8003550:	6402      	str	r2, [r0, #64]	; 0x40
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <_ZN18mainScreenViewBaseD1Ev+0x44>)
 8003554:	6001      	str	r1, [r0, #0]
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <_ZN18mainScreenViewBaseD1Ev+0x48>)
 8003558:	6001      	str	r1, [r0, #0]
 800355a:	490a      	ldr	r1, [pc, #40]	; (8003584 <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 800355c:	6041      	str	r1, [r0, #4]
 800355e:	6042      	str	r2, [r0, #4]
 8003560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	0801ea64 	.word	0x0801ea64
 800356c:	0801f148 	.word	0x0801f148
 8003570:	0801e9c8 	.word	0x0801e9c8
 8003574:	0801f258 	.word	0x0801f258
 8003578:	0801f0e0 	.word	0x0801f0e0
 800357c:	0801ea30 	.word	0x0801ea30
 8003580:	0801f354 	.word	0x0801f354
 8003584:	0801eef8 	.word	0x0801eef8

08003588 <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 8003588:	4770      	bx	lr
	...

0800358c <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 800358c:	b510      	push	{r4, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 8003592:	6003      	str	r3, [r0, #0]
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 8003596:	6003      	str	r3, [r0, #0]
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 800359a:	6043      	str	r3, [r0, #4]
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 800359e:	6043      	str	r3, [r0, #4]
 80035a0:	2140      	movs	r1, #64	; 0x40
 80035a2:	f018 fea6 	bl	801c2f2 <_ZdlPvj>
 80035a6:	4620      	mov	r0, r4
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop
 80035ac:	0801ea30 	.word	0x0801ea30
 80035b0:	0801f354 	.word	0x0801f354
 80035b4:	0801eef8 	.word	0x0801eef8
 80035b8:	0801f258 	.word	0x0801f258

080035bc <_ZN18mainScreenViewBaseD0Ev>:
 80035bc:	b510      	push	{r4, lr}
 80035be:	4604      	mov	r4, r0
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <_ZN18mainScreenViewBaseD0Ev+0x34>)
 80035c2:	6003      	str	r3, [r0, #0]
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <_ZN18mainScreenViewBaseD0Ev+0x38>)
 80035c6:	66c3      	str	r3, [r0, #108]	; 0x6c
 80035c8:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 80035ca:	66c2      	str	r2, [r0, #108]	; 0x6c
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <_ZN18mainScreenViewBaseD0Ev+0x40>)
 80035ce:	66c3      	str	r3, [r0, #108]	; 0x6c
 80035d0:	490b      	ldr	r1, [pc, #44]	; (8003600 <_ZN18mainScreenViewBaseD0Ev+0x44>)
 80035d2:	6401      	str	r1, [r0, #64]	; 0x40
 80035d4:	6402      	str	r2, [r0, #64]	; 0x40
 80035d6:	6403      	str	r3, [r0, #64]	; 0x40
 80035d8:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <_ZN18mainScreenViewBaseD0Ev+0x48>)
 80035da:	6002      	str	r2, [r0, #0]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 80035de:	6002      	str	r2, [r0, #0]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <_ZN18mainScreenViewBaseD0Ev+0x50>)
 80035e2:	6042      	str	r2, [r0, #4]
 80035e4:	6043      	str	r3, [r0, #4]
 80035e6:	2198      	movs	r1, #152	; 0x98
 80035e8:	f018 fe83 	bl	801c2f2 <_ZdlPvj>
 80035ec:	4620      	mov	r0, r4
 80035ee:	bd10      	pop	{r4, pc}
 80035f0:	0801ea64 	.word	0x0801ea64
 80035f4:	0801f148 	.word	0x0801f148
 80035f8:	0801e9c8 	.word	0x0801e9c8
 80035fc:	0801f258 	.word	0x0801f258
 8003600:	0801f0e0 	.word	0x0801f0e0
 8003604:	0801ea30 	.word	0x0801ea30
 8003608:	0801f354 	.word	0x0801f354
 800360c:	0801eef8 	.word	0x0801eef8

08003610 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	b083      	sub	sp, #12
 8003616:	4607      	mov	r7, r0
        : presenter(0)
 8003618:	f00f fb80 	bl	8012d1c <_ZN8touchgfx6ScreenC1Ev>
 800361c:	4b47      	ldr	r3, [pc, #284]	; (800373c <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	2400      	movs	r4, #0
 8003622:	63fc      	str	r4, [r7, #60]	; 0x3c
 8003624:	463d      	mov	r5, r7
 8003626:	4b46      	ldr	r3, [pc, #280]	; (8003740 <_ZN18mainScreenViewBaseC1Ev+0x130>)
 8003628:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800362c:	f04f 0926 	mov.w	r9, #38	; 0x26
 8003630:	464a      	mov	r2, r9
 8003632:	4621      	mov	r1, r4
 8003634:	4628      	mov	r0, r5
 8003636:	f019 f821 	bl	801c67c <memset>
          visible(true)
 800363a:	f8df b114 	ldr.w	fp, [pc, #276]	; 8003750 <_ZN18mainScreenViewBaseC1Ev+0x140>
 800363e:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
 8003642:	80ac      	strh	r4, [r5, #4]
 8003644:	80ec      	strh	r4, [r5, #6]
 8003646:	812c      	strh	r4, [r5, #8]
 8003648:	816c      	strh	r4, [r5, #10]
 800364a:	81ac      	strh	r4, [r5, #12]
 800364c:	81ec      	strh	r4, [r5, #14]
 800364e:	822c      	strh	r4, [r5, #16]
 8003650:	826c      	strh	r4, [r5, #18]
 8003652:	616c      	str	r4, [r5, #20]
 8003654:	61ac      	str	r4, [r5, #24]
 8003656:	61ec      	str	r4, [r5, #28]
 8003658:	842c      	strh	r4, [r5, #32]
 800365a:	846c      	strh	r4, [r5, #34]	; 0x22
 800365c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8003660:	f04f 0a01 	mov.w	sl, #1
 8003664:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 8003668:	4b36      	ldr	r3, [pc, #216]	; (8003744 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <_ZN18mainScreenViewBaseC1Ev+0x138>)
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
 8003670:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8003674:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 8003678:	62ac      	str	r4, [r5, #40]	; 0x28
 800367a:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800367e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003682:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8003686:	464a      	mov	r2, r9
 8003688:	4621      	mov	r1, r4
 800368a:	4630      	mov	r0, r6
 800368c:	f018 fff6 	bl	801c67c <memset>
 8003690:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8003694:	80b4      	strh	r4, [r6, #4]
 8003696:	80f4      	strh	r4, [r6, #6]
 8003698:	8134      	strh	r4, [r6, #8]
 800369a:	8174      	strh	r4, [r6, #10]
 800369c:	81b4      	strh	r4, [r6, #12]
 800369e:	81f4      	strh	r4, [r6, #14]
 80036a0:	8234      	strh	r4, [r6, #16]
 80036a2:	8274      	strh	r4, [r6, #18]
 80036a4:	6174      	str	r4, [r6, #20]
 80036a6:	61b4      	str	r4, [r6, #24]
 80036a8:	61f4      	str	r4, [r6, #28]
 80036aa:	8434      	strh	r4, [r6, #32]
 80036ac:	8474      	strh	r4, [r6, #34]	; 0x22
 80036ae:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 80036b2:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 80036b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 80036bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036be:	f8bd 3000 	ldrh.w	r3, [sp]
 80036c2:	84f3      	strh	r3, [r6, #38]	; 0x26
 80036c4:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 80036c8:	4669      	mov	r1, sp
 80036ca:	4630      	mov	r0, r6
 80036cc:	f00c ffcf 	bl	801066e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80036d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4621      	mov	r1, r4
 80036d6:	4628      	mov	r0, r5
 80036d8:	4798      	blx	r3
        setY(y);
 80036da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	4621      	mov	r1, r4
 80036e0:	4628      	mov	r0, r5
 80036e2:	4798      	blx	r3
        setWidth(width);
 80036e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80036ec:	4628      	mov	r0, r5
 80036ee:	4798      	blx	r3
        setHeight(height);
 80036f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80036f8:	4628      	mov	r0, r5
 80036fa:	4798      	blx	r3
        : color(col)
 80036fc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003700:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 8003702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4621      	mov	r1, r4
 8003708:	4630      	mov	r0, r6
 800370a:	4798      	blx	r3
        setY(y);
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	4621      	mov	r1, r4
 8003712:	4630      	mov	r0, r6
 8003714:	4798      	blx	r3
 8003716:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 800371a:	a901      	add	r1, sp, #4
 800371c:	4630      	mov	r0, r6
 800371e:	f00c ffa6 	bl	801066e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003722:	1d3c      	adds	r4, r7, #4
 8003724:	4629      	mov	r1, r5
 8003726:	4620      	mov	r0, r4
 8003728:	f00b fdbc 	bl	800f2a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800372c:	4631      	mov	r1, r6
 800372e:	4620      	mov	r0, r4
 8003730:	f00b fdb8 	bl	800f2a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003734:	4638      	mov	r0, r7
 8003736:	b003      	add	sp, #12
 8003738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800373c:	0801ea30 	.word	0x0801ea30
 8003740:	0801ea64 	.word	0x0801ea64
 8003744:	0801e9c8 	.word	0x0801e9c8
 8003748:	0801f0e0 	.word	0x0801f0e0
 800374c:	0801f148 	.word	0x0801f148
 8003750:	0801f258 	.word	0x0801f258

08003754 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003754:	b510      	push	{r4, lr}
 8003756:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003758:	f7ff fb3e 	bl	8002dd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800375c:	4b01      	ldr	r3, [pc, #4]	; (8003764 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 800375e:	6023      	str	r3, [r4, #0]
{

}
 8003760:	4620      	mov	r0, r4
 8003762:	bd10      	pop	{r4, pc}
 8003764:	0801e108 	.word	0x0801e108

08003768 <_ZN5ModelC1Ev>:

uint8_t password_ascii[64];
uint8_t ssid_ascii[32];
uint8_t encryption_ascii[30];

Model::Model() : modelListener(0)
 8003768:	2200      	movs	r2, #0
 800376a:	6002      	str	r2, [r0, #0]
{

}
 800376c:	4770      	bx	lr

0800376e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800376e:	4770      	bx	lr

08003770 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8003770:	4770      	bx	lr

08003772 <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 8003772:	4770      	bx	lr

08003774 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 8003774:	4b01      	ldr	r3, [pc, #4]	; (800377c <_ZN8touchgfx9PresenterD1Ev+0x8>)
 8003776:	6003      	str	r3, [r0, #0]
    }
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	0801ea98 	.word	0x0801ea98

08003780 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8003780:	4b01      	ldr	r3, [pc, #4]	; (8003788 <_ZN13ModelListenerD1Ev+0x8>)
 8003782:	6003      	str	r3, [r0, #0]
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	0801eab0 	.word	0x0801eab0

0800378c <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 800378c:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <_ZN19mainScreenPresenterD1Ev+0x18>)
 800378e:	f102 0108 	add.w	r1, r2, #8
 8003792:	6001      	str	r1, [r0, #0]
 8003794:	3220      	adds	r2, #32
 8003796:	6042      	str	r2, [r0, #4]
 8003798:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 800379a:	6042      	str	r2, [r0, #4]
    {
 800379c:	4a03      	ldr	r2, [pc, #12]	; (80037ac <_ZN19mainScreenPresenterD1Ev+0x20>)
 800379e:	6002      	str	r2, [r0, #0]
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	0801eab8 	.word	0x0801eab8
 80037a8:	0801eab0 	.word	0x0801eab0
 80037ac:	0801ea98 	.word	0x0801ea98

080037b0 <_ZThn4_N19mainScreenPresenterD1Ev>:
 80037b0:	4603      	mov	r3, r0
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 80037b4:	f102 0108 	add.w	r1, r2, #8
 80037b8:	f840 1c04 	str.w	r1, [r0, #-4]
 80037bc:	3220      	adds	r2, #32
 80037be:	f840 2904 	str.w	r2, [r0], #-4
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 80037c4:	6042      	str	r2, [r0, #4]
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 80037c8:	f843 2c04 	str.w	r2, [r3, #-4]
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	0801eab8 	.word	0x0801eab8
 80037d4:	0801eab0 	.word	0x0801eab0
 80037d8:	0801ea98 	.word	0x0801ea98

080037dc <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 80037dc:	4770      	bx	lr

080037de <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 80037de:	4770      	bx	lr

080037e0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
    {
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 80037e6:	6003      	str	r3, [r0, #0]
    }
 80037e8:	2104      	movs	r1, #4
 80037ea:	f018 fd82 	bl	801c2f2 <_ZdlPvj>
 80037ee:	4620      	mov	r0, r4
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	bf00      	nop
 80037f4:	0801ea98 	.word	0x0801ea98

080037f8 <_ZN13ModelListenerD0Ev>:
 80037f8:	b510      	push	{r4, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <_ZN13ModelListenerD0Ev+0x14>)
 80037fe:	6003      	str	r3, [r0, #0]
 8003800:	2108      	movs	r1, #8
 8003802:	f018 fd76 	bl	801c2f2 <_ZdlPvj>
 8003806:	4620      	mov	r0, r4
 8003808:	bd10      	pop	{r4, pc}
 800380a:	bf00      	nop
 800380c:	0801eab0 	.word	0x0801eab0

08003810 <_ZN19mainScreenPresenterD0Ev>:
 8003810:	b510      	push	{r4, lr}
 8003812:	4604      	mov	r4, r0
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8003816:	f103 0208 	add.w	r2, r3, #8
 800381a:	6002      	str	r2, [r0, #0]
 800381c:	3320      	adds	r3, #32
 800381e:	6043      	str	r3, [r0, #4]
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <_ZN19mainScreenPresenterD0Ev+0x28>)
 8003822:	6043      	str	r3, [r0, #4]
    {
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8003826:	6003      	str	r3, [r0, #0]
 8003828:	2110      	movs	r1, #16
 800382a:	f018 fd62 	bl	801c2f2 <_ZdlPvj>
 800382e:	4620      	mov	r0, r4
 8003830:	bd10      	pop	{r4, pc}
 8003832:	bf00      	nop
 8003834:	0801eab8 	.word	0x0801eab8
 8003838:	0801eab0 	.word	0x0801eab0
 800383c:	0801ea98 	.word	0x0801ea98

08003840 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8003840:	b510      	push	{r4, lr}
 8003842:	4604      	mov	r4, r0
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 8003846:	f103 0208 	add.w	r2, r3, #8
 800384a:	f840 2c04 	str.w	r2, [r0, #-4]
 800384e:	3320      	adds	r3, #32
 8003850:	f844 3904 	str.w	r3, [r4], #-4
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 800385a:	f840 3c04 	str.w	r3, [r0, #-4]
 800385e:	2110      	movs	r1, #16
 8003860:	4620      	mov	r0, r4
 8003862:	f018 fd46 	bl	801c2f2 <_ZdlPvj>
 8003866:	4620      	mov	r0, r4
 8003868:	bd10      	pop	{r4, pc}
 800386a:	bf00      	nop
 800386c:	0801eab8 	.word	0x0801eab8
 8003870:	0801eab0 	.word	0x0801eab0
 8003874:	0801ea98 	.word	0x0801ea98

08003878 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8003878:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 800387c:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 8003880:	6042      	str	r2, [r0, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	6082      	str	r2, [r0, #8]
    : view(v)
 8003886:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8003888:	f102 0408 	add.w	r4, r2, #8
 800388c:	6004      	str	r4, [r0, #0]
 800388e:	3220      	adds	r2, #32
 8003890:	6042      	str	r2, [r0, #4]
 8003892:	60c1      	str	r1, [r0, #12]
}
 8003894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	0801ea98 	.word	0x0801ea98
 80038a0:	0801eab0 	.word	0x0801eab0
 80038a4:	0801eab8 	.word	0x0801eab8

080038a8 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 80038a8:	b410      	push	{r4}
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <_ZN14mainScreenViewD1Ev+0x34>)
 80038ac:	6002      	str	r2, [r0, #0]
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <_ZN14mainScreenViewD1Ev+0x38>)
 80038b0:	6002      	str	r2, [r0, #0]
class Image : public Widget
 80038b2:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <_ZN14mainScreenViewD1Ev+0x3c>)
 80038b4:	66c2      	str	r2, [r0, #108]	; 0x6c
 80038b6:	490c      	ldr	r1, [pc, #48]	; (80038e8 <_ZN14mainScreenViewD1Ev+0x40>)
 80038b8:	66c1      	str	r1, [r0, #108]	; 0x6c
    {
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <_ZN14mainScreenViewD1Ev+0x44>)
 80038bc:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 80038be:	4c0c      	ldr	r4, [pc, #48]	; (80038f0 <_ZN14mainScreenViewD1Ev+0x48>)
 80038c0:	6404      	str	r4, [r0, #64]	; 0x40
 80038c2:	6401      	str	r1, [r0, #64]	; 0x40
 80038c4:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 80038c6:	490b      	ldr	r1, [pc, #44]	; (80038f4 <_ZN14mainScreenViewD1Ev+0x4c>)
 80038c8:	6001      	str	r1, [r0, #0]
    {
 80038ca:	490b      	ldr	r1, [pc, #44]	; (80038f8 <_ZN14mainScreenViewD1Ev+0x50>)
 80038cc:	6001      	str	r1, [r0, #0]
 80038ce:	490b      	ldr	r1, [pc, #44]	; (80038fc <_ZN14mainScreenViewD1Ev+0x54>)
 80038d0:	6041      	str	r1, [r0, #4]
 80038d2:	6042      	str	r2, [r0, #4]
 80038d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	0801eae8 	.word	0x0801eae8
 80038e0:	0801ea64 	.word	0x0801ea64
 80038e4:	0801f148 	.word	0x0801f148
 80038e8:	0801e9c8 	.word	0x0801e9c8
 80038ec:	0801f258 	.word	0x0801f258
 80038f0:	0801f0e0 	.word	0x0801f0e0
 80038f4:	0801ea30 	.word	0x0801ea30
 80038f8:	0801f354 	.word	0x0801f354
 80038fc:	0801eef8 	.word	0x0801eef8

08003900 <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 8003900:	4770      	bx	lr

08003902 <_ZN14mainScreenView11setupScreenEv>:
{
 8003902:	b508      	push	{r3, lr}
    mainScreenViewBase::setupScreen();
 8003904:	f7ff fe40 	bl	8003588 <_ZN18mainScreenViewBase11setupScreenEv>
}
 8003908:	bd08      	pop	{r3, pc}
	...

0800390c <_ZN14mainScreenViewD0Ev>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4604      	mov	r4, r0
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <_ZN14mainScreenViewD0Ev+0x38>)
 8003912:	6003      	str	r3, [r0, #0]
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <_ZN14mainScreenViewD0Ev+0x3c>)
 8003916:	6003      	str	r3, [r0, #0]
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <_ZN14mainScreenViewD0Ev+0x40>)
 800391a:	66c3      	str	r3, [r0, #108]	; 0x6c
 800391c:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <_ZN14mainScreenViewD0Ev+0x44>)
 800391e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <_ZN14mainScreenViewD0Ev+0x48>)
 8003922:	66c3      	str	r3, [r0, #108]	; 0x6c
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <_ZN14mainScreenViewD0Ev+0x4c>)
 8003926:	6401      	str	r1, [r0, #64]	; 0x40
 8003928:	6402      	str	r2, [r0, #64]	; 0x40
 800392a:	6403      	str	r3, [r0, #64]	; 0x40
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <_ZN14mainScreenViewD0Ev+0x50>)
 800392e:	6002      	str	r2, [r0, #0]
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <_ZN14mainScreenViewD0Ev+0x54>)
 8003932:	6002      	str	r2, [r0, #0]
 8003934:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <_ZN14mainScreenViewD0Ev+0x58>)
 8003936:	6042      	str	r2, [r0, #4]
 8003938:	6043      	str	r3, [r0, #4]
 800393a:	2198      	movs	r1, #152	; 0x98
 800393c:	f018 fcd9 	bl	801c2f2 <_ZdlPvj>
 8003940:	4620      	mov	r0, r4
 8003942:	bd10      	pop	{r4, pc}
 8003944:	0801eae8 	.word	0x0801eae8
 8003948:	0801ea64 	.word	0x0801ea64
 800394c:	0801f148 	.word	0x0801f148
 8003950:	0801e9c8 	.word	0x0801e9c8
 8003954:	0801f258 	.word	0x0801f258
 8003958:	0801f0e0 	.word	0x0801f0e0
 800395c:	0801ea30 	.word	0x0801ea30
 8003960:	0801f354 	.word	0x0801f354
 8003964:	0801eef8 	.word	0x0801eef8

08003968 <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView()
 8003968:	b510      	push	{r4, lr}
 800396a:	4604      	mov	r4, r0
 800396c:	f7ff fe50 	bl	8003610 <_ZN18mainScreenViewBaseC1Ev>
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <_ZN14mainScreenViewC1Ev+0x10>)
 8003972:	6023      	str	r3, [r4, #0]
}
 8003974:	4620      	mov	r0, r4
 8003976:	bd10      	pop	{r4, pc}
 8003978:	0801eae8 	.word	0x0801eae8

0800397c <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800397c:	4603      	mov	r3, r0
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800397e:	3830      	subs	r0, #48	; 0x30
 8003980:	b2c0      	uxtb	r0, r0
 8003982:	2809      	cmp	r0, #9
 8003984:	d90a      	bls.n	800399c <Hex2Num+0x20>
        return a - '0';
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8003986:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	2a05      	cmp	r2, #5
 800398e:	d906      	bls.n	800399e <Hex2Num+0x22>
        return (a - 'a') + 10;
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8003990:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	2a05      	cmp	r2, #5
 8003998:	d904      	bls.n	80039a4 <Hex2Num+0x28>
        return (a - 'A') + 10;
    }

    return 0;
 800399a:	2000      	movs	r0, #0
}
 800399c:	4770      	bx	lr
        return (a - 'a') + 10;
 800399e:	3b57      	subs	r3, #87	; 0x57
 80039a0:	b2d8      	uxtb	r0, r3
 80039a2:	4770      	bx	lr
        return (a - 'A') + 10;
 80039a4:	3b37      	subs	r3, #55	; 0x37
 80039a6:	b2d8      	uxtb	r0, r3
 80039a8:	4770      	bx	lr

080039aa <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80039aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ac:	4605      	mov	r5, r0
 80039ae:	460e      	mov	r6, r1
    uint32_t sum = 0;
    uint8_t i = 0;
 80039b0:	2400      	movs	r4, #0
    uint32_t sum = 0;
 80039b2:	4627      	mov	r7, r4

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80039b4:	e006      	b.n	80039c4 <ParseHexNumber+0x1a>
        sum <<= 4;
 80039b6:	013f      	lsls	r7, r7, #4
        sum += Hex2Num(*ptr);
 80039b8:	f7ff ffe0 	bl	800397c <Hex2Num>
 80039bc:	4407      	add	r7, r0
        ptr++;
 80039be:	3501      	adds	r5, #1
        i++;
 80039c0:	3401      	adds	r4, #1
 80039c2:	b2e4      	uxtb	r4, r4
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80039c4:	7828      	ldrb	r0, [r5, #0]
 80039c6:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	bf88      	it	hi
 80039d6:	2a09      	cmphi	r2, #9
 80039d8:	d9ed      	bls.n	80039b6 <ParseHexNumber+0xc>
 80039da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d9e8      	bls.n	80039b6 <ParseHexNumber+0xc>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80039e4:	b106      	cbz	r6, 80039e8 <ParseHexNumber+0x3e>
        *cnt = i;
 80039e6:	7034      	strb	r4, [r6, #0]
    }
    return sum;                                        		/* Return number */
}
 80039e8:	4638      	mov	r0, r7
 80039ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039ec <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 80039ec:	b510      	push	{r4, lr}
 80039ee:	4686      	mov	lr, r0
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 80039f0:	7803      	ldrb	r3, [r0, #0]
 80039f2:	2b2d      	cmp	r3, #45	; 0x2d
 80039f4:	d003      	beq.n	80039fe <ParseNumber+0x12>
    uint8_t minus = 0, i = 0;
 80039f6:	2400      	movs	r4, #0
 80039f8:	46a4      	mov	ip, r4
 80039fa:	2000      	movs	r0, #0
 80039fc:	e00e      	b.n	8003a1c <ParseNumber+0x30>
        minus = 1;
        ptr++;
 80039fe:	f100 0e01 	add.w	lr, r0, #1
        minus = 1;
 8003a02:	2401      	movs	r4, #1
 8003a04:	e7f8      	b.n	80039f8 <ParseNumber+0xc>
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8003a06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a0a:	3b30      	subs	r3, #48	; 0x30
 8003a0c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        ptr++;
 8003a10:	f10e 0e01 	add.w	lr, lr, #1
        i++;
 8003a14:	f10c 0c01 	add.w	ip, ip, #1
 8003a18:	fa5f fc8c 	uxtb.w	ip, ip
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003a1c:	f89e 3000 	ldrb.w	r3, [lr]
 8003a20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	2a09      	cmp	r2, #9
 8003a28:	d9ed      	bls.n	8003a06 <ParseNumber+0x1a>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8003a2a:	b109      	cbz	r1, 8003a30 <ParseNumber+0x44>
        *cnt = i;
 8003a2c:	f881 c000 	strb.w	ip, [r1]
    }
    if (minus) {                                    		/* Minus detected */
 8003a30:	b904      	cbnz	r4, 8003a34 <ParseNumber+0x48>
        return 0 - sum;
    }
    return sum;                                       		/* Return number */
}
 8003a32:	bd10      	pop	{r4, pc}
        return 0 - sum;
 8003a34:	4240      	negs	r0, r0
 8003a36:	e7fc      	b.n	8003a32 <ParseNumber+0x46>

08003a38 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8003a40:	2500      	movs	r5, #0

  while(* ptr) {
 8003a42:	e002      	b.n	8003a4a <ParseMAC+0x12>
    hexcnt = 1;
    if(*ptr != ':')
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 8003a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a48:	441c      	add	r4, r3
  while(* ptr) {
 8003a4a:	7823      	ldrb	r3, [r4, #0]
 8003a4c:	b173      	cbz	r3, 8003a6c <ParseMAC+0x34>
    hexcnt = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != ':')
 8003a54:	7823      	ldrb	r3, [r4, #0]
 8003a56:	2b3a      	cmp	r3, #58	; 0x3a
 8003a58:	d0f4      	beq.n	8003a44 <ParseMAC+0xc>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8003a5a:	f10d 0107 	add.w	r1, sp, #7
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7ff ffa3 	bl	80039aa <ParseHexNumber>
 8003a64:	1c6b      	adds	r3, r5, #1
 8003a66:	5570      	strb	r0, [r6, r5]
 8003a68:	b2dd      	uxtb	r5, r3
 8003a6a:	e7eb      	b.n	8003a44 <ParseMAC+0xc>
  }
}
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}

08003a70 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	4604      	mov	r4, r0
 8003a76:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8003a78:	2500      	movs	r5, #0

  while(* ptr) {
 8003a7a:	e002      	b.n	8003a82 <ParseIP+0x12>
    hexcnt = 1;
    if(*ptr != '.')
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 8003a7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a80:	441c      	add	r4, r3
  while(* ptr) {
 8003a82:	7823      	ldrb	r3, [r4, #0]
 8003a84:	b173      	cbz	r3, 8003aa4 <ParseIP+0x34>
    hexcnt = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != '.')
 8003a8c:	7823      	ldrb	r3, [r4, #0]
 8003a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a90:	d0f4      	beq.n	8003a7c <ParseIP+0xc>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8003a92:	f10d 0107 	add.w	r1, sp, #7
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff ffa8 	bl	80039ec <ParseNumber>
 8003a9c:	1c6b      	adds	r3, r5, #1
 8003a9e:	5570      	strb	r0, [r6, r5]
 8003aa0:	b2dd      	uxtb	r5, r3
 8003aa2:	e7eb      	b.n	8003a7c <ParseIP+0xc>
  }
}
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}

08003aa8 <ArrayTo32bit>:
  }
}

static uint32_t ArrayTo32bit(uint8_t * buf)
{
	return ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3] << 0));
 8003aa8:	7802      	ldrb	r2, [r0, #0]
 8003aaa:	7843      	ldrb	r3, [r0, #1]
 8003aac:	041b      	lsls	r3, r3, #16
 8003aae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ab2:	7882      	ldrb	r2, [r0, #2]
 8003ab4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ab8:	78c0      	ldrb	r0, [r0, #3]
}
 8003aba:	4318      	orrs	r0, r3
 8003abc:	4770      	bx	lr

08003abe <AT_ParseIsConnected>:
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8003abe:	7883      	ldrb	r3, [r0, #2]
 8003ac0:	2b31      	cmp	r3, #49	; 0x31
 8003ac2:	bf14      	ite	ne
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	2301      	moveq	r3, #1
 8003ac8:	700b      	strb	r3, [r1, #0]
}
 8003aca:	4770      	bx	lr

08003acc <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	4604      	mov	r4, r0
 8003ad0:	460d      	mov	r5, r1
 8003ad2:	4616      	mov	r6, r2
  int ret = 0;
  int16_t recv_len = 0;

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8003ad4:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8003ad8:	4608      	mov	r0, r1
 8003ada:	f7fc fc13 	bl	8000304 <strlen>
 8003ade:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003ae2:	b281      	uxth	r1, r0
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	47b8      	blx	r7

  if( ret > 0)
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	dd25      	ble.n	8003b38 <AT_ExecuteCommand+0x6c>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8003aec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003af0:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003af4:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8003af8:	4630      	mov	r0, r6
 8003afa:	4798      	blx	r3
 8003afc:	4604      	mov	r4, r0
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8003afe:	1e43      	subs	r3, r0, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003b06:	d212      	bcs.n	8003b2e <AT_ExecuteCommand+0x62>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8003b08:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 8003b0c:	d008      	beq.n	8003b20 <AT_ExecuteCommand+0x54>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
      }
      *(pdata + recv_len) = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	5533      	strb	r3, [r6, r4]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 8003b12:	490c      	ldr	r1, [pc, #48]	; (8003b44 <AT_ExecuteCommand+0x78>)
 8003b14:	4630      	mov	r0, r6
 8003b16:	f019 facf 	bl	801d0b8 <strstr>
 8003b1a:	b118      	cbz	r0, 8003b24 <AT_ExecuteCommand+0x58>
      {
        return ES_WIFI_STATUS_OK;
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e00a      	b.n	8003b36 <AT_ExecuteCommand+0x6a>
        recv_len--;
 8003b20:	b21c      	sxth	r4, r3
 8003b22:	e7f4      	b.n	8003b0e <AT_ExecuteCommand+0x42>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003b24:	4908      	ldr	r1, [pc, #32]	; (8003b48 <AT_ExecuteCommand+0x7c>)
 8003b26:	4630      	mov	r0, r6
 8003b28:	f019 fac6 	bl	801d0b8 <strstr>
 8003b2c:	b930      	cbnz	r0, 8003b3c <AT_ExecuteCommand+0x70>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003b2e:	f114 0f04 	cmn.w	r4, #4
 8003b32:	d005      	beq.n	8003b40 <AT_ExecuteCommand+0x74>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003b34:	2004      	movs	r0, #4
}
 8003b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ES_WIFI_STATUS_IO_ERROR;
 8003b38:	2004      	movs	r0, #4
 8003b3a:	e7fc      	b.n	8003b36 <AT_ExecuteCommand+0x6a>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003b3c:	2005      	movs	r0, #5
 8003b3e:	e7fa      	b.n	8003b36 <AT_ExecuteCommand+0x6a>
      return ES_WIFI_STATUS_MODULE_CRASH;
 8003b40:	2006      	movs	r0, #6
 8003b42:	e7f8      	b.n	8003b36 <AT_ExecuteCommand+0x6a>
 8003b44:	0801eb14 	.word	0x0801eb14
 8003b48:	0801eb20 	.word	0x0801eb20

08003b4c <ParseSecurity>:
{
 8003b4c:	b510      	push	{r4, lr}
 8003b4e:	4604      	mov	r4, r0
  if(strstr(ptr,"Open")) return ES_WIFI_SEC_OPEN;
 8003b50:	4915      	ldr	r1, [pc, #84]	; (8003ba8 <ParseSecurity+0x5c>)
 8003b52:	f019 fab1 	bl	801d0b8 <strstr>
 8003b56:	b108      	cbz	r0, 8003b5c <ParseSecurity+0x10>
 8003b58:	2000      	movs	r0, #0
}
 8003b5a:	bd10      	pop	{r4, pc}
  else if(strstr(ptr,"WEP")) return ES_WIFI_SEC_WEP;
 8003b5c:	4913      	ldr	r1, [pc, #76]	; (8003bac <ParseSecurity+0x60>)
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f019 faaa 	bl	801d0b8 <strstr>
 8003b64:	b108      	cbz	r0, 8003b6a <ParseSecurity+0x1e>
 8003b66:	2001      	movs	r0, #1
 8003b68:	e7f7      	b.n	8003b5a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8003b6a:	4911      	ldr	r1, [pc, #68]	; (8003bb0 <ParseSecurity+0x64>)
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f019 faa3 	bl	801d0b8 <strstr>
 8003b72:	b980      	cbnz	r0, 8003b96 <ParseSecurity+0x4a>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 8003b74:	490f      	ldr	r1, [pc, #60]	; (8003bb4 <ParseSecurity+0x68>)
 8003b76:	4620      	mov	r0, r4
 8003b78:	f019 fa9e 	bl	801d0b8 <strstr>
 8003b7c:	b968      	cbnz	r0, 8003b9a <ParseSecurity+0x4e>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8003b7e:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <ParseSecurity+0x6c>)
 8003b80:	4620      	mov	r0, r4
 8003b82:	f019 fa99 	bl	801d0b8 <strstr>
 8003b86:	b950      	cbnz	r0, 8003b9e <ParseSecurity+0x52>
  else if(strstr(ptr,"WPA")) return ES_WIFI_SEC_WPA;
 8003b88:	490c      	ldr	r1, [pc, #48]	; (8003bbc <ParseSecurity+0x70>)
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f019 fa94 	bl	801d0b8 <strstr>
 8003b90:	b138      	cbz	r0, 8003ba2 <ParseSecurity+0x56>
 8003b92:	2002      	movs	r0, #2
 8003b94:	e7e1      	b.n	8003b5a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8003b96:	2004      	movs	r0, #4
 8003b98:	e7df      	b.n	8003b5a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 8003b9a:	2005      	movs	r0, #5
 8003b9c:	e7dd      	b.n	8003b5a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	e7db      	b.n	8003b5a <ParseSecurity+0xe>
  else return ES_WIFI_SEC_UNKNOWN;
 8003ba2:	20ff      	movs	r0, #255	; 0xff
 8003ba4:	e7d9      	b.n	8003b5a <ParseSecurity+0xe>
 8003ba6:	bf00      	nop
 8003ba8:	0801eb28 	.word	0x0801eb28
 8003bac:	0801eb30 	.word	0x0801eb30
 8003bb0:	0801eb34 	.word	0x0801eb34
 8003bb4:	0801eb40 	.word	0x0801eb40
 8003bb8:	0801eb38 	.word	0x0801eb38
 8003bbc:	0801eb4c 	.word	0x0801eb4c

08003bc0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8003bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	460d      	mov	r5, r1
 8003bc8:	4617      	mov	r7, r2
 8003bca:	461e      	mov	r6, r3
  int16_t send_len = 0;
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 8003bcc:	4608      	mov	r0, r1
 8003bce:	f7fc fb99 	bl	8000304 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8003bd2:	f010 0f01 	tst.w	r0, #1
 8003bd6:	d138      	bne.n	8003c4a <AT_RequestSendData+0x8a>
 8003bd8:	fa1f f880 	uxth.w	r8, r0
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8003bdc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003be0:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003be4:	4641      	mov	r1, r8
 8003be6:	4628      	mov	r0, r5
 8003be8:	4798      	blx	r3
 8003bea:	b280      	uxth	r0, r0
  if (n == cmd_len)
 8003bec:	4580      	cmp	r8, r0
 8003bee:	d002      	beq.n	8003bf6 <AT_RequestSendData+0x36>
    else
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003bf0:	2004      	movs	r0, #4
}
 8003bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8003bf6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003bfa:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003bfe:	4631      	mov	r1, r6
 8003c00:	4638      	mov	r0, r7
 8003c02:	4798      	blx	r3
    if (send_len == len)
 8003c04:	42b0      	cmp	r0, r6
 8003c06:	d122      	bne.n	8003c4e <AT_RequestSendData+0x8e>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8003c08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c0c:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003c10:	2100      	movs	r1, #0
 8003c12:	9806      	ldr	r0, [sp, #24]
 8003c14:	4798      	blx	r3
      if (recv_len > 0)
 8003c16:	2800      	cmp	r0, #0
 8003c18:	dd10      	ble.n	8003c3c <AT_RequestSendData+0x7c>
        *(pdata+recv_len) = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9a06      	ldr	r2, [sp, #24]
 8003c1e:	5413      	strb	r3, [r2, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8003c20:	490d      	ldr	r1, [pc, #52]	; (8003c58 <AT_RequestSendData+0x98>)
 8003c22:	4610      	mov	r0, r2
 8003c24:	f019 fa48 	bl	801d0b8 <strstr>
 8003c28:	b108      	cbz	r0, 8003c2e <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e7e1      	b.n	8003bf2 <AT_RequestSendData+0x32>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003c2e:	490b      	ldr	r1, [pc, #44]	; (8003c5c <AT_RequestSendData+0x9c>)
 8003c30:	9806      	ldr	r0, [sp, #24]
 8003c32:	f019 fa41 	bl	801d0b8 <strstr>
 8003c36:	b160      	cbz	r0, 8003c52 <AT_RequestSendData+0x92>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003c38:	2005      	movs	r0, #5
 8003c3a:	e7da      	b.n	8003bf2 <AT_RequestSendData+0x32>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003c3c:	f110 0f04 	cmn.w	r0, #4
 8003c40:	d001      	beq.n	8003c46 <AT_RequestSendData+0x86>
      return ES_WIFI_STATUS_ERROR;
 8003c42:	2002      	movs	r0, #2
 8003c44:	e7d5      	b.n	8003bf2 <AT_RequestSendData+0x32>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8003c46:	2006      	movs	r0, #6
 8003c48:	e7d3      	b.n	8003bf2 <AT_RequestSendData+0x32>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	e7d1      	b.n	8003bf2 <AT_RequestSendData+0x32>
      return ES_WIFI_STATUS_ERROR;
 8003c4e:	2002      	movs	r0, #2
 8003c50:	e7cf      	b.n	8003bf2 <AT_RequestSendData+0x32>
          return ES_WIFI_STATUS_ERROR;
 8003c52:	2002      	movs	r0, #2
 8003c54:	e7cd      	b.n	8003bf2 <AT_RequestSendData+0x32>
 8003c56:	bf00      	nop
 8003c58:	0801eb14 	.word	0x0801eb14
 8003c5c:	0801eb20 	.word	0x0801eb20

08003c60 <AT_ParseFWRev>:
{
 8003c60:	b530      	push	{r4, r5, lr}
 8003c62:	b083      	sub	sp, #12
 8003c64:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 1, ".",&saveptr);
 8003c66:	aa01      	add	r2, sp, #4
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <AT_ParseFWRev+0x44>)
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f019 fa62 	bl	801d134 <strtok_r>
  uint8_t num = 0;
 8003c70:	2400      	movs	r4, #0
  while ((ptr != NULL) && (num < 4)) {
 8003c72:	e006      	b.n	8003c82 <AT_ParseFWRev+0x22>
    num++;
 8003c74:	3401      	adds	r4, #1
 8003c76:	b2e4      	uxtb	r4, r4
    ptr = strtok_r(NULL, ".",&saveptr);
 8003c78:	aa01      	add	r2, sp, #4
 8003c7a:	490a      	ldr	r1, [pc, #40]	; (8003ca4 <AT_ParseFWRev+0x44>)
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f019 fa59 	bl	801d134 <strtok_r>
  while ((ptr != NULL) && (num < 4)) {
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	bf18      	it	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2c03      	cmp	r4, #3
 8003c8a:	bf88      	it	hi
 8003c8c:	2300      	movhi	r3, #0
 8003c8e:	b133      	cbz	r3, 8003c9e <AT_ParseFWRev+0x3e>
    switch (num) {
 8003c90:	2c03      	cmp	r4, #3
 8003c92:	d8ef      	bhi.n	8003c74 <AT_ParseFWRev+0x14>
      ver[num] =  ParseNumber(ptr,0);
 8003c94:	2100      	movs	r1, #0
 8003c96:	f7ff fea9 	bl	80039ec <ParseNumber>
 8003c9a:	5528      	strb	r0, [r5, r4]
      break;
 8003c9c:	e7ea      	b.n	8003c74 <AT_ParseFWRev+0x14>
}
 8003c9e:	b003      	add	sp, #12
 8003ca0:	bd30      	pop	{r4, r5, pc}
 8003ca2:	bf00      	nop
 8003ca4:	0801eb50 	.word	0x0801eb50

08003ca8 <AT_ParsePing>:
{
 8003ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003caa:	b083      	sub	sp, #12
 8003cac:	4605      	mov	r5, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4610      	mov	r0, r2
  ptr= strtok_r(pdata,",\n\r",&saveptr);
 8003cb2:	aa01      	add	r2, sp, #4
 8003cb4:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <AT_ParsePing+0x4c>)
 8003cb6:	f019 fa3d 	bl	801d134 <strtok_r>
 8003cba:	4603      	mov	r3, r0
  int i=0;
 8003cbc:	2600      	movs	r6, #0
  while(ptr)
 8003cbe:	b1bb      	cbz	r3, 8003cf0 <AT_ParsePing+0x48>
    ptr = strtok_r(0,"\n\r",&saveptr);
 8003cc0:	aa01      	add	r2, sp, #4
 8003cc2:	490d      	ldr	r1, [pc, #52]	; (8003cf8 <AT_ParsePing+0x50>)
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f019 fa35 	bl	801d134 <strtok_r>
    if (ptr)
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d0f6      	beq.n	8003cbe <AT_ParsePing+0x16>
      res[i++]=ParseNumber(ptr,0);
 8003cd0:	1c77      	adds	r7, r6, #1
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f7ff fe8a 	bl	80039ec <ParseNumber>
 8003cd8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      if (i==count) return;
 8003cdc:	42bc      	cmp	r4, r7
 8003cde:	d007      	beq.n	8003cf0 <AT_ParsePing+0x48>
      ptr = strtok_r(0,",\n\r",&saveptr);
 8003ce0:	aa01      	add	r2, sp, #4
 8003ce2:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <AT_ParsePing+0x4c>)
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f019 fa25 	bl	801d134 <strtok_r>
 8003cea:	4603      	mov	r3, r0
      res[i++]=ParseNumber(ptr,0);
 8003cec:	463e      	mov	r6, r7
 8003cee:	e7e6      	b.n	8003cbe <AT_ParsePing+0x16>
}
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf4:	0801eb58 	.word	0x0801eb58
 8003cf8:	0801eb5c 	.word	0x0801eb5c

08003cfc <AT_ParseTransportSettings>:
{
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8003d02:	aa01      	add	r2, sp, #4
 8003d04:	4937      	ldr	r1, [pc, #220]	; (8003de4 <AT_ParseTransportSettings+0xe8>)
 8003d06:	3002      	adds	r0, #2
 8003d08:	f019 fa14 	bl	801d134 <strtok_r>
 8003d0c:	4603      	mov	r3, r0
  uint8_t num = 0;
 8003d0e:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8003d10:	e010      	b.n	8003d34 <AT_ParseTransportSettings+0x38>
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fe69 	bl	80039ec <ParseNumber>
 8003d1a:	7028      	strb	r0, [r5, #0]
    ptr = strtok_r(NULL, ",",&saveptr);
 8003d1c:	aa01      	add	r2, sp, #4
 8003d1e:	4931      	ldr	r1, [pc, #196]	; (8003de4 <AT_ParseTransportSettings+0xe8>)
 8003d20:	2000      	movs	r0, #0
 8003d22:	f019 fa07 	bl	801d134 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8003d26:	4603      	mov	r3, r0
 8003d28:	b118      	cbz	r0, 8003d32 <AT_ParseTransportSettings+0x36>
 8003d2a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8003d2e:	2a2c      	cmp	r2, #44	; 0x2c
 8003d30:	d053      	beq.n	8003dda <AT_ParseTransportSettings+0xde>
{
 8003d32:	4626      	mov	r6, r4
  while (ptr != NULL) {
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d053      	beq.n	8003de0 <AT_ParseTransportSettings+0xe4>
    switch (num++) {
 8003d38:	1c74      	adds	r4, r6, #1
 8003d3a:	b2e4      	uxtb	r4, r4
 8003d3c:	2e09      	cmp	r6, #9
 8003d3e:	d8ed      	bhi.n	8003d1c <AT_ParseTransportSettings+0x20>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <AT_ParseTransportSettings+0x4c>)
 8003d42:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d13 	.word	0x08003d13
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d7b 	.word	0x08003d7b
 8003d54:	08003d87 	.word	0x08003d87
 8003d58:	08003d93 	.word	0x08003d93
 8003d5c:	08003d9f 	.word	0x08003d9f
 8003d60:	08003dab 	.word	0x08003dab
 8003d64:	08003db7 	.word	0x08003db7
 8003d68:	08003dc3 	.word	0x08003dc3
 8003d6c:	08003dcf 	.word	0x08003dcf
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8003d70:	1c69      	adds	r1, r5, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fe7c 	bl	8003a70 <ParseIP>
      break;
 8003d78:	e7d0      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fe35 	bl	80039ec <ParseNumber>
 8003d82:	80e8      	strh	r0, [r5, #6]
      break;
 8003d84:	e7ca      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8003d86:	f105 0108 	add.w	r1, r5, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fe70 	bl	8003a70 <ParseIP>
      break;
 8003d90:	e7c4      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fe29 	bl	80039ec <ParseNumber>
 8003d9a:	81a8      	strh	r0, [r5, #12]
      break;
 8003d9c:	e7be      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fe23 	bl	80039ec <ParseNumber>
 8003da6:	73a8      	strb	r0, [r5, #14]
      break;
 8003da8:	e7b8      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fe1d 	bl	80039ec <ParseNumber>
 8003db2:	73e8      	strb	r0, [r5, #15]
      break;
 8003db4:	e7b2      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fe17 	bl	80039ec <ParseNumber>
 8003dbe:	7428      	strb	r0, [r5, #16]
      break;
 8003dc0:	e7ac      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fe11 	bl	80039ec <ParseNumber>
 8003dca:	7468      	strb	r0, [r5, #17]
      break;
 8003dcc:	e7a6      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fe0b 	bl	80039ec <ParseNumber>
 8003dd6:	74a8      	strb	r0, [r5, #18]
      break;
 8003dd8:	e7a0      	b.n	8003d1c <AT_ParseTransportSettings+0x20>
      num++;
 8003dda:	1cb4      	adds	r4, r6, #2
 8003ddc:	b2e4      	uxtb	r4, r4
 8003dde:	e7a8      	b.n	8003d32 <AT_ParseTransportSettings+0x36>
}
 8003de0:	b002      	add	sp, #8
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	0801eb54 	.word	0x0801eb54

08003de8 <AT_ParseInfo>:
{
 8003de8:	b530      	push	{r4, r5, lr}
 8003dea:	b083      	sub	sp, #12
 8003dec:	4605      	mov	r5, r0
 8003dee:	4608      	mov	r0, r1
  ptr = strtok_r((char *)pdata + 2, ",", &saveptr);
 8003df0:	aa01      	add	r2, sp, #4
 8003df2:	492c      	ldr	r1, [pc, #176]	; (8003ea4 <AT_ParseInfo+0xbc>)
 8003df4:	3002      	adds	r0, #2
 8003df6:	f019 f99d 	bl	801d134 <strtok_r>
  uint8_t num = 0;
 8003dfa:	2300      	movs	r3, #0
  while (ptr != NULL){
 8003dfc:	e00a      	b.n	8003e14 <AT_ParseInfo+0x2c>
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8003dfe:	2220      	movs	r2, #32
 8003e00:	4601      	mov	r1, r0
 8003e02:	4628      	mov	r0, r5
 8003e04:	f019 f945 	bl	801d092 <strncpy>
    ptr = strtok_r(NULL, ",", &saveptr);
 8003e08:	aa01      	add	r2, sp, #4
 8003e0a:	4926      	ldr	r1, [pc, #152]	; (8003ea4 <AT_ParseInfo+0xbc>)
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f019 f991 	bl	801d134 <strtok_r>
    switch (num++) {
 8003e12:	4623      	mov	r3, r4
  while (ptr != NULL){
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d042      	beq.n	8003e9e <AT_ParseInfo+0xb6>
    switch (num++) {
 8003e18:	1c5c      	adds	r4, r3, #1
 8003e1a:	b2e4      	uxtb	r4, r4
 8003e1c:	2b06      	cmp	r3, #6
 8003e1e:	d8f3      	bhi.n	8003e08 <AT_ParseInfo+0x20>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <AT_ParseInfo+0x40>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003dff 	.word	0x08003dff
 8003e2c:	08003e45 	.word	0x08003e45
 8003e30:	08003e53 	.word	0x08003e53
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e6f 	.word	0x08003e6f
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e89 	.word	0x08003e89
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8003e44:	2218      	movs	r2, #24
 8003e46:	4601      	mov	r1, r0
 8003e48:	f105 0020 	add.w	r0, r5, #32
 8003e4c:	f019 f921 	bl	801d092 <strncpy>
      break;
 8003e50:	e7da      	b.n	8003e08 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8003e52:	2210      	movs	r2, #16
 8003e54:	4601      	mov	r1, r0
 8003e56:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8003e5a:	f019 f91a 	bl	801d092 <strncpy>
      break;
 8003e5e:	e7d3      	b.n	8003e08 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8003e60:	2210      	movs	r2, #16
 8003e62:	4601      	mov	r1, r0
 8003e64:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8003e68:	f019 f913 	bl	801d092 <strncpy>
      break;
 8003e6c:	e7cc      	b.n	8003e08 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8003e6e:	2210      	movs	r2, #16
 8003e70:	4601      	mov	r1, r0
 8003e72:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8003e76:	f019 f90c 	bl	801d092 <strncpy>
      break;
 8003e7a:	e7c5      	b.n	8003e08 <AT_ParseInfo+0x20>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f7ff fdb5 	bl	80039ec <ParseNumber>
 8003e82:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
      break;
 8003e86:	e7bf      	b.n	8003e08 <AT_ParseInfo+0x20>
      ptr = strtok_r(ptr, "\r", &saveptr);
 8003e88:	aa01      	add	r2, sp, #4
 8003e8a:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <AT_ParseInfo+0xc0>)
 8003e8c:	f019 f952 	bl	801d134 <strtok_r>
 8003e90:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8003e92:	2220      	movs	r2, #32
 8003e94:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8003e98:	f019 f8fb 	bl	801d092 <strncpy>
      break;
 8003e9c:	e7b4      	b.n	8003e08 <AT_ParseInfo+0x20>
}
 8003e9e:	b003      	add	sp, #12
 8003ea0:	bd30      	pop	{r4, r5, pc}
 8003ea2:	bf00      	nop
 8003ea4:	0801eb54 	.word	0x0801eb54
 8003ea8:	0801eccc 	.word	0x0801eccc

08003eac <AT_ParseSingleAP>:
{
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	460e      	mov	r6, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8003eb2:	aa01      	add	r2, sp, #4
 8003eb4:	4926      	ldr	r1, [pc, #152]	; (8003f50 <AT_ParseSingleAP+0xa4>)
 8003eb6:	3002      	adds	r0, #2
 8003eb8:	f019 f93c 	bl	801d134 <strtok_r>
 8003ebc:	4604      	mov	r4, r0
  uint8_t num = 0;
 8003ebe:	2300      	movs	r3, #0
  while (ptr != NULL) {
 8003ec0:	e011      	b.n	8003ee6 <AT_ParseSingleAP+0x3a>
      ptr[strlen(ptr) - 1] = 0;
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7fc fa1e 	bl	8000304 <strlen>
 8003ec8:	3801      	subs	r0, #1
 8003eca:	2300      	movs	r3, #0
 8003ecc:	5423      	strb	r3, [r4, r0]
      strncpy((char *)AP->SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8003ece:	2221      	movs	r2, #33	; 0x21
 8003ed0:	1c61      	adds	r1, r4, #1
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f019 f8dd 	bl	801d092 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8003ed8:	aa01      	add	r2, sp, #4
 8003eda:	491d      	ldr	r1, [pc, #116]	; (8003f50 <AT_ParseSingleAP+0xa4>)
 8003edc:	2000      	movs	r0, #0
 8003ede:	f019 f929 	bl	801d134 <strtok_r>
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	462b      	mov	r3, r5
  while (ptr != NULL) {
 8003ee6:	b38c      	cbz	r4, 8003f4c <AT_ParseSingleAP+0xa0>
    switch (num++) {
 8003ee8:	1c5d      	adds	r5, r3, #1
 8003eea:	b2ed      	uxtb	r5, r5
 8003eec:	3b01      	subs	r3, #1
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d8f2      	bhi.n	8003ed8 <AT_ParseSingleAP+0x2c>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <AT_ParseSingleAP+0x4c>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003ec3 	.word	0x08003ec3
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003ed9 	.word	0x08003ed9
 8003f08:	08003ed9 	.word	0x08003ed9
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003ed9 	.word	0x08003ed9
 8003f14:	08003f3d 	.word	0x08003f3d
      ParseMAC(ptr, AP->MAC);
 8003f18:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7ff fd8b 	bl	8003a38 <ParseMAC>
      break;
 8003f22:	e7d9      	b.n	8003ed8 <AT_ParseSingleAP+0x2c>
      AP->RSSI = ParseNumber(ptr, NULL);
 8003f24:	2100      	movs	r1, #0
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7ff fd60 	bl	80039ec <ParseNumber>
 8003f2c:	8470      	strh	r0, [r6, #34]	; 0x22
      break;
 8003f2e:	e7d3      	b.n	8003ed8 <AT_ParseSingleAP+0x2c>
      AP->Security = ParseSecurity(ptr);
 8003f30:	4620      	mov	r0, r4
 8003f32:	f7ff fe0b 	bl	8003b4c <ParseSecurity>
 8003f36:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8003f3a:	e7cd      	b.n	8003ed8 <AT_ParseSingleAP+0x2c>
      AP->Channel = ParseNumber(ptr, NULL);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f7ff fd54 	bl	80039ec <ParseNumber>
 8003f44:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
      num = 1;
 8003f48:	2501      	movs	r5, #1
      break;
 8003f4a:	e7c5      	b.n	8003ed8 <AT_ParseSingleAP+0x2c>
}
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	0801eb54 	.word	0x0801eb54

08003f54 <AT_ParseAP>:
{
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	b083      	sub	sp, #12
 8003f58:	460f      	mov	r7, r1
  APs->nbr = 0;
 8003f5a:	2400      	movs	r4, #0
 8003f5c:	f881 4370 	strb.w	r4, [r1, #880]	; 0x370
  ptr = strtok_r(pdata + 2, "," ,&saveptr);
 8003f60:	aa01      	add	r2, sp, #4
 8003f62:	4935      	ldr	r1, [pc, #212]	; (8004038 <AT_ParseAP+0xe4>)
 8003f64:	3002      	adds	r0, #2
 8003f66:	f019 f8e5 	bl	801d134 <strtok_r>
 8003f6a:	4605      	mov	r5, r0
  uint8_t num = 0;
 8003f6c:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8003f6e:	e015      	b.n	8003f9c <AT_ParseAP+0x48>
      ptr[strlen(ptr) - 1] = 0;
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7fc f9c7 	bl	8000304 <strlen>
 8003f76:	3801      	subs	r0, #1
 8003f78:	2300      	movs	r3, #0
 8003f7a:	542b      	strb	r3, [r5, r0]
      strncpy((char *)APs->AP[APs->nbr].SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8003f7c:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8003f80:	2221      	movs	r2, #33	; 0x21
 8003f82:	1c69      	adds	r1, r5, #1
 8003f84:	202c      	movs	r0, #44	; 0x2c
 8003f86:	fb00 7003 	mla	r0, r0, r3, r7
 8003f8a:	f019 f882 	bl	801d092 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8003f8e:	aa01      	add	r2, sp, #4
 8003f90:	4929      	ldr	r1, [pc, #164]	; (8004038 <AT_ParseAP+0xe4>)
 8003f92:	2000      	movs	r0, #0
 8003f94:	f019 f8ce 	bl	801d134 <strtok_r>
 8003f98:	4605      	mov	r5, r0
 8003f9a:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	d049      	beq.n	8004034 <AT_ParseAP+0xe0>
 8003fa0:	f897 6370 	ldrb.w	r6, [r7, #880]	; 0x370
 8003fa4:	2e13      	cmp	r6, #19
 8003fa6:	d845      	bhi.n	8004034 <AT_ParseAP+0xe0>
    switch (num++) {
 8003fa8:	1c5c      	adds	r4, r3, #1
 8003faa:	b2e4      	uxtb	r4, r4
 8003fac:	3b01      	subs	r3, #1
 8003fae:	2b07      	cmp	r3, #7
 8003fb0:	d8ed      	bhi.n	8003f8e <AT_ParseAP+0x3a>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <AT_ParseAP+0x64>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003f71 	.word	0x08003f71
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08003f8f 	.word	0x08003f8f
 8003fc8:	08003f8f 	.word	0x08003f8f
 8003fcc:	08004003 	.word	0x08004003
 8003fd0:	08003f8f 	.word	0x08003f8f
 8003fd4:	08004015 	.word	0x08004015
      ParseMAC(ptr, APs->AP[APs->nbr].MAC);
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb06 f101 	mul.w	r1, r6, r1
 8003fde:	3120      	adds	r1, #32
 8003fe0:	4439      	add	r1, r7
 8003fe2:	3104      	adds	r1, #4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7ff fd27 	bl	8003a38 <ParseMAC>
      break;
 8003fea:	e7d0      	b.n	8003f8e <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].RSSI = ParseNumber(ptr, NULL);
 8003fec:	2100      	movs	r1, #0
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f7ff fcfc 	bl	80039ec <ParseNumber>
 8003ff4:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8003ff8:	222c      	movs	r2, #44	; 0x2c
 8003ffa:	fb02 7303 	mla	r3, r2, r3, r7
 8003ffe:	8458      	strh	r0, [r3, #34]	; 0x22
      break;
 8004000:	e7c5      	b.n	8003f8e <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Security = ParseSecurity(ptr);
 8004002:	4628      	mov	r0, r5
 8004004:	f7ff fda2 	bl	8003b4c <ParseSecurity>
 8004008:	232c      	movs	r3, #44	; 0x2c
 800400a:	fb03 7606 	mla	r6, r3, r6, r7
 800400e:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8004012:	e7bc      	b.n	8003f8e <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Channel = ParseNumber(ptr, NULL);
 8004014:	2100      	movs	r1, #0
 8004016:	4628      	mov	r0, r5
 8004018:	f7ff fce8 	bl	80039ec <ParseNumber>
 800401c:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8004020:	222c      	movs	r2, #44	; 0x2c
 8004022:	fb02 7203 	mla	r2, r2, r3, r7
 8004026:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
      APs->nbr++;
 800402a:	3301      	adds	r3, #1
 800402c:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
      num = 1;
 8004030:	2401      	movs	r4, #1
      break;
 8004032:	e7ac      	b.n	8003f8e <AT_ParseAP+0x3a>
}
 8004034:	b003      	add	sp, #12
 8004036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004038:	0801eb54 	.word	0x0801eb54

0800403c <AT_ParseConnSettings>:
{
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8004042:	aa01      	add	r2, sp, #4
 8004044:	4942      	ldr	r1, [pc, #264]	; (8004150 <AT_ParseConnSettings+0x114>)
 8004046:	3002      	adds	r0, #2
 8004048:	f019 f874 	bl	801d134 <strtok_r>
 800404c:	4603      	mov	r3, r0
  uint8_t num = 0;
 800404e:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8004050:	e010      	b.n	8004074 <AT_ParseConnSettings+0x38>
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8004052:	2221      	movs	r2, #33	; 0x21
 8004054:	4619      	mov	r1, r3
 8004056:	4628      	mov	r0, r5
 8004058:	f019 f81b 	bl	801d092 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 800405c:	aa01      	add	r2, sp, #4
 800405e:	493c      	ldr	r1, [pc, #240]	; (8004150 <AT_ParseConnSettings+0x114>)
 8004060:	2000      	movs	r0, #0
 8004062:	f019 f867 	bl	801d134 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8004066:	4603      	mov	r3, r0
 8004068:	b118      	cbz	r0, 8004072 <AT_ParseConnSettings+0x36>
 800406a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800406e:	2a2c      	cmp	r2, #44	; 0x2c
 8004070:	d069      	beq.n	8004146 <AT_ParseConnSettings+0x10a>
{
 8004072:	4626      	mov	r6, r4
  while (ptr != NULL) {
 8004074:	2b00      	cmp	r3, #0
 8004076:	d069      	beq.n	800414c <AT_ParseConnSettings+0x110>
    switch (num++) {
 8004078:	1c74      	adds	r4, r6, #1
 800407a:	b2e4      	uxtb	r4, r4
 800407c:	2e0b      	cmp	r6, #11
 800407e:	d8ed      	bhi.n	800405c <AT_ParseConnSettings+0x20>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <AT_ParseConnSettings+0x4c>)
 8004082:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8004086:	bf00      	nop
 8004088:	08004053 	.word	0x08004053
 800408c:	080040b9 	.word	0x080040b9
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080040d3 	.word	0x080040d3
 8004098:	080040e1 	.word	0x080040e1
 800409c:	080040ef 	.word	0x080040ef
 80040a0:	080040fb 	.word	0x080040fb
 80040a4:	08004107 	.word	0x08004107
 80040a8:	08004113 	.word	0x08004113
 80040ac:	0800411f 	.word	0x0800411f
 80040b0:	0800412b 	.word	0x0800412b
 80040b4:	08004139 	.word	0x08004139
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80040b8:	2221      	movs	r2, #33	; 0x21
 80040ba:	4619      	mov	r1, r3
 80040bc:	18a8      	adds	r0, r5, r2
 80040be:	f018 ffe8 	bl	801d092 <strncpy>
      break;
 80040c2:	e7cb      	b.n	800405c <AT_ParseConnSettings+0x20>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fc90 	bl	80039ec <ParseNumber>
 80040cc:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
        break;
 80040d0:	e7c4      	b.n	800405c <AT_ParseConnSettings+0x20>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fc89 	bl	80039ec <ParseNumber>
 80040da:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
      break;
 80040de:	e7bd      	b.n	800405c <AT_ParseConnSettings+0x20>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fc82 	bl	80039ec <ParseNumber>
 80040e8:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
      break;
 80040ec:	e7b6      	b.n	800405c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Addr);
 80040ee:	f105 0148 	add.w	r1, r5, #72	; 0x48
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fcbc 	bl	8003a70 <ParseIP>
      break;
 80040f8:	e7b0      	b.n	800405c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Mask);
 80040fa:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fcb6 	bl	8003a70 <ParseIP>
      break;
 8004104:	e7aa      	b.n	800405c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8004106:	f105 0150 	add.w	r1, r5, #80	; 0x50
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fcb0 	bl	8003a70 <ParseIP>
      break;
 8004110:	e7a4      	b.n	800405c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS1);
 8004112:	f105 0154 	add.w	r1, r5, #84	; 0x54
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fcaa 	bl	8003a70 <ParseIP>
      break;
 800411c:	e79e      	b.n	800405c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS2);
 800411e:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fca4 	bl	8003a70 <ParseIP>
      break;
 8004128:	e798      	b.n	800405c <AT_ParseConnSettings+0x20>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fc5d 	bl	80039ec <ParseNumber>
 8004132:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
      break;
 8004136:	e791      	b.n	800405c <AT_ParseConnSettings+0x20>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fc56 	bl	80039ec <ParseNumber>
 8004140:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
      break;
 8004144:	e78a      	b.n	800405c <AT_ParseConnSettings+0x20>
      num++;
 8004146:	1cb4      	adds	r4, r6, #2
 8004148:	b2e4      	uxtb	r4, r4
 800414a:	e792      	b.n	8004072 <AT_ParseConnSettings+0x36>
}
 800414c:	b002      	add	sp, #8
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	0801eb54 	.word	0x0801eb54

08004154 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8004154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004158:	4604      	mov	r4, r0
 800415a:	460d      	mov	r5, r1
 800415c:	4690      	mov	r8, r2
 800415e:	461e      	mov	r6, r3
  int len;
  uint8_t *p=Obj->CmdData;
 8004160:	f500 7994 	add.w	r9, r0, #296	; 0x128

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8004164:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8004168:	4608      	mov	r0, r1
 800416a:	f7fc f8cb 	bl	8000304 <strlen>
 800416e:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8004172:	b281      	uxth	r1, r0
 8004174:	4628      	mov	r0, r5
 8004176:	47b8      	blx	r7
 8004178:	2800      	cmp	r0, #0
 800417a:	dd48      	ble.n	800420e <AT_RequestReceiveData+0xba>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800417c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004180:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8004184:	2100      	movs	r1, #0
 8004186:	4648      	mov	r0, r9
 8004188:	4798      	blx	r3
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800418a:	f110 0f04 	cmn.w	r0, #4
 800418e:	d041      	beq.n	8004214 <AT_RequestReceiveData+0xc0>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8004190:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8004194:	2b0d      	cmp	r3, #13
 8004196:	d13f      	bne.n	8004218 <AT_RequestReceiveData+0xc4>
 8004198:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 800419c:	2b0a      	cmp	r3, #10
 800419e:	d13d      	bne.n	800421c <AT_RequestReceiveData+0xc8>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
    }
    len-=2;
 80041a0:	1e85      	subs	r5, r0, #2
    p+=2;
 80041a2:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    if (len >= AT_OK_STRING_LEN)
 80041a6:	2d07      	cmp	r5, #7
 80041a8:	d802      	bhi.n	80041b0 <AT_RequestReceiveData+0x5c>

     *ReadData = 0;
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80041aa:	2004      	movs	r0, #4
 80041ac:	e030      	b.n	8004210 <AT_RequestReceiveData+0xbc>
     while(len && (p[len-1]==0x15)) len--;
 80041ae:	3d01      	subs	r5, #1
 80041b0:	b125      	cbz	r5, 80041bc <AT_RequestReceiveData+0x68>
 80041b2:	1963      	adds	r3, r4, r5
 80041b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80041b8:	2b15      	cmp	r3, #21
 80041ba:	d0f8      	beq.n	80041ae <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 80041bc:	2300      	movs	r3, #0
 80041be:	5563      	strb	r3, [r4, r5]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80041c0:	f1a5 0008 	sub.w	r0, r5, #8
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <AT_RequestReceiveData+0xcc>)
 80041c6:	4420      	add	r0, r4
 80041c8:	f018 ff76 	bl	801d0b8 <strstr>
 80041cc:	b170      	cbz	r0, 80041ec <AT_RequestReceiveData+0x98>
       *ReadData = len - AT_OK_STRING_LEN;
 80041ce:	3d08      	subs	r5, #8
 80041d0:	b2ad      	uxth	r5, r5
 80041d2:	9b08      	ldr	r3, [sp, #32]
 80041d4:	801d      	strh	r5, [r3, #0]
	   if (*ReadData > Reqlen)
 80041d6:	42b5      	cmp	r5, r6
 80041d8:	d900      	bls.n	80041dc <AT_RequestReceiveData+0x88>
         *ReadData = Reqlen;
 80041da:	801e      	strh	r6, [r3, #0]
       memcpy(pdata, p, *ReadData);
 80041dc:	9b08      	ldr	r3, [sp, #32]
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	4621      	mov	r1, r4
 80041e2:	4640      	mov	r0, r8
 80041e4:	f018 fa3c 	bl	801c660 <memcpy>
       return ES_WIFI_STATUS_OK;
 80041e8:	2000      	movs	r0, #0
 80041ea:	e011      	b.n	8004210 <AT_RequestReceiveData+0xbc>
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80041ec:	1f28      	subs	r0, r5, #4
 80041ee:	2204      	movs	r2, #4
 80041f0:	490c      	ldr	r1, [pc, #48]	; (8004224 <AT_RequestReceiveData+0xd0>)
 80041f2:	4420      	add	r0, r4
 80041f4:	f018 fa24 	bl	801c640 <memcmp>
 80041f8:	b920      	cbnz	r0, 8004204 <AT_RequestReceiveData+0xb0>
       *ReadData = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	9a08      	ldr	r2, [sp, #32]
 80041fe:	8013      	strh	r3, [r2, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8004200:	2005      	movs	r0, #5
 8004202:	e005      	b.n	8004210 <AT_RequestReceiveData+0xbc>
     *ReadData = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	9a08      	ldr	r2, [sp, #32]
 8004208:	8013      	strh	r3, [r2, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800420a:	2005      	movs	r0, #5
 800420c:	e000      	b.n	8004210 <AT_RequestReceiveData+0xbc>
  return ES_WIFI_STATUS_IO_ERROR;
 800420e:	2004      	movs	r0, #4
}
 8004210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return ES_WIFI_STATUS_MODULE_CRASH;
 8004214:	2006      	movs	r0, #6
 8004216:	e7fb      	b.n	8004210 <AT_RequestReceiveData+0xbc>
     return  ES_WIFI_STATUS_IO_ERROR;
 8004218:	2004      	movs	r0, #4
 800421a:	e7f9      	b.n	8004210 <AT_RequestReceiveData+0xbc>
 800421c:	2004      	movs	r0, #4
 800421e:	e7f7      	b.n	8004210 <AT_RequestReceiveData+0xbc>
 8004220:	0801eb14 	.word	0x0801eb14
 8004224:	0801eb18 	.word	0x0801eb18

08004228 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800422c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004230:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8004234:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8004238:	2000      	movs	r0, #0
 800423a:	4798      	blx	r3
 800423c:	b110      	cbz	r0, 8004244 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800423e:	2502      	movs	r5, #2
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8004240:	4628      	mov	r0, r5
 8004242:	bd70      	pop	{r4, r5, r6, pc}
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8004244:	f504 7694 	add.w	r6, r4, #296	; 0x128
 8004248:	4632      	mov	r2, r6
 800424a:	4906      	ldr	r1, [pc, #24]	; (8004264 <ES_WIFI_Init+0x3c>)
 800424c:	4620      	mov	r0, r4
 800424e:	f7ff fc3d 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004252:	4605      	mov	r5, r0
 8004254:	2800      	cmp	r0, #0
 8004256:	d1f3      	bne.n	8004240 <ES_WIFI_Init+0x18>
      AT_ParseInfo (Obj, Obj->CmdData);
 8004258:	4631      	mov	r1, r6
 800425a:	4620      	mov	r0, r4
 800425c:	f7ff fdc4 	bl	8003de8 <AT_ParseInfo>
 8004260:	e7ee      	b.n	8004240 <ES_WIFI_Init+0x18>
 8004262:	bf00      	nop
 8004264:	0801eb60 	.word	0x0801eb60

08004268 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8004268:	b470      	push	{r4, r5, r6}
 800426a:	9c03      	ldr	r4, [sp, #12]
 800426c:	9d04      	ldr	r5, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800426e:	2900      	cmp	r1, #0
 8004270:	bf18      	it	ne
 8004272:	2800      	cmpne	r0, #0
 8004274:	d013      	beq.n	800429e <ES_WIFI_RegisterBusIO+0x36>
 8004276:	460e      	mov	r6, r1
 8004278:	fab4 f184 	clz	r1, r4
 800427c:	0949      	lsrs	r1, r1, #5
 800427e:	b182      	cbz	r2, 80042a2 <ES_WIFI_RegisterBusIO+0x3a>
 8004280:	b979      	cbnz	r1, 80042a2 <ES_WIFI_RegisterBusIO+0x3a>
 8004282:	b185      	cbz	r5, 80042a6 <ES_WIFI_RegisterBusIO+0x3e>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8004284:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8004288:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800428c:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8004290:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8004294:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8004298:	2000      	movs	r0, #0
}
 800429a:	bc70      	pop	{r4, r5, r6}
 800429c:	4770      	bx	lr
    return ES_WIFI_STATUS_ERROR;
 800429e:	2002      	movs	r0, #2
 80042a0:	e7fb      	b.n	800429a <ES_WIFI_RegisterBusIO+0x32>
 80042a2:	2002      	movs	r0, #2
 80042a4:	e7f9      	b.n	800429a <ES_WIFI_RegisterBusIO+0x32>
 80042a6:	2002      	movs	r0, #2
 80042a8:	e7f7      	b.n	800429a <ES_WIFI_RegisterBusIO+0x32>
	...

080042ac <ES_WIFI_ListAccessPoints>:
  * @param  Obj: pointer to module handle
  * @param  APs: pointer Access points structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_ListAccessPoints(ES_WIFIObject_t *Obj, ES_WIFI_APs_t *APs)
{
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	b083      	sub	sp, #12
 80042b0:	4606      	mov	r6, r0
 80042b2:	460f      	mov	r7, r1
  ES_WIFI_Status_t ret;
  int send_len;
  int16_t recv_len = 0;
  uint8_t version[4] = { 0 };
 80042b4:	2300      	movs	r3, #0
 80042b6:	9301      	str	r3, [sp, #4]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, (char*)Obj->FW_Rev);
 80042b8:	f500 7494 	add.w	r4, r0, #296	; 0x128
 80042bc:	f100 0120 	add.w	r1, r0, #32
 80042c0:	4620      	mov	r0, r4
 80042c2:	f018 fe6f 	bl	801cfa4 <siprintf>

  AT_ParseFWRev((char*)Obj->CmdData, version);
 80042c6:	a901      	add	r1, sp, #4
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7ff fcc9 	bl	8003c60 <AT_ParseFWRev>

  if (ArrayTo32bit(version) >= UPDATED_SCAN_PARAMETERS_FW_REV)
 80042ce:	a801      	add	r0, sp, #4
 80042d0:	f7ff fbea 	bl	8003aa8 <ArrayTo32bit>
 80042d4:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <ES_WIFI_ListAccessPoints+0x104>)
 80042d6:	4298      	cmp	r0, r3
 80042d8:	d958      	bls.n	800438c <ES_WIFI_ListAccessPoints+0xe0>
  {
    APs->nbr = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370

    sprintf((char*)Obj->CmdData,"F0=2\r");
 80042e0:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <ES_WIFI_ListAccessPoints+0x108>)
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
 80042e8:	889b      	ldrh	r3, [r3, #4]
 80042ea:	80a3      	strh	r3, [r4, #4]

    send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 80042ec:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7fc f807 	bl	8000304 <strlen>
 80042f6:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 80042fa:	b281      	uxth	r1, r0
 80042fc:	4620      	mov	r0, r4
 80042fe:	47a8      	blx	r5

    if (send_len == 5)
 8004300:	2805      	cmp	r0, #5
 8004302:	d019      	beq.n	8004338 <ES_WIFI_ListAccessPoints+0x8c>
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
	  } while (send_len == 3);
    }

    UNLOCK_WIFI();
    return ES_WIFI_STATUS_IO_ERROR;
 8004304:	2504      	movs	r5, #4
      AT_ParseAP((char *)Obj->CmdData, APs);
    }
    UNLOCK_WIFI();
    return ret;
  }
}
 8004306:	4628      	mov	r0, r5
 8004308:	b003      	add	sp, #12
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800430c:	f115 0f04 	cmn.w	r5, #4
 8004310:	d04b      	beq.n	80043aa <ES_WIFI_ListAccessPoints+0xfe>
        if (APs->nbr < ES_WIFI_MAX_DETECTED_AP)
 8004312:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8004316:	2b13      	cmp	r3, #19
 8004318:	d92c      	bls.n	8004374 <ES_WIFI_ListAccessPoints+0xc8>
        sprintf((char*)Obj->CmdData,"MR\r");
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <ES_WIFI_ListAccessPoints+0x10c>)
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	6020      	str	r0, [r4, #0]
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8004320:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8004324:	4620      	mov	r0, r4
 8004326:	f7fb ffed 	bl	8000304 <strlen>
 800432a:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 800432e:	b281      	uxth	r1, r0
 8004330:	4620      	mov	r0, r4
 8004332:	47a8      	blx	r5
	  } while (send_len == 3);
 8004334:	2803      	cmp	r0, #3
 8004336:	d1e5      	bne.n	8004304 <ES_WIFI_ListAccessPoints+0x58>
	    recv_len = Obj->fops.IO_Receive(Obj->CmdData, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8004338:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800433c:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8004340:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8004344:	4620      	mov	r0, r4
 8004346:	4798      	blx	r3
 8004348:	4605      	mov	r5, r0
        if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 800434a:	1e43      	subs	r3, r0, #1
 800434c:	b29b      	uxth	r3, r3
 800434e:	f240 5276 	movw	r2, #1398	; 0x576
 8004352:	4293      	cmp	r3, r2
 8004354:	d8da      	bhi.n	800430c <ES_WIFI_ListAccessPoints+0x60>
          *(Obj->CmdData + recv_len) = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	5423      	strb	r3, [r4, r0]
	      if(strstr((char *)Obj->CmdData, AT_OK_STRING))
 800435a:	4918      	ldr	r1, [pc, #96]	; (80043bc <ES_WIFI_ListAccessPoints+0x110>)
 800435c:	4620      	mov	r0, r4
 800435e:	f018 feab 	bl	801d0b8 <strstr>
 8004362:	bb00      	cbnz	r0, 80043a6 <ES_WIFI_ListAccessPoints+0xfa>
	      else if(strstr((char *)Obj->CmdData, AT_ERROR_STRING))
 8004364:	4916      	ldr	r1, [pc, #88]	; (80043c0 <ES_WIFI_ListAccessPoints+0x114>)
 8004366:	4620      	mov	r0, r4
 8004368:	f018 fea6 	bl	801d0b8 <strstr>
 800436c:	2800      	cmp	r0, #0
 800436e:	d0cd      	beq.n	800430c <ES_WIFI_ListAccessPoints+0x60>
            return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8004370:	2505      	movs	r5, #5
 8004372:	e7c8      	b.n	8004306 <ES_WIFI_ListAccessPoints+0x5a>
          AT_ParseSingleAP((char *)Obj->CmdData, &(APs->AP[APs->nbr]));
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 7103 	mla	r1, r1, r3, r7
 800437a:	4620      	mov	r0, r4
 800437c:	f7ff fd96 	bl	8003eac <AT_ParseSingleAP>
          APs->nbr++;
 8004380:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8004384:	3301      	adds	r3, #1
 8004386:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
 800438a:	e7c6      	b.n	800431a <ES_WIFI_ListAccessPoints+0x6e>
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"F0\r", Obj->CmdData);
 800438c:	4622      	mov	r2, r4
 800438e:	490d      	ldr	r1, [pc, #52]	; (80043c4 <ES_WIFI_ListAccessPoints+0x118>)
 8004390:	4630      	mov	r0, r6
 8004392:	f7ff fb9b 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004396:	4605      	mov	r5, r0
 8004398:	2800      	cmp	r0, #0
 800439a:	d1b4      	bne.n	8004306 <ES_WIFI_ListAccessPoints+0x5a>
      AT_ParseAP((char *)Obj->CmdData, APs);
 800439c:	4639      	mov	r1, r7
 800439e:	4620      	mov	r0, r4
 80043a0:	f7ff fdd8 	bl	8003f54 <AT_ParseAP>
    return ret;
 80043a4:	e7af      	b.n	8004306 <ES_WIFI_ListAccessPoints+0x5a>
		    return ES_WIFI_STATUS_OK;
 80043a6:	2500      	movs	r5, #0
 80043a8:	e7ad      	b.n	8004306 <ES_WIFI_ListAccessPoints+0x5a>
	      return ES_WIFI_STATUS_MODULE_CRASH;
 80043aa:	2506      	movs	r5, #6
 80043ac:	e7ab      	b.n	8004306 <ES_WIFI_ListAccessPoints+0x5a>
 80043ae:	bf00      	nop
 80043b0:	03050204 	.word	0x03050204
 80043b4:	0801eb68 	.word	0x0801eb68
 80043b8:	0801eb70 	.word	0x0801eb70
 80043bc:	0801eb14 	.word	0x0801eb14
 80043c0:	0801eb20 	.word	0x0801eb20
 80043c4:	0801eb74 	.word	0x0801eb74

080043c8 <ES_WIFI_Connect>:
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	bf18      	it	ne
 80043cc:	2900      	cmpne	r1, #0
 80043ce:	d101      	bne.n	80043d4 <ES_WIFI_Connect+0xc>
  {
    ret = ES_WIFI_STATUS_ERROR;
 80043d0:	2002      	movs	r0, #2
    }

    UNLOCK_WIFI();
  }
  return ret;
}
 80043d2:	4770      	bx	lr
{
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	4604      	mov	r4, r0
 80043d8:	461e      	mov	r6, r3
 80043da:	4617      	mov	r7, r2
    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80043dc:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80043e0:	460a      	mov	r2, r1
 80043e2:	491a      	ldr	r1, [pc, #104]	; (800444c <ES_WIFI_Connect+0x84>)
 80043e4:	4628      	mov	r0, r5
 80043e6:	f018 fddd 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80043ea:	462a      	mov	r2, r5
 80043ec:	4629      	mov	r1, r5
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7ff fb6c 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80043f4:	b100      	cbz	r0, 80043f8 <ES_WIFI_Connect+0x30>
}
 80043f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80043f8:	463a      	mov	r2, r7
 80043fa:	4915      	ldr	r1, [pc, #84]	; (8004450 <ES_WIFI_Connect+0x88>)
 80043fc:	4628      	mov	r0, r5
 80043fe:	f018 fdd1 	bl	801cfa4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004402:	462a      	mov	r2, r5
 8004404:	4629      	mov	r1, r5
 8004406:	4620      	mov	r0, r4
 8004408:	f7ff fb60 	bl	8003acc <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800440c:	2800      	cmp	r0, #0
 800440e:	d1f2      	bne.n	80043f6 <ES_WIFI_Connect+0x2e>
        Obj->Security = SecType;
 8004410:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8004414:	4632      	mov	r2, r6
 8004416:	490f      	ldr	r1, [pc, #60]	; (8004454 <ES_WIFI_Connect+0x8c>)
 8004418:	4628      	mov	r0, r5
 800441a:	f018 fdc3 	bl	801cfa4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800441e:	462a      	mov	r2, r5
 8004420:	4629      	mov	r1, r5
 8004422:	4620      	mov	r0, r4
 8004424:	f7ff fb52 	bl	8003acc <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8004428:	2800      	cmp	r0, #0
 800442a:	d1e4      	bne.n	80043f6 <ES_WIFI_Connect+0x2e>
          sprintf((char*)Obj->CmdData,"C0\r");
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <ES_WIFI_Connect+0x90>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004434:	462a      	mov	r2, r5
 8004436:	4629      	mov	r1, r5
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff fb47 	bl	8003acc <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 800443e:	2800      	cmp	r0, #0
 8004440:	d1d9      	bne.n	80043f6 <ES_WIFI_Connect+0x2e>
            Obj->NetSettings.IsConnected = 1;
 8004442:	2301      	movs	r3, #1
 8004444:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
 8004448:	e7d5      	b.n	80043f6 <ES_WIFI_Connect+0x2e>
 800444a:	bf00      	nop
 800444c:	0801eb78 	.word	0x0801eb78
 8004450:	0801eb80 	.word	0x0801eb80
 8004454:	0801eb88 	.word	0x0801eb88
 8004458:	0801eb90 	.word	0x0801eb90

0800445c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8004460:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <ES_WIFI_IsConnected+0x30>)
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800446c:	462a      	mov	r2, r5
 800446e:	4629      	mov	r1, r5
 8004470:	4620      	mov	r0, r4
 8004472:	f7ff fb2b 	bl	8003acc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8004476:	b110      	cbz	r0, 800447e <ES_WIFI_IsConnected+0x22>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8004478:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 800447c:	bd38      	pop	{r3, r4, r5, pc}
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800447e:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
 8004482:	4628      	mov	r0, r5
 8004484:	f7ff fb1b 	bl	8003abe <AT_ParseIsConnected>
 8004488:	e7f6      	b.n	8004478 <ES_WIFI_IsConnected+0x1c>
 800448a:	bf00      	nop
 800448c:	0801eb94 	.word	0x0801eb94

08004490 <ES_WIFI_Disconnect>:
  * @brief  Disconnect from a network.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj)
{
 8004490:	b508      	push	{r3, lr}
 8004492:	4603      	mov	r3, r0
   ES_WIFI_Status_t ret;
   LOCK_WIFI();
   sprintf((char*)Obj->CmdData,"CD\r");
 8004494:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <ES_WIFI_Disconnect+0x1c>)
 800449a:	6810      	ldr	r0, [r2, #0]
 800449c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
   ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044a0:	460a      	mov	r2, r1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fb12 	bl	8003acc <AT_ExecuteCommand>
   UNLOCK_WIFI();
   return  ret;
}
 80044a8:	bd08      	pop	{r3, pc}
 80044aa:	bf00      	nop
 80044ac:	0801eb98 	.word	0x0801eb98

080044b0 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80044b4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <ES_WIFI_GetNetworkSettings+0x30>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044c0:	462a      	mov	r2, r5
 80044c2:	4629      	mov	r1, r5
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7ff fb01 	bl	8003acc <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 80044ca:	4606      	mov	r6, r0
 80044cc:	b108      	cbz	r0, 80044d2 <ES_WIFI_GetNetworkSettings+0x22>
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
  }

  UNLOCK_WIFI();
  return ret;
}
 80044ce:	4630      	mov	r0, r6
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80044d2:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 80044d6:	4628      	mov	r0, r5
 80044d8:	f7ff fdb0 	bl	800403c <AT_ParseConnSettings>
 80044dc:	e7f7      	b.n	80044ce <ES_WIFI_GetNetworkSettings+0x1e>
 80044de:	bf00      	nop
 80044e0:	0801eb9c 	.word	0x0801eb9c

080044e4 <ES_WIFI_ActivateAP>:
  * @param  ip : AP IP address
  * @param  mac : AP MAC address
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, ES_WIFI_APConfig_t *ApConfig)
{
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	4604      	mov	r4, r0
 80044e8:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"AS=0,%s\r", ApConfig->SSID);
 80044ea:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80044ee:	460a      	mov	r2, r1
 80044f0:	492b      	ldr	r1, [pc, #172]	; (80045a0 <ES_WIFI_ActivateAP+0xbc>)
 80044f2:	4628      	mov	r0, r5
 80044f4:	f018 fd56 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044f8:	462a      	mov	r2, r5
 80044fa:	4629      	mov	r1, r5
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff fae5 	bl	8003acc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8004502:	4607      	mov	r7, r0
 8004504:	b108      	cbz	r0, 800450a <ES_WIFI_ActivateAP+0x26>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8004506:	4638      	mov	r0, r7
 8004508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sprintf((char*)Obj->CmdData,"A1=%c\r", (int)ApConfig->Security + '0');
 800450a:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 800450e:	3230      	adds	r2, #48	; 0x30
 8004510:	4924      	ldr	r1, [pc, #144]	; (80045a4 <ES_WIFI_ActivateAP+0xc0>)
 8004512:	4628      	mov	r0, r5
 8004514:	f018 fd46 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004518:	462a      	mov	r2, r5
 800451a:	4629      	mov	r1, r5
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff fad5 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004522:	4607      	mov	r7, r0
 8004524:	2800      	cmp	r0, #0
 8004526:	d1ee      	bne.n	8004506 <ES_WIFI_ActivateAP+0x22>
      sprintf((char*)Obj->CmdData,"A2=%s\r", ApConfig->Pass);
 8004528:	f106 0221 	add.w	r2, r6, #33	; 0x21
 800452c:	491e      	ldr	r1, [pc, #120]	; (80045a8 <ES_WIFI_ActivateAP+0xc4>)
 800452e:	4628      	mov	r0, r5
 8004530:	f018 fd38 	bl	801cfa4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004534:	462a      	mov	r2, r5
 8004536:	4629      	mov	r1, r5
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff fac7 	bl	8003acc <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800453e:	4607      	mov	r7, r0
 8004540:	2800      	cmp	r0, #0
 8004542:	d1e0      	bne.n	8004506 <ES_WIFI_ActivateAP+0x22>
        sprintf((char*)Obj->CmdData,"AC=%d\r", ApConfig->Channel);
 8004544:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8004548:	4918      	ldr	r1, [pc, #96]	; (80045ac <ES_WIFI_ActivateAP+0xc8>)
 800454a:	4628      	mov	r0, r5
 800454c:	f018 fd2a 	bl	801cfa4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004550:	462a      	mov	r2, r5
 8004552:	4629      	mov	r1, r5
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff fab9 	bl	8003acc <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 800455a:	4607      	mov	r7, r0
 800455c:	2800      	cmp	r0, #0
 800455e:	d1d2      	bne.n	8004506 <ES_WIFI_ActivateAP+0x22>
          sprintf((char*)Obj->CmdData,"AT=%d\r", ApConfig->MaxConnections);
 8004560:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 8004564:	4912      	ldr	r1, [pc, #72]	; (80045b0 <ES_WIFI_ActivateAP+0xcc>)
 8004566:	4628      	mov	r0, r5
 8004568:	f018 fd1c 	bl	801cfa4 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800456c:	462a      	mov	r2, r5
 800456e:	4629      	mov	r1, r5
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff faab 	bl	8003acc <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8004576:	4607      	mov	r7, r0
 8004578:	2800      	cmp	r0, #0
 800457a:	d1c4      	bne.n	8004506 <ES_WIFI_ActivateAP+0x22>
            sprintf((char*)Obj->CmdData,"A0\r");
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <ES_WIFI_ActivateAP+0xd0>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004584:	462a      	mov	r2, r5
 8004586:	4629      	mov	r1, r5
 8004588:	4620      	mov	r0, r4
 800458a:	f7ff fa9f 	bl	8003acc <AT_ExecuteCommand>
            if(ret == ES_WIFI_STATUS_OK)
 800458e:	4607      	mov	r7, r0
 8004590:	2800      	cmp	r0, #0
 8004592:	d1b8      	bne.n	8004506 <ES_WIFI_ActivateAP+0x22>
              if(strstr((char *)Obj->CmdData, "[AP     ]"))
 8004594:	4908      	ldr	r1, [pc, #32]	; (80045b8 <ES_WIFI_ActivateAP+0xd4>)
 8004596:	4628      	mov	r0, r5
 8004598:	f018 fd8e 	bl	801d0b8 <strstr>
 800459c:	e7b3      	b.n	8004506 <ES_WIFI_ActivateAP+0x22>
 800459e:	bf00      	nop
 80045a0:	0801eba0 	.word	0x0801eba0
 80045a4:	0801ebac 	.word	0x0801ebac
 80045a8:	0801ebb4 	.word	0x0801ebb4
 80045ac:	0801ebbc 	.word	0x0801ebbc
 80045b0:	0801ebc4 	.word	0x0801ebc4
 80045b4:	0801ebcc 	.word	0x0801ebcc
 80045b8:	0801ebd0 	.word	0x0801ebd0

080045bc <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	4604      	mov	r4, r0
 80045c2:	460d      	mov	r5, r1
  ES_WIFI_Status_t ret ;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 80045c4:	f500 7194 	add.w	r1, r0, #296	; 0x128
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <ES_WIFI_GetMACAddress+0x3c>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80045d0:	460a      	mov	r2, r1
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff fa7a 	bl	8003acc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80045d8:	4606      	mov	r6, r0
 80045da:	b110      	cbz	r0, 80045e2 <ES_WIFI_GetMACAddress+0x26>
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
    ParseMAC(ptr, mac) ;
  }
  UNLOCK_WIFI();
  return ret;
}
 80045dc:	4630      	mov	r0, r6
 80045de:	b002      	add	sp, #8
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
 80045e2:	aa01      	add	r2, sp, #4
 80045e4:	4905      	ldr	r1, [pc, #20]	; (80045fc <ES_WIFI_GetMACAddress+0x40>)
 80045e6:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80045ea:	f018 fda3 	bl	801d134 <strtok_r>
    ParseMAC(ptr, mac) ;
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7ff fa22 	bl	8003a38 <ParseMAC>
 80045f4:	e7f2      	b.n	80045dc <ES_WIFI_GetMACAddress+0x20>
 80045f6:	bf00      	nop
 80045f8:	0801ebdc 	.word	0x0801ebdc
 80045fc:	0801ebe0 	.word	0x0801ebe0

08004600 <ES_WIFI_Ping>:
  * @param  Obj: pointer to module handle
  * @param  Ping: ping structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Ping(ES_WIFIObject_t *Obj, uint8_t *address, uint16_t count, uint16_t interval_ms, int32_t result[])
{
 8004600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	4605      	mov	r5, r0
 8004608:	460c      	mov	r4, r1
 800460a:	4617      	mov	r7, r2
 800460c:	4698      	mov	r8, r3
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  memset(result,-1,sizeof(int)*count);
 800460e:	0092      	lsls	r2, r2, #2
 8004610:	f04f 31ff 	mov.w	r1, #4294967295
 8004614:	9808      	ldr	r0, [sp, #32]
 8004616:	f018 f831 	bl	801c67c <memset>
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 800461a:	f505 7694 	add.w	r6, r5, #296	; 0x128
          address[2],address[3]);
 800461e:	78a3      	ldrb	r3, [r4, #2]
 8004620:	78e2      	ldrb	r2, [r4, #3]
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8004622:	9201      	str	r2, [sp, #4]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	7863      	ldrb	r3, [r4, #1]
 8004628:	7822      	ldrb	r2, [r4, #0]
 800462a:	491f      	ldr	r1, [pc, #124]	; (80046a8 <ES_WIFI_Ping+0xa8>)
 800462c:	4630      	mov	r0, r6
 800462e:	f018 fcb9 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004632:	4632      	mov	r2, r6
 8004634:	4631      	mov	r1, r6
 8004636:	4628      	mov	r0, r5
 8004638:	f7ff fa48 	bl	8003acc <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 800463c:	4604      	mov	r4, r0
 800463e:	b118      	cbz	r0, 8004648 <ES_WIFI_Ping+0x48>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8004640:	4620      	mov	r0, r4
 8004642:	b002      	add	sp, #8
 8004644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"T2=%d\r", count);
 8004648:	463a      	mov	r2, r7
 800464a:	4918      	ldr	r1, [pc, #96]	; (80046ac <ES_WIFI_Ping+0xac>)
 800464c:	4630      	mov	r0, r6
 800464e:	f018 fca9 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004652:	4632      	mov	r2, r6
 8004654:	4631      	mov	r1, r6
 8004656:	4628      	mov	r0, r5
 8004658:	f7ff fa38 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800465c:	4604      	mov	r4, r0
 800465e:	2800      	cmp	r0, #0
 8004660:	d1ee      	bne.n	8004640 <ES_WIFI_Ping+0x40>
      sprintf((char*)Obj->CmdData,"T3=%d\r", interval_ms);
 8004662:	4642      	mov	r2, r8
 8004664:	4912      	ldr	r1, [pc, #72]	; (80046b0 <ES_WIFI_Ping+0xb0>)
 8004666:	4630      	mov	r0, r6
 8004668:	f018 fc9c 	bl	801cfa4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800466c:	4632      	mov	r2, r6
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	f7ff fa2b 	bl	8003acc <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8004676:	4604      	mov	r4, r0
 8004678:	2800      	cmp	r0, #0
 800467a:	d1e1      	bne.n	8004640 <ES_WIFI_Ping+0x40>
        sprintf((char*)Obj->CmdData,"T0=\r");
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <ES_WIFI_Ping+0xb4>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8004684:	791b      	ldrb	r3, [r3, #4]
 8004686:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800468a:	4632      	mov	r2, r6
 800468c:	4631      	mov	r1, r6
 800468e:	4628      	mov	r0, r5
 8004690:	f7ff fa1c 	bl	8003acc <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8004694:	4604      	mov	r4, r0
 8004696:	2800      	cmp	r0, #0
 8004698:	d1d2      	bne.n	8004640 <ES_WIFI_Ping+0x40>
         AT_ParsePing(result,count,(char*)Obj->CmdData);
 800469a:	4632      	mov	r2, r6
 800469c:	4639      	mov	r1, r7
 800469e:	9808      	ldr	r0, [sp, #32]
 80046a0:	f7ff fb02 	bl	8003ca8 <AT_ParsePing>
 80046a4:	e7cc      	b.n	8004640 <ES_WIFI_Ping+0x40>
 80046a6:	bf00      	nop
 80046a8:	0801ebe4 	.word	0x0801ebe4
 80046ac:	0801ebf4 	.word	0x0801ebf4
 80046b0:	0801ebfc 	.word	0x0801ebfc
 80046b4:	0801ec04 	.word	0x0801ec04

080046b8 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	4604      	mov	r4, r0
 80046be:	4616      	mov	r6, r2
  ES_WIFI_Status_t ret;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 80046c0:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80046c4:	460a      	mov	r2, r1
 80046c6:	490c      	ldr	r1, [pc, #48]	; (80046f8 <ES_WIFI_DNS_LookUp+0x40>)
 80046c8:	4628      	mov	r0, r5
 80046ca:	f018 fc6b 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80046ce:	462a      	mov	r2, r5
 80046d0:	4629      	mov	r1, r5
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff f9fa 	bl	8003acc <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 80046d8:	4605      	mov	r5, r0
 80046da:	b110      	cbz	r0, 80046e2 <ES_WIFI_DNS_LookUp+0x2a>
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
    ParseIP(ptr, ipaddress);
  }
  UNLOCK_WIFI();
  return ret;
}
 80046dc:	4628      	mov	r0, r5
 80046de:	b002      	add	sp, #8
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
 80046e2:	aa01      	add	r2, sp, #4
 80046e4:	4905      	ldr	r1, [pc, #20]	; (80046fc <ES_WIFI_DNS_LookUp+0x44>)
 80046e6:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80046ea:	f018 fd23 	bl	801d134 <strtok_r>
    ParseIP(ptr, ipaddress);
 80046ee:	4631      	mov	r1, r6
 80046f0:	f7ff f9be 	bl	8003a70 <ParseIP>
 80046f4:	e7f2      	b.n	80046dc <ES_WIFI_DNS_LookUp+0x24>
 80046f6:	bf00      	nop
 80046f8:	0801ec0c 	.word	0x0801ec0c
 80046fc:	0801eccc 	.word	0x0801eccc

08004700 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	4605      	mov	r5, r0
 8004706:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8004708:	780b      	ldrb	r3, [r1, #0]
 800470a:	2b03      	cmp	r3, #3
 800470c:	bf18      	it	ne
 800470e:	2b00      	cmpne	r3, #0
 8004710:	d102      	bne.n	8004718 <ES_WIFI_StartClientConnection+0x18>
 8004712:	888b      	ldrh	r3, [r1, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d079      	beq.n	800480c <ES_WIFI_StartClientConnection+0x10c>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8004718:	f505 7494 	add.w	r4, r5, #296	; 0x128
 800471c:	78b2      	ldrb	r2, [r6, #2]
 800471e:	493c      	ldr	r1, [pc, #240]	; (8004810 <ES_WIFI_StartClientConnection+0x110>)
 8004720:	4620      	mov	r0, r4
 8004722:	f018 fc3f 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004726:	4622      	mov	r2, r4
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f7ff f9ce 	bl	8003acc <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004730:	b1c0      	cbz	r0, 8004764 <ES_WIFI_StartClientConnection+0x64>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004732:	b310      	cbz	r0, 800477a <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8004734:	b920      	cbnz	r0, 8004740 <ES_WIFI_StartClientConnection+0x40>
 8004736:	7833      	ldrb	r3, [r6, #0]
 8004738:	2b03      	cmp	r3, #3
 800473a:	bf18      	it	ne
 800473c:	2b00      	cmpne	r3, #0
 800473e:	d027      	beq.n	8004790 <ES_WIFI_StartClientConnection+0x90>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8004740:	b920      	cbnz	r0, 800474c <ES_WIFI_StartClientConnection+0x4c>
 8004742:	7833      	ldrb	r3, [r6, #0]
 8004744:	2b03      	cmp	r3, #3
 8004746:	bf18      	it	ne
 8004748:	2b00      	cmpne	r3, #0
 800474a:	d02c      	beq.n	80047a6 <ES_WIFI_StartClientConnection+0xa6>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800474c:	b910      	cbnz	r0, 8004754 <ES_WIFI_StartClientConnection+0x54>
 800474e:	7833      	ldrb	r3, [r6, #0]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d038      	beq.n	80047c6 <ES_WIFI_StartClientConnection+0xc6>
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8004754:	b910      	cbnz	r0, 800475c <ES_WIFI_StartClientConnection+0x5c>
 8004756:	7833      	ldrb	r3, [r6, #0]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d03f      	beq.n	80047dc <ES_WIFI_StartClientConnection+0xdc>
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 800475c:	2800      	cmp	r0, #0
 800475e:	d049      	beq.n	80047f4 <ES_WIFI_StartClientConnection+0xf4>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8004760:	b002      	add	sp, #8
 8004762:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8004764:	7832      	ldrb	r2, [r6, #0]
 8004766:	492b      	ldr	r1, [pc, #172]	; (8004814 <ES_WIFI_StartClientConnection+0x114>)
 8004768:	4620      	mov	r0, r4
 800476a:	f018 fc1b 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800476e:	4622      	mov	r2, r4
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f7ff f9aa 	bl	8003acc <AT_ExecuteCommand>
 8004778:	e7db      	b.n	8004732 <ES_WIFI_StartClientConnection+0x32>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800477a:	88f2      	ldrh	r2, [r6, #6]
 800477c:	4926      	ldr	r1, [pc, #152]	; (8004818 <ES_WIFI_StartClientConnection+0x118>)
 800477e:	4620      	mov	r0, r4
 8004780:	f018 fc10 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004784:	4622      	mov	r2, r4
 8004786:	4621      	mov	r1, r4
 8004788:	4628      	mov	r0, r5
 800478a:	f7ff f99f 	bl	8003acc <AT_ExecuteCommand>
 800478e:	e7d1      	b.n	8004734 <ES_WIFI_StartClientConnection+0x34>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8004790:	88b2      	ldrh	r2, [r6, #4]
 8004792:	4922      	ldr	r1, [pc, #136]	; (800481c <ES_WIFI_StartClientConnection+0x11c>)
 8004794:	4620      	mov	r0, r4
 8004796:	f018 fc05 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800479a:	4622      	mov	r2, r4
 800479c:	4621      	mov	r1, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	f7ff f994 	bl	8003acc <AT_ExecuteCommand>
 80047a4:	e7cc      	b.n	8004740 <ES_WIFI_StartClientConnection+0x40>
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80047a6:	7ab3      	ldrb	r3, [r6, #10]
 80047a8:	7af2      	ldrb	r2, [r6, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80047aa:	9201      	str	r2, [sp, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	7a73      	ldrb	r3, [r6, #9]
 80047b0:	7a32      	ldrb	r2, [r6, #8]
 80047b2:	491b      	ldr	r1, [pc, #108]	; (8004820 <ES_WIFI_StartClientConnection+0x120>)
 80047b4:	4620      	mov	r0, r4
 80047b6:	f018 fbf5 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80047ba:	4622      	mov	r2, r4
 80047bc:	4621      	mov	r1, r4
 80047be:	4628      	mov	r0, r5
 80047c0:	f7ff f984 	bl	8003acc <AT_ExecuteCommand>
 80047c4:	e7c2      	b.n	800474c <ES_WIFI_StartClientConnection+0x4c>
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 80047c6:	7872      	ldrb	r2, [r6, #1]
 80047c8:	4916      	ldr	r1, [pc, #88]	; (8004824 <ES_WIFI_StartClientConnection+0x124>)
 80047ca:	4620      	mov	r0, r4
 80047cc:	f018 fbea 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80047d0:	4622      	mov	r2, r4
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f7ff f979 	bl	8003acc <AT_ExecuteCommand>
 80047da:	e7bb      	b.n	8004754 <ES_WIFI_StartClientConnection+0x54>
    sprintf((char*)Obj->CmdData,"PB=0\r");
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <ES_WIFI_StartClientConnection+0x128>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80047e4:	889b      	ldrh	r3, [r3, #4]
 80047e6:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80047e8:	4622      	mov	r2, r4
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f7ff f96d 	bl	8003acc <AT_ExecuteCommand>
 80047f2:	e7b3      	b.n	800475c <ES_WIFI_StartClientConnection+0x5c>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <ES_WIFI_StartClientConnection+0x12c>)
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80047fc:	889b      	ldrh	r3, [r3, #4]
 80047fe:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004800:	4622      	mov	r2, r4
 8004802:	4621      	mov	r1, r4
 8004804:	4628      	mov	r0, r5
 8004806:	f7ff f961 	bl	8003acc <AT_ExecuteCommand>
 800480a:	e7a9      	b.n	8004760 <ES_WIFI_StartClientConnection+0x60>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800480c:	2002      	movs	r0, #2
 800480e:	e7a7      	b.n	8004760 <ES_WIFI_StartClientConnection+0x60>
 8004810:	0801ec14 	.word	0x0801ec14
 8004814:	0801ec1c 	.word	0x0801ec1c
 8004818:	0801ec24 	.word	0x0801ec24
 800481c:	0801ec2c 	.word	0x0801ec2c
 8004820:	0801ec34 	.word	0x0801ec34
 8004824:	0801ec44 	.word	0x0801ec44
 8004828:	0801ec4c 	.word	0x0801ec4c
 800482c:	0801ec54 	.word	0x0801ec54

08004830 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8004834:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004838:	788a      	ldrb	r2, [r1, #2]
 800483a:	490c      	ldr	r1, [pc, #48]	; (800486c <ES_WIFI_StopClientConnection+0x3c>)
 800483c:	4628      	mov	r0, r5
 800483e:	f018 fbb1 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004842:	462a      	mov	r2, r5
 8004844:	4629      	mov	r1, r5
 8004846:	4620      	mov	r0, r4
 8004848:	f7ff f940 	bl	8003acc <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 800484c:	b100      	cbz	r0, 8004850 <ES_WIFI_StopClientConnection+0x20>
    sprintf((char*)Obj->CmdData,"P6=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  UNLOCK_WIFI();
  return ret;
}
 800484e:	bd38      	pop	{r3, r4, r5, pc}
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <ES_WIFI_StopClientConnection+0x40>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004858:	889b      	ldrh	r3, [r3, #4]
 800485a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800485e:	462a      	mov	r2, r5
 8004860:	4629      	mov	r1, r5
 8004862:	4620      	mov	r0, r4
 8004864:	f7ff f932 	bl	8003acc <AT_ExecuteCommand>
 8004868:	e7f1      	b.n	800484e <ES_WIFI_StopClientConnection+0x1e>
 800486a:	bf00      	nop
 800486c:	0801ec14 	.word	0x0801ec14
 8004870:	0801ec5c 	.word	0x0801ec5c

08004874 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4605      	mov	r5, r0
 8004878:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800487a:	f500 7494 	add.w	r4, r0, #296	; 0x128
 800487e:	788a      	ldrb	r2, [r1, #2]
 8004880:	492c      	ldr	r1, [pc, #176]	; (8004934 <ES_WIFI_StartServerSingleConn+0xc0>)
 8004882:	4620      	mov	r0, r4
 8004884:	f018 fb8e 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004888:	4622      	mov	r2, r4
 800488a:	4621      	mov	r1, r4
 800488c:	4628      	mov	r0, r5
 800488e:	f7ff f91d 	bl	8003acc <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8004892:	4602      	mov	r2, r0
 8004894:	b928      	cbnz	r0, 80048a2 <ES_WIFI_StartServerSingleConn+0x2e>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8004896:	7833      	ldrb	r3, [r6, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d802      	bhi.n	80048a6 <ES_WIFI_StartServerSingleConn+0x32>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80048a0:	b18a      	cbz	r2, 80048c6 <ES_WIFI_StartServerSingleConn+0x52>
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 80048a2:	4610      	mov	r0, r2
 80048a4:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 80048a6:	4b24      	ldr	r3, [pc, #144]	; (8004938 <ES_WIFI_StartServerSingleConn+0xc4>)
 80048a8:	cb03      	ldmia	r3!, {r0, r1}
 80048aa:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80048ae:	6061      	str	r1, [r4, #4]
 80048b0:	881a      	ldrh	r2, [r3, #0]
 80048b2:	789b      	ldrb	r3, [r3, #2]
 80048b4:	8122      	strh	r2, [r4, #8]
 80048b6:	72a3      	strb	r3, [r4, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048b8:	4622      	mov	r2, r4
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f7ff f905 	bl	8003acc <AT_ExecuteCommand>
 80048c2:	4602      	mov	r2, r0
 80048c4:	e7ec      	b.n	80048a0 <ES_WIFI_StartServerSingleConn+0x2c>
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80048c6:	7832      	ldrb	r2, [r6, #0]
 80048c8:	491c      	ldr	r1, [pc, #112]	; (800493c <ES_WIFI_StartServerSingleConn+0xc8>)
 80048ca:	4620      	mov	r0, r4
 80048cc:	f018 fb6a 	bl	801cfa4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048d0:	4622      	mov	r2, r4
 80048d2:	4621      	mov	r1, r4
 80048d4:	4628      	mov	r0, r5
 80048d6:	f7ff f8f9 	bl	8003acc <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80048da:	4602      	mov	r2, r0
 80048dc:	2800      	cmp	r0, #0
 80048de:	d1e0      	bne.n	80048a2 <ES_WIFI_StartServerSingleConn+0x2e>
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 80048e0:	7c32      	ldrb	r2, [r6, #16]
 80048e2:	4917      	ldr	r1, [pc, #92]	; (8004940 <ES_WIFI_StartServerSingleConn+0xcc>)
 80048e4:	4620      	mov	r0, r4
 80048e6:	f018 fb5d 	bl	801cfa4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048ea:	4622      	mov	r2, r4
 80048ec:	4621      	mov	r1, r4
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7ff f8ec 	bl	8003acc <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80048f4:	4602      	mov	r2, r0
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d1d3      	bne.n	80048a2 <ES_WIFI_StartServerSingleConn+0x2e>
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80048fa:	88f2      	ldrh	r2, [r6, #6]
 80048fc:	4911      	ldr	r1, [pc, #68]	; (8004944 <ES_WIFI_StartServerSingleConn+0xd0>)
 80048fe:	4620      	mov	r0, r4
 8004900:	f018 fb50 	bl	801cfa4 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004904:	4622      	mov	r2, r4
 8004906:	4621      	mov	r1, r4
 8004908:	4628      	mov	r0, r5
 800490a:	f7ff f8df 	bl	8003acc <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 800490e:	4602      	mov	r2, r0
 8004910:	2800      	cmp	r0, #0
 8004912:	d1c6      	bne.n	80048a2 <ES_WIFI_StartServerSingleConn+0x2e>
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <ES_WIFI_StartServerSingleConn+0xd4>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800491c:	889a      	ldrh	r2, [r3, #4]
 800491e:	799b      	ldrb	r3, [r3, #6]
 8004920:	80a2      	strh	r2, [r4, #4]
 8004922:	71a3      	strb	r3, [r4, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004924:	4622      	mov	r2, r4
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f7ff f8cf 	bl	8003acc <AT_ExecuteCommand>
 800492e:	4602      	mov	r2, r0
 8004930:	e7b7      	b.n	80048a2 <ES_WIFI_StartServerSingleConn+0x2e>
 8004932:	bf00      	nop
 8004934:	0801ec14 	.word	0x0801ec14
 8004938:	0801ec64 	.word	0x0801ec64
 800493c:	0801ec1c 	.word	0x0801ec1c
 8004940:	0801ec70 	.word	0x0801ec70
 8004944:	0801ec24 	.word	0x0801ec24
 8004948:	0801ec78 	.word	0x0801ec78

0800494c <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	b083      	sub	sp, #12
 8004952:	4605      	mov	r5, r0
 8004954:	460f      	mov	r7, r1
 8004956:	4692      	mov	sl, r2
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;
  char          *saveptr;

  tstart=HAL_GetTick();
 8004958:	f002 f88a 	bl	8006a70 <HAL_GetTick>
 800495c:	4680      	mov	r8, r0
  tlast=tstart+timeout;
  if (tlast < tstart )
 800495e:	eb10 0907 	adds.w	r9, r0, r7
 8004962:	d301      	bcc.n	8004968 <ES_WIFI_WaitServerConnection+0x1c>
  {
	   tstart=0;
 8004964:	f04f 0800 	mov.w	r8, #0
 8004968:	2600      	movs	r6, #0
 800496a:	e02d      	b.n	80049c8 <ES_WIFI_WaitServerConnection+0x7c>
        if(strstr((char *)Obj->CmdData, "Accepted"))
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 800496c:	4946      	ldr	r1, [pc, #280]	; (8004a88 <ES_WIFI_WaitServerConnection+0x13c>)
 800496e:	4620      	mov	r0, r4
 8004970:	f018 fba2 	bl	801d0b8 <strstr>
 8004974:	2800      	cmp	r0, #0
 8004976:	f000 8081 	beq.w	8004a7c <ES_WIFI_WaitServerConnection+0x130>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800497a:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800497e:	2100      	movs	r1, #0
 8004980:	4620      	mov	r0, r4
 8004982:	f017 fe7b 	bl	801c67c <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 8004986:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <ES_WIFI_WaitServerConnection+0x140>)
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800498e:	4622      	mov	r2, r4
 8004990:	4621      	mov	r1, r4
 8004992:	4628      	mov	r0, r5
 8004994:	f7ff f89a 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004998:	4683      	mov	fp, r0
 800499a:	2800      	cmp	r0, #0
 800499c:	d171      	bne.n	8004a82 <ES_WIFI_WaitServerConnection+0x136>
    {
      if(accepted && (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 800499e:	b136      	cbz	r6, 80049ae <ES_WIFI_WaitServerConnection+0x62>
 80049a0:	220c      	movs	r2, #12
 80049a2:	493b      	ldr	r1, [pc, #236]	; (8004a90 <ES_WIFI_WaitServerConnection+0x144>)
 80049a4:	4620      	mov	r0, r4
 80049a6:	f018 fb60 	bl	801d06a <strncmp>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d133      	bne.n	8004a16 <ES_WIFI_WaitServerConnection+0xca>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 80049ae:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 80049b2:	2064      	movs	r0, #100	; 0x64
 80049b4:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 80049b6:	f002 f85b 	bl	8006a70 <HAL_GetTick>
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 80049ba:	b12f      	cbz	r7, 80049c8 <ES_WIFI_WaitServerConnection+0x7c>
 80049bc:	464b      	mov	r3, r9
 80049be:	45c1      	cmp	r9, r8
 80049c0:	bf38      	it	cc
 80049c2:	4643      	movcc	r3, r8
 80049c4:	4283      	cmp	r3, r0
 80049c6:	d950      	bls.n	8004a6a <ES_WIFI_WaitServerConnection+0x11e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80049c8:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80049cc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80049d0:	2100      	movs	r1, #0
 80049d2:	4620      	mov	r0, r4
 80049d4:	f017 fe52 	bl	801c67c <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 80049d8:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <ES_WIFI_WaitServerConnection+0x148>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80049e0:	4622      	mov	r2, r4
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f7ff f871 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d140      	bne.n	8004a70 <ES_WIFI_WaitServerConnection+0x124>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80049ee:	492a      	ldr	r1, [pc, #168]	; (8004a98 <ES_WIFI_WaitServerConnection+0x14c>)
 80049f0:	4620      	mov	r0, r4
 80049f2:	f018 fb61 	bl	801d0b8 <strstr>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d0bf      	beq.n	800497a <ES_WIFI_WaitServerConnection+0x2e>
 80049fa:	4928      	ldr	r1, [pc, #160]	; (8004a9c <ES_WIFI_WaitServerConnection+0x150>)
 80049fc:	4620      	mov	r0, r4
 80049fe:	f018 fb5b 	bl	801d0b8 <strstr>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d0b9      	beq.n	800497a <ES_WIFI_WaitServerConnection+0x2e>
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8004a06:	4926      	ldr	r1, [pc, #152]	; (8004aa0 <ES_WIFI_WaitServerConnection+0x154>)
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f018 fb55 	bl	801d0b8 <strstr>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d0ac      	beq.n	800496c <ES_WIFI_WaitServerConnection+0x20>
         accepted=true;// flushing out the MR messages
 8004a12:	2601      	movs	r6, #1
 8004a14:	e7b1      	b.n	800497a <ES_WIFI_WaitServerConnection+0x2e>
        ptr = strtok_r((char *)Obj->CmdData + 2, ",",&saveptr);
 8004a16:	4c23      	ldr	r4, [pc, #140]	; (8004aa4 <ES_WIFI_WaitServerConnection+0x158>)
 8004a18:	aa01      	add	r2, sp, #4
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	f505 7095 	add.w	r0, r5, #298	; 0x12a
 8004a20:	f018 fb88 	bl	801d134 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //port
 8004a24:	aa01      	add	r2, sp, #4
 8004a26:	4621      	mov	r1, r4
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f018 fb83 	bl	801d134 <strtok_r>
        ParseIP((char *)ptr, conn->RemoteIP);
 8004a2e:	f10a 0108 	add.w	r1, sl, #8
 8004a32:	f7ff f81d 	bl	8003a70 <ParseIP>
        ptr = strtok_r(0, ",",&saveptr); //port
 8004a36:	aa01      	add	r2, sp, #4
 8004a38:	4621      	mov	r1, r4
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f018 fb7a 	bl	801d134 <strtok_r>
        conn->LocalPort=ParseNumber(ptr,0);
 8004a40:	2100      	movs	r1, #0
 8004a42:	f7fe ffd3 	bl	80039ec <ParseNumber>
 8004a46:	f8aa 0006 	strh.w	r0, [sl, #6]
        ptr = strtok_r(0, ",",&saveptr); //ip
 8004a4a:	aa01      	add	r2, sp, #4
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f018 fb70 	bl	801d134 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //remote port
 8004a54:	aa01      	add	r2, sp, #4
 8004a56:	4621      	mov	r1, r4
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f018 fb6b 	bl	801d134 <strtok_r>
        conn->RemotePort=ParseNumber(ptr,0);
 8004a5e:	2100      	movs	r1, #0
 8004a60:	f7fe ffc4 	bl	80039ec <ParseNumber>
 8004a64:	f8aa 0004 	strh.w	r0, [sl, #4]
        return ES_WIFI_STATUS_OK;
 8004a68:	e004      	b.n	8004a74 <ES_WIFI_WaitServerConnection+0x128>
  return ES_WIFI_STATUS_TIMEOUT;
 8004a6a:	f04f 0b03 	mov.w	fp, #3
 8004a6e:	e001      	b.n	8004a74 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 8004a70:	f04f 0b02 	mov.w	fp, #2
}
 8004a74:	4658      	mov	r0, fp
 8004a76:	b003      	add	sp, #12
 8004a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return ES_WIFI_STATUS_ERROR;
 8004a7c:	f04f 0b02 	mov.w	fp, #2
 8004a80:	e7f8      	b.n	8004a74 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 8004a82:	f04f 0b02 	mov.w	fp, #2
 8004a86:	e7f5      	b.n	8004a74 <ES_WIFI_WaitServerConnection+0x128>
 8004a88:	0801ec9c 	.word	0x0801ec9c
 8004a8c:	0801ecac 	.word	0x0801ecac
 8004a90:	0801ecb0 	.word	0x0801ecb0
 8004a94:	0801eb70 	.word	0x0801eb70
 8004a98:	0801ec80 	.word	0x0801ec80
 8004a9c:	0801ec88 	.word	0x0801ec88
 8004aa0:	0801ec90 	.word	0x0801ec90
 8004aa4:	0801eb54 	.word	0x0801eb54

08004aa8 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8004aae:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004ab2:	490d      	ldr	r1, [pc, #52]	; (8004ae8 <ES_WIFI_CloseServerConnection+0x40>)
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f018 fa75 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004aba:	462a      	mov	r2, r5
 8004abc:	4629      	mov	r1, r5
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7ff f804 	bl	8003acc <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8004ac4:	b100      	cbz	r0, 8004ac8 <ES_WIFI_CloseServerConnection+0x20>
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 8004ac8:	4b08      	ldr	r3, [pc, #32]	; (8004aec <ES_WIFI_CloseServerConnection+0x44>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004ad0:	889a      	ldrh	r2, [r3, #4]
 8004ad2:	799b      	ldrb	r3, [r3, #6]
 8004ad4:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
 8004ad8:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004adc:	462a      	mov	r2, r5
 8004ade:	4629      	mov	r1, r5
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7fe fff3 	bl	8003acc <AT_ExecuteCommand>
  return ret;
 8004ae6:	e7ee      	b.n	8004ac6 <ES_WIFI_CloseServerConnection+0x1e>
 8004ae8:	0801ec14 	.word	0x0801ec14
 8004aec:	0801ecc0 	.word	0x0801ecc0

08004af0 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4604      	mov	r4, r0
 8004af4:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8004af6:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004afa:	490c      	ldr	r1, [pc, #48]	; (8004b2c <ES_WIFI_StopServerSingleConn+0x3c>)
 8004afc:	4628      	mov	r0, r5
 8004afe:	f018 fa51 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b02:	462a      	mov	r2, r5
 8004b04:	4629      	mov	r1, r5
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7fe ffe0 	bl	8003acc <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8004b0c:	b100      	cbz	r0, 8004b10 <ES_WIFI_StopServerSingleConn+0x20>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <ES_WIFI_StopServerSingleConn+0x40>)
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004b18:	889b      	ldrh	r3, [r3, #4]
 8004b1a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b1e:	462a      	mov	r2, r5
 8004b20:	4629      	mov	r1, r5
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7fe ffd2 	bl	8003acc <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8004b28:	e7f1      	b.n	8004b0e <ES_WIFI_StopServerSingleConn+0x1e>
 8004b2a:	bf00      	nop
 8004b2c:	0801ec14 	.word	0x0801ec14
 8004b30:	0801ecc8 	.word	0x0801ecc8

08004b34 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	4690      	mov	r8, r2
 8004b3e:	461c      	mov	r4, r3
 8004b40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004b44:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 8004b48:	f1b9 0f00 	cmp.w	r9, #0
 8004b4c:	d101      	bne.n	8004b52 <ES_WIFI_SendData+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8004b4e:	f04f 0901 	mov.w	r9, #1
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004b52:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8004b56:	d301      	bcc.n	8004b5c <ES_WIFI_SendData+0x28>
 8004b58:	f44f 6496 	mov.w	r4, #1200	; 0x4b0

  *SentLen = Reqlen;
 8004b5c:	f8aa 4000 	strh.w	r4, [sl]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004b60:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8004b64:	460a      	mov	r2, r1
 8004b66:	491c      	ldr	r1, [pc, #112]	; (8004bd8 <ES_WIFI_SendData+0xa4>)
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f018 fa1b 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4631      	mov	r1, r6
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7fe ffaa 	bl	8003acc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8004b78:	4607      	mov	r7, r0
 8004b7a:	b128      	cbz	r0, 8004b88 <ES_WIFI_SendData+0x54>
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8004b7c:	2f02      	cmp	r7, #2
 8004b7e:	d026      	beq.n	8004bce <ES_WIFI_SendData+0x9a>
  {
    *SentLen = 0;
  }
  UNLOCK_WIFI();
  return ret;
}
 8004b80:	4638      	mov	r0, r7
 8004b82:	b002      	add	sp, #8
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8004b88:	464a      	mov	r2, r9
 8004b8a:	4914      	ldr	r1, [pc, #80]	; (8004bdc <ES_WIFI_SendData+0xa8>)
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f018 fa09 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b92:	4632      	mov	r2, r6
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7fe ff98 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d1ec      	bne.n	8004b7c <ES_WIFI_SendData+0x48>
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	490e      	ldr	r1, [pc, #56]	; (8004be0 <ES_WIFI_SendData+0xac>)
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f018 f9fc 	bl	801cfa4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8004bac:	9600      	str	r6, [sp, #0]
 8004bae:	4623      	mov	r3, r4
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f7ff f803 	bl	8003bc0 <AT_RequestSendData>
      if(ret == ES_WIFI_STATUS_OK)
 8004bba:	4607      	mov	r7, r0
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d1dd      	bne.n	8004b7c <ES_WIFI_SendData+0x48>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8004bc0:	4908      	ldr	r1, [pc, #32]	; (8004be4 <ES_WIFI_SendData+0xb0>)
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f018 fa78 	bl	801d0b8 <strstr>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d0d7      	beq.n	8004b7c <ES_WIFI_SendData+0x48>
          ret = ES_WIFI_STATUS_ERROR;
 8004bcc:	2702      	movs	r7, #2
    *SentLen = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8aa 3000 	strh.w	r3, [sl]
 8004bd4:	e7d4      	b.n	8004b80 <ES_WIFI_SendData+0x4c>
 8004bd6:	bf00      	nop
 8004bd8:	0801ec14 	.word	0x0801ec14
 8004bdc:	0801ecd0 	.word	0x0801ecd0
 8004be0:	0801ecd8 	.word	0x0801ecd8
 8004be4:	0801ece4 	.word	0x0801ece4

08004be8 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	4606      	mov	r6, r0
 8004bf0:	4690      	mov	r8, r2
 8004bf2:	461f      	mov	r7, r3
 8004bf4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004bf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	d101      	bne.n	8004c06 <ES_WIFI_SendDataTo+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8004c02:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004c06:	f506 7594 	add.w	r5, r6, #296	; 0x128
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	493d      	ldr	r1, [pc, #244]	; (8004d04 <ES_WIFI_SendDataTo+0x11c>)
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f018 f9c8 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c14:	462a      	mov	r2, r5
 8004c16:	4629      	mov	r1, r5
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f7fe ff57 	bl	8003acc <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004c1e:	4604      	mov	r4, r0
 8004c20:	b300      	cbz	r0, 8004c64 <ES_WIFI_SendDataTo+0x7c>
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 8004c22:	b364      	cbz	r4, 8004c7e <ES_WIFI_SendDataTo+0x96>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004c24:	2c00      	cmp	r4, #0
 8004c26:	d037      	beq.n	8004c98 <ES_WIFI_SendDataTo+0xb0>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004c28:	b924      	cbnz	r4, 8004c34 <ES_WIFI_SendDataTo+0x4c>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 8004c2a:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 8004c2e:	d301      	bcc.n	8004c34 <ES_WIFI_SendDataTo+0x4c>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004c30:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	d044      	beq.n	8004cc2 <ES_WIFI_SendDataTo+0xda>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	d04e      	beq.n	8004cda <ES_WIFI_SendDataTo+0xf2>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004c3c:	2c00      	cmp	r4, #0
 8004c3e:	d15a      	bne.n	8004cf6 <ES_WIFI_SendDataTo+0x10e>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8004c40:	4931      	ldr	r1, [pc, #196]	; (8004d08 <ES_WIFI_SendDataTo+0x120>)
 8004c42:	4628      	mov	r0, r5
 8004c44:	f018 fa38 	bl	801d0b8 <strstr>
    if(ptr != NULL)
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d054      	beq.n	8004cf6 <ES_WIFI_SendDataTo+0x10e>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8004c4c:	f506 66d4 	add.w	r6, r6, #1696	; 0x6a0
 8004c50:	4286      	cmp	r6, r0
 8004c52:	d855      	bhi.n	8004d00 <ES_WIFI_SendDataTo+0x118>
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8004c54:	2404      	movs	r4, #4
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c5a:	8013      	strh	r3, [r2, #0]
  }

  UNLOCK_WIFI();
  return ret;
}
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	b002      	add	sp, #8
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8004c64:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8004c68:	4928      	ldr	r1, [pc, #160]	; (8004d0c <ES_WIFI_SendDataTo+0x124>)
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f018 f99a 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c70:	462a      	mov	r2, r5
 8004c72:	4629      	mov	r1, r5
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7fe ff29 	bl	8003acc <AT_ExecuteCommand>
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	e7d1      	b.n	8004c22 <ES_WIFI_SendDataTo+0x3a>
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 8004c7e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8004c82:	4923      	ldr	r1, [pc, #140]	; (8004d10 <ES_WIFI_SendDataTo+0x128>)
 8004c84:	4628      	mov	r0, r5
 8004c86:	f018 f98d 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f7fe ff1c 	bl	8003acc <AT_ExecuteCommand>
 8004c94:	4604      	mov	r4, r0
 8004c96:	e7c5      	b.n	8004c24 <ES_WIFI_SendDataTo+0x3c>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8004c98:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8004c9c:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8004ca0:	9201      	str	r2, [sp, #4]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004ca8:	f89a 2000 	ldrb.w	r2, [sl]
 8004cac:	4919      	ldr	r1, [pc, #100]	; (8004d14 <ES_WIFI_SendDataTo+0x12c>)
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f018 f978 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f7fe ff07 	bl	8003acc <AT_ExecuteCommand>
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	e7b2      	b.n	8004c28 <ES_WIFI_SendDataTo+0x40>
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8004cc2:	464a      	mov	r2, r9
 8004cc4:	4914      	ldr	r1, [pc, #80]	; (8004d18 <ES_WIFI_SendDataTo+0x130>)
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f018 f96c 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004ccc:	462a      	mov	r2, r5
 8004cce:	4629      	mov	r1, r5
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7fe fefb 	bl	8003acc <AT_ExecuteCommand>
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	e7ae      	b.n	8004c38 <ES_WIFI_SendDataTo+0x50>
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8004cda:	463a      	mov	r2, r7
 8004cdc:	490f      	ldr	r1, [pc, #60]	; (8004d1c <ES_WIFI_SendDataTo+0x134>)
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f018 f960 	bl	801cfa4 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8004ce4:	9500      	str	r5, [sp, #0]
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	4642      	mov	r2, r8
 8004cea:	4629      	mov	r1, r5
 8004cec:	4630      	mov	r0, r6
 8004cee:	f7fe ff67 	bl	8003bc0 <AT_RequestSendData>
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	e7a2      	b.n	8004c3c <ES_WIFI_SendDataTo+0x54>
  if (ret == ES_WIFI_STATUS_OK)
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	d1ad      	bne.n	8004c56 <ES_WIFI_SendDataTo+0x6e>
    *SentLen = Reqlen;
 8004cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cfc:	801f      	strh	r7, [r3, #0]
 8004cfe:	e7ad      	b.n	8004c5c <ES_WIFI_SendDataTo+0x74>
        ret = ES_WIFI_STATUS_ERROR;
 8004d00:	2402      	movs	r4, #2
 8004d02:	e7a8      	b.n	8004c56 <ES_WIFI_SendDataTo+0x6e>
 8004d04:	0801ec14 	.word	0x0801ec14
 8004d08:	0801ece4 	.word	0x0801ece4
 8004d0c:	0801ec24 	.word	0x0801ec24
 8004d10:	0801ec2c 	.word	0x0801ec2c
 8004d14:	0801ec34 	.word	0x0801ec34
 8004d18:	0801ecd0 	.word	0x0801ecd0
 8004d1c:	0801ecd8 	.word	0x0801ecd8

08004d20 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	4604      	mov	r4, r0
 8004d28:	4690      	mov	r8, r2
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 8004d2e:	b906      	cbnz	r6, 8004d32 <ES_WIFI_ReceiveData+0x12>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8004d30:	2601      	movs	r6, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8004d32:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8004d36:	d903      	bls.n	8004d40 <ES_WIFI_ReceiveData+0x20>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004d38:	2002      	movs	r0, #2
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8004d3a:	b002      	add	sp, #8
 8004d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004d40:	f504 7794 	add.w	r7, r4, #296	; 0x128
 8004d44:	460a      	mov	r2, r1
 8004d46:	491b      	ldr	r1, [pc, #108]	; (8004db4 <ES_WIFI_ReceiveData+0x94>)
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f018 f92b 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004d4e:	463a      	mov	r2, r7
 8004d50:	4639      	mov	r1, r7
 8004d52:	4620      	mov	r0, r4
 8004d54:	f7fe feba 	bl	8003acc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004d58:	b120      	cbz	r0, 8004d64 <ES_WIFI_ReceiveData+0x44>
      issue15++;
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <ES_WIFI_ReceiveData+0x98>)
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e7ea      	b.n	8004d3a <ES_WIFI_ReceiveData+0x1a>
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8004d64:	462a      	mov	r2, r5
 8004d66:	4915      	ldr	r1, [pc, #84]	; (8004dbc <ES_WIFI_ReceiveData+0x9c>)
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f018 f91b 	bl	801cfa4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004d6e:	463a      	mov	r2, r7
 8004d70:	4639      	mov	r1, r7
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7fe feaa 	bl	8003acc <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8004d78:	b118      	cbz	r0, 8004d82 <ES_WIFI_ReceiveData+0x62>
        *Receivedlen = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9a08      	ldr	r2, [sp, #32]
 8004d7e:	8013      	strh	r3, [r2, #0]
 8004d80:	e7db      	b.n	8004d3a <ES_WIFI_ReceiveData+0x1a>
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8004d82:	4632      	mov	r2, r6
 8004d84:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <ES_WIFI_ReceiveData+0xa0>)
 8004d86:	4638      	mov	r0, r7
 8004d88:	f018 f90c 	bl	801cfa4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004d8c:	463a      	mov	r2, r7
 8004d8e:	4639      	mov	r1, r7
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7fe fe9b 	bl	8003acc <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d1cf      	bne.n	8004d3a <ES_WIFI_ReceiveData+0x1a>
          sprintf((char*)Obj->CmdData,"R0\r");
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <ES_WIFI_ReceiveData+0xa4>)
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8004da2:	9b08      	ldr	r3, [sp, #32]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	462b      	mov	r3, r5
 8004da8:	4642      	mov	r2, r8
 8004daa:	4639      	mov	r1, r7
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7ff f9d1 	bl	8004154 <AT_RequestReceiveData>
            DEBUG("AT_RequestReceiveData  failed\n");
 8004db2:	e7c2      	b.n	8004d3a <ES_WIFI_ReceiveData+0x1a>
 8004db4:	0801ec14 	.word	0x0801ec14
 8004db8:	24001fb0 	.word	0x24001fb0
 8004dbc:	0801ecec 	.word	0x0801ecec
 8004dc0:	0801ecf4 	.word	0x0801ecf4
 8004dc4:	0801ecfc 	.word	0x0801ecfc

08004dc8 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8004dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	b088      	sub	sp, #32
 8004dce:	4605      	mov	r5, r0
 8004dd0:	4690      	mov	r8, r2
 8004dd2:	461e      	mov	r6, r3
 8004dd4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004dd6:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	803b      	strh	r3, [r7, #0]


  if (Timeout == 0)
 8004dde:	f1b9 0f00 	cmp.w	r9, #0
 8004de2:	d101      	bne.n	8004de8 <ES_WIFI_ReceiveDataFrom+0x20>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8004de4:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8004de8:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 8004dec:	d90f      	bls.n	8004e0e <ES_WIFI_ReceiveDataFrom+0x46>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004dee:	2402      	movs	r4, #2
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004df0:	b344      	cbz	r4, 8004e44 <ES_WIFI_ReceiveDataFrom+0x7c>
  else
  {
    DEBUG("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004df2:	b3ac      	cbz	r4, 8004e60 <ES_WIFI_ReceiveDataFrom+0x98>
  else
  {
    DEBUG("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004df4:	b924      	cbnz	r4, 8004e00 <ES_WIFI_ReceiveDataFrom+0x38>
  {
    if (*Receivedlen > Reqlen)
 8004df6:	883b      	ldrh	r3, [r7, #0]
 8004df8:	42b3      	cmp	r3, r6
 8004dfa:	d85f      	bhi.n	8004ebc <ES_WIFI_ReceiveDataFrom+0xf4>
      DEBUG("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
    }
    else
    {
      if (*Receivedlen > 0)
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d13d      	bne.n	8004e7c <ES_WIFI_ReceiveDataFrom+0xb4>
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 8004e00:	b10c      	cbz	r4, 8004e06 <ES_WIFI_ReceiveDataFrom+0x3e>
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	803b      	strh	r3, [r7, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 8004e06:	4620      	mov	r0, r4
 8004e08:	b008      	add	sp, #32
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8004e0e:	f505 7a94 	add.w	sl, r5, #296	; 0x128
 8004e12:	460a      	mov	r2, r1
 8004e14:	492a      	ldr	r1, [pc, #168]	; (8004ec0 <ES_WIFI_ReceiveDataFrom+0xf8>)
 8004e16:	4650      	mov	r0, sl
 8004e18:	f018 f8c4 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4651      	mov	r1, sl
 8004e20:	4628      	mov	r0, r5
 8004e22:	f7fe fe53 	bl	8003acc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8004e26:	4604      	mov	r4, r0
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d1e1      	bne.n	8004df0 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	4925      	ldr	r1, [pc, #148]	; (8004ec4 <ES_WIFI_ReceiveDataFrom+0xfc>)
 8004e30:	4650      	mov	r0, sl
 8004e32:	f018 f8b7 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e36:	4652      	mov	r2, sl
 8004e38:	4651      	mov	r1, sl
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7fe fe46 	bl	8003acc <AT_ExecuteCommand>
 8004e40:	4604      	mov	r4, r0
 8004e42:	e7d5      	b.n	8004df0 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8004e44:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8004e48:	464a      	mov	r2, r9
 8004e4a:	491f      	ldr	r1, [pc, #124]	; (8004ec8 <ES_WIFI_ReceiveDataFrom+0x100>)
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f018 f8a9 	bl	801cfa4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e52:	4622      	mov	r2, r4
 8004e54:	4621      	mov	r1, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7fe fe38 	bl	8003acc <AT_ExecuteCommand>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	e7c8      	b.n	8004df2 <ES_WIFI_ReceiveDataFrom+0x2a>
    sprintf((char*)Obj->CmdData,"R0\r");
 8004e60:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <ES_WIFI_ReceiveDataFrom+0x104>)
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8004e68:	9700      	str	r7, [sp, #0]
 8004e6a:	4633      	mov	r3, r6
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	f505 7194 	add.w	r1, r5, #296	; 0x128
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff f96e 	bl	8004154 <AT_RequestReceiveData>
 8004e78:	4604      	mov	r4, r0
 8004e7a:	e7bb      	b.n	8004df4 <ES_WIFI_ReceiveDataFrom+0x2c>
        sprintf((char*)Obj->CmdData,"P?\r");
 8004e7c:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <ES_WIFI_ReceiveDataFrom+0x108>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f7fe fe1d 	bl	8003acc <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8004e92:	4604      	mov	r4, r0
 8004e94:	2800      	cmp	r0, #0
 8004e96:	d1b3      	bne.n	8004e00 <ES_WIFI_ReceiveDataFrom+0x38>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9303      	str	r3, [sp, #12]
 8004e9c:	9304      	str	r3, [sp, #16]
 8004e9e:	9305      	str	r3, [sp, #20]
 8004ea0:	9306      	str	r3, [sp, #24]
 8004ea2:	9307      	str	r3, [sp, #28]
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8004ea4:	a903      	add	r1, sp, #12
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f7fe ff28 	bl	8003cfc <AT_ParseTransportSettings>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8004eac:	9a05      	ldr	r2, [sp, #20]
 8004eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004eb0:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8004eb2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8004eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004eb8:	801a      	strh	r2, [r3, #0]
 8004eba:	e7a1      	b.n	8004e00 <ES_WIFI_ReceiveDataFrom+0x38>
      ret = ES_WIFI_STATUS_ERROR;
 8004ebc:	2402      	movs	r4, #2
 8004ebe:	e7a0      	b.n	8004e02 <ES_WIFI_ReceiveDataFrom+0x3a>
 8004ec0:	0801ec14 	.word	0x0801ec14
 8004ec4:	0801ecec 	.word	0x0801ecec
 8004ec8:	0801ecf4 	.word	0x0801ecf4
 8004ecc:	0801ecfc 	.word	0x0801ecfc
 8004ed0:	0801ecac 	.word	0x0801ecac

08004ed4 <ES_WIFI_SockInfo>:

ES_WIFI_Status_t  ES_WIFI_SockInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8004ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	4604      	mov	r4, r0
 8004edc:	4690      	mov	r8, r2
 8004ede:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8004ee0:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004ee4:	460a      	mov	r2, r1
 8004ee6:	4916      	ldr	r1, [pc, #88]	; (8004f40 <ES_WIFI_SockInfo+0x6c>)
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f018 f85b 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004eee:	462a      	mov	r2, r5
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7fe fdea 	bl	8003acc <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004ef8:	4606      	mov	r6, r0
 8004efa:	b118      	cbz	r0, 8004f04 <ES_WIFI_SockInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8004efc:	4630      	mov	r0, r6
 8004efe:	b006      	add	sp, #24
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <ES_WIFI_SockInfo+0x70>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f0c:	462a      	mov	r2, r5
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4620      	mov	r0, r4
 8004f12:	f7fe fddb 	bl	8003acc <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8004f16:	4606      	mov	r6, r0
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d1ef      	bne.n	8004efc <ES_WIFI_SockInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	9302      	str	r3, [sp, #8]
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	9304      	str	r3, [sp, #16]
 8004f26:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8004f28:	a901      	add	r1, sp, #4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f7fe fee6 	bl	8003cfc <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Local_IP_Addr, 4);
 8004f30:	f8dd 3005 	ldr.w	r3, [sp, #5]
 8004f34:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Local_Port;
 8004f38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004f3c:	803b      	strh	r3, [r7, #0]
 8004f3e:	e7dd      	b.n	8004efc <ES_WIFI_SockInfo+0x28>
 8004f40:	0801ec14 	.word	0x0801ec14
 8004f44:	0801ecac 	.word	0x0801ecac

08004f48 <ES_WIFI_PeerInfo>:


ES_WIFI_Status_t  ES_WIFI_PeerInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4c:	b086      	sub	sp, #24
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4690      	mov	r8, r2
 8004f52:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8004f54:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004f58:	460a      	mov	r2, r1
 8004f5a:	4916      	ldr	r1, [pc, #88]	; (8004fb4 <ES_WIFI_PeerInfo+0x6c>)
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f018 f821 	bl	801cfa4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f62:	462a      	mov	r2, r5
 8004f64:	4629      	mov	r1, r5
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7fe fdb0 	bl	8003acc <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	b118      	cbz	r0, 8004f78 <ES_WIFI_PeerInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8004f70:	4630      	mov	r0, r6
 8004f72:	b006      	add	sp, #24
 8004f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <ES_WIFI_PeerInfo+0x70>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f80:	462a      	mov	r2, r5
 8004f82:	4629      	mov	r1, r5
 8004f84:	4620      	mov	r0, r4
 8004f86:	f7fe fda1 	bl	8003acc <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d1ef      	bne.n	8004f70 <ES_WIFI_PeerInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8004f90:	2300      	movs	r3, #0
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	9302      	str	r3, [sp, #8]
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8004f9c:	a901      	add	r1, sp, #4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f7fe feac 	bl	8003cfc <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Remote_Port;
 8004faa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8004fae:	803b      	strh	r3, [r7, #0]
 8004fb0:	e7de      	b.n	8004f70 <ES_WIFI_PeerInfo+0x28>
 8004fb2:	bf00      	nop
 8004fb4:	0801ec14 	.word	0x0801ec14
 8004fb8:	0801ecac 	.word	0x0801ecac

08004fbc <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8004fc0:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8004fc2:	2305      	movs	r3, #5
 8004fc4:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8004fc6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004fca:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004fcc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004fd0:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	4770      	bx	lr

08004fd6 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8004fd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8004fde:	2000      	movs	r0, #0
 8004fe0:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8004fe8:	e7f9      	b.n	8004fde <FT5336_DeInit+0x8>

08004fea <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8004fea:	2000      	movs	r0, #0
 8004fec:	4770      	bx	lr

08004fee <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8004fee:	2000      	movs	r0, #0
 8004ff0:	4770      	bx	lr

08004ff2 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004ff2:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ff4:	6904      	ldr	r4, [r0, #16]
 8004ff6:	8900      	ldrh	r0, [r0, #8]
 8004ff8:	47a0      	blx	r4
}
 8004ffa:	bd10      	pop	{r4, pc}

08004ffc <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004ffc:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ffe:	68c4      	ldr	r4, [r0, #12]
 8005000:	8900      	ldrh	r0, [r0, #8]
 8005002:	47a0      	blx	r4
}
 8005004:	bd10      	pop	{r4, pc}

08005006 <FT5336_GestureConfig>:
{
 8005006:	b570      	push	{r4, r5, r6, lr}
 8005008:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800500a:	f100 0518 	add.w	r5, r0, #24
 800500e:	7809      	ldrb	r1, [r1, #0]
 8005010:	4628      	mov	r0, r5
 8005012:	f000 f91d 	bl	8005250 <ft5336_radian_value>
 8005016:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005018:	7931      	ldrb	r1, [r6, #4]
 800501a:	4628      	mov	r0, r5
 800501c:	f000 f925 	bl	800526a <ft5336_offset_left_right>
 8005020:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005022:	7a31      	ldrb	r1, [r6, #8]
 8005024:	4628      	mov	r0, r5
 8005026:	f000 f92d 	bl	8005284 <ft5336_offset_up_down>
 800502a:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800502c:	7b31      	ldrb	r1, [r6, #12]
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f935 	bl	800529e <ft5336_disatnce_left_right>
 8005034:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8005036:	7c31      	ldrb	r1, [r6, #16]
 8005038:	4628      	mov	r0, r5
 800503a:	f000 f93d 	bl	80052b8 <ft5336_distance_up_down>
 800503e:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8005040:	7d31      	ldrb	r1, [r6, #20]
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f945 	bl	80052d2 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8005048:	1820      	adds	r0, r4, r0
 800504a:	d100      	bne.n	800504e <FT5336_GestureConfig+0x48>
}
 800504c:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 800504e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005052:	e7fb      	b.n	800504c <FT5336_GestureConfig+0x46>

08005054 <FT5336_ReadID>:
{
 8005054:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8005056:	3018      	adds	r0, #24
 8005058:	f000 f955 	bl	8005306 <ft5336_chip_id>
}
 800505c:	bd08      	pop	{r3, pc}

0800505e <FT5336_DetectTouch>:
{
 800505e:	b500      	push	{lr}
 8005060:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8005062:	f10d 0107 	add.w	r1, sp, #7
 8005066:	3018      	adds	r0, #24
 8005068:	f000 f8e5 	bl	8005236 <ft5336_td_status>
 800506c:	b938      	cbnz	r0, 800507e <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800506e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005072:	2b05      	cmp	r3, #5
 8005074:	d800      	bhi.n	8005078 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 8005076:	4618      	mov	r0, r3
}
 8005078:	b003      	add	sp, #12
 800507a:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 800507e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005082:	e7f9      	b.n	8005078 <FT5336_DetectTouch+0x1a>

08005084 <FT5336_GetState>:
{
 8005084:	b530      	push	{r4, r5, lr}
 8005086:	b083      	sub	sp, #12
 8005088:	4605      	mov	r5, r0
 800508a:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800508c:	f7ff ffe7 	bl	800505e <FT5336_DetectTouch>
 8005090:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8005092:	2304      	movs	r3, #4
 8005094:	eb0d 0203 	add.w	r2, sp, r3
 8005098:	2103      	movs	r1, #3
 800509a:	f105 0018 	add.w	r0, r5, #24
 800509e:	f000 f8b9 	bl	8005214 <ft5336_read_reg>
 80050a2:	b998      	cbnz	r0, 80050cc <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80050a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80050b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60a3      	str	r3, [r4, #8]
}
 80050c8:	b003      	add	sp, #12
 80050ca:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80050d0:	e7fa      	b.n	80050c8 <FT5336_GetState+0x44>

080050d2 <FT5336_GetMultiTouchState>:
{
 80050d2:	b530      	push	{r4, r5, lr}
 80050d4:	b089      	sub	sp, #36	; 0x24
 80050d6:	4604      	mov	r4, r0
 80050d8:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80050da:	f7ff ffc0 	bl	800505e <FT5336_DetectTouch>
 80050de:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80050e0:	231e      	movs	r3, #30
 80050e2:	466a      	mov	r2, sp
 80050e4:	2103      	movs	r1, #3
 80050e6:	f104 0018 	add.w	r0, r4, #24
 80050ea:	f000 f893 	bl	8005214 <ft5336_read_reg>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d146      	bne.n	8005180 <FT5336_GetMultiTouchState+0xae>
 80050f2:	4603      	mov	r3, r0
 80050f4:	e040      	b.n	8005178 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80050f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80050fa:	004a      	lsls	r2, r1, #1
 80050fc:	ac08      	add	r4, sp, #32
 80050fe:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8005102:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 8005106:	ea4f 210c 	mov.w	r1, ip, lsl #8
 800510a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800510e:	f102 0421 	add.w	r4, r2, #33	; 0x21
 8005112:	446c      	add	r4, sp
 8005114:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 8005118:	4321      	orrs	r1, r4
 800511a:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 800511e:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8005120:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8005124:	4469      	add	r1, sp
 8005126:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800512a:	0224      	lsls	r4, r4, #8
 800512c:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8005130:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8005134:	4469      	add	r1, sp
 8005136:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 800513a:	430c      	orrs	r4, r1
 800513c:	1d99      	adds	r1, r3, #6
 800513e:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8005142:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8005146:	f103 0410 	add.w	r4, r3, #16
 800514a:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800514e:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8005152:	4469      	add	r1, sp
 8005154:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8005158:	f103 010a 	add.w	r1, r3, #10
 800515c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8005160:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8005162:	3225      	adds	r2, #37	; 0x25
 8005164:	446a      	add	r2, sp
 8005166:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800516a:	0909      	lsrs	r1, r1, #4
 800516c:	f103 0214 	add.w	r2, r3, #20
 8005170:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8005174:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8005176:	3301      	adds	r3, #1
 8005178:	2b04      	cmp	r3, #4
 800517a:	d9bc      	bls.n	80050f6 <FT5336_GetMultiTouchState+0x24>
}
 800517c:	b009      	add	sp, #36	; 0x24
 800517e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005184:	e7fa      	b.n	800517c <FT5336_GetMultiTouchState+0xaa>

08005186 <FT5336_GetGesture>:
{
 8005186:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8005188:	3018      	adds	r0, #24
 800518a:	f000 f84d 	bl	8005228 <ft5336_gest_id>
}
 800518e:	bd08      	pop	{r3, pc}

08005190 <FT5336_EnableIT>:
{
 8005190:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8005192:	2101      	movs	r1, #1
 8005194:	3018      	adds	r0, #24
 8005196:	f000 f8a9 	bl	80052ec <ft5336_g_mode>
}
 800519a:	bd08      	pop	{r3, pc}

0800519c <FT5336_DisableIT>:
{
 800519c:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800519e:	2100      	movs	r1, #0
 80051a0:	3018      	adds	r0, #24
 80051a2:	f000 f8a3 	bl	80052ec <ft5336_g_mode>
}
 80051a6:	bd08      	pop	{r3, pc}

080051a8 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 80051a8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80051ac:	b95b      	cbnz	r3, 80051c6 <FT5336_Init+0x1e>
{
 80051ae:	b510      	push	{r4, lr}
 80051b0:	4604      	mov	r4, r0
    pObj->IO.Init();
 80051b2:	6803      	ldr	r3, [r0, #0]
 80051b4:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7ff fff0 	bl	800519c <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 80051bc:	2201      	movs	r2, #1
 80051be:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 80051c2:	b910      	cbnz	r0, 80051ca <FT5336_Init+0x22>
}
 80051c4:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 80051c6:	2000      	movs	r0, #0
}
 80051c8:	4770      	bx	lr
    ret = FT5336_ERROR;
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80051ce:	e7f9      	b.n	80051c4 <FT5336_Init+0x1c>

080051d0 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 80051d0:	b1a8      	cbz	r0, 80051fe <FT5336_RegisterBusIO+0x2e>
{
 80051d2:	b508      	push	{r3, lr}
 80051d4:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 80051d6:	680a      	ldr	r2, [r1, #0]
 80051d8:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80051da:	6848      	ldr	r0, [r1, #4]
 80051dc:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80051de:	8908      	ldrh	r0, [r1, #8]
 80051e0:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80051e2:	68c8      	ldr	r0, [r1, #12]
 80051e4:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80051e6:	6908      	ldr	r0, [r1, #16]
 80051e8:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80051ea:	6949      	ldr	r1, [r1, #20]
 80051ec:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80051ee:	4907      	ldr	r1, [pc, #28]	; (800520c <FT5336_RegisterBusIO+0x3c>)
 80051f0:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80051f2:	4907      	ldr	r1, [pc, #28]	; (8005210 <FT5336_RegisterBusIO+0x40>)
 80051f4:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80051f6:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 80051f8:	b122      	cbz	r2, 8005204 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 80051fa:	4790      	blx	r2
}
 80051fc:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005202:	4770      	bx	lr
      ret = FT5336_ERROR;
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005208:	e7f8      	b.n	80051fc <FT5336_RegisterBusIO+0x2c>
 800520a:	bf00      	nop
 800520c:	08004ff3 	.word	0x08004ff3
 8005210:	08004ffd 	.word	0x08004ffd

08005214 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005214:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005216:	6844      	ldr	r4, [r0, #4]
 8005218:	6880      	ldr	r0, [r0, #8]
 800521a:	47a0      	blx	r4
}
 800521c:	bd10      	pop	{r4, pc}

0800521e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800521e:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005220:	6804      	ldr	r4, [r0, #0]
 8005222:	6880      	ldr	r0, [r0, #8]
 8005224:	47a0      	blx	r4
}
 8005226:	bd10      	pop	{r4, pc}

08005228 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005228:	b508      	push	{r3, lr}
 800522a:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800522c:	2301      	movs	r3, #1
 800522e:	4619      	mov	r1, r3
 8005230:	f7ff fff0 	bl	8005214 <ft5336_read_reg>
}
 8005234:	bd08      	pop	{r3, pc}

08005236 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005236:	b510      	push	{r4, lr}
 8005238:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800523a:	2301      	movs	r3, #1
 800523c:	460a      	mov	r2, r1
 800523e:	2102      	movs	r1, #2
 8005240:	f7ff ffe8 	bl	8005214 <ft5336_read_reg>
  
  if(ret == 0)
 8005244:	b918      	cbnz	r0, 800524e <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8005246:	7823      	ldrb	r3, [r4, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800524e:	bd10      	pop	{r4, pc}

08005250 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8005250:	b500      	push	{lr}
 8005252:	b083      	sub	sp, #12
 8005254:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8005258:	2301      	movs	r3, #1
 800525a:	f10d 0207 	add.w	r2, sp, #7
 800525e:	2191      	movs	r1, #145	; 0x91
 8005260:	f7ff ffdd 	bl	800521e <ft5336_write_reg>
}
 8005264:	b003      	add	sp, #12
 8005266:	f85d fb04 	ldr.w	pc, [sp], #4

0800526a <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800526a:	b500      	push	{lr}
 800526c:	b083      	sub	sp, #12
 800526e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8005272:	2301      	movs	r3, #1
 8005274:	f10d 0207 	add.w	r2, sp, #7
 8005278:	2192      	movs	r1, #146	; 0x92
 800527a:	f7ff ffd0 	bl	800521e <ft5336_write_reg>
}
 800527e:	b003      	add	sp, #12
 8005280:	f85d fb04 	ldr.w	pc, [sp], #4

08005284 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8005284:	b500      	push	{lr}
 8005286:	b083      	sub	sp, #12
 8005288:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800528c:	2301      	movs	r3, #1
 800528e:	f10d 0207 	add.w	r2, sp, #7
 8005292:	2193      	movs	r1, #147	; 0x93
 8005294:	f7ff ffc3 	bl	800521e <ft5336_write_reg>
}
 8005298:	b003      	add	sp, #12
 800529a:	f85d fb04 	ldr.w	pc, [sp], #4

0800529e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800529e:	b500      	push	{lr}
 80052a0:	b083      	sub	sp, #12
 80052a2:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80052a6:	2301      	movs	r3, #1
 80052a8:	f10d 0207 	add.w	r2, sp, #7
 80052ac:	2194      	movs	r1, #148	; 0x94
 80052ae:	f7ff ffb6 	bl	800521e <ft5336_write_reg>
}
 80052b2:	b003      	add	sp, #12
 80052b4:	f85d fb04 	ldr.w	pc, [sp], #4

080052b8 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80052b8:	b500      	push	{lr}
 80052ba:	b083      	sub	sp, #12
 80052bc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80052c0:	2301      	movs	r3, #1
 80052c2:	f10d 0207 	add.w	r2, sp, #7
 80052c6:	2195      	movs	r1, #149	; 0x95
 80052c8:	f7ff ffa9 	bl	800521e <ft5336_write_reg>
}
 80052cc:	b003      	add	sp, #12
 80052ce:	f85d fb04 	ldr.w	pc, [sp], #4

080052d2 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80052d2:	b500      	push	{lr}
 80052d4:	b083      	sub	sp, #12
 80052d6:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80052da:	2301      	movs	r3, #1
 80052dc:	f10d 0207 	add.w	r2, sp, #7
 80052e0:	2196      	movs	r1, #150	; 0x96
 80052e2:	f7ff ff9c 	bl	800521e <ft5336_write_reg>
}
 80052e6:	b003      	add	sp, #12
 80052e8:	f85d fb04 	ldr.w	pc, [sp], #4

080052ec <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80052ec:	b500      	push	{lr}
 80052ee:	b083      	sub	sp, #12
 80052f0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80052f4:	2301      	movs	r3, #1
 80052f6:	f10d 0207 	add.w	r2, sp, #7
 80052fa:	21a4      	movs	r1, #164	; 0xa4
 80052fc:	f7ff ff8f 	bl	800521e <ft5336_write_reg>
}
 8005300:	b003      	add	sp, #12
 8005302:	f85d fb04 	ldr.w	pc, [sp], #4

08005306 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005306:	b508      	push	{r3, lr}
 8005308:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800530a:	2301      	movs	r3, #1
 800530c:	21a8      	movs	r1, #168	; 0xa8
 800530e:	f7ff ff81 	bl	8005214 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8005312:	bd08      	pop	{r3, pc}

08005314 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8005314:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005318:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800531a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800531e:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8005320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005324:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8005326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800532a:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800532c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005330:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8005332:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8005334:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8005336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800533a:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800533c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005340:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8005342:	2000      	movs	r0, #0
 8005344:	4770      	bx	lr

08005346 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005346:	b570      	push	{r4, r5, r6, lr}
 8005348:	b09a      	sub	sp, #104	; 0x68
 800534a:	4606      	mov	r6, r0
 800534c:	460c      	mov	r4, r1
 800534e:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8005350:	2250      	movs	r2, #80	; 0x50
 8005352:	2100      	movs	r1, #0
 8005354:	a806      	add	r0, sp, #24
 8005356:	f017 f991 	bl	801c67c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800535a:	2300      	movs	r3, #0
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9302      	str	r3, [sp, #8]
 8005360:	9303      	str	r3, [sp, #12]
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005366:	429c      	cmp	r4, r3
 8005368:	bf08      	it	eq
 800536a:	2d01      	cmpeq	r5, #1
 800536c:	d061      	beq.n	8005432 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800536e:	2c00      	cmp	r4, #0
 8005370:	d143      	bne.n	80053fa <MX25LM51245G_AutoPollingMemReady+0xb4>
 8005372:	2301      	movs	r3, #1
 8005374:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005376:	2d01      	cmp	r5, #1
 8005378:	d041      	beq.n	80053fe <MX25LM51245G_AutoPollingMemReady+0xb8>
 800537a:	2300      	movs	r3, #0
 800537c:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800537e:	2c00      	cmp	r4, #0
 8005380:	d13f      	bne.n	8005402 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8005382:	2300      	movs	r3, #0
 8005384:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005386:	2c00      	cmp	r4, #0
 8005388:	d13d      	bne.n	8005406 <MX25LM51245G_AutoPollingMemReady+0xc0>
 800538a:	2305      	movs	r3, #5
 800538c:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800538e:	2c00      	cmp	r4, #0
 8005390:	d13c      	bne.n	800540c <MX25LM51245G_AutoPollingMemReady+0xc6>
 8005392:	2300      	movs	r3, #0
 8005394:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005396:	2d01      	cmp	r5, #1
 8005398:	d03b      	beq.n	8005412 <MX25LM51245G_AutoPollingMemReady+0xcc>
 800539a:	2300      	movs	r3, #0
 800539c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800539e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80053a2:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	d137      	bne.n	8005418 <MX25LM51245G_AutoPollingMemReady+0xd2>
 80053a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ac:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80053ae:	2d01      	cmp	r5, #1
 80053b0:	d035      	beq.n	800541e <MX25LM51245G_AutoPollingMemReady+0xd8>
 80053b2:	2300      	movs	r3, #0
 80053b4:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80053b6:	bbac      	cbnz	r4, 8005424 <MX25LM51245G_AutoPollingMemReady+0xde>
 80053b8:	2300      	movs	r3, #0
 80053ba:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80053bc:	2d01      	cmp	r5, #1
 80053be:	d033      	beq.n	8005428 <MX25LM51245G_AutoPollingMemReady+0xe2>
 80053c0:	2301      	movs	r3, #1
 80053c2:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80053c4:	2d01      	cmp	r5, #1
 80053c6:	d031      	beq.n	800542c <MX25LM51245G_AutoPollingMemReady+0xe6>
 80053c8:	2300      	movs	r3, #0
 80053ca:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80053cc:	2301      	movs	r3, #1
 80053ce:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80053d0:	2310      	movs	r3, #16
 80053d2:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80053d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053d8:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	a906      	add	r1, sp, #24
 80053e0:	4630      	mov	r0, r6
 80053e2:	f003 f8dd 	bl	80085a0 <HAL_OSPI_Command>
 80053e6:	bb38      	cbnz	r0, 8005438 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ec:	a901      	add	r1, sp, #4
 80053ee:	4630      	mov	r0, r6
 80053f0:	f003 f9e7 	bl	80087c2 <HAL_OSPI_AutoPolling>
 80053f4:	bb18      	cbnz	r0, 800543e <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80053f6:	b01a      	add	sp, #104	; 0x68
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80053fa:	2304      	movs	r3, #4
 80053fc:	e7ba      	b.n	8005374 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80053fe:	2308      	movs	r3, #8
 8005400:	e7bc      	b.n	800537c <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005402:	2310      	movs	r3, #16
 8005404:	e7be      	b.n	8005384 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005406:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800540a:	e7bf      	b.n	800538c <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800540c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005410:	e7c0      	b.n	8005394 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005416:	e7c1      	b.n	800539c <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005418:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800541c:	e7c6      	b.n	80053ac <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800541e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005422:	e7c7      	b.n	80053b4 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005424:	2305      	movs	r3, #5
 8005426:	e7c8      	b.n	80053ba <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005428:	2302      	movs	r3, #2
 800542a:	e7ca      	b.n	80053c2 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800542c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005430:	e7cb      	b.n	80053ca <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 8005432:	f04f 30ff 	mov.w	r0, #4294967295
 8005436:	e7de      	b.n	80053f6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e7db      	b.n	80053f6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 800543e:	f04f 30ff 	mov.w	r0, #4294967295
 8005442:	e7d8      	b.n	80053f6 <MX25LM51245G_AutoPollingMemReady+0xb0>

08005444 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	b096      	sub	sp, #88	; 0x58
 8005448:	4606      	mov	r6, r0
 800544a:	460c      	mov	r4, r1
 800544c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800544e:	2250      	movs	r2, #80	; 0x50
 8005450:	2100      	movs	r1, #0
 8005452:	a802      	add	r0, sp, #8
 8005454:	f017 f912 	bl	801c67c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800545e:	2c01      	cmp	r4, #1
 8005460:	bf08      	it	eq
 8005462:	429d      	cmpeq	r5, r3
 8005464:	d04e      	beq.n	8005504 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8005466:	2301      	movs	r3, #1
 8005468:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800546a:	b104      	cbz	r4, 800546e <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 800546c:	2304      	movs	r3, #4
 800546e:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005470:	b92c      	cbnz	r4, 800547e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8005472:	2300      	movs	r3, #0
 8005474:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8005476:	b924      	cbnz	r4, 8005482 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8005478:	bb15      	cbnz	r5, 80054c0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 800547a:	230b      	movs	r3, #11
 800547c:	e003      	b.n	8005486 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800547e:	2310      	movs	r3, #16
 8005480:	e7f8      	b.n	8005474 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8005482:	f64e 4313 	movw	r3, #60435	; 0xec13
 8005486:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005488:	b9e4      	cbnz	r4, 80054c4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 800548a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800548e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8005490:	b9dd      	cbnz	r5, 80054ca <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8005492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005496:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005498:	b9d4      	cbnz	r4, 80054d0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800549a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800549e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80054a0:	b9cc      	cbnz	r4, 80054d6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 80054a2:	2308      	movs	r3, #8
 80054a4:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054aa:	a902      	add	r1, sp, #8
 80054ac:	4630      	mov	r0, r6
 80054ae:	f003 f877 	bl	80085a0 <HAL_OSPI_Command>
 80054b2:	bb50      	cbnz	r0, 800550a <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80054b4:	2302      	movs	r3, #2
 80054b6:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80054b8:	b97c      	cbnz	r4, 80054da <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 80054ba:	b185      	cbz	r5, 80054de <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 80054bc:	2312      	movs	r3, #18
 80054be:	e00e      	b.n	80054de <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80054c0:	230c      	movs	r3, #12
 80054c2:	e7e0      	b.n	8005486 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80054c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c8:	e7e1      	b.n	800548e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80054ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80054ce:	e7e2      	b.n	8005496 <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80054d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054d4:	e7e3      	b.n	800549e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80054d6:	2306      	movs	r3, #6
 80054d8:	e7e4      	b.n	80054a4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80054da:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80054de:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e8:	a902      	add	r1, sp, #8
 80054ea:	4630      	mov	r0, r6
 80054ec:	f003 f858 	bl	80085a0 <HAL_OSPI_Command>
 80054f0:	b970      	cbnz	r0, 8005510 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80054f6:	4669      	mov	r1, sp
 80054f8:	4630      	mov	r0, r6
 80054fa:	f003 f9bf 	bl	800887c <HAL_OSPI_MemoryMapped>
 80054fe:	b950      	cbnz	r0, 8005516 <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005500:	b016      	add	sp, #88	; 0x58
 8005502:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	e7fa      	b.n	8005500 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	e7f7      	b.n	8005500 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	e7f4      	b.n	8005500 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8005516:	f04f 30ff 	mov.w	r0, #4294967295
 800551a:	e7f1      	b.n	8005500 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

0800551c <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800551c:	b510      	push	{r4, lr}
 800551e:	b096      	sub	sp, #88	; 0x58
 8005520:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8005522:	2250      	movs	r2, #80	; 0x50
 8005524:	2100      	movs	r1, #0
 8005526:	a802      	add	r0, sp, #8
 8005528:	f017 f8a8 	bl	801c67c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800552c:	2300      	movs	r3, #0
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8005532:	2301      	movs	r3, #1
 8005534:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8005536:	2304      	movs	r3, #4
 8005538:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800553a:	2308      	movs	r3, #8
 800553c:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800553e:	2310      	movs	r3, #16
 8005540:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8005542:	f64e 6311 	movw	r3, #60945	; 0xee11
 8005546:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8005548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800554c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800554e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005552:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005554:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005558:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800555a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800555e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8005560:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005564:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8005566:	2306      	movs	r3, #6
 8005568:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800556a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800556e:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005570:	f241 3288 	movw	r2, #5000	; 0x1388
 8005574:	a902      	add	r1, sp, #8
 8005576:	4620      	mov	r0, r4
 8005578:	f003 f812 	bl	80085a0 <HAL_OSPI_Command>
 800557c:	b9b8      	cbnz	r0, 80055ae <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800557e:	2302      	movs	r3, #2
 8005580:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005582:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8005586:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800558c:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	a902      	add	r1, sp, #8
 8005594:	4620      	mov	r0, r4
 8005596:	f003 f803 	bl	80085a0 <HAL_OSPI_Command>
 800559a:	b958      	cbnz	r0, 80055b4 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800559c:	2300      	movs	r3, #0
 800559e:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80055a0:	4669      	mov	r1, sp
 80055a2:	4620      	mov	r0, r4
 80055a4:	f003 f96a 	bl	800887c <HAL_OSPI_MemoryMapped>
 80055a8:	b938      	cbnz	r0, 80055ba <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80055aa:	b016      	add	sp, #88	; 0x58
 80055ac:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 80055ae:	f04f 30ff 	mov.w	r0, #4294967295
 80055b2:	e7fa      	b.n	80055aa <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	e7f7      	b.n	80055aa <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	e7f4      	b.n	80055aa <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

080055c0 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	b09a      	sub	sp, #104	; 0x68
 80055c4:	4606      	mov	r6, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 80055ca:	2250      	movs	r2, #80	; 0x50
 80055cc:	2100      	movs	r1, #0
 80055ce:	a806      	add	r0, sp, #24
 80055d0:	f017 f854 	bl	801c67c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80055d4:	2300      	movs	r3, #0
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	9302      	str	r3, [sp, #8]
 80055da:	9303      	str	r3, [sp, #12]
 80055dc:	9304      	str	r3, [sp, #16]
 80055de:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80055e0:	429c      	cmp	r4, r3
 80055e2:	bf08      	it	eq
 80055e4:	2d01      	cmpeq	r5, #1
 80055e6:	d076      	beq.n	80056d6 <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80055e8:	2c00      	cmp	r4, #0
 80055ea:	d155      	bne.n	8005698 <MX25LM51245G_WriteEnable+0xd8>
 80055ec:	2301      	movs	r3, #1
 80055ee:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80055f0:	2d01      	cmp	r5, #1
 80055f2:	d053      	beq.n	800569c <MX25LM51245G_WriteEnable+0xdc>
 80055f4:	2300      	movs	r3, #0
 80055f6:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80055f8:	2c00      	cmp	r4, #0
 80055fa:	d151      	bne.n	80056a0 <MX25LM51245G_WriteEnable+0xe0>
 80055fc:	2300      	movs	r3, #0
 80055fe:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8005600:	2c00      	cmp	r4, #0
 8005602:	d14f      	bne.n	80056a4 <MX25LM51245G_WriteEnable+0xe4>
 8005604:	2306      	movs	r3, #6
 8005606:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	a906      	add	r1, sp, #24
 800560e:	4630      	mov	r0, r6
 8005610:	f002 ffc6 	bl	80085a0 <HAL_OSPI_Command>
 8005614:	2800      	cmp	r0, #0
 8005616:	d161      	bne.n	80056dc <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005618:	2c00      	cmp	r4, #0
 800561a:	d146      	bne.n	80056aa <MX25LM51245G_WriteEnable+0xea>
 800561c:	2305      	movs	r3, #5
 800561e:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005620:	2c00      	cmp	r4, #0
 8005622:	d145      	bne.n	80056b0 <MX25LM51245G_WriteEnable+0xf0>
 8005624:	2300      	movs	r3, #0
 8005626:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005628:	2d01      	cmp	r5, #1
 800562a:	d044      	beq.n	80056b6 <MX25LM51245G_WriteEnable+0xf6>
 800562c:	2300      	movs	r3, #0
 800562e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8005630:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005634:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800563a:	2c00      	cmp	r4, #0
 800563c:	d13e      	bne.n	80056bc <MX25LM51245G_WriteEnable+0xfc>
 800563e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005642:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005644:	2d01      	cmp	r5, #1
 8005646:	d03c      	beq.n	80056c2 <MX25LM51245G_WriteEnable+0x102>
 8005648:	2300      	movs	r3, #0
 800564a:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800564c:	2c00      	cmp	r4, #0
 800564e:	d13b      	bne.n	80056c8 <MX25LM51245G_WriteEnable+0x108>
 8005650:	2300      	movs	r3, #0
 8005652:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005654:	2d01      	cmp	r5, #1
 8005656:	d039      	beq.n	80056cc <MX25LM51245G_WriteEnable+0x10c>
 8005658:	2301      	movs	r3, #1
 800565a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800565c:	2d01      	cmp	r5, #1
 800565e:	d037      	beq.n	80056d0 <MX25LM51245G_WriteEnable+0x110>
 8005660:	2300      	movs	r3, #0
 8005662:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005664:	f241 3288 	movw	r2, #5000	; 0x1388
 8005668:	a906      	add	r1, sp, #24
 800566a:	4630      	mov	r0, r6
 800566c:	f002 ff98 	bl	80085a0 <HAL_OSPI_Command>
 8005670:	bbb8      	cbnz	r0, 80056e2 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 8005672:	2302      	movs	r3, #2
 8005674:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 8005676:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8005678:	2300      	movs	r3, #0
 800567a:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800567c:	2310      	movs	r3, #16
 800567e:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005680:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005684:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	a901      	add	r1, sp, #4
 800568c:	4630      	mov	r0, r6
 800568e:	f003 f898 	bl	80087c2 <HAL_OSPI_AutoPolling>
 8005692:	bb48      	cbnz	r0, 80056e8 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005694:	b01a      	add	sp, #104	; 0x68
 8005696:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005698:	2304      	movs	r3, #4
 800569a:	e7a8      	b.n	80055ee <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800569c:	2308      	movs	r3, #8
 800569e:	e7aa      	b.n	80055f6 <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80056a0:	2310      	movs	r3, #16
 80056a2:	e7ac      	b.n	80055fe <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80056a4:	f240 63f9 	movw	r3, #1785	; 0x6f9
 80056a8:	e7ad      	b.n	8005606 <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80056aa:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80056ae:	e7b6      	b.n	800561e <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80056b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056b4:	e7b7      	b.n	8005626 <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80056b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056ba:	e7b8      	b.n	800562e <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80056bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80056c0:	e7bf      	b.n	8005642 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80056c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056c6:	e7c0      	b.n	800564a <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80056c8:	2305      	movs	r3, #5
 80056ca:	e7c2      	b.n	8005652 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80056cc:	2302      	movs	r3, #2
 80056ce:	e7c4      	b.n	800565a <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80056d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80056d4:	e7c5      	b.n	8005662 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 80056d6:	f04f 30ff 	mov.w	r0, #4294967295
 80056da:	e7db      	b.n	8005694 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e7d8      	b.n	8005694 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295
 80056e6:	e7d5      	b.n	8005694 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	e7d2      	b.n	8005694 <MX25LM51245G_WriteEnable+0xd4>

080056ee <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80056ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056f0:	b095      	sub	sp, #84	; 0x54
 80056f2:	4607      	mov	r7, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	4615      	mov	r5, r2
 80056f8:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80056fa:	2250      	movs	r2, #80	; 0x50
 80056fc:	2100      	movs	r1, #0
 80056fe:	4668      	mov	r0, sp
 8005700:	f016 ffbc 	bl	801c67c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005704:	2c00      	cmp	r4, #0
 8005706:	bf08      	it	eq
 8005708:	2d01      	cmpeq	r5, #1
 800570a:	d04e      	beq.n	80057aa <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800570c:	bb24      	cbnz	r4, 8005758 <MX25LM51245G_WriteCfg2Register+0x6a>
 800570e:	2301      	movs	r3, #1
 8005710:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005712:	2d01      	cmp	r5, #1
 8005714:	d022      	beq.n	800575c <MX25LM51245G_WriteCfg2Register+0x6e>
 8005716:	2300      	movs	r3, #0
 8005718:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800571a:	bb0c      	cbnz	r4, 8005760 <MX25LM51245G_WriteCfg2Register+0x72>
 800571c:	2300      	movs	r3, #0
 800571e:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8005720:	bb04      	cbnz	r4, 8005764 <MX25LM51245G_WriteCfg2Register+0x76>
 8005722:	2372      	movs	r3, #114	; 0x72
 8005724:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005726:	bb04      	cbnz	r4, 800576a <MX25LM51245G_WriteCfg2Register+0x7c>
 8005728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800572c:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800572e:	2d01      	cmp	r5, #1
 8005730:	d01e      	beq.n	8005770 <MX25LM51245G_WriteCfg2Register+0x82>
 8005732:	2300      	movs	r3, #0
 8005734:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005736:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800573a:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 800573c:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800573e:	b9d4      	cbnz	r4, 8005776 <MX25LM51245G_WriteCfg2Register+0x88>
 8005740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005744:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005746:	2d01      	cmp	r5, #1
 8005748:	d018      	beq.n	800577c <MX25LM51245G_WriteCfg2Register+0x8e>
 800574a:	2300      	movs	r3, #0
 800574c:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800574e:	b1d4      	cbz	r4, 8005786 <MX25LM51245G_WriteCfg2Register+0x98>
 8005750:	2d01      	cmp	r5, #1
 8005752:	d016      	beq.n	8005782 <MX25LM51245G_WriteCfg2Register+0x94>
 8005754:	2301      	movs	r3, #1
 8005756:	e017      	b.n	8005788 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005758:	2304      	movs	r3, #4
 800575a:	e7d9      	b.n	8005710 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800575c:	2308      	movs	r3, #8
 800575e:	e7db      	b.n	8005718 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005760:	2310      	movs	r3, #16
 8005762:	e7dc      	b.n	800571e <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8005764:	f247 238d 	movw	r3, #29325	; 0x728d
 8005768:	e7dc      	b.n	8005724 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800576a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800576e:	e7dd      	b.n	800572c <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005774:	e7de      	b.n	8005734 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005776:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800577a:	e7e3      	b.n	8005744 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800577c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005780:	e7e4      	b.n	800574c <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8005782:	2302      	movs	r3, #2
 8005784:	e000      	b.n	8005788 <MX25LM51245G_WriteCfg2Register+0x9a>
 8005786:	2301      	movs	r3, #1
 8005788:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4669      	mov	r1, sp
 8005790:	4638      	mov	r0, r7
 8005792:	f002 ff05 	bl	80085a0 <HAL_OSPI_Command>
 8005796:	b958      	cbnz	r0, 80057b0 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	a91a      	add	r1, sp, #104	; 0x68
 800579e:	4638      	mov	r0, r7
 80057a0:	f002 ff5f 	bl	8008662 <HAL_OSPI_Transmit>
 80057a4:	b938      	cbnz	r0, 80057b6 <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80057a6:	b015      	add	sp, #84	; 0x54
 80057a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	e7fa      	b.n	80057a6 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	e7f7      	b.n	80057a6 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ba:	e7f4      	b.n	80057a6 <MX25LM51245G_WriteCfg2Register+0xb8>

080057bc <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057be:	b095      	sub	sp, #84	; 0x54
 80057c0:	4607      	mov	r7, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	4615      	mov	r5, r2
 80057c6:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80057c8:	2250      	movs	r2, #80	; 0x50
 80057ca:	2100      	movs	r1, #0
 80057cc:	4668      	mov	r0, sp
 80057ce:	f016 ff55 	bl	801c67c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80057d2:	2c00      	cmp	r4, #0
 80057d4:	bf08      	it	eq
 80057d6:	2d01      	cmpeq	r5, #1
 80057d8:	d05b      	beq.n	8005892 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d13d      	bne.n	800585a <MX25LM51245G_ReadCfg2Register+0x9e>
 80057de:	2301      	movs	r3, #1
 80057e0:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80057e2:	2d01      	cmp	r5, #1
 80057e4:	d03b      	beq.n	800585e <MX25LM51245G_ReadCfg2Register+0xa2>
 80057e6:	2300      	movs	r3, #0
 80057e8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80057ea:	2c00      	cmp	r4, #0
 80057ec:	d139      	bne.n	8005862 <MX25LM51245G_ReadCfg2Register+0xa6>
 80057ee:	2300      	movs	r3, #0
 80057f0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80057f2:	2c00      	cmp	r4, #0
 80057f4:	d137      	bne.n	8005866 <MX25LM51245G_ReadCfg2Register+0xaa>
 80057f6:	2371      	movs	r3, #113	; 0x71
 80057f8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80057fa:	2c00      	cmp	r4, #0
 80057fc:	d136      	bne.n	800586c <MX25LM51245G_ReadCfg2Register+0xb0>
 80057fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005802:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005804:	2d01      	cmp	r5, #1
 8005806:	d034      	beq.n	8005872 <MX25LM51245G_ReadCfg2Register+0xb6>
 8005808:	2300      	movs	r3, #0
 800580a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800580c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005810:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 8005812:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005814:	bb84      	cbnz	r4, 8005878 <MX25LM51245G_ReadCfg2Register+0xbc>
 8005816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800581a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800581c:	2d01      	cmp	r5, #1
 800581e:	d02e      	beq.n	800587e <MX25LM51245G_ReadCfg2Register+0xc2>
 8005820:	2300      	movs	r3, #0
 8005822:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005824:	bb74      	cbnz	r4, 8005884 <MX25LM51245G_ReadCfg2Register+0xc8>
 8005826:	2300      	movs	r3, #0
 8005828:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800582a:	2d01      	cmp	r5, #1
 800582c:	d02c      	beq.n	8005888 <MX25LM51245G_ReadCfg2Register+0xcc>
 800582e:	2301      	movs	r3, #1
 8005830:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005832:	2d01      	cmp	r5, #1
 8005834:	d02a      	beq.n	800588c <MX25LM51245G_ReadCfg2Register+0xd0>
 8005836:	2300      	movs	r3, #0
 8005838:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800583a:	f241 3288 	movw	r2, #5000	; 0x1388
 800583e:	4669      	mov	r1, sp
 8005840:	4638      	mov	r0, r7
 8005842:	f002 fead 	bl	80085a0 <HAL_OSPI_Command>
 8005846:	bb38      	cbnz	r0, 8005898 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800584e:	4638      	mov	r0, r7
 8005850:	f002 ff54 	bl	80086fc <HAL_OSPI_Receive>
 8005854:	bb18      	cbnz	r0, 800589e <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005856:	b015      	add	sp, #84	; 0x54
 8005858:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800585a:	2304      	movs	r3, #4
 800585c:	e7c0      	b.n	80057e0 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800585e:	2308      	movs	r3, #8
 8005860:	e7c2      	b.n	80057e8 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005862:	2310      	movs	r3, #16
 8005864:	e7c4      	b.n	80057f0 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8005866:	f247 138e 	movw	r3, #29070	; 0x718e
 800586a:	e7c5      	b.n	80057f8 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800586c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005870:	e7c7      	b.n	8005802 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005876:	e7c8      	b.n	800580a <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005878:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800587c:	e7cd      	b.n	800581a <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800587e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005882:	e7ce      	b.n	8005822 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005884:	2305      	movs	r3, #5
 8005886:	e7cf      	b.n	8005828 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005888:	2302      	movs	r3, #2
 800588a:	e7d1      	b.n	8005830 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800588c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005890:	e7d2      	b.n	8005838 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	e7de      	b.n	8005856 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e7db      	b.n	8005856 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800589e:	f04f 30ff 	mov.w	r0, #4294967295
 80058a2:	e7d8      	b.n	8005856 <MX25LM51245G_ReadCfg2Register+0x9a>

080058a4 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	b094      	sub	sp, #80	; 0x50
 80058a8:	4606      	mov	r6, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80058ae:	2250      	movs	r2, #80	; 0x50
 80058b0:	2100      	movs	r1, #0
 80058b2:	4668      	mov	r0, sp
 80058b4:	f016 fee2 	bl	801c67c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80058b8:	2c00      	cmp	r4, #0
 80058ba:	bf08      	it	eq
 80058bc:	2d01      	cmpeq	r5, #1
 80058be:	d01e      	beq.n	80058fe <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80058c0:	b9a4      	cbnz	r4, 80058ec <MX25LM51245G_ResetEnable+0x48>
 80058c2:	2301      	movs	r3, #1
 80058c4:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80058c6:	2d01      	cmp	r5, #1
 80058c8:	d012      	beq.n	80058f0 <MX25LM51245G_ResetEnable+0x4c>
 80058ca:	2300      	movs	r3, #0
 80058cc:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80058ce:	b98c      	cbnz	r4, 80058f4 <MX25LM51245G_ResetEnable+0x50>
 80058d0:	2300      	movs	r3, #0
 80058d2:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80058d4:	b984      	cbnz	r4, 80058f8 <MX25LM51245G_ResetEnable+0x54>
 80058d6:	2366      	movs	r3, #102	; 0x66
 80058d8:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058da:	f241 3288 	movw	r2, #5000	; 0x1388
 80058de:	4669      	mov	r1, sp
 80058e0:	4630      	mov	r0, r6
 80058e2:	f002 fe5d 	bl	80085a0 <HAL_OSPI_Command>
 80058e6:	b968      	cbnz	r0, 8005904 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80058e8:	b014      	add	sp, #80	; 0x50
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80058ec:	2304      	movs	r3, #4
 80058ee:	e7e9      	b.n	80058c4 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80058f0:	2308      	movs	r3, #8
 80058f2:	e7eb      	b.n	80058cc <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80058f4:	2310      	movs	r3, #16
 80058f6:	e7ec      	b.n	80058d2 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80058f8:	f246 6399 	movw	r3, #26265	; 0x6699
 80058fc:	e7ec      	b.n	80058d8 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80058fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005902:	e7f1      	b.n	80058e8 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e7ee      	b.n	80058e8 <MX25LM51245G_ResetEnable+0x44>

0800590a <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800590a:	b570      	push	{r4, r5, r6, lr}
 800590c:	b094      	sub	sp, #80	; 0x50
 800590e:	4606      	mov	r6, r0
 8005910:	460c      	mov	r4, r1
 8005912:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8005914:	2250      	movs	r2, #80	; 0x50
 8005916:	2100      	movs	r1, #0
 8005918:	4668      	mov	r0, sp
 800591a:	f016 feaf 	bl	801c67c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800591e:	2c00      	cmp	r4, #0
 8005920:	bf08      	it	eq
 8005922:	2d01      	cmpeq	r5, #1
 8005924:	d01e      	beq.n	8005964 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005926:	b9a4      	cbnz	r4, 8005952 <MX25LM51245G_ResetMemory+0x48>
 8005928:	2301      	movs	r3, #1
 800592a:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800592c:	2d01      	cmp	r5, #1
 800592e:	d012      	beq.n	8005956 <MX25LM51245G_ResetMemory+0x4c>
 8005930:	2300      	movs	r3, #0
 8005932:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005934:	b98c      	cbnz	r4, 800595a <MX25LM51245G_ResetMemory+0x50>
 8005936:	2300      	movs	r3, #0
 8005938:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800593a:	b984      	cbnz	r4, 800595e <MX25LM51245G_ResetMemory+0x54>
 800593c:	2399      	movs	r3, #153	; 0x99
 800593e:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005940:	f241 3288 	movw	r2, #5000	; 0x1388
 8005944:	4669      	mov	r1, sp
 8005946:	4630      	mov	r0, r6
 8005948:	f002 fe2a 	bl	80085a0 <HAL_OSPI_Command>
 800594c:	b968      	cbnz	r0, 800596a <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800594e:	b014      	add	sp, #80	; 0x50
 8005950:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005952:	2304      	movs	r3, #4
 8005954:	e7e9      	b.n	800592a <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005956:	2308      	movs	r3, #8
 8005958:	e7eb      	b.n	8005932 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800595a:	2310      	movs	r3, #16
 800595c:	e7ec      	b.n	8005938 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800595e:	f649 1366 	movw	r3, #39270	; 0x9966
 8005962:	e7ec      	b.n	800593e <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e7f1      	b.n	800594e <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 800596a:	f04f 30ff 	mov.w	r0, #4294967295
 800596e:	e7ee      	b.n	800594e <MX25LM51245G_ResetMemory+0x44>

08005970 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005974:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 8005976:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 800597a:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8005980:	222c      	movs	r2, #44	; 0x2c
 8005982:	fb02 3101 	mla	r1, r2, r1, r3
 8005986:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005988:	68ca      	ldr	r2, [r1, #12]
 800598a:	eb03 0e02 	add.w	lr, r3, r2
 800598e:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005992:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005994:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005996:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800599a:	690b      	ldr	r3, [r1, #16]
 800599c:	6a08      	ldr	r0, [r1, #32]
 800599e:	1a1e      	subs	r6, r3, r0
 80059a0:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80059a4:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80059a6:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80059aa:	694b      	ldr	r3, [r1, #20]
 80059ac:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 80059b0:	f1be 0f00 	cmp.w	lr, #0
 80059b4:	dd08      	ble.n	80059c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	dd09      	ble.n	80059ce <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80059ba:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 80059bc:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80059c0:	2d0f      	cmp	r5, #15
 80059c2:	d83b      	bhi.n	8005a3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80059c4:	2400      	movs	r4, #0
 80059c6:	e02b      	b.n	8005a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 80059c8:	f04f 0e00 	mov.w	lr, #0
 80059cc:	e7f3      	b.n	80059b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 80059ce:	2600      	movs	r6, #0
 80059d0:	e7f3      	b.n	80059ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80059d2:	3201      	adds	r2, #1
 80059d4:	2a0f      	cmp	r2, #15
 80059d6:	d822      	bhi.n	8005a1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80059d8:	fb02 f300 	mul.w	r3, r2, r0
 80059dc:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80059e0:	459e      	cmp	lr, r3
 80059e2:	bf8c      	ite	hi
 80059e4:	2100      	movhi	r1, #0
 80059e6:	2101      	movls	r1, #1
 80059e8:	429e      	cmp	r6, r3
 80059ea:	bf38      	it	cc
 80059ec:	2100      	movcc	r1, #0
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d0ef      	beq.n	80059d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 80059f2:	45a9      	cmp	r9, r5
 80059f4:	d0ed      	beq.n	80059d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80059f6:	4914      	ldr	r1, [pc, #80]	; (8005a48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80059f8:	680b      	ldr	r3, [r1, #0]
 80059fa:	f8df a050 	ldr.w	sl, [pc, #80]	; 8005a4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80059fe:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8005a02:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 8005a06:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005a0a:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005a0e:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 8005a12:	3301      	adds	r3, #1
 8005a14:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005a16:	2b7f      	cmp	r3, #127	; 0x7f
 8005a18:	d810      	bhi.n	8005a3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 8005a1a:	46a9      	mov	r9, r5
 8005a1c:	e7d9      	b.n	80059d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005a1e:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005a20:	2c0f      	cmp	r4, #15
 8005a22:	d809      	bhi.n	8005a38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005a24:	1c67      	adds	r7, r4, #1
 8005a26:	1c68      	adds	r0, r5, #1
 8005a28:	fb04 0300 	mla	r3, r4, r0, r0
 8005a2c:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 8005a30:	4598      	cmp	r8, r3
 8005a32:	d8f4      	bhi.n	8005a1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005a34:	2200      	movs	r2, #0
 8005a36:	e7cd      	b.n	80059d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005a38:	3501      	adds	r5, #1
 8005a3a:	e7c1      	b.n	80059c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 8005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a40:	3b9aca00 	.word	0x3b9aca00
 8005a44:	0801ed00 	.word	0x0801ed00
 8005a48:	240029b8 	.word	0x240029b8
 8005a4c:	24001fb8 	.word	0x24001fb8

08005a50 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	b089      	sub	sp, #36	; 0x24
 8005a56:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005a58:	4f4b      	ldr	r7, [pc, #300]	; (8005b88 <I2C_Compute_SCLL_SCLH+0x138>)
 8005a5a:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8005a5e:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8005a62:	494a      	ldr	r1, [pc, #296]	; (8005b8c <I2C_Compute_SCLL_SCLH+0x13c>)
 8005a64:	232c      	movs	r3, #44	; 0x2c
 8005a66:	fb04 f303 	mul.w	r3, r4, r3
 8005a6a:	18ca      	adds	r2, r1, r3
 8005a6c:	58cb      	ldr	r3, [r1, r3]
 8005a6e:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8005a72:	fbb1 f1f3 	udiv	r1, r1, r3
 8005a76:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8005a78:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005a7a:	fb08 f303 	mul.w	r3, r8, r3
 8005a7e:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005a80:	6853      	ldr	r3, [r2, #4]
 8005a82:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005a86:	6893      	ldr	r3, [r2, #8]
 8005a88:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8005a8c:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005a9a:	e060      	b.n	8005b5e <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8005a9c:	1af2      	subs	r2, r6, r3
 8005a9e:	e02a      	b.n	8005af6 <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8005aa0:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005aa2:	29ff      	cmp	r1, #255	; 0xff
 8005aa4:	d837      	bhi.n	8005b16 <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005aa6:	1c4d      	adds	r5, r1, #1
 8005aa8:	fb01 0200 	mla	r2, r1, r0, r0
 8005aac:	4442      	add	r2, r8
 8005aae:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005ab0:	eb0c 0302 	add.w	r3, ip, r2
 8005ab4:	4e35      	ldr	r6, [pc, #212]	; (8005b8c <I2C_Compute_SCLL_SCLH+0x13c>)
 8005ab6:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8005aba:	fb0b 6b04 	mla	fp, fp, r4, r6
 8005abe:	f8db 6020 	ldr.w	r6, [fp, #32]
 8005ac2:	4433      	add	r3, r6
 8005ac4:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8005ac8:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005aca:	429f      	cmp	r7, r3
 8005acc:	bf8c      	ite	hi
 8005ace:	2600      	movhi	r6, #0
 8005ad0:	2601      	movls	r6, #1
 8005ad2:	4599      	cmp	r9, r3
 8005ad4:	bf38      	it	cc
 8005ad6:	2600      	movcc	r6, #0
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	d0e1      	beq.n	8005aa0 <I2C_Compute_SCLL_SCLH+0x50>
 8005adc:	4e2b      	ldr	r6, [pc, #172]	; (8005b8c <I2C_Compute_SCLL_SCLH+0x13c>)
 8005ade:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8005ae2:	fb0b 6604 	mla	r6, fp, r4, r6
 8005ae6:	69f6      	ldr	r6, [r6, #28]
 8005ae8:	4296      	cmp	r6, r2
 8005aea:	d8d9      	bhi.n	8005aa0 <I2C_Compute_SCLL_SCLH+0x50>
 8005aec:	4592      	cmp	sl, r2
 8005aee:	d2d7      	bcs.n	8005aa0 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8005af0:	9e05      	ldr	r6, [sp, #20]
 8005af2:	1b9a      	subs	r2, r3, r6
 8005af4:	d4d2      	bmi.n	8005a9c <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8005af6:	9b02      	ldr	r3, [sp, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d2d1      	bcs.n	8005aa0 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <I2C_Compute_SCLL_SCLH+0x140>)
 8005b04:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005b08:	9e01      	ldr	r6, [sp, #4]
 8005b0a:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005b0c:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 8005b0e:	9202      	str	r2, [sp, #8]
              ret = count;
 8005b10:	9b04      	ldr	r3, [sp, #16]
 8005b12:	9307      	str	r3, [sp, #28]
 8005b14:	e7c4      	b.n	8005aa0 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	2bff      	cmp	r3, #255	; 0xff
 8005b1e:	d81b      	bhi.n	8005b58 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005b20:	9906      	ldr	r1, [sp, #24]
 8005b22:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	9203      	str	r2, [sp, #12]
 8005b2c:	fb03 0c00 	mla	ip, r3, r0, r0
 8005b30:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8005b34:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 8005b38:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <I2C_Compute_SCLL_SCLH+0x13c>)
 8005b3c:	222c      	movs	r2, #44	; 0x2c
 8005b3e:	fb02 3304 	mla	r3, r2, r4, r3
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	4563      	cmp	r3, ip
 8005b46:	d2e6      	bcs.n	8005b16 <I2C_Compute_SCLL_SCLH+0xc6>
 8005b48:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8005b4c:	1a5b      	subs	r3, r3, r1
 8005b4e:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8005b52:	d2e0      	bcs.n	8005b16 <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005b54:	2100      	movs	r1, #0
 8005b56:	e7a4      	b.n	8005aa2 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005b58:	9b04      	ldr	r3, [sp, #16]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <I2C_Compute_SCLL_SCLH+0x144>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9a04      	ldr	r2, [sp, #16]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d90a      	bls.n	8005b7e <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005b68:	9b04      	ldr	r3, [sp, #16]
 8005b6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b6e:	4a08      	ldr	r2, [pc, #32]	; (8005b90 <I2C_Compute_SCLL_SCLH+0x140>)
 8005b70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b74:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	e7cd      	b.n	8005b1a <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8005b7e:	9807      	ldr	r0, [sp, #28]
 8005b80:	b009      	add	sp, #36	; 0x24
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b86:	bf00      	nop
 8005b88:	3b9aca00 	.word	0x3b9aca00
 8005b8c:	0801ed00 	.word	0x0801ed00
 8005b90:	24001fb8 	.word	0x24001fb8
 8005b94:	240029b8 	.word	0x240029b8

08005b98 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	bf18      	it	ne
 8005b9c:	2900      	cmpne	r1, #0
 8005b9e:	d134      	bne.n	8005c0a <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8005ba0:	2000      	movs	r0, #0
}
 8005ba2:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005ba4:	3401      	adds	r4, #1
 8005ba6:	2c02      	cmp	r4, #2
 8005ba8:	d834      	bhi.n	8005c14 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005baa:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <I2C_GetTiming+0x84>)
 8005bac:	212c      	movs	r1, #44	; 0x2c
 8005bae:	fb01 3304 	mla	r3, r1, r4, r3
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d8f5      	bhi.n	8005ba4 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8005bb8:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <I2C_GetTiming+0x84>)
 8005bba:	fb01 3304 	mla	r3, r1, r4, r3
 8005bbe:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d3ef      	bcc.n	8005ba4 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f7ff fed2 	bl	8005970 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f7ff ff3e 	bl	8005a50 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8005bd4:	287f      	cmp	r0, #127	; 0x7f
 8005bd6:	d81f      	bhi.n	8005c18 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005bd8:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <I2C_GetTiming+0x88>)
 8005bda:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005bde:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8005be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005be6:	6863      	ldr	r3, [r4, #4]
 8005be8:	051b      	lsls	r3, r3, #20
 8005bea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005bee:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005bf2:	68a1      	ldr	r1, [r4, #8]
 8005bf4:	0409      	lsls	r1, r1, #16
 8005bf6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005bfa:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005bfc:	68e1      	ldr	r1, [r4, #12]
 8005bfe:	0209      	lsls	r1, r1, #8
 8005c00:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005c02:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005c04:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005c06:	4318      	orrs	r0, r3
 8005c08:	e005      	b.n	8005c16 <I2C_GetTiming+0x7e>
{
 8005c0a:	b538      	push	{r3, r4, r5, lr}
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005c10:	2400      	movs	r4, #0
 8005c12:	e7c8      	b.n	8005ba6 <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8005c14:	2000      	movs	r0, #0
}
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8005c18:	2000      	movs	r0, #0
  return ret;
 8005c1a:	e7fc      	b.n	8005c16 <I2C_GetTiming+0x7e>
 8005c1c:	0801ed00 	.word	0x0801ed00
 8005c20:	24001fb8 	.word	0x24001fb8

08005c24 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8005c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c28:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005c2a:	4c2a      	ldr	r4, [pc, #168]	; (8005cd4 <I2C4_MspInit+0xb0>)
 8005c2c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005c30:	f043 0308 	orr.w	r3, r3, #8
 8005c34:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8005c38:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005c44:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005c48:	f043 0308 	orr.w	r3, r3, #8
 8005c4c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8005c50:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8005c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c60:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005c62:	f04f 0912 	mov.w	r9, #18
 8005c66:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c6a:	f04f 0800 	mov.w	r8, #0
 8005c6e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005c72:	2702      	movs	r7, #2
 8005c74:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005c76:	2604      	movs	r6, #4
 8005c78:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005c7a:	4d17      	ldr	r5, [pc, #92]	; (8005cd8 <I2C4_MspInit+0xb4>)
 8005c7c:	a903      	add	r1, sp, #12
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f001 fada 	bl	8007238 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c88:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005c8a:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c8e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005c92:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005c94:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005c96:	a903      	add	r1, sp, #12
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f001 facd 	bl	8007238 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8005c9e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8005caa:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8005cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb2:	9302      	str	r3, [sp, #8]
 8005cb4:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8005cb6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8005cc2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8005cce:	b009      	add	sp, #36	; 0x24
 8005cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	58020c00 	.word	0x58020c00

08005cdc <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8005ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ce4:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005ce6:	4c09      	ldr	r4, [pc, #36]	; (8005d0c <I2C4_MspDeInit+0x30>)
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f001 fbb5 	bl	8007458 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8005cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cf2:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f001 fbaf 	bl	8007458 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005cfa:	4a05      	ldr	r2, [pc, #20]	; (8005d10 <I2C4_MspDeInit+0x34>)
 8005cfc:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8005d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d04:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8005d08:	b006      	add	sp, #24
 8005d0a:	bd10      	pop	{r4, pc}
 8005d0c:	58020c00 	.word	0x58020c00
 8005d10:	58024400 	.word	0x58024400

08005d14 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005d14:	b510      	push	{r4, lr}
 8005d16:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005d18:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005d1c:	9402      	str	r4, [sp, #8]
 8005d1e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8005d22:	9401      	str	r4, [sp, #4]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	4613      	mov	r3, r2
 8005d28:	460a      	mov	r2, r1
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	4804      	ldr	r0, [pc, #16]	; (8005d40 <I2C4_WriteReg+0x2c>)
 8005d2e:	f001 fe98 	bl	8007a62 <HAL_I2C_Mem_Write>
 8005d32:	b910      	cbnz	r0, 8005d3a <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 8005d34:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8005d36:	b004      	add	sp, #16
 8005d38:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8005d3a:	f06f 0007 	mvn.w	r0, #7
 8005d3e:	e7fa      	b.n	8005d36 <I2C4_WriteReg+0x22>
 8005d40:	240029bc 	.word	0x240029bc

08005d44 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005d44:	b510      	push	{r4, lr}
 8005d46:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005d48:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005d4c:	9402      	str	r4, [sp, #8]
 8005d4e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8005d52:	9401      	str	r4, [sp, #4]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4613      	mov	r3, r2
 8005d58:	460a      	mov	r2, r1
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	4804      	ldr	r0, [pc, #16]	; (8005d70 <I2C4_ReadReg+0x2c>)
 8005d5e:	f001 ff55 	bl	8007c0c <HAL_I2C_Mem_Read>
 8005d62:	b910      	cbnz	r0, 8005d6a <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8005d64:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8005d66:	b004      	add	sp, #16
 8005d68:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8005d6a:	f06f 0007 	mvn.w	r0, #7
 8005d6e:	e7fa      	b.n	8005d66 <I2C4_ReadReg+0x22>
 8005d70:	240029bc 	.word	0x240029bc

08005d74 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8005d74:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <BSP_I2C4_DeInit+0x28>)
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005d7c:	b10b      	cbz	r3, 8005d82 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8005d7e:	2000      	movs	r0, #0
}
 8005d80:	4770      	bx	lr
{
 8005d82:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8005d84:	4c06      	ldr	r4, [pc, #24]	; (8005da0 <BSP_I2C4_DeInit+0x2c>)
 8005d86:	4620      	mov	r0, r4
 8005d88:	f7ff ffa8 	bl	8005cdc <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f001 fe4f 	bl	8007a30 <HAL_I2C_DeInit>
 8005d92:	b900      	cbnz	r0, 8005d96 <BSP_I2C4_DeInit+0x22>
}
 8005d94:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8005d96:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005d9a:	e7fb      	b.n	8005d94 <BSP_I2C4_DeInit+0x20>
 8005d9c:	24001fb4 	.word	0x24001fb4
 8005da0:	240029bc 	.word	0x240029bc

08005da4 <MX_I2C4_Init>:
{
 8005da4:	b510      	push	{r4, lr}
 8005da6:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8005da8:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005dae:	2201      	movs	r2, #1
 8005db0:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005db2:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8005db4:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005db6:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005db8:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005dba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005dbc:	f001 fdda 	bl	8007974 <HAL_I2C_Init>
 8005dc0:	b108      	cbz	r0, 8005dc6 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8005dc2:	2001      	movs	r0, #1
}
 8005dc4:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f001 fffc 	bl	8007dc6 <HAL_I2CEx_ConfigAnalogFilter>
 8005dce:	b108      	cbz	r0, 8005dd4 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	e7f7      	b.n	8005dc4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f002 f823 	bl	8007e22 <HAL_I2CEx_ConfigDigitalFilter>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d0f1      	beq.n	8005dc4 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8005de0:	2001      	movs	r0, #1
 8005de2:	e7ef      	b.n	8005dc4 <MX_I2C4_Init+0x20>

08005de4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005de4:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <BSP_I2C4_Init+0x48>)
 8005de6:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <BSP_I2C4_Init+0x4c>)
 8005de8:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <BSP_I2C4_Init+0x50>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	b10b      	cbz	r3, 8005df4 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8005df0:	2000      	movs	r0, #0
}
 8005df2:	4770      	bx	lr
{
 8005df4:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 8005df6:	3301      	adds	r3, #1
 8005df8:	4a0e      	ldr	r2, [pc, #56]	; (8005e34 <BSP_I2C4_Init+0x50>)
 8005dfa:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005dfc:	480b      	ldr	r0, [pc, #44]	; (8005e2c <BSP_I2C4_Init+0x48>)
 8005dfe:	f001 ffdd 	bl	8007dbc <HAL_I2C_GetState>
 8005e02:	b108      	cbz	r0, 8005e08 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8005e04:	2000      	movs	r0, #0
}
 8005e06:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 8005e08:	4c08      	ldr	r4, [pc, #32]	; (8005e2c <BSP_I2C4_Init+0x48>)
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff ff0a 	bl	8005c24 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005e10:	f003 fd04 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 8005e14:	4908      	ldr	r1, [pc, #32]	; (8005e38 <BSP_I2C4_Init+0x54>)
 8005e16:	f7ff febf 	bl	8005b98 <I2C_GetTiming>
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f7ff ffc1 	bl	8005da4 <MX_I2C4_Init>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d0ef      	beq.n	8005e06 <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 8005e26:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005e2a:	e7ec      	b.n	8005e06 <BSP_I2C4_Init+0x22>
 8005e2c:	240029bc 	.word	0x240029bc
 8005e30:	58001c00 	.word	0x58001c00
 8005e34:	24001fb4 	.word	0x24001fb4
 8005e38:	000186a0 	.word	0x000186a0

08005e3c <BSP_I2C4_WriteReg>:
{
 8005e3c:	b500      	push	{lr}
 8005e3e:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	4613      	mov	r3, r2
 8005e44:	2201      	movs	r2, #1
 8005e46:	f7ff ff65 	bl	8005d14 <I2C4_WriteReg>
 8005e4a:	b910      	cbnz	r0, 8005e52 <BSP_I2C4_WriteReg+0x16>
}
 8005e4c:	b003      	add	sp, #12
 8005e4e:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005e52:	4805      	ldr	r0, [pc, #20]	; (8005e68 <BSP_I2C4_WriteReg+0x2c>)
 8005e54:	f001 ffb5 	bl	8007dc2 <HAL_I2C_GetError>
 8005e58:	2804      	cmp	r0, #4
 8005e5a:	d002      	beq.n	8005e62 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005e5c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005e60:	e7f4      	b.n	8005e4c <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005e62:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8005e66:	e7f1      	b.n	8005e4c <BSP_I2C4_WriteReg+0x10>
 8005e68:	240029bc 	.word	0x240029bc

08005e6c <BSP_I2C4_ReadReg>:
{
 8005e6c:	b500      	push	{lr}
 8005e6e:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	2201      	movs	r2, #1
 8005e76:	f7ff ff65 	bl	8005d44 <I2C4_ReadReg>
 8005e7a:	b910      	cbnz	r0, 8005e82 <BSP_I2C4_ReadReg+0x16>
}
 8005e7c:	b003      	add	sp, #12
 8005e7e:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005e82:	4805      	ldr	r0, [pc, #20]	; (8005e98 <BSP_I2C4_ReadReg+0x2c>)
 8005e84:	f001 ff9d 	bl	8007dc2 <HAL_I2C_GetError>
 8005e88:	2804      	cmp	r0, #4
 8005e8a:	d002      	beq.n	8005e92 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005e8c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005e90:	e7f4      	b.n	8005e7c <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005e92:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8005e96:	e7f1      	b.n	8005e7c <BSP_I2C4_ReadReg+0x10>
 8005e98:	240029bc 	.word	0x240029bc

08005e9c <BSP_GetTick>:
{
 8005e9c:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8005e9e:	f000 fde7 	bl	8006a70 <HAL_GetTick>
}
 8005ea2:	bd08      	pop	{r3, pc}

08005ea4 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8005ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8005eaa:	4b7e      	ldr	r3, [pc, #504]	; (80060a4 <OSPI_NOR_MspInit+0x200>)
 8005eac:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eb4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8005eb8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005ebc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005ec0:	9201      	str	r2, [sp, #4]
 8005ec2:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8005ec4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eca:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8005ecc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005ece:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ed2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8005ed4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ed8:	f042 0202 	orr.w	r2, r2, #2
 8005edc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005ee0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ee4:	f002 0202 	and.w	r2, r2, #2
 8005ee8:	9202      	str	r2, [sp, #8]
 8005eea:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 8005eec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ef0:	f042 0204 	orr.w	r2, r2, #4
 8005ef4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005ef8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005efc:	f002 0204 	and.w	r2, r2, #4
 8005f00:	9203      	str	r2, [sp, #12]
 8005f02:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8005f04:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f10:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f14:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005f18:	9204      	str	r2, [sp, #16]
 8005f1a:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 8005f1c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f20:	f042 0208 	orr.w	r2, r2, #8
 8005f24:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f28:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f2c:	f002 0208 	and.w	r2, r2, #8
 8005f30:	9205      	str	r2, [sp, #20]
 8005f32:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 8005f34:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f38:	f042 0220 	orr.w	r2, r2, #32
 8005f3c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f40:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f44:	f002 0220 	and.w	r2, r2, #32
 8005f48:	9206      	str	r2, [sp, #24]
 8005f4a:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8005f4c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f50:	f042 0220 	orr.w	r2, r2, #32
 8005f54:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f58:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f5c:	f002 0220 	and.w	r2, r2, #32
 8005f60:	9207      	str	r2, [sp, #28]
 8005f62:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8005f64:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f68:	f042 0220 	orr.w	r2, r2, #32
 8005f6c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f70:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f74:	f002 0220 	and.w	r2, r2, #32
 8005f78:	9208      	str	r2, [sp, #32]
 8005f7a:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8005f7c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f80:	f042 0204 	orr.w	r2, r2, #4
 8005f84:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f88:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f8c:	f002 0204 	and.w	r2, r2, #4
 8005f90:	9209      	str	r2, [sp, #36]	; 0x24
 8005f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8005f94:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f9c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005fa0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005fa4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8005faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8005fac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005fb8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005fbc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005fc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8005fc4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fcc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005fd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	930c      	str	r3, [sp, #48]	; 0x30
 8005fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8005fdc:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8005fe0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005fe4:	f04f 0a02 	mov.w	sl, #2
 8005fe8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8005fec:	2301      	movs	r3, #1
 8005fee:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8005ff4:	240a      	movs	r4, #10
 8005ff6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8005ff8:	a90d      	add	r1, sp, #52	; 0x34
 8005ffa:	482b      	ldr	r0, [pc, #172]	; (80060a8 <OSPI_NOR_MspInit+0x204>)
 8005ffc:	f001 f91c 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8006000:	2320      	movs	r3, #32
 8006002:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8006004:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8006006:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80060bc <OSPI_NOR_MspInit+0x218>
 800600a:	a90d      	add	r1, sp, #52	; 0x34
 800600c:	4648      	mov	r0, r9
 800600e:	f001 f913 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8006012:	2304      	movs	r3, #4
 8006014:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006016:	2300      	movs	r3, #0
 8006018:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800601a:	2509      	movs	r5, #9
 800601c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800601e:	a90d      	add	r1, sp, #52	; 0x34
 8006020:	4822      	ldr	r0, [pc, #136]	; (80060ac <OSPI_NOR_MspInit+0x208>)
 8006022:	f001 f909 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8006026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800602a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800602c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800602e:	a90d      	add	r1, sp, #52	; 0x34
 8006030:	481f      	ldr	r0, [pc, #124]	; (80060b0 <OSPI_NOR_MspInit+0x20c>)
 8006032:	f001 f901 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8006036:	f44f 7800 	mov.w	r8, #512	; 0x200
 800603a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800603e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006040:	4e1c      	ldr	r6, [pc, #112]	; (80060b4 <OSPI_NOR_MspInit+0x210>)
 8006042:	a90d      	add	r1, sp, #52	; 0x34
 8006044:	4630      	mov	r0, r6
 8006046:	f001 f8f7 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800604a:	2780      	movs	r7, #128	; 0x80
 800604c:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800604e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8006050:	a90d      	add	r1, sp, #52	; 0x34
 8006052:	4630      	mov	r0, r6
 8006054:	f001 f8f0 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8006058:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800605c:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800605e:	a90d      	add	r1, sp, #52	; 0x34
 8006060:	4630      	mov	r0, r6
 8006062:	f001 f8e9 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8006066:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800606a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800606c:	a90d      	add	r1, sp, #52	; 0x34
 800606e:	4648      	mov	r0, r9
 8006070:	f001 f8e2 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8006074:	2308      	movs	r3, #8
 8006076:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8006078:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800607a:	a90d      	add	r1, sp, #52	; 0x34
 800607c:	480e      	ldr	r0, [pc, #56]	; (80060b8 <OSPI_NOR_MspInit+0x214>)
 800607e:	f001 f8db 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8006082:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8006086:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8006088:	a90d      	add	r1, sp, #52	; 0x34
 800608a:	4807      	ldr	r0, [pc, #28]	; (80060a8 <OSPI_NOR_MspInit+0x204>)
 800608c:	f001 f8d4 	bl	8007238 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8006090:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8006092:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8006094:	a90d      	add	r1, sp, #52	; 0x34
 8006096:	4806      	ldr	r0, [pc, #24]	; (80060b0 <OSPI_NOR_MspInit+0x20c>)
 8006098:	f001 f8ce 	bl	8007238 <HAL_GPIO_Init>
}
 800609c:	b013      	add	sp, #76	; 0x4c
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	bf00      	nop
 80060a4:	58024400 	.word	0x58024400
 80060a8:	58021800 	.word	0x58021800
 80060ac:	58020400 	.word	0x58020400
 80060b0:	58020c00 	.word	0x58020c00
 80060b4:	58021400 	.word	0x58021400
 80060b8:	58021c00 	.word	0x58021c00
 80060bc:	58020800 	.word	0x58020800

080060c0 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060c4:	4c24      	ldr	r4, [pc, #144]	; (8006158 <OSPI_NOR_ResetMemory+0x98>)
 80060c6:	235c      	movs	r3, #92	; 0x5c
 80060c8:	fb03 4400 	mla	r4, r3, r0, r4
 80060cc:	2200      	movs	r2, #0
 80060ce:	4611      	mov	r1, r2
 80060d0:	4620      	mov	r0, r4
 80060d2:	f7ff fbe7 	bl	80058a4 <MX25LM51245G_ResetEnable>
 80060d6:	bb60      	cbnz	r0, 8006132 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060d8:	2200      	movs	r2, #0
 80060da:	4611      	mov	r1, r2
 80060dc:	4620      	mov	r0, r4
 80060de:	f7ff fc14 	bl	800590a <MX25LM51245G_ResetMemory>
 80060e2:	bb48      	cbnz	r0, 8006138 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060e4:	2200      	movs	r2, #0
 80060e6:	2101      	movs	r1, #1
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff fbdb 	bl	80058a4 <MX25LM51245G_ResetEnable>
 80060ee:	bb30      	cbnz	r0, 800613e <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060f0:	2200      	movs	r2, #0
 80060f2:	2101      	movs	r1, #1
 80060f4:	4620      	mov	r0, r4
 80060f6:	f7ff fc08 	bl	800590a <MX25LM51245G_ResetMemory>
 80060fa:	bb18      	cbnz	r0, 8006144 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80060fc:	2201      	movs	r2, #1
 80060fe:	4611      	mov	r1, r2
 8006100:	4620      	mov	r0, r4
 8006102:	f7ff fbcf 	bl	80058a4 <MX25LM51245G_ResetEnable>
 8006106:	bb00      	cbnz	r0, 800614a <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8006108:	2201      	movs	r2, #1
 800610a:	4611      	mov	r1, r2
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff fbfc 	bl	800590a <MX25LM51245G_ResetMemory>
 8006112:	4604      	mov	r4, r0
 8006114:	b9e0      	cbnz	r0, 8006150 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8006116:	4811      	ldr	r0, [pc, #68]	; (800615c <OSPI_NOR_ResetMemory+0x9c>)
 8006118:	2301      	movs	r3, #1
 800611a:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800611e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8006122:	2300      	movs	r3, #0
 8006124:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8006126:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8006128:	2064      	movs	r0, #100	; 0x64
 800612a:	f000 fca7 	bl	8006a7c <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 800612e:	4620      	mov	r0, r4
 8006130:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006132:	f06f 0404 	mvn.w	r4, #4
 8006136:	e7fa      	b.n	800612e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006138:	f06f 0404 	mvn.w	r4, #4
 800613c:	e7f7      	b.n	800612e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800613e:	f06f 0404 	mvn.w	r4, #4
 8006142:	e7f4      	b.n	800612e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006144:	f06f 0404 	mvn.w	r4, #4
 8006148:	e7f1      	b.n	800612e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800614a:	f06f 0404 	mvn.w	r4, #4
 800614e:	e7ee      	b.n	800612e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006150:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8006154:	e7eb      	b.n	800612e <OSPI_NOR_ResetMemory+0x6e>
 8006156:	bf00      	nop
 8006158:	24002a10 	.word	0x24002a10
 800615c:	24002a08 	.word	0x24002a08

08006160 <OSPI_NOR_MspDeInit>:
{
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8006162:	2104      	movs	r1, #4
 8006164:	4820      	ldr	r0, [pc, #128]	; (80061e8 <OSPI_NOR_MspDeInit+0x88>)
 8006166:	f001 f977 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800616a:	4f20      	ldr	r7, [pc, #128]	; (80061ec <OSPI_NOR_MspDeInit+0x8c>)
 800616c:	2120      	movs	r1, #32
 800616e:	4638      	mov	r0, r7
 8006170:	f001 f972 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8006174:	4e1e      	ldr	r6, [pc, #120]	; (80061f0 <OSPI_NOR_MspDeInit+0x90>)
 8006176:	2140      	movs	r1, #64	; 0x40
 8006178:	4630      	mov	r0, r6
 800617a:	f001 f96d 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800617e:	4d1d      	ldr	r5, [pc, #116]	; (80061f4 <OSPI_NOR_MspDeInit+0x94>)
 8006180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006184:	4628      	mov	r0, r5
 8006186:	f001 f967 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800618a:	4c1b      	ldr	r4, [pc, #108]	; (80061f8 <OSPI_NOR_MspDeInit+0x98>)
 800618c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006190:	4620      	mov	r0, r4
 8006192:	f001 f961 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8006196:	2180      	movs	r1, #128	; 0x80
 8006198:	4620      	mov	r0, r4
 800619a:	f001 f95d 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800619e:	2140      	movs	r1, #64	; 0x40
 80061a0:	4620      	mov	r0, r4
 80061a2:	f001 f959 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 80061a6:	2102      	movs	r1, #2
 80061a8:	4638      	mov	r0, r7
 80061aa:	f001 f955 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 80061ae:	2108      	movs	r1, #8
 80061b0:	4812      	ldr	r0, [pc, #72]	; (80061fc <OSPI_NOR_MspDeInit+0x9c>)
 80061b2:	f001 f951 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 80061b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ba:	4630      	mov	r0, r6
 80061bc:	f001 f94c 	bl	8007458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 80061c0:	2180      	movs	r1, #128	; 0x80
 80061c2:	4628      	mov	r0, r5
 80061c4:	f001 f948 	bl	8007458 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <OSPI_NOR_MspDeInit+0xa0>)
 80061ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80061cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061d0:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 80061d2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80061d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061d8:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 80061da:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80061de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061e2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80061e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e8:	58020400 	.word	0x58020400
 80061ec:	58020800 	.word	0x58020800
 80061f0:	58021800 	.word	0x58021800
 80061f4:	58020c00 	.word	0x58020c00
 80061f8:	58021400 	.word	0x58021400
 80061fc:	58021c00 	.word	0x58021c00
 8006200:	58024400 	.word	0x58024400

08006204 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800620a:	4d2b      	ldr	r5, [pc, #172]	; (80062b8 <OSPI_NOR_ExitOPIMode+0xb4>)
 800620c:	235c      	movs	r3, #92	; 0x5c
 800620e:	fb03 5500 	mla	r5, r3, r0, r5
 8006212:	4b2a      	ldr	r3, [pc, #168]	; (80062bc <OSPI_NOR_ExitOPIMode+0xb8>)
 8006214:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006218:	789a      	ldrb	r2, [r3, #2]
 800621a:	7859      	ldrb	r1, [r3, #1]
 800621c:	4628      	mov	r0, r5
 800621e:	f7ff f9cf 	bl	80055c0 <MX25LM51245G_WriteEnable>
 8006222:	2800      	cmp	r0, #0
 8006224:	d138      	bne.n	8006298 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 800622c:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8006230:	4922      	ldr	r1, [pc, #136]	; (80062bc <OSPI_NOR_ExitOPIMode+0xb8>)
 8006232:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	788a      	ldrb	r2, [r1, #2]
 800623a:	7849      	ldrb	r1, [r1, #1]
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff fa56 	bl	80056ee <MX25LM51245G_WriteCfg2Register>
 8006242:	4606      	mov	r6, r0
 8006244:	bb58      	cbnz	r0, 800629e <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8006246:	2028      	movs	r0, #40	; 0x28
 8006248:	f000 fc18 	bl	8006a7c <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <OSPI_NOR_ExitOPIMode+0xb8>)
 800624e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006252:	789b      	ldrb	r3, [r3, #2]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d014      	beq.n	8006282 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006258:	2200      	movs	r2, #0
 800625a:	4611      	mov	r1, r2
 800625c:	4628      	mov	r0, r5
 800625e:	f7ff f872 	bl	8005346 <MX25LM51245G_AutoPollingMemReady>
 8006262:	b9f8      	cbnz	r0, 80062a4 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	2300      	movs	r3, #0
 800626a:	461a      	mov	r2, r3
 800626c:	4619      	mov	r1, r3
 800626e:	4628      	mov	r0, r5
 8006270:	f7ff faa4 	bl	80057bc <MX25LM51245G_ReadCfg2Register>
 8006274:	b9c8      	cbnz	r0, 80062aa <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8006276:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800627a:	b9cb      	cbnz	r3, 80062b0 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 800627c:	4630      	mov	r0, r6
 800627e:	b004      	add	sp, #16
 8006280:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8006282:	2300      	movs	r3, #0
 8006284:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006286:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006288:	4628      	mov	r0, r5
 800628a:	f002 fc6f 	bl	8008b6c <HAL_OSPI_Init>
 800628e:	2800      	cmp	r0, #0
 8006290:	d0e2      	beq.n	8006258 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006292:	f06f 0603 	mvn.w	r6, #3
 8006296:	e7df      	b.n	8006258 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006298:	f06f 0604 	mvn.w	r6, #4
 800629c:	e7ee      	b.n	800627c <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800629e:	f06f 0604 	mvn.w	r6, #4
 80062a2:	e7eb      	b.n	800627c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062a4:	f06f 0604 	mvn.w	r6, #4
 80062a8:	e7e8      	b.n	800627c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062aa:	f06f 0604 	mvn.w	r6, #4
 80062ae:	e7e5      	b.n	800627c <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80062b0:	f06f 0604 	mvn.w	r6, #4
  return ret;
 80062b4:	e7e2      	b.n	800627c <OSPI_NOR_ExitOPIMode+0x78>
 80062b6:	bf00      	nop
 80062b8:	24002a10 	.word	0x24002a10
 80062bc:	24002a08 	.word	0x24002a08

080062c0 <OSPI_NOR_EnterSOPIMode>:
{
 80062c0:	b530      	push	{r4, r5, lr}
 80062c2:	b085      	sub	sp, #20
 80062c4:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80062c6:	4c2e      	ldr	r4, [pc, #184]	; (8006380 <OSPI_NOR_EnterSOPIMode+0xc0>)
 80062c8:	235c      	movs	r3, #92	; 0x5c
 80062ca:	fb03 4400 	mla	r4, r3, r0, r4
 80062ce:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80062d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80062d4:	789a      	ldrb	r2, [r3, #2]
 80062d6:	7859      	ldrb	r1, [r3, #1]
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff f971 	bl	80055c0 <MX25LM51245G_WriteEnable>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d139      	bne.n	8006356 <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80062e2:	4928      	ldr	r1, [pc, #160]	; (8006384 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80062e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80062e8:	2307      	movs	r3, #7
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80062f0:	788a      	ldrb	r2, [r1, #2]
 80062f2:	7849      	ldrb	r1, [r1, #1]
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff f9fa 	bl	80056ee <MX25LM51245G_WriteCfg2Register>
 80062fa:	bb78      	cbnz	r0, 800635c <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80062fc:	4b21      	ldr	r3, [pc, #132]	; (8006384 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80062fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006302:	789a      	ldrb	r2, [r3, #2]
 8006304:	7859      	ldrb	r1, [r3, #1]
 8006306:	4620      	mov	r0, r4
 8006308:	f7ff f95a 	bl	80055c0 <MX25LM51245G_WriteEnable>
 800630c:	bb48      	cbnz	r0, 8006362 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800630e:	481d      	ldr	r0, [pc, #116]	; (8006384 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8006310:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8006314:	2301      	movs	r3, #1
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	2300      	movs	r3, #0
 800631a:	78aa      	ldrb	r2, [r5, #2]
 800631c:	7869      	ldrb	r1, [r5, #1]
 800631e:	4620      	mov	r0, r4
 8006320:	f7ff f9e5 	bl	80056ee <MX25LM51245G_WriteCfg2Register>
 8006324:	bb00      	cbnz	r0, 8006368 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8006326:	2028      	movs	r0, #40	; 0x28
 8006328:	f000 fba8 	bl	8006a7c <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800632c:	2200      	movs	r2, #0
 800632e:	2101      	movs	r1, #1
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff f808 	bl	8005346 <MX25LM51245G_AutoPollingMemReady>
 8006336:	b9d0      	cbnz	r0, 800636e <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8006338:	ab03      	add	r3, sp, #12
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	461a      	mov	r2, r3
 8006340:	2101      	movs	r1, #1
 8006342:	4620      	mov	r0, r4
 8006344:	f7ff fa3a 	bl	80057bc <MX25LM51245G_ReadCfg2Register>
 8006348:	b9a0      	cbnz	r0, 8006374 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800634a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d113      	bne.n	800637a <OSPI_NOR_EnterSOPIMode+0xba>
}
 8006352:	b005      	add	sp, #20
 8006354:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006356:	f06f 0004 	mvn.w	r0, #4
 800635a:	e7fa      	b.n	8006352 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800635c:	f06f 0004 	mvn.w	r0, #4
 8006360:	e7f7      	b.n	8006352 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006362:	f06f 0004 	mvn.w	r0, #4
 8006366:	e7f4      	b.n	8006352 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006368:	f06f 0004 	mvn.w	r0, #4
 800636c:	e7f1      	b.n	8006352 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800636e:	f06f 0004 	mvn.w	r0, #4
 8006372:	e7ee      	b.n	8006352 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006374:	f06f 0004 	mvn.w	r0, #4
 8006378:	e7eb      	b.n	8006352 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800637a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800637e:	e7e8      	b.n	8006352 <OSPI_NOR_EnterSOPIMode+0x92>
 8006380:	24002a10 	.word	0x24002a10
 8006384:	24002a08 	.word	0x24002a08

08006388 <OSPI_NOR_EnterDOPIMode>:
{
 8006388:	b530      	push	{r4, r5, lr}
 800638a:	b085      	sub	sp, #20
 800638c:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800638e:	4c35      	ldr	r4, [pc, #212]	; (8006464 <OSPI_NOR_EnterDOPIMode+0xdc>)
 8006390:	235c      	movs	r3, #92	; 0x5c
 8006392:	fb03 4400 	mla	r4, r3, r0, r4
 8006396:	4b34      	ldr	r3, [pc, #208]	; (8006468 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8006398:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800639c:	789a      	ldrb	r2, [r3, #2]
 800639e:	7859      	ldrb	r1, [r3, #1]
 80063a0:	4620      	mov	r0, r4
 80063a2:	f7ff f90d 	bl	80055c0 <MX25LM51245G_WriteEnable>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d144      	bne.n	8006434 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80063aa:	492f      	ldr	r1, [pc, #188]	; (8006468 <OSPI_NOR_EnterDOPIMode+0xe0>)
 80063ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80063b0:	2307      	movs	r3, #7
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063b8:	788a      	ldrb	r2, [r1, #2]
 80063ba:	7849      	ldrb	r1, [r1, #1]
 80063bc:	4620      	mov	r0, r4
 80063be:	f7ff f996 	bl	80056ee <MX25LM51245G_WriteCfg2Register>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d139      	bne.n	800643a <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80063c6:	4b28      	ldr	r3, [pc, #160]	; (8006468 <OSPI_NOR_EnterDOPIMode+0xe0>)
 80063c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80063cc:	789a      	ldrb	r2, [r3, #2]
 80063ce:	7859      	ldrb	r1, [r3, #1]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f7ff f8f5 	bl	80055c0 <MX25LM51245G_WriteEnable>
 80063d6:	bb98      	cbnz	r0, 8006440 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 80063d8:	4923      	ldr	r1, [pc, #140]	; (8006468 <OSPI_NOR_EnterDOPIMode+0xe0>)
 80063da:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80063de:	2302      	movs	r3, #2
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	788a      	ldrb	r2, [r1, #2]
 80063e6:	7849      	ldrb	r1, [r1, #1]
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff f980 	bl	80056ee <MX25LM51245G_WriteCfg2Register>
 80063ee:	bb50      	cbnz	r0, 8006446 <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80063f0:	2028      	movs	r0, #40	; 0x28
 80063f2:	f000 fb43 	bl	8006a7c <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80063f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063fa:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80063fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006400:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006402:	4620      	mov	r0, r4
 8006404:	f002 fbb2 	bl	8008b6c <HAL_OSPI_Init>
 8006408:	bb00      	cbnz	r0, 800644c <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800640a:	2201      	movs	r2, #1
 800640c:	4611      	mov	r1, r2
 800640e:	4620      	mov	r0, r4
 8006410:	f7fe ff99 	bl	8005346 <MX25LM51245G_AutoPollingMemReady>
 8006414:	b9e8      	cbnz	r0, 8006452 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	2201      	movs	r2, #1
 800641e:	4611      	mov	r1, r2
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff f9cb 	bl	80057bc <MX25LM51245G_ReadCfg2Register>
 8006426:	b9b8      	cbnz	r0, 8006458 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8006428:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d116      	bne.n	800645e <OSPI_NOR_EnterDOPIMode+0xd6>
}
 8006430:	b005      	add	sp, #20
 8006432:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006434:	f06f 0004 	mvn.w	r0, #4
 8006438:	e7fa      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800643a:	f06f 0004 	mvn.w	r0, #4
 800643e:	e7f7      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006440:	f06f 0004 	mvn.w	r0, #4
 8006444:	e7f4      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006446:	f06f 0004 	mvn.w	r0, #4
 800644a:	e7f1      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800644c:	f06f 0003 	mvn.w	r0, #3
 8006450:	e7ee      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006452:	f06f 0004 	mvn.w	r0, #4
 8006456:	e7eb      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006458:	f06f 0004 	mvn.w	r0, #4
 800645c:	e7e8      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800645e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8006462:	e7e5      	b.n	8006430 <OSPI_NOR_EnterDOPIMode+0xa8>
 8006464:	24002a10 	.word	0x24002a10
 8006468:	24002a08 	.word	0x24002a08

0800646c <MX_OSPI_NOR_Init>:
{
 800646c:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <MX_OSPI_NOR_Init+0x4c>)
 8006470:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 8006472:	2304      	movs	r3, #4
 8006474:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8006476:	2300      	movs	r3, #0
 8006478:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800647a:	680a      	ldr	r2, [r1, #0]
 800647c:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800647e:	2202      	movs	r2, #2
 8006480:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8006482:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8006484:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8006486:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006488:	684a      	ldr	r2, [r1, #4]
 800648a:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800648c:	688a      	ldr	r2, [r1, #8]
 800648e:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8006490:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8006492:	2308      	movs	r3, #8
 8006494:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8006496:	68cb      	ldr	r3, [r1, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d005      	beq.n	80064a8 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800649c:	2300      	movs	r3, #0
 800649e:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80064a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 80064a2:	f002 fb63 	bl	8008b6c <HAL_OSPI_Init>
}
 80064a6:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80064a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064ac:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80064ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80064b4:	e7f5      	b.n	80064a2 <MX_OSPI_NOR_Init+0x36>
 80064b6:	bf00      	nop
 80064b8:	52005000 	.word	0x52005000

080064bc <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80064bc:	bb38      	cbnz	r0, 800650e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 80064be:	b510      	push	{r4, lr}
 80064c0:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80064c2:	4b17      	ldr	r3, [pc, #92]	; (8006520 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80064c4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80064c8:	789b      	ldrb	r3, [r3, #2]
 80064ca:	b983      	cbnz	r3, 80064ee <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80064cc:	4b14      	ldr	r3, [pc, #80]	; (8006520 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80064ce:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80064d2:	2201      	movs	r2, #1
 80064d4:	7859      	ldrb	r1, [r3, #1]
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80064d8:	205c      	movs	r0, #92	; 0x5c
 80064da:	fb00 3004 	mla	r0, r0, r4, r3
 80064de:	f7fe ffb1 	bl	8005444 <MX25LM51245G_EnableMemoryMappedModeSTR>
 80064e2:	b9b8      	cbnz	r0, 8006514 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80064e6:	2202      	movs	r2, #2
 80064e8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 80064ec:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80064f0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80064f4:	7859      	ldrb	r1, [r3, #1]
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80064f8:	205c      	movs	r0, #92	; 0x5c
 80064fa:	fb00 3004 	mla	r0, r0, r4, r3
 80064fe:	f7ff f80d 	bl	800551c <MX25LM51245G_EnableMemoryMappedModeDTR>
 8006502:	b950      	cbnz	r0, 800651a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8006506:	2202      	movs	r2, #2
 8006508:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 800650c:	e7ee      	b.n	80064ec <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 800650e:	f06f 0001 	mvn.w	r0, #1
}
 8006512:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006514:	f06f 0004 	mvn.w	r0, #4
 8006518:	e7e8      	b.n	80064ec <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800651a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800651e:	e7e5      	b.n	80064ec <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 8006520:	24002a08 	.word	0x24002a08
 8006524:	24002a10 	.word	0x24002a10

08006528 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006528:	b990      	cbnz	r0, 8006550 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 800652a:	b510      	push	{r4, lr}
 800652c:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800652e:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8006530:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d10e      	bne.n	8006556 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 800653a:	205c      	movs	r0, #92	; 0x5c
 800653c:	fb00 3004 	mla	r0, r0, r4, r3
 8006540:	f002 facc 	bl	8008adc <HAL_OSPI_Abort>
 8006544:	b950      	cbnz	r0, 800655c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006546:	4b07      	ldr	r3, [pc, #28]	; (8006564 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8006548:	2201      	movs	r2, #1
 800654a:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800654e:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006550:	f06f 0001 	mvn.w	r0, #1
}
 8006554:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8006556:	f06f 001a 	mvn.w	r0, #26
 800655a:	e7f8      	b.n	800654e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 800655c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006560:	e7f5      	b.n	800654e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 8006562:	bf00      	nop
 8006564:	24002a08 	.word	0x24002a08
 8006568:	24002a10 	.word	0x24002a10

0800656c <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800656c:	bb08      	cbnz	r0, 80065b2 <BSP_OSPI_NOR_DeInit+0x46>
{
 800656e:	b510      	push	{r4, lr}
 8006570:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006572:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <BSP_OSPI_NOR_DeInit+0x54>)
 8006574:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d013      	beq.n	80065a4 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <BSP_OSPI_NOR_DeInit+0x54>)
 800657e:	2200      	movs	r2, #0
 8006580:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8006584:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006588:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800658a:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <BSP_OSPI_NOR_DeInit+0x58>)
 800658e:	225c      	movs	r2, #92	; 0x5c
 8006590:	fb02 3404 	mla	r4, r2, r4, r3
 8006594:	4620      	mov	r0, r4
 8006596:	f7ff fde3 	bl	8006160 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800659a:	4620      	mov	r0, r4
 800659c:	f001 ffec 	bl	8008578 <HAL_OSPI_DeInit>
 80065a0:	b950      	cbnz	r0, 80065b8 <BSP_OSPI_NOR_DeInit+0x4c>
}
 80065a2:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 80065a4:	f7ff ffc0 	bl	8006528 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d0e7      	beq.n	800657c <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80065ac:	f06f 0004 	mvn.w	r0, #4
 80065b0:	e7f7      	b.n	80065a2 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 80065b2:	f06f 0001 	mvn.w	r0, #1
}
 80065b6:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 80065b8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80065bc:	e7f1      	b.n	80065a2 <BSP_OSPI_NOR_DeInit+0x36>
 80065be:	bf00      	nop
 80065c0:	24002a08 	.word	0x24002a08
 80065c4:	24002a10 	.word	0x24002a10

080065c8 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d141      	bne.n	8006650 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	460d      	mov	r5, r1
 80065d0:	4616      	mov	r6, r2
 80065d2:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80065d4:	4b21      	ldr	r3, [pc, #132]	; (800665c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80065d6:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d03b      	beq.n	8006656 <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 80065de:	4b1f      	ldr	r3, [pc, #124]	; (800665c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80065e0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d00b      	beq.n	8006602 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80065ea:	2901      	cmp	r1, #1
 80065ec:	d025      	beq.n	800663a <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 80065ee:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80065f0:	4b1a      	ldr	r3, [pc, #104]	; (800665c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80065f8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80065fc:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80065fe:	70a6      	strb	r6, [r4, #2]
}
 8006600:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8006602:	2901      	cmp	r1, #1
 8006604:	d105      	bne.n	8006612 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 8006606:	4b15      	ldr	r3, [pc, #84]	; (800665c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8006608:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800660c:	789b      	ldrb	r3, [r3, #2]
 800660e:	4293      	cmp	r3, r2
 8006610:	d01c      	beq.n	800664c <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff fdf6 	bl	8006204 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8006618:	2800      	cmp	r0, #0
 800661a:	bf08      	it	eq
 800661c:	2d01      	cmpeq	r5, #1
 800661e:	d10f      	bne.n	8006640 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8006622:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006626:	789b      	ldrb	r3, [r3, #2]
 8006628:	b91b      	cbnz	r3, 8006632 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff feac 	bl	8006388 <OSPI_NOR_EnterDOPIMode>
 8006630:	e006      	b.n	8006640 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006632:	4620      	mov	r0, r4
 8006634:	f7ff fe44 	bl	80062c0 <OSPI_NOR_EnterSOPIMode>
 8006638:	e002      	b.n	8006640 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800663a:	b922      	cbnz	r2, 8006646 <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800663c:	f7ff fe40 	bl	80062c0 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 8006640:	2800      	cmp	r0, #0
 8006642:	d1dd      	bne.n	8006600 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8006644:	e7d4      	b.n	80065f0 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8006646:	f7ff fe9f 	bl	8006388 <OSPI_NOR_EnterDOPIMode>
 800664a:	e7f9      	b.n	8006640 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 800664c:	2000      	movs	r0, #0
 800664e:	e7cf      	b.n	80065f0 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 8006650:	f06f 0001 	mvn.w	r0, #1
}
 8006654:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8006656:	f06f 0019 	mvn.w	r0, #25
  return ret;
 800665a:	e7d1      	b.n	8006600 <BSP_OSPI_NOR_ConfigFlash+0x38>
 800665c:	24002a08 	.word	0x24002a08

08006660 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006660:	2800      	cmp	r0, #0
 8006662:	d13f      	bne.n	80066e4 <BSP_OSPI_NOR_Init+0x84>
{
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	b08e      	sub	sp, #56	; 0x38
 8006668:	460d      	mov	r5, r1
 800666a:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800666c:	4b23      	ldr	r3, [pc, #140]	; (80066fc <BSP_OSPI_NOR_Init+0x9c>)
 800666e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8006672:	b113      	cbz	r3, 800667a <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006674:	2000      	movs	r0, #0
}
 8006676:	b00e      	add	sp, #56	; 0x38
 8006678:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800667a:	4e21      	ldr	r6, [pc, #132]	; (8006700 <BSP_OSPI_NOR_Init+0xa0>)
 800667c:	235c      	movs	r3, #92	; 0x5c
 800667e:	fb03 6600 	mla	r6, r3, r0, r6
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff fc0e 	bl	8005ea4 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8006688:	a805      	add	r0, sp, #20
 800668a:	f7fe fe43 	bl	8005314 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 800668e:	2303      	movs	r3, #3
 8006690:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006692:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006694:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006698:	b313      	cbz	r3, 80066e0 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800669a:	fab3 f383 	clz	r3, r3
 800669e:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 80066a4:	786b      	ldrb	r3, [r5, #1]
 80066a6:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 80066a8:	a901      	add	r1, sp, #4
 80066aa:	4630      	mov	r0, r6
 80066ac:	f7ff fede 	bl	800646c <MX_OSPI_NOR_Init>
 80066b0:	b9d8      	cbnz	r0, 80066ea <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff fd04 	bl	80060c0 <OSPI_NOR_ResetMemory>
 80066b8:	b9d0      	cbnz	r0, 80066f0 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80066ba:	4b10      	ldr	r3, [pc, #64]	; (80066fc <BSP_OSPI_NOR_Init+0x9c>)
 80066bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066c0:	789a      	ldrb	r2, [r3, #2]
 80066c2:	7859      	ldrb	r1, [r3, #1]
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7fe fe3e 	bl	8005346 <MX25LM51245G_AutoPollingMemReady>
 80066ca:	b9a0      	cbnz	r0, 80066f6 <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80066cc:	786a      	ldrb	r2, [r5, #1]
 80066ce:	7829      	ldrb	r1, [r5, #0]
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7ff ff79 	bl	80065c8 <BSP_OSPI_NOR_ConfigFlash>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d0cd      	beq.n	8006676 <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80066da:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80066de:	e7ca      	b.n	8006676 <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 80066e0:	2320      	movs	r3, #32
 80066e2:	e7dc      	b.n	800669e <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 80066e4:	f06f 0001 	mvn.w	r0, #1
}
 80066e8:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 80066ea:	f06f 0003 	mvn.w	r0, #3
 80066ee:	e7c2      	b.n	8006676 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80066f0:	f06f 0004 	mvn.w	r0, #4
 80066f4:	e7bf      	b.n	8006676 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80066f6:	f06f 0004 	mvn.w	r0, #4
 80066fa:	e7bc      	b.n	8006676 <BSP_OSPI_NOR_Init+0x16>
 80066fc:	24002a08 	.word	0x24002a08
 8006700:	24002a10 	.word	0x24002a10

08006704 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8006704:	b510      	push	{r4, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800670e:	2370      	movs	r3, #112	; 0x70
 8006710:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 8006714:	4b17      	ldr	r3, [pc, #92]	; (8006774 <FT5336_Probe+0x70>)
 8006716:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006718:	4b17      	ldr	r3, [pc, #92]	; (8006778 <FT5336_Probe+0x74>)
 800671a:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800671c:	4b17      	ldr	r3, [pc, #92]	; (800677c <FT5336_Probe+0x78>)
 800671e:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006720:	4b17      	ldr	r3, [pc, #92]	; (8006780 <FT5336_Probe+0x7c>)
 8006722:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8006724:	4b17      	ldr	r3, [pc, #92]	; (8006784 <FT5336_Probe+0x80>)
 8006726:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006728:	a902      	add	r1, sp, #8
 800672a:	4817      	ldr	r0, [pc, #92]	; (8006788 <FT5336_Probe+0x84>)
 800672c:	f7fe fd50 	bl	80051d0 <FT5336_RegisterBusIO>
 8006730:	b998      	cbnz	r0, 800675a <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8006732:	a901      	add	r1, sp, #4
 8006734:	4814      	ldr	r0, [pc, #80]	; (8006788 <FT5336_Probe+0x84>)
 8006736:	f7fe fc8d 	bl	8005054 <FT5336_ReadID>
 800673a:	b988      	cbnz	r0, 8006760 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	2b51      	cmp	r3, #81	; 0x51
 8006740:	d111      	bne.n	8006766 <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8006742:	4811      	ldr	r0, [pc, #68]	; (8006788 <FT5336_Probe+0x84>)
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <FT5336_Probe+0x88>)
 8006746:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <FT5336_Probe+0x8c>)
 800674c:	4a11      	ldr	r2, [pc, #68]	; (8006794 <FT5336_Probe+0x90>)
 800674e:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4798      	blx	r3
 8006754:	b950      	cbnz	r0, 800676c <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8006756:	b008      	add	sp, #32
 8006758:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 800675a:	f06f 0007 	mvn.w	r0, #7
 800675e:	e7fa      	b.n	8006756 <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006760:	f06f 0004 	mvn.w	r0, #4
 8006764:	e7f7      	b.n	8006756 <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006766:	f06f 0006 	mvn.w	r0, #6
 800676a:	e7f4      	b.n	8006756 <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800676c:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8006770:	e7f1      	b.n	8006756 <FT5336_Probe+0x52>
 8006772:	bf00      	nop
 8006774:	08005de5 	.word	0x08005de5
 8006778:	08005d75 	.word	0x08005d75
 800677c:	08005e6d 	.word	0x08005e6d
 8006780:	08005e3d 	.word	0x08005e3d
 8006784:	08005e9d 	.word	0x08005e9d
 8006788:	24002a6c 	.word	0x24002a6c
 800678c:	24002a94 	.word	0x24002a94
 8006790:	24000010 	.word	0x24000010
 8006794:	24002ab8 	.word	0x24002ab8

08006798 <BSP_TS_Init>:
{
 8006798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800679a:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800679c:	2800      	cmp	r0, #0
 800679e:	d150      	bne.n	8006842 <BSP_TS_Init+0xaa>
 80067a0:	460c      	mov	r4, r1
 80067a2:	4605      	mov	r5, r0
 80067a4:	680b      	ldr	r3, [r1, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d04e      	beq.n	8006848 <BSP_TS_Init+0xb0>
 80067aa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80067ae:	d84e      	bhi.n	800684e <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80067b0:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	d04e      	beq.n	8006854 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80067b6:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 80067ba:	d84e      	bhi.n	800685a <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80067bc:	68c9      	ldr	r1, [r1, #12]
 80067be:	4293      	cmp	r3, r2
 80067c0:	bf28      	it	cs
 80067c2:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80067c4:	4299      	cmp	r1, r3
 80067c6:	d84b      	bhi.n	8006860 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80067c8:	f7ff ff9c 	bl	8006704 <FT5336_Probe>
 80067cc:	4606      	mov	r6, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d149      	bne.n	8006866 <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	4925      	ldr	r1, [pc, #148]	; (800686c <BSP_TS_Init+0xd4>)
 80067d6:	016a      	lsls	r2, r5, #5
 80067d8:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 80067dc:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80067de:	6862      	ldr	r2, [r4, #4]
 80067e0:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80067e2:	68a2      	ldr	r2, [r4, #8]
 80067e4:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80067e6:	68e2      	ldr	r2, [r4, #12]
 80067e8:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80067ea:	4b21      	ldr	r3, [pc, #132]	; (8006870 <BSP_TS_Init+0xd8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	a901      	add	r1, sp, #4
 80067f2:	4a20      	ldr	r2, [pc, #128]	; (8006874 <BSP_TS_Init+0xdc>)
 80067f4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80067f8:	4798      	blx	r3
 80067fa:	2800      	cmp	r0, #0
 80067fc:	db1e      	blt.n	800683c <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80067fe:	4b1b      	ldr	r3, [pc, #108]	; (800686c <BSP_TS_Init+0xd4>)
 8006800:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8006804:	9a02      	ldr	r2, [sp, #8]
 8006806:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006808:	9a03      	ldr	r2, [sp, #12]
 800680a:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800680c:	462b      	mov	r3, r5
 800680e:	b113      	cbz	r3, 8006816 <BSP_TS_Init+0x7e>
}
 8006810:	4630      	mov	r0, r6
 8006812:	b005      	add	sp, #20
 8006814:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	68e1      	ldr	r1, [r4, #12]
 800681a:	440a      	add	r2, r1
 800681c:	3201      	adds	r2, #1
 800681e:	4913      	ldr	r1, [pc, #76]	; (800686c <BSP_TS_Init+0xd4>)
 8006820:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 8006824:	3006      	adds	r0, #6
 8006826:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800682a:	6862      	ldr	r2, [r4, #4]
 800682c:	68e7      	ldr	r7, [r4, #12]
 800682e:	443a      	add	r2, r7
 8006830:	3201      	adds	r2, #1
 8006832:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006836:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8006838:	3301      	adds	r3, #1
 800683a:	e7e8      	b.n	800680e <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800683c:	f06f 0604 	mvn.w	r6, #4
 8006840:	e7e6      	b.n	8006810 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 8006842:	f06f 0601 	mvn.w	r6, #1
 8006846:	e7e3      	b.n	8006810 <BSP_TS_Init+0x78>
 8006848:	f06f 0601 	mvn.w	r6, #1
 800684c:	e7e0      	b.n	8006810 <BSP_TS_Init+0x78>
 800684e:	f06f 0601 	mvn.w	r6, #1
 8006852:	e7dd      	b.n	8006810 <BSP_TS_Init+0x78>
 8006854:	f06f 0601 	mvn.w	r6, #1
 8006858:	e7da      	b.n	8006810 <BSP_TS_Init+0x78>
 800685a:	f06f 0601 	mvn.w	r6, #1
 800685e:	e7d7      	b.n	8006810 <BSP_TS_Init+0x78>
 8006860:	f06f 0601 	mvn.w	r6, #1
 8006864:	e7d4      	b.n	8006810 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 8006866:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 800686a:	e7d1      	b.n	8006810 <BSP_TS_Init+0x78>
 800686c:	24002a98 	.word	0x24002a98
 8006870:	24002ab8 	.word	0x24002ab8
 8006874:	24002a94 	.word	0x24002a94

08006878 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 8006878:	2800      	cmp	r0, #0
 800687a:	d178      	bne.n	800696e <BSP_TS_GetState+0xf6>
{
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	460c      	mov	r4, r1
 8006882:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <BSP_TS_GetState+0xfc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	a901      	add	r1, sp, #4
 800688c:	4a3a      	ldr	r2, [pc, #232]	; (8006978 <BSP_TS_GetState+0x100>)
 800688e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006892:	4798      	blx	r3
 8006894:	2800      	cmp	r0, #0
 8006896:	db66      	blt.n	8006966 <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 8006898:	9e01      	ldr	r6, [sp, #4]
 800689a:	2e00      	cmp	r6, #0
 800689c:	d059      	beq.n	8006952 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800689e:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 80068a0:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80068a2:	4b36      	ldr	r3, [pc, #216]	; (800697c <BSP_TS_GetState+0x104>)
 80068a4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80068a8:	6899      	ldr	r1, [r3, #8]
 80068aa:	f011 0f08 	tst.w	r1, #8
 80068ae:	d141      	bne.n	8006934 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 80068b0:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 80068b2:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80068b4:	f011 0f02 	tst.w	r1, #2
 80068b8:	d005      	beq.n	80068c6 <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80068ba:	4b30      	ldr	r3, [pc, #192]	; (800697c <BSP_TS_GetState+0x104>)
 80068bc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80068c6:	f011 0f04 	tst.w	r1, #4
 80068ca:	d005      	beq.n	80068d8 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80068cc:	4a2b      	ldr	r2, [pc, #172]	; (800697c <BSP_TS_GetState+0x104>)
 80068ce:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 80068d2:	6952      	ldr	r2, [r2, #20]
 80068d4:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80068d8:	4a28      	ldr	r2, [pc, #160]	; (800697c <BSP_TS_GetState+0x104>)
 80068da:	0168      	lsls	r0, r5, #5
 80068dc:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 80068e0:	5810      	ldr	r0, [r2, r0]
 80068e2:	fb00 f303 	mul.w	r3, r0, r3
 80068e6:	690a      	ldr	r2, [r1, #16]
 80068e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ec:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80068ee:	684a      	ldr	r2, [r1, #4]
 80068f0:	fb0c f202 	mul.w	r2, ip, r2
 80068f4:	6948      	ldr	r0, [r1, #20]
 80068f6:	fbb2 f2f0 	udiv	r2, r2, r0
 80068fa:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 80068fc:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80068fe:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006900:	4283      	cmp	r3, r0
 8006902:	d91a      	bls.n	800693a <BSP_TS_GetState+0xc2>
 8006904:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006906:	491d      	ldr	r1, [pc, #116]	; (800697c <BSP_TS_GetState+0x104>)
 8006908:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800690c:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800690e:	428a      	cmp	r2, r1
 8006910:	d915      	bls.n	800693e <BSP_TS_GetState+0xc6>
 8006912:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006914:	4919      	ldr	r1, [pc, #100]	; (800697c <BSP_TS_GetState+0x104>)
 8006916:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800691a:	68c9      	ldr	r1, [r1, #12]
 800691c:	42b1      	cmp	r1, r6
 800691e:	d301      	bcc.n	8006924 <BSP_TS_GetState+0xac>
 8006920:	4291      	cmp	r1, r2
 8006922:	d20e      	bcs.n	8006942 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006924:	4a15      	ldr	r2, [pc, #84]	; (800697c <BSP_TS_GetState+0x104>)
 8006926:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800692a:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800692c:	68a3      	ldr	r3, [r4, #8]
 800692e:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 8006930:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006932:	e01a      	b.n	800696a <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 8006934:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 8006936:	4603      	mov	r3, r0
 8006938:	e7bc      	b.n	80068b4 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800693a:	1ac6      	subs	r6, r0, r3
 800693c:	e7e3      	b.n	8006906 <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800693e:	1a8a      	subs	r2, r1, r2
 8006940:	e7e8      	b.n	8006914 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006942:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006944:	4b0d      	ldr	r3, [pc, #52]	; (800697c <BSP_TS_GetState+0x104>)
 8006946:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800694a:	69eb      	ldr	r3, [r5, #28]
 800694c:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800694e:	2000      	movs	r0, #0
 8006950:	e00b      	b.n	800696a <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 8006952:	2000      	movs	r0, #0
 8006954:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <BSP_TS_GetState+0x104>)
 8006958:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800695c:	69ab      	ldr	r3, [r5, #24]
 800695e:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006960:	69eb      	ldr	r3, [r5, #28]
 8006962:	60a3      	str	r3, [r4, #8]
 8006964:	e001      	b.n	800696a <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006966:	f06f 0004 	mvn.w	r0, #4
}
 800696a:	b004      	add	sp, #16
 800696c:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800696e:	f06f 0001 	mvn.w	r0, #1
}
 8006972:	4770      	bx	lr
 8006974:	24002ab8 	.word	0x24002ab8
 8006978:	24002a94 	.word	0x24002a94
 800697c:	24002a98 	.word	0x24002a98

08006980 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <SystemInit+0x64>)
 8006982:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800698a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800698e:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <SystemInit+0x68>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006998:	2200      	movs	r2, #0
 800699a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	4913      	ldr	r1, [pc, #76]	; (80069ec <SystemInit+0x6c>)
 80069a0:	4001      	ands	r1, r0
 80069a2:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80069a4:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80069a6:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80069a8:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80069b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80069b4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80069ba:	6819      	ldr	r1, [r3, #0]
 80069bc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80069c0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80069c2:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <SystemInit+0x70>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <SystemInit+0x74>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d0:	d203      	bcs.n	80069da <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <SystemInit+0x78>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069da:	4b02      	ldr	r3, [pc, #8]	; (80069e4 <SystemInit+0x64>)
 80069dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80069e2:	4770      	bx	lr
 80069e4:	e000ed00 	.word	0xe000ed00
 80069e8:	58024400 	.word	0x58024400
 80069ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80069f0:	5c001000 	.word	0x5c001000
 80069f4:	ffff0000 	.word	0xffff0000
 80069f8:	51008000 	.word	0x51008000

080069fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069fc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069fe:	2003      	movs	r0, #3
 8006a00:	f000 f850 	bl	8006aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006a04:	f002 fc92 	bl	800932c <HAL_RCC_GetSysClockFreq>
 8006a08:	490f      	ldr	r1, [pc, #60]	; (8006a48 <HAL_Init+0x4c>)
 8006a0a:	698b      	ldr	r3, [r1, #24]
 8006a0c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006a10:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <HAL_Init+0x50>)
 8006a12:	5cd3      	ldrb	r3, [r2, r3]
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a1a:	698b      	ldr	r3, [r1, #24]
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	5cd3      	ldrb	r3, [r2, r3]
 8006a22:	f003 031f 	and.w	r3, r3, #31
 8006a26:	fa20 f303 	lsr.w	r3, r0, r3
 8006a2a:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <HAL_Init+0x54>)
 8006a2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <HAL_Init+0x58>)
 8006a30:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a32:	2001      	movs	r0, #1
 8006a34:	f7fb ff94 	bl	8002960 <HAL_InitTick>
 8006a38:	b110      	cbz	r0, 8006a40 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8006a3a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	bd10      	pop	{r4, pc}
 8006a40:	4604      	mov	r4, r0
  HAL_MspInit();
 8006a42:	f7fb fd41 	bl	80024c8 <HAL_MspInit>
  return HAL_OK;
 8006a46:	e7f9      	b.n	8006a3c <HAL_Init+0x40>
 8006a48:	58024400 	.word	0x58024400
 8006a4c:	0801ed84 	.word	0x0801ed84
 8006a50:	24000044 	.word	0x24000044
 8006a54:	24000040 	.word	0x24000040

08006a58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <HAL_IncTick+0x10>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4a03      	ldr	r2, [pc, #12]	; (8006a6c <HAL_IncTick+0x14>)
 8006a5e:	6811      	ldr	r1, [r2, #0]
 8006a60:	440b      	add	r3, r1
 8006a62:	6013      	str	r3, [r2, #0]
}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	24000048 	.word	0x24000048
 8006a6c:	24002abc 	.word	0x24002abc

08006a70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006a70:	4b01      	ldr	r3, [pc, #4]	; (8006a78 <HAL_GetTick+0x8>)
 8006a72:	6818      	ldr	r0, [r3, #0]
}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	24002abc 	.word	0x24002abc

08006a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006a80:	f7ff fff6 	bl	8006a70 <HAL_GetTick>
 8006a84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a86:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a8a:	d002      	beq.n	8006a92 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <HAL_Delay+0x24>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a92:	f7ff ffed 	bl	8006a70 <HAL_GetTick>
 8006a96:	1b40      	subs	r0, r0, r5
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d3fa      	bcc.n	8006a92 <HAL_Delay+0x16>
  {
  }
}
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	24000048 	.word	0x24000048

08006aa4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aa4:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8006aa6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aa8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ab0:	0200      	lsls	r0, r0, #8
 8006ab2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ab6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006ab8:	4a02      	ldr	r2, [pc, #8]	; (8006ac4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006aba:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8006abc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006abe:	4770      	bx	lr
 8006ac0:	e000ed00 	.word	0xe000ed00
 8006ac4:	05fa0000 	.word	0x05fa0000

08006ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ac8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006aca:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <HAL_NVIC_SetPriority+0x60>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ad2:	f1c3 0c07 	rsb	ip, r3, #7
 8006ad6:	f1bc 0f04 	cmp.w	ip, #4
 8006ada:	bf28      	it	cs
 8006adc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ae0:	f103 0e04 	add.w	lr, r3, #4
 8006ae4:	f1be 0f06 	cmp.w	lr, #6
 8006ae8:	d914      	bls.n	8006b14 <HAL_NVIC_SetPriority+0x4c>
 8006aea:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aec:	f04f 3eff 	mov.w	lr, #4294967295
 8006af0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006af4:	ea21 010c 	bic.w	r1, r1, ip
 8006af8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006afa:	fa0e f303 	lsl.w	r3, lr, r3
 8006afe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b02:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006b04:	2800      	cmp	r0, #0
 8006b06:	db07      	blt.n	8006b18 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b08:	0109      	lsls	r1, r1, #4
 8006b0a:	b2c9      	uxtb	r1, r1
 8006b0c:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <HAL_NVIC_SetPriority+0x64>)
 8006b0e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006b10:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b14:	2300      	movs	r3, #0
 8006b16:	e7e9      	b.n	8006aec <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b18:	f000 000f 	and.w	r0, r0, #15
 8006b1c:	0109      	lsls	r1, r1, #4
 8006b1e:	b2c9      	uxtb	r1, r1
 8006b20:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <HAL_NVIC_SetPriority+0x68>)
 8006b22:	5419      	strb	r1, [r3, r0]
 8006b24:	e7f4      	b.n	8006b10 <HAL_NVIC_SetPriority+0x48>
 8006b26:	bf00      	nop
 8006b28:	e000ed00 	.word	0xe000ed00
 8006b2c:	e000e400 	.word	0xe000e400
 8006b30:	e000ed14 	.word	0xe000ed14

08006b34 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006b34:	2800      	cmp	r0, #0
 8006b36:	db07      	blt.n	8006b48 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b38:	f000 021f 	and.w	r2, r0, #31
 8006b3c:	0940      	lsrs	r0, r0, #5
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4093      	lsls	r3, r2
 8006b42:	4a02      	ldr	r2, [pc, #8]	; (8006b4c <HAL_NVIC_EnableIRQ+0x18>)
 8006b44:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	e000e100 	.word	0xe000e100

08006b50 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006b50:	2800      	cmp	r0, #0
 8006b52:	db0c      	blt.n	8006b6e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b54:	f000 021f 	and.w	r2, r0, #31
 8006b58:	0940      	lsrs	r0, r0, #5
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4093      	lsls	r3, r2
 8006b5e:	3020      	adds	r0, #32
 8006b60:	4a03      	ldr	r2, [pc, #12]	; (8006b70 <HAL_NVIC_DisableIRQ+0x20>)
 8006b62:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006b6a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006b6e:	4770      	bx	lr
 8006b70:	e000e100 	.word	0xe000e100

08006b74 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006b74:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <HAL_MPU_Disable+0x18>)
 8006b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	e000ed00 	.word	0xe000ed00

08006b90 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006b90:	f040 0001 	orr.w	r0, r0, #1
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_MPU_Enable+0x1c>)
 8006b96:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006ba2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006ba6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006baa:	4770      	bx	lr
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006bb0:	7842      	ldrb	r2, [r0, #1]
 8006bb2:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <HAL_MPU_ConfigRegion+0x5c>)
 8006bb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8006bb8:	7803      	ldrb	r3, [r0, #0]
 8006bba:	b1fb      	cbz	r3, 8006bfc <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006bbc:	6843      	ldr	r3, [r0, #4]
 8006bbe:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <HAL_MPU_ConfigRegion+0x5c>)
 8006bc0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006bc4:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006bc6:	7ac3      	ldrb	r3, [r0, #11]
 8006bc8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006bca:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006bce:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006bd0:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006bd4:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006bd6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006bda:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006bdc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006be0:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006be6:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006be8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006bec:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006bee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006bf2:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006bf4:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006bf6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8006bfa:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8006bfc:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <HAL_MPU_ConfigRegion+0x5c>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8006c04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d038      	beq.n	8006c86 <HAL_CRC_Init+0x76>
{
 8006c14:	b510      	push	{r4, lr}
 8006c16:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006c18:	7f43      	ldrb	r3, [r0, #29]
 8006c1a:	b31b      	cbz	r3, 8006c64 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006c20:	7923      	ldrb	r3, [r4, #4]
 8006c22:	bb1b      	cbnz	r3, 8006c6c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <HAL_CRC_Init+0x7c>)
 8006c28:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	6893      	ldr	r3, [r2, #8]
 8006c2e:	f023 0318 	bic.w	r3, r3, #24
 8006c32:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006c34:	7963      	ldrb	r3, [r4, #5]
 8006c36:	bb13      	cbnz	r3, 8006c7e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006c40:	6822      	ldr	r2, [r4, #0]
 8006c42:	6893      	ldr	r3, [r2, #8]
 8006c44:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006c48:	6961      	ldr	r1, [r4, #20]
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	6893      	ldr	r3, [r2, #8]
 8006c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c56:	69a1      	ldr	r1, [r4, #24]
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8006c60:	2000      	movs	r0, #0
}
 8006c62:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8006c64:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006c66:	f7fb fc49 	bl	80024fc <HAL_CRC_MspInit>
 8006c6a:	e7d7      	b.n	8006c1c <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c6c:	68e2      	ldr	r2, [r4, #12]
 8006c6e:	68a1      	ldr	r1, [r4, #8]
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f80d 	bl	8006c90 <HAL_CRCEx_Polynomial_Set>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d0dc      	beq.n	8006c34 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	e7f1      	b.n	8006c62 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	6922      	ldr	r2, [r4, #16]
 8006c82:	611a      	str	r2, [r3, #16]
 8006c84:	e7dc      	b.n	8006c40 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8006c86:	2001      	movs	r0, #1
}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	04c11db7 	.word	0x04c11db7

08006c90 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c90:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006c92:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006c94:	461c      	mov	r4, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b134      	cbz	r4, 8006ca8 <HAL_CRCEx_Polynomial_Set+0x18>
 8006c9a:	f003 0c1f 	and.w	ip, r3, #31
 8006c9e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8006ca2:	f01c 0f01 	tst.w	ip, #1
 8006ca6:	d0f5      	beq.n	8006c94 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8006ca8:	2a18      	cmp	r2, #24
 8006caa:	d822      	bhi.n	8006cf2 <HAL_CRCEx_Polynomial_Set+0x62>
 8006cac:	e8df f002 	tbb	[pc, r2]
 8006cb0:	2121210f 	.word	0x2121210f
 8006cb4:	21212121 	.word	0x21212121
 8006cb8:	2121211d 	.word	0x2121211d
 8006cbc:	21212121 	.word	0x21212121
 8006cc0:	21212119 	.word	0x21212119
 8006cc4:	21212121 	.word	0x21212121
 8006cc8:	0d          	.byte	0x0d
 8006cc9:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006cca:	2b06      	cmp	r3, #6
 8006ccc:	d815      	bhi.n	8006cfa <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006cce:	6803      	ldr	r3, [r0, #0]
 8006cd0:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006cd2:	6801      	ldr	r1, [r0, #0]
 8006cd4:	688b      	ldr	r3, [r1, #8]
 8006cd6:	f023 0318 	bic.w	r3, r3, #24
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	608a      	str	r2, [r1, #8]
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e008      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8006ce2:	2b07      	cmp	r3, #7
 8006ce4:	d9f3      	bls.n	8006cce <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	e004      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d9ef      	bls.n	8006cce <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e000      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8006cf2:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8006cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf8:	4770      	bx	lr
        status =   HAL_ERROR;
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	e7fa      	b.n	8006cf4 <HAL_CRCEx_Polynomial_Set+0x64>
	...

08006d00 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f000 8129 	beq.w	8006f58 <HAL_DMA_Abort_IT+0x258>
{
 8006d06:	b508      	push	{r3, lr}
 8006d08:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d0a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d003      	beq.n	8006d1c <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006d18:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8006d1a:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d1c:	6803      	ldr	r3, [r0, #0]
 8006d1e:	4890      	ldr	r0, [pc, #576]	; (8006f60 <HAL_DMA_Abort_IT+0x260>)
 8006d20:	4990      	ldr	r1, [pc, #576]	; (8006f64 <HAL_DMA_Abort_IT+0x264>)
 8006d22:	428b      	cmp	r3, r1
 8006d24:	bf18      	it	ne
 8006d26:	4283      	cmpne	r3, r0
 8006d28:	bf0c      	ite	eq
 8006d2a:	2101      	moveq	r1, #1
 8006d2c:	2100      	movne	r1, #0
 8006d2e:	d066      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d30:	3030      	adds	r0, #48	; 0x30
 8006d32:	4283      	cmp	r3, r0
 8006d34:	d063      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d36:	3018      	adds	r0, #24
 8006d38:	4283      	cmp	r3, r0
 8006d3a:	d060      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d3c:	3018      	adds	r0, #24
 8006d3e:	4283      	cmp	r3, r0
 8006d40:	d05d      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d42:	3018      	adds	r0, #24
 8006d44:	4283      	cmp	r3, r0
 8006d46:	d05a      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d48:	3018      	adds	r0, #24
 8006d4a:	4283      	cmp	r3, r0
 8006d4c:	d057      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d4e:	3018      	adds	r0, #24
 8006d50:	4283      	cmp	r3, r0
 8006d52:	d054      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d54:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8006d58:	4283      	cmp	r3, r0
 8006d5a:	d050      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d5c:	3018      	adds	r0, #24
 8006d5e:	4283      	cmp	r3, r0
 8006d60:	d04d      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d62:	3018      	adds	r0, #24
 8006d64:	4283      	cmp	r3, r0
 8006d66:	d04a      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d68:	3018      	adds	r0, #24
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	d047      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d6e:	3018      	adds	r0, #24
 8006d70:	4283      	cmp	r3, r0
 8006d72:	d044      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d74:	3018      	adds	r0, #24
 8006d76:	4283      	cmp	r3, r0
 8006d78:	d041      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d7a:	3018      	adds	r0, #24
 8006d7c:	4283      	cmp	r3, r0
 8006d7e:	d03e      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
 8006d80:	3018      	adds	r0, #24
 8006d82:	4283      	cmp	r3, r0
 8006d84:	d03b      	beq.n	8006dfe <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d86:	6819      	ldr	r1, [r3, #0]
 8006d88:	f021 010e 	bic.w	r1, r1, #14
 8006d8c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8006d94:	4973      	ldr	r1, [pc, #460]	; (8006f64 <HAL_DMA_Abort_IT+0x264>)
 8006d96:	428b      	cmp	r3, r1
 8006d98:	bf18      	it	ne
 8006d9a:	4283      	cmpne	r3, r0
 8006d9c:	d06a      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006d9e:	4972      	ldr	r1, [pc, #456]	; (8006f68 <HAL_DMA_Abort_IT+0x268>)
 8006da0:	428b      	cmp	r3, r1
 8006da2:	d067      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006da4:	3118      	adds	r1, #24
 8006da6:	428b      	cmp	r3, r1
 8006da8:	d064      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006daa:	3118      	adds	r1, #24
 8006dac:	428b      	cmp	r3, r1
 8006dae:	d061      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006db0:	3118      	adds	r1, #24
 8006db2:	428b      	cmp	r3, r1
 8006db4:	d05e      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006db6:	3118      	adds	r1, #24
 8006db8:	428b      	cmp	r3, r1
 8006dba:	d05b      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006dbc:	3118      	adds	r1, #24
 8006dbe:	428b      	cmp	r3, r1
 8006dc0:	d058      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006dc2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006dc6:	428b      	cmp	r3, r1
 8006dc8:	d054      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006dca:	3118      	adds	r1, #24
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	d051      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006dd0:	3118      	adds	r1, #24
 8006dd2:	428b      	cmp	r3, r1
 8006dd4:	d04e      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006dd6:	3118      	adds	r1, #24
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	d04b      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006ddc:	3118      	adds	r1, #24
 8006dde:	428b      	cmp	r3, r1
 8006de0:	d048      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006de2:	3118      	adds	r1, #24
 8006de4:	428b      	cmp	r3, r1
 8006de6:	d045      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006de8:	3118      	adds	r1, #24
 8006dea:	428b      	cmp	r3, r1
 8006dec:	d042      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006dee:	3118      	adds	r1, #24
 8006df0:	428b      	cmp	r3, r1
 8006df2:	d03f      	beq.n	8006e74 <HAL_DMA_Abort_IT+0x174>
 8006df4:	6819      	ldr	r1, [r3, #0]
 8006df6:	f021 0101 	bic.w	r1, r1, #1
 8006dfa:	6019      	str	r1, [r3, #0]
 8006dfc:	e03e      	b.n	8006e7c <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006dfe:	2004      	movs	r0, #4
 8006e00:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006e04:	bb81      	cbnz	r1, 8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e06:	4a58      	ldr	r2, [pc, #352]	; (8006f68 <HAL_DMA_Abort_IT+0x268>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d02d      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e0c:	3218      	adds	r2, #24
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02a      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e12:	3218      	adds	r2, #24
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d027      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e18:	3218      	adds	r2, #24
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d024      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e1e:	3218      	adds	r2, #24
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d021      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e24:	3218      	adds	r2, #24
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01e      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e2a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01a      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e32:	3218      	adds	r2, #24
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d017      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e38:	3218      	adds	r2, #24
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d014      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e3e:	3218      	adds	r2, #24
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d011      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e44:	3218      	adds	r2, #24
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00e      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e4a:	3218      	adds	r2, #24
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e50:	3218      	adds	r2, #24
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d008      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e56:	3218      	adds	r2, #24
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d005      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x168>
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f022 0201 	bic.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e64:	2000      	movs	r0, #0
 8006e66:	e758      	b.n	8006d1a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e70:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8006e72:	e752      	b.n	8006d1a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	f021 0101 	bic.w	r1, r1, #1
 8006e7a:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e7c:	6813      	ldr	r3, [r2, #0]
 8006e7e:	4838      	ldr	r0, [pc, #224]	; (8006f60 <HAL_DMA_Abort_IT+0x260>)
 8006e80:	4938      	ldr	r1, [pc, #224]	; (8006f64 <HAL_DMA_Abort_IT+0x264>)
 8006e82:	428b      	cmp	r3, r1
 8006e84:	bf18      	it	ne
 8006e86:	4283      	cmpne	r3, r0
 8006e88:	d042      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006e8a:	3118      	adds	r1, #24
 8006e8c:	428b      	cmp	r3, r1
 8006e8e:	d03f      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006e90:	3118      	adds	r1, #24
 8006e92:	428b      	cmp	r3, r1
 8006e94:	d03c      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006e96:	3118      	adds	r1, #24
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	d039      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006e9c:	3118      	adds	r1, #24
 8006e9e:	428b      	cmp	r3, r1
 8006ea0:	d036      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ea2:	3118      	adds	r1, #24
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	d033      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ea8:	3118      	adds	r1, #24
 8006eaa:	428b      	cmp	r3, r1
 8006eac:	d030      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006eae:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006eb2:	428b      	cmp	r3, r1
 8006eb4:	d02c      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006eb6:	3118      	adds	r1, #24
 8006eb8:	428b      	cmp	r3, r1
 8006eba:	d029      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ebc:	3118      	adds	r1, #24
 8006ebe:	428b      	cmp	r3, r1
 8006ec0:	d026      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ec2:	3118      	adds	r1, #24
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	d023      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ec8:	3118      	adds	r1, #24
 8006eca:	428b      	cmp	r3, r1
 8006ecc:	d020      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ece:	3118      	adds	r1, #24
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	d01d      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ed4:	3118      	adds	r1, #24
 8006ed6:	428b      	cmp	r3, r1
 8006ed8:	d01a      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006eda:	3118      	adds	r1, #24
 8006edc:	428b      	cmp	r3, r1
 8006ede:	d017      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ee0:	4922      	ldr	r1, [pc, #136]	; (8006f6c <HAL_DMA_Abort_IT+0x26c>)
 8006ee2:	428b      	cmp	r3, r1
 8006ee4:	d014      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ee6:	3114      	adds	r1, #20
 8006ee8:	428b      	cmp	r3, r1
 8006eea:	d011      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006eec:	3114      	adds	r1, #20
 8006eee:	428b      	cmp	r3, r1
 8006ef0:	d00e      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ef2:	3114      	adds	r1, #20
 8006ef4:	428b      	cmp	r3, r1
 8006ef6:	d00b      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006ef8:	3114      	adds	r1, #20
 8006efa:	428b      	cmp	r3, r1
 8006efc:	d008      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006efe:	3114      	adds	r1, #20
 8006f00:	428b      	cmp	r3, r1
 8006f02:	d005      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006f04:	3114      	adds	r1, #20
 8006f06:	428b      	cmp	r3, r1
 8006f08:	d002      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x210>
 8006f0a:	3114      	adds	r1, #20
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	d117      	bne.n	8006f40 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f10:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8006f12:	680b      	ldr	r3, [r1, #0]
 8006f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f18:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f1a:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f1c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006f1e:	f003 011f 	and.w	r1, r3, #31
 8006f22:	2301      	movs	r3, #1
 8006f24:	408b      	lsls	r3, r1
 8006f26:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f28:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006f2a:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8006f2c:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006f2e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8006f30:	b133      	cbz	r3, 8006f40 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006f38:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f3a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006f3c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8006f3e:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8006f46:	2300      	movs	r3, #0
 8006f48:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8006f4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006f4e:	b12b      	cbz	r3, 8006f5c <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
  return HAL_OK;
 8006f54:	2000      	movs	r0, #0
 8006f56:	e6e0      	b.n	8006d1a <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8006f58:	2001      	movs	r0, #1
}
 8006f5a:	4770      	bx	lr
  return HAL_OK;
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e6dc      	b.n	8006d1a <HAL_DMA_Abort_IT+0x1a>
 8006f60:	40020010 	.word	0x40020010
 8006f64:	40020028 	.word	0x40020028
 8006f68:	40020040 	.word	0x40020040
 8006f6c:	58025408 	.word	0x58025408

08006f70 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d037      	beq.n	8006fe4 <HAL_DMA2D_Init+0x74>
{
 8006f74:	b510      	push	{r4, lr}
 8006f76:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006f78:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d02c      	beq.n	8006fda <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f80:	2302      	movs	r3, #2
 8006f82:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006f86:	6821      	ldr	r1, [r4, #0]
 8006f88:	680a      	ldr	r2, [r1, #0]
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <HAL_DMA2D_Init+0x78>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	69e0      	ldr	r0, [r4, #28]
 8006f92:	4302      	orrs	r2, r0
 8006f94:	4313      	orrs	r3, r2
 8006f96:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006f98:	6821      	ldr	r1, [r4, #0]
 8006f9a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006f9c:	4b13      	ldr	r3, [pc, #76]	; (8006fec <HAL_DMA2D_Init+0x7c>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	68a2      	ldr	r2, [r4, #8]
 8006fa2:	69a0      	ldr	r0, [r4, #24]
 8006fa4:	4302      	orrs	r2, r0
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8006fae:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <HAL_DMA2D_Init+0x80>)
 8006fb0:	400b      	ands	r3, r1
 8006fb2:	68e1      	ldr	r1, [r4, #12]
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006fb8:	6821      	ldr	r1, [r4, #0]
 8006fba:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006fbc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fc0:	6920      	ldr	r0, [r4, #16]
 8006fc2:	6962      	ldr	r2, [r4, #20]
 8006fc4:	0552      	lsls	r2, r2, #21
 8006fc6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006fce:	2000      	movs	r0, #0
 8006fd0:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8006fd8:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8006fda:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8006fde:	f7fb faa7 	bl	8002530 <HAL_DMA2D_MspInit>
 8006fe2:	e7cd      	b.n	8006f80 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8006fe4:	2001      	movs	r0, #1
}
 8006fe6:	4770      	bx	lr
 8006fe8:	fff8ffbf 	.word	0xfff8ffbf
 8006fec:	fffffef8 	.word	0xfffffef8
 8006ff0:	ffff0000 	.word	0xffff0000

08006ff4 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_DMA2D_IRQHandler>:
{
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006ffc:	6803      	ldr	r3, [r0, #0]
 8006ffe:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007000:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007002:	f015 0f01 	tst.w	r5, #1
 8007006:	d016      	beq.n	8007036 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007008:	f416 7f80 	tst.w	r6, #256	; 0x100
 800700c:	d013      	beq.n	8007036 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007014:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007016:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800701e:	6803      	ldr	r3, [r0, #0]
 8007020:	2201      	movs	r2, #1
 8007022:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007024:	2304      	movs	r3, #4
 8007026:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800702a:	2300      	movs	r3, #0
 800702c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007032:	b103      	cbz	r3, 8007036 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8007034:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007036:	f015 0f20 	tst.w	r5, #32
 800703a:	d018      	beq.n	800706e <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800703c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8007040:	d015      	beq.n	800706e <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	6813      	ldr	r3, [r2, #0]
 8007046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800704a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	2220      	movs	r2, #32
 8007050:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007054:	f043 0302 	orr.w	r3, r3, #2
 8007058:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800705a:	2304      	movs	r3, #4
 800705c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8007060:	2300      	movs	r3, #0
 8007062:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007068:	b10b      	cbz	r3, 800706e <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800706a:	4620      	mov	r0, r4
 800706c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800706e:	f015 0f08 	tst.w	r5, #8
 8007072:	d018      	beq.n	80070a6 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007074:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8007078:	d015      	beq.n	80070a6 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	6813      	ldr	r3, [r2, #0]
 800707e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007082:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	2208      	movs	r2, #8
 8007088:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800708a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800708c:	f043 0304 	orr.w	r3, r3, #4
 8007090:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007092:	2304      	movs	r3, #4
 8007094:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8007098:	2300      	movs	r3, #0
 800709a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800709e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070a0:	b10b      	cbz	r3, 80070a6 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 80070a2:	4620      	mov	r0, r4
 80070a4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80070a6:	f015 0f04 	tst.w	r5, #4
 80070aa:	d002      	beq.n	80070b2 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80070ac:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80070b0:	d120      	bne.n	80070f4 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80070b2:	f015 0f02 	tst.w	r5, #2
 80070b6:	d016      	beq.n	80070e6 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80070b8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80070bc:	d013      	beq.n	80070e6 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80070be:	6822      	ldr	r2, [r4, #0]
 80070c0:	6813      	ldr	r3, [r2, #0]
 80070c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	2202      	movs	r2, #2
 80070cc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80070ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070d0:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80070d8:	2300      	movs	r3, #0
 80070da:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80070de:	6a23      	ldr	r3, [r4, #32]
 80070e0:	b10b      	cbz	r3, 80070e6 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80070e2:	4620      	mov	r0, r4
 80070e4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80070e6:	f015 0f10 	tst.w	r5, #16
 80070ea:	d002      	beq.n	80070f2 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80070ec:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80070f0:	d10c      	bne.n	800710c <HAL_DMA2D_IRQHandler+0x114>
}
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fc:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	2204      	movs	r2, #4
 8007102:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007104:	4620      	mov	r0, r4
 8007106:	f7ff ff75 	bl	8006ff4 <HAL_DMA2D_LineEventCallback>
 800710a:	e7d2      	b.n	80070b2 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	6813      	ldr	r3, [r2, #0]
 8007110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007114:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	2210      	movs	r2, #16
 800711a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800711c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800711e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007120:	2301      	movs	r3, #1
 8007122:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8007126:	2300      	movs	r3, #0
 8007128:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff ff62 	bl	8006ff6 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007132:	e7de      	b.n	80070f2 <HAL_DMA2D_IRQHandler+0xfa>

08007134 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007134:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8007138:	2b01      	cmp	r3, #1
 800713a:	d074      	beq.n	8007226 <HAL_DMA2D_ConfigLayer+0xf2>
{
 800713c:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800713e:	2301      	movs	r3, #1
 8007140:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007144:	2302      	movs	r3, #2
 8007146:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800714a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800714e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007152:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007154:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007156:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800715a:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800715c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007160:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007162:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007166:	f1a4 0209 	sub.w	r2, r4, #9
 800716a:	2a01      	cmp	r2, #1
 800716c:	d921      	bls.n	80071b2 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800716e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8007172:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007176:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007178:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800717c:	bb61      	cbnz	r1, 80071d8 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800717e:	6804      	ldr	r4, [r0, #0]
 8007180:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007182:	4a2a      	ldr	r2, [pc, #168]	; (800722c <HAL_DMA2D_ConfigLayer+0xf8>)
 8007184:	402a      	ands	r2, r5
 8007186:	4313      	orrs	r3, r2
 8007188:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800718a:	6802      	ldr	r2, [r0, #0]
 800718c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007190:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007194:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007196:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	3b09      	subs	r3, #9
 800719c:	2b01      	cmp	r3, #1
 800719e:	d911      	bls.n	80071c4 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80071a6:	2300      	movs	r3, #0
 80071a8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 80071ac:	4618      	mov	r0, r3
}
 80071ae:	bc30      	pop	{r4, r5}
 80071b0:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80071b2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80071b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80071ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071bc:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80071c0:	4313      	orrs	r3, r2
 80071c2:	e7db      	b.n	800717c <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80071c4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80071c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071cc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80071ce:	6802      	ldr	r2, [r0, #0]
 80071d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071d4:	6293      	str	r3, [r2, #40]	; 0x28
 80071d6:	e7e3      	b.n	80071a0 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80071d8:	2c0b      	cmp	r4, #11
 80071da:	d01b      	beq.n	8007214 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80071dc:	4d14      	ldr	r5, [pc, #80]	; (8007230 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80071de:	6804      	ldr	r4, [r0, #0]
 80071e0:	69e2      	ldr	r2, [r4, #28]
 80071e2:	ea22 0205 	bic.w	r2, r2, r5
 80071e6:	4313      	orrs	r3, r2
 80071e8:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80071ea:	6802      	ldr	r2, [r0, #0]
 80071ec:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80071f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80071f4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80071f6:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	3b09      	subs	r3, #9
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d8cf      	bhi.n	80071a0 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007200:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007204:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007208:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800720a:	6802      	ldr	r2, [r0, #0]
 800720c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007210:	6213      	str	r3, [r2, #32]
 8007212:	e7c5      	b.n	80071a0 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007214:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8007218:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800721c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800721e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007222:	4d04      	ldr	r5, [pc, #16]	; (8007234 <HAL_DMA2D_ConfigLayer+0x100>)
 8007224:	e7db      	b.n	80071de <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 8007226:	2002      	movs	r0, #2
}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	00ccfff0 	.word	0x00ccfff0
 8007230:	ff33000f 	.word	0xff33000f
 8007234:	ff3f000f 	.word	0xff3f000f

08007238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800723c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800723e:	e06b      	b.n	8007318 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007240:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007242:	005e      	lsls	r6, r3, #1
 8007244:	2403      	movs	r4, #3
 8007246:	40b4      	lsls	r4, r6
 8007248:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800724c:	68cc      	ldr	r4, [r1, #12]
 800724e:	40b4      	lsls	r4, r6
 8007250:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8007252:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007254:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007256:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800725a:	684c      	ldr	r4, [r1, #4]
 800725c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8007260:	409c      	lsls	r4, r3
 8007262:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8007266:	6044      	str	r4, [r0, #4]
 8007268:	e068      	b.n	800733c <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800726a:	08dd      	lsrs	r5, r3, #3
 800726c:	3508      	adds	r5, #8
 800726e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007272:	f003 0407 	and.w	r4, r3, #7
 8007276:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800727a:	240f      	movs	r4, #15
 800727c:	fa04 f40c 	lsl.w	r4, r4, ip
 8007280:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007284:	690c      	ldr	r4, [r1, #16]
 8007286:	fa04 f40c 	lsl.w	r4, r4, ip
 800728a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800728e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8007292:	e06b      	b.n	800736c <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007294:	2409      	movs	r4, #9
 8007296:	e000      	b.n	800729a <HAL_GPIO_Init+0x62>
 8007298:	2400      	movs	r4, #0
 800729a:	fa04 f40e 	lsl.w	r4, r4, lr
 800729e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072a0:	f10c 0c02 	add.w	ip, ip, #2
 80072a4:	4d69      	ldr	r5, [pc, #420]	; (800744c <HAL_GPIO_Init+0x214>)
 80072a6:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072aa:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80072ae:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80072b0:	43d4      	mvns	r4, r2
 80072b2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072b6:	684f      	ldr	r7, [r1, #4]
 80072b8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80072bc:	d001      	beq.n	80072c2 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80072be:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80072c2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80072c6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80072c8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80072ca:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072ce:	684f      	ldr	r7, [r1, #4]
 80072d0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80072d4:	d001      	beq.n	80072da <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 80072d6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80072da:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80072de:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80072e0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 80072e4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072e8:	684f      	ldr	r7, [r1, #4]
 80072ea:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80072ee:	d001      	beq.n	80072f4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80072f0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80072f4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80072f8:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80072fc:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8007300:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007302:	684e      	ldr	r6, [r1, #4]
 8007304:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8007308:	d001      	beq.n	800730e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800730a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800730e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007312:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8007316:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007318:	680a      	ldr	r2, [r1, #0]
 800731a:	fa32 f403 	lsrs.w	r4, r2, r3
 800731e:	f000 8092 	beq.w	8007446 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007322:	f04f 0c01 	mov.w	ip, #1
 8007326:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800732a:	ea1c 0202 	ands.w	r2, ip, r2
 800732e:	d0f2      	beq.n	8007316 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007330:	684c      	ldr	r4, [r1, #4]
 8007332:	f004 0403 	and.w	r4, r4, #3
 8007336:	3c01      	subs	r4, #1
 8007338:	2c01      	cmp	r4, #1
 800733a:	d981      	bls.n	8007240 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800733c:	684c      	ldr	r4, [r1, #4]
 800733e:	f004 0403 	and.w	r4, r4, #3
 8007342:	2c03      	cmp	r4, #3
 8007344:	d00c      	beq.n	8007360 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8007346:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007348:	005d      	lsls	r5, r3, #1
 800734a:	f04f 0c03 	mov.w	ip, #3
 800734e:	fa0c fc05 	lsl.w	ip, ip, r5
 8007352:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007356:	688c      	ldr	r4, [r1, #8]
 8007358:	40ac      	lsls	r4, r5
 800735a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800735e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007360:	684c      	ldr	r4, [r1, #4]
 8007362:	f004 0403 	and.w	r4, r4, #3
 8007366:	2c02      	cmp	r4, #2
 8007368:	f43f af7f 	beq.w	800726a <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800736c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800736e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8007372:	f04f 0c03 	mov.w	ip, #3
 8007376:	fa0c fc0e 	lsl.w	ip, ip, lr
 800737a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800737e:	684c      	ldr	r4, [r1, #4]
 8007380:	f004 0403 	and.w	r4, r4, #3
 8007384:	fa04 f40e 	lsl.w	r4, r4, lr
 8007388:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800738c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800738e:	684c      	ldr	r4, [r1, #4]
 8007390:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8007394:	d0bf      	beq.n	8007316 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007396:	4c2e      	ldr	r4, [pc, #184]	; (8007450 <HAL_GPIO_Init+0x218>)
 8007398:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 800739c:	f045 0502 	orr.w	r5, r5, #2
 80073a0:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 80073a4:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 80073a8:	f004 0402 	and.w	r4, r4, #2
 80073ac:	9401      	str	r4, [sp, #4]
 80073ae:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80073b0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80073b4:	f10c 0502 	add.w	r5, ip, #2
 80073b8:	4c24      	ldr	r4, [pc, #144]	; (800744c <HAL_GPIO_Init+0x214>)
 80073ba:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073be:	f003 0403 	and.w	r4, r3, #3
 80073c2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80073c6:	240f      	movs	r4, #15
 80073c8:	fa04 f40e 	lsl.w	r4, r4, lr
 80073cc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073d0:	4c20      	ldr	r4, [pc, #128]	; (8007454 <HAL_GPIO_Init+0x21c>)
 80073d2:	42a0      	cmp	r0, r4
 80073d4:	f43f af60 	beq.w	8007298 <HAL_GPIO_Init+0x60>
 80073d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073dc:	42a0      	cmp	r0, r4
 80073de:	d022      	beq.n	8007426 <HAL_GPIO_Init+0x1ee>
 80073e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073e4:	42a0      	cmp	r0, r4
 80073e6:	d020      	beq.n	800742a <HAL_GPIO_Init+0x1f2>
 80073e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073ec:	42a0      	cmp	r0, r4
 80073ee:	d01e      	beq.n	800742e <HAL_GPIO_Init+0x1f6>
 80073f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073f4:	42a0      	cmp	r0, r4
 80073f6:	d01c      	beq.n	8007432 <HAL_GPIO_Init+0x1fa>
 80073f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073fc:	42a0      	cmp	r0, r4
 80073fe:	d01a      	beq.n	8007436 <HAL_GPIO_Init+0x1fe>
 8007400:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007404:	42a0      	cmp	r0, r4
 8007406:	d018      	beq.n	800743a <HAL_GPIO_Init+0x202>
 8007408:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800740c:	42a0      	cmp	r0, r4
 800740e:	d016      	beq.n	800743e <HAL_GPIO_Init+0x206>
 8007410:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007414:	42a0      	cmp	r0, r4
 8007416:	d014      	beq.n	8007442 <HAL_GPIO_Init+0x20a>
 8007418:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800741c:	42a0      	cmp	r0, r4
 800741e:	f43f af39 	beq.w	8007294 <HAL_GPIO_Init+0x5c>
 8007422:	240a      	movs	r4, #10
 8007424:	e739      	b.n	800729a <HAL_GPIO_Init+0x62>
 8007426:	2401      	movs	r4, #1
 8007428:	e737      	b.n	800729a <HAL_GPIO_Init+0x62>
 800742a:	2402      	movs	r4, #2
 800742c:	e735      	b.n	800729a <HAL_GPIO_Init+0x62>
 800742e:	2403      	movs	r4, #3
 8007430:	e733      	b.n	800729a <HAL_GPIO_Init+0x62>
 8007432:	2404      	movs	r4, #4
 8007434:	e731      	b.n	800729a <HAL_GPIO_Init+0x62>
 8007436:	2405      	movs	r4, #5
 8007438:	e72f      	b.n	800729a <HAL_GPIO_Init+0x62>
 800743a:	2406      	movs	r4, #6
 800743c:	e72d      	b.n	800729a <HAL_GPIO_Init+0x62>
 800743e:	2407      	movs	r4, #7
 8007440:	e72b      	b.n	800729a <HAL_GPIO_Init+0x62>
 8007442:	2408      	movs	r4, #8
 8007444:	e729      	b.n	800729a <HAL_GPIO_Init+0x62>
  }
}
 8007446:	b003      	add	sp, #12
 8007448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744a:	bf00      	nop
 800744c:	58000400 	.word	0x58000400
 8007450:	58024400 	.word	0x58024400
 8007454:	58020000 	.word	0x58020000

08007458 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8007458:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800745a:	fa31 f203 	lsrs.w	r2, r1, r3
 800745e:	f000 809d 	beq.w	800759c <HAL_GPIO_DeInit+0x144>
{
 8007462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007464:	e02e      	b.n	80074c4 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007466:	2509      	movs	r5, #9
 8007468:	e000      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 800746a:	2500      	movs	r5, #0
 800746c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007470:	45a4      	cmp	ip, r4
 8007472:	d072      	beq.n	800755a <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007474:	6804      	ldr	r4, [r0, #0]
 8007476:	005d      	lsls	r5, r3, #1
 8007478:	f04f 0c03 	mov.w	ip, #3
 800747c:	fa0c fc05 	lsl.w	ip, ip, r5
 8007480:	ea44 040c 	orr.w	r4, r4, ip
 8007484:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007486:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800748a:	f10e 0e08 	add.w	lr, lr, #8
 800748e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8007492:	f003 0507 	and.w	r5, r3, #7
 8007496:	00ae      	lsls	r6, r5, #2
 8007498:	250f      	movs	r5, #15
 800749a:	40b5      	lsls	r5, r6
 800749c:	ea24 0405 	bic.w	r4, r4, r5
 80074a0:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074a4:	68c4      	ldr	r4, [r0, #12]
 80074a6:	ea24 040c 	bic.w	r4, r4, ip
 80074aa:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80074ac:	6844      	ldr	r4, [r0, #4]
 80074ae:	ea24 0202 	bic.w	r2, r4, r2
 80074b2:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074b4:	6882      	ldr	r2, [r0, #8]
 80074b6:	ea22 020c 	bic.w	r2, r2, ip
 80074ba:	6082      	str	r2, [r0, #8]
    }

    position++;
 80074bc:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 80074be:	fa31 f203 	lsrs.w	r2, r1, r3
 80074c2:	d06a      	beq.n	800759a <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 80074c4:	2201      	movs	r2, #1
 80074c6:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80074c8:	ea12 0e01 	ands.w	lr, r2, r1
 80074cc:	d0f6      	beq.n	80074bc <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80074ce:	089e      	lsrs	r6, r3, #2
 80074d0:	1cb5      	adds	r5, r6, #2
 80074d2:	4c33      	ldr	r4, [pc, #204]	; (80075a0 <HAL_GPIO_DeInit+0x148>)
 80074d4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80074d8:	f003 0c03 	and.w	ip, r3, #3
 80074dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80074e0:	250f      	movs	r5, #15
 80074e2:	fa05 f70c 	lsl.w	r7, r5, ip
 80074e6:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80074e8:	4d2e      	ldr	r5, [pc, #184]	; (80075a4 <HAL_GPIO_DeInit+0x14c>)
 80074ea:	42a8      	cmp	r0, r5
 80074ec:	d0bd      	beq.n	800746a <HAL_GPIO_DeInit+0x12>
 80074ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074f2:	42a8      	cmp	r0, r5
 80074f4:	d021      	beq.n	800753a <HAL_GPIO_DeInit+0xe2>
 80074f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074fa:	42a8      	cmp	r0, r5
 80074fc:	d01f      	beq.n	800753e <HAL_GPIO_DeInit+0xe6>
 80074fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007502:	42a8      	cmp	r0, r5
 8007504:	d01d      	beq.n	8007542 <HAL_GPIO_DeInit+0xea>
 8007506:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800750a:	42a8      	cmp	r0, r5
 800750c:	d01b      	beq.n	8007546 <HAL_GPIO_DeInit+0xee>
 800750e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007512:	42a8      	cmp	r0, r5
 8007514:	d019      	beq.n	800754a <HAL_GPIO_DeInit+0xf2>
 8007516:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800751a:	42a8      	cmp	r0, r5
 800751c:	d017      	beq.n	800754e <HAL_GPIO_DeInit+0xf6>
 800751e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007522:	42a8      	cmp	r0, r5
 8007524:	d015      	beq.n	8007552 <HAL_GPIO_DeInit+0xfa>
 8007526:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800752a:	42a8      	cmp	r0, r5
 800752c:	d013      	beq.n	8007556 <HAL_GPIO_DeInit+0xfe>
 800752e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007532:	42a8      	cmp	r0, r5
 8007534:	d097      	beq.n	8007466 <HAL_GPIO_DeInit+0xe>
 8007536:	250a      	movs	r5, #10
 8007538:	e798      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 800753a:	2501      	movs	r5, #1
 800753c:	e796      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 800753e:	2502      	movs	r5, #2
 8007540:	e794      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 8007542:	2503      	movs	r5, #3
 8007544:	e792      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 8007546:	2504      	movs	r5, #4
 8007548:	e790      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 800754a:	2505      	movs	r5, #5
 800754c:	e78e      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 800754e:	2506      	movs	r5, #6
 8007550:	e78c      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 8007552:	2507      	movs	r5, #7
 8007554:	e78a      	b.n	800746c <HAL_GPIO_DeInit+0x14>
 8007556:	2508      	movs	r5, #8
 8007558:	e788      	b.n	800746c <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800755a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800755e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8007562:	ea25 050e 	bic.w	r5, r5, lr
 8007566:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800756a:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800756e:	ea25 050e 	bic.w	r5, r5, lr
 8007572:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007576:	6865      	ldr	r5, [r4, #4]
 8007578:	ea25 050e 	bic.w	r5, r5, lr
 800757c:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	ea25 050e 	bic.w	r5, r5, lr
 8007584:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007586:	f8df c018 	ldr.w	ip, [pc, #24]	; 80075a0 <HAL_GPIO_DeInit+0x148>
 800758a:	1cb4      	adds	r4, r6, #2
 800758c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8007590:	ea25 0507 	bic.w	r5, r5, r7
 8007594:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8007598:	e76c      	b.n	8007474 <HAL_GPIO_DeInit+0x1c>
  }
}
 800759a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	58000400 	.word	0x58000400
 80075a4:	58020000 	.word	0x58020000

080075a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80075a8:	6903      	ldr	r3, [r0, #16]
 80075aa:	4219      	tst	r1, r3
 80075ac:	d001      	beq.n	80075b2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80075ae:	2001      	movs	r0, #1
 80075b0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075b2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80075b4:	4770      	bx	lr

080075b6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075b6:	b10a      	cbz	r2, 80075bc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075b8:	6181      	str	r1, [r0, #24]
 80075ba:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80075bc:	0409      	lsls	r1, r1, #16
 80075be:	6181      	str	r1, [r0, #24]
  }
}
 80075c0:	4770      	bx	lr

080075c2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80075c2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075c4:	ea01 0203 	and.w	r2, r1, r3
 80075c8:	ea21 0103 	bic.w	r1, r1, r3
 80075cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075d0:	6181      	str	r1, [r0, #24]
}
 80075d2:	4770      	bx	lr

080075d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075d4:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80075d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075de:	4203      	tst	r3, r0
 80075e0:	d100      	bne.n	80075e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 80075e2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075ec:	f7fa ff62 	bl	80024b4 <HAL_GPIO_EXTI_Callback>
}
 80075f0:	e7f7      	b.n	80075e2 <HAL_GPIO_EXTI_IRQHandler+0xe>

080075f2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80075f2:	6803      	ldr	r3, [r0, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	f012 0f02 	tst.w	r2, #2
 80075fa:	d001      	beq.n	8007600 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80075fc:	2200      	movs	r2, #0
 80075fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007600:	6803      	ldr	r3, [r0, #0]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	f012 0f01 	tst.w	r2, #1
 8007608:	d103      	bne.n	8007612 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	f042 0201 	orr.w	r2, r2, #1
 8007610:	619a      	str	r2, [r3, #24]
  }
}
 8007612:	4770      	bx	lr

08007614 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007614:	b410      	push	{r4}
 8007616:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007618:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800761c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007620:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007622:	4321      	orrs	r1, r4
 8007624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007628:	6802      	ldr	r2, [r0, #0]
 800762a:	6853      	ldr	r3, [r2, #4]
 800762c:	0d64      	lsrs	r4, r4, #21
 800762e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8007632:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8007636:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800763a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800763e:	f044 0403 	orr.w	r4, r4, #3
 8007642:	ea23 0404 	bic.w	r4, r3, r4
 8007646:	4321      	orrs	r1, r4
 8007648:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800764a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800764e:	4770      	bx	lr

08007650 <I2C_IsErrorOccurred>:
{
 8007650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007654:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8007656:	6803      	ldr	r3, [r0, #0]
 8007658:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800765a:	f017 0710 	ands.w	r7, r7, #16
 800765e:	d04e      	beq.n	80076fe <I2C_IsErrorOccurred+0xae>
 8007660:	460e      	mov	r6, r1
 8007662:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007664:	2210      	movs	r2, #16
 8007666:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007668:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	6998      	ldr	r0, [r3, #24]
 800766e:	f010 0f20 	tst.w	r0, #32
 8007672:	d13d      	bne.n	80076f0 <I2C_IsErrorOccurred+0xa0>
 8007674:	2d00      	cmp	r5, #0
 8007676:	d13b      	bne.n	80076f0 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8007678:	f1b6 3fff 	cmp.w	r6, #4294967295
 800767c:	d0f5      	beq.n	800766a <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800767e:	f7ff f9f7 	bl	8006a70 <HAL_GetTick>
 8007682:	eba0 0008 	sub.w	r0, r0, r8
 8007686:	42b0      	cmp	r0, r6
 8007688:	d801      	bhi.n	800768e <I2C_IsErrorOccurred+0x3e>
 800768a:	2e00      	cmp	r6, #0
 800768c:	d1ed      	bne.n	800766a <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	684a      	ldr	r2, [r1, #4]
 8007692:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8007696:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800769a:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800769c:	6988      	ldr	r0, [r1, #24]
 800769e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80076a2:	d004      	beq.n	80076ae <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80076a4:	3b20      	subs	r3, #32
 80076a6:	bf18      	it	ne
 80076a8:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80076aa:	b902      	cbnz	r2, 80076ae <I2C_IsErrorOccurred+0x5e>
 80076ac:	b9c3      	cbnz	r3, 80076e0 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f013 0f20 	tst.w	r3, #32
 80076b6:	d1d8      	bne.n	800766a <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076b8:	f7ff f9da 	bl	8006a70 <HAL_GetTick>
 80076bc:	eba0 0008 	sub.w	r0, r0, r8
 80076c0:	2819      	cmp	r0, #25
 80076c2:	d9f4      	bls.n	80076ae <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80076c6:	f043 0320 	orr.w	r3, r3, #32
 80076ca:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80076cc:	2320      	movs	r3, #32
 80076ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80076d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80076dc:	2501      	movs	r5, #1
 80076de:	e7e6      	b.n	80076ae <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076e0:	684b      	ldr	r3, [r1, #4]
 80076e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076e6:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80076e8:	f7ff f9c2 	bl	8006a70 <HAL_GetTick>
 80076ec:	4680      	mov	r8, r0
 80076ee:	e7de      	b.n	80076ae <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d140      	bne.n	8007776 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076f4:	2220      	movs	r2, #32
 80076f6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80076f8:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80076fa:	2501      	movs	r5, #1
 80076fc:	e000      	b.n	8007700 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 80076fe:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007704:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007708:	d005      	beq.n	8007716 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800770a:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800770e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007712:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8007714:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007716:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800771a:	d006      	beq.n	800772a <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 800771c:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007720:	6822      	ldr	r2, [r4, #0]
 8007722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007726:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8007728:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800772a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800772e:	d024      	beq.n	800777a <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8007730:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800773c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff ff57 	bl	80075f2 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	6853      	ldr	r3, [r2, #4]
 8007748:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800774c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007750:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800775a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800775c:	431f      	orrs	r7, r3
 800775e:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007760:	2320      	movs	r3, #32
 8007762:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007766:	2300      	movs	r3, #0
 8007768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800776c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007770:	4628      	mov	r0, r5
 8007772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8007776:	2704      	movs	r7, #4
 8007778:	e7c2      	b.n	8007700 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 800777a:	2d00      	cmp	r5, #0
 800777c:	d0f8      	beq.n	8007770 <I2C_IsErrorOccurred+0x120>
 800777e:	e7de      	b.n	800773e <I2C_IsErrorOccurred+0xee>

08007780 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	4604      	mov	r4, r0
 8007784:	460d      	mov	r5, r1
 8007786:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f013 0f02 	tst.w	r3, #2
 8007790:	d11d      	bne.n	80077ce <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007792:	4632      	mov	r2, r6
 8007794:	4629      	mov	r1, r5
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff ff5a 	bl	8007650 <I2C_IsErrorOccurred>
 800779c:	b9c8      	cbnz	r0, 80077d2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800779e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80077a2:	d0f1      	beq.n	8007788 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a4:	f7ff f964 	bl	8006a70 <HAL_GetTick>
 80077a8:	1b80      	subs	r0, r0, r6
 80077aa:	42a8      	cmp	r0, r5
 80077ac:	d801      	bhi.n	80077b2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	d1ea      	bne.n	8007788 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80077b4:	f043 0320 	orr.w	r3, r3, #32
 80077b8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077ba:	2320      	movs	r3, #32
 80077bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80077c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80077ca:	2001      	movs	r0, #1
 80077cc:	e000      	b.n	80077d0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80077ce:	2000      	movs	r0, #0
}
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80077d2:	2001      	movs	r0, #1
 80077d4:	e7fc      	b.n	80077d0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080077d6 <I2C_WaitOnFlagUntilTimeout>:
{
 80077d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077da:	4606      	mov	r6, r0
 80077dc:	4688      	mov	r8, r1
 80077de:	4617      	mov	r7, r2
 80077e0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077e2:	6834      	ldr	r4, [r6, #0]
 80077e4:	69a4      	ldr	r4, [r4, #24]
 80077e6:	ea38 0304 	bics.w	r3, r8, r4
 80077ea:	bf0c      	ite	eq
 80077ec:	f04f 0c01 	moveq.w	ip, #1
 80077f0:	f04f 0c00 	movne.w	ip, #0
 80077f4:	45bc      	cmp	ip, r7
 80077f6:	d118      	bne.n	800782a <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 80077f8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80077fc:	d0f1      	beq.n	80077e2 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fe:	f7ff f937 	bl	8006a70 <HAL_GetTick>
 8007802:	9b06      	ldr	r3, [sp, #24]
 8007804:	1ac0      	subs	r0, r0, r3
 8007806:	42a8      	cmp	r0, r5
 8007808:	d801      	bhi.n	800780e <I2C_WaitOnFlagUntilTimeout+0x38>
 800780a:	2d00      	cmp	r5, #0
 800780c:	d1e9      	bne.n	80077e2 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800780e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007810:	f043 0320 	orr.w	r3, r3, #32
 8007814:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007816:	2320      	movs	r3, #32
 8007818:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800781c:	2300      	movs	r3, #0
 800781e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007822:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8007826:	2001      	movs	r0, #1
 8007828:	e000      	b.n	800782c <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800782a:	2000      	movs	r0, #0
}
 800782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007830 <I2C_RequestMemoryWrite>:
{
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	4604      	mov	r4, r0
 8007838:	4690      	mov	r8, r2
 800783a:	461d      	mov	r5, r3
 800783c:	9e08      	ldr	r6, [sp, #32]
 800783e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007840:	4b19      	ldr	r3, [pc, #100]	; (80078a8 <I2C_RequestMemoryWrite+0x78>)
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007848:	b2ea      	uxtb	r2, r5
 800784a:	f7ff fee3 	bl	8007614 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800784e:	463a      	mov	r2, r7
 8007850:	4631      	mov	r1, r6
 8007852:	4620      	mov	r0, r4
 8007854:	f7ff ff94 	bl	8007780 <I2C_WaitOnTXISFlagUntilTimeout>
 8007858:	b9f8      	cbnz	r0, 800789a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800785a:	2d01      	cmp	r5, #1
 800785c:	d10e      	bne.n	800787c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	fa5f f288 	uxtb.w	r2, r8
 8007864:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007866:	9700      	str	r7, [sp, #0]
 8007868:	4633      	mov	r3, r6
 800786a:	2200      	movs	r2, #0
 800786c:	2180      	movs	r1, #128	; 0x80
 800786e:	4620      	mov	r0, r4
 8007870:	f7ff ffb1 	bl	80077d6 <I2C_WaitOnFlagUntilTimeout>
 8007874:	b9a8      	cbnz	r0, 80078a2 <I2C_RequestMemoryWrite+0x72>
}
 8007876:	b002      	add	sp, #8
 8007878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8007882:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007884:	463a      	mov	r2, r7
 8007886:	4631      	mov	r1, r6
 8007888:	4620      	mov	r0, r4
 800788a:	f7ff ff79 	bl	8007780 <I2C_WaitOnTXISFlagUntilTimeout>
 800788e:	b930      	cbnz	r0, 800789e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	fa5f f288 	uxtb.w	r2, r8
 8007896:	629a      	str	r2, [r3, #40]	; 0x28
 8007898:	e7e5      	b.n	8007866 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800789a:	2001      	movs	r0, #1
 800789c:	e7eb      	b.n	8007876 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800789e:	2001      	movs	r0, #1
 80078a0:	e7e9      	b.n	8007876 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80078a2:	2001      	movs	r0, #1
 80078a4:	e7e7      	b.n	8007876 <I2C_RequestMemoryWrite+0x46>
 80078a6:	bf00      	nop
 80078a8:	80002000 	.word	0x80002000

080078ac <I2C_RequestMemoryRead>:
{
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	4604      	mov	r4, r0
 80078b4:	4690      	mov	r8, r2
 80078b6:	461d      	mov	r5, r3
 80078b8:	9e08      	ldr	r6, [sp, #32]
 80078ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80078bc:	4b18      	ldr	r3, [pc, #96]	; (8007920 <I2C_RequestMemoryRead+0x74>)
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	b2ea      	uxtb	r2, r5
 80078c4:	f7ff fea6 	bl	8007614 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078c8:	463a      	mov	r2, r7
 80078ca:	4631      	mov	r1, r6
 80078cc:	4620      	mov	r0, r4
 80078ce:	f7ff ff57 	bl	8007780 <I2C_WaitOnTXISFlagUntilTimeout>
 80078d2:	b9f8      	cbnz	r0, 8007914 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078d4:	2d01      	cmp	r5, #1
 80078d6:	d10e      	bne.n	80078f6 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	fa5f f288 	uxtb.w	r2, r8
 80078de:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80078e0:	9700      	str	r7, [sp, #0]
 80078e2:	4633      	mov	r3, r6
 80078e4:	2200      	movs	r2, #0
 80078e6:	2140      	movs	r1, #64	; 0x40
 80078e8:	4620      	mov	r0, r4
 80078ea:	f7ff ff74 	bl	80077d6 <I2C_WaitOnFlagUntilTimeout>
 80078ee:	b9a8      	cbnz	r0, 800791c <I2C_RequestMemoryRead+0x70>
}
 80078f0:	b002      	add	sp, #8
 80078f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80078fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078fe:	463a      	mov	r2, r7
 8007900:	4631      	mov	r1, r6
 8007902:	4620      	mov	r0, r4
 8007904:	f7ff ff3c 	bl	8007780 <I2C_WaitOnTXISFlagUntilTimeout>
 8007908:	b930      	cbnz	r0, 8007918 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	fa5f f288 	uxtb.w	r2, r8
 8007910:	629a      	str	r2, [r3, #40]	; 0x28
 8007912:	e7e5      	b.n	80078e0 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8007914:	2001      	movs	r0, #1
 8007916:	e7eb      	b.n	80078f0 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8007918:	2001      	movs	r0, #1
 800791a:	e7e9      	b.n	80078f0 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800791c:	2001      	movs	r0, #1
 800791e:	e7e7      	b.n	80078f0 <I2C_RequestMemoryRead+0x44>
 8007920:	80002000 	.word	0x80002000

08007924 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4605      	mov	r5, r0
 8007928:	460c      	mov	r4, r1
 800792a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	f013 0f20 	tst.w	r3, #32
 8007934:	d11a      	bne.n	800796c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007936:	4632      	mov	r2, r6
 8007938:	4621      	mov	r1, r4
 800793a:	4628      	mov	r0, r5
 800793c:	f7ff fe88 	bl	8007650 <I2C_IsErrorOccurred>
 8007940:	b9b0      	cbnz	r0, 8007970 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007942:	f7ff f895 	bl	8006a70 <HAL_GetTick>
 8007946:	1b80      	subs	r0, r0, r6
 8007948:	42a0      	cmp	r0, r4
 800794a:	d801      	bhi.n	8007950 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800794c:	2c00      	cmp	r4, #0
 800794e:	d1ed      	bne.n	800792c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007950:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007952:	f043 0320 	orr.w	r3, r3, #32
 8007956:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007958:	2320      	movs	r3, #32
 800795a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800795e:	2300      	movs	r3, #0
 8007960:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007964:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007968:	2001      	movs	r0, #1
}
 800796a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800796c:	2000      	movs	r0, #0
 800796e:	e7fc      	b.n	800796a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8007970:	2001      	movs	r0, #1
 8007972:	e7fa      	b.n	800796a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08007974 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007974:	2800      	cmp	r0, #0
 8007976:	d057      	beq.n	8007a28 <HAL_I2C_Init+0xb4>
{
 8007978:	b510      	push	{r4, lr}
 800797a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800797c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007980:	2b00      	cmp	r3, #0
 8007982:	d041      	beq.n	8007a08 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007984:	2324      	movs	r3, #36	; 0x24
 8007986:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	6813      	ldr	r3, [r2, #0]
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800799c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	6893      	ldr	r3, [r2, #8]
 80079a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079a6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079a8:	68e3      	ldr	r3, [r4, #12]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d031      	beq.n	8007a12 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80079b6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079b8:	68e3      	ldr	r3, [r4, #12]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d02f      	beq.n	8007a1e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	6851      	ldr	r1, [r2, #4]
 80079c2:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <HAL_I2C_Init+0xb8>)
 80079c4:	430b      	orrs	r3, r1
 80079c6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	68d3      	ldr	r3, [r2, #12]
 80079cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079d0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6962      	ldr	r2, [r4, #20]
 80079d6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079d8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079e0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079e2:	69e3      	ldr	r3, [r4, #28]
 80079e4:	6a21      	ldr	r1, [r4, #32]
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	430b      	orrs	r3, r1
 80079ea:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80079ec:	6822      	ldr	r2, [r4, #0]
 80079ee:	6813      	ldr	r3, [r2, #0]
 80079f0:	f043 0301 	orr.w	r3, r3, #1
 80079f4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f6:	2000      	movs	r0, #0
 80079f8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079fa:	2320      	movs	r3, #32
 80079fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a00:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a02:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8007a06:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007a08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007a0c:	f7fa fdb4 	bl	8002578 <HAL_I2C_MspInit>
 8007a10:	e7b8      	b.n	8007984 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a12:	68a3      	ldr	r3, [r4, #8]
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1a:	6093      	str	r3, [r2, #8]
 8007a1c:	e7cc      	b.n	80079b8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a24:	605a      	str	r2, [r3, #4]
 8007a26:	e7ca      	b.n	80079be <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8007a28:	2001      	movs	r0, #1
}
 8007a2a:	4770      	bx	lr
 8007a2c:	02008000 	.word	0x02008000

08007a30 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8007a30:	b1a8      	cbz	r0, 8007a5e <HAL_I2C_DeInit+0x2e>
{
 8007a32:	b510      	push	{r4, lr}
 8007a34:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a36:	2324      	movs	r3, #36	; 0x24
 8007a38:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007a3c:	6802      	ldr	r2, [r0, #0]
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007a46:	f7fa fde3 	bl	8002610 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007a4e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a52:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a54:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8007a58:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007a5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007a5e:	2001      	movs	r0, #1
}
 8007a60:	4770      	bx	lr

08007a62 <HAL_I2C_Mem_Write>:
{
 8007a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a66:	b083      	sub	sp, #12
 8007a68:	460d      	mov	r5, r1
 8007a6a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8007a6e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a70:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007a74:	b2c9      	uxtb	r1, r1
 8007a76:	2920      	cmp	r1, #32
 8007a78:	f040 80bc 	bne.w	8007bf4 <HAL_I2C_Mem_Write+0x192>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4690      	mov	r8, r2
 8007a80:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8007a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a84:	f1ba 0f00 	cmp.w	sl, #0
 8007a88:	bf18      	it	ne
 8007a8a:	2b00      	cmpne	r3, #0
 8007a8c:	d016      	beq.n	8007abc <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8007a8e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	f000 80b2 	beq.w	8007bfc <HAL_I2C_Mem_Write+0x19a>
 8007a98:	f04f 0b01 	mov.w	fp, #1
 8007a9c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007aa0:	f7fe ffe6 	bl	8006a70 <HAL_GetTick>
 8007aa4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aa6:	9000      	str	r0, [sp, #0]
 8007aa8:	2319      	movs	r3, #25
 8007aaa:	465a      	mov	r2, fp
 8007aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f7ff fe90 	bl	80077d6 <I2C_WaitOnFlagUntilTimeout>
 8007ab6:	b130      	cbz	r0, 8007ac6 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8007ab8:	2001      	movs	r0, #1
 8007aba:	e09c      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac0:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	e097      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ac6:	2321      	movs	r3, #33	; 0x21
 8007ac8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ada:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ade:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ae0:	9601      	str	r6, [sp, #4]
 8007ae2:	9700      	str	r7, [sp, #0]
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff fea0 	bl	8007830 <I2C_RequestMemoryWrite>
 8007af0:	b970      	cbnz	r0, 8007b10 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2bff      	cmp	r3, #255	; 0xff
 8007af8:	d90f      	bls.n	8007b1a <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007afa:	22ff      	movs	r2, #255	; 0xff
 8007afc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007afe:	2300      	movs	r3, #0
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b06:	4629      	mov	r1, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7ff fd83 	bl	8007614 <I2C_TransferConfig>
 8007b0e:	e021      	b.n	8007b54 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8007b10:	2300      	movs	r3, #0
 8007b12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007b16:	4658      	mov	r0, fp
 8007b18:	e06d      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8007b1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b20:	2300      	movs	r3, #0
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7ff fd71 	bl	8007614 <I2C_TransferConfig>
 8007b32:	e00f      	b.n	8007b54 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8007b34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007b36:	b292      	uxth	r2, r2
 8007b38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	4629      	mov	r1, r5
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7ff fd64 	bl	8007614 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007b4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d033      	beq.n	8007bbc <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b54:	4632      	mov	r2, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff fe11 	bl	8007780 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d14e      	bne.n	8007c00 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	7812      	ldrb	r2, [r2, #0]
 8007b68:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007b70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007b7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007b84:	b292      	uxth	r2, r2
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	d0e0      	beq.n	8007b4c <HAL_I2C_Mem_Write+0xea>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1de      	bne.n	8007b4c <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b8e:	9600      	str	r6, [sp, #0]
 8007b90:	463b      	mov	r3, r7
 8007b92:	2200      	movs	r2, #0
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7ff fe1d 	bl	80077d6 <I2C_WaitOnFlagUntilTimeout>
 8007b9c:	bb90      	cbnz	r0, 8007c04 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2bff      	cmp	r3, #255	; 0xff
 8007ba4:	d9c6      	bls.n	8007b34 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ba6:	22ff      	movs	r2, #255	; 0xff
 8007ba8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007baa:	2300      	movs	r3, #0
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7ff fd2d 	bl	8007614 <I2C_TransferConfig>
 8007bba:	e7c7      	b.n	8007b4c <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7ff feaf 	bl	8007924 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bc6:	b9f8      	cbnz	r0, 8007c08 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007bce:	6821      	ldr	r1, [r4, #0]
 8007bd0:	684b      	ldr	r3, [r1, #4]
 8007bd2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007bd6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007bda:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007be4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007bee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8007bf2:	e000      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8007bf4:	2002      	movs	r0, #2
}
 8007bf6:	b003      	add	sp, #12
 8007bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007bfc:	2002      	movs	r0, #2
 8007bfe:	e7fa      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8007c00:	2001      	movs	r0, #1
 8007c02:	e7f8      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8007c04:	2001      	movs	r0, #1
 8007c06:	e7f6      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e7f4      	b.n	8007bf6 <HAL_I2C_Mem_Write+0x194>

08007c0c <HAL_I2C_Mem_Read>:
{
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	b083      	sub	sp, #12
 8007c12:	460d      	mov	r5, r1
 8007c14:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8007c18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c1a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007c1e:	b2c9      	uxtb	r1, r1
 8007c20:	2920      	cmp	r1, #32
 8007c22:	f040 80bd 	bne.w	8007da0 <HAL_I2C_Mem_Read+0x194>
 8007c26:	4604      	mov	r4, r0
 8007c28:	4690      	mov	r8, r2
 8007c2a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8007c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c2e:	f1ba 0f00 	cmp.w	sl, #0
 8007c32:	bf18      	it	ne
 8007c34:	2b00      	cmpne	r3, #0
 8007c36:	d016      	beq.n	8007c66 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8007c38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	f000 80b3 	beq.w	8007da8 <HAL_I2C_Mem_Read+0x19c>
 8007c42:	f04f 0b01 	mov.w	fp, #1
 8007c46:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007c4a:	f7fe ff11 	bl	8006a70 <HAL_GetTick>
 8007c4e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c50:	9000      	str	r0, [sp, #0]
 8007c52:	2319      	movs	r3, #25
 8007c54:	465a      	mov	r2, fp
 8007c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7ff fdbb 	bl	80077d6 <I2C_WaitOnFlagUntilTimeout>
 8007c60:	b130      	cbz	r0, 8007c70 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8007c62:	2001      	movs	r0, #1
 8007c64:	e09d      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c6a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	e098      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c70:	2322      	movs	r3, #34	; 0x22
 8007c72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c76:	2340      	movs	r3, #64	; 0x40
 8007c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c82:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c84:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c88:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c8a:	9601      	str	r6, [sp, #4]
 8007c8c:	9700      	str	r7, [sp, #0]
 8007c8e:	464b      	mov	r3, r9
 8007c90:	4642      	mov	r2, r8
 8007c92:	4629      	mov	r1, r5
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7ff fe09 	bl	80078ac <I2C_RequestMemoryRead>
 8007c9a:	b970      	cbnz	r0, 8007cba <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2bff      	cmp	r3, #255	; 0xff
 8007ca2:	d90f      	bls.n	8007cc4 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ca8:	4b43      	ldr	r3, [pc, #268]	; (8007db8 <HAL_I2C_Mem_Read+0x1ac>)
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7ff fcae 	bl	8007614 <I2C_TransferConfig>
 8007cb8:	e021      	b.n	8007cfe <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	e06e      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8007cc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007cc6:	b292      	uxth	r2, r2
 8007cc8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cca:	4b3b      	ldr	r3, [pc, #236]	; (8007db8 <HAL_I2C_Mem_Read+0x1ac>)
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff fc9c 	bl	8007614 <I2C_TransferConfig>
 8007cdc:	e00f      	b.n	8007cfe <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8007cde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cec:	b2d2      	uxtb	r2, r2
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7ff fc8f 	bl	8007614 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007cf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d034      	beq.n	8007d68 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007cfe:	9600      	str	r6, [sp, #0]
 8007d00:	463b      	mov	r3, r7
 8007d02:	2200      	movs	r2, #0
 8007d04:	2104      	movs	r1, #4
 8007d06:	4620      	mov	r0, r4
 8007d08:	f7ff fd65 	bl	80077d6 <I2C_WaitOnFlagUntilTimeout>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d14d      	bne.n	8007dac <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d16:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007d1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007d20:	3a01      	subs	r2, #1
 8007d22:	b292      	uxth	r2, r2
 8007d24:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0de      	beq.n	8007cf6 <HAL_I2C_Mem_Read+0xea>
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	d1dc      	bne.n	8007cf6 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d3c:	9600      	str	r6, [sp, #0]
 8007d3e:	463b      	mov	r3, r7
 8007d40:	2180      	movs	r1, #128	; 0x80
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff fd47 	bl	80077d6 <I2C_WaitOnFlagUntilTimeout>
 8007d48:	bb90      	cbnz	r0, 8007db0 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2bff      	cmp	r3, #255	; 0xff
 8007d50:	d9c5      	bls.n	8007cde <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d52:	22ff      	movs	r2, #255	; 0xff
 8007d54:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007d56:	2300      	movs	r3, #0
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4620      	mov	r0, r4
 8007d62:	f7ff fc57 	bl	8007614 <I2C_TransferConfig>
 8007d66:	e7c6      	b.n	8007cf6 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fdd9 	bl	8007924 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d72:	b9f8      	cbnz	r0, 8007db4 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	2220      	movs	r2, #32
 8007d78:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007d7a:	6821      	ldr	r1, [r4, #0]
 8007d7c:	684b      	ldr	r3, [r1, #4]
 8007d7e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007d82:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007d86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d90:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007d9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8007d9e:	e000      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8007da0:	2002      	movs	r0, #2
}
 8007da2:	b003      	add	sp, #12
 8007da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007da8:	2002      	movs	r0, #2
 8007daa:	e7fa      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8007dac:	2001      	movs	r0, #1
 8007dae:	e7f8      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8007db0:	2001      	movs	r0, #1
 8007db2:	e7f6      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8007db4:	2001      	movs	r0, #1
 8007db6:	e7f4      	b.n	8007da2 <HAL_I2C_Mem_Read+0x196>
 8007db8:	80002400 	.word	0x80002400

08007dbc <HAL_I2C_GetState>:
  return hi2c->State;
 8007dbc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007dc2:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d124      	bne.n	8007e1a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dd0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d022      	beq.n	8007e1e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dde:	2324      	movs	r3, #36	; 0x24
 8007de0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007de4:	6802      	ldr	r2, [r0, #0]
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007dee:	6802      	ldr	r2, [r0, #0]
 8007df0:	6813      	ldr	r3, [r2, #0]
 8007df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007df6:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007df8:	6802      	ldr	r2, [r0, #0]
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	4319      	orrs	r1, r3
 8007dfe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e00:	6802      	ldr	r2, [r0, #0]
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	f043 0301 	orr.w	r3, r3, #1
 8007e08:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e0a:	2320      	movs	r3, #32
 8007e0c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e10:	2300      	movs	r3, #0
 8007e12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007e16:	4618      	mov	r0, r3
 8007e18:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007e1a:	2002      	movs	r0, #2
 8007e1c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007e1e:	2002      	movs	r0, #2
  }
}
 8007e20:	4770      	bx	lr

08007e22 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d122      	bne.n	8007e72 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d020      	beq.n	8007e76 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8007e34:	2301      	movs	r3, #1
 8007e36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e3a:	2324      	movs	r3, #36	; 0x24
 8007e3c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e40:	6802      	ldr	r2, [r0, #0]
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e4a:	6802      	ldr	r2, [r0, #0]
 8007e4c:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e52:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e56:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e58:	6802      	ldr	r2, [r0, #0]
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e62:	2320      	movs	r3, #32
 8007e64:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007e6e:	4618      	mov	r0, r3
 8007e70:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007e72:	2002      	movs	r0, #2
 8007e74:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007e76:	2002      	movs	r0, #2
  }
}
 8007e78:	4770      	bx	lr
	...

08007e7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007e7e:	684d      	ldr	r5, [r1, #4]
 8007e80:	6804      	ldr	r4, [r0, #0]
 8007e82:	68e3      	ldr	r3, [r4, #12]
 8007e84:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8007e88:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007e8a:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8007e8e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8007e92:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007e96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e9a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e9e:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ea0:	6804      	ldr	r4, [r0, #0]
 8007ea2:	68e6      	ldr	r6, [r4, #12]
 8007ea4:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ea8:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007eaa:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007eac:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007eb0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007eb4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007eb8:	68cd      	ldr	r5, [r1, #12]
 8007eba:	6804      	ldr	r4, [r0, #0]
 8007ebc:	68e3      	ldr	r3, [r4, #12]
 8007ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ec2:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007ec4:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8007ec8:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8007ecc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ed0:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007ed4:	688b      	ldr	r3, [r1, #8]
 8007ed6:	6804      	ldr	r4, [r0, #0]
 8007ed8:	68e6      	ldr	r6, [r4, #12]
 8007eda:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8007ede:	4473      	add	r3, lr
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8007ee6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007eea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007eee:	6803      	ldr	r3, [r0, #0]
 8007ef0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007ef4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8007ef8:	f024 0407 	bic.w	r4, r4, #7
 8007efc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007f00:	6803      	ldr	r3, [r0, #0]
 8007f02:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f06:	690c      	ldr	r4, [r1, #16]
 8007f08:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007f0c:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007f10:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007f14:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007f16:	6804      	ldr	r4, [r0, #0]
 8007f18:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8007f1c:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8007f20:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007f24:	2400      	movs	r4, #0
 8007f26:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007f2a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8007f2e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007f32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007f36:	6806      	ldr	r6, [r0, #0]
 8007f38:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8007f3c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007f40:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8007f44:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007f48:	6803      	ldr	r3, [r0, #0]
 8007f4a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f4e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8007f52:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007f56:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007f5a:	6803      	ldr	r3, [r0, #0]
 8007f5c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f60:	694d      	ldr	r5, [r1, #20]
 8007f62:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007f66:	6803      	ldr	r3, [r0, #0]
 8007f68:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f6c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8007f70:	4d2e      	ldr	r5, [pc, #184]	; (800802c <LTDC_SetConfig+0x1b0>)
 8007f72:	4035      	ands	r5, r6
 8007f74:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007f78:	6a0d      	ldr	r5, [r1, #32]
 8007f7a:	6803      	ldr	r3, [r0, #0]
 8007f7c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f80:	69ce      	ldr	r6, [r1, #28]
 8007f82:	4335      	orrs	r5, r6
 8007f84:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007f88:	6803      	ldr	r3, [r0, #0]
 8007f8a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f8e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8007f92:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007f96:	6803      	ldr	r3, [r0, #0]
 8007f98:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8007f9c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007f9e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007fa2:	690b      	ldr	r3, [r1, #16]
 8007fa4:	b16b      	cbz	r3, 8007fc2 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d039      	beq.n	800801e <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	bf18      	it	ne
 8007fae:	2b04      	cmpne	r3, #4
 8007fb0:	d037      	beq.n	8008022 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d037      	beq.n	8008026 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007fb6:	2b07      	cmp	r3, #7
 8007fb8:	d001      	beq.n	8007fbe <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007fba:	2501      	movs	r5, #1
 8007fbc:	e002      	b.n	8007fc4 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8007fbe:	2502      	movs	r5, #2
 8007fc0:	e000      	b.n	8007fc4 <LTDC_SetConfig+0x148>
    tmp = 4U;
 8007fc2:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007fc4:	6802      	ldr	r2, [r0, #0]
 8007fc6:	4462      	add	r2, ip
 8007fc8:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8007fcc:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8007fd0:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007fd4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8007fd6:	fb05 f402 	mul.w	r4, r5, r2
 8007fda:	684b      	ldr	r3, [r1, #4]
 8007fdc:	680a      	ldr	r2, [r1, #0]
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	fb05 f303 	mul.w	r3, r5, r3
 8007fe4:	3307      	adds	r3, #7
 8007fe6:	6802      	ldr	r2, [r0, #0]
 8007fe8:	4462      	add	r2, ip
 8007fea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007fee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007ff2:	6803      	ldr	r3, [r0, #0]
 8007ff4:	4463      	add	r3, ip
 8007ff6:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8007ffa:	4a0d      	ldr	r2, [pc, #52]	; (8008030 <LTDC_SetConfig+0x1b4>)
 8007ffc:	4022      	ands	r2, r4
 8007ffe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008002:	6803      	ldr	r3, [r0, #0]
 8008004:	4463      	add	r3, ip
 8008006:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008008:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800800c:	6803      	ldr	r3, [r0, #0]
 800800e:	449c      	add	ip, r3
 8008010:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800801e:	2503      	movs	r5, #3
 8008020:	e7d0      	b.n	8007fc4 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8008022:	2502      	movs	r5, #2
 8008024:	e7ce      	b.n	8007fc4 <LTDC_SetConfig+0x148>
 8008026:	2502      	movs	r5, #2
 8008028:	e7cc      	b.n	8007fc4 <LTDC_SetConfig+0x148>
 800802a:	bf00      	nop
 800802c:	fffff8f8 	.word	0xfffff8f8
 8008030:	fffff800 	.word	0xfffff800

08008034 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8008034:	2800      	cmp	r0, #0
 8008036:	d072      	beq.n	800811e <HAL_LTDC_Init+0xea>
{
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800803c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d067      	beq.n	8008114 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008044:	2302      	movs	r3, #2
 8008046:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800804a:	6822      	ldr	r2, [r4, #0]
 800804c:	6993      	ldr	r3, [r2, #24]
 800804e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008052:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008054:	6821      	ldr	r1, [r4, #0]
 8008056:	698a      	ldr	r2, [r1, #24]
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	68a0      	ldr	r0, [r4, #8]
 800805c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800805e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008060:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008062:	6920      	ldr	r0, [r4, #16]
 8008064:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008066:	4313      	orrs	r3, r2
 8008068:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800806a:	6821      	ldr	r1, [r4, #0]
 800806c:	688a      	ldr	r2, [r1, #8]
 800806e:	4b2d      	ldr	r3, [pc, #180]	; (8008124 <HAL_LTDC_Init+0xf0>)
 8008070:	401a      	ands	r2, r3
 8008072:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	6882      	ldr	r2, [r0, #8]
 8008078:	69a1      	ldr	r1, [r4, #24]
 800807a:	6965      	ldr	r5, [r4, #20]
 800807c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008080:	430a      	orrs	r2, r1
 8008082:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008084:	6821      	ldr	r1, [r4, #0]
 8008086:	68ca      	ldr	r2, [r1, #12]
 8008088:	401a      	ands	r2, r3
 800808a:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	68c2      	ldr	r2, [r0, #12]
 8008090:	6a21      	ldr	r1, [r4, #32]
 8008092:	69e5      	ldr	r5, [r4, #28]
 8008094:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008098:	430a      	orrs	r2, r1
 800809a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800809c:	6821      	ldr	r1, [r4, #0]
 800809e:	690a      	ldr	r2, [r1, #16]
 80080a0:	401a      	ands	r2, r3
 80080a2:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	6902      	ldr	r2, [r0, #16]
 80080a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80080aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80080ac:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80080b0:	430a      	orrs	r2, r1
 80080b2:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	694a      	ldr	r2, [r1, #20]
 80080b8:	4013      	ands	r3, r2
 80080ba:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80080bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80080be:	6821      	ldr	r1, [r4, #0]
 80080c0:	694b      	ldr	r3, [r1, #20]
 80080c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80080c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80080c8:	4313      	orrs	r3, r2
 80080ca:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80080cc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80080d0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80080d4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80080d6:	6821      	ldr	r1, [r4, #0]
 80080d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80080da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80080de:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80080e0:	6821      	ldr	r1, [r4, #0]
 80080e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80080e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80080e8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80080ec:	4303      	orrs	r3, r0
 80080ee:	4313      	orrs	r3, r2
 80080f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80080f2:	6822      	ldr	r2, [r4, #0]
 80080f4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80080f6:	f043 0306 	orr.w	r3, r3, #6
 80080fa:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	6993      	ldr	r3, [r2, #24]
 8008100:	f043 0301 	orr.w	r3, r3, #1
 8008104:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008106:	2000      	movs	r0, #0
 8008108:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800810c:	2301      	movs	r3, #1
 800810e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8008112:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8008114:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008118:	f7fa fa9a 	bl	8002650 <HAL_LTDC_MspInit>
 800811c:	e792      	b.n	8008044 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800811e:	2001      	movs	r0, #1
}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	f000f800 	.word	0xf000f800

08008128 <HAL_LTDC_ErrorCallback>:
}
 8008128:	4770      	bx	lr

0800812a <HAL_LTDC_ReloadEventCallback>:
}
 800812a:	4770      	bx	lr

0800812c <HAL_LTDC_IRQHandler>:
{
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008130:	6803      	ldr	r3, [r0, #0]
 8008132:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008134:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008136:	f015 0f04 	tst.w	r5, #4
 800813a:	d002      	beq.n	8008142 <HAL_LTDC_IRQHandler+0x16>
 800813c:	f016 0f04 	tst.w	r6, #4
 8008140:	d112      	bne.n	8008168 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008142:	f015 0f02 	tst.w	r5, #2
 8008146:	d002      	beq.n	800814e <HAL_LTDC_IRQHandler+0x22>
 8008148:	f016 0f02 	tst.w	r6, #2
 800814c:	d121      	bne.n	8008192 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800814e:	f015 0f01 	tst.w	r5, #1
 8008152:	d002      	beq.n	800815a <HAL_LTDC_IRQHandler+0x2e>
 8008154:	f016 0f01 	tst.w	r6, #1
 8008158:	d132      	bne.n	80081c0 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800815a:	f015 0f08 	tst.w	r5, #8
 800815e:	d002      	beq.n	8008166 <HAL_LTDC_IRQHandler+0x3a>
 8008160:	f016 0f08 	tst.w	r6, #8
 8008164:	d13d      	bne.n	80081e2 <HAL_LTDC_IRQHandler+0xb6>
}
 8008166:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816a:	f022 0204 	bic.w	r2, r2, #4
 800816e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008170:	6803      	ldr	r3, [r0, #0]
 8008172:	2204      	movs	r2, #4
 8008174:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008176:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800817a:	f043 0301 	orr.w	r3, r3, #1
 800817e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008182:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008186:	2300      	movs	r3, #0
 8008188:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800818c:	f7ff ffcc 	bl	8008128 <HAL_LTDC_ErrorCallback>
 8008190:	e7d7      	b.n	8008142 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008192:	6822      	ldr	r2, [r4, #0]
 8008194:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008196:	f023 0302 	bic.w	r3, r3, #2
 800819a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	2202      	movs	r2, #2
 80081a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80081a2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80081ac:	2304      	movs	r3, #4
 80081ae:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80081b2:	2300      	movs	r3, #0
 80081b4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff ffb5 	bl	8008128 <HAL_LTDC_ErrorCallback>
 80081be:	e7c6      	b.n	800814e <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80081ca:	6822      	ldr	r2, [r4, #0]
 80081cc:	2301      	movs	r3, #1
 80081ce:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80081d0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80081d4:	2300      	movs	r3, #0
 80081d6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80081da:	4620      	mov	r0, r4
 80081dc:	f7f9 fae6 	bl	80017ac <HAL_LTDC_LineEventCallback>
 80081e0:	e7bb      	b.n	800815a <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80081e6:	f023 0308 	bic.w	r3, r3, #8
 80081ea:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	2208      	movs	r2, #8
 80081f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80081f8:	2300      	movs	r3, #0
 80081fa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80081fe:	4620      	mov	r0, r4
 8008200:	f7ff ff93 	bl	800812a <HAL_LTDC_ReloadEventCallback>
}
 8008204:	e7af      	b.n	8008166 <HAL_LTDC_IRQHandler+0x3a>

08008206 <HAL_LTDC_ConfigLayer>:
{
 8008206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8008208:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800820c:	2b01      	cmp	r3, #1
 800820e:	d02c      	beq.n	800826a <HAL_LTDC_ConfigLayer+0x64>
 8008210:	4604      	mov	r4, r0
 8008212:	460d      	mov	r5, r1
 8008214:	4616      	mov	r6, r2
 8008216:	2701      	movs	r7, #1
 8008218:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800821c:	2302      	movs	r3, #2
 800821e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008222:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8008226:	fb0c 0c02 	mla	ip, ip, r2, r0
 800822a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800822e:	468e      	mov	lr, r1
 8008230:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008234:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008238:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800823c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008240:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008248:	f8de 3000 	ldr.w	r3, [lr]
 800824c:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008250:	4632      	mov	r2, r6
 8008252:	4629      	mov	r1, r5
 8008254:	4620      	mov	r0, r4
 8008256:	f7ff fe11 	bl	8007e7c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800825e:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008262:	2000      	movs	r0, #0
 8008264:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8008268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800826a:	2002      	movs	r0, #2
 800826c:	e7fc      	b.n	8008268 <HAL_LTDC_ConfigLayer+0x62>
	...

08008270 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8008270:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8008274:	2b01      	cmp	r3, #1
 8008276:	d01a      	beq.n	80082ae <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8008278:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 800827a:	2201      	movs	r2, #1
 800827c:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008280:	2302      	movs	r3, #2
 8008282:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008286:	6804      	ldr	r4, [r0, #0]
 8008288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8008290:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <HAL_LTDC_ProgramLineEvent+0x44>)
 8008292:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8008294:	6801      	ldr	r1, [r0, #0]
 8008296:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008298:	4313      	orrs	r3, r2
 800829a:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800829c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80082a0:	2300      	movs	r3, #0
 80082a2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80082a6:	4618      	mov	r0, r3
}
 80082a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082ac:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80082ae:	2002      	movs	r0, #2
}
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	50001000 	.word	0x50001000

080082b8 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80082bc:	f7fe fbd8 	bl	8006a70 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80082c0:	2c00      	cmp	r4, #0
 80082c2:	d035      	beq.n	8008330 <HAL_MDMA_Abort+0x78>
 80082c4:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80082c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d006      	beq.n	80082de <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80082d0:	2380      	movs	r3, #128	; 0x80
 80082d2:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80082d4:	2300      	movs	r3, #0
 80082d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 80082da:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	68d3      	ldr	r3, [r2, #12]
 80082e2:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80082e6:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	68d3      	ldr	r3, [r2, #12]
 80082ec:	f023 0301 	bic.w	r3, r3, #1
 80082f0:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	f012 0f01 	tst.w	r2, #1
 80082fa:	d010      	beq.n	800831e <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80082fc:	f7fe fbb8 	bl	8006a70 <HAL_GetTick>
 8008300:	1b43      	subs	r3, r0, r5
 8008302:	2b05      	cmp	r3, #5
 8008304:	d9f5      	bls.n	80082f2 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8008306:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830c:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800830e:	2300      	movs	r3, #0
 8008310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8008314:	2303      	movs	r3, #3
 8008316:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800831a:	2001      	movs	r0, #1
 800831c:	e7de      	b.n	80082dc <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800831e:	221f      	movs	r2, #31
 8008320:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 8008322:	2000      	movs	r0, #0
 8008324:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 8008328:	2301      	movs	r3, #1
 800832a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800832e:	e7d5      	b.n	80082dc <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 8008330:	2001      	movs	r0, #1
 8008332:	e7d3      	b.n	80082dc <HAL_MDMA_Abort+0x24>

08008334 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008334:	b190      	cbz	r0, 800835c <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008336:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d003      	beq.n	8008348 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008340:	2380      	movs	r3, #128	; 0x80
 8008342:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 8008344:	2001      	movs	r0, #1
 8008346:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008348:	2304      	movs	r3, #4
 800834a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800834e:	6802      	ldr	r2, [r0, #0]
 8008350:	68d3      	ldr	r3, [r2, #12]
 8008352:	f023 0301 	bic.w	r3, r3, #1
 8008356:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8008358:	2000      	movs	r0, #0
 800835a:	4770      	bx	lr
    return HAL_ERROR;
 800835c:	2001      	movs	r0, #1
}
 800835e:	4770      	bx	lr

08008360 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8008362:	6802      	ldr	r2, [r0, #0]
 8008364:	6813      	ldr	r3, [r2, #0]
 8008366:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800836a:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800836c:	6883      	ldr	r3, [r0, #8]
 800836e:	b933      	cbnz	r3, 800837e <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8008370:	6802      	ldr	r2, [r0, #0]
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008378:	684c      	ldr	r4, [r1, #4]
 800837a:	4323      	orrs	r3, r4
 800837c:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800837e:	680b      	ldr	r3, [r1, #0]
 8008380:	2b02      	cmp	r3, #2
 8008382:	d04d      	beq.n	8008420 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8008384:	2b03      	cmp	r3, #3
 8008386:	d055      	beq.n	8008434 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8008388:	6803      	ldr	r3, [r0, #0]
 800838a:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800838e:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8008392:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8008396:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800839a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800839c:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800839e:	432c      	orrs	r4, r5
 80083a0:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80083a2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80083a4:	b15c      	cbz	r4, 80083be <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80083a6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80083a8:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80083b0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80083b2:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80083b4:	432c      	orrs	r4, r5
 80083b6:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80083b8:	432c      	orrs	r4, r5
 80083ba:	4323      	orrs	r3, r4
 80083bc:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80083be:	f8de 3000 	ldr.w	r3, [lr]
 80083c2:	f023 031f 	bic.w	r3, r3, #31
 80083c6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80083c8:	4323      	orrs	r3, r4
 80083ca:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80083ce:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80083d0:	b12b      	cbz	r3, 80083de <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80083d2:	680b      	ldr	r3, [r1, #0]
 80083d4:	b91b      	cbnz	r3, 80083de <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80083d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80083d8:	6804      	ldr	r4, [r0, #0]
 80083da:	3b01      	subs	r3, #1
 80083dc:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80083de:	68cb      	ldr	r3, [r1, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d073      	beq.n	80084cc <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80083e4:	69cc      	ldr	r4, [r1, #28]
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d048      	beq.n	800847c <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80083ea:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80083ec:	b365      	cbz	r5, 8008448 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80083ee:	6817      	ldr	r7, [r2, #0]
 80083f0:	4e48      	ldr	r6, [pc, #288]	; (8008514 <OSPI_ConfigCmd+0x1b4>)
 80083f2:	403e      	ands	r6, r7
 80083f4:	694f      	ldr	r7, [r1, #20]
 80083f6:	433b      	orrs	r3, r7
 80083f8:	690f      	ldr	r7, [r1, #16]
 80083fa:	433b      	orrs	r3, r7
 80083fc:	431c      	orrs	r4, r3
 80083fe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008400:	431c      	orrs	r4, r3
 8008402:	6a0b      	ldr	r3, [r1, #32]
 8008404:	431c      	orrs	r4, r3
 8008406:	432c      	orrs	r4, r5
 8008408:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800840a:	432c      	orrs	r4, r5
 800840c:	4334      	orrs	r4, r6
 800840e:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8008410:	688b      	ldr	r3, [r1, #8]
 8008412:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8008416:	6803      	ldr	r3, [r0, #0]
 8008418:	698a      	ldr	r2, [r1, #24]
 800841a:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800841c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800841e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 8008420:	6803      	ldr	r3, [r0, #0]
 8008422:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8008426:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800842a:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800842e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008432:	e7b2      	b.n	800839a <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 8008434:	6803      	ldr	r3, [r0, #0]
 8008436:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800843a:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800843e:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 8008442:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008446:	e7a8      	b.n	800839a <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8008448:	6816      	ldr	r6, [r2, #0]
 800844a:	4d33      	ldr	r5, [pc, #204]	; (8008518 <OSPI_ConfigCmd+0x1b8>)
 800844c:	4035      	ands	r5, r6
 800844e:	694e      	ldr	r6, [r1, #20]
 8008450:	4333      	orrs	r3, r6
 8008452:	690e      	ldr	r6, [r1, #16]
 8008454:	4333      	orrs	r3, r6
 8008456:	431c      	orrs	r4, r3
 8008458:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800845a:	431c      	orrs	r4, r3
 800845c:	6a0b      	ldr	r3, [r1, #32]
 800845e:	431c      	orrs	r4, r3
 8008460:	432c      	orrs	r4, r5
 8008462:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008464:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846a:	d1d1      	bne.n	8008410 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800846c:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800846e:	2b08      	cmp	r3, #8
 8008470:	d1ce      	bne.n	8008410 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e7c9      	b.n	8008410 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800847c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800847e:	b184      	cbz	r4, 80084a2 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8008480:	6815      	ldr	r5, [r2, #0]
 8008482:	4826      	ldr	r0, [pc, #152]	; (800851c <OSPI_ConfigCmd+0x1bc>)
 8008484:	4028      	ands	r0, r5
 8008486:	694d      	ldr	r5, [r1, #20]
 8008488:	432b      	orrs	r3, r5
 800848a:	690d      	ldr	r5, [r1, #16]
 800848c:	432b      	orrs	r3, r5
 800848e:	431c      	orrs	r4, r3
 8008490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008492:	431c      	orrs	r4, r3
 8008494:	4304      	orrs	r4, r0
 8008496:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 8008498:	688b      	ldr	r3, [r1, #8]
 800849a:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800849e:	2000      	movs	r0, #0
 80084a0:	e7bd      	b.n	800841e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80084a2:	6814      	ldr	r4, [r2, #0]
 80084a4:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80084a8:	694d      	ldr	r5, [r1, #20]
 80084aa:	432b      	orrs	r3, r5
 80084ac:	690d      	ldr	r5, [r1, #16]
 80084ae:	432b      	orrs	r3, r5
 80084b0:	4323      	orrs	r3, r4
 80084b2:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80084b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80084b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ba:	d1ed      	bne.n	8008498 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80084bc:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d1ea      	bne.n	8008498 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	e7e5      	b.n	8008498 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80084cc:	69cb      	ldr	r3, [r1, #28]
 80084ce:	b1e3      	cbz	r3, 800850a <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80084d0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80084d2:	b184      	cbz	r4, 80084f6 <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80084d4:	6816      	ldr	r6, [r2, #0]
 80084d6:	4d12      	ldr	r5, [pc, #72]	; (8008520 <OSPI_ConfigCmd+0x1c0>)
 80084d8:	4035      	ands	r5, r6
 80084da:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80084dc:	4333      	orrs	r3, r6
 80084de:	6a0e      	ldr	r6, [r1, #32]
 80084e0:	4333      	orrs	r3, r6
 80084e2:	4323      	orrs	r3, r4
 80084e4:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80084e6:	4323      	orrs	r3, r4
 80084e8:	432b      	orrs	r3, r5
 80084ea:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 80084ec:	6803      	ldr	r3, [r0, #0]
 80084ee:	698a      	ldr	r2, [r1, #24]
 80084f0:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80084f2:	2000      	movs	r0, #0
 80084f4:	e793      	b.n	800841e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80084f6:	6814      	ldr	r4, [r2, #0]
 80084f8:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 80084fc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80084fe:	432b      	orrs	r3, r5
 8008500:	6a0d      	ldr	r5, [r1, #32]
 8008502:	432b      	orrs	r3, r5
 8008504:	4323      	orrs	r3, r4
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	e7f0      	b.n	80084ec <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800850a:	2308      	movs	r3, #8
 800850c:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 800850e:	2001      	movs	r0, #1
 8008510:	e785      	b.n	800841e <OSPI_ConfigCmd+0xbe>
 8008512:	bf00      	nop
 8008514:	f0ffc0c0 	.word	0xf0ffc0c0
 8008518:	ffffc0c0 	.word	0xffffc0c0
 800851c:	f0ffffc0 	.word	0xf0ffffc0
 8008520:	f0ffc0ff 	.word	0xf0ffc0ff

08008524 <OSPI_WaitFlagStateUntilTimeout>:
{
 8008524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008528:	4605      	mov	r5, r0
 800852a:	460f      	mov	r7, r1
 800852c:	4616      	mov	r6, r2
 800852e:	4699      	mov	r9, r3
 8008530:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008534:	682c      	ldr	r4, [r5, #0]
 8008536:	6a24      	ldr	r4, [r4, #32]
 8008538:	423c      	tst	r4, r7
 800853a:	bf14      	ite	ne
 800853c:	f04f 0c01 	movne.w	ip, #1
 8008540:	f04f 0c00 	moveq.w	ip, #0
 8008544:	45b4      	cmp	ip, r6
 8008546:	d014      	beq.n	8008572 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8008548:	f1b8 3fff 	cmp.w	r8, #4294967295
 800854c:	d0f2      	beq.n	8008534 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800854e:	f7fe fa8f 	bl	8006a70 <HAL_GetTick>
 8008552:	eba0 0009 	sub.w	r0, r0, r9
 8008556:	4540      	cmp	r0, r8
 8008558:	d802      	bhi.n	8008560 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800855a:	f1b8 0f00 	cmp.w	r8, #0
 800855e:	d1e9      	bne.n	8008534 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8008560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008564:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8008566:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008568:	f043 0301 	orr.w	r3, r3, #1
 800856c:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 800856e:	2001      	movs	r0, #1
 8008570:	e000      	b.n	8008574 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 8008572:	2000      	movs	r0, #0
}
 8008574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008578 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 8008578:	b180      	cbz	r0, 800859c <HAL_OSPI_DeInit+0x24>
{
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 800857e:	6802      	ldr	r2, [r0, #0]
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	f023 0301 	bic.w	r3, r3, #1
 8008586:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008588:	6802      	ldr	r2, [r0, #0]
 800858a:	6893      	ldr	r3, [r2, #8]
 800858c:	f023 0302 	bic.w	r3, r3, #2
 8008590:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 8008592:	f7fa f93b 	bl	800280c <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8008596:	2000      	movs	r0, #0
 8008598:	6520      	str	r0, [r4, #80]	; 0x50
}
 800859a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800859c:	2001      	movs	r0, #1
}
 800859e:	4770      	bx	lr

080085a0 <HAL_OSPI_Command>:
{
 80085a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	4604      	mov	r4, r0
 80085a8:	4688      	mov	r8, r1
 80085aa:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80085ac:	f7fe fa60 	bl	8006a70 <HAL_GetTick>
 80085b0:	4606      	mov	r6, r0
  state = hospi->State;
 80085b2:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80085b4:	2d02      	cmp	r5, #2
 80085b6:	d009      	beq.n	80085cc <HAL_OSPI_Command+0x2c>
 80085b8:	2d14      	cmp	r5, #20
 80085ba:	d024      	beq.n	8008606 <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80085bc:	2d24      	cmp	r5, #36	; 0x24
 80085be:	d028      	beq.n	8008612 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80085c0:	2310      	movs	r3, #16
 80085c2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80085c4:	2001      	movs	r0, #1
}
 80085c6:	b002      	add	sp, #8
 80085c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80085cc:	68e3      	ldr	r3, [r4, #12]
 80085ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085d2:	d0f1      	beq.n	80085b8 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80085d4:	9700      	str	r7, [sp, #0]
 80085d6:	4633      	mov	r3, r6
 80085d8:	2200      	movs	r2, #0
 80085da:	2120      	movs	r1, #32
 80085dc:	4620      	mov	r0, r4
 80085de:	f7ff ffa1 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d1ef      	bne.n	80085c6 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80085e6:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 80085e8:	4641      	mov	r1, r8
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7ff feb8 	bl	8008360 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d1e8      	bne.n	80085c6 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80085f4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80085f8:	b193      	cbz	r3, 8008620 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80085fa:	f8d8 3000 	ldr.w	r3, [r8]
 80085fe:	b9d3      	cbnz	r3, 8008636 <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008600:	2304      	movs	r3, #4
 8008602:	6523      	str	r3, [r4, #80]	; 0x50
 8008604:	e7df      	b.n	80085c6 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008606:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800860a:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800860c:	2b01      	cmp	r3, #1
 800860e:	d8d5      	bhi.n	80085bc <HAL_OSPI_Command+0x1c>
 8008610:	e7e0      	b.n	80085d4 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008612:	f8d8 3000 	ldr.w	r3, [r8]
 8008616:	2b03      	cmp	r3, #3
 8008618:	bf18      	it	ne
 800861a:	2b01      	cmpne	r3, #1
 800861c:	d1d0      	bne.n	80085c0 <HAL_OSPI_Command+0x20>
 800861e:	e7d9      	b.n	80085d4 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008620:	9700      	str	r7, [sp, #0]
 8008622:	4633      	mov	r3, r6
 8008624:	2201      	movs	r2, #1
 8008626:	2102      	movs	r1, #2
 8008628:	4620      	mov	r0, r4
 800862a:	f7ff ff7b 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	2202      	movs	r2, #2
 8008632:	625a      	str	r2, [r3, #36]	; 0x24
 8008634:	e7c7      	b.n	80085c6 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8008636:	2b01      	cmp	r3, #1
 8008638:	d007      	beq.n	800864a <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800863a:	2b02      	cmp	r3, #2
 800863c:	d1c3      	bne.n	80085c6 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800863e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008640:	2b14      	cmp	r3, #20
 8008642:	d00b      	beq.n	800865c <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8008644:	2324      	movs	r3, #36	; 0x24
 8008646:	6523      	str	r3, [r4, #80]	; 0x50
 8008648:	e7bd      	b.n	80085c6 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800864a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800864c:	2b24      	cmp	r3, #36	; 0x24
 800864e:	d002      	beq.n	8008656 <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8008650:	2314      	movs	r3, #20
 8008652:	6523      	str	r3, [r4, #80]	; 0x50
 8008654:	e7b7      	b.n	80085c6 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008656:	2304      	movs	r3, #4
 8008658:	6523      	str	r3, [r4, #80]	; 0x50
 800865a:	e7b4      	b.n	80085c6 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800865c:	2304      	movs	r3, #4
 800865e:	6523      	str	r3, [r4, #80]	; 0x50
 8008660:	e7b1      	b.n	80085c6 <HAL_OSPI_Command+0x26>

08008662 <HAL_OSPI_Transmit>:
{
 8008662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	4604      	mov	r4, r0
 800866a:	4688      	mov	r8, r1
 800866c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800866e:	f7fe f9ff 	bl	8006a70 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8008672:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 8008674:	f1b8 0f00 	cmp.w	r8, #0
 8008678:	d00a      	beq.n	8008690 <HAL_OSPI_Transmit+0x2e>
 800867a:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800867c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800867e:	2b04      	cmp	r3, #4
 8008680:	d00a      	beq.n	8008698 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008682:	2310      	movs	r3, #16
 8008684:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
}
 8008688:	4618      	mov	r0, r3
 800868a:	b002      	add	sp, #8
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008690:	2308      	movs	r3, #8
 8008692:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e7f7      	b.n	8008688 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8008698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869a:	3301      	adds	r3, #1
 800869c:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800869e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80086a0:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 80086a2:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80086ac:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80086ae:	9600      	str	r6, [sp, #0]
 80086b0:	462b      	mov	r3, r5
 80086b2:	2201      	movs	r2, #1
 80086b4:	2104      	movs	r1, #4
 80086b6:	4620      	mov	r0, r4
 80086b8:	f7ff ff34 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80086bc:	4603      	mov	r3, r0
 80086be:	b960      	cbnz	r0, 80086da <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80086c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80086c2:	7812      	ldrb	r2, [r2, #0]
 80086c4:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 80086c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80086ca:	3101      	adds	r1, #1
 80086cc:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 80086ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80086d0:	3901      	subs	r1, #1
 80086d2:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 80086d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	d1e9      	bne.n	80086ae <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1d4      	bne.n	8008688 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80086de:	9600      	str	r6, [sp, #0]
 80086e0:	462b      	mov	r3, r5
 80086e2:	2201      	movs	r2, #1
 80086e4:	2102      	movs	r1, #2
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7ff ff1c 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80086ec:	4603      	mov	r3, r0
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d1ca      	bne.n	8008688 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80086f2:	6821      	ldr	r1, [r4, #0]
 80086f4:	2202      	movs	r2, #2
 80086f6:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80086f8:	6522      	str	r2, [r4, #80]	; 0x50
 80086fa:	e7c5      	b.n	8008688 <HAL_OSPI_Transmit+0x26>

080086fc <HAL_OSPI_Receive>:
{
 80086fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	4604      	mov	r4, r0
 8008704:	4688      	mov	r8, r1
 8008706:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8008708:	f7fe f9b2 	bl	8006a70 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800870c:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800870e:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8008710:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 8008714:	f1b8 0f00 	cmp.w	r8, #0
 8008718:	d00a      	beq.n	8008730 <HAL_OSPI_Receive+0x34>
 800871a:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800871c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800871e:	2b04      	cmp	r3, #4
 8008720:	d00a      	beq.n	8008738 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008722:	2310      	movs	r3, #16
 8008724:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
}
 8008728:	4618      	mov	r0, r3
 800872a:	b002      	add	sp, #8
 800872c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008730:	2308      	movs	r3, #8
 8008732:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e7f7      	b.n	8008728 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8008738:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800873a:	3301      	adds	r3, #1
 800873c:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800873e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008740:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8008742:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800874c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008750:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008752:	68e3      	ldr	r3, [r4, #12]
 8008754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008758:	d007      	beq.n	800876a <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8008760:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 8008764:	d02a      	beq.n	80087bc <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8008766:	649a      	str	r2, [r3, #72]	; 0x48
 8008768:	e001      	b.n	800876e <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800876e:	9700      	str	r7, [sp, #0]
 8008770:	4633      	mov	r3, r6
 8008772:	2201      	movs	r2, #1
 8008774:	2106      	movs	r1, #6
 8008776:	4620      	mov	r0, r4
 8008778:	f7ff fed4 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800877c:	4603      	mov	r3, r0
 800877e:	b960      	cbnz	r0, 800879a <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8008780:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008782:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8008786:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8008788:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800878a:	3101      	adds	r1, #1
 800878c:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800878e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008790:	3901      	subs	r1, #1
 8008792:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8008794:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008796:	2a00      	cmp	r2, #0
 8008798:	d1e9      	bne.n	800876e <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1c4      	bne.n	8008728 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800879e:	9700      	str	r7, [sp, #0]
 80087a0:	4633      	mov	r3, r6
 80087a2:	2201      	movs	r2, #1
 80087a4:	2102      	movs	r1, #2
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff febc 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80087ac:	4603      	mov	r3, r0
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d1ba      	bne.n	8008728 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80087b2:	6821      	ldr	r1, [r4, #0]
 80087b4:	2202      	movs	r2, #2
 80087b6:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80087b8:	6522      	str	r2, [r4, #80]	; 0x50
 80087ba:	e7b5      	b.n	8008728 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80087bc:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 80087c0:	e7d5      	b.n	800876e <HAL_OSPI_Receive+0x72>

080087c2 <HAL_OSPI_AutoPolling>:
{
 80087c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087c6:	b083      	sub	sp, #12
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 80087ce:	f7fe f94f 	bl	8006a70 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 80087d2:	6821      	ldr	r1, [r4, #0]
 80087d4:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80087d6:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80087da:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80087dc:	2904      	cmp	r1, #4
 80087de:	d005      	beq.n	80087ec <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80087e0:	2310      	movs	r3, #16
 80087e2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80087e4:	2001      	movs	r0, #1
}
 80087e6:	b003      	add	sp, #12
 80087e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087ec:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80087ee:	68eb      	ldr	r3, [r5, #12]
 80087f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087f4:	d1f4      	bne.n	80087e0 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80087f6:	f8cd 9000 	str.w	r9, [sp]
 80087fa:	4603      	mov	r3, r0
 80087fc:	2200      	movs	r2, #0
 80087fe:	2120      	movs	r1, #32
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff fe8f 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008806:	2800      	cmp	r0, #0
 8008808:	d1ed      	bne.n	80087e6 <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	682a      	ldr	r2, [r5, #0]
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	686a      	ldr	r2, [r5, #4]
 8008816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	692a      	ldr	r2, [r5, #16]
 800881e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8008822:	6821      	ldr	r1, [r4, #0]
 8008824:	680b      	ldr	r3, [r1, #0]
 8008826:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800882a:	68aa      	ldr	r2, [r5, #8]
 800882c:	68e8      	ldr	r0, [r5, #12]
 800882e:	4302      	orrs	r2, r0
 8008830:	4313      	orrs	r3, r2
 8008832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008836:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008838:	68e3      	ldr	r3, [r4, #12]
 800883a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800883e:	d007      	beq.n	8008850 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008846:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800884a:	d013      	beq.n	8008874 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800884c:	649f      	str	r7, [r3, #72]	; 0x48
 800884e:	e001      	b.n	8008854 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8008854:	f8cd 9000 	str.w	r9, [sp]
 8008858:	4643      	mov	r3, r8
 800885a:	2201      	movs	r2, #1
 800885c:	2108      	movs	r1, #8
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff fe60 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008864:	2800      	cmp	r0, #0
 8008866:	d1be      	bne.n	80087e6 <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	2208      	movs	r2, #8
 800886c:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800886e:	2302      	movs	r3, #2
 8008870:	6523      	str	r3, [r4, #80]	; 0x50
 8008872:	e7b8      	b.n	80087e6 <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8008874:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 8008878:	e7ec      	b.n	8008854 <HAL_OSPI_AutoPolling+0x92>
	...

0800887c <HAL_OSPI_MemoryMapped>:
{
 800887c:	b530      	push	{r4, r5, lr}
 800887e:	b083      	sub	sp, #12
 8008880:	4604      	mov	r4, r0
 8008882:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8008884:	f7fe f8f4 	bl	8006a70 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008888:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800888a:	2b04      	cmp	r3, #4
 800888c:	d004      	beq.n	8008898 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800888e:	2310      	movs	r3, #16
 8008890:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8008892:	2001      	movs	r0, #1
}
 8008894:	b003      	add	sp, #12
 8008896:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	4603      	mov	r3, r0
 800889e:	2200      	movs	r2, #0
 80088a0:	2120      	movs	r1, #32
 80088a2:	4620      	mov	r0, r4
 80088a4:	f7ff fe3e 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d1f3      	bne.n	8008894 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 80088ac:	2388      	movs	r3, #136	; 0x88
 80088ae:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	d009      	beq.n	80088ca <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	6811      	ldr	r1, [r2, #0]
 80088ba:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <HAL_OSPI_MemoryMapped+0x68>)
 80088bc:	400b      	ands	r3, r1
 80088be:	6829      	ldr	r1, [r5, #0]
 80088c0:	430b      	orrs	r3, r1
 80088c2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	e7e4      	b.n	8008894 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	686a      	ldr	r2, [r5, #4]
 80088ce:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	2210      	movs	r2, #16
 80088d6:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80088d8:	6822      	ldr	r2, [r4, #0]
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	e7e8      	b.n	80088b6 <HAL_OSPI_MemoryMapped+0x3a>
 80088e4:	cffffff7 	.word	0xcffffff7

080088e8 <HAL_OSPI_ErrorCallback>:
}
 80088e8:	4770      	bx	lr

080088ea <HAL_OSPI_AbortCpltCallback>:
}
 80088ea:	4770      	bx	lr

080088ec <OSPI_DMAAbortCplt>:
{
 80088ec:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 80088ee:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80088f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80088f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088fa:	d116      	bne.n	800892a <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80088fc:	6803      	ldr	r3, [r0, #0]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	f012 0f20 	tst.w	r2, #32
 8008904:	d00c      	beq.n	8008920 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008906:	2202      	movs	r2, #2
 8008908:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800890a:	6802      	ldr	r2, [r0, #0]
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008912:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8008914:	6802      	ldr	r2, [r0, #0]
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	f043 0302 	orr.w	r3, r3, #2
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	e008      	b.n	8008932 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 8008920:	2302      	movs	r3, #2
 8008922:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8008924:	f7ff ffe1 	bl	80088ea <HAL_OSPI_AbortCpltCallback>
 8008928:	e003      	b.n	8008932 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800892a:	2302      	movs	r3, #2
 800892c:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800892e:	f7ff ffdb 	bl	80088e8 <HAL_OSPI_ErrorCallback>
}
 8008932:	bd08      	pop	{r3, pc}

08008934 <HAL_OSPI_FifoThresholdCallback>:
}
 8008934:	4770      	bx	lr

08008936 <HAL_OSPI_CmdCpltCallback>:
}
 8008936:	4770      	bx	lr

08008938 <HAL_OSPI_RxCpltCallback>:
}
 8008938:	4770      	bx	lr

0800893a <HAL_OSPI_TxCpltCallback>:
}
 800893a:	4770      	bx	lr

0800893c <HAL_OSPI_StatusMatchCallback>:
}
 800893c:	4770      	bx	lr

0800893e <HAL_OSPI_TimeOutCallback>:
}
 800893e:	4770      	bx	lr

08008940 <HAL_OSPI_IRQHandler>:
{
 8008940:	b510      	push	{r4, lr}
 8008942:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8008944:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 8008946:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 8008948:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 800894a:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800894c:	f013 0f04 	tst.w	r3, #4
 8008950:	d027      	beq.n	80089a2 <HAL_OSPI_IRQHandler+0x62>
 8008952:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 8008956:	d024      	beq.n	80089a2 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8008958:	2818      	cmp	r0, #24
 800895a:	d00c      	beq.n	8008976 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800895c:	2828      	cmp	r0, #40	; 0x28
 800895e:	d015      	beq.n	800898c <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 8008960:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008962:	b923      	cbnz	r3, 800896e <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	6813      	ldr	r3, [r2, #0]
 8008968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800896c:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff ffe0 	bl	8008934 <HAL_OSPI_FifoThresholdCallback>
}
 8008974:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8008976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 800897e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008980:	3301      	adds	r3, #1
 8008982:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 8008984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008986:	3b01      	subs	r3, #1
 8008988:	64a3      	str	r3, [r4, #72]	; 0x48
 800898a:	e7e9      	b.n	8008960 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800898c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800898e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8008992:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8008994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008996:	3301      	adds	r3, #1
 8008998:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800899a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800899c:	3b01      	subs	r3, #1
 800899e:	64a3      	str	r3, [r4, #72]	; 0x48
 80089a0:	e7de      	b.n	8008960 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 80089a2:	f013 0f02 	tst.w	r3, #2
 80089a6:	d044      	beq.n	8008a32 <HAL_OSPI_IRQHandler+0xf2>
 80089a8:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80089ac:	d041      	beq.n	8008a32 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80089ae:	2828      	cmp	r0, #40	; 0x28
 80089b0:	d014      	beq.n	80089dc <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80089b2:	2102      	movs	r1, #2
 80089b4:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	6813      	ldr	r3, [r2, #0]
 80089ba:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80089be:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 80089c0:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80089c2:	2818      	cmp	r0, #24
 80089c4:	d029      	beq.n	8008a1a <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80089c6:	2808      	cmp	r0, #8
 80089c8:	d02b      	beq.n	8008a22 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80089ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80089ce:	d1d1      	bne.n	8008974 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80089d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80089d2:	bb53      	cbnz	r3, 8008a2a <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 80089d4:	4620      	mov	r0, r4
 80089d6:	f7ff ff88 	bl	80088ea <HAL_OSPI_AbortCpltCallback>
 80089da:	e7cb      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 80089dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089de:	b169      	cbz	r1, 80089fc <HAL_OSPI_IRQHandler+0xbc>
 80089e0:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 80089e4:	d00a      	beq.n	80089fc <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80089e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089e8:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80089ec:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80089ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089f0:	3301      	adds	r3, #1
 80089f2:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 80089f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80089f6:	3b01      	subs	r3, #1
 80089f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80089fa:	e7bb      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 80089fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1b8      	bne.n	8008974 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8008a02:	2102      	movs	r1, #2
 8008a04:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	6813      	ldr	r3, [r2, #0]
 8008a0a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008a0e:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 8008a10:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7ff ff90 	bl	8008938 <HAL_OSPI_RxCpltCallback>
 8008a18:	e7ac      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f7ff ff8d 	bl	800893a <HAL_OSPI_TxCpltCallback>
 8008a20:	e7a8      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff ff87 	bl	8008936 <HAL_OSPI_CmdCpltCallback>
 8008a28:	e7a4      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7ff ff5c 	bl	80088e8 <HAL_OSPI_ErrorCallback>
 8008a30:	e7a0      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8008a32:	f013 0f08 	tst.w	r3, #8
 8008a36:	d013      	beq.n	8008a60 <HAL_OSPI_IRQHandler+0x120>
 8008a38:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8008a3c:	d010      	beq.n	8008a60 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8008a3e:	2308      	movs	r3, #8
 8008a40:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008a4a:	d005      	beq.n	8008a58 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008a52:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8008a54:	2302      	movs	r3, #2
 8008a56:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f7ff ff6f 	bl	800893c <HAL_OSPI_StatusMatchCallback>
 8008a5e:	e789      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8008a60:	f013 0f01 	tst.w	r3, #1
 8008a64:	d029      	beq.n	8008aba <HAL_OSPI_IRQHandler+0x17a>
 8008a66:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8008a6a:	d026      	beq.n	8008aba <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8008a70:	6822      	ldr	r2, [r4, #0]
 8008a72:	6813      	ldr	r3, [r2, #0]
 8008a74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008a78:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	f012 0f04 	tst.w	r2, #4
 8008a86:	d012      	beq.n	8008aae <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	f022 0204 	bic.w	r2, r2, #4
 8008a8e:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8008a90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008a92:	4a11      	ldr	r2, [pc, #68]	; (8008ad8 <HAL_OSPI_IRQHandler+0x198>)
 8008a94:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8008a96:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008a98:	f7ff fc4c 	bl	8008334 <HAL_MDMA_Abort_IT>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	f43f af69 	beq.w	8008974 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff ff1e 	bl	80088e8 <HAL_OSPI_ErrorCallback>
 8008aac:	e762      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7ff ff18 	bl	80088e8 <HAL_OSPI_ErrorCallback>
 8008ab8:	e75c      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8008aba:	f013 0f10 	tst.w	r3, #16
 8008abe:	f43f af59 	beq.w	8008974 <HAL_OSPI_IRQHandler+0x34>
 8008ac2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008ac6:	f43f af55 	beq.w	8008974 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8008aca:	2310      	movs	r3, #16
 8008acc:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7ff ff35 	bl	800893e <HAL_OSPI_TimeOutCallback>
}
 8008ad4:	e74e      	b.n	8008974 <HAL_OSPI_IRQHandler+0x34>
 8008ad6:	bf00      	nop
 8008ad8:	080088ed 	.word	0x080088ed

08008adc <HAL_OSPI_Abort>:
{
 8008adc:	b530      	push	{r4, r5, lr}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008ae2:	f7fd ffc5 	bl	8006a70 <HAL_GetTick>
  state = hospi->State;
 8008ae6:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8008ae8:	f012 0f0c 	tst.w	r2, #12
 8008aec:	d036      	beq.n	8008b5c <HAL_OSPI_Abort+0x80>
 8008aee:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	f012 0f04 	tst.w	r2, #4
 8008af8:	d108      	bne.n	8008b0c <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 8008afa:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	6a1a      	ldr	r2, [r3, #32]
 8008b00:	f012 0f20 	tst.w	r2, #32
 8008b04:	d10e      	bne.n	8008b24 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 8008b06:	2302      	movs	r3, #2
 8008b08:	6523      	str	r3, [r4, #80]	; 0x50
 8008b0a:	e02a      	b.n	8008b62 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	f022 0204 	bic.w	r2, r2, #4
 8008b12:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8008b14:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008b16:	f7ff fbcf 	bl	80082b8 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d0ee      	beq.n	8008afc <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8008b1e:	2304      	movs	r3, #4
 8008b20:	6563      	str	r3, [r4, #84]	; 0x54
 8008b22:	e7eb      	b.n	8008afc <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	f042 0202 	orr.w	r2, r2, #2
 8008b2a:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8008b2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	462b      	mov	r3, r5
 8008b32:	2201      	movs	r2, #1
 8008b34:	2102      	movs	r1, #2
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7ff fcf4 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008b3c:	b988      	cbnz	r0, 8008b62 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	2202      	movs	r2, #2
 8008b42:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008b44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	462b      	mov	r3, r5
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2120      	movs	r1, #32
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7ff fce8 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008b54:	b928      	cbnz	r0, 8008b62 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 8008b56:	2302      	movs	r3, #2
 8008b58:	6523      	str	r3, [r4, #80]	; 0x50
 8008b5a:	e002      	b.n	8008b62 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8008b60:	2001      	movs	r0, #1
}
 8008b62:	b003      	add	sp, #12
 8008b64:	bd30      	pop	{r4, r5, pc}

08008b66 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 8008b66:	6581      	str	r1, [r0, #88]	; 0x58
}
 8008b68:	2000      	movs	r0, #0
 8008b6a:	4770      	bx	lr

08008b6c <HAL_OSPI_Init>:
{
 8008b6c:	b530      	push	{r4, r5, lr}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008b72:	f7fd ff7d 	bl	8006a70 <HAL_GetTick>
  if (hospi == NULL)
 8008b76:	2c00      	cmp	r4, #0
 8008b78:	d077      	beq.n	8008c6a <HAL_OSPI_Init+0xfe>
 8008b7a:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8008b80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008b82:	b113      	cbz	r3, 8008b8a <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8008b84:	2000      	movs	r0, #0
}
 8008b86:	b003      	add	sp, #12
 8008b88:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7f9 fdf4 	bl	8002778 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8008b90:	f241 3188 	movw	r1, #5000	; 0x1388
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7ff ffe6 	bl	8008b66 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 8008b9a:	6820      	ldr	r0, [r4, #0]
 8008b9c:	6882      	ldr	r2, [r0, #8]
 8008b9e:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <HAL_OSPI_Init+0x104>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	68e2      	ldr	r2, [r4, #12]
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	3901      	subs	r1, #1
 8008ba8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008bac:	6961      	ldr	r1, [r4, #20]
 8008bae:	3901      	subs	r1, #1
 8008bb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	69e1      	ldr	r1, [r4, #28]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8008bc0:	6822      	ldr	r2, [r4, #0]
 8008bc2:	68d3      	ldr	r3, [r2, #12]
 8008bc4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008bc8:	6a21      	ldr	r1, [r4, #32]
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008bce:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8008bd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008bd2:	6822      	ldr	r2, [r4, #0]
 8008bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bd8:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008bde:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8008be0:	6821      	ldr	r1, [r4, #0]
 8008be2:	680b      	ldr	r3, [r1, #0]
 8008be4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008be8:	6862      	ldr	r2, [r4, #4]
 8008bea:	3a01      	subs	r2, #1
 8008bec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bf0:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2120      	movs	r1, #32
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7ff fc91 	bl	8008524 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d1bf      	bne.n	8008b86 <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8008c06:	6821      	ldr	r1, [r4, #0]
 8008c08:	68cb      	ldr	r3, [r1, #12]
 8008c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008c10:	3a01      	subs	r2, #1
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8008c16:	6822      	ldr	r2, [r4, #0]
 8008c18:	6813      	ldr	r3, [r2, #0]
 8008c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c1e:	68a1      	ldr	r1, [r4, #8]
 8008c20:	430b      	orrs	r3, r1
 8008c22:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8008c24:	6821      	ldr	r1, [r4, #0]
 8008c26:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 8008c2a:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 8008c2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008c30:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008c32:	432a      	orrs	r2, r5
 8008c34:	4313      	orrs	r3, r2
 8008c36:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	6813      	ldr	r3, [r2, #0]
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8008c44:	69a3      	ldr	r3, [r4, #24]
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d006      	beq.n	8008c58 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c50:	d008      	beq.n	8008c64 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 8008c52:	2302      	movs	r3, #2
 8008c54:	6523      	str	r3, [r4, #80]	; 0x50
 8008c56:	e796      	b.n	8008b86 <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	6893      	ldr	r3, [r2, #8]
 8008c5c:	f043 0302 	orr.w	r3, r3, #2
 8008c60:	6093      	str	r3, [r2, #8]
 8008c62:	e7f2      	b.n	8008c4a <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8008c64:	2301      	movs	r3, #1
 8008c66:	6523      	str	r3, [r4, #80]	; 0x50
 8008c68:	e78d      	b.n	8008b86 <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	e78b      	b.n	8008b86 <HAL_OSPI_Init+0x1a>
 8008c6e:	bf00      	nop
 8008c70:	f8e0f8f4 	.word	0xf8e0f8f4

08008c74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c78:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <HAL_PWREx_ConfigSupply+0x90>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	2b06      	cmp	r3, #6
 8008c82:	d007      	beq.n	8008c94 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c84:	4b1f      	ldr	r3, [pc, #124]	; (8008d04 <HAL_PWREx_ConfigSupply+0x90>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c8c:	4283      	cmp	r3, r0
 8008c8e:	d036      	beq.n	8008cfe <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c90:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c94:	4a1b      	ldr	r2, [pc, #108]	; (8008d04 <HAL_PWREx_ConfigSupply+0x90>)
 8008c96:	68d3      	ldr	r3, [r2, #12]
 8008c98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008c9c:	4303      	orrs	r3, r0
 8008c9e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8008ca0:	f7fd fee6 	bl	8006a70 <HAL_GetTick>
 8008ca4:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ca6:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <HAL_PWREx_ConfigSupply+0x90>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008cae:	d107      	bne.n	8008cc0 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cb0:	f7fd fede 	bl	8006a70 <HAL_GetTick>
 8008cb4:	1b43      	subs	r3, r0, r5
 8008cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cba:	d9f4      	bls.n	8008ca6 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	e7e8      	b.n	8008c92 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008cc0:	2c2e      	cmp	r4, #46	; 0x2e
 8008cc2:	bf18      	it	ne
 8008cc4:	2c1e      	cmpne	r4, #30
 8008cc6:	d008      	beq.n	8008cda <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8008cc8:	2c2d      	cmp	r4, #45	; 0x2d
 8008cca:	bf14      	ite	ne
 8008ccc:	2300      	movne	r3, #0
 8008cce:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008cd0:	2c1d      	cmp	r4, #29
 8008cd2:	d002      	beq.n	8008cda <HAL_PWREx_ConfigSupply+0x66>
 8008cd4:	b90b      	cbnz	r3, 8008cda <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e7db      	b.n	8008c92 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8008cda:	f7fd fec9 	bl	8006a70 <HAL_GetTick>
 8008cde:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008ce0:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <HAL_PWREx_ConfigSupply+0x90>)
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008ce8:	d107      	bne.n	8008cfa <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cea:	f7fd fec1 	bl	8006a70 <HAL_GetTick>
 8008cee:	1b00      	subs	r0, r0, r4
 8008cf0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008cf4:	d9f4      	bls.n	8008ce0 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	e7cb      	b.n	8008c92 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	e7c9      	b.n	8008c92 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e7c7      	b.n	8008c92 <HAL_PWREx_ConfigSupply+0x1e>
 8008d02:	bf00      	nop
 8008d04:	58024800 	.word	0x58024800

08008d08 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	f000 82f0 	beq.w	80092ee <HAL_RCC_OscConfig+0x5e6>
{
 8008d0e:	b538      	push	{r3, r4, r5, lr}
 8008d10:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d12:	6803      	ldr	r3, [r0, #0]
 8008d14:	f013 0f01 	tst.w	r3, #1
 8008d18:	d029      	beq.n	8008d6e <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d1a:	4aa1      	ldr	r2, [pc, #644]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008d1c:	6913      	ldr	r3, [r2, #16]
 8008d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d22:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d24:	2b10      	cmp	r3, #16
 8008d26:	d019      	beq.n	8008d5c <HAL_RCC_OscConfig+0x54>
 8008d28:	2b18      	cmp	r3, #24
 8008d2a:	d013      	beq.n	8008d54 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d2c:	6863      	ldr	r3, [r4, #4]
 8008d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d32:	d043      	beq.n	8008dbc <HAL_RCC_OscConfig+0xb4>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d158      	bne.n	8008dea <HAL_RCC_OscConfig+0xe2>
 8008d38:	4b99      	ldr	r3, [pc, #612]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e038      	b.n	8008dc6 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d54:	f002 0203 	and.w	r2, r2, #3
 8008d58:	2a02      	cmp	r2, #2
 8008d5a:	d1e7      	bne.n	8008d2c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d5c:	4b90      	ldr	r3, [pc, #576]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d64:	d003      	beq.n	8008d6e <HAL_RCC_OscConfig+0x66>
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 82c2 	beq.w	80092f2 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	f013 0f02 	tst.w	r3, #2
 8008d74:	f000 80a2 	beq.w	8008ebc <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d78:	4a89      	ldr	r2, [pc, #548]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008d7a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d7e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008d82:	d074      	beq.n	8008e6e <HAL_RCC_OscConfig+0x166>
 8008d84:	2b18      	cmp	r3, #24
 8008d86:	d06f      	beq.n	8008e68 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d88:	68e3      	ldr	r3, [r4, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 80c3 	beq.w	8008f16 <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d90:	4983      	ldr	r1, [pc, #524]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008d92:	680a      	ldr	r2, [r1, #0]
 8008d94:	f022 0219 	bic.w	r2, r2, #25
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9c:	f7fd fe68 	bl	8006a70 <HAL_GetTick>
 8008da0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008da2:	4b7f      	ldr	r3, [pc, #508]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f013 0f04 	tst.w	r3, #4
 8008daa:	f040 80ab 	bne.w	8008f04 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dae:	f7fd fe5f 	bl	8006a70 <HAL_GetTick>
 8008db2:	1b40      	subs	r0, r0, r5
 8008db4:	2802      	cmp	r0, #2
 8008db6:	d9f4      	bls.n	8008da2 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8008db8:	2003      	movs	r0, #3
 8008dba:	e2a1      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dbc:	4a78      	ldr	r2, [pc, #480]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008dbe:	6813      	ldr	r3, [r2, #0]
 8008dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dc6:	6863      	ldr	r3, [r4, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d03e      	beq.n	8008e4a <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 8008dcc:	f7fd fe50 	bl	8006a70 <HAL_GetTick>
 8008dd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008dd2:	4b73      	ldr	r3, [pc, #460]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008dda:	d1c8      	bne.n	8008d6e <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ddc:	f7fd fe48 	bl	8006a70 <HAL_GetTick>
 8008de0:	1b40      	subs	r0, r0, r5
 8008de2:	2864      	cmp	r0, #100	; 0x64
 8008de4:	d9f5      	bls.n	8008dd2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8008de6:	2003      	movs	r0, #3
 8008de8:	e28a      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dee:	d010      	beq.n	8008e12 <HAL_RCC_OscConfig+0x10a>
 8008df0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008df4:	d01b      	beq.n	8008e2e <HAL_RCC_OscConfig+0x126>
 8008df6:	4b6a      	ldr	r3, [pc, #424]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e7d9      	b.n	8008dc6 <HAL_RCC_OscConfig+0xbe>
 8008e12:	4b63      	ldr	r3, [pc, #396]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	e7cb      	b.n	8008dc6 <HAL_RCC_OscConfig+0xbe>
 8008e2e:	4b5c      	ldr	r3, [pc, #368]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	e7bd      	b.n	8008dc6 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8008e4a:	f7fd fe11 	bl	8006a70 <HAL_GetTick>
 8008e4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e50:	4b53      	ldr	r3, [pc, #332]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008e58:	d089      	beq.n	8008d6e <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e5a:	f7fd fe09 	bl	8006a70 <HAL_GetTick>
 8008e5e:	1b40      	subs	r0, r0, r5
 8008e60:	2864      	cmp	r0, #100	; 0x64
 8008e62:	d9f5      	bls.n	8008e50 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 8008e64:	2003      	movs	r0, #3
 8008e66:	e24b      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e68:	f012 0f03 	tst.w	r2, #3
 8008e6c:	d18c      	bne.n	8008d88 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e6e:	4b4c      	ldr	r3, [pc, #304]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f013 0f04 	tst.w	r3, #4
 8008e76:	d003      	beq.n	8008e80 <HAL_RCC_OscConfig+0x178>
 8008e78:	68e3      	ldr	r3, [r4, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 823b 	beq.w	80092f6 <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e80:	4a47      	ldr	r2, [pc, #284]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008e82:	6813      	ldr	r3, [r2, #0]
 8008e84:	f023 0319 	bic.w	r3, r3, #25
 8008e88:	68e1      	ldr	r1, [r4, #12]
 8008e8a:	430b      	orrs	r3, r1
 8008e8c:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8008e8e:	f7fd fdef 	bl	8006a70 <HAL_GetTick>
 8008e92:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e94:	4b42      	ldr	r3, [pc, #264]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f013 0f04 	tst.w	r3, #4
 8008e9c:	d106      	bne.n	8008eac <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e9e:	f7fd fde7 	bl	8006a70 <HAL_GetTick>
 8008ea2:	1b40      	subs	r0, r0, r5
 8008ea4:	2802      	cmp	r0, #2
 8008ea6:	d9f5      	bls.n	8008e94 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 8008ea8:	2003      	movs	r0, #3
 8008eaa:	e229      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eac:	4a3c      	ldr	r2, [pc, #240]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008eae:	6853      	ldr	r3, [r2, #4]
 8008eb0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008eb4:	6921      	ldr	r1, [r4, #16]
 8008eb6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008eba:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	f013 0f10 	tst.w	r3, #16
 8008ec2:	d051      	beq.n	8008f68 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ec4:	4a36      	ldr	r2, [pc, #216]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008ec6:	6913      	ldr	r3, [r2, #16]
 8008ec8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ecc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d039      	beq.n	8008f46 <HAL_RCC_OscConfig+0x23e>
 8008ed2:	2b18      	cmp	r3, #24
 8008ed4:	d033      	beq.n	8008f3e <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008ed6:	69e3      	ldr	r3, [r4, #28]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d06c      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008edc:	4a30      	ldr	r2, [pc, #192]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008ede:	6813      	ldr	r3, [r2, #0]
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee6:	f7fd fdc3 	bl	8006a70 <HAL_GetTick>
 8008eea:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eec:	4b2c      	ldr	r3, [pc, #176]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ef4:	d156      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ef6:	f7fd fdbb 	bl	8006a70 <HAL_GetTick>
 8008efa:	1b40      	subs	r0, r0, r5
 8008efc:	2802      	cmp	r0, #2
 8008efe:	d9f5      	bls.n	8008eec <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 8008f00:	2003      	movs	r0, #3
 8008f02:	e1fd      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f04:	4a26      	ldr	r2, [pc, #152]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008f06:	6853      	ldr	r3, [r2, #4]
 8008f08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f0c:	6921      	ldr	r1, [r4, #16]
 8008f0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008f12:	6053      	str	r3, [r2, #4]
 8008f14:	e7d2      	b.n	8008ebc <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 8008f16:	4a22      	ldr	r2, [pc, #136]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008f18:	6813      	ldr	r3, [r2, #0]
 8008f1a:	f023 0301 	bic.w	r3, r3, #1
 8008f1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008f20:	f7fd fda6 	bl	8006a70 <HAL_GetTick>
 8008f24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f26:	4b1e      	ldr	r3, [pc, #120]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f013 0f04 	tst.w	r3, #4
 8008f2e:	d0c5      	beq.n	8008ebc <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f30:	f7fd fd9e 	bl	8006a70 <HAL_GetTick>
 8008f34:	1b40      	subs	r0, r0, r5
 8008f36:	2802      	cmp	r0, #2
 8008f38:	d9f5      	bls.n	8008f26 <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 8008f3a:	2003      	movs	r0, #3
 8008f3c:	e1e0      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f3e:	f002 0203 	and.w	r2, r2, #3
 8008f42:	2a01      	cmp	r2, #1
 8008f44:	d1c7      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f46:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008f4e:	d003      	beq.n	8008f58 <HAL_RCC_OscConfig+0x250>
 8008f50:	69e3      	ldr	r3, [r4, #28]
 8008f52:	2b80      	cmp	r3, #128	; 0x80
 8008f54:	f040 81d1 	bne.w	80092fa <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f58:	4a11      	ldr	r2, [pc, #68]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008f5a:	68d3      	ldr	r3, [r2, #12]
 8008f5c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008f60:	6a21      	ldr	r1, [r4, #32]
 8008f62:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008f66:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	f013 0f08 	tst.w	r3, #8
 8008f6e:	d04a      	beq.n	8009006 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f70:	6963      	ldr	r3, [r4, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d033      	beq.n	8008fde <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f76:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008f78:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f80:	f7fd fd76 	bl	8006a70 <HAL_GetTick>
 8008f84:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f86:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <HAL_RCC_OscConfig+0x298>)
 8008f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f8a:	f013 0f02 	tst.w	r3, #2
 8008f8e:	d13a      	bne.n	8009006 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f90:	f7fd fd6e 	bl	8006a70 <HAL_GetTick>
 8008f94:	1b40      	subs	r0, r0, r5
 8008f96:	2802      	cmp	r0, #2
 8008f98:	d9f5      	bls.n	8008f86 <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 8008f9a:	2003      	movs	r0, #3
 8008f9c:	e1b0      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 8008f9e:	bf00      	nop
 8008fa0:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fa4:	4a8c      	ldr	r2, [pc, #560]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8008fa6:	68d3      	ldr	r3, [r2, #12]
 8008fa8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008fac:	6a21      	ldr	r1, [r4, #32]
 8008fae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008fb2:	60d3      	str	r3, [r2, #12]
 8008fb4:	e7d8      	b.n	8008f68 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 8008fb6:	4a88      	ldr	r2, [pc, #544]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8008fb8:	6813      	ldr	r3, [r2, #0]
 8008fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fbe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008fc0:	f7fd fd56 	bl	8006a70 <HAL_GetTick>
 8008fc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fc6:	4b84      	ldr	r3, [pc, #528]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008fce:	d0cb      	beq.n	8008f68 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008fd0:	f7fd fd4e 	bl	8006a70 <HAL_GetTick>
 8008fd4:	1b40      	subs	r0, r0, r5
 8008fd6:	2802      	cmp	r0, #2
 8008fd8:	d9f5      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8008fda:	2003      	movs	r0, #3
 8008fdc:	e190      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fde:	4a7e      	ldr	r2, [pc, #504]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8008fe0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008fe2:	f023 0301 	bic.w	r3, r3, #1
 8008fe6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe8:	f7fd fd42 	bl	8006a70 <HAL_GetTick>
 8008fec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fee:	4b7a      	ldr	r3, [pc, #488]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8008ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff2:	f013 0f02 	tst.w	r3, #2
 8008ff6:	d006      	beq.n	8009006 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ff8:	f7fd fd3a 	bl	8006a70 <HAL_GetTick>
 8008ffc:	1b40      	subs	r0, r0, r5
 8008ffe:	2802      	cmp	r0, #2
 8009000:	d9f5      	bls.n	8008fee <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 8009002:	2003      	movs	r0, #3
 8009004:	e17c      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	f013 0f20 	tst.w	r3, #32
 800900c:	d029      	beq.n	8009062 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800900e:	69a3      	ldr	r3, [r4, #24]
 8009010:	b19b      	cbz	r3, 800903a <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009012:	4a71      	ldr	r2, [pc, #452]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009014:	6813      	ldr	r3, [r2, #0]
 8009016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800901a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800901c:	f7fd fd28 	bl	8006a70 <HAL_GetTick>
 8009020:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009022:	4b6d      	ldr	r3, [pc, #436]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800902a:	d11a      	bne.n	8009062 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800902c:	f7fd fd20 	bl	8006a70 <HAL_GetTick>
 8009030:	1b40      	subs	r0, r0, r5
 8009032:	2802      	cmp	r0, #2
 8009034:	d9f5      	bls.n	8009022 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 8009036:	2003      	movs	r0, #3
 8009038:	e162      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800903a:	4a67      	ldr	r2, [pc, #412]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 800903c:	6813      	ldr	r3, [r2, #0]
 800903e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009042:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009044:	f7fd fd14 	bl	8006a70 <HAL_GetTick>
 8009048:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800904a:	4b63      	ldr	r3, [pc, #396]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009052:	d006      	beq.n	8009062 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009054:	f7fd fd0c 	bl	8006a70 <HAL_GetTick>
 8009058:	1b40      	subs	r0, r0, r5
 800905a:	2802      	cmp	r0, #2
 800905c:	d9f5      	bls.n	800904a <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 800905e:	2003      	movs	r0, #3
 8009060:	e14e      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	f013 0f04 	tst.w	r3, #4
 8009068:	d122      	bne.n	80090b0 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800906a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8146 	beq.w	80092fe <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009072:	4a59      	ldr	r2, [pc, #356]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009074:	6912      	ldr	r2, [r2, #16]
 8009076:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800907a:	2a18      	cmp	r2, #24
 800907c:	f000 810e 	beq.w	800929c <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009080:	2b02      	cmp	r3, #2
 8009082:	f000 8094 	beq.w	80091ae <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009086:	4a54      	ldr	r2, [pc, #336]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009088:	6813      	ldr	r3, [r2, #0]
 800908a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800908e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fd fcee 	bl	8006a70 <HAL_GetTick>
 8009094:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009096:	4b50      	ldr	r3, [pc, #320]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800909e:	f000 80fb 	beq.w	8009298 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090a2:	f7fd fce5 	bl	8006a70 <HAL_GetTick>
 80090a6:	1b00      	subs	r0, r0, r4
 80090a8:	2802      	cmp	r0, #2
 80090aa:	d9f4      	bls.n	8009096 <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 80090ac:	2003      	movs	r0, #3
 80090ae:	e127      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 80090b0:	4a4a      	ldr	r2, [pc, #296]	; (80091dc <HAL_RCC_OscConfig+0x4d4>)
 80090b2:	6813      	ldr	r3, [r2, #0]
 80090b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80090ba:	f7fd fcd9 	bl	8006a70 <HAL_GetTick>
 80090be:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090c0:	4b46      	ldr	r3, [pc, #280]	; (80091dc <HAL_RCC_OscConfig+0x4d4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80090c8:	d106      	bne.n	80090d8 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090ca:	f7fd fcd1 	bl	8006a70 <HAL_GetTick>
 80090ce:	1b40      	subs	r0, r0, r5
 80090d0:	2864      	cmp	r0, #100	; 0x64
 80090d2:	d9f5      	bls.n	80090c0 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 80090d4:	2003      	movs	r0, #3
 80090d6:	e113      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090d8:	68a3      	ldr	r3, [r4, #8]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d00e      	beq.n	80090fc <HAL_RCC_OscConfig+0x3f4>
 80090de:	bb33      	cbnz	r3, 800912e <HAL_RCC_OscConfig+0x426>
 80090e0:	4b3d      	ldr	r3, [pc, #244]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 80090e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	671a      	str	r2, [r3, #112]	; 0x70
 80090ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090f0:	671a      	str	r2, [r3, #112]	; 0x70
 80090f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090f4:	f022 0204 	bic.w	r2, r2, #4
 80090f8:	671a      	str	r2, [r3, #112]	; 0x70
 80090fa:	e004      	b.n	8009106 <HAL_RCC_OscConfig+0x3fe>
 80090fc:	4a36      	ldr	r2, [pc, #216]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 80090fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009100:	f043 0301 	orr.w	r3, r3, #1
 8009104:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d03e      	beq.n	800918a <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 800910c:	f7fd fcb0 	bl	8006a70 <HAL_GetTick>
 8009110:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009112:	4b31      	ldr	r3, [pc, #196]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	f013 0f02 	tst.w	r3, #2
 800911a:	d1a6      	bne.n	800906a <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800911c:	f7fd fca8 	bl	8006a70 <HAL_GetTick>
 8009120:	1b40      	subs	r0, r0, r5
 8009122:	f241 3388 	movw	r3, #5000	; 0x1388
 8009126:	4298      	cmp	r0, r3
 8009128:	d9f3      	bls.n	8009112 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800912a:	2003      	movs	r0, #3
 800912c:	e0e8      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800912e:	2b05      	cmp	r3, #5
 8009130:	d00f      	beq.n	8009152 <HAL_RCC_OscConfig+0x44a>
 8009132:	2b85      	cmp	r3, #133	; 0x85
 8009134:	d01b      	beq.n	800916e <HAL_RCC_OscConfig+0x466>
 8009136:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009138:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800913a:	f022 0201 	bic.w	r2, r2, #1
 800913e:	671a      	str	r2, [r3, #112]	; 0x70
 8009140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009142:	f022 0204 	bic.w	r2, r2, #4
 8009146:	671a      	str	r2, [r3, #112]	; 0x70
 8009148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800914a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800914e:	671a      	str	r2, [r3, #112]	; 0x70
 8009150:	e7d9      	b.n	8009106 <HAL_RCC_OscConfig+0x3fe>
 8009152:	4b21      	ldr	r3, [pc, #132]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009154:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009156:	f042 0204 	orr.w	r2, r2, #4
 800915a:	671a      	str	r2, [r3, #112]	; 0x70
 800915c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800915e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009162:	671a      	str	r2, [r3, #112]	; 0x70
 8009164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009166:	f042 0201 	orr.w	r2, r2, #1
 800916a:	671a      	str	r2, [r3, #112]	; 0x70
 800916c:	e7cb      	b.n	8009106 <HAL_RCC_OscConfig+0x3fe>
 800916e:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009170:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009172:	f042 0204 	orr.w	r2, r2, #4
 8009176:	671a      	str	r2, [r3, #112]	; 0x70
 8009178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800917a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800917e:	671a      	str	r2, [r3, #112]	; 0x70
 8009180:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009182:	f042 0201 	orr.w	r2, r2, #1
 8009186:	671a      	str	r2, [r3, #112]	; 0x70
 8009188:	e7bd      	b.n	8009106 <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 800918a:	f7fd fc71 	bl	8006a70 <HAL_GetTick>
 800918e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 8009192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009194:	f013 0f02 	tst.w	r3, #2
 8009198:	f43f af67 	beq.w	800906a <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800919c:	f7fd fc68 	bl	8006a70 <HAL_GetTick>
 80091a0:	1b40      	subs	r0, r0, r5
 80091a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80091a6:	4298      	cmp	r0, r3
 80091a8:	d9f2      	bls.n	8009190 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 80091aa:	2003      	movs	r0, #3
 80091ac:	e0a8      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 80091ae:	4a0a      	ldr	r2, [pc, #40]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 80091b0:	6813      	ldr	r3, [r2, #0]
 80091b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80091b8:	f7fd fc5a 	bl	8006a70 <HAL_GetTick>
 80091bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091be:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <HAL_RCC_OscConfig+0x4d0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80091c6:	d00b      	beq.n	80091e0 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091c8:	f7fd fc52 	bl	8006a70 <HAL_GetTick>
 80091cc:	1b40      	subs	r0, r0, r5
 80091ce:	2802      	cmp	r0, #2
 80091d0:	d9f5      	bls.n	80091be <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 80091d2:	2003      	movs	r0, #3
 80091d4:	e094      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 80091d6:	bf00      	nop
 80091d8:	58024400 	.word	0x58024400
 80091dc:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091e0:	4b4f      	ldr	r3, [pc, #316]	; (8009320 <HAL_RCC_OscConfig+0x618>)
 80091e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80091e4:	4a4f      	ldr	r2, [pc, #316]	; (8009324 <HAL_RCC_OscConfig+0x61c>)
 80091e6:	400a      	ands	r2, r1
 80091e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80091ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091ec:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80091f0:	430a      	orrs	r2, r1
 80091f2:	629a      	str	r2, [r3, #40]	; 0x28
 80091f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80091f6:	3a01      	subs	r2, #1
 80091f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091fe:	3901      	subs	r1, #1
 8009200:	0249      	lsls	r1, r1, #9
 8009202:	b289      	uxth	r1, r1
 8009204:	430a      	orrs	r2, r1
 8009206:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009208:	3901      	subs	r1, #1
 800920a:	0409      	lsls	r1, r1, #16
 800920c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8009210:	430a      	orrs	r2, r1
 8009212:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009214:	3901      	subs	r1, #1
 8009216:	0609      	lsls	r1, r1, #24
 8009218:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800921c:	430a      	orrs	r2, r1
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8009220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009222:	f022 0201 	bic.w	r2, r2, #1
 8009226:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009228:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800922a:	4a3f      	ldr	r2, [pc, #252]	; (8009328 <HAL_RCC_OscConfig+0x620>)
 800922c:	400a      	ands	r2, r1
 800922e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009230:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8009234:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009238:	f022 020c 	bic.w	r2, r2, #12
 800923c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800923e:	430a      	orrs	r2, r1
 8009240:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009244:	f022 0202 	bic.w	r2, r2, #2
 8009248:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800924a:	430a      	orrs	r2, r1
 800924c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009254:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009258:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800925c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800925e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009260:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009264:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	f042 0201 	orr.w	r2, r2, #1
 800926c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009274:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009276:	f7fd fbfb 	bl	8006a70 <HAL_GetTick>
 800927a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800927c:	4b28      	ldr	r3, [pc, #160]	; (8009320 <HAL_RCC_OscConfig+0x618>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009284:	d106      	bne.n	8009294 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009286:	f7fd fbf3 	bl	8006a70 <HAL_GetTick>
 800928a:	1b00      	subs	r0, r0, r4
 800928c:	2802      	cmp	r0, #2
 800928e:	d9f5      	bls.n	800927c <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 8009290:	2003      	movs	r0, #3
 8009292:	e035      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8009294:	2000      	movs	r0, #0
 8009296:	e033      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 8009298:	2000      	movs	r0, #0
 800929a:	e031      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800929c:	4920      	ldr	r1, [pc, #128]	; (8009320 <HAL_RCC_OscConfig+0x618>)
 800929e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092a0:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d02d      	beq.n	8009302 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092a6:	f002 0303 	and.w	r3, r2, #3
 80092aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092ac:	428b      	cmp	r3, r1
 80092ae:	d12a      	bne.n	8009306 <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092b0:	f3c2 1205 	ubfx	r2, r2, #4, #6
 80092b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d127      	bne.n	800930a <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092ba:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80092be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80092c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d123      	bne.n	800930e <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092c6:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80092ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092cc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d11f      	bne.n	8009312 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092d2:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80092d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092da:	429a      	cmp	r2, r3
 80092dc:	d11b      	bne.n	8009316 <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80092de:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80092e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092e6:	4298      	cmp	r0, r3
 80092e8:	d117      	bne.n	800931a <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 80092ea:	2000      	movs	r0, #0
 80092ec:	e008      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 80092ee:	2001      	movs	r0, #1
}
 80092f0:	4770      	bx	lr
        return HAL_ERROR;
 80092f2:	2001      	movs	r0, #1
 80092f4:	e004      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 80092f6:	2001      	movs	r0, #1
 80092f8:	e002      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 80092fa:	2001      	movs	r0, #1
 80092fc:	e000      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 80092fe:	2000      	movs	r0, #0
}
 8009300:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8009302:	2001      	movs	r0, #1
 8009304:	e7fc      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 8009306:	2001      	movs	r0, #1
 8009308:	e7fa      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 800930a:	2001      	movs	r0, #1
 800930c:	e7f8      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 800930e:	2001      	movs	r0, #1
 8009310:	e7f6      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 8009312:	2001      	movs	r0, #1
 8009314:	e7f4      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 8009316:	2001      	movs	r0, #1
 8009318:	e7f2      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 800931a:	2001      	movs	r0, #1
 800931c:	e7f0      	b.n	8009300 <HAL_RCC_OscConfig+0x5f8>
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
 8009324:	fffffc0c 	.word	0xfffffc0c
 8009328:	ffff0007 	.word	0xffff0007

0800932c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800932c:	4b74      	ldr	r3, [pc, #464]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009334:	2b10      	cmp	r3, #16
 8009336:	f000 80de 	beq.w	80094f6 <HAL_RCC_GetSysClockFreq+0x1ca>
 800933a:	2b18      	cmp	r3, #24
 800933c:	d010      	beq.n	8009360 <HAL_RCC_GetSysClockFreq+0x34>
 800933e:	b10b      	cbz	r3, 8009344 <HAL_RCC_GetSysClockFreq+0x18>
 8009340:	4870      	ldr	r0, [pc, #448]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8009342:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009344:	4b6e      	ldr	r3, [pc, #440]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f013 0f20 	tst.w	r3, #32
 800934c:	f000 80d5 	beq.w	80094fa <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009350:	4b6b      	ldr	r3, [pc, #428]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8009358:	4b6b      	ldr	r3, [pc, #428]	; (8009508 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800935a:	fa23 f000 	lsr.w	r0, r3, r0
 800935e:	4770      	bx	lr
{
 8009360:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009362:	4a67      	ldr	r2, [pc, #412]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009364:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009366:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800936a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800936c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009370:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009372:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009376:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009378:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800937c:	fb0c f303 	mul.w	r3, ip, r3
 8009380:	ee07 3a90 	vmov	s15, r3
 8009384:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8009388:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800938c:	f000 8093 	beq.w	80094b6 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8009390:	2901      	cmp	r1, #1
 8009392:	d065      	beq.n	8009460 <HAL_RCC_GetSysClockFreq+0x134>
 8009394:	2902      	cmp	r1, #2
 8009396:	f000 8091 	beq.w	80094bc <HAL_RCC_GetSysClockFreq+0x190>
 800939a:	b1e1      	cbz	r1, 80093d6 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800939c:	ee07 0a10 	vmov	s14, r0
 80093a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80093a4:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800950c <HAL_RCC_GetSysClockFreq+0x1e0>
 80093a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80093ac:	4b54      	ldr	r3, [pc, #336]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b4:	ee06 3a90 	vmov	s13, r3
 80093b8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80093bc:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8009510 <HAL_RCC_GetSysClockFreq+0x1e4>
 80093c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80093c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d0:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80093d4:	e060      	b.n	8009498 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d6:	6813      	ldr	r3, [r2, #0]
 80093d8:	f013 0f20 	tst.w	r3, #32
 80093dc:	d023      	beq.n	8009426 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093de:	4611      	mov	r1, r2
 80093e0:	6812      	ldr	r2, [r2, #0]
 80093e2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80093e6:	4b48      	ldr	r3, [pc, #288]	; (8009508 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80093e8:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093ea:	ee07 3a10 	vmov	s14, r3
 80093ee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80093f2:	ee07 0a10 	vmov	s14, r0
 80093f6:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80093fa:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80093fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009404:	ee06 3a90 	vmov	s13, r3
 8009408:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800940c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009510 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009410:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009424:	e038      	b.n	8009498 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009426:	ee07 0a10 	vmov	s14, r0
 800942a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800942e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8009514 <HAL_RCC_GetSysClockFreq+0x1e8>
 8009432:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009436:	4b32      	ldr	r3, [pc, #200]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee06 3a90 	vmov	s13, r3
 8009442:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009446:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8009510 <HAL_RCC_GetSysClockFreq+0x1e4>
 800944a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800945e:	e01b      	b.n	8009498 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009460:	ee07 0a10 	vmov	s14, r0
 8009464:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8009468:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800950c <HAL_RCC_GetSysClockFreq+0x1e0>
 800946c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009470:	4b23      	ldr	r3, [pc, #140]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009478:	ee06 3a90 	vmov	s13, r3
 800947c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009480:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8009510 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009484:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009494:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009498:	4b19      	ldr	r3, [pc, #100]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80094a0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80094ae:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80094b2:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80094b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ba:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094bc:	ee07 0a10 	vmov	s14, r0
 80094c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80094c4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009518 <HAL_RCC_GetSysClockFreq+0x1ec>
 80094c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d4:	ee06 3a90 	vmov	s13, r3
 80094d8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80094dc:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8009510 <HAL_RCC_GetSysClockFreq+0x1e4>
 80094e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80094e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f0:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80094f4:	e7d0      	b.n	8009498 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 80094f6:	4809      	ldr	r0, [pc, #36]	; (800951c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094f8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094fa:	4803      	ldr	r0, [pc, #12]	; (8009508 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	58024400 	.word	0x58024400
 8009504:	003d0900 	.word	0x003d0900
 8009508:	03d09000 	.word	0x03d09000
 800950c:	4a742400 	.word	0x4a742400
 8009510:	39000000 	.word	0x39000000
 8009514:	4c742400 	.word	0x4c742400
 8009518:	4bb71b00 	.word	0x4bb71b00
 800951c:	016e3600 	.word	0x016e3600

08009520 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009520:	2800      	cmp	r0, #0
 8009522:	f000 8132 	beq.w	800978a <HAL_RCC_ClockConfig+0x26a>
{
 8009526:	b570      	push	{r4, r5, r6, lr}
 8009528:	460d      	mov	r5, r1
 800952a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800952c:	4b9b      	ldr	r3, [pc, #620]	; (800979c <HAL_RCC_ClockConfig+0x27c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	428b      	cmp	r3, r1
 8009536:	d20b      	bcs.n	8009550 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009538:	4a98      	ldr	r2, [pc, #608]	; (800979c <HAL_RCC_ClockConfig+0x27c>)
 800953a:	6813      	ldr	r3, [r2, #0]
 800953c:	f023 030f 	bic.w	r3, r3, #15
 8009540:	430b      	orrs	r3, r1
 8009542:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009544:	6813      	ldr	r3, [r2, #0]
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	428b      	cmp	r3, r1
 800954c:	f040 811f 	bne.w	800978e <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	f013 0f04 	tst.w	r3, #4
 8009556:	d00c      	beq.n	8009572 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009558:	6922      	ldr	r2, [r4, #16]
 800955a:	4b91      	ldr	r3, [pc, #580]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009562:	429a      	cmp	r2, r3
 8009564:	d905      	bls.n	8009572 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009566:	498e      	ldr	r1, [pc, #568]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009568:	698b      	ldr	r3, [r1, #24]
 800956a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956e:	431a      	orrs	r2, r3
 8009570:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	f013 0f08 	tst.w	r3, #8
 8009578:	d00c      	beq.n	8009594 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800957a:	6962      	ldr	r2, [r4, #20]
 800957c:	4b88      	ldr	r3, [pc, #544]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009584:	429a      	cmp	r2, r3
 8009586:	d905      	bls.n	8009594 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009588:	4985      	ldr	r1, [pc, #532]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800958a:	69cb      	ldr	r3, [r1, #28]
 800958c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009590:	431a      	orrs	r2, r3
 8009592:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	f013 0f10 	tst.w	r3, #16
 800959a:	d00c      	beq.n	80095b6 <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800959c:	69a2      	ldr	r2, [r4, #24]
 800959e:	4b80      	ldr	r3, [pc, #512]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d905      	bls.n	80095b6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095aa:	497d      	ldr	r1, [pc, #500]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80095ac:	69cb      	ldr	r3, [r1, #28]
 80095ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80095b2:	431a      	orrs	r2, r3
 80095b4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	f013 0f20 	tst.w	r3, #32
 80095bc:	d00c      	beq.n	80095d8 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80095be:	69e2      	ldr	r2, [r4, #28]
 80095c0:	4b77      	ldr	r3, [pc, #476]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d905      	bls.n	80095d8 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80095cc:	4974      	ldr	r1, [pc, #464]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80095ce:	6a0b      	ldr	r3, [r1, #32]
 80095d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d4:	431a      	orrs	r2, r3
 80095d6:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	f013 0f02 	tst.w	r3, #2
 80095de:	d00c      	beq.n	80095fa <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80095e0:	68e2      	ldr	r2, [r4, #12]
 80095e2:	4b6f      	ldr	r3, [pc, #444]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	f003 030f 	and.w	r3, r3, #15
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d905      	bls.n	80095fa <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095ee:	496c      	ldr	r1, [pc, #432]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80095f0:	698b      	ldr	r3, [r1, #24]
 80095f2:	f023 030f 	bic.w	r3, r3, #15
 80095f6:	431a      	orrs	r2, r3
 80095f8:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f013 0f01 	tst.w	r3, #1
 8009600:	d041      	beq.n	8009686 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009602:	4a67      	ldr	r2, [pc, #412]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009604:	6993      	ldr	r3, [r2, #24]
 8009606:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800960a:	68a1      	ldr	r1, [r4, #8]
 800960c:	430b      	orrs	r3, r1
 800960e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d00a      	beq.n	800962c <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009616:	2b03      	cmp	r3, #3
 8009618:	d027      	beq.n	800966a <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800961a:	2b01      	cmp	r3, #1
 800961c:	d02c      	beq.n	8009678 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800961e:	4a60      	ldr	r2, [pc, #384]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009620:	6812      	ldr	r2, [r2, #0]
 8009622:	f012 0f04 	tst.w	r2, #4
 8009626:	d106      	bne.n	8009636 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8009628:	2001      	movs	r0, #1
 800962a:	e0ad      	b.n	8009788 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009632:	f000 80ae 	beq.w	8009792 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009636:	495a      	ldr	r1, [pc, #360]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009638:	690a      	ldr	r2, [r1, #16]
 800963a:	f022 0207 	bic.w	r2, r2, #7
 800963e:	4313      	orrs	r3, r2
 8009640:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8009642:	f7fd fa15 	bl	8006a70 <HAL_GetTick>
 8009646:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009648:	4b55      	ldr	r3, [pc, #340]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009650:	6862      	ldr	r2, [r4, #4]
 8009652:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009656:	d016      	beq.n	8009686 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009658:	f7fd fa0a 	bl	8006a70 <HAL_GetTick>
 800965c:	1b80      	subs	r0, r0, r6
 800965e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009662:	4298      	cmp	r0, r3
 8009664:	d9f0      	bls.n	8009648 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 8009666:	2003      	movs	r0, #3
 8009668:	e08e      	b.n	8009788 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800966a:	4a4d      	ldr	r2, [pc, #308]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800966c:	6812      	ldr	r2, [r2, #0]
 800966e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8009672:	d1e0      	bne.n	8009636 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8009674:	2001      	movs	r0, #1
 8009676:	e087      	b.n	8009788 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009678:	4a49      	ldr	r2, [pc, #292]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800967a:	6812      	ldr	r2, [r2, #0]
 800967c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009680:	d1d9      	bne.n	8009636 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8009682:	2001      	movs	r0, #1
 8009684:	e080      	b.n	8009788 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	f013 0f02 	tst.w	r3, #2
 800968c:	d00c      	beq.n	80096a8 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800968e:	68e2      	ldr	r2, [r4, #12]
 8009690:	4b43      	ldr	r3, [pc, #268]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	429a      	cmp	r2, r3
 800969a:	d205      	bcs.n	80096a8 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800969c:	4940      	ldr	r1, [pc, #256]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800969e:	698b      	ldr	r3, [r1, #24]
 80096a0:	f023 030f 	bic.w	r3, r3, #15
 80096a4:	431a      	orrs	r2, r3
 80096a6:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096a8:	4b3c      	ldr	r3, [pc, #240]	; (800979c <HAL_RCC_ClockConfig+0x27c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	42ab      	cmp	r3, r5
 80096b2:	d90a      	bls.n	80096ca <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096b4:	4a39      	ldr	r2, [pc, #228]	; (800979c <HAL_RCC_ClockConfig+0x27c>)
 80096b6:	6813      	ldr	r3, [r2, #0]
 80096b8:	f023 030f 	bic.w	r3, r3, #15
 80096bc:	432b      	orrs	r3, r5
 80096be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096c0:	6813      	ldr	r3, [r2, #0]
 80096c2:	f003 030f 	and.w	r3, r3, #15
 80096c6:	42ab      	cmp	r3, r5
 80096c8:	d165      	bne.n	8009796 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	f013 0f04 	tst.w	r3, #4
 80096d0:	d00c      	beq.n	80096ec <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80096d2:	6922      	ldr	r2, [r4, #16]
 80096d4:	4b32      	ldr	r3, [pc, #200]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096dc:	429a      	cmp	r2, r3
 80096de:	d205      	bcs.n	80096ec <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096e0:	492f      	ldr	r1, [pc, #188]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80096e2:	698b      	ldr	r3, [r1, #24]
 80096e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e8:	431a      	orrs	r2, r3
 80096ea:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	f013 0f08 	tst.w	r3, #8
 80096f2:	d00c      	beq.n	800970e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80096f4:	6962      	ldr	r2, [r4, #20]
 80096f6:	4b2a      	ldr	r3, [pc, #168]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096fe:	429a      	cmp	r2, r3
 8009700:	d205      	bcs.n	800970e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009702:	4927      	ldr	r1, [pc, #156]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009704:	69cb      	ldr	r3, [r1, #28]
 8009706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970a:	431a      	orrs	r2, r3
 800970c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	f013 0f10 	tst.w	r3, #16
 8009714:	d00c      	beq.n	8009730 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009716:	69a2      	ldr	r2, [r4, #24]
 8009718:	4b21      	ldr	r3, [pc, #132]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009720:	429a      	cmp	r2, r3
 8009722:	d205      	bcs.n	8009730 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009724:	491e      	ldr	r1, [pc, #120]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009726:	69cb      	ldr	r3, [r1, #28]
 8009728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800972c:	431a      	orrs	r2, r3
 800972e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	f013 0f20 	tst.w	r3, #32
 8009736:	d00c      	beq.n	8009752 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009738:	69e2      	ldr	r2, [r4, #28]
 800973a:	4b19      	ldr	r3, [pc, #100]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009742:	429a      	cmp	r2, r3
 8009744:	d205      	bcs.n	8009752 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009746:	4916      	ldr	r1, [pc, #88]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009748:	6a0b      	ldr	r3, [r1, #32]
 800974a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974e:	431a      	orrs	r2, r3
 8009750:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009752:	f7ff fdeb 	bl	800932c <HAL_RCC_GetSysClockFreq>
 8009756:	4912      	ldr	r1, [pc, #72]	; (80097a0 <HAL_RCC_ClockConfig+0x280>)
 8009758:	698b      	ldr	r3, [r1, #24]
 800975a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800975e:	4a11      	ldr	r2, [pc, #68]	; (80097a4 <HAL_RCC_ClockConfig+0x284>)
 8009760:	5cd3      	ldrb	r3, [r2, r3]
 8009762:	f003 031f 	and.w	r3, r3, #31
 8009766:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009768:	698b      	ldr	r3, [r1, #24]
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	5cd3      	ldrb	r3, [r2, r3]
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	fa20 f303 	lsr.w	r3, r0, r3
 8009778:	4a0b      	ldr	r2, [pc, #44]	; (80097a8 <HAL_RCC_ClockConfig+0x288>)
 800977a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_RCC_ClockConfig+0x28c>)
 800977e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8009780:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <HAL_RCC_ClockConfig+0x290>)
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	f7f9 f8ec 	bl	8002960 <HAL_InitTick>
}
 8009788:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800978a:	2001      	movs	r0, #1
}
 800978c:	4770      	bx	lr
      return HAL_ERROR;
 800978e:	2001      	movs	r0, #1
 8009790:	e7fa      	b.n	8009788 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8009792:	2001      	movs	r0, #1
 8009794:	e7f8      	b.n	8009788 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8009796:	2001      	movs	r0, #1
 8009798:	e7f6      	b.n	8009788 <HAL_RCC_ClockConfig+0x268>
 800979a:	bf00      	nop
 800979c:	52002000 	.word	0x52002000
 80097a0:	58024400 	.word	0x58024400
 80097a4:	0801ed84 	.word	0x0801ed84
 80097a8:	24000044 	.word	0x24000044
 80097ac:	24000040 	.word	0x24000040
 80097b0:	2400004c 	.word	0x2400004c

080097b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097b4:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80097b6:	f7ff fdb9 	bl	800932c <HAL_RCC_GetSysClockFreq>
 80097ba:	4a0b      	ldr	r2, [pc, #44]	; (80097e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80097bc:	6993      	ldr	r3, [r2, #24]
 80097be:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80097c2:	490a      	ldr	r1, [pc, #40]	; (80097ec <HAL_RCC_GetHCLKFreq+0x38>)
 80097c4:	5ccb      	ldrb	r3, [r1, r3]
 80097c6:	f003 031f 	and.w	r3, r3, #31
 80097ca:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80097ce:	6992      	ldr	r2, [r2, #24]
 80097d0:	f002 020f 	and.w	r2, r2, #15
 80097d4:	5c88      	ldrb	r0, [r1, r2]
 80097d6:	f000 001f 	and.w	r0, r0, #31
 80097da:	fa23 f000 	lsr.w	r0, r3, r0
 80097de:	4a04      	ldr	r2, [pc, #16]	; (80097f0 <HAL_RCC_GetHCLKFreq+0x3c>)
 80097e0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097e2:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <HAL_RCC_GetHCLKFreq+0x40>)
 80097e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80097e6:	bd08      	pop	{r3, pc}
 80097e8:	58024400 	.word	0x58024400
 80097ec:	0801ed84 	.word	0x0801ed84
 80097f0:	24000044 	.word	0x24000044
 80097f4:	24000040 	.word	0x24000040

080097f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097f8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80097fa:	f7ff ffdb 	bl	80097b4 <HAL_RCC_GetHCLKFreq>
 80097fe:	4b05      	ldr	r3, [pc, #20]	; (8009814 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009806:	4a04      	ldr	r2, [pc, #16]	; (8009818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009808:	5cd3      	ldrb	r3, [r2, r3]
 800980a:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800980e:	40d8      	lsrs	r0, r3
 8009810:	bd08      	pop	{r3, pc}
 8009812:	bf00      	nop
 8009814:	58024400 	.word	0x58024400
 8009818:	0801ed84 	.word	0x0801ed84

0800981c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800981c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800981e:	f7ff ffc9 	bl	80097b4 <HAL_RCC_GetHCLKFreq>
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800982a:	4a04      	ldr	r2, [pc, #16]	; (800983c <HAL_RCC_GetPCLK2Freq+0x20>)
 800982c:	5cd3      	ldrb	r3, [r2, r3]
 800982e:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8009832:	40d8      	lsrs	r0, r3
 8009834:	bd08      	pop	{r3, pc}
 8009836:	bf00      	nop
 8009838:	58024400 	.word	0x58024400
 800983c:	0801ed84 	.word	0x0801ed84

08009840 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009840:	233f      	movs	r3, #63	; 0x3f
 8009842:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009844:	4b11      	ldr	r3, [pc, #68]	; (800988c <HAL_RCC_GetClockConfig+0x4c>)
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	f002 0207 	and.w	r2, r2, #7
 800984c:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800984e:	699a      	ldr	r2, [r3, #24]
 8009850:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8009854:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8009856:	699a      	ldr	r2, [r3, #24]
 8009858:	f002 020f 	and.w	r2, r2, #15
 800985c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009864:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8009866:	69da      	ldr	r2, [r3, #28]
 8009868:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800986c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800986e:	69da      	ldr	r2, [r3, #28]
 8009870:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009874:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800987c:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800987e:	4b04      	ldr	r3, [pc, #16]	; (8009890 <HAL_RCC_GetClockConfig+0x50>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 030f 	and.w	r3, r3, #15
 8009886:	600b      	str	r3, [r1, #0]
}
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	58024400 	.word	0x58024400
 8009890:	52002000 	.word	0x52002000

08009894 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009894:	4b40      	ldr	r3, [pc, #256]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 8009896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009898:	f003 0303 	and.w	r3, r3, #3
 800989c:	2b03      	cmp	r3, #3
 800989e:	d079      	beq.n	8009994 <RCCEx_PLL2_Config+0x100>
{
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	4605      	mov	r5, r0
 80098a4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098a6:	4a3c      	ldr	r2, [pc, #240]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 80098a8:	6813      	ldr	r3, [r2, #0]
 80098aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098b0:	f7fd f8de 	bl	8006a70 <HAL_GetTick>
 80098b4:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098b6:	4b38      	ldr	r3, [pc, #224]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80098be:	d006      	beq.n	80098ce <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80098c0:	f7fd f8d6 	bl	8006a70 <HAL_GetTick>
 80098c4:	1b03      	subs	r3, r0, r4
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d9f5      	bls.n	80098b6 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 80098ca:	2003      	movs	r0, #3

  }


  return status;
}
 80098cc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098ce:	4b32      	ldr	r3, [pc, #200]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 80098d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098d2:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80098d6:	6829      	ldr	r1, [r5, #0]
 80098d8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80098dc:	629a      	str	r2, [r3, #40]	; 0x28
 80098de:	686a      	ldr	r2, [r5, #4]
 80098e0:	3a01      	subs	r2, #1
 80098e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098e6:	68a9      	ldr	r1, [r5, #8]
 80098e8:	3901      	subs	r1, #1
 80098ea:	0249      	lsls	r1, r1, #9
 80098ec:	b289      	uxth	r1, r1
 80098ee:	430a      	orrs	r2, r1
 80098f0:	68e9      	ldr	r1, [r5, #12]
 80098f2:	3901      	subs	r1, #1
 80098f4:	0409      	lsls	r1, r1, #16
 80098f6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80098fa:	430a      	orrs	r2, r1
 80098fc:	6929      	ldr	r1, [r5, #16]
 80098fe:	3901      	subs	r1, #1
 8009900:	0609      	lsls	r1, r1, #24
 8009902:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8009906:	430a      	orrs	r2, r1
 8009908:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009910:	6969      	ldr	r1, [r5, #20]
 8009912:	430a      	orrs	r2, r1
 8009914:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009918:	f022 0220 	bic.w	r2, r2, #32
 800991c:	69a9      	ldr	r1, [r5, #24]
 800991e:	430a      	orrs	r2, r1
 8009920:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009924:	f022 0210 	bic.w	r2, r2, #16
 8009928:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800992a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800992c:	4a1b      	ldr	r2, [pc, #108]	; (800999c <RCCEx_PLL2_Config+0x108>)
 800992e:	400a      	ands	r2, r1
 8009930:	69e9      	ldr	r1, [r5, #28]
 8009932:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8009936:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993a:	f042 0210 	orr.w	r2, r2, #16
 800993e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009940:	b9c6      	cbnz	r6, 8009974 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009942:	461a      	mov	r2, r3
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800994a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800994c:	4a12      	ldr	r2, [pc, #72]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 800994e:	6813      	ldr	r3, [r2, #0]
 8009950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009954:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009956:	f7fd f88b 	bl	8006a70 <HAL_GetTick>
 800995a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800995c:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009964:	d114      	bne.n	8009990 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009966:	f7fd f883 	bl	8006a70 <HAL_GetTick>
 800996a:	1b00      	subs	r0, r0, r4
 800996c:	2802      	cmp	r0, #2
 800996e:	d9f5      	bls.n	800995c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8009970:	2003      	movs	r0, #3
 8009972:	e7ab      	b.n	80098cc <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8009974:	2e01      	cmp	r6, #1
 8009976:	d005      	beq.n	8009984 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009978:	4a07      	ldr	r2, [pc, #28]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 800997a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800997c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009980:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009982:	e7e3      	b.n	800994c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009984:	4a04      	ldr	r2, [pc, #16]	; (8009998 <RCCEx_PLL2_Config+0x104>)
 8009986:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800998c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800998e:	e7dd      	b.n	800994c <RCCEx_PLL2_Config+0xb8>
  return status;
 8009990:	2000      	movs	r0, #0
 8009992:	e79b      	b.n	80098cc <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8009994:	2001      	movs	r0, #1
}
 8009996:	4770      	bx	lr
 8009998:	58024400 	.word	0x58024400
 800999c:	ffff0007 	.word	0xffff0007

080099a0 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099a0:	4b40      	ldr	r3, [pc, #256]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 80099a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a4:	f003 0303 	and.w	r3, r3, #3
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d079      	beq.n	8009aa0 <RCCEx_PLL3_Config+0x100>
{
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	4605      	mov	r5, r0
 80099b0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099b2:	4a3c      	ldr	r2, [pc, #240]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 80099b4:	6813      	ldr	r3, [r2, #0]
 80099b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099bc:	f7fd f858 	bl	8006a70 <HAL_GetTick>
 80099c0:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099c2:	4b38      	ldr	r3, [pc, #224]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80099ca:	d006      	beq.n	80099da <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099cc:	f7fd f850 	bl	8006a70 <HAL_GetTick>
 80099d0:	1b03      	subs	r3, r0, r4
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d9f5      	bls.n	80099c2 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 80099d6:	2003      	movs	r0, #3

  }


  return status;
}
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099da:	4b32      	ldr	r3, [pc, #200]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 80099dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099de:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 80099e2:	6829      	ldr	r1, [r5, #0]
 80099e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80099e8:	629a      	str	r2, [r3, #40]	; 0x28
 80099ea:	686a      	ldr	r2, [r5, #4]
 80099ec:	3a01      	subs	r2, #1
 80099ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099f2:	68a9      	ldr	r1, [r5, #8]
 80099f4:	3901      	subs	r1, #1
 80099f6:	0249      	lsls	r1, r1, #9
 80099f8:	b289      	uxth	r1, r1
 80099fa:	430a      	orrs	r2, r1
 80099fc:	68e9      	ldr	r1, [r5, #12]
 80099fe:	3901      	subs	r1, #1
 8009a00:	0409      	lsls	r1, r1, #16
 8009a02:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8009a06:	430a      	orrs	r2, r1
 8009a08:	6929      	ldr	r1, [r5, #16]
 8009a0a:	3901      	subs	r1, #1
 8009a0c:	0609      	lsls	r1, r1, #24
 8009a0e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8009a12:	430a      	orrs	r2, r1
 8009a14:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a1c:	6969      	ldr	r1, [r5, #20]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009a28:	69a9      	ldr	r1, [r5, #24]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a34:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a36:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009a38:	4a1b      	ldr	r2, [pc, #108]	; (8009aa8 <RCCEx_PLL3_Config+0x108>)
 8009a3a:	400a      	ands	r2, r1
 8009a3c:	69e9      	ldr	r1, [r5, #28]
 8009a3e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8009a42:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009a4c:	b9c6      	cbnz	r6, 8009a80 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a56:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8009a58:	4a12      	ldr	r2, [pc, #72]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a60:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009a62:	f7fd f805 	bl	8006a70 <HAL_GetTick>
 8009a66:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a68:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009a70:	d114      	bne.n	8009a9c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a72:	f7fc fffd 	bl	8006a70 <HAL_GetTick>
 8009a76:	1b00      	subs	r0, r0, r4
 8009a78:	2802      	cmp	r0, #2
 8009a7a:	d9f5      	bls.n	8009a68 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8009a7c:	2003      	movs	r0, #3
 8009a7e:	e7ab      	b.n	80099d8 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a80:	2e01      	cmp	r6, #1
 8009a82:	d005      	beq.n	8009a90 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a84:	4a07      	ldr	r2, [pc, #28]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 8009a86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a8e:	e7e3      	b.n	8009a58 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a90:	4a04      	ldr	r2, [pc, #16]	; (8009aa4 <RCCEx_PLL3_Config+0x104>)
 8009a92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a9a:	e7dd      	b.n	8009a58 <RCCEx_PLL3_Config+0xb8>
  return status;
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	e79b      	b.n	80099d8 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8009aa0:	2001      	movs	r0, #1
}
 8009aa2:	4770      	bx	lr
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	ffff0007 	.word	0xffff0007

08009aac <HAL_RCCEx_PeriphCLKConfig>:
{
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ab0:	6803      	ldr	r3, [r0, #0]
 8009ab2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009ab6:	d030      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009ab8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009abe:	d026      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009ac0:	d80e      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8009ac2:	b1eb      	cbz	r3, 8009b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ac8:	d107      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009aca:	2102      	movs	r1, #2
 8009acc:	3004      	adds	r0, #4
 8009ace:	f7ff fee1 	bl	8009894 <RCCEx_PLL2_Config>
 8009ad2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ad4:	b145      	cbz	r5, 8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8009ad6:	462e      	mov	r6, r5
 8009ad8:	e021      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009ada:	2601      	movs	r6, #1
 8009adc:	4635      	mov	r5, r6
 8009ade:	e01e      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ae4:	d109      	bne.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009ae6:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ae8:	4a99      	ldr	r2, [pc, #612]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009aea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009aec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009af0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009af2:	430b      	orrs	r3, r1
 8009af4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009af6:	2600      	movs	r6, #0
 8009af8:	e011      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009afa:	2601      	movs	r6, #1
 8009afc:	4635      	mov	r5, r6
 8009afe:	e00e      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b00:	4a93      	ldr	r2, [pc, #588]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009b02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b08:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	e7ec      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b0e:	2102      	movs	r1, #2
 8009b10:	3024      	adds	r0, #36	; 0x24
 8009b12:	f7ff ff45 	bl	80099a0 <RCCEx_PLL3_Config>
 8009b16:	4605      	mov	r5, r0
      break;
 8009b18:	e7dc      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b1a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b1c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009b24:	d026      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009b26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d81f      	bhi.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8009b2c:	e8df f003 	tbb	[pc, r3]
 8009b30:	08171103 	.word	0x08171103
 8009b34:	08          	.byte	0x08
 8009b35:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b36:	4a86      	ldr	r2, [pc, #536]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009b38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009b40:	b9bd      	cbnz	r5, 8009b72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b42:	4a83      	ldr	r2, [pc, #524]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009b44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b46:	f023 0307 	bic.w	r3, r3, #7
 8009b4a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6513      	str	r3, [r2, #80]	; 0x50
 8009b50:	e010      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b52:	2100      	movs	r1, #0
 8009b54:	1d20      	adds	r0, r4, #4
 8009b56:	f7ff fe9d 	bl	8009894 <RCCEx_PLL2_Config>
 8009b5a:	4605      	mov	r5, r0
      break;
 8009b5c:	e7f0      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b5e:	2100      	movs	r1, #0
 8009b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b64:	f7ff ff1c 	bl	80099a0 <RCCEx_PLL3_Config>
 8009b68:	4605      	mov	r5, r0
      break;
 8009b6a:	e7e9      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009b6c:	2601      	movs	r6, #1
 8009b6e:	4635      	mov	r5, r6
 8009b70:	e000      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8009b72:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009b7a:	d01d      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 8009b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b7e:	2b80      	cmp	r3, #128	; 0x80
 8009b80:	d039      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8009b82:	d80b      	bhi.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8009b84:	b38b      	cbz	r3, 8009bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009b86:	2b40      	cmp	r3, #64	; 0x40
 8009b88:	d105      	bne.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	1d20      	adds	r0, r4, #4
 8009b8e:	f7ff fe81 	bl	8009894 <RCCEx_PLL2_Config>
 8009b92:	4605      	mov	r5, r0
      break;
 8009b94:	e008      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 8009b96:	2601      	movs	r6, #1
 8009b98:	4635      	mov	r5, r6
 8009b9a:	e00d      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ba0:	d002      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009ba2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009ba6:	d11b      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8009ba8:	bb65      	cbnz	r5, 8009c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009baa:	4a69      	ldr	r2, [pc, #420]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009bac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009bae:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8009bb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009bbe:	d035      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 8009bc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc6:	d057      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009bc8:	d821      	bhi.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d04e      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd2:	d119      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	1d20      	adds	r0, r4, #4
 8009bd8:	f7ff fe5c 	bl	8009894 <RCCEx_PLL2_Config>
 8009bdc:	4605      	mov	r5, r0
      break;
 8009bde:	e01c      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 8009be0:	2bc0      	cmp	r3, #192	; 0xc0
 8009be2:	d0e1      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009be4:	2601      	movs	r6, #1
 8009be6:	4635      	mov	r5, r6
 8009be8:	e7e6      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bea:	4a59      	ldr	r2, [pc, #356]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009bec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009bf4:	e7d8      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009bfc:	f7ff fed0 	bl	80099a0 <RCCEx_PLL3_Config>
 8009c00:	4605      	mov	r5, r0
      break;
 8009c02:	e7d1      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009c04:	462e      	mov	r6, r5
 8009c06:	e7d7      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 8009c08:	2601      	movs	r6, #1
 8009c0a:	4635      	mov	r5, r6
 8009c0c:	e00e      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c12:	d002      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009c14:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009c18:	d122      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	d133      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009c1e:	4a4c      	ldr	r2, [pc, #304]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009c20:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c22:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8009c26:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009c32:	d031      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 8009c34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d041      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009c3a:	d829      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009c3c:	b133      	cbz	r3, 8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009c3e:	2b10      	cmp	r3, #16
 8009c40:	d123      	bne.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c42:	4a43      	ldr	r2, [pc, #268]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009c44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	d13c      	bne.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009c50:	4a3f      	ldr	r2, [pc, #252]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009c52:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009c54:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009c58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c5a:	430b      	orrs	r3, r1
 8009c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c5e:	e01b      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 8009c60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009c64:	d0d9      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009c66:	2601      	movs	r6, #1
 8009c68:	4635      	mov	r5, r6
 8009c6a:	e7df      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c6c:	4a38      	ldr	r2, [pc, #224]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009c6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c74:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009c76:	e7d0      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c78:	2100      	movs	r1, #0
 8009c7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c7e:	f7ff fe8f 	bl	80099a0 <RCCEx_PLL3_Config>
 8009c82:	4605      	mov	r5, r0
      break;
 8009c84:	e7c9      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009c86:	462e      	mov	r6, r5
 8009c88:	e7d0      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 8009c8a:	2601      	movs	r6, #1
 8009c8c:	4635      	mov	r5, r6
 8009c8e:	e003      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8009c90:	2b30      	cmp	r3, #48	; 0x30
 8009c92:	d0db      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009c94:	2601      	movs	r6, #1
 8009c96:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009c9e:	d039      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009ca0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca6:	d02d      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8009ca8:	d814      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009caa:	b32b      	cbz	r3, 8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8009cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb0:	d10d      	bne.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	1d20      	adds	r0, r4, #4
 8009cb6:	f7ff fded 	bl	8009894 <RCCEx_PLL2_Config>
 8009cba:	4605      	mov	r5, r0
      break;
 8009cbc:	e010      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cbe:	2102      	movs	r1, #2
 8009cc0:	1d20      	adds	r0, r4, #4
 8009cc2:	f7ff fde7 	bl	8009894 <RCCEx_PLL2_Config>
 8009cc6:	4605      	mov	r5, r0
      break;
 8009cc8:	e7c0      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009cca:	462e      	mov	r6, r5
 8009ccc:	e7e4      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009cce:	2601      	movs	r6, #1
 8009cd0:	4635      	mov	r5, r6
 8009cd2:	e01f      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8009cd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cd8:	d002      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cde:	d108      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 8009ce0:	b9bd      	cbnz	r5, 8009d12 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ce2:	4a1b      	ldr	r2, [pc, #108]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009ce4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6513      	str	r3, [r2, #80]	; 0x50
 8009cf0:	e010      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009cf2:	2601      	movs	r6, #1
 8009cf4:	4635      	mov	r5, r6
 8009cf6:	e00d      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cf8:	4a15      	ldr	r2, [pc, #84]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009cfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d00:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009d02:	e7ed      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d04:	2100      	movs	r1, #0
 8009d06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d0a:	f7ff fe49 	bl	80099a0 <RCCEx_PLL3_Config>
 8009d0e:	4605      	mov	r5, r0
      break;
 8009d10:	e7e6      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009d12:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009d1a:	d026      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d22:	d037      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8009d24:	d816      	bhi.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009d26:	b13b      	cbz	r3, 8009d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d2c:	d10d      	bne.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d2e:	2101      	movs	r1, #1
 8009d30:	1d20      	adds	r0, r4, #4
 8009d32:	f7ff fdaf 	bl	8009894 <RCCEx_PLL2_Config>
 8009d36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d38:	bb9d      	cbnz	r5, 8009da2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d3a:	4a05      	ldr	r2, [pc, #20]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009d3c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009d3e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009d42:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009d44:	430b      	orrs	r3, r1
 8009d46:	6513      	str	r3, [r2, #80]	; 0x50
 8009d48:	e00f      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009d4a:	2601      	movs	r6, #1
 8009d4c:	4635      	mov	r5, r6
 8009d4e:	e00c      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8009d50:	58024400 	.word	0x58024400
 8009d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d58:	d0ee      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d5e:	d0eb      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d64:	d0e8      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d66:	2601      	movs	r6, #1
 8009d68:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009d70:	d025      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d72:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d7a:	d04c      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009d7c:	d816      	bhi.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d03c      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d86:	d10e      	bne.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d88:	2101      	movs	r1, #1
 8009d8a:	1d20      	adds	r0, r4, #4
 8009d8c:	f7ff fd82 	bl	8009894 <RCCEx_PLL2_Config>
 8009d90:	4605      	mov	r5, r0
      break;
 8009d92:	e033      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d94:	2101      	movs	r1, #1
 8009d96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d9a:	f7ff fe01 	bl	80099a0 <RCCEx_PLL3_Config>
 8009d9e:	4605      	mov	r5, r0
      break;
 8009da0:	e7ca      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009da2:	462e      	mov	r6, r5
 8009da4:	e7e1      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009da6:	2601      	movs	r6, #1
 8009da8:	4635      	mov	r5, r6
 8009daa:	e008      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009db0:	d024      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009db2:	d91d      	bls.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009db4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009db8:	d020      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009dba:	2601      	movs	r6, #1
 8009dbc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009dc4:	d009      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 8009dc6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dcc:	d02c      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8009dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dd2:	d037      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8009dd4:	b36b      	cbz	r3, 8009e32 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009dd6:	2601      	movs	r6, #1
 8009dd8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009de0:	d045      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 8009de2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d86d      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009de8:	e8df f003 	tbb	[pc, r3]
 8009dec:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 8009df0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009df4:	d002      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dfa:	d109      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 8009dfc:	b995      	cbnz	r5, 8009e24 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009dfe:	4a8c      	ldr	r2, [pc, #560]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009e00:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e02:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009e06:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8009e0a:	430b      	orrs	r3, r1
 8009e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8009e0e:	e7d6      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009e10:	2601      	movs	r6, #1
 8009e12:	4635      	mov	r5, r6
 8009e14:	e7d3      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e16:	2101      	movs	r1, #1
 8009e18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e1c:	f7ff fdc0 	bl	80099a0 <RCCEx_PLL3_Config>
 8009e20:	4605      	mov	r5, r0
      break;
 8009e22:	e7eb      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009e24:	462e      	mov	r6, r5
 8009e26:	e7ca      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e28:	4a81      	ldr	r2, [pc, #516]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009e2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e30:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009e32:	b96d      	cbnz	r5, 8009e50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e34:	4a7e      	ldr	r2, [pc, #504]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009e36:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009e38:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009e3c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009e3e:	430b      	orrs	r3, r1
 8009e40:	6513      	str	r3, [r2, #80]	; 0x50
 8009e42:	e7ca      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e44:	2101      	movs	r1, #1
 8009e46:	1d20      	adds	r0, r4, #4
 8009e48:	f7ff fd24 	bl	8009894 <RCCEx_PLL2_Config>
 8009e4c:	4605      	mov	r5, r0
      break;
 8009e4e:	e7f0      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009e50:	462e      	mov	r6, r5
 8009e52:	e7c2      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e54:	4a76      	ldr	r2, [pc, #472]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009e56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009e5e:	bba5      	cbnz	r5, 8009eca <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e60:	4a73      	ldr	r2, [pc, #460]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009e62:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009e6a:	430b      	orrs	r3, r1
 8009e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009e74:	d12b      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	f013 0f01 	tst.w	r3, #1
 8009e7c:	f000 80a3 	beq.w	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e80:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009e84:	2b28      	cmp	r3, #40	; 0x28
 8009e86:	f200 809c 	bhi.w	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009e8a:	e8df f003 	tbb	[pc, r3]
 8009e8e:	9a89      	.short	0x9a89
 8009e90:	9a9a9a9a 	.word	0x9a9a9a9a
 8009e94:	9a849a9a 	.word	0x9a849a9a
 8009e98:	9a9a9a9a 	.word	0x9a9a9a9a
 8009e9c:	9a939a9a 	.word	0x9a939a9a
 8009ea0:	9a9a9a9a 	.word	0x9a9a9a9a
 8009ea4:	9a899a9a 	.word	0x9a899a9a
 8009ea8:	9a9a9a9a 	.word	0x9a9a9a9a
 8009eac:	9a899a9a 	.word	0x9a899a9a
 8009eb0:	9a9a9a9a 	.word	0x9a9a9a9a
 8009eb4:	9a9a      	.short	0x9a9a
 8009eb6:	89          	.byte	0x89
 8009eb7:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009eb8:	2102      	movs	r1, #2
 8009eba:	1d20      	adds	r0, r4, #4
 8009ebc:	f7ff fcea 	bl	8009894 <RCCEx_PLL2_Config>
 8009ec0:	4605      	mov	r5, r0
      break;
 8009ec2:	e7cc      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 8009ec4:	2601      	movs	r6, #1
 8009ec6:	4635      	mov	r5, r6
 8009ec8:	e7d1      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8009eca:	462e      	mov	r6, r5
 8009ecc:	e7cf      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ece:	4a59      	ldr	r2, [pc, #356]	; (800a034 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8009ed0:	6813      	ldr	r3, [r2, #0]
 8009ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ed6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009ed8:	f7fc fdca 	bl	8006a70 <HAL_GetTick>
 8009edc:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ede:	4b55      	ldr	r3, [pc, #340]	; (800a034 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009ee6:	d105      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ee8:	f7fc fdc2 	bl	8006a70 <HAL_GetTick>
 8009eec:	1bc0      	subs	r0, r0, r7
 8009eee:	2864      	cmp	r0, #100	; 0x64
 8009ef0:	d9f5      	bls.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 8009ef2:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	d14a      	bne.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ef8:	4b4d      	ldr	r3, [pc, #308]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efc:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009f00:	4053      	eors	r3, r2
 8009f02:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009f06:	d00c      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f08:	4b49      	ldr	r3, [pc, #292]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f12:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009f16:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f1a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009f1e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009f20:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f22:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f2a:	d015      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 8009f2c:	bb8d      	cbnz	r5, 8009f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f2e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009f32:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009f36:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009f3a:	d01e      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8009f3c:	4a3c      	ldr	r2, [pc, #240]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f3e:	6913      	ldr	r3, [r2, #16]
 8009f40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f44:	6113      	str	r3, [r2, #16]
 8009f46:	493a      	ldr	r1, [pc, #232]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f48:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8009f4a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009f4e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009f52:	4313      	orrs	r3, r2
 8009f54:	670b      	str	r3, [r1, #112]	; 0x70
 8009f56:	e78e      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 8009f58:	f7fc fd8a 	bl	8006a70 <HAL_GetTick>
 8009f5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f5e:	4b34      	ldr	r3, [pc, #208]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f62:	f013 0f02 	tst.w	r3, #2
 8009f66:	d1e1      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f68:	f7fc fd82 	bl	8006a70 <HAL_GetTick>
 8009f6c:	1bc0      	subs	r0, r0, r7
 8009f6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f72:	4298      	cmp	r0, r3
 8009f74:	d9f3      	bls.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 8009f76:	2503      	movs	r5, #3
 8009f78:	e7d8      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f7a:	482d      	ldr	r0, [pc, #180]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f7c:	6902      	ldr	r2, [r0, #16]
 8009f7e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009f82:	492d      	ldr	r1, [pc, #180]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009f84:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	6103      	str	r3, [r0, #16]
 8009f8c:	e7db      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 8009f8e:	462e      	mov	r6, r5
 8009f90:	e771      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 8009f92:	462e      	mov	r6, r5
 8009f94:	e76f      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f96:	2101      	movs	r1, #1
 8009f98:	1d20      	adds	r0, r4, #4
 8009f9a:	f7ff fc7b 	bl	8009894 <RCCEx_PLL2_Config>
 8009f9e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fa0:	b9ed      	cbnz	r5, 8009fde <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fa2:	4a23      	ldr	r2, [pc, #140]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009fa4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009fa6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009faa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	6553      	str	r3, [r2, #84]	; 0x54
 8009fb2:	e008      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fba:	f7ff fcf1 	bl	80099a0 <RCCEx_PLL3_Config>
 8009fbe:	4605      	mov	r5, r0
      break;
 8009fc0:	e7ee      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009fc2:	2601      	movs	r6, #1
 8009fc4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	f013 0f02 	tst.w	r3, #2
 8009fcc:	d016      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009fce:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009fd0:	2b05      	cmp	r3, #5
 8009fd2:	d827      	bhi.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8009fd4:	e8df f003 	tbb	[pc, r3]
 8009fd8:	0a1f050a 	.word	0x0a1f050a
 8009fdc:	0a0a      	.short	0x0a0a
 8009fde:	462e      	mov	r6, r5
 8009fe0:	e7f1      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	1d20      	adds	r0, r4, #4
 8009fe6:	f7ff fc55 	bl	8009894 <RCCEx_PLL2_Config>
 8009fea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fec:	b9ed      	cbnz	r5, 800a02a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009fee:	4a10      	ldr	r2, [pc, #64]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009ff0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009ff2:	f023 0307 	bic.w	r3, r3, #7
 8009ff6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	f013 0f04 	tst.w	r3, #4
 800a002:	d029      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a004:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a008:	2b05      	cmp	r3, #5
 800a00a:	d84a      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a00c:	e8df f003 	tbb	[pc, r3]
 800a010:	1b42161b 	.word	0x1b42161b
 800a014:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a016:	2101      	movs	r1, #1
 800a018:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a01c:	f7ff fcc0 	bl	80099a0 <RCCEx_PLL3_Config>
 800a020:	4605      	mov	r5, r0
      break;
 800a022:	e7e3      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a024:	2601      	movs	r6, #1
 800a026:	4635      	mov	r5, r6
 800a028:	e7e8      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a02a:	462e      	mov	r6, r5
 800a02c:	e7e6      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a02e:	bf00      	nop
 800a030:	58024400 	.word	0x58024400
 800a034:	58024800 	.word	0x58024800
 800a038:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a03c:	2101      	movs	r1, #1
 800a03e:	1d20      	adds	r0, r4, #4
 800a040:	f7ff fc28 	bl	8009894 <RCCEx_PLL2_Config>
 800a044:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a046:	bb7d      	cbnz	r5, 800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a048:	4aa9      	ldr	r2, [pc, #676]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a04a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a04c:	f023 0307 	bic.w	r3, r3, #7
 800a050:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a054:	430b      	orrs	r3, r1
 800a056:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	f013 0f20 	tst.w	r3, #32
 800a05e:	d033      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a060:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a068:	d04c      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800a06a:	d822      	bhi.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x606>
 800a06c:	b13b      	cbz	r3, 800a07e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a06e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a072:	d11b      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a074:	2100      	movs	r1, #0
 800a076:	1d20      	adds	r0, r4, #4
 800a078:	f7ff fc0c 	bl	8009894 <RCCEx_PLL2_Config>
 800a07c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a07e:	2d00      	cmp	r5, #0
 800a080:	d147      	bne.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a082:	4a9b      	ldr	r2, [pc, #620]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a084:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a086:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a08a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a08e:	430b      	orrs	r3, r1
 800a090:	6553      	str	r3, [r2, #84]	; 0x54
 800a092:	e019      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a094:	2101      	movs	r1, #1
 800a096:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a09a:	f7ff fc81 	bl	80099a0 <RCCEx_PLL3_Config>
 800a09e:	4605      	mov	r5, r0
      break;
 800a0a0:	e7d1      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a0a2:	2601      	movs	r6, #1
 800a0a4:	4635      	mov	r5, r6
 800a0a6:	e7d7      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a0a8:	462e      	mov	r6, r5
 800a0aa:	e7d5      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a0ac:	2601      	movs	r6, #1
 800a0ae:	4635      	mov	r5, r6
 800a0b0:	e00a      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800a0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b6:	d0e2      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a0b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0bc:	d0df      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a0be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0c2:	d0dc      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a0c4:	2601      	movs	r6, #1
 800a0c6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a0ce:	d030      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0d0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a0d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0d8:	d04b      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800a0da:	d81f      	bhi.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x670>
 800a0dc:	b13b      	cbz	r3, 800a0ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a0de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e2:	d118      	bne.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	1d20      	adds	r0, r4, #4
 800a0e8:	f7ff fbd4 	bl	8009894 <RCCEx_PLL2_Config>
 800a0ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	d146      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0f2:	4a7f      	ldr	r2, [pc, #508]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a0f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a0fa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a0fe:	430b      	orrs	r3, r1
 800a100:	6593      	str	r3, [r2, #88]	; 0x58
 800a102:	e016      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a104:	2102      	movs	r1, #2
 800a106:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a10a:	f7ff fc49 	bl	80099a0 <RCCEx_PLL3_Config>
 800a10e:	4605      	mov	r5, r0
      break;
 800a110:	e7b5      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a112:	462e      	mov	r6, r5
 800a114:	e7d8      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a116:	2601      	movs	r6, #1
 800a118:	4635      	mov	r5, r6
 800a11a:	e00a      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x686>
 800a11c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a120:	d0e5      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a122:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a126:	d0e2      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a12c:	d0df      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a12e:	2601      	movs	r6, #1
 800a130:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a138:	d032      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a13a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a13e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a142:	f000 80a2 	beq.w	800a28a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800a146:	d820      	bhi.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800a148:	b13b      	cbz	r3, 800a15a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a14a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a14e:	d119      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a150:	2100      	movs	r1, #0
 800a152:	1d20      	adds	r0, r4, #4
 800a154:	f7ff fb9e 	bl	8009894 <RCCEx_PLL2_Config>
 800a158:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a15a:	2d00      	cmp	r5, #0
 800a15c:	f040 809c 	bne.w	800a298 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a160:	4a63      	ldr	r2, [pc, #396]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a162:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a164:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a168:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800a16c:	430b      	orrs	r3, r1
 800a16e:	6593      	str	r3, [r2, #88]	; 0x58
 800a170:	e016      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a172:	2102      	movs	r1, #2
 800a174:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a178:	f7ff fc12 	bl	80099a0 <RCCEx_PLL3_Config>
 800a17c:	4605      	mov	r5, r0
      break;
 800a17e:	e7b6      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a180:	462e      	mov	r6, r5
 800a182:	e7d6      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a184:	2601      	movs	r6, #1
 800a186:	4635      	mov	r5, r6
 800a188:	e00a      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800a18a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a18e:	d0e4      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a194:	d0e1      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a19a:	d0de      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a19c:	2601      	movs	r6, #1
 800a19e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	f013 0f08 	tst.w	r3, #8
 800a1a6:	d00c      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a1a8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800a1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b0:	d074      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a1b2:	4a4f      	ldr	r2, [pc, #316]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a1b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a1ba:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a1be:	430b      	orrs	r3, r1
 800a1c0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	f013 0f10 	tst.w	r3, #16
 800a1c8:	d00c      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a1ca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d2:	d06c      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1d4:	4a46      	ldr	r2, [pc, #280]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1dc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800a1ea:	d00b      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 800a1ec:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800a1f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f4:	d073      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x832>
 800a1f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1fa:	d066      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d05f      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800a200:	2601      	movs	r6, #1
 800a202:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800a20a:	d00c      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 800a20c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a214:	d07d      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x866>
 800a216:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a21a:	d070      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a21c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a220:	d068      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800a222:	2601      	movs	r6, #1
 800a224:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a22c:	d008      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 800a22e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d077      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x878>
 800a234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a238:	f000 8082 	beq.w	800a340 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a23c:	2601      	movs	r6, #1
 800a23e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800a246:	f040 8083 	bne.w	800a350 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a250:	f000 808b 	beq.w	800a36a <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 800a254:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25c:	f000 80c9 	beq.w	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800a260:	f240 8080 	bls.w	800a364 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a268:	d003      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a26a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a26e:	f040 80be 	bne.w	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800a272:	2d00      	cmp	r5, #0
 800a274:	f040 80c3 	bne.w	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a278:	4a1d      	ldr	r2, [pc, #116]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a27a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a27c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a280:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a284:	430b      	orrs	r3, r1
 800a286:	6553      	str	r3, [r2, #84]	; 0x54
 800a288:	e06f      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a28a:	2102      	movs	r1, #2
 800a28c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a290:	f7ff fb86 	bl	80099a0 <RCCEx_PLL3_Config>
 800a294:	4605      	mov	r5, r0
      break;
 800a296:	e760      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a298:	462e      	mov	r6, r5
 800a29a:	e781      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a29c:	2102      	movs	r1, #2
 800a29e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2a2:	f7ff fb7d 	bl	80099a0 <RCCEx_PLL3_Config>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d083      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800a2aa:	2601      	movs	r6, #1
 800a2ac:	e781      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a2ae:	2102      	movs	r1, #2
 800a2b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2b4:	f7ff fb74 	bl	80099a0 <RCCEx_PLL3_Config>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d08b      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800a2bc:	2601      	movs	r6, #1
 800a2be:	e789      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	1d20      	adds	r0, r4, #4
 800a2c4:	f7ff fae6 	bl	8009894 <RCCEx_PLL2_Config>
 800a2c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a2ca:	b97d      	cbnz	r5, 800a2ec <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2cc:	4a08      	ldr	r2, [pc, #32]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a2ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a2d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a2d4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	6593      	str	r3, [r2, #88]	; 0x58
 800a2dc:	e792      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2de:	2102      	movs	r1, #2
 800a2e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2e4:	f7ff fb5c 	bl	80099a0 <RCCEx_PLL3_Config>
 800a2e8:	4605      	mov	r5, r0
      break;
 800a2ea:	e7ee      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a2ec:	462e      	mov	r6, r5
 800a2ee:	e789      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800a2f0:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f4:	4a47      	ldr	r2, [pc, #284]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a2f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a2f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a2fe:	b97d      	cbnz	r5, 800a320 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a300:	4a44      	ldr	r2, [pc, #272]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a302:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a304:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a308:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a30c:	430b      	orrs	r3, r1
 800a30e:	6553      	str	r3, [r2, #84]	; 0x54
 800a310:	e789      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a312:	2101      	movs	r1, #1
 800a314:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a318:	f7ff fb42 	bl	80099a0 <RCCEx_PLL3_Config>
 800a31c:	4605      	mov	r5, r0
      break;
 800a31e:	e7ee      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a320:	462e      	mov	r6, r5
 800a322:	e780      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a324:	4a3b      	ldr	r2, [pc, #236]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a326:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a32c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a32e:	b96d      	cbnz	r5, 800a34c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a330:	4a38      	ldr	r2, [pc, #224]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a332:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a338:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a33a:	430b      	orrs	r3, r1
 800a33c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a33e:	e77f      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a340:	2102      	movs	r1, #2
 800a342:	1d20      	adds	r0, r4, #4
 800a344:	f7ff faa6 	bl	8009894 <RCCEx_PLL2_Config>
 800a348:	4605      	mov	r5, r0
      break;
 800a34a:	e7f0      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x882>
 800a34c:	462e      	mov	r6, r5
 800a34e:	e777      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a350:	2102      	movs	r1, #2
 800a352:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a356:	f7ff fb23 	bl	80099a0 <RCCEx_PLL3_Config>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f43f af75 	beq.w	800a24a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 800a360:	2601      	movs	r6, #1
 800a362:	e772      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800a364:	2b00      	cmp	r3, #0
 800a366:	d084      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a368:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a370:	d006      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a372:	4a28      	ldr	r2, [pc, #160]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a374:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a37a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800a37c:	430b      	orrs	r3, r1
 800a37e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800a386:	d006      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a388:	4a22      	ldr	r2, [pc, #136]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a38a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a38c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a390:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a392:	430b      	orrs	r3, r1
 800a394:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a39c:	d006      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a39e:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a3a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a3a2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800a3a6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a3b2:	d009      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3b4:	4b17      	ldr	r3, [pc, #92]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3bc:	611a      	str	r2, [r3, #16]
 800a3be:	691a      	ldr	r2, [r3, #16]
 800a3c0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	db19      	blt.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a3d4:	d007      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a3d6:	4a0f      	ldr	r2, [pc, #60]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a3d8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a3da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a3de:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800a3e6:	b106      	cbz	r6, 800a3ea <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800a3e8:	2601      	movs	r6, #1
}
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800a3ee:	2601      	movs	r6, #1
 800a3f0:	e7bb      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3f2:	4a08      	ldr	r2, [pc, #32]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a3f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a3f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3fa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800a3fc:	e739      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a3fe:	462e      	mov	r6, r5
 800a400:	e7b3      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a402:	4a04      	ldr	r2, [pc, #16]	; (800a414 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a404:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a406:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a40a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a40c:	430b      	orrs	r3, r1
 800a40e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a410:	e7dd      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x922>
 800a412:	bf00      	nop
 800a414:	58024400 	.word	0x58024400

0800a418 <SPI_RxISR_8BIT>:
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800a418:	6802      	ldr	r2, [r0, #0]
 800a41a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a41c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a420:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800a422:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a424:	3301      	adds	r3, #1
 800a426:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800a428:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	3b01      	subs	r3, #1
 800a430:	b29b      	uxth	r3, r3
 800a432:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a436:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	b923      	cbnz	r3, 800a448 <SPI_RxISR_8BIT+0x30>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a43e:	6802      	ldr	r2, [r0, #0]
 800a440:	6913      	ldr	r3, [r2, #16]
 800a442:	f023 0301 	bic.w	r3, r3, #1
 800a446:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a448:	4770      	bx	lr

0800a44a <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a44a:	6802      	ldr	r2, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a44c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a44e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a450:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a452:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a454:	3302      	adds	r3, #2
 800a456:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800a458:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	3b01      	subs	r3, #1
 800a460:	b29b      	uxth	r3, r3
 800a462:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a466:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	b923      	cbnz	r3, 800a478 <SPI_RxISR_16BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a46e:	6802      	ldr	r2, [r0, #0]
 800a470:	6913      	ldr	r3, [r2, #16]
 800a472:	f023 0301 	bic.w	r3, r3, #1
 800a476:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a478:	4770      	bx	lr

0800a47a <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800a47a:	6802      	ldr	r2, [r0, #0]
 800a47c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a47e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a480:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800a482:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a484:	3304      	adds	r3, #4
 800a486:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800a488:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29b      	uxth	r3, r3
 800a492:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a496:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	b923      	cbnz	r3, 800a4a8 <SPI_RxISR_32BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a49e:	6802      	ldr	r2, [r0, #0]
 800a4a0:	6913      	ldr	r3, [r2, #16]
 800a4a2:	f023 0301 	bic.w	r3, r3, #1
 800a4a6:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a4a8:	4770      	bx	lr

0800a4aa <SPI_TxISR_8BIT>:
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800a4aa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a4ac:	6803      	ldr	r3, [r0, #0]
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4b4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800a4ba:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a4c8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	b923      	cbnz	r3, 800a4da <SPI_TxISR_8BIT+0x30>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a4d0:	6802      	ldr	r2, [r0, #0]
 800a4d2:	6913      	ldr	r3, [r2, #16]
 800a4d4:	f023 0302 	bic.w	r3, r3, #2
 800a4d8:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a4da:	4770      	bx	lr

0800a4dc <SPI_TxISR_16BIT>:
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a4dc:	6803      	ldr	r3, [r0, #0]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a4de:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a4e0:	8812      	ldrh	r2, [r2, #0]
 800a4e2:	841a      	strh	r2, [r3, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a4e6:	3302      	adds	r3, #2
 800a4e8:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800a4ea:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a4f8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	b923      	cbnz	r3, 800a50a <SPI_TxISR_16BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a500:	6802      	ldr	r2, [r0, #0]
 800a502:	6913      	ldr	r3, [r2, #16]
 800a504:	f023 0302 	bic.w	r3, r3, #2
 800a508:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a50a:	4770      	bx	lr

0800a50c <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a50c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a50e:	6803      	ldr	r3, [r0, #0]
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800a514:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a516:	3304      	adds	r3, #4
 800a518:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800a51a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a51e:	b29b      	uxth	r3, r3
 800a520:	3b01      	subs	r3, #1
 800a522:	b29b      	uxth	r3, r3
 800a524:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a528:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	b923      	cbnz	r3, 800a53a <SPI_TxISR_32BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a530:	6802      	ldr	r2, [r0, #0]
 800a532:	6913      	ldr	r3, [r2, #16]
 800a534:	f023 0302 	bic.w	r3, r3, #2
 800a538:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a53a:	4770      	bx	lr

0800a53c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a53c:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a53e:	6802      	ldr	r2, [r0, #0]
 800a540:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a542:	6991      	ldr	r1, [r2, #24]
 800a544:	f041 0108 	orr.w	r1, r1, #8
 800a548:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a54a:	6801      	ldr	r1, [r0, #0]
 800a54c:	698a      	ldr	r2, [r1, #24]
 800a54e:	f042 0210 	orr.w	r2, r2, #16
 800a552:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a554:	6801      	ldr	r1, [r0, #0]
 800a556:	680a      	ldr	r2, [r1, #0]
 800a558:	f022 0201 	bic.w	r2, r2, #1
 800a55c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a55e:	6801      	ldr	r1, [r0, #0]
 800a560:	690c      	ldr	r4, [r1, #16]
 800a562:	4a29      	ldr	r2, [pc, #164]	; (800a608 <SPI_CloseTransfer+0xcc>)
 800a564:	4022      	ands	r2, r4
 800a566:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a568:	6801      	ldr	r1, [r0, #0]
 800a56a:	688a      	ldr	r2, [r1, #8]
 800a56c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a570:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a572:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	2a04      	cmp	r2, #4
 800a57a:	d00d      	beq.n	800a598 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a57c:	f013 0f20 	tst.w	r3, #32
 800a580:	d00a      	beq.n	800a598 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a582:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a58a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a58e:	6801      	ldr	r1, [r0, #0]
 800a590:	698a      	ldr	r2, [r1, #24]
 800a592:	f042 0220 	orr.w	r2, r2, #32
 800a596:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a598:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a59c:	b2d2      	uxtb	r2, r2
 800a59e:	2a03      	cmp	r2, #3
 800a5a0:	d00d      	beq.n	800a5be <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a5a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a5a6:	d00a      	beq.n	800a5be <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5a8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a5ac:	f042 0204 	orr.w	r2, r2, #4
 800a5b0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5b4:	6801      	ldr	r1, [r0, #0]
 800a5b6:	698a      	ldr	r2, [r1, #24]
 800a5b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5bc:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a5be:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a5c2:	d00a      	beq.n	800a5da <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5c4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a5c8:	f042 0201 	orr.w	r2, r2, #1
 800a5cc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a5d0:	6801      	ldr	r1, [r0, #0]
 800a5d2:	698a      	ldr	r2, [r1, #24]
 800a5d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5d8:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a5da:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a5de:	d00a      	beq.n	800a5f6 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a5e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a5e4:	f043 0308 	orr.w	r3, r3, #8
 800a5e8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a5ec:	6802      	ldr	r2, [r0, #0]
 800a5ee:	6993      	ldr	r3, [r2, #24]
 800a5f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5f4:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a5fc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	fffffc90 	.word	0xfffffc90

0800a60c <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a60c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a60e:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a610:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a612:	3008      	adds	r0, #8
 800a614:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800a616:	fb03 0000 	mla	r0, r3, r0, r0
 800a61a:	4770      	bx	lr

0800a61c <SPI_WaitOnFlagUntilTimeout>:
{
 800a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a620:	4607      	mov	r7, r0
 800a622:	460e      	mov	r6, r1
 800a624:	4615      	mov	r5, r2
 800a626:	4698      	mov	r8, r3
 800a628:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a62a:	e000      	b.n	800a62e <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a62c:	b1c4      	cbz	r4, 800a660 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	ea36 0303 	bics.w	r3, r6, r3
 800a636:	bf0c      	ite	eq
 800a638:	f04f 0c01 	moveq.w	ip, #1
 800a63c:	f04f 0c00 	movne.w	ip, #0
 800a640:	45ac      	cmp	ip, r5
 800a642:	d10a      	bne.n	800a65a <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a644:	f7fc fa14 	bl	8006a70 <HAL_GetTick>
 800a648:	eba0 0008 	sub.w	r0, r0, r8
 800a64c:	42a0      	cmp	r0, r4
 800a64e:	d3ed      	bcc.n	800a62c <SPI_WaitOnFlagUntilTimeout+0x10>
 800a650:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a654:	d0ea      	beq.n	800a62c <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800a656:	2003      	movs	r0, #3
 800a658:	e000      	b.n	800a65c <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800a65a:	2000      	movs	r0, #0
}
 800a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 800a660:	2003      	movs	r0, #3
 800a662:	e7fb      	b.n	800a65c <SPI_WaitOnFlagUntilTimeout+0x40>

0800a664 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a664:	2800      	cmp	r0, #0
 800a666:	f000 80a3 	beq.w	800a7b0 <HAL_SPI_Init+0x14c>
{
 800a66a:	b570      	push	{r4, r5, r6, lr}
 800a66c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a66e:	2300      	movs	r3, #0
 800a670:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a672:	6805      	ldr	r5, [r0, #0]
 800a674:	4b52      	ldr	r3, [pc, #328]	; (800a7c0 <HAL_SPI_Init+0x15c>)
 800a676:	4e53      	ldr	r6, [pc, #332]	; (800a7c4 <HAL_SPI_Init+0x160>)
 800a678:	429d      	cmp	r5, r3
 800a67a:	bf18      	it	ne
 800a67c:	42b5      	cmpne	r5, r6
 800a67e:	bf14      	ite	ne
 800a680:	2601      	movne	r6, #1
 800a682:	2600      	moveq	r6, #0
 800a684:	d007      	beq.n	800a696 <HAL_SPI_Init+0x32>
 800a686:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800a68a:	429d      	cmp	r5, r3
 800a68c:	d003      	beq.n	800a696 <HAL_SPI_Init+0x32>
 800a68e:	68c3      	ldr	r3, [r0, #12]
 800a690:	2b0f      	cmp	r3, #15
 800a692:	f200 808f 	bhi.w	800a7b4 <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff ffb8 	bl	800a60c <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a69c:	b12e      	cbz	r6, 800a6aa <HAL_SPI_Init+0x46>
 800a69e:	4b4a      	ldr	r3, [pc, #296]	; (800a7c8 <HAL_SPI_Init+0x164>)
 800a6a0:	429d      	cmp	r5, r3
 800a6a2:	d002      	beq.n	800a6aa <HAL_SPI_Init+0x46>
 800a6a4:	2808      	cmp	r0, #8
 800a6a6:	f200 8087 	bhi.w	800a7b8 <HAL_SPI_Init+0x154>
 800a6aa:	4a45      	ldr	r2, [pc, #276]	; (800a7c0 <HAL_SPI_Init+0x15c>)
 800a6ac:	4b45      	ldr	r3, [pc, #276]	; (800a7c4 <HAL_SPI_Init+0x160>)
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	bf18      	it	ne
 800a6b2:	4295      	cmpne	r5, r2
 800a6b4:	d003      	beq.n	800a6be <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	d101      	bne.n	800a6c2 <HAL_SPI_Init+0x5e>
 800a6be:	2810      	cmp	r0, #16
 800a6c0:	d87c      	bhi.n	800a7bc <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6c2:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d059      	beq.n	800a77e <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a6d0:	6822      	ldr	r2, [r4, #0]
 800a6d2:	6813      	ldr	r3, [r2, #0]
 800a6d4:	f023 0301 	bic.w	r3, r3, #1
 800a6d8:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a6da:	6821      	ldr	r1, [r4, #0]
 800a6dc:	688a      	ldr	r2, [r1, #8]
 800a6de:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a6e2:	69a3      	ldr	r3, [r4, #24]
 800a6e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6e8:	d04f      	beq.n	800a78a <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a6ea:	69e3      	ldr	r3, [r4, #28]
 800a6ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a6ee:	430b      	orrs	r3, r1
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	68e1      	ldr	r1, [r4, #12]
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	430b      	orrs	r3, r1
 800a6fc:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a6fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a700:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a702:	4313      	orrs	r3, r2
 800a704:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a706:	4313      	orrs	r3, r2
 800a708:	69a2      	ldr	r2, [r4, #24]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	6922      	ldr	r2, [r4, #16]
 800a70e:	4313      	orrs	r3, r2
 800a710:	6962      	ldr	r2, [r4, #20]
 800a712:	4313      	orrs	r3, r2
 800a714:	6a22      	ldr	r2, [r4, #32]
 800a716:	4313      	orrs	r3, r2
 800a718:	6862      	ldr	r2, [r4, #4]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a71e:	4313      	orrs	r3, r2
 800a720:	68a2      	ldr	r2, [r4, #8]
 800a722:	4313      	orrs	r3, r2
 800a724:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a726:	4313      	orrs	r3, r2
 800a728:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	430b      	orrs	r3, r1
 800a72e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a730:	6863      	ldr	r3, [r4, #4]
 800a732:	b96b      	cbnz	r3, 800a750 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a734:	6822      	ldr	r2, [r4, #0]
 800a736:	6893      	ldr	r3, [r2, #8]
 800a738:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a73c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a740:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a742:	6822      	ldr	r2, [r4, #0]
 800a744:	6893      	ldr	r3, [r2, #8]
 800a746:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a74a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a74e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a750:	6822      	ldr	r2, [r4, #0]
 800a752:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a754:	f023 0301 	bic.w	r3, r3, #1
 800a758:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a760:	d006      	beq.n	800a770 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	68d3      	ldr	r3, [r2, #12]
 800a766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a76a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a76c:	430b      	orrs	r3, r1
 800a76e:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a770:	2000      	movs	r0, #0
 800a772:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a776:	2301      	movs	r3, #1
 800a778:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800a77e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a782:	4620      	mov	r0, r4
 800a784:	f7f8 f85e 	bl	8002844 <HAL_SPI_MspInit>
 800a788:	e79f      	b.n	800a6ca <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a78a:	6863      	ldr	r3, [r4, #4]
 800a78c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a790:	d006      	beq.n	800a7a0 <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1a9      	bne.n	800a6ea <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a79c:	d1a5      	bne.n	800a6ea <HAL_SPI_Init+0x86>
 800a79e:	e002      	b.n	800a7a6 <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a7a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d1f5      	bne.n	800a792 <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a7a6:	680b      	ldr	r3, [r1, #0]
 800a7a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7ac:	600b      	str	r3, [r1, #0]
 800a7ae:	e79c      	b.n	800a6ea <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 800a7b0:	2001      	movs	r0, #1
}
 800a7b2:	4770      	bx	lr
    return HAL_ERROR;
 800a7b4:	2001      	movs	r0, #1
 800a7b6:	e7e1      	b.n	800a77c <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	e7df      	b.n	800a77c <HAL_SPI_Init+0x118>
 800a7bc:	2001      	movs	r0, #1
 800a7be:	e7dd      	b.n	800a77c <HAL_SPI_Init+0x118>
 800a7c0:	40013000 	.word	0x40013000
 800a7c4:	40003800 	.word	0x40003800
 800a7c8:	40003c00 	.word	0x40003c00

0800a7cc <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800a7cc:	b198      	cbz	r0, 800a7f6 <HAL_SPI_DeInit+0x2a>
{
 800a7ce:	b510      	push	{r4, lr}
 800a7d0:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a7d8:	6802      	ldr	r2, [r0, #0]
 800a7da:	6813      	ldr	r3, [r2, #0]
 800a7dc:	f023 0301 	bic.w	r3, r3, #1
 800a7e0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800a7e2:	f7f8 f89b 	bl	800291c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800a7ec:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 800a7f0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a7f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a7f6:	2001      	movs	r0, #1
}
 800a7f8:	4770      	bx	lr

0800a7fa <HAL_SPI_TransmitReceive>:
{
 800a7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	461d      	mov	r5, r3
 800a802:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a804:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800a808:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	f000 8179 	beq.w	800ab04 <HAL_SPI_TransmitReceive+0x30a>
 800a812:	4604      	mov	r4, r0
 800a814:	4688      	mov	r8, r1
 800a816:	4691      	mov	r9, r2
 800a818:	2301      	movs	r3, #1
 800a81a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800a81e:	f7fc f927 	bl	8006a70 <HAL_GetTick>
 800a822:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800a824:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a828:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800a82a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d007      	beq.n	800a840 <HAL_SPI_TransmitReceive+0x46>
 800a830:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800a834:	d13d      	bne.n	800a8b2 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a836:	68a2      	ldr	r2, [r4, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800a838:	2a00      	cmp	r2, #0
 800a83a:	d13a      	bne.n	800a8b2 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d138      	bne.n	800a8b2 <HAL_SPI_TransmitReceive+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a840:	f1b9 0f00 	cmp.w	r9, #0
 800a844:	bf18      	it	ne
 800a846:	f1b8 0f00 	cmpne.w	r8, #0
 800a84a:	d039      	beq.n	800a8c0 <HAL_SPI_TransmitReceive+0xc6>
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	d037      	beq.n	800a8c0 <HAL_SPI_TransmitReceive+0xc6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a850:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b04      	cmp	r3, #4
 800a858:	d002      	beq.n	800a860 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a85a:	2305      	movs	r3, #5
 800a85c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a860:	2300      	movs	r3, #0
 800a862:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a866:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a86a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a86e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a872:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a876:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a87a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800a87e:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a880:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a882:	6822      	ldr	r2, [r4, #0]
 800a884:	6851      	ldr	r1, [r2, #4]
 800a886:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800a88a:	400b      	ands	r3, r1
 800a88c:	432b      	orrs	r3, r5
 800a88e:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800a890:	6822      	ldr	r2, [r4, #0]
 800a892:	6813      	ldr	r3, [r2, #0]
 800a894:	f043 0301 	orr.w	r3, r3, #1
 800a898:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8a0:	d013      	beq.n	800a8ca <HAL_SPI_TransmitReceive+0xd0>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a8a2:	68e3      	ldr	r3, [r4, #12]
 800a8a4:	2b0f      	cmp	r3, #15
 800a8a6:	d868      	bhi.n	800a97a <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8a8:	2b07      	cmp	r3, #7
 800a8aa:	f200 80bb 	bhi.w	800aa24 <HAL_SPI_TransmitReceive+0x22a>
  initial_RxXferCount = Size;
 800a8ae:	46a8      	mov	r8, r5
 800a8b0:	e0c4      	b.n	800aa3c <HAL_SPI_TransmitReceive+0x242>
    __HAL_UNLOCK(hspi);
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a8b8:	2002      	movs	r0, #2
}
 800a8ba:	b002      	add	sp, #8
 800a8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	e7f7      	b.n	800a8ba <HAL_SPI_TransmitReceive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a8ca:	6822      	ldr	r2, [r4, #0]
 800a8cc:	6813      	ldr	r3, [r2, #0]
 800a8ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	e7e5      	b.n	800a8a2 <HAL_SPI_TransmitReceive+0xa8>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	6959      	ldr	r1, [r3, #20]
 800a8da:	f248 0208 	movw	r2, #32776	; 0x8008
 800a8de:	4211      	tst	r1, r2
 800a8e0:	d013      	beq.n	800a90a <HAL_SPI_TransmitReceive+0x110>
 800a8e2:	f1b8 0f00 	cmp.w	r8, #0
 800a8e6:	d010      	beq.n	800a90a <HAL_SPI_TransmitReceive+0x110>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a8e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ec:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800a8f4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a902:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800a906:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a90a:	f7fc f8b1 	bl	8006a70 <HAL_GetTick>
 800a90e:	1bc0      	subs	r0, r0, r7
 800a910:	42b0      	cmp	r0, r6
 800a912:	d302      	bcc.n	800a91a <HAL_SPI_TransmitReceive+0x120>
 800a914:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a918:	d11e      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x15e>
 800a91a:	b1ee      	cbz	r6, 800a958 <HAL_SPI_TransmitReceive+0x15e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a91c:	ea45 0308 	orr.w	r3, r5, r8
 800a920:	b29b      	uxth	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 80d2 	beq.w	800aacc <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a928:	6823      	ldr	r3, [r4, #0]
 800a92a:	695a      	ldr	r2, [r3, #20]
 800a92c:	f012 0f02 	tst.w	r2, #2
 800a930:	d0d1      	beq.n	800a8d6 <HAL_SPI_TransmitReceive+0xdc>
 800a932:	2d00      	cmp	r5, #0
 800a934:	d0cf      	beq.n	800a8d6 <HAL_SPI_TransmitReceive+0xdc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a936:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a938:	6812      	ldr	r2, [r2, #0]
 800a93a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a93c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a93e:	3304      	adds	r3, #4
 800a940:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800a942:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a946:	b29b      	uxth	r3, r3
 800a948:	3b01      	subs	r3, #1
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a950:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800a954:	b2ad      	uxth	r5, r5
 800a956:	e7be      	b.n	800a8d6 <HAL_SPI_TransmitReceive+0xdc>
        SPI_CloseTransfer(hspi);
 800a958:	4620      	mov	r0, r4
 800a95a:	f7ff fdef 	bl	800a53c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800a95e:	2300      	movs	r3, #0
 800a960:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a964:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a96c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a970:	2301      	movs	r3, #1
 800a972:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800a976:	2003      	movs	r0, #3
 800a978:	e79f      	b.n	800a8ba <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800a97a:	46a8      	mov	r8, r5
 800a97c:	e7ce      	b.n	800a91c <HAL_SPI_TransmitReceive+0x122>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a97e:	f7fc f877 	bl	8006a70 <HAL_GetTick>
 800a982:	1bc0      	subs	r0, r0, r7
 800a984:	42b0      	cmp	r0, r6
 800a986:	d302      	bcc.n	800a98e <HAL_SPI_TransmitReceive+0x194>
 800a988:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a98c:	d139      	bne.n	800aa02 <HAL_SPI_TransmitReceive+0x208>
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d037      	beq.n	800aa02 <HAL_SPI_TransmitReceive+0x208>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a992:	ea45 0308 	orr.w	r3, r5, r8
 800a996:	b29b      	uxth	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 8097 	beq.w	800aacc <HAL_SPI_TransmitReceive+0x2d2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	f013 0f02 	tst.w	r3, #2
 800a9a6:	d011      	beq.n	800a9cc <HAL_SPI_TransmitReceive+0x1d2>
 800a9a8:	b185      	cbz	r5, 800a9cc <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a9aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	f8aa 3020 	strh.w	r3, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800a9b8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a9c6:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800a9ca:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	695b      	ldr	r3, [r3, #20]
 800a9d0:	f013 0f01 	tst.w	r3, #1
 800a9d4:	d0d3      	beq.n	800a97e <HAL_SPI_TransmitReceive+0x184>
 800a9d6:	f1b8 0f00 	cmp.w	r8, #0
 800a9da:	d0d0      	beq.n	800a97e <HAL_SPI_TransmitReceive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a9dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9de:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800a9e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9e6:	3302      	adds	r3, #2
 800a9e8:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800a9ea:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a9f8:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800a9fc:	fa1f f888 	uxth.w	r8, r8
 800aa00:	e7bd      	b.n	800a97e <HAL_SPI_TransmitReceive+0x184>
        SPI_CloseTransfer(hspi);
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff fd9a 	bl	800a53c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa0e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800aa20:	2003      	movs	r0, #3
 800aa22:	e74a      	b.n	800a8ba <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800aa24:	46a8      	mov	r8, r5
 800aa26:	e7b4      	b.n	800a992 <HAL_SPI_TransmitReceive+0x198>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa28:	f7fc f822 	bl	8006a70 <HAL_GetTick>
 800aa2c:	1bc0      	subs	r0, r0, r7
 800aa2e:	42b0      	cmp	r0, r6
 800aa30:	d302      	bcc.n	800aa38 <HAL_SPI_TransmitReceive+0x23e>
 800aa32:	f1b6 3fff 	cmp.w	r6, #4294967295
 800aa36:	d138      	bne.n	800aaaa <HAL_SPI_TransmitReceive+0x2b0>
 800aa38:	2e00      	cmp	r6, #0
 800aa3a:	d036      	beq.n	800aaaa <HAL_SPI_TransmitReceive+0x2b0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa3c:	ea45 0308 	orr.w	r3, r5, r8
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d042      	beq.n	800aacc <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	695a      	ldr	r2, [r3, #20]
 800aa4a:	f012 0f02 	tst.w	r2, #2
 800aa4e:	d011      	beq.n	800aa74 <HAL_SPI_TransmitReceive+0x27a>
 800aa50:	b185      	cbz	r5, 800aa74 <HAL_SPI_TransmitReceive+0x27a>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800aa52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aa54:	7812      	ldrb	r2, [r2, #0]
 800aa56:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800aa60:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa6e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800aa72:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	695a      	ldr	r2, [r3, #20]
 800aa78:	f012 0f01 	tst.w	r2, #1
 800aa7c:	d0d4      	beq.n	800aa28 <HAL_SPI_TransmitReceive+0x22e>
 800aa7e:	f1b8 0f00 	cmp.w	r8, #0
 800aa82:	d0d1      	beq.n	800aa28 <HAL_SPI_TransmitReceive+0x22e>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa8a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa8e:	3301      	adds	r3, #1
 800aa90:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800aa92:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800aaa0:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800aaa4:	fa1f f888 	uxth.w	r8, r8
 800aaa8:	e7be      	b.n	800aa28 <HAL_SPI_TransmitReceive+0x22e>
        SPI_CloseTransfer(hspi);
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f7ff fd46 	bl	800a53c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800aab0:	2300      	movs	r3, #0
 800aab2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aab6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aaba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aabe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800aac2:	2301      	movs	r3, #1
 800aac4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800aac8:	2003      	movs	r0, #3
 800aaca:	e6f6      	b.n	800a8ba <HAL_SPI_TransmitReceive+0xc0>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800aacc:	9600      	str	r6, [sp, #0]
 800aace:	463b      	mov	r3, r7
 800aad0:	2200      	movs	r2, #0
 800aad2:	2108      	movs	r1, #8
 800aad4:	4620      	mov	r0, r4
 800aad6:	f7ff fda1 	bl	800a61c <SPI_WaitOnFlagUntilTimeout>
 800aada:	b128      	cbz	r0, 800aae8 <HAL_SPI_TransmitReceive+0x2ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aadc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aae0:	f043 0320 	orr.w	r3, r3, #32
 800aae4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800aae8:	4620      	mov	r0, r4
 800aaea:	f7ff fd27 	bl	800a53c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aafa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aafe:	b91b      	cbnz	r3, 800ab08 <HAL_SPI_TransmitReceive+0x30e>
  return errorcode;
 800ab00:	2000      	movs	r0, #0
 800ab02:	e6da      	b.n	800a8ba <HAL_SPI_TransmitReceive+0xc0>
  __HAL_LOCK(hspi);
 800ab04:	2002      	movs	r0, #2
 800ab06:	e6d8      	b.n	800a8ba <HAL_SPI_TransmitReceive+0xc0>
    return HAL_ERROR;
 800ab08:	2001      	movs	r0, #1
 800ab0a:	e6d6      	b.n	800a8ba <HAL_SPI_TransmitReceive+0xc0>

0800ab0c <HAL_SPI_Receive>:
{
 800ab0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	4604      	mov	r4, r0
 800ab14:	468a      	mov	sl, r1
 800ab16:	4691      	mov	r9, r2
 800ab18:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ab1a:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ab1e:	6843      	ldr	r3, [r0, #4]
 800ab20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab24:	d042      	beq.n	800abac <HAL_SPI_Receive+0xa0>
  __HAL_LOCK(hspi);
 800ab26:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	f000 810c 	beq.w	800ad48 <HAL_SPI_Receive+0x23c>
 800ab30:	2301      	movs	r3, #1
 800ab32:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800ab36:	f7fb ff9b 	bl	8006a70 <HAL_GetTick>
 800ab3a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ab3c:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 800ab40:	b2f6      	uxtb	r6, r6
 800ab42:	2e01      	cmp	r6, #1
 800ab44:	d13f      	bne.n	800abc6 <HAL_SPI_Receive+0xba>
  if ((pData == NULL) || (Size == 0UL))
 800ab46:	f1b9 0f00 	cmp.w	r9, #0
 800ab4a:	bf18      	it	ne
 800ab4c:	f1ba 0f00 	cmpne.w	sl, #0
 800ab50:	d041      	beq.n	800abd6 <HAL_SPI_Receive+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ab52:	2304      	movs	r3, #4
 800ab54:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab5e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ab62:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ab66:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800ab6a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ab6c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ab70:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ab74:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ab76:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab78:	68a3      	ldr	r3, [r4, #8]
 800ab7a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ab7e:	d02e      	beq.n	800abde <HAL_SPI_Receive+0xd2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	6859      	ldr	r1, [r3, #4]
 800ab84:	4a71      	ldr	r2, [pc, #452]	; (800ad4c <HAL_SPI_Receive+0x240>)
 800ab86:	400a      	ands	r2, r1
 800ab88:	ea49 0202 	orr.w	r2, r9, r2
 800ab8c:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	6813      	ldr	r3, [r2, #0]
 800ab92:	f043 0301 	orr.w	r3, r3, #1
 800ab96:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab9e:	d024      	beq.n	800abea <HAL_SPI_Receive+0xde>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aba0:	68e3      	ldr	r3, [r4, #12]
 800aba2:	2b0f      	cmp	r3, #15
 800aba4:	d830      	bhi.n	800ac08 <HAL_SPI_Receive+0xfc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aba6:	2b07      	cmp	r3, #7
 800aba8:	d862      	bhi.n	800ac70 <HAL_SPI_Receive+0x164>
 800abaa:	e094      	b.n	800acd6 <HAL_SPI_Receive+0x1ca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800abac:	6883      	ldr	r3, [r0, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1b9      	bne.n	800ab26 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800abb2:	2304      	movs	r3, #4
 800abb4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800abb8:	9500      	str	r5, [sp, #0]
 800abba:	4613      	mov	r3, r2
 800abbc:	460a      	mov	r2, r1
 800abbe:	f7ff fe1c 	bl	800a7fa <HAL_SPI_TransmitReceive>
 800abc2:	4606      	mov	r6, r0
 800abc4:	e003      	b.n	800abce <HAL_SPI_Receive+0xc2>
    __HAL_UNLOCK(hspi);
 800abc6:	2300      	movs	r3, #0
 800abc8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800abcc:	2602      	movs	r6, #2
}
 800abce:	4630      	mov	r0, r6
 800abd0:	b002      	add	sp, #8
 800abd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800abd6:	2300      	movs	r3, #0
 800abd8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800abdc:	e7f7      	b.n	800abce <HAL_SPI_Receive+0xc2>
    SPI_1LINE_RX(hspi);
 800abde:	6822      	ldr	r2, [r4, #0]
 800abe0:	6813      	ldr	r3, [r2, #0]
 800abe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	e7ca      	b.n	800ab80 <HAL_SPI_Receive+0x74>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800abea:	6822      	ldr	r2, [r4, #0]
 800abec:	6813      	ldr	r3, [r2, #0]
 800abee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	e7d4      	b.n	800aba0 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abf6:	f7fb ff3b 	bl	8006a70 <HAL_GetTick>
 800abfa:	1bc0      	subs	r0, r0, r7
 800abfc:	42a8      	cmp	r0, r5
 800abfe:	d302      	bcc.n	800ac06 <HAL_SPI_Receive+0xfa>
 800ac00:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ac04:	d11a      	bne.n	800ac3c <HAL_SPI_Receive+0x130>
 800ac06:	b1cd      	cbz	r5, 800ac3c <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0UL)
 800ac08:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 808a 	beq.w	800ad28 <HAL_SPI_Receive+0x21c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	6959      	ldr	r1, [r3, #20]
 800ac18:	f248 0208 	movw	r2, #32776	; 0x8008
 800ac1c:	4211      	tst	r1, r2
 800ac1e:	d0ea      	beq.n	800abf6 <HAL_SPI_Receive+0xea>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac20:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac24:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac28:	3304      	adds	r3, #4
 800ac2a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800ac2c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ac30:	b292      	uxth	r2, r2
 800ac32:	3a01      	subs	r2, #1
 800ac34:	b292      	uxth	r2, r2
 800ac36:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ac3a:	e7e5      	b.n	800ac08 <HAL_SPI_Receive+0xfc>
          SPI_CloseTransfer(hspi);
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7ff fc7d 	bl	800a53c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800ac42:	2300      	movs	r3, #0
 800ac44:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ac4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac54:	2301      	movs	r3, #1
 800ac56:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800ac5a:	2603      	movs	r6, #3
 800ac5c:	e7b7      	b.n	800abce <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac5e:	f7fb ff07 	bl	8006a70 <HAL_GetTick>
 800ac62:	1bc0      	subs	r0, r0, r7
 800ac64:	42a8      	cmp	r0, r5
 800ac66:	d302      	bcc.n	800ac6e <HAL_SPI_Receive+0x162>
 800ac68:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ac6c:	d119      	bne.n	800aca2 <HAL_SPI_Receive+0x196>
 800ac6e:	b1c5      	cbz	r5, 800aca2 <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0UL)
 800ac70:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d056      	beq.n	800ad28 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	f013 0f01 	tst.w	r3, #1
 800ac82:	d0ec      	beq.n	800ac5e <HAL_SPI_Receive+0x152>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac86:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800ac8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac8e:	3302      	adds	r3, #2
 800ac90:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800ac92:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800aca0:	e7e6      	b.n	800ac70 <HAL_SPI_Receive+0x164>
          SPI_CloseTransfer(hspi);
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff fc4a 	bl	800a53c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800aca8:	2300      	movs	r3, #0
 800acaa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800acae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800acb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800acba:	2301      	movs	r3, #1
 800acbc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800acc0:	2603      	movs	r6, #3
 800acc2:	e784      	b.n	800abce <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acc4:	f7fb fed4 	bl	8006a70 <HAL_GetTick>
 800acc8:	1bc0      	subs	r0, r0, r7
 800acca:	42a8      	cmp	r0, r5
 800accc:	d302      	bcc.n	800acd4 <HAL_SPI_Receive+0x1c8>
 800acce:	f1b5 3fff 	cmp.w	r5, #4294967295
 800acd2:	d118      	bne.n	800ad06 <HAL_SPI_Receive+0x1fa>
 800acd4:	b1bd      	cbz	r5, 800ad06 <HAL_SPI_Receive+0x1fa>
    while (hspi->RxXferCount > 0UL)
 800acd6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800acda:	b29b      	uxth	r3, r3
 800acdc:	b323      	cbz	r3, 800ad28 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	695a      	ldr	r2, [r3, #20]
 800ace2:	f012 0f01 	tst.w	r2, #1
 800ace6:	d0ed      	beq.n	800acc4 <HAL_SPI_Receive+0x1b8>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ace8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acee:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800acf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acf2:	3301      	adds	r3, #1
 800acf4:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800acf6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	3b01      	subs	r3, #1
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ad04:	e7e7      	b.n	800acd6 <HAL_SPI_Receive+0x1ca>
          SPI_CloseTransfer(hspi);
 800ad06:	4620      	mov	r0, r4
 800ad08:	f7ff fc18 	bl	800a53c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad12:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ad16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad1a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800ad24:	2603      	movs	r6, #3
 800ad26:	e752      	b.n	800abce <HAL_SPI_Receive+0xc2>
  SPI_CloseTransfer(hspi);
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f7ff fc07 	bl	800a53c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800ad34:	2301      	movs	r3, #1
 800ad36:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f47f af45 	bne.w	800abce <HAL_SPI_Receive+0xc2>
  return errorcode;
 800ad44:	2600      	movs	r6, #0
 800ad46:	e742      	b.n	800abce <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 800ad48:	2602      	movs	r6, #2
 800ad4a:	e740      	b.n	800abce <HAL_SPI_Receive+0xc2>
 800ad4c:	ffff0000 	.word	0xffff0000

0800ad50 <HAL_SPI_Transmit_IT>:
  __HAL_LOCK(hspi);
 800ad50:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d060      	beq.n	800ae1a <HAL_SPI_Transmit_IT+0xca>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if ((pData == NULL) || (Size == 0UL))
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	bf18      	it	ne
 800ad62:	2900      	cmpne	r1, #0
 800ad64:	d03b      	beq.n	800adde <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ad66:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d13b      	bne.n	800ade8 <HAL_SPI_Transmit_IT+0x98>
{
 800ad70:	b410      	push	{r4}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad72:	2303      	movs	r3, #3
 800ad74:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad7e:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ad80:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ad84:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800ad88:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ad8a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ad8e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800ad92:	6703      	str	r3, [r0, #112]	; 0x70
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad94:	68c3      	ldr	r3, [r0, #12]
 800ad96:	2b0f      	cmp	r3, #15
 800ad98:	d92b      	bls.n	800adf2 <HAL_SPI_Transmit_IT+0xa2>
    hspi->TxISR = SPI_TxISR_32BIT;
 800ad9a:	4b21      	ldr	r3, [pc, #132]	; (800ae20 <HAL_SPI_Transmit_IT+0xd0>)
 800ad9c:	6743      	str	r3, [r0, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad9e:	6883      	ldr	r3, [r0, #8]
 800ada0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ada4:	d02d      	beq.n	800ae02 <HAL_SPI_Transmit_IT+0xb2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ada6:	6801      	ldr	r1, [r0, #0]
 800ada8:	684c      	ldr	r4, [r1, #4]
 800adaa:	4b1e      	ldr	r3, [pc, #120]	; (800ae24 <HAL_SPI_Transmit_IT+0xd4>)
 800adac:	4023      	ands	r3, r4
 800adae:	431a      	orrs	r2, r3
 800adb0:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800adb2:	6802      	ldr	r2, [r0, #0]
 800adb4:	6813      	ldr	r3, [r2, #0]
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800adbc:	6802      	ldr	r2, [r0, #0]
 800adbe:	6911      	ldr	r1, [r2, #16]
 800adc0:	f240 732a 	movw	r3, #1834	; 0x72a
 800adc4:	430b      	orrs	r3, r1
 800adc6:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adc8:	6843      	ldr	r3, [r0, #4]
 800adca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adce:	d01e      	beq.n	800ae0e <HAL_SPI_Transmit_IT+0xbe>
  __HAL_UNLOCK(hspi);
 800add0:	2300      	movs	r3, #0
 800add2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800add6:	4618      	mov	r0, r3
}
 800add8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800addc:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800adde:	2300      	movs	r3, #0
 800ade0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ade4:	2001      	movs	r0, #1
 800ade6:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800ade8:	2300      	movs	r3, #0
 800adea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800adee:	2002      	movs	r0, #2
 800adf0:	4770      	bx	lr
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adf2:	2b07      	cmp	r3, #7
 800adf4:	d902      	bls.n	800adfc <HAL_SPI_Transmit_IT+0xac>
    hspi->TxISR = SPI_TxISR_16BIT;
 800adf6:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <HAL_SPI_Transmit_IT+0xd8>)
 800adf8:	6743      	str	r3, [r0, #116]	; 0x74
 800adfa:	e7d0      	b.n	800ad9e <HAL_SPI_Transmit_IT+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800adfc:	4b0b      	ldr	r3, [pc, #44]	; (800ae2c <HAL_SPI_Transmit_IT+0xdc>)
 800adfe:	6743      	str	r3, [r0, #116]	; 0x74
 800ae00:	e7cd      	b.n	800ad9e <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 800ae02:	6801      	ldr	r1, [r0, #0]
 800ae04:	680b      	ldr	r3, [r1, #0]
 800ae06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae0a:	600b      	str	r3, [r1, #0]
 800ae0c:	e7cb      	b.n	800ada6 <HAL_SPI_Transmit_IT+0x56>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ae0e:	6802      	ldr	r2, [r0, #0]
 800ae10:	6813      	ldr	r3, [r2, #0]
 800ae12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	e7da      	b.n	800add0 <HAL_SPI_Transmit_IT+0x80>
  __HAL_LOCK(hspi);
 800ae1a:	2002      	movs	r0, #2
}
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	0800a50d 	.word	0x0800a50d
 800ae24:	ffff0000 	.word	0xffff0000
 800ae28:	0800a4dd 	.word	0x0800a4dd
 800ae2c:	0800a4ab 	.word	0x0800a4ab

0800ae30 <HAL_SPI_TransmitReceive_IT>:
{
 800ae30:	b430      	push	{r4, r5}
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ae32:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hspi);
 800ae34:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 800ae38:	f1bc 0f01 	cmp.w	ip, #1
 800ae3c:	f000 8101 	beq.w	800b042 <HAL_SPI_TransmitReceive_IT+0x212>
 800ae40:	f04f 0c01 	mov.w	ip, #1
 800ae44:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80
  tmp_state  = hspi->State;
 800ae48:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
 800ae4c:	fa5f fc8c 	uxtb.w	ip, ip
  tmp_mode   = hspi->Init.Mode;
 800ae50:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae52:	f1bc 0f01 	cmp.w	ip, #1
 800ae56:	d008      	beq.n	800ae6a <HAL_SPI_TransmitReceive_IT+0x3a>
 800ae58:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800ae5c:	d136      	bne.n	800aecc <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ae5e:	6885      	ldr	r5, [r0, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800ae60:	2d00      	cmp	r5, #0
 800ae62:	d133      	bne.n	800aecc <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ae64:	f1bc 0f04 	cmp.w	ip, #4
 800ae68:	d130      	bne.n	800aecc <HAL_SPI_TransmitReceive_IT+0x9c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	bf18      	it	ne
 800ae6e:	2900      	cmpne	r1, #0
 800ae70:	d032      	beq.n	800aed8 <HAL_SPI_TransmitReceive_IT+0xa8>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d030      	beq.n	800aed8 <HAL_SPI_TransmitReceive_IT+0xa8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae76:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800ae7a:	b2ed      	uxtb	r5, r5
 800ae7c:	2d04      	cmp	r5, #4
 800ae7e:	d002      	beq.n	800ae86 <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae80:	2505      	movs	r5, #5
 800ae82:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae86:	2500      	movs	r5, #0
 800ae88:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae8c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ae8e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ae92:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae96:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ae98:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ae9c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800aea0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800aea4:	b292      	uxth	r2, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aea6:	68c1      	ldr	r1, [r0, #12]
 800aea8:	290f      	cmp	r1, #15
 800aeaa:	d91a      	bls.n	800aee2 <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->TxISR     = SPI_TxISR_32BIT;
 800aeac:	4966      	ldr	r1, [pc, #408]	; (800b048 <HAL_SPI_TransmitReceive_IT+0x218>)
 800aeae:	6741      	str	r1, [r0, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800aeb0:	4966      	ldr	r1, [pc, #408]	; (800b04c <HAL_SPI_TransmitReceive_IT+0x21c>)
 800aeb2:	6701      	str	r1, [r0, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aeb4:	6865      	ldr	r5, [r4, #4]
 800aeb6:	4966      	ldr	r1, [pc, #408]	; (800b050 <HAL_SPI_TransmitReceive_IT+0x220>)
 800aeb8:	4029      	ands	r1, r5
 800aeba:	430b      	orrs	r3, r1
 800aebc:	6063      	str	r3, [r4, #4]
  __HAL_SPI_ENABLE(hspi);
 800aebe:	6801      	ldr	r1, [r0, #0]
 800aec0:	680b      	ldr	r3, [r1, #0]
 800aec2:	f043 0301 	orr.w	r3, r3, #1
 800aec6:	600b      	str	r3, [r1, #0]
  uint32_t max_fifo_length = 0UL;
 800aec8:	2100      	movs	r1, #0
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800aeca:	e041      	b.n	800af50 <HAL_SPI_TransmitReceive_IT+0x120>
    __HAL_UNLOCK(hspi);
 800aecc:	2300      	movs	r3, #0
 800aece:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800aed2:	2002      	movs	r0, #2
}
 800aed4:	bc30      	pop	{r4, r5}
 800aed6:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800aed8:	2300      	movs	r3, #0
 800aeda:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800aede:	2001      	movs	r0, #1
 800aee0:	e7f8      	b.n	800aed4 <HAL_SPI_TransmitReceive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aee2:	2907      	cmp	r1, #7
 800aee4:	d904      	bls.n	800aef0 <HAL_SPI_TransmitReceive_IT+0xc0>
    hspi->RxISR     = SPI_RxISR_16BIT;
 800aee6:	495b      	ldr	r1, [pc, #364]	; (800b054 <HAL_SPI_TransmitReceive_IT+0x224>)
 800aee8:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800aeea:	495b      	ldr	r1, [pc, #364]	; (800b058 <HAL_SPI_TransmitReceive_IT+0x228>)
 800aeec:	6741      	str	r1, [r0, #116]	; 0x74
 800aeee:	e7e1      	b.n	800aeb4 <HAL_SPI_TransmitReceive_IT+0x84>
    hspi->RxISR     = SPI_RxISR_8BIT;
 800aef0:	495a      	ldr	r1, [pc, #360]	; (800b05c <HAL_SPI_TransmitReceive_IT+0x22c>)
 800aef2:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800aef4:	495a      	ldr	r1, [pc, #360]	; (800b060 <HAL_SPI_TransmitReceive_IT+0x230>)
 800aef6:	6741      	str	r1, [r0, #116]	; 0x74
 800aef8:	e7dc      	b.n	800aeb4 <HAL_SPI_TransmitReceive_IT+0x84>
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aefa:	2b07      	cmp	r3, #7
 800aefc:	d945      	bls.n	800af8a <HAL_SPI_TransmitReceive_IT+0x15a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aefe:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af02:	b29b      	uxth	r3, r3
 800af04:	2b01      	cmp	r3, #1
 800af06:	d912      	bls.n	800af2e <HAL_SPI_TransmitReceive_IT+0xfe>
 800af08:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af0a:	b183      	cbz	r3, 800af2e <HAL_SPI_TransmitReceive_IT+0xfe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800af0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800af12:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af14:	3304      	adds	r3, #4
 800af16:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800af18:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	3b02      	subs	r3, #2
 800af20:	b29b      	uxth	r3, r3
 800af22:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800af26:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800af2a:	b292      	uxth	r2, r2
 800af2c:	e00f      	b.n	800af4e <HAL_SPI_TransmitReceive_IT+0x11e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800af2e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800af34:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af36:	3302      	adds	r3, #2
 800af38:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800af3a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af3e:	b29b      	uxth	r3, r3
 800af40:	3b01      	subs	r3, #1
 800af42:	b29b      	uxth	r3, r3
 800af44:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800af48:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800af4c:	b292      	uxth	r2, r2
      max_fifo_length++;
 800af4e:	3101      	adds	r1, #1
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800af50:	6805      	ldr	r5, [r0, #0]
 800af52:	696b      	ldr	r3, [r5, #20]
 800af54:	f013 0f02 	tst.w	r3, #2
 800af58:	d05f      	beq.n	800b01a <HAL_SPI_TransmitReceive_IT+0x1ea>
 800af5a:	2a00      	cmp	r2, #0
 800af5c:	d05d      	beq.n	800b01a <HAL_SPI_TransmitReceive_IT+0x1ea>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800af5e:	290f      	cmp	r1, #15
 800af60:	d856      	bhi.n	800b010 <HAL_SPI_TransmitReceive_IT+0x1e0>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800af62:	68c3      	ldr	r3, [r0, #12]
 800af64:	2b0f      	cmp	r3, #15
 800af66:	d9c8      	bls.n	800aefa <HAL_SPI_TransmitReceive_IT+0xca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800af68:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	622b      	str	r3, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800af6e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af70:	3304      	adds	r3, #4
 800af72:	65c3      	str	r3, [r0, #92]	; 0x5c
        hspi->TxXferCount--;
 800af74:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af78:	b29b      	uxth	r3, r3
 800af7a:	3b01      	subs	r3, #1
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800af82:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800af86:	b292      	uxth	r2, r2
 800af88:	e7e1      	b.n	800af4e <HAL_SPI_TransmitReceive_IT+0x11e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800af8a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af8e:	b29b      	uxth	r3, r3
 800af90:	2b03      	cmp	r3, #3
 800af92:	d913      	bls.n	800afbc <HAL_SPI_TransmitReceive_IT+0x18c>
 800af94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af96:	2b40      	cmp	r3, #64	; 0x40
 800af98:	d910      	bls.n	800afbc <HAL_SPI_TransmitReceive_IT+0x18c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800af9a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800afa0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800afa2:	3304      	adds	r3, #4
 800afa4:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800afa6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800afaa:	b29b      	uxth	r3, r3
 800afac:	3b04      	subs	r3, #4
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800afb4:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800afb8:	b292      	uxth	r2, r2
 800afba:	e7c8      	b.n	800af4e <HAL_SPI_TransmitReceive_IT+0x11e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800afbc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d912      	bls.n	800afec <HAL_SPI_TransmitReceive_IT+0x1bc>
 800afc6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800afc8:	b183      	cbz	r3, 800afec <HAL_SPI_TransmitReceive_IT+0x1bc>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800afca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800afd0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800afd2:	3302      	adds	r3, #2
 800afd4:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800afd6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800afda:	b29b      	uxth	r3, r3
 800afdc:	3b02      	subs	r3, #2
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800afe4:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800afe8:	b292      	uxth	r2, r2
 800afea:	e7b0      	b.n	800af4e <HAL_SPI_TransmitReceive_IT+0x11e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800afec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800aff4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800aff6:	3301      	adds	r3, #1
 800aff8:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800affa:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800affe:	b29b      	uxth	r3, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	b29b      	uxth	r3, r3
 800b004:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800b008:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800b00c:	b292      	uxth	r2, r2
 800b00e:	e79e      	b.n	800af4e <HAL_SPI_TransmitReceive_IT+0x11e>
      __HAL_UNLOCK(hspi);
 800b010:	2300      	movs	r3, #0
 800b012:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      return errorcode;
 800b016:	2002      	movs	r0, #2
 800b018:	e75c      	b.n	800aed4 <HAL_SPI_TransmitReceive_IT+0xa4>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800b01a:	692a      	ldr	r2, [r5, #16]
 800b01c:	f240 736c 	movw	r3, #1900	; 0x76c
 800b020:	4313      	orrs	r3, r2
 800b022:	612b      	str	r3, [r5, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b024:	6843      	ldr	r3, [r0, #4]
 800b026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b02a:	d004      	beq.n	800b036 <HAL_SPI_TransmitReceive_IT+0x206>
  __HAL_UNLOCK(hspi);
 800b02c:	2300      	movs	r3, #0
 800b02e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800b032:	4618      	mov	r0, r3
 800b034:	e74e      	b.n	800aed4 <HAL_SPI_TransmitReceive_IT+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b036:	6802      	ldr	r2, [r0, #0]
 800b038:	6813      	ldr	r3, [r2, #0]
 800b03a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	e7f4      	b.n	800b02c <HAL_SPI_TransmitReceive_IT+0x1fc>
  __HAL_LOCK(hspi);
 800b042:	2002      	movs	r0, #2
 800b044:	e746      	b.n	800aed4 <HAL_SPI_TransmitReceive_IT+0xa4>
 800b046:	bf00      	nop
 800b048:	0800a50d 	.word	0x0800a50d
 800b04c:	0800a47b 	.word	0x0800a47b
 800b050:	ffff0000 	.word	0xffff0000
 800b054:	0800a44b 	.word	0x0800a44b
 800b058:	0800a4dd 	.word	0x0800a4dd
 800b05c:	0800a419 	.word	0x0800a419
 800b060:	0800a4ab 	.word	0x0800a4ab

0800b064 <HAL_SPI_Receive_IT>:
{
 800b064:	b510      	push	{r4, lr}
 800b066:	4684      	mov	ip, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b068:	6884      	ldr	r4, [r0, #8]
 800b06a:	b91c      	cbnz	r4, 800b074 <HAL_SPI_Receive_IT+0x10>
 800b06c:	6843      	ldr	r3, [r0, #4]
 800b06e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b072:	d04a      	beq.n	800b10a <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 800b074:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d06f      	beq.n	800b15c <HAL_SPI_Receive_IT+0xf8>
 800b07c:	2301      	movs	r3, #1
 800b07e:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b082:	f89c 0081 	ldrb.w	r0, [ip, #129]	; 0x81
 800b086:	b2c0      	uxtb	r0, r0
 800b088:	4298      	cmp	r0, r3
 800b08a:	d146      	bne.n	800b11a <HAL_SPI_Receive_IT+0xb6>
  if ((pData == NULL) || (Size == 0UL))
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	bf18      	it	ne
 800b090:	2900      	cmpne	r1, #0
 800b092:	d047      	beq.n	800b124 <HAL_SPI_Receive_IT+0xc0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b094:	2304      	movs	r3, #4
 800b096:	f88c 3081 	strb.w	r3, [ip, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b09a:	2300      	movs	r3, #0
 800b09c:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b0a0:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b0a4:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b0a8:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800b0ac:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b0b0:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b0b4:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->TxISR       = NULL;
 800b0b8:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b0bc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800b0c0:	2b0f      	cmp	r3, #15
 800b0c2:	d933      	bls.n	800b12c <HAL_SPI_Receive_IT+0xc8>
    hspi->RxISR = SPI_RxISR_32BIT;
 800b0c4:	4b26      	ldr	r3, [pc, #152]	; (800b160 <HAL_SPI_Receive_IT+0xfc>)
 800b0c6:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0ca:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
 800b0ce:	d037      	beq.n	800b140 <HAL_SPI_Receive_IT+0xdc>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b0d0:	f8dc 1000 	ldr.w	r1, [ip]
 800b0d4:	6848      	ldr	r0, [r1, #4]
 800b0d6:	4b23      	ldr	r3, [pc, #140]	; (800b164 <HAL_SPI_Receive_IT+0x100>)
 800b0d8:	4003      	ands	r3, r0
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800b0de:	f8dc 2000 	ldr.w	r2, [ip]
 800b0e2:	6813      	ldr	r3, [r2, #0]
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800b0ea:	f8dc 2000 	ldr.w	r2, [ip]
 800b0ee:	6911      	ldr	r1, [r2, #16]
 800b0f0:	f240 7349 	movw	r3, #1865	; 0x749
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0f8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b0fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b100:	d025      	beq.n	800b14e <HAL_SPI_Receive_IT+0xea>
  __HAL_UNLOCK(hspi);
 800b102:	2000      	movs	r0, #0
 800b104:	f88c 0080 	strb.w	r0, [ip, #128]	; 0x80
}
 800b108:	bd10      	pop	{r4, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b10a:	2304      	movs	r3, #4
 800b10c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b110:	4613      	mov	r3, r2
 800b112:	460a      	mov	r2, r1
 800b114:	f7ff fe8c 	bl	800ae30 <HAL_SPI_TransmitReceive_IT>
 800b118:	e7f6      	b.n	800b108 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800b11a:	2300      	movs	r3, #0
 800b11c:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800b120:	2002      	movs	r0, #2
 800b122:	e7f1      	b.n	800b108 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800b124:	2300      	movs	r3, #0
 800b126:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800b12a:	e7ed      	b.n	800b108 <HAL_SPI_Receive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b12c:	2b07      	cmp	r3, #7
 800b12e:	d903      	bls.n	800b138 <HAL_SPI_Receive_IT+0xd4>
    hspi->RxISR = SPI_RxISR_16BIT;
 800b130:	4b0d      	ldr	r3, [pc, #52]	; (800b168 <HAL_SPI_Receive_IT+0x104>)
 800b132:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800b136:	e7c8      	b.n	800b0ca <HAL_SPI_Receive_IT+0x66>
    hspi->RxISR = SPI_RxISR_8BIT;
 800b138:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <HAL_SPI_Receive_IT+0x108>)
 800b13a:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800b13e:	e7c4      	b.n	800b0ca <HAL_SPI_Receive_IT+0x66>
    SPI_1LINE_RX(hspi);
 800b140:	f8dc 1000 	ldr.w	r1, [ip]
 800b144:	680b      	ldr	r3, [r1, #0]
 800b146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b14a:	600b      	str	r3, [r1, #0]
 800b14c:	e7c0      	b.n	800b0d0 <HAL_SPI_Receive_IT+0x6c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b14e:	f8dc 2000 	ldr.w	r2, [ip]
 800b152:	6813      	ldr	r3, [r2, #0]
 800b154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	e7d2      	b.n	800b102 <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800b15c:	2002      	movs	r0, #2
 800b15e:	e7d3      	b.n	800b108 <HAL_SPI_Receive_IT+0xa4>
 800b160:	0800a47b 	.word	0x0800a47b
 800b164:	ffff0000 	.word	0xffff0000
 800b168:	0800a44b 	.word	0x0800a44b
 800b16c:	0800a419 	.word	0x0800a419

0800b170 <HAL_SPI_TxRxCpltCallback>:
}
 800b170:	4770      	bx	lr

0800b172 <HAL_SPI_ErrorCallback>:
}
 800b172:	4770      	bx	lr

0800b174 <HAL_SPI_IRQHandler>:
{
 800b174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b17a:	6806      	ldr	r6, [r0, #0]
 800b17c:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b180:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800b184:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b188:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800b18c:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800b190:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b192:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800b196:	2b04      	cmp	r3, #4
 800b198:	d03b      	beq.n	800b212 <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 800b19a:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b19c:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800b1a0:	f1b8 0f01 	cmp.w	r8, #1
 800b1a4:	d03c      	beq.n	800b220 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b1a6:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800b1aa:	2a02      	cmp	r2, #2
 800b1ac:	d03d      	beq.n	800b22a <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d13e      	bne.n	800b230 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b1b2:	f015 0f08 	tst.w	r5, #8
 800b1b6:	d071      	beq.n	800b29c <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b1b8:	6822      	ldr	r2, [r4, #0]
 800b1ba:	6993      	ldr	r3, [r2, #24]
 800b1bc:	f043 0308 	orr.w	r3, r3, #8
 800b1c0:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b1c2:	6822      	ldr	r2, [r4, #0]
 800b1c4:	6993      	ldr	r3, [r2, #24]
 800b1c6:	f043 0310 	orr.w	r3, r3, #16
 800b1ca:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b1cc:	6822      	ldr	r2, [r4, #0]
 800b1ce:	6993      	ldr	r3, [r2, #24]
 800b1d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1d4:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	6913      	ldr	r3, [r2, #16]
 800b1da:	f023 0308 	bic.w	r3, r3, #8
 800b1de:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b1e8:	d033      	beq.n	800b252 <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f7ff f9a6 	bl	800a53c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d142      	bne.n	800b284 <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b1fe:	2f05      	cmp	r7, #5
 800b200:	d044      	beq.n	800b28c <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b202:	2f04      	cmp	r7, #4
 800b204:	d046      	beq.n	800b294 <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b206:	2f03      	cmp	r7, #3
 800b208:	d112      	bne.n	800b230 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7f7 f8a2 	bl	8002354 <HAL_SPI_TxCpltCallback>
    return;
 800b210:	e00e      	b.n	800b230 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 800b212:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800b214:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b216:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b218:	4620      	mov	r0, r4
 800b21a:	4798      	blx	r3
    handled = 1UL;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e7bd      	b.n	800b19c <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800b220:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b222:	4620      	mov	r0, r4
 800b224:	4798      	blx	r3
    handled = 1UL;
 800b226:	4643      	mov	r3, r8
 800b228:	e7bd      	b.n	800b1a6 <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 800b22a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b22c:	4620      	mov	r0, r4
 800b22e:	4798      	blx	r3
}
 800b230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b234:	2b07      	cmp	r3, #7
 800b236:	d91c      	bls.n	800b272 <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b23a:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800b23c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b23e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b240:	3302      	adds	r3, #2
 800b242:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800b244:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800b252:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b256:	b29b      	uxth	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d0c6      	beq.n	800b1ea <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b25c:	68e3      	ldr	r3, [r4, #12]
 800b25e:	2b0f      	cmp	r3, #15
 800b260:	d9e8      	bls.n	800b234 <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b262:	6822      	ldr	r2, [r4, #0]
 800b264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b266:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b268:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b26a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b26c:	3304      	adds	r3, #4
 800b26e:	6663      	str	r3, [r4, #100]	; 0x64
 800b270:	e7e8      	b.n	800b244 <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b276:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b27a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b27c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b27e:	3301      	adds	r3, #1
 800b280:	6663      	str	r3, [r4, #100]	; 0x64
 800b282:	e7df      	b.n	800b244 <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff ff74 	bl	800b172 <HAL_SPI_ErrorCallback>
      return;
 800b28a:	e7d1      	b.n	800b230 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b28c:	4620      	mov	r0, r4
 800b28e:	f7ff ff6f 	bl	800b170 <HAL_SPI_TxRxCpltCallback>
 800b292:	e7cd      	b.n	800b230 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 800b294:	4620      	mov	r0, r4
 800b296:	f7f7 f853 	bl	8002340 <HAL_SPI_RxCpltCallback>
 800b29a:	e7c9      	b.n	800b230 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b29c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800b2a0:	d002      	beq.n	800b2a8 <HAL_SPI_IRQHandler+0x134>
 800b2a2:	f01a 0f08 	tst.w	sl, #8
 800b2a6:	d173      	bne.n	800b390 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b2a8:	f415 7f58 	tst.w	r5, #864	; 0x360
 800b2ac:	d0c0      	beq.n	800b230 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b2ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b2b2:	d00a      	beq.n	800b2ca <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b2b4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2b8:	f043 0304 	orr.w	r3, r3, #4
 800b2bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2c0:	6822      	ldr	r2, [r4, #0]
 800b2c2:	6993      	ldr	r3, [r2, #24]
 800b2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b2ca:	f415 7f00 	tst.w	r5, #512	; 0x200
 800b2ce:	d00a      	beq.n	800b2e6 <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b2d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2d4:	f043 0301 	orr.w	r3, r3, #1
 800b2d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	6993      	ldr	r3, [r2, #24]
 800b2e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2e4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b2e6:	f415 7f80 	tst.w	r5, #256	; 0x100
 800b2ea:	d00a      	beq.n	800b302 <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b2ec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2f0:	f043 0308 	orr.w	r3, r3, #8
 800b2f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b2f8:	6822      	ldr	r2, [r4, #0]
 800b2fa:	6993      	ldr	r3, [r2, #24]
 800b2fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b300:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b302:	f015 0f20 	tst.w	r5, #32
 800b306:	d00a      	beq.n	800b31e <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b308:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b310:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b314:	6822      	ldr	r2, [r4, #0]
 800b316:	6993      	ldr	r3, [r2, #24]
 800b318:	f043 0320 	orr.w	r3, r3, #32
 800b31c:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b31e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b322:	2b00      	cmp	r3, #0
 800b324:	d084      	beq.n	800b230 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 800b326:	6822      	ldr	r2, [r4, #0]
 800b328:	6813      	ldr	r3, [r2, #0]
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b330:	6822      	ldr	r2, [r4, #0]
 800b332:	6911      	ldr	r1, [r2, #16]
 800b334:	4b1d      	ldr	r3, [pc, #116]	; (800b3ac <HAL_SPI_IRQHandler+0x238>)
 800b336:	400b      	ands	r3, r1
 800b338:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b33a:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 800b33e:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800b342:	d12b      	bne.n	800b39c <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b344:	6822      	ldr	r2, [r4, #0]
 800b346:	6893      	ldr	r3, [r2, #8]
 800b348:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b34c:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800b34e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b350:	b15b      	cbz	r3, 800b36a <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b352:	4a17      	ldr	r2, [pc, #92]	; (800b3b0 <HAL_SPI_IRQHandler+0x23c>)
 800b354:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b356:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b358:	f7fb fcd2 	bl	8006d00 <HAL_DMA_Abort_IT>
 800b35c:	b128      	cbz	r0, 800b36a <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b35e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b366:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b36a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f43f af5f 	beq.w	800b230 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b372:	4a0f      	ldr	r2, [pc, #60]	; (800b3b0 <HAL_SPI_IRQHandler+0x23c>)
 800b374:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b376:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b378:	f7fb fcc2 	bl	8006d00 <HAL_DMA_Abort_IT>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f43f af57 	beq.w	800b230 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b382:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b38e:	e74f      	b.n	800b230 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b390:	6822      	ldr	r2, [r4, #0]
 800b392:	6993      	ldr	r3, [r2, #24]
 800b394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b398:	6193      	str	r3, [r2, #24]
    return;
 800b39a:	e749      	b.n	800b230 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800b39c:	2301      	movs	r3, #1
 800b39e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f7ff fee5 	bl	800b172 <HAL_SPI_ErrorCallback>
    return;
 800b3a8:	e742      	b.n	800b230 <HAL_SPI_IRQHandler+0xbc>
 800b3aa:	bf00      	nop
 800b3ac:	fffffc94 	.word	0xfffffc94
 800b3b0:	0800b3b5 	.word	0x0800b3b5

0800b3b4 <SPI_DMAAbortOnError>:
{
 800b3b4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b3be:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b3c8:	f7ff fed3 	bl	800b172 <HAL_SPI_ErrorCallback>
}
 800b3cc:	bd08      	pop	{r3, pc}

0800b3ce <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d13a      	bne.n	800b450 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3da:	2302      	movs	r3, #2
 800b3dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3e0:	6802      	ldr	r2, [r0, #0]
 800b3e2:	68d3      	ldr	r3, [r2, #12]
 800b3e4:	f043 0301 	orr.w	r3, r3, #1
 800b3e8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3ea:	6803      	ldr	r3, [r0, #0]
 800b3ec:	4a1a      	ldr	r2, [pc, #104]	; (800b458 <HAL_TIM_Base_Start_IT+0x88>)
 800b3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f2:	bf18      	it	ne
 800b3f4:	4293      	cmpne	r3, r2
 800b3f6:	d01d      	beq.n	800b434 <HAL_TIM_Base_Start_IT+0x64>
 800b3f8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d019      	beq.n	800b434 <HAL_TIM_Base_Start_IT+0x64>
 800b400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b404:	4293      	cmp	r3, r2
 800b406:	d015      	beq.n	800b434 <HAL_TIM_Base_Start_IT+0x64>
 800b408:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d011      	beq.n	800b434 <HAL_TIM_Base_Start_IT+0x64>
 800b410:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b414:	4293      	cmp	r3, r2
 800b416:	d00d      	beq.n	800b434 <HAL_TIM_Base_Start_IT+0x64>
 800b418:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d009      	beq.n	800b434 <HAL_TIM_Base_Start_IT+0x64>
 800b420:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b424:	4293      	cmp	r3, r2
 800b426:	d005      	beq.n	800b434 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	f042 0201 	orr.w	r2, r2, #1
 800b42e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b430:	2000      	movs	r0, #0
 800b432:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b434:	6899      	ldr	r1, [r3, #8]
 800b436:	4a09      	ldr	r2, [pc, #36]	; (800b45c <HAL_TIM_Base_Start_IT+0x8c>)
 800b438:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b43a:	2a06      	cmp	r2, #6
 800b43c:	bf18      	it	ne
 800b43e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800b442:	d007      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	f042 0201 	orr.w	r2, r2, #1
 800b44a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b44c:	2000      	movs	r0, #0
 800b44e:	4770      	bx	lr
    return HAL_ERROR;
 800b450:	2001      	movs	r0, #1
 800b452:	4770      	bx	lr
  return HAL_OK;
 800b454:	2000      	movs	r0, #0
}
 800b456:	4770      	bx	lr
 800b458:	40010000 	.word	0x40010000
 800b45c:	00010007 	.word	0x00010007

0800b460 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b460:	4770      	bx	lr

0800b462 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b462:	4770      	bx	lr

0800b464 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b464:	4770      	bx	lr

0800b466 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b466:	4770      	bx	lr

0800b468 <HAL_TIM_IRQHandler>:
{
 800b468:	b510      	push	{r4, lr}
 800b46a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b46c:	6803      	ldr	r3, [r0, #0]
 800b46e:	691a      	ldr	r2, [r3, #16]
 800b470:	f012 0f02 	tst.w	r2, #2
 800b474:	d011      	beq.n	800b49a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	f012 0f02 	tst.w	r2, #2
 800b47c:	d00d      	beq.n	800b49a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b47e:	f06f 0202 	mvn.w	r2, #2
 800b482:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b484:	2301      	movs	r3, #1
 800b486:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b488:	6803      	ldr	r3, [r0, #0]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	f013 0f03 	tst.w	r3, #3
 800b490:	d079      	beq.n	800b586 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b492:	f7ff ffe6 	bl	800b462 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b496:	2300      	movs	r3, #0
 800b498:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	691a      	ldr	r2, [r3, #16]
 800b49e:	f012 0f04 	tst.w	r2, #4
 800b4a2:	d012      	beq.n	800b4ca <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	f012 0f04 	tst.w	r2, #4
 800b4aa:	d00e      	beq.n	800b4ca <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4ac:	f06f 0204 	mvn.w	r2, #4
 800b4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4b2:	2302      	movs	r3, #2
 800b4b4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b4be:	d068      	beq.n	800b592 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7ff ffce 	bl	800b462 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	691a      	ldr	r2, [r3, #16]
 800b4ce:	f012 0f08 	tst.w	r2, #8
 800b4d2:	d012      	beq.n	800b4fa <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	f012 0f08 	tst.w	r2, #8
 800b4da:	d00e      	beq.n	800b4fa <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4dc:	f06f 0208 	mvn.w	r2, #8
 800b4e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4e2:	2304      	movs	r3, #4
 800b4e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	f013 0f03 	tst.w	r3, #3
 800b4ee:	d057      	beq.n	800b5a0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f7ff ffb6 	bl	800b462 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	691a      	ldr	r2, [r3, #16]
 800b4fe:	f012 0f10 	tst.w	r2, #16
 800b502:	d012      	beq.n	800b52a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	f012 0f10 	tst.w	r2, #16
 800b50a:	d00e      	beq.n	800b52a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b50c:	f06f 0210 	mvn.w	r2, #16
 800b510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b512:	2308      	movs	r3, #8
 800b514:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b51e:	d046      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b520:	4620      	mov	r0, r4
 800b522:	f7ff ff9e 	bl	800b462 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b526:	2300      	movs	r3, #0
 800b528:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	691a      	ldr	r2, [r3, #16]
 800b52e:	f012 0f01 	tst.w	r2, #1
 800b532:	d003      	beq.n	800b53c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	f012 0f01 	tst.w	r2, #1
 800b53a:	d13f      	bne.n	800b5bc <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b544:	d003      	beq.n	800b54e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b54c:	d13d      	bne.n	800b5ca <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	691a      	ldr	r2, [r3, #16]
 800b552:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b556:	d003      	beq.n	800b560 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b558:	68da      	ldr	r2, [r3, #12]
 800b55a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b55e:	d13b      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	691a      	ldr	r2, [r3, #16]
 800b564:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b568:	d003      	beq.n	800b572 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b56a:	68da      	ldr	r2, [r3, #12]
 800b56c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b570:	d139      	bne.n	800b5e6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	691a      	ldr	r2, [r3, #16]
 800b576:	f012 0f20 	tst.w	r2, #32
 800b57a:	d003      	beq.n	800b584 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b57c:	68da      	ldr	r2, [r3, #12]
 800b57e:	f012 0f20 	tst.w	r2, #32
 800b582:	d137      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0x18c>
}
 800b584:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b586:	f7ff ff6b 	bl	800b460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b58a:	4620      	mov	r0, r4
 800b58c:	f7ff ff6a 	bl	800b464 <HAL_TIM_PWM_PulseFinishedCallback>
 800b590:	e781      	b.n	800b496 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b592:	4620      	mov	r0, r4
 800b594:	f7ff ff64 	bl	800b460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b598:	4620      	mov	r0, r4
 800b59a:	f7ff ff63 	bl	800b464 <HAL_TIM_PWM_PulseFinishedCallback>
 800b59e:	e792      	b.n	800b4c6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7ff ff5d 	bl	800b460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff ff5c 	bl	800b464 <HAL_TIM_PWM_PulseFinishedCallback>
 800b5ac:	e7a3      	b.n	800b4f6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff ff56 	bl	800b460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f7ff ff55 	bl	800b464 <HAL_TIM_PWM_PulseFinishedCallback>
 800b5ba:	e7b4      	b.n	800b526 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5bc:	f06f 0201 	mvn.w	r2, #1
 800b5c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7f6 fc5e 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
 800b5c8:	e7b8      	b.n	800b53c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 f8ca 	bl	800b76a <HAL_TIMEx_BreakCallback>
 800b5d6:	e7ba      	b.n	800b54e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 f8c4 	bl	800b76c <HAL_TIMEx_Break2Callback>
 800b5e4:	e7bc      	b.n	800b560 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f7ff ff3a 	bl	800b466 <HAL_TIM_TriggerCallback>
 800b5f2:	e7be      	b.n	800b572 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b5f4:	f06f 0220 	mvn.w	r2, #32
 800b5f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 f8b4 	bl	800b768 <HAL_TIMEx_CommutCallback>
}
 800b600:	e7c0      	b.n	800b584 <HAL_TIM_IRQHandler+0x11c>
	...

0800b604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b604:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b606:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b608:	4a39      	ldr	r2, [pc, #228]	; (800b6f0 <TIM_Base_SetConfig+0xec>)
 800b60a:	4290      	cmp	r0, r2
 800b60c:	bf14      	ite	ne
 800b60e:	f04f 0e00 	movne.w	lr, #0
 800b612:	f04f 0e01 	moveq.w	lr, #1
 800b616:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b61a:	bf14      	ite	ne
 800b61c:	4672      	movne	r2, lr
 800b61e:	f04e 0201 	orreq.w	r2, lr, #1
 800b622:	b9aa      	cbnz	r2, 800b650 <TIM_Base_SetConfig+0x4c>
 800b624:	4c33      	ldr	r4, [pc, #204]	; (800b6f4 <TIM_Base_SetConfig+0xf0>)
 800b626:	42a0      	cmp	r0, r4
 800b628:	bf14      	ite	ne
 800b62a:	2400      	movne	r4, #0
 800b62c:	2401      	moveq	r4, #1
 800b62e:	4d32      	ldr	r5, [pc, #200]	; (800b6f8 <TIM_Base_SetConfig+0xf4>)
 800b630:	42a8      	cmp	r0, r5
 800b632:	d00d      	beq.n	800b650 <TIM_Base_SetConfig+0x4c>
 800b634:	b964      	cbnz	r4, 800b650 <TIM_Base_SetConfig+0x4c>
 800b636:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800b63a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800b63e:	42a0      	cmp	r0, r4
 800b640:	bf14      	ite	ne
 800b642:	2400      	movne	r4, #0
 800b644:	2401      	moveq	r4, #1
 800b646:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b64a:	42a8      	cmp	r0, r5
 800b64c:	d000      	beq.n	800b650 <TIM_Base_SetConfig+0x4c>
 800b64e:	b11c      	cbz	r4, 800b658 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b654:	684c      	ldr	r4, [r1, #4]
 800b656:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b658:	bb12      	cbnz	r2, 800b6a0 <TIM_Base_SetConfig+0x9c>
 800b65a:	4a26      	ldr	r2, [pc, #152]	; (800b6f4 <TIM_Base_SetConfig+0xf0>)
 800b65c:	4290      	cmp	r0, r2
 800b65e:	bf14      	ite	ne
 800b660:	2200      	movne	r2, #0
 800b662:	2201      	moveq	r2, #1
 800b664:	4c24      	ldr	r4, [pc, #144]	; (800b6f8 <TIM_Base_SetConfig+0xf4>)
 800b666:	42a0      	cmp	r0, r4
 800b668:	d01a      	beq.n	800b6a0 <TIM_Base_SetConfig+0x9c>
 800b66a:	b9ca      	cbnz	r2, 800b6a0 <TIM_Base_SetConfig+0x9c>
 800b66c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b670:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800b674:	4290      	cmp	r0, r2
 800b676:	bf14      	ite	ne
 800b678:	2200      	movne	r2, #0
 800b67a:	2201      	moveq	r2, #1
 800b67c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800b680:	42a0      	cmp	r0, r4
 800b682:	d00d      	beq.n	800b6a0 <TIM_Base_SetConfig+0x9c>
 800b684:	b962      	cbnz	r2, 800b6a0 <TIM_Base_SetConfig+0x9c>
 800b686:	4a1d      	ldr	r2, [pc, #116]	; (800b6fc <TIM_Base_SetConfig+0xf8>)
 800b688:	4290      	cmp	r0, r2
 800b68a:	bf14      	ite	ne
 800b68c:	2200      	movne	r2, #0
 800b68e:	2201      	moveq	r2, #1
 800b690:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800b694:	42a0      	cmp	r0, r4
 800b696:	d003      	beq.n	800b6a0 <TIM_Base_SetConfig+0x9c>
 800b698:	b912      	cbnz	r2, 800b6a0 <TIM_Base_SetConfig+0x9c>
 800b69a:	4a19      	ldr	r2, [pc, #100]	; (800b700 <TIM_Base_SetConfig+0xfc>)
 800b69c:	4290      	cmp	r0, r2
 800b69e:	d104      	bne.n	800b6aa <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6a0:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6a4:	68cb      	ldr	r3, [r1, #12]
 800b6a6:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6ae:	694a      	ldr	r2, [r1, #20]
 800b6b0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800b6b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6b4:	688a      	ldr	r2, [r1, #8]
 800b6b6:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6b8:	680a      	ldr	r2, [r1, #0]
 800b6ba:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6bc:	4a11      	ldr	r2, [pc, #68]	; (800b704 <TIM_Base_SetConfig+0x100>)
 800b6be:	4290      	cmp	r0, r2
 800b6c0:	bf14      	ite	ne
 800b6c2:	4673      	movne	r3, lr
 800b6c4:	f04e 0301 	orreq.w	r3, lr, #1
 800b6c8:	b963      	cbnz	r3, 800b6e4 <TIM_Base_SetConfig+0xe0>
 800b6ca:	4b0c      	ldr	r3, [pc, #48]	; (800b6fc <TIM_Base_SetConfig+0xf8>)
 800b6cc:	4298      	cmp	r0, r3
 800b6ce:	bf14      	ite	ne
 800b6d0:	2300      	movne	r3, #0
 800b6d2:	2301      	moveq	r3, #1
 800b6d4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b6d8:	4290      	cmp	r0, r2
 800b6da:	d003      	beq.n	800b6e4 <TIM_Base_SetConfig+0xe0>
 800b6dc:	b913      	cbnz	r3, 800b6e4 <TIM_Base_SetConfig+0xe0>
 800b6de:	4b08      	ldr	r3, [pc, #32]	; (800b700 <TIM_Base_SetConfig+0xfc>)
 800b6e0:	4298      	cmp	r0, r3
 800b6e2:	d101      	bne.n	800b6e8 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6e4:	690b      	ldr	r3, [r1, #16]
 800b6e6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	6143      	str	r3, [r0, #20]
}
 800b6ec:	bd30      	pop	{r4, r5, pc}
 800b6ee:	bf00      	nop
 800b6f0:	40010000 	.word	0x40010000
 800b6f4:	40000800 	.word	0x40000800
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	40014400 	.word	0x40014400
 800b700:	40014800 	.word	0x40014800
 800b704:	40010400 	.word	0x40010400

0800b708 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b708:	b360      	cbz	r0, 800b764 <HAL_TIM_Base_Init+0x5c>
{
 800b70a:	b510      	push	{r4, lr}
 800b70c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b70e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b712:	b313      	cbz	r3, 800b75a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b714:	2302      	movs	r3, #2
 800b716:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b71a:	4621      	mov	r1, r4
 800b71c:	f851 0b04 	ldr.w	r0, [r1], #4
 800b720:	f7ff ff70 	bl	800b604 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b724:	2301      	movs	r3, #1
 800b726:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b72a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b72e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b732:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b736:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b73a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b742:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b74a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b74e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b756:	2000      	movs	r0, #0
}
 800b758:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b75a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b75e:	f7ff fe36 	bl	800b3ce <HAL_TIM_Base_MspInit>
 800b762:	e7d7      	b.n	800b714 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800b764:	2001      	movs	r0, #1
}
 800b766:	4770      	bx	lr

0800b768 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b768:	4770      	bx	lr

0800b76a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b76a:	4770      	bx	lr

0800b76c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b76c:	4770      	bx	lr

0800b76e <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b76e:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800b770:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b774:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b776:	f001 ff6f 	bl	800d658 <xTaskGetSchedulerState>
 800b77a:	2801      	cmp	r0, #1
 800b77c:	d100      	bne.n	800b780 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800b77e:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800b780:	f000 fc70 	bl	800c064 <xPortSysTickHandler>
}
 800b784:	e7fb      	b.n	800b77e <SysTick_Handler+0x10>
	...

0800b788 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b788:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b78c:	b92b      	cbnz	r3, 800b79a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b78e:	4b06      	ldr	r3, [pc, #24]	; (800b7a8 <osKernelInitialize+0x20>)
 800b790:	6818      	ldr	r0, [r3, #0]
 800b792:	b928      	cbnz	r0, 800b7a0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b794:	2201      	movs	r2, #1
 800b796:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b798:	4770      	bx	lr
    stat = osErrorISR;
 800b79a:	f06f 0005 	mvn.w	r0, #5
 800b79e:	4770      	bx	lr
    } else {
      stat = osError;
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	24002d7c 	.word	0x24002d7c

0800b7ac <osKernelStart>:
 800b7ac:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7b0:	b973      	cbnz	r3, 800b7d0 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b7b2:	4b0a      	ldr	r3, [pc, #40]	; (800b7dc <osKernelStart+0x30>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d10d      	bne.n	800b7d6 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800b7ba:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7bc:	2400      	movs	r4, #0
 800b7be:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <osKernelStart+0x34>)
 800b7c0:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b7c2:	4b06      	ldr	r3, [pc, #24]	; (800b7dc <osKernelStart+0x30>)
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b7c8:	f001 fcbc 	bl	800d144 <vTaskStartScheduler>
      stat = osOK;
 800b7cc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800b7ce:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800b7d0:	f06f 0005 	mvn.w	r0, #5
 800b7d4:	4770      	bx	lr
      stat = osError;
 800b7d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b7da:	4770      	bx	lr
 800b7dc:	24002d7c 	.word	0x24002d7c
 800b7e0:	e000ed00 	.word	0xe000ed00

0800b7e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b7e8:	2400      	movs	r4, #0
 800b7ea:	9405      	str	r4, [sp, #20]
 800b7ec:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b7f0:	bb74      	cbnz	r4, 800b850 <osThreadNew+0x6c>
 800b7f2:	b368      	cbz	r0, 800b850 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b7f4:	b322      	cbz	r2, 800b840 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800b7f6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b7f8:	6993      	ldr	r3, [r2, #24]
 800b7fa:	b903      	cbnz	r3, 800b7fe <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800b7fc:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b7fe:	1e5c      	subs	r4, r3, #1
 800b800:	2c37      	cmp	r4, #55	; 0x37
 800b802:	d849      	bhi.n	800b898 <osThreadNew+0xb4>
 800b804:	6854      	ldr	r4, [r2, #4]
 800b806:	f014 0f01 	tst.w	r4, #1
 800b80a:	d147      	bne.n	800b89c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b80c:	6956      	ldr	r6, [r2, #20]
 800b80e:	b16e      	cbz	r6, 800b82c <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b810:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b814:	6894      	ldr	r4, [r2, #8]
 800b816:	b12c      	cbz	r4, 800b824 <osThreadNew+0x40>
 800b818:	68d7      	ldr	r7, [r2, #12]
 800b81a:	2fbb      	cmp	r7, #187	; 0xbb
 800b81c:	d902      	bls.n	800b824 <osThreadNew+0x40>
 800b81e:	6917      	ldr	r7, [r2, #16]
 800b820:	b107      	cbz	r7, 800b824 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b822:	b9c6      	cbnz	r6, 800b856 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b824:	b12c      	cbz	r4, 800b832 <osThreadNew+0x4e>
    mem  = -1;
 800b826:	f04f 34ff 	mov.w	r4, #4294967295
 800b82a:	e00e      	b.n	800b84a <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800b82c:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800b830:	e7f0      	b.n	800b814 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b832:	68d4      	ldr	r4, [r2, #12]
 800b834:	b98c      	cbnz	r4, 800b85a <osThreadNew+0x76>
 800b836:	6914      	ldr	r4, [r2, #16]
 800b838:	b194      	cbz	r4, 800b860 <osThreadNew+0x7c>
    mem  = -1;
 800b83a:	f04f 34ff 	mov.w	r4, #4294967295
 800b83e:	e004      	b.n	800b84a <osThreadNew+0x66>
    name = NULL;
 800b840:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800b842:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800b844:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800b846:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800b84a:	2c01      	cmp	r4, #1
 800b84c:	d00a      	beq.n	800b864 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800b84e:	b1ac      	cbz	r4, 800b87c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b850:	9805      	ldr	r0, [sp, #20]
}
 800b852:	b007      	add	sp, #28
 800b854:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800b856:	2401      	movs	r4, #1
 800b858:	e7f7      	b.n	800b84a <osThreadNew+0x66>
    mem  = -1;
 800b85a:	f04f 34ff 	mov.w	r4, #4294967295
 800b85e:	e7f4      	b.n	800b84a <osThreadNew+0x66>
          mem = 0;
 800b860:	2400      	movs	r4, #0
 800b862:	e7f2      	b.n	800b84a <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b864:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b868:	9202      	str	r2, [sp, #8]
 800b86a:	9401      	str	r4, [sp, #4]
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	460b      	mov	r3, r1
 800b870:	4662      	mov	r2, ip
 800b872:	4629      	mov	r1, r5
 800b874:	f001 fbf6 	bl	800d064 <xTaskCreateStatic>
 800b878:	9005      	str	r0, [sp, #20]
 800b87a:	e7e9      	b.n	800b850 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b87c:	aa05      	add	r2, sp, #20
 800b87e:	9201      	str	r2, [sp, #4]
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	460b      	mov	r3, r1
 800b884:	fa1f f28c 	uxth.w	r2, ip
 800b888:	4629      	mov	r1, r5
 800b88a:	f001 fc26 	bl	800d0da <xTaskCreate>
 800b88e:	2801      	cmp	r0, #1
 800b890:	d0de      	beq.n	800b850 <osThreadNew+0x6c>
            hTask = NULL;
 800b892:	2300      	movs	r3, #0
 800b894:	9305      	str	r3, [sp, #20]
 800b896:	e7db      	b.n	800b850 <osThreadNew+0x6c>
        return (NULL);
 800b898:	2000      	movs	r0, #0
 800b89a:	e7da      	b.n	800b852 <osThreadNew+0x6e>
 800b89c:	2000      	movs	r0, #0
 800b89e:	e7d8      	b.n	800b852 <osThreadNew+0x6e>

0800b8a0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d14d      	bne.n	800b948 <osSemaphoreNew+0xa8>
 800b8ac:	460e      	mov	r6, r1
 800b8ae:	4614      	mov	r4, r2
 800b8b0:	4288      	cmp	r0, r1
 800b8b2:	bf34      	ite	cc
 800b8b4:	2300      	movcc	r3, #0
 800b8b6:	2301      	movcs	r3, #1
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d049      	beq.n	800b950 <osSemaphoreNew+0xb0>
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d047      	beq.n	800b950 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800b8c0:	b14a      	cbz	r2, 800b8d6 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8c2:	6895      	ldr	r5, [r2, #8]
 800b8c4:	b115      	cbz	r5, 800b8cc <osSemaphoreNew+0x2c>
 800b8c6:	68d3      	ldr	r3, [r2, #12]
 800b8c8:	2b4f      	cmp	r3, #79	; 0x4f
 800b8ca:	d814      	bhi.n	800b8f6 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	d141      	bne.n	800b954 <osSemaphoreNew+0xb4>
 800b8d0:	68e3      	ldr	r3, [r4, #12]
 800b8d2:	b10b      	cbz	r3, 800b8d8 <osSemaphoreNew+0x38>
 800b8d4:	e039      	b.n	800b94a <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800b8d6:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800b8d8:	2801      	cmp	r0, #1
 800b8da:	d00e      	beq.n	800b8fa <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800b8dc:	bb73      	cbnz	r3, 800b93c <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b8de:	4631      	mov	r1, r6
 800b8e0:	f000 fe39 	bl	800c556 <xQueueCreateCountingSemaphore>
 800b8e4:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b8e6:	b385      	cbz	r5, 800b94a <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800b8e8:	b104      	cbz	r4, 800b8ec <osSemaphoreNew+0x4c>
          name = attr->name;
 800b8ea:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f001 f9aa 	bl	800cc48 <vQueueAddToRegistry>
 800b8f4:	e029      	b.n	800b94a <osSemaphoreNew+0xaa>
        mem = 1;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e7ee      	b.n	800b8d8 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800b8fa:	b9b3      	cbnz	r3, 800b92a <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800b8fc:	2203      	movs	r2, #3
 800b8fe:	2100      	movs	r1, #0
 800b900:	2001      	movs	r0, #1
 800b902:	f000 fde1 	bl	800c4c8 <xQueueGenericCreate>
 800b906:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b908:	2d00      	cmp	r5, #0
 800b90a:	bf18      	it	ne
 800b90c:	2e00      	cmpne	r6, #0
 800b90e:	d0ea      	beq.n	800b8e6 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b910:	2300      	movs	r3, #0
 800b912:	461a      	mov	r2, r3
 800b914:	4619      	mov	r1, r3
 800b916:	4628      	mov	r0, r5
 800b918:	f000 fe3b 	bl	800c592 <xQueueGenericSend>
 800b91c:	2801      	cmp	r0, #1
 800b91e:	d0e2      	beq.n	800b8e6 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800b920:	4628      	mov	r0, r5
 800b922:	f001 f9bb 	bl	800cc9c <vQueueDelete>
            hSemaphore = NULL;
 800b926:	2500      	movs	r5, #0
 800b928:	e00f      	b.n	800b94a <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	2203      	movs	r2, #3
 800b92e:	9200      	str	r2, [sp, #0]
 800b930:	2200      	movs	r2, #0
 800b932:	4611      	mov	r1, r2
 800b934:	f000 fd75 	bl	800c422 <xQueueGenericCreateStatic>
 800b938:	4605      	mov	r5, r0
 800b93a:	e7e5      	b.n	800b908 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b93c:	68a2      	ldr	r2, [r4, #8]
 800b93e:	4631      	mov	r1, r6
 800b940:	f000 fde6 	bl	800c510 <xQueueCreateCountingSemaphoreStatic>
 800b944:	4605      	mov	r5, r0
 800b946:	e7ce      	b.n	800b8e6 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800b948:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b94a:	4628      	mov	r0, r5
 800b94c:	b002      	add	sp, #8
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800b950:	2500      	movs	r5, #0
 800b952:	e7fa      	b.n	800b94a <osSemaphoreNew+0xaa>
 800b954:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800b956:	e7f8      	b.n	800b94a <osSemaphoreNew+0xaa>

0800b958 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b958:	b320      	cbz	r0, 800b9a4 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b95a:	b510      	push	{r4, lr}
 800b95c:	b082      	sub	sp, #8
 800b95e:	460c      	mov	r4, r1
 800b960:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b964:	b1b3      	cbz	r3, 800b994 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800b966:	bb01      	cbnz	r1, 800b9aa <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800b968:	2100      	movs	r1, #0
 800b96a:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b96c:	aa01      	add	r2, sp, #4
 800b96e:	f001 f916 	bl	800cb9e <xQueueReceiveFromISR>
 800b972:	2801      	cmp	r0, #1
 800b974:	d11c      	bne.n	800b9b0 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800b976:	9801      	ldr	r0, [sp, #4]
 800b978:	b150      	cbz	r0, 800b990 <osSemaphoreAcquire+0x38>
 800b97a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b982:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b98e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b990:	b002      	add	sp, #8
 800b992:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b994:	f001 f830 	bl	800c9f8 <xQueueSemaphoreTake>
 800b998:	2801      	cmp	r0, #1
 800b99a:	d00c      	beq.n	800b9b6 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800b99c:	b16c      	cbz	r4, 800b9ba <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800b99e:	f06f 0001 	mvn.w	r0, #1
 800b9a2:	e7f5      	b.n	800b990 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800b9a4:	f06f 0003 	mvn.w	r0, #3
}
 800b9a8:	4770      	bx	lr
      stat = osErrorParameter;
 800b9aa:	f06f 0003 	mvn.w	r0, #3
 800b9ae:	e7ef      	b.n	800b990 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800b9b0:	f06f 0002 	mvn.w	r0, #2
 800b9b4:	e7ec      	b.n	800b990 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e7ea      	b.n	800b990 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800b9ba:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800b9be:	e7e7      	b.n	800b990 <osSemaphoreAcquire+0x38>

0800b9c0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b9c0:	b320      	cbz	r0, 800ba0c <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b9c2:	b500      	push	{lr}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b9ca:	b1a3      	cbz	r3, 800b9f6 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b9d0:	a901      	add	r1, sp, #4
 800b9d2:	f000 ff09 	bl	800c7e8 <xQueueGiveFromISR>
 800b9d6:	2801      	cmp	r0, #1
 800b9d8:	d11b      	bne.n	800ba12 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800b9da:	9801      	ldr	r0, [sp, #4]
 800b9dc:	b198      	cbz	r0, 800ba06 <osSemaphoreRelease+0x46>
 800b9de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	e007      	b.n	800ba06 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	f000 fdc9 	bl	800c592 <xQueueGenericSend>
 800ba00:	2801      	cmp	r0, #1
 800ba02:	d109      	bne.n	800ba18 <osSemaphoreRelease+0x58>
  stat = osOK;
 800ba04:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800ba06:	b003      	add	sp, #12
 800ba08:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800ba0c:	f06f 0003 	mvn.w	r0, #3
}
 800ba10:	4770      	bx	lr
      stat = osErrorResource;
 800ba12:	f06f 0002 	mvn.w	r0, #2
 800ba16:	e7f6      	b.n	800ba06 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800ba18:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800ba1c:	e7f3      	b.n	800ba06 <osSemaphoreRelease+0x46>

0800ba1e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ba1e:	b570      	push	{r4, r5, r6, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d13d      	bne.n	800baa6 <osMessageQueueNew+0x88>
 800ba2a:	4614      	mov	r4, r2
 800ba2c:	1e0b      	subs	r3, r1, #0
 800ba2e:	bf18      	it	ne
 800ba30:	2301      	movne	r3, #1
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d03b      	beq.n	800baae <osMessageQueueNew+0x90>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d039      	beq.n	800baae <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 800ba3a:	b36a      	cbz	r2, 800ba98 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba3c:	6893      	ldr	r3, [r2, #8]
 800ba3e:	b14b      	cbz	r3, 800ba54 <osMessageQueueNew+0x36>
 800ba40:	68d2      	ldr	r2, [r2, #12]
 800ba42:	2a4f      	cmp	r2, #79	; 0x4f
 800ba44:	d906      	bls.n	800ba54 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba46:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba48:	b122      	cbz	r2, 800ba54 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba4a:	fb01 f500 	mul.w	r5, r1, r0
 800ba4e:	6966      	ldr	r6, [r4, #20]
 800ba50:	42ae      	cmp	r6, r5
 800ba52:	d21b      	bcs.n	800ba8c <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba54:	b173      	cbz	r3, 800ba74 <osMessageQueueNew+0x56>
    mem = -1;
 800ba56:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800ba5a:	bb53      	cbnz	r3, 800bab2 <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f000 fd33 	bl	800c4c8 <xQueueGenericCreate>
 800ba62:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ba64:	b305      	cbz	r5, 800baa8 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800ba66:	b104      	cbz	r4, 800ba6a <osMessageQueueNew+0x4c>
        name = attr->name;
 800ba68:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f001 f8eb 	bl	800cc48 <vQueueAddToRegistry>
 800ba72:	e019      	b.n	800baa8 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba74:	68e3      	ldr	r3, [r4, #12]
 800ba76:	b98b      	cbnz	r3, 800ba9c <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba78:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba7a:	b113      	cbz	r3, 800ba82 <osMessageQueueNew+0x64>
    mem = -1;
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba80:	e7eb      	b.n	800ba5a <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba82:	6963      	ldr	r3, [r4, #20]
 800ba84:	b16b      	cbz	r3, 800baa2 <osMessageQueueNew+0x84>
    mem = -1;
 800ba86:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8a:	e7e6      	b.n	800ba5a <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ba8c:	2500      	movs	r5, #0
 800ba8e:	9500      	str	r5, [sp, #0]
 800ba90:	f000 fcc7 	bl	800c422 <xQueueGenericCreateStatic>
 800ba94:	4605      	mov	r5, r0
 800ba96:	e7e5      	b.n	800ba64 <osMessageQueueNew+0x46>
      mem = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e7de      	b.n	800ba5a <osMessageQueueNew+0x3c>
    mem = -1;
 800ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 800baa0:	e7db      	b.n	800ba5a <osMessageQueueNew+0x3c>
          mem = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	e7d9      	b.n	800ba5a <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800baa6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800baa8:	4628      	mov	r0, r5
 800baaa:	b002      	add	sp, #8
 800baac:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800baae:	2500      	movs	r5, #0
 800bab0:	e7fa      	b.n	800baa8 <osMessageQueueNew+0x8a>
 800bab2:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800bab4:	e7f8      	b.n	800baa8 <osMessageQueueNew+0x8a>

0800bab6 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bab6:	b510      	push	{r4, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	461c      	mov	r4, r3
 800babc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800bac0:	b1d3      	cbz	r3, 800baf8 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bac2:	2900      	cmp	r1, #0
 800bac4:	bf18      	it	ne
 800bac6:	2800      	cmpne	r0, #0
 800bac8:	d024      	beq.n	800bb14 <osMessageQueuePut+0x5e>
 800baca:	bb34      	cbnz	r4, 800bb1a <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800bacc:	2300      	movs	r3, #0
 800bace:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bad0:	aa01      	add	r2, sp, #4
 800bad2:	f000 fe22 	bl	800c71a <xQueueGenericSendFromISR>
 800bad6:	2801      	cmp	r0, #1
 800bad8:	d122      	bne.n	800bb20 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800bada:	9801      	ldr	r0, [sp, #4]
 800badc:	b150      	cbz	r0, 800baf4 <osMessageQueuePut+0x3e>
 800bade:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800baf2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800baf4:	b002      	add	sp, #8
 800baf6:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800baf8:	2900      	cmp	r1, #0
 800bafa:	bf18      	it	ne
 800bafc:	2800      	cmpne	r0, #0
 800bafe:	d012      	beq.n	800bb26 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb00:	2300      	movs	r3, #0
 800bb02:	4622      	mov	r2, r4
 800bb04:	f000 fd45 	bl	800c592 <xQueueGenericSend>
 800bb08:	2801      	cmp	r0, #1
 800bb0a:	d00f      	beq.n	800bb2c <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 800bb0c:	b184      	cbz	r4, 800bb30 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 800bb0e:	f06f 0001 	mvn.w	r0, #1
 800bb12:	e7ef      	b.n	800baf4 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bb14:	f06f 0003 	mvn.w	r0, #3
 800bb18:	e7ec      	b.n	800baf4 <osMessageQueuePut+0x3e>
 800bb1a:	f06f 0003 	mvn.w	r0, #3
 800bb1e:	e7e9      	b.n	800baf4 <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 800bb20:	f06f 0002 	mvn.w	r0, #2
 800bb24:	e7e6      	b.n	800baf4 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bb26:	f06f 0003 	mvn.w	r0, #3
 800bb2a:	e7e3      	b.n	800baf4 <osMessageQueuePut+0x3e>
  stat = osOK;
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	e7e1      	b.n	800baf4 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800bb30:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800bb34:	e7de      	b.n	800baf4 <osMessageQueuePut+0x3e>

0800bb36 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bb36:	b510      	push	{r4, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	461c      	mov	r4, r3
 800bb3c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800bb40:	b1d3      	cbz	r3, 800bb78 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb42:	2900      	cmp	r1, #0
 800bb44:	bf18      	it	ne
 800bb46:	2800      	cmpne	r0, #0
 800bb48:	d023      	beq.n	800bb92 <osMessageQueueGet+0x5c>
 800bb4a:	bb2c      	cbnz	r4, 800bb98 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bb50:	aa01      	add	r2, sp, #4
 800bb52:	f001 f824 	bl	800cb9e <xQueueReceiveFromISR>
 800bb56:	2801      	cmp	r0, #1
 800bb58:	d121      	bne.n	800bb9e <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800bb5a:	9801      	ldr	r0, [sp, #4]
 800bb5c:	b150      	cbz	r0, 800bb74 <osMessageQueueGet+0x3e>
 800bb5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800bb72:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800bb74:	b002      	add	sp, #8
 800bb76:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	bf18      	it	ne
 800bb7c:	2800      	cmpne	r0, #0
 800bb7e:	d011      	beq.n	800bba4 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb80:	4622      	mov	r2, r4
 800bb82:	f000 fe8a 	bl	800c89a <xQueueReceive>
 800bb86:	2801      	cmp	r0, #1
 800bb88:	d00f      	beq.n	800bbaa <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800bb8a:	b184      	cbz	r4, 800bbae <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800bb8c:	f06f 0001 	mvn.w	r0, #1
 800bb90:	e7f0      	b.n	800bb74 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800bb92:	f06f 0003 	mvn.w	r0, #3
 800bb96:	e7ed      	b.n	800bb74 <osMessageQueueGet+0x3e>
 800bb98:	f06f 0003 	mvn.w	r0, #3
 800bb9c:	e7ea      	b.n	800bb74 <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800bb9e:	f06f 0002 	mvn.w	r0, #2
 800bba2:	e7e7      	b.n	800bb74 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800bba4:	f06f 0003 	mvn.w	r0, #3
 800bba8:	e7e4      	b.n	800bb74 <osMessageQueueGet+0x3e>
  stat = osOK;
 800bbaa:	2000      	movs	r0, #0
 800bbac:	e7e2      	b.n	800bb74 <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800bbae:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800bbb2:	e7df      	b.n	800bb74 <osMessageQueueGet+0x3e>

0800bbb4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bbb4:	4b03      	ldr	r3, [pc, #12]	; (800bbc4 <vApplicationGetIdleTaskMemory+0x10>)
 800bbb6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bbb8:	4b03      	ldr	r3, [pc, #12]	; (800bbc8 <vApplicationGetIdleTaskMemory+0x14>)
 800bbba:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bbbc:	2380      	movs	r3, #128	; 0x80
 800bbbe:	6013      	str	r3, [r2, #0]
}
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	24002cc0 	.word	0x24002cc0
 800bbc8:	24002ac0 	.word	0x24002ac0

0800bbcc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbcc:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <vApplicationGetTimerTaskMemory+0x10>)
 800bbce:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbd0:	4b03      	ldr	r3, [pc, #12]	; (800bbe0 <vApplicationGetTimerTaskMemory+0x14>)
 800bbd2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd8:	6013      	str	r3, [r2, #0]
}
 800bbda:	4770      	bx	lr
 800bbdc:	24003180 	.word	0x24003180
 800bbe0:	24002d80 	.word	0x24002d80

0800bbe4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbe4:	4a12      	ldr	r2, [pc, #72]	; (800bc30 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbe6:	f012 0f07 	tst.w	r2, #7
 800bbea:	d01e      	beq.n	800bc2a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbec:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbee:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbf2:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800bbf6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbfa:	480e      	ldr	r0, [pc, #56]	; (800bc34 <prvHeapInit+0x50>)
 800bbfc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbfe:	2100      	movs	r1, #0
 800bc00:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc02:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800bc04:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc06:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800bc0a:	480b      	ldr	r0, [pc, #44]	; (800bc38 <prvHeapInit+0x54>)
 800bc0c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800bc0e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc10:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc12:	1a99      	subs	r1, r3, r2
 800bc14:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc16:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc18:	4b08      	ldr	r3, [pc, #32]	; (800bc3c <prvHeapInit+0x58>)
 800bc1a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc1c:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <prvHeapInit+0x5c>)
 800bc1e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc20:	4b08      	ldr	r3, [pc, #32]	; (800bc44 <prvHeapInit+0x60>)
 800bc22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc26:	601a      	str	r2, [r3, #0]
}
 800bc28:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc2e:	e7e4      	b.n	800bbfa <prvHeapInit+0x16>
 800bc30:	24003240 	.word	0x24003240
 800bc34:	2400b254 	.word	0x2400b254
 800bc38:	2400323c 	.word	0x2400323c
 800bc3c:	2400b248 	.word	0x2400b248
 800bc40:	2400b244 	.word	0x2400b244
 800bc44:	2400b240 	.word	0x2400b240

0800bc48 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc48:	4b16      	ldr	r3, [pc, #88]	; (800bca4 <prvInsertBlockIntoFreeList+0x5c>)
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4283      	cmp	r3, r0
 800bc50:	d3fb      	bcc.n	800bc4a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc52:	6851      	ldr	r1, [r2, #4]
 800bc54:	eb02 0c01 	add.w	ip, r2, r1
 800bc58:	4584      	cmp	ip, r0
 800bc5a:	d009      	beq.n	800bc70 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5c:	6841      	ldr	r1, [r0, #4]
 800bc5e:	eb00 0c01 	add.w	ip, r0, r1
 800bc62:	4563      	cmp	r3, ip
 800bc64:	d009      	beq.n	800bc7a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc66:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc68:	4290      	cmp	r0, r2
 800bc6a:	d019      	beq.n	800bca0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc6c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800bc6e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc70:	6840      	ldr	r0, [r0, #4]
 800bc72:	4401      	add	r1, r0
 800bc74:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800bc76:	4610      	mov	r0, r2
 800bc78:	e7f0      	b.n	800bc5c <prvInsertBlockIntoFreeList+0x14>
{
 800bc7a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc7c:	4c0a      	ldr	r4, [pc, #40]	; (800bca8 <prvInsertBlockIntoFreeList+0x60>)
 800bc7e:	6824      	ldr	r4, [r4, #0]
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	d00b      	beq.n	800bc9c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	4419      	add	r1, r3
 800bc88:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc8a:	6813      	ldr	r3, [r2, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800bc90:	4290      	cmp	r0, r2
 800bc92:	d000      	beq.n	800bc96 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc94:	6010      	str	r0, [r2, #0]
	}
}
 800bc96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc9a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc9c:	6004      	str	r4, [r0, #0]
 800bc9e:	e7f7      	b.n	800bc90 <prvInsertBlockIntoFreeList+0x48>
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	2400b254 	.word	0x2400b254
 800bca8:	2400323c 	.word	0x2400323c

0800bcac <pvPortMalloc>:
{
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800bcb0:	f001 fa9e 	bl	800d1f0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bcb4:	4b36      	ldr	r3, [pc, #216]	; (800bd90 <pvPortMalloc+0xe4>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	b1a3      	cbz	r3, 800bce4 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcba:	4b36      	ldr	r3, [pc, #216]	; (800bd94 <pvPortMalloc+0xe8>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	421d      	tst	r5, r3
 800bcc0:	d14e      	bne.n	800bd60 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800bcc2:	b135      	cbz	r5, 800bcd2 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800bcc4:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcc6:	f015 0f07 	tst.w	r5, #7
 800bcca:	d002      	beq.n	800bcd2 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bccc:	f025 0507 	bic.w	r5, r5, #7
 800bcd0:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcd2:	2d00      	cmp	r5, #0
 800bcd4:	d046      	beq.n	800bd64 <pvPortMalloc+0xb8>
 800bcd6:	4b30      	ldr	r3, [pc, #192]	; (800bd98 <pvPortMalloc+0xec>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	42ab      	cmp	r3, r5
 800bcdc:	d351      	bcc.n	800bd82 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800bcde:	4a2f      	ldr	r2, [pc, #188]	; (800bd9c <pvPortMalloc+0xf0>)
 800bce0:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bce2:	e004      	b.n	800bcee <pvPortMalloc+0x42>
			prvHeapInit();
 800bce4:	f7ff ff7e 	bl	800bbe4 <prvHeapInit>
 800bce8:	e7e7      	b.n	800bcba <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800bcea:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcec:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcee:	6863      	ldr	r3, [r4, #4]
 800bcf0:	42ab      	cmp	r3, r5
 800bcf2:	d202      	bcs.n	800bcfa <pvPortMalloc+0x4e>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1f7      	bne.n	800bcea <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800bcfa:	4b25      	ldr	r3, [pc, #148]	; (800bd90 <pvPortMalloc+0xe4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	42a3      	cmp	r3, r4
 800bd00:	d041      	beq.n	800bd86 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd02:	6816      	ldr	r6, [r2, #0]
 800bd04:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd0a:	6863      	ldr	r3, [r4, #4]
 800bd0c:	1b5b      	subs	r3, r3, r5
 800bd0e:	2b10      	cmp	r3, #16
 800bd10:	d910      	bls.n	800bd34 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd12:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd14:	f010 0f07 	tst.w	r0, #7
 800bd18:	d008      	beq.n	800bd2c <pvPortMalloc+0x80>
 800bd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	e7fe      	b.n	800bd2a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd2c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd2e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd30:	f7ff ff8a 	bl	800bc48 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd34:	6862      	ldr	r2, [r4, #4]
 800bd36:	4918      	ldr	r1, [pc, #96]	; (800bd98 <pvPortMalloc+0xec>)
 800bd38:	680b      	ldr	r3, [r1, #0]
 800bd3a:	1a9b      	subs	r3, r3, r2
 800bd3c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd3e:	4918      	ldr	r1, [pc, #96]	; (800bda0 <pvPortMalloc+0xf4>)
 800bd40:	6809      	ldr	r1, [r1, #0]
 800bd42:	428b      	cmp	r3, r1
 800bd44:	d201      	bcs.n	800bd4a <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd46:	4916      	ldr	r1, [pc, #88]	; (800bda0 <pvPortMalloc+0xf4>)
 800bd48:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd4a:	4b12      	ldr	r3, [pc, #72]	; (800bd94 <pvPortMalloc+0xe8>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd52:	2300      	movs	r3, #0
 800bd54:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800bd56:	4a13      	ldr	r2, [pc, #76]	; (800bda4 <pvPortMalloc+0xf8>)
 800bd58:	6813      	ldr	r3, [r2, #0]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	e002      	b.n	800bd66 <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800bd60:	2600      	movs	r6, #0
 800bd62:	e000      	b.n	800bd66 <pvPortMalloc+0xba>
 800bd64:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800bd66:	f001 fadd 	bl	800d324 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd6a:	f016 0f07 	tst.w	r6, #7
 800bd6e:	d00c      	beq.n	800bd8a <pvPortMalloc+0xde>
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	e7fe      	b.n	800bd80 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800bd82:	2600      	movs	r6, #0
 800bd84:	e7ef      	b.n	800bd66 <pvPortMalloc+0xba>
 800bd86:	2600      	movs	r6, #0
 800bd88:	e7ed      	b.n	800bd66 <pvPortMalloc+0xba>
}
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	bd70      	pop	{r4, r5, r6, pc}
 800bd8e:	bf00      	nop
 800bd90:	2400323c 	.word	0x2400323c
 800bd94:	2400b240 	.word	0x2400b240
 800bd98:	2400b244 	.word	0x2400b244
 800bd9c:	2400b254 	.word	0x2400b254
 800bda0:	2400b248 	.word	0x2400b248
 800bda4:	2400b24c 	.word	0x2400b24c

0800bda8 <vPortFree>:
	if( pv != NULL )
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d034      	beq.n	800be16 <vPortFree+0x6e>
{
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800bdb0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bdb4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bdb8:	4a17      	ldr	r2, [pc, #92]	; (800be18 <vPortFree+0x70>)
 800bdba:	6812      	ldr	r2, [r2, #0]
 800bdbc:	4213      	tst	r3, r2
 800bdbe:	d108      	bne.n	800bdd2 <vPortFree+0x2a>
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	e7fe      	b.n	800bdd0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdd2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800bdd6:	b141      	cbz	r1, 800bdea <vPortFree+0x42>
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	e7fe      	b.n	800bde8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bdea:	ea23 0302 	bic.w	r3, r3, r2
 800bdee:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800bdf2:	f001 f9fd 	bl	800d1f0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bdf6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800bdfa:	4a08      	ldr	r2, [pc, #32]	; (800be1c <vPortFree+0x74>)
 800bdfc:	6813      	ldr	r3, [r2, #0]
 800bdfe:	440b      	add	r3, r1
 800be00:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be02:	4628      	mov	r0, r5
 800be04:	f7ff ff20 	bl	800bc48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be08:	4a05      	ldr	r2, [pc, #20]	; (800be20 <vPortFree+0x78>)
 800be0a:	6813      	ldr	r3, [r2, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800be10:	f001 fa88 	bl	800d324 <xTaskResumeAll>
}
 800be14:	bd38      	pop	{r3, r4, r5, pc}
 800be16:	4770      	bx	lr
 800be18:	2400b240 	.word	0x2400b240
 800be1c:	2400b244 	.word	0x2400b244
 800be20:	2400b250 	.word	0x2400b250

0800be24 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be24:	f100 0308 	add.w	r3, r0, #8
 800be28:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be2a:	f04f 32ff 	mov.w	r2, #4294967295
 800be2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be30:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be38:	4770      	bx	lr

0800be3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be3e:	4770      	bx	lr

0800be40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800be40:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be44:	689a      	ldr	r2, [r3, #8]
 800be46:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be48:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be4a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800be4e:	6803      	ldr	r3, [r0, #0]
 800be50:	3301      	adds	r3, #1
 800be52:	6003      	str	r3, [r0, #0]
}
 800be54:	4770      	bx	lr

0800be56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be56:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be58:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800be5e:	d011      	beq.n	800be84 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be60:	f100 0308 	add.w	r3, r0, #8
 800be64:	461c      	mov	r4, r3
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	42aa      	cmp	r2, r5
 800be6c:	d9fa      	bls.n	800be64 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be6e:	6863      	ldr	r3, [r4, #4]
 800be70:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be72:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be74:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800be76:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be78:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800be7a:	6803      	ldr	r3, [r0, #0]
 800be7c:	3301      	adds	r3, #1
 800be7e:	6003      	str	r3, [r0, #0]
}
 800be80:	bc30      	pop	{r4, r5}
 800be82:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800be84:	6904      	ldr	r4, [r0, #16]
 800be86:	e7f2      	b.n	800be6e <vListInsert+0x18>

0800be88 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be8a:	6841      	ldr	r1, [r0, #4]
 800be8c:	6882      	ldr	r2, [r0, #8]
 800be8e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be90:	6841      	ldr	r1, [r0, #4]
 800be92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	4282      	cmp	r2, r0
 800be98:	d006      	beq.n	800bea8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be9a:	2200      	movs	r2, #0
 800be9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	3a01      	subs	r2, #1
 800bea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bea4:	6818      	ldr	r0, [r3, #0]
}
 800bea6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bea8:	6882      	ldr	r2, [r0, #8]
 800beaa:	605a      	str	r2, [r3, #4]
 800beac:	e7f5      	b.n	800be9a <uxListRemove+0x12>
	...

0800beb0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800beb0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beb6:	4b0d      	ldr	r3, [pc, #52]	; (800beec <prvTaskExitError+0x3c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebe:	d008      	beq.n	800bed2 <prvTaskExitError+0x22>
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	e7fe      	b.n	800bed0 <prvTaskExitError+0x20>
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bee2:	9b01      	ldr	r3, [sp, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0fc      	beq.n	800bee2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bee8:	b002      	add	sp, #8
 800beea:	4770      	bx	lr
 800beec:	24000050 	.word	0x24000050

0800bef0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bef0:	4808      	ldr	r0, [pc, #32]	; (800bf14 <prvPortStartFirstTask+0x24>)
 800bef2:	6800      	ldr	r0, [r0, #0]
 800bef4:	6800      	ldr	r0, [r0, #0]
 800bef6:	f380 8808 	msr	MSP, r0
 800befa:	f04f 0000 	mov.w	r0, #0
 800befe:	f380 8814 	msr	CONTROL, r0
 800bf02:	b662      	cpsie	i
 800bf04:	b661      	cpsie	f
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	df00      	svc	0
 800bf10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf12:	0000      	.short	0x0000
 800bf14:	e000ed08 	.word	0xe000ed08

0800bf18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf28 <vPortEnableVFP+0x10>
 800bf1c:	6801      	ldr	r1, [r0, #0]
 800bf1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf22:	6001      	str	r1, [r0, #0]
 800bf24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf26:	0000      	.short	0x0000
 800bf28:	e000ed88 	.word	0xe000ed88

0800bf2c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf30:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf34:	f021 0101 	bic.w	r1, r1, #1
 800bf38:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <pxPortInitialiseStack+0x28>)
 800bf3e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf42:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf46:	f06f 0302 	mvn.w	r3, #2
 800bf4a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800bf4e:	3844      	subs	r0, #68	; 0x44
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	0800beb1 	.word	0x0800beb1
	...

0800bf60 <SVC_Handler>:
	__asm volatile (
 800bf60:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <pxCurrentTCBConst2>)
 800bf62:	6819      	ldr	r1, [r3, #0]
 800bf64:	6808      	ldr	r0, [r1, #0]
 800bf66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6a:	f380 8809 	msr	PSP, r0
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f380 8811 	msr	BASEPRI, r0
 800bf7a:	4770      	bx	lr
 800bf7c:	f3af 8000 	nop.w

0800bf80 <pxCurrentTCBConst2>:
 800bf80:	2400b2a4 	.word	0x2400b2a4

0800bf84 <vPortEnterCritical>:
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800bf94:	4a0b      	ldr	r2, [pc, #44]	; (800bfc4 <vPortEnterCritical+0x40>)
 800bf96:	6813      	ldr	r3, [r2, #0]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d000      	beq.n	800bfa2 <vPortEnterCritical+0x1e>
}
 800bfa0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfa2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bfa6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800bfaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bfae:	d0f7      	beq.n	800bfa0 <vPortEnterCritical+0x1c>
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	e7fe      	b.n	800bfc0 <vPortEnterCritical+0x3c>
 800bfc2:	bf00      	nop
 800bfc4:	24000050 	.word	0x24000050

0800bfc8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800bfc8:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <vPortExitCritical+0x28>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	b943      	cbnz	r3, 800bfe0 <vPortExitCritical+0x18>
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	e7fe      	b.n	800bfde <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	4a03      	ldr	r2, [pc, #12]	; (800bff0 <vPortExitCritical+0x28>)
 800bfe4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfe6:	b90b      	cbnz	r3, 800bfec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfe8:	f383 8811 	msr	BASEPRI, r3
}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	24000050 	.word	0x24000050
	...

0800c000 <PendSV_Handler>:
	__asm volatile
 800c000:	f3ef 8009 	mrs	r0, PSP
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	4b15      	ldr	r3, [pc, #84]	; (800c060 <pxCurrentTCBConst>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	f01e 0f10 	tst.w	lr, #16
 800c010:	bf08      	it	eq
 800c012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01a:	6010      	str	r0, [r2, #0]
 800c01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c020:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c024:	f380 8811 	msr	BASEPRI, r0
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f001 f9f4 	bl	800d41c <vTaskSwitchContext>
 800c034:	f04f 0000 	mov.w	r0, #0
 800c038:	f380 8811 	msr	BASEPRI, r0
 800c03c:	bc09      	pop	{r0, r3}
 800c03e:	6819      	ldr	r1, [r3, #0]
 800c040:	6808      	ldr	r0, [r1, #0]
 800c042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c046:	f01e 0f10 	tst.w	lr, #16
 800c04a:	bf08      	it	eq
 800c04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c050:	f380 8809 	msr	PSP, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	f3af 8000 	nop.w

0800c060 <pxCurrentTCBConst>:
 800c060:	2400b2a4 	.word	0x2400b2a4

0800c064 <xPortSysTickHandler>:
{
 800c064:	b508      	push	{r3, lr}
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800c076:	f001 f8c9 	bl	800d20c <xTaskIncrementTick>
 800c07a:	b128      	cbz	r0, 800c088 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c07c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c084:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800c088:	2300      	movs	r3, #0
 800c08a:	f383 8811 	msr	BASEPRI, r3
}
 800c08e:	bd08      	pop	{r3, pc}

0800c090 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c090:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800c094:	2300      	movs	r3, #0
 800c096:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c098:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c09a:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <vPortSetupTimerInterrupt+0x20>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4905      	ldr	r1, [pc, #20]	; (800c0b4 <vPortSetupTimerInterrupt+0x24>)
 800c0a0:	fba1 1303 	umull	r1, r3, r1, r3
 800c0a4:	099b      	lsrs	r3, r3, #6
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0aa:	2307      	movs	r3, #7
 800c0ac:	6113      	str	r3, [r2, #16]
}
 800c0ae:	4770      	bx	lr
 800c0b0:	24000040 	.word	0x24000040
 800c0b4:	10624dd3 	.word	0x10624dd3

0800c0b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c0bc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800c0c0:	4b3d      	ldr	r3, [pc, #244]	; (800c1b8 <xPortStartScheduler+0x100>)
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d01c      	beq.n	800c100 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c0ca:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800c0ce:	4b3b      	ldr	r3, [pc, #236]	; (800c1bc <xPortStartScheduler+0x104>)
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d01e      	beq.n	800c112 <xPortStartScheduler+0x5a>
{
 800c0d4:	b530      	push	{r4, r5, lr}
 800c0d6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0d8:	4b39      	ldr	r3, [pc, #228]	; (800c1c0 <xPortStartScheduler+0x108>)
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	b2d2      	uxtb	r2, r2
 800c0de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0e0:	22ff      	movs	r2, #255	; 0xff
 800c0e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c0f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0f4:	4a33      	ldr	r2, [pc, #204]	; (800c1c4 <xPortStartScheduler+0x10c>)
 800c0f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0f8:	4b33      	ldr	r3, [pc, #204]	; (800c1c8 <xPortStartScheduler+0x110>)
 800c0fa:	2207      	movs	r2, #7
 800c0fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0fe:	e01b      	b.n	800c138 <xPortStartScheduler+0x80>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c110:	e7fe      	b.n	800c110 <xPortStartScheduler+0x58>
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c122:	e7fe      	b.n	800c122 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800c124:	4a28      	ldr	r2, [pc, #160]	; (800c1c8 <xPortStartScheduler+0x110>)
 800c126:	6813      	ldr	r3, [r2, #0]
 800c128:	3b01      	subs	r3, #1
 800c12a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c12c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c130:	005b      	lsls	r3, r3, #1
 800c132:	b2db      	uxtb	r3, r3
 800c134:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c138:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c13c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c140:	d1f0      	bne.n	800c124 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c142:	4b21      	ldr	r3, [pc, #132]	; (800c1c8 <xPortStartScheduler+0x110>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b03      	cmp	r3, #3
 800c148:	d008      	beq.n	800c15c <xPortStartScheduler+0xa4>
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	e7fe      	b.n	800c15a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c15c:	021b      	lsls	r3, r3, #8
 800c15e:	4a1a      	ldr	r2, [pc, #104]	; (800c1c8 <xPortStartScheduler+0x110>)
 800c160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c162:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c166:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c168:	9b01      	ldr	r3, [sp, #4]
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	4a14      	ldr	r2, [pc, #80]	; (800c1c0 <xPortStartScheduler+0x108>)
 800c16e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c170:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800c174:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800c178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c17c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c180:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800c184:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c188:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800c18c:	f7ff ff80 	bl	800c090 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c190:	2500      	movs	r5, #0
 800c192:	4b0e      	ldr	r3, [pc, #56]	; (800c1cc <xPortStartScheduler+0x114>)
 800c194:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800c196:	f7ff febf 	bl	800bf18 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c19a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800c19e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c1a2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800c1a6:	f7ff fea3 	bl	800bef0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c1aa:	f001 f937 	bl	800d41c <vTaskSwitchContext>
	prvTaskExitError();
 800c1ae:	f7ff fe7f 	bl	800beb0 <prvTaskExitError>
}
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	b003      	add	sp, #12
 800c1b6:	bd30      	pop	{r4, r5, pc}
 800c1b8:	410fc271 	.word	0x410fc271
 800c1bc:	410fc270 	.word	0x410fc270
 800c1c0:	e000e400 	.word	0xe000e400
 800c1c4:	2400b25c 	.word	0x2400b25c
 800c1c8:	2400b260 	.word	0x2400b260
 800c1cc:	24000050 	.word	0x24000050

0800c1d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1d4:	2b0f      	cmp	r3, #15
 800c1d6:	d90f      	bls.n	800c1f8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1d8:	4a11      	ldr	r2, [pc, #68]	; (800c220 <vPortValidateInterruptPriority+0x50>)
 800c1da:	5c9b      	ldrb	r3, [r3, r2]
 800c1dc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1de:	4a11      	ldr	r2, [pc, #68]	; (800c224 <vPortValidateInterruptPriority+0x54>)
 800c1e0:	7812      	ldrb	r2, [r2, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d908      	bls.n	800c1f8 <vPortValidateInterruptPriority+0x28>
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	e7fe      	b.n	800c1f6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c1fc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c204:	4a08      	ldr	r2, [pc, #32]	; (800c228 <vPortValidateInterruptPriority+0x58>)
 800c206:	6812      	ldr	r2, [r2, #0]
 800c208:	4293      	cmp	r3, r2
 800c20a:	d908      	bls.n	800c21e <vPortValidateInterruptPriority+0x4e>
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	e7fe      	b.n	800c21c <vPortValidateInterruptPriority+0x4c>
	}
 800c21e:	4770      	bx	lr
 800c220:	e000e3f0 	.word	0xe000e3f0
 800c224:	2400b25c 	.word	0x2400b25c
 800c228:	2400b260 	.word	0x2400b260

0800c22c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c22c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c22e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c230:	b118      	cbz	r0, 800c23a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800c23a:	4770      	bx	lr

0800c23c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c23c:	b510      	push	{r4, lr}
 800c23e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c240:	f7ff fea0 	bl	800bf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c246:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c248:	429a      	cmp	r2, r3
 800c24a:	d004      	beq.n	800c256 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800c24c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800c24e:	f7ff febb 	bl	800bfc8 <vPortExitCritical>

	return xReturn;
}
 800c252:	4620      	mov	r0, r4
 800c254:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800c256:	2401      	movs	r4, #1
 800c258:	e7f9      	b.n	800c24e <prvIsQueueFull+0x12>

0800c25a <prvIsQueueEmpty>:
{
 800c25a:	b510      	push	{r4, lr}
 800c25c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c25e:	f7ff fe91 	bl	800bf84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c264:	b923      	cbnz	r3, 800c270 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800c266:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800c268:	f7ff feae 	bl	800bfc8 <vPortExitCritical>
}
 800c26c:	4620      	mov	r0, r4
 800c26e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800c270:	2400      	movs	r4, #0
 800c272:	e7f9      	b.n	800c268 <prvIsQueueEmpty+0xe>

0800c274 <prvCopyDataToQueue>:
{
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4604      	mov	r4, r0
 800c278:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c27a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c27c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c27e:	b95a      	cbnz	r2, 800c298 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c280:	6803      	ldr	r3, [r0, #0]
 800c282:	b11b      	cbz	r3, 800c28c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800c284:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c286:	3601      	adds	r6, #1
 800c288:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800c28a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c28c:	6880      	ldr	r0, [r0, #8]
 800c28e:	f001 fa3f 	bl	800d710 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	60a3      	str	r3, [r4, #8]
 800c296:	e7f6      	b.n	800c286 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800c298:	b96d      	cbnz	r5, 800c2b6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c29a:	6840      	ldr	r0, [r0, #4]
 800c29c:	f010 f9e0 	bl	801c660 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c2a2:	6863      	ldr	r3, [r4, #4]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2a8:	68a2      	ldr	r2, [r4, #8]
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d319      	bcc.n	800c2e2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	e7e7      	b.n	800c286 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2b6:	68c0      	ldr	r0, [r0, #12]
 800c2b8:	f010 f9d2 	bl	801c660 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c2bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c2be:	4251      	negs	r1, r2
 800c2c0:	68e3      	ldr	r3, [r4, #12]
 800c2c2:	1a9b      	subs	r3, r3, r2
 800c2c4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2c6:	6822      	ldr	r2, [r4, #0]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d202      	bcs.n	800c2d2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c2cc:	68a3      	ldr	r3, [r4, #8]
 800c2ce:	440b      	add	r3, r1
 800c2d0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c2d2:	2d02      	cmp	r5, #2
 800c2d4:	d001      	beq.n	800c2da <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	e7d5      	b.n	800c286 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2da:	b126      	cbz	r6, 800c2e6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800c2dc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c2de:	2000      	movs	r0, #0
 800c2e0:	e7d1      	b.n	800c286 <prvCopyDataToQueue+0x12>
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	e7cf      	b.n	800c286 <prvCopyDataToQueue+0x12>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e7cd      	b.n	800c286 <prvCopyDataToQueue+0x12>

0800c2ea <prvCopyDataFromQueue>:
{
 800c2ea:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c2ee:	b16a      	cbz	r2, 800c30c <prvCopyDataFromQueue+0x22>
{
 800c2f0:	b510      	push	{r4, lr}
 800c2f2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2f4:	68d9      	ldr	r1, [r3, #12]
 800c2f6:	4411      	add	r1, r2
 800c2f8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2fa:	689c      	ldr	r4, [r3, #8]
 800c2fc:	42a1      	cmp	r1, r4
 800c2fe:	d301      	bcc.n	800c304 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c300:	6819      	ldr	r1, [r3, #0]
 800c302:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c304:	68d9      	ldr	r1, [r3, #12]
 800c306:	f010 f9ab 	bl	801c660 <memcpy>
}
 800c30a:	bd10      	pop	{r4, pc}
 800c30c:	4770      	bx	lr

0800c30e <prvUnlockQueue>:
{
 800c30e:	b538      	push	{r3, r4, r5, lr}
 800c310:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800c312:	f7ff fe37 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c316:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800c31a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c31c:	e001      	b.n	800c322 <prvUnlockQueue+0x14>
			--cTxLock;
 800c31e:	3c01      	subs	r4, #1
 800c320:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c322:	2c00      	cmp	r4, #0
 800c324:	dd0a      	ble.n	800c33c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c328:	b143      	cbz	r3, 800c33c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c32a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800c32e:	f001 f8f9 	bl	800d524 <xTaskRemoveFromEventList>
 800c332:	2800      	cmp	r0, #0
 800c334:	d0f3      	beq.n	800c31e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800c336:	f001 f989 	bl	800d64c <vTaskMissedYield>
 800c33a:	e7f0      	b.n	800c31e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800c33c:	23ff      	movs	r3, #255	; 0xff
 800c33e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c342:	f7ff fe41 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c346:	f7ff fe1d 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c34a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800c34e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c350:	e001      	b.n	800c356 <prvUnlockQueue+0x48>
				--cRxLock;
 800c352:	3c01      	subs	r4, #1
 800c354:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c356:	2c00      	cmp	r4, #0
 800c358:	dd0a      	ble.n	800c370 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c35a:	692b      	ldr	r3, [r5, #16]
 800c35c:	b143      	cbz	r3, 800c370 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c35e:	f105 0010 	add.w	r0, r5, #16
 800c362:	f001 f8df 	bl	800d524 <xTaskRemoveFromEventList>
 800c366:	2800      	cmp	r0, #0
 800c368:	d0f3      	beq.n	800c352 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800c36a:	f001 f96f 	bl	800d64c <vTaskMissedYield>
 800c36e:	e7f0      	b.n	800c352 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800c370:	23ff      	movs	r3, #255	; 0xff
 800c372:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c376:	f7ff fe27 	bl	800bfc8 <vPortExitCritical>
}
 800c37a:	bd38      	pop	{r3, r4, r5, pc}

0800c37c <xQueueGenericReset>:
{
 800c37c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800c37e:	b1e0      	cbz	r0, 800c3ba <xQueueGenericReset+0x3e>
 800c380:	460d      	mov	r5, r1
 800c382:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c384:	f7ff fdfe 	bl	800bf84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c38c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c38e:	fb01 3002 	mla	r0, r1, r2, r3
 800c392:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c394:	2000      	movs	r0, #0
 800c396:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c398:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c39a:	3a01      	subs	r2, #1
 800c39c:	fb02 3301 	mla	r3, r2, r1, r3
 800c3a0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3a2:	23ff      	movs	r3, #255	; 0xff
 800c3a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800c3ac:	b9fd      	cbnz	r5, 800c3ee <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	b963      	cbnz	r3, 800c3cc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800c3b2:	f7ff fe09 	bl	800bfc8 <vPortExitCritical>
}
 800c3b6:	2001      	movs	r0, #1
 800c3b8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c3ca:	e7fe      	b.n	800c3ca <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3cc:	f104 0010 	add.w	r0, r4, #16
 800c3d0:	f001 f8a8 	bl	800d524 <xTaskRemoveFromEventList>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d0ec      	beq.n	800c3b2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800c3d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	e7e1      	b.n	800c3b2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3ee:	f104 0010 	add.w	r0, r4, #16
 800c3f2:	f7ff fd17 	bl	800be24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c3fa:	f7ff fd13 	bl	800be24 <vListInitialise>
 800c3fe:	e7d8      	b.n	800c3b2 <xQueueGenericReset+0x36>

0800c400 <prvInitialiseNewQueue>:
{
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	461d      	mov	r5, r3
 800c404:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c406:	460b      	mov	r3, r1
 800c408:	b949      	cbnz	r1, 800c41e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c40a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c40c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c40e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c410:	2101      	movs	r1, #1
 800c412:	4620      	mov	r0, r4
 800c414:	f7ff ffb2 	bl	800c37c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c418:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800c41c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c41e:	6022      	str	r2, [r4, #0]
 800c420:	e7f4      	b.n	800c40c <prvInitialiseNewQueue+0xc>

0800c422 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c422:	b940      	cbnz	r0, 800c436 <xQueueGenericCreateStatic+0x14>
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	e7fe      	b.n	800c434 <xQueueGenericCreateStatic+0x12>
	{
 800c436:	b510      	push	{r4, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800c43c:	b183      	cbz	r3, 800c460 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c43e:	1e0b      	subs	r3, r1, #0
 800c440:	bf18      	it	ne
 800c442:	2301      	movne	r3, #1
 800c444:	2a00      	cmp	r2, #0
 800c446:	bf08      	it	eq
 800c448:	f043 0301 	orreq.w	r3, r3, #1
 800c44c:	b98b      	cbnz	r3, 800c472 <xQueueGenericCreateStatic+0x50>
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	e7fe      	b.n	800c45e <xQueueGenericCreateStatic+0x3c>
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800c470:	e7fe      	b.n	800c470 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c472:	fab1 f381 	clz	r3, r1
 800c476:	095b      	lsrs	r3, r3, #5
 800c478:	2a00      	cmp	r2, #0
 800c47a:	bf18      	it	ne
 800c47c:	f043 0301 	orrne.w	r3, r3, #1
 800c480:	b943      	cbnz	r3, 800c494 <xQueueGenericCreateStatic+0x72>
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	e7fe      	b.n	800c492 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c494:	2350      	movs	r3, #80	; 0x50
 800c496:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	2b50      	cmp	r3, #80	; 0x50
 800c49c:	d008      	beq.n	800c4b0 <xQueueGenericCreateStatic+0x8e>
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	e7fe      	b.n	800c4ae <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4b0:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4b8:	9400      	str	r4, [sp, #0]
 800c4ba:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c4be:	f7ff ff9f 	bl	800c400 <prvInitialiseNewQueue>
	}
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	b004      	add	sp, #16
 800c4c6:	bd10      	pop	{r4, pc}

0800c4c8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c4c8:	b940      	cbnz	r0, 800c4dc <xQueueGenericCreate+0x14>
 800c4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	e7fe      	b.n	800c4da <xQueueGenericCreate+0x12>
	{
 800c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	460d      	mov	r5, r1
 800c4e2:	4614      	mov	r4, r2
 800c4e4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4e6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4ea:	3050      	adds	r0, #80	; 0x50
 800c4ec:	f7ff fbde 	bl	800bcac <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	b150      	cbz	r0, 800c50a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4fa:	9000      	str	r0, [sp, #0]
 800c4fc:	4623      	mov	r3, r4
 800c4fe:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800c502:	4629      	mov	r1, r5
 800c504:	4630      	mov	r0, r6
 800c506:	f7ff ff7b 	bl	800c400 <prvInitialiseNewQueue>
	}
 800c50a:	4638      	mov	r0, r7
 800c50c:	b003      	add	sp, #12
 800c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c510 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800c510:	b940      	cbnz	r0, 800c524 <xQueueCreateCountingSemaphoreStatic+0x14>
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	e7fe      	b.n	800c522 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800c524:	b510      	push	{r4, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c52a:	4288      	cmp	r0, r1
 800c52c:	d208      	bcs.n	800c540 <xQueueCreateCountingSemaphoreStatic+0x30>
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	e7fe      	b.n	800c53e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c540:	2302      	movs	r3, #2
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	4613      	mov	r3, r2
 800c546:	2200      	movs	r2, #0
 800c548:	4611      	mov	r1, r2
 800c54a:	f7ff ff6a 	bl	800c422 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c54e:	b100      	cbz	r0, 800c552 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c550:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c552:	b002      	add	sp, #8
 800c554:	bd10      	pop	{r4, pc}

0800c556 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800c556:	b940      	cbnz	r0, 800c56a <xQueueCreateCountingSemaphore+0x14>
 800c558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55c:	f383 8811 	msr	BASEPRI, r3
 800c560:	f3bf 8f6f 	isb	sy
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	e7fe      	b.n	800c568 <xQueueCreateCountingSemaphore+0x12>
	{
 800c56a:	b510      	push	{r4, lr}
 800c56c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c56e:	4288      	cmp	r0, r1
 800c570:	d208      	bcs.n	800c584 <xQueueCreateCountingSemaphore+0x2e>
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	e7fe      	b.n	800c582 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c584:	2202      	movs	r2, #2
 800c586:	2100      	movs	r1, #0
 800c588:	f7ff ff9e 	bl	800c4c8 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c58c:	b100      	cbz	r0, 800c590 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c58e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c590:	bd10      	pop	{r4, pc}

0800c592 <xQueueGenericSend>:
{
 800c592:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c594:	b085      	sub	sp, #20
 800c596:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c598:	b188      	cbz	r0, 800c5be <xQueueGenericSend+0x2c>
 800c59a:	460f      	mov	r7, r1
 800c59c:	461d      	mov	r5, r3
 800c59e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5a0:	b1b1      	cbz	r1, 800c5d0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5a2:	2d02      	cmp	r5, #2
 800c5a4:	d120      	bne.n	800c5e8 <xQueueGenericSend+0x56>
 800c5a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d01d      	beq.n	800c5e8 <xQueueGenericSend+0x56>
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGenericSend+0x2a>
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c5ce:	e7fe      	b.n	800c5ce <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0e5      	beq.n	800c5a2 <xQueueGenericSend+0x10>
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	e7fe      	b.n	800c5e6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5e8:	f001 f836 	bl	800d658 <xTaskGetSchedulerState>
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	b958      	cbnz	r0, 800c608 <xQueueGenericSend+0x76>
 800c5f0:	9b01      	ldr	r3, [sp, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d048      	beq.n	800c688 <xQueueGenericSend+0xf6>
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	e7fe      	b.n	800c606 <xQueueGenericSend+0x74>
 800c608:	2600      	movs	r6, #0
 800c60a:	e03d      	b.n	800c688 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c60c:	462a      	mov	r2, r5
 800c60e:	4639      	mov	r1, r7
 800c610:	4620      	mov	r0, r4
 800c612:	f7ff fe2f 	bl	800c274 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c618:	b97b      	cbnz	r3, 800c63a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800c61a:	b148      	cbz	r0, 800c630 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800c61c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c624:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c630:	f7ff fcca 	bl	800bfc8 <vPortExitCritical>
				return pdPASS;
 800c634:	2001      	movs	r0, #1
}
 800c636:	b005      	add	sp, #20
 800c638:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c63a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c63e:	f000 ff71 	bl	800d524 <xTaskRemoveFromEventList>
 800c642:	2800      	cmp	r0, #0
 800c644:	d0f4      	beq.n	800c630 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800c646:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	e7e9      	b.n	800c630 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800c65c:	f7ff fcb4 	bl	800bfc8 <vPortExitCritical>
					return errQUEUE_FULL;
 800c660:	2000      	movs	r0, #0
 800c662:	e7e8      	b.n	800c636 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c664:	a802      	add	r0, sp, #8
 800c666:	f000 ffa3 	bl	800d5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c66a:	2601      	movs	r6, #1
 800c66c:	e019      	b.n	800c6a2 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800c66e:	2300      	movs	r3, #0
 800c670:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c674:	e021      	b.n	800c6ba <xQueueGenericSend+0x128>
 800c676:	2300      	movs	r3, #0
 800c678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c67c:	e023      	b.n	800c6c6 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800c67e:	4620      	mov	r0, r4
 800c680:	f7ff fe45 	bl	800c30e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c684:	f000 fe4e 	bl	800d324 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c688:	f7ff fc7c 	bl	800bf84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c68c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c68e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c690:	429a      	cmp	r2, r3
 800c692:	d3bb      	bcc.n	800c60c <xQueueGenericSend+0x7a>
 800c694:	2d02      	cmp	r5, #2
 800c696:	d0b9      	beq.n	800c60c <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c698:	9b01      	ldr	r3, [sp, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0de      	beq.n	800c65c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	d0e0      	beq.n	800c664 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800c6a2:	f7ff fc91 	bl	800bfc8 <vPortExitCritical>
		vTaskSuspendAll();
 800c6a6:	f000 fda3 	bl	800d1f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6aa:	f7ff fc6b 	bl	800bf84 <vPortEnterCritical>
 800c6ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800c6b2:	b252      	sxtb	r2, r2
 800c6b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6b8:	d0d9      	beq.n	800c66e <xQueueGenericSend+0xdc>
 800c6ba:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800c6be:	b252      	sxtb	r2, r2
 800c6c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6c4:	d0d7      	beq.n	800c676 <xQueueGenericSend+0xe4>
 800c6c6:	f7ff fc7f 	bl	800bfc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6ca:	a901      	add	r1, sp, #4
 800c6cc:	a802      	add	r0, sp, #8
 800c6ce:	f000 ff7b 	bl	800d5c8 <xTaskCheckForTimeOut>
 800c6d2:	b9d8      	cbnz	r0, 800c70c <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f7ff fdb1 	bl	800c23c <prvIsQueueFull>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d0cf      	beq.n	800c67e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6de:	9901      	ldr	r1, [sp, #4]
 800c6e0:	f104 0010 	add.w	r0, r4, #16
 800c6e4:	f000 feea 	bl	800d4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f7ff fe10 	bl	800c30e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6ee:	f000 fe19 	bl	800d324 <xTaskResumeAll>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1c8      	bne.n	800c688 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800c6f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	e7bd      	b.n	800c688 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800c70c:	4620      	mov	r0, r4
 800c70e:	f7ff fdfe 	bl	800c30e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c712:	f000 fe07 	bl	800d324 <xTaskResumeAll>
			return errQUEUE_FULL;
 800c716:	2000      	movs	r0, #0
 800c718:	e78d      	b.n	800c636 <xQueueGenericSend+0xa4>

0800c71a <xQueueGenericSendFromISR>:
{
 800c71a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800c71e:	b190      	cbz	r0, 800c746 <xQueueGenericSendFromISR+0x2c>
 800c720:	460f      	mov	r7, r1
 800c722:	4616      	mov	r6, r2
 800c724:	461c      	mov	r4, r3
 800c726:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c728:	b1b1      	cbz	r1, 800c758 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c72a:	2c02      	cmp	r4, #2
 800c72c:	d120      	bne.n	800c770 <xQueueGenericSendFromISR+0x56>
 800c72e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c730:	2b01      	cmp	r3, #1
 800c732:	d01d      	beq.n	800c770 <xQueueGenericSendFromISR+0x56>
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	e7fe      	b.n	800c744 <xQueueGenericSendFromISR+0x2a>
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c756:	e7fe      	b.n	800c756 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c758:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0e5      	beq.n	800c72a <xQueueGenericSendFromISR+0x10>
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	e7fe      	b.n	800c76e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c770:	f7ff fd2e 	bl	800c1d0 <vPortValidateInterruptPriority>
	__asm volatile
 800c774:	f3ef 8911 	mrs	r9, BASEPRI
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c788:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800c78a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d306      	bcc.n	800c79e <xQueueGenericSendFromISR+0x84>
 800c790:	2c02      	cmp	r4, #2
 800c792:	d004      	beq.n	800c79e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800c794:	2000      	movs	r0, #0
	__asm volatile
 800c796:	f389 8811 	msr	BASEPRI, r9
}
 800c79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800c79e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800c7a2:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f7ff fd61 	bl	800c274 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c7b2:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c7b6:	d006      	beq.n	800c7c6 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7b8:	f108 0301 	add.w	r3, r8, #1
 800c7bc:	b25b      	sxtb	r3, r3
 800c7be:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800c7c2:	2001      	movs	r0, #1
 800c7c4:	e7e7      	b.n	800c796 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7c8:	b90b      	cbnz	r3, 800c7ce <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	e7e3      	b.n	800c796 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800c7d2:	f000 fea7 	bl	800d524 <xTaskRemoveFromEventList>
 800c7d6:	b118      	cbz	r0, 800c7e0 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800c7d8:	b126      	cbz	r6, 800c7e4 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c7da:	2001      	movs	r0, #1
 800c7dc:	6030      	str	r0, [r6, #0]
 800c7de:	e7da      	b.n	800c796 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800c7e0:	2001      	movs	r0, #1
 800c7e2:	e7d8      	b.n	800c796 <xQueueGenericSendFromISR+0x7c>
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	e7d6      	b.n	800c796 <xQueueGenericSendFromISR+0x7c>

0800c7e8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800c7e8:	b168      	cbz	r0, 800c806 <xQueueGiveFromISR+0x1e>
{
 800c7ea:	b570      	push	{r4, r5, r6, lr}
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c7f2:	b18b      	cbz	r3, 800c818 <xQueueGiveFromISR+0x30>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	e7fe      	b.n	800c804 <xQueueGiveFromISR+0x1c>
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c816:	e7fe      	b.n	800c816 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c818:	6803      	ldr	r3, [r0, #0]
 800c81a:	b1eb      	cbz	r3, 800c858 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c81c:	f7ff fcd8 	bl	800c1d0 <vPortValidateInterruptPriority>
	__asm volatile
 800c820:	f3ef 8611 	mrs	r6, BASEPRI
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c834:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c836:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c838:	4293      	cmp	r3, r2
 800c83a:	d926      	bls.n	800c88a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c83c:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800c840:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c842:	3201      	adds	r2, #1
 800c844:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84a:	d011      	beq.n	800c870 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c84c:	3301      	adds	r3, #1
 800c84e:	b25b      	sxtb	r3, r3
 800c850:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800c854:	2001      	movs	r0, #1
 800c856:	e019      	b.n	800c88c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c858:	6883      	ldr	r3, [r0, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d0de      	beq.n	800c81c <xQueueGiveFromISR+0x34>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	e7fe      	b.n	800c86e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c870:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c872:	b90b      	cbnz	r3, 800c878 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c874:	2001      	movs	r0, #1
 800c876:	e009      	b.n	800c88c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c878:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800c87c:	f000 fe52 	bl	800d524 <xTaskRemoveFromEventList>
 800c880:	b138      	cbz	r0, 800c892 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800c882:	b144      	cbz	r4, 800c896 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c884:	2001      	movs	r0, #1
 800c886:	6020      	str	r0, [r4, #0]
 800c888:	e000      	b.n	800c88c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800c88a:	2000      	movs	r0, #0
	__asm volatile
 800c88c:	f386 8811 	msr	BASEPRI, r6
}
 800c890:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800c892:	2001      	movs	r0, #1
 800c894:	e7fa      	b.n	800c88c <xQueueGiveFromISR+0xa4>
 800c896:	2001      	movs	r0, #1
 800c898:	e7f8      	b.n	800c88c <xQueueGiveFromISR+0xa4>

0800c89a <xQueueReceive>:
{
 800c89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c89c:	b085      	sub	sp, #20
 800c89e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c8a0:	b190      	cbz	r0, 800c8c8 <xQueueReceive+0x2e>
 800c8a2:	460f      	mov	r7, r1
 800c8a4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8a6:	b1c1      	cbz	r1, 800c8da <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8a8:	f000 fed6 	bl	800d658 <xTaskGetSchedulerState>
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	bb00      	cbnz	r0, 800c8f2 <xQueueReceive+0x58>
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d05e      	beq.n	800c974 <xQueueReceive+0xda>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	e7fe      	b.n	800c8c6 <xQueueReceive+0x2c>
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800c8d8:	e7fe      	b.n	800c8d8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d0e3      	beq.n	800c8a8 <xQueueReceive+0xe>
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	e7fe      	b.n	800c8f0 <xQueueReceive+0x56>
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	e03e      	b.n	800c974 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f7ff fcf6 	bl	800c2ea <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8fe:	3d01      	subs	r5, #1
 800c900:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	b923      	cbnz	r3, 800c910 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800c906:	f7ff fb5f 	bl	800bfc8 <vPortExitCritical>
				return pdPASS;
 800c90a:	2001      	movs	r0, #1
}
 800c90c:	b005      	add	sp, #20
 800c90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c910:	f104 0010 	add.w	r0, r4, #16
 800c914:	f000 fe06 	bl	800d524 <xTaskRemoveFromEventList>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d0f4      	beq.n	800c906 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800c91c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c924:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	e7e9      	b.n	800c906 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800c932:	f7ff fb49 	bl	800bfc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c936:	2000      	movs	r0, #0
 800c938:	e7e8      	b.n	800c90c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c93a:	a802      	add	r0, sp, #8
 800c93c:	f000 fe38 	bl	800d5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c940:	2601      	movs	r6, #1
 800c942:	e021      	b.n	800c988 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800c944:	2300      	movs	r3, #0
 800c946:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c94a:	e029      	b.n	800c9a0 <xQueueReceive+0x106>
 800c94c:	2300      	movs	r3, #0
 800c94e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c952:	e02b      	b.n	800c9ac <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800c954:	4620      	mov	r0, r4
 800c956:	f7ff fcda 	bl	800c30e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c95a:	f000 fce3 	bl	800d324 <xTaskResumeAll>
 800c95e:	e009      	b.n	800c974 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800c960:	4620      	mov	r0, r4
 800c962:	f7ff fcd4 	bl	800c30e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c966:	f000 fcdd 	bl	800d324 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff fc75 	bl	800c25a <prvIsQueueEmpty>
 800c970:	2800      	cmp	r0, #0
 800c972:	d13f      	bne.n	800c9f4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800c974:	f7ff fb06 	bl	800bf84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c978:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	d1bb      	bne.n	800c8f6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c97e:	9b01      	ldr	r3, [sp, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d0d6      	beq.n	800c932 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800c984:	2e00      	cmp	r6, #0
 800c986:	d0d8      	beq.n	800c93a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800c988:	f7ff fb1e 	bl	800bfc8 <vPortExitCritical>
		vTaskSuspendAll();
 800c98c:	f000 fc30 	bl	800d1f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c990:	f7ff faf8 	bl	800bf84 <vPortEnterCritical>
 800c994:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c998:	b25b      	sxtb	r3, r3
 800c99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99e:	d0d1      	beq.n	800c944 <xQueueReceive+0xaa>
 800c9a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c9a4:	b25b      	sxtb	r3, r3
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d0cf      	beq.n	800c94c <xQueueReceive+0xb2>
 800c9ac:	f7ff fb0c 	bl	800bfc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9b0:	a901      	add	r1, sp, #4
 800c9b2:	a802      	add	r0, sp, #8
 800c9b4:	f000 fe08 	bl	800d5c8 <xTaskCheckForTimeOut>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d1d1      	bne.n	800c960 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f7ff fc4c 	bl	800c25a <prvIsQueueEmpty>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d0c6      	beq.n	800c954 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9c6:	9901      	ldr	r1, [sp, #4]
 800c9c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c9cc:	f000 fd76 	bl	800d4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f7ff fc9c 	bl	800c30e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9d6:	f000 fca5 	bl	800d324 <xTaskResumeAll>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d1ca      	bne.n	800c974 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800c9de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	e7bf      	b.n	800c974 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	e789      	b.n	800c90c <xQueueReceive+0x72>

0800c9f8 <xQueueSemaphoreTake>:
{
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c9fe:	b158      	cbz	r0, 800ca18 <xQueueSemaphoreTake+0x20>
 800ca00:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ca04:	b18b      	cbz	r3, 800ca2a <xQueueSemaphoreTake+0x32>
 800ca06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	e7fe      	b.n	800ca16 <xQueueSemaphoreTake+0x1e>
 800ca18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800ca28:	e7fe      	b.n	800ca28 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca2a:	f000 fe15 	bl	800d658 <xTaskGetSchedulerState>
 800ca2e:	4605      	mov	r5, r0
 800ca30:	b950      	cbnz	r0, 800ca48 <xQueueSemaphoreTake+0x50>
 800ca32:	9b01      	ldr	r3, [sp, #4]
 800ca34:	b15b      	cbz	r3, 800ca4e <xQueueSemaphoreTake+0x56>
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	e7fe      	b.n	800ca46 <xQueueSemaphoreTake+0x4e>
 800ca48:	2600      	movs	r6, #0
 800ca4a:	4635      	mov	r5, r6
 800ca4c:	e055      	b.n	800cafa <xQueueSemaphoreTake+0x102>
 800ca4e:	4606      	mov	r6, r0
 800ca50:	e053      	b.n	800cafa <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ca52:	3b01      	subs	r3, #1
 800ca54:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	b13b      	cbz	r3, 800ca6a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca5a:	6923      	ldr	r3, [r4, #16]
 800ca5c:	b94b      	cbnz	r3, 800ca72 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800ca5e:	f7ff fab3 	bl	800bfc8 <vPortExitCritical>
				return pdPASS;
 800ca62:	2601      	movs	r6, #1
}
 800ca64:	4630      	mov	r0, r6
 800ca66:	b004      	add	sp, #16
 800ca68:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca6a:	f000 fee9 	bl	800d840 <pvTaskIncrementMutexHeldCount>
 800ca6e:	60a0      	str	r0, [r4, #8]
 800ca70:	e7f3      	b.n	800ca5a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca72:	f104 0010 	add.w	r0, r4, #16
 800ca76:	f000 fd55 	bl	800d524 <xTaskRemoveFromEventList>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d0ef      	beq.n	800ca5e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800ca7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ca82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca86:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	e7e4      	b.n	800ca5e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ca94:	b146      	cbz	r6, 800caa8 <xQueueSemaphoreTake+0xb0>
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	e7fe      	b.n	800caa6 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800caa8:	f7ff fa8e 	bl	800bfc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800caac:	e7da      	b.n	800ca64 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caae:	a802      	add	r0, sp, #8
 800cab0:	f000 fd7e 	bl	800d5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cab4:	2501      	movs	r5, #1
 800cab6:	e02a      	b.n	800cb0e <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800cab8:	2300      	movs	r3, #0
 800caba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cabe:	e032      	b.n	800cb26 <xQueueSemaphoreTake+0x12e>
 800cac0:	2300      	movs	r3, #0
 800cac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cac6:	e034      	b.n	800cb32 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800cac8:	f7ff fa5c 	bl	800bf84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cacc:	68a0      	ldr	r0, [r4, #8]
 800cace:	f000 fdd3 	bl	800d678 <xTaskPriorityInherit>
 800cad2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800cad4:	f7ff fa78 	bl	800bfc8 <vPortExitCritical>
 800cad8:	e03b      	b.n	800cb52 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff fc17 	bl	800c30e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cae0:	f000 fc20 	bl	800d324 <xTaskResumeAll>
 800cae4:	e009      	b.n	800cafa <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7ff fc11 	bl	800c30e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800caec:	f000 fc1a 	bl	800d324 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caf0:	4620      	mov	r0, r4
 800caf2:	f7ff fbb2 	bl	800c25a <prvIsQueueEmpty>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d142      	bne.n	800cb80 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800cafa:	f7ff fa43 	bl	800bf84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cafe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1a6      	bne.n	800ca52 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb04:	9b01      	ldr	r3, [sp, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0c4      	beq.n	800ca94 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800cb0a:	2d00      	cmp	r5, #0
 800cb0c:	d0cf      	beq.n	800caae <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800cb0e:	f7ff fa5b 	bl	800bfc8 <vPortExitCritical>
		vTaskSuspendAll();
 800cb12:	f000 fb6d 	bl	800d1f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb16:	f7ff fa35 	bl	800bf84 <vPortEnterCritical>
 800cb1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cb1e:	b25b      	sxtb	r3, r3
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb24:	d0c8      	beq.n	800cab8 <xQueueSemaphoreTake+0xc0>
 800cb26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cb2a:	b25b      	sxtb	r3, r3
 800cb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb30:	d0c6      	beq.n	800cac0 <xQueueSemaphoreTake+0xc8>
 800cb32:	f7ff fa49 	bl	800bfc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb36:	a901      	add	r1, sp, #4
 800cb38:	a802      	add	r0, sp, #8
 800cb3a:	f000 fd45 	bl	800d5c8 <xTaskCheckForTimeOut>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d1d1      	bne.n	800cae6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb42:	4620      	mov	r0, r4
 800cb44:	f7ff fb89 	bl	800c25a <prvIsQueueEmpty>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d0c6      	beq.n	800cada <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb4c:	6823      	ldr	r3, [r4, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d0ba      	beq.n	800cac8 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb52:	9901      	ldr	r1, [sp, #4]
 800cb54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cb58:	f000 fcb0 	bl	800d4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7ff fbd6 	bl	800c30e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb62:	f000 fbdf 	bl	800d324 <xTaskResumeAll>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d1c7      	bne.n	800cafa <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800cb6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	e7bc      	b.n	800cafa <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800cb80:	b90e      	cbnz	r6, 800cb86 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800cb82:	2600      	movs	r6, #0
 800cb84:	e76e      	b.n	800ca64 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800cb86:	f7ff f9fd 	bl	800bf84 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7ff fb4e 	bl	800c22c <prvGetDisinheritPriorityAfterTimeout>
 800cb90:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb92:	68a0      	ldr	r0, [r4, #8]
 800cb94:	f000 fe04 	bl	800d7a0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800cb98:	f7ff fa16 	bl	800bfc8 <vPortExitCritical>
 800cb9c:	e7f1      	b.n	800cb82 <xQueueSemaphoreTake+0x18a>

0800cb9e <xQueueReceiveFromISR>:
{
 800cb9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cba2:	b1b0      	cbz	r0, 800cbd2 <xQueueReceiveFromISR+0x34>
 800cba4:	460d      	mov	r5, r1
 800cba6:	4616      	mov	r6, r2
 800cba8:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbaa:	b1d9      	cbz	r1, 800cbe4 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbac:	f7ff fb10 	bl	800c1d0 <vPortValidateInterruptPriority>
	__asm volatile
 800cbb0:	f3ef 8811 	mrs	r8, BASEPRI
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbc4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbc6:	b9cf      	cbnz	r7, 800cbfc <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800cbc8:	2000      	movs	r0, #0
	__asm volatile
 800cbca:	f388 8811 	msr	BASEPRI, r8
}
 800cbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cbe2:	e7fe      	b.n	800cbe2 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbe4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d0e0      	beq.n	800cbac <xQueueReceiveFromISR+0xe>
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	e7fe      	b.n	800cbfa <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800cbfc:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800cc00:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc04:	4629      	mov	r1, r5
 800cc06:	4620      	mov	r0, r4
 800cc08:	f7ff fb6f 	bl	800c2ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc0c:	3f01      	subs	r7, #1
 800cc0e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800cc10:	f1b9 3fff 	cmp.w	r9, #4294967295
 800cc14:	d006      	beq.n	800cc24 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cc16:	f109 0301 	add.w	r3, r9, #1
 800cc1a:	b25b      	sxtb	r3, r3
 800cc1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800cc20:	2001      	movs	r0, #1
 800cc22:	e7d2      	b.n	800cbca <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc24:	6923      	ldr	r3, [r4, #16]
 800cc26:	b90b      	cbnz	r3, 800cc2c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800cc28:	2001      	movs	r0, #1
 800cc2a:	e7ce      	b.n	800cbca <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc2c:	f104 0010 	add.w	r0, r4, #16
 800cc30:	f000 fc78 	bl	800d524 <xTaskRemoveFromEventList>
 800cc34:	b118      	cbz	r0, 800cc3e <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800cc36:	b126      	cbz	r6, 800cc42 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cc38:	2001      	movs	r0, #1
 800cc3a:	6030      	str	r0, [r6, #0]
 800cc3c:	e7c5      	b.n	800cbca <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800cc3e:	2001      	movs	r0, #1
 800cc40:	e7c3      	b.n	800cbca <xQueueReceiveFromISR+0x2c>
 800cc42:	2001      	movs	r0, #1
 800cc44:	e7c1      	b.n	800cbca <xQueueReceiveFromISR+0x2c>
	...

0800cc48 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc48:	2300      	movs	r3, #0
 800cc4a:	2b07      	cmp	r3, #7
 800cc4c:	d80c      	bhi.n	800cc68 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc4e:	4a07      	ldr	r2, [pc, #28]	; (800cc6c <vQueueAddToRegistry+0x24>)
 800cc50:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cc54:	b10a      	cbz	r2, 800cc5a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc56:	3301      	adds	r3, #1
 800cc58:	e7f7      	b.n	800cc4a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc5a:	4a04      	ldr	r2, [pc, #16]	; (800cc6c <vQueueAddToRegistry+0x24>)
 800cc5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc64:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc66:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	2400b264 	.word	0x2400b264

0800cc70 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc70:	2300      	movs	r3, #0
 800cc72:	2b07      	cmp	r3, #7
 800cc74:	d80f      	bhi.n	800cc96 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc76:	4a08      	ldr	r2, [pc, #32]	; (800cc98 <vQueueUnregisterQueue+0x28>)
 800cc78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cc7c:	6852      	ldr	r2, [r2, #4]
 800cc7e:	4282      	cmp	r2, r0
 800cc80:	d001      	beq.n	800cc86 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc82:	3301      	adds	r3, #1
 800cc84:	e7f5      	b.n	800cc72 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc86:	4a04      	ldr	r2, [pc, #16]	; (800cc98 <vQueueUnregisterQueue+0x28>)
 800cc88:	2100      	movs	r1, #0
 800cc8a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc92:	6059      	str	r1, [r3, #4]
				break;
 800cc94:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc96:	4770      	bx	lr
 800cc98:	2400b264 	.word	0x2400b264

0800cc9c <vQueueDelete>:
	configASSERT( pxQueue );
 800cc9c:	b138      	cbz	r0, 800ccae <vQueueDelete+0x12>
{
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800cca2:	f7ff ffe5 	bl	800cc70 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cca6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ccaa:	b14b      	cbz	r3, 800ccc0 <vQueueDelete+0x24>
}
 800ccac:	bd10      	pop	{r4, pc}
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ccbe:	e7fe      	b.n	800ccbe <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f7ff f871 	bl	800bda8 <vPortFree>
}
 800ccc6:	e7f1      	b.n	800ccac <vQueueDelete+0x10>

0800ccc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	4604      	mov	r4, r0
 800cccc:	460d      	mov	r5, r1
 800ccce:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ccd0:	f7ff f958 	bl	800bf84 <vPortEnterCritical>
 800ccd4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ccd8:	b25b      	sxtb	r3, r3
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d00d      	beq.n	800ccfc <vQueueWaitForMessageRestricted+0x34>
 800cce0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cce4:	b25b      	sxtb	r3, r3
 800cce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccea:	d00b      	beq.n	800cd04 <vQueueWaitForMessageRestricted+0x3c>
 800ccec:	f7ff f96c 	bl	800bfc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccf2:	b15b      	cbz	r3, 800cd0c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f7ff fb0a 	bl	800c30e <prvUnlockQueue>
	}
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cd02:	e7ed      	b.n	800cce0 <vQueueWaitForMessageRestricted+0x18>
 800cd04:	2300      	movs	r3, #0
 800cd06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd0a:	e7ef      	b.n	800ccec <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	4629      	mov	r1, r5
 800cd10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cd14:	f000 fbea 	bl	800d4ec <vTaskPlaceOnEventListRestricted>
 800cd18:	e7ec      	b.n	800ccf4 <vQueueWaitForMessageRestricted+0x2c>
	...

0800cd1c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd1c:	4b08      	ldr	r3, [pc, #32]	; (800cd40 <prvResetNextTaskUnblockTime+0x24>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	b923      	cbnz	r3, 800cd2e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd24:	4b07      	ldr	r3, [pc, #28]	; (800cd44 <prvResetNextTaskUnblockTime+0x28>)
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd2e:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <prvResetNextTaskUnblockTime+0x24>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd36:	685a      	ldr	r2, [r3, #4]
 800cd38:	4b02      	ldr	r3, [pc, #8]	; (800cd44 <prvResetNextTaskUnblockTime+0x28>)
 800cd3a:	601a      	str	r2, [r3, #0]
	}
}
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	2400b2a8 	.word	0x2400b2a8
 800cd44:	2400b750 	.word	0x2400b750

0800cd48 <prvInitialiseNewTask>:
{
 800cd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd4c:	4680      	mov	r8, r0
 800cd4e:	460d      	mov	r5, r1
 800cd50:	4617      	mov	r7, r2
 800cd52:	4699      	mov	r9, r3
 800cd54:	9e08      	ldr	r6, [sp, #32]
 800cd56:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800cd5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd5c:	0092      	lsls	r2, r2, #2
 800cd5e:	21a5      	movs	r1, #165	; 0xa5
 800cd60:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cd62:	f00f fc8b 	bl	801c67c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cd68:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800cd6c:	443a      	add	r2, r7
 800cd6e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd72:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800cd76:	2d00      	cmp	r5, #0
 800cd78:	d043      	beq.n	800ce02 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd7a:	f04f 0c00 	mov.w	ip, #0
 800cd7e:	f1bc 0f0f 	cmp.w	ip, #15
 800cd82:	d80b      	bhi.n	800cd9c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd84:	f815 200c 	ldrb.w	r2, [r5, ip]
 800cd88:	eb04 030c 	add.w	r3, r4, ip
 800cd8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800cd90:	f815 300c 	ldrb.w	r3, [r5, ip]
 800cd94:	b113      	cbz	r3, 800cd9c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd96:	f10c 0c01 	add.w	ip, ip, #1
 800cd9a:	e7f0      	b.n	800cd7e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cda2:	2e37      	cmp	r6, #55	; 0x37
 800cda4:	d900      	bls.n	800cda8 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cda6:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800cda8:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800cdaa:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cdac:	2500      	movs	r5, #0
 800cdae:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdb0:	1d20      	adds	r0, r4, #4
 800cdb2:	f7ff f842 	bl	800be3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdb6:	f104 0018 	add.w	r0, r4, #24
 800cdba:	f7ff f83e 	bl	800be3a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdbe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdc0:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800cdc4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdc6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800cdc8:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdcc:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cdd0:	2260      	movs	r2, #96	; 0x60
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800cdd8:	f00f fc50 	bl	801c67c <memset>
 800cddc:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <prvInitialiseNewTask+0xc4>)
 800cdde:	65a3      	str	r3, [r4, #88]	; 0x58
 800cde0:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <prvInitialiseNewTask+0xc8>)
 800cde2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800cde4:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <prvInitialiseNewTask+0xcc>)
 800cde6:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cde8:	464a      	mov	r2, r9
 800cdea:	4641      	mov	r1, r8
 800cdec:	4638      	mov	r0, r7
 800cdee:	f7ff f89d 	bl	800bf2c <pxPortInitialiseStack>
 800cdf2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800cdf4:	f1ba 0f00 	cmp.w	sl, #0
 800cdf8:	d001      	beq.n	800cdfe <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdfa:	f8ca 4000 	str.w	r4, [sl]
}
 800cdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce02:	2300      	movs	r3, #0
 800ce04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ce08:	e7cb      	b.n	800cda2 <prvInitialiseNewTask+0x5a>
 800ce0a:	bf00      	nop
 800ce0c:	0801f5c4 	.word	0x0801f5c4
 800ce10:	0801f5e4 	.word	0x0801f5e4
 800ce14:	0801f5a4 	.word	0x0801f5a4

0800ce18 <prvInitialiseTaskLists>:
{
 800ce18:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce1a:	2400      	movs	r4, #0
 800ce1c:	e007      	b.n	800ce2e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce1e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800ce22:	0093      	lsls	r3, r2, #2
 800ce24:	480e      	ldr	r0, [pc, #56]	; (800ce60 <prvInitialiseTaskLists+0x48>)
 800ce26:	4418      	add	r0, r3
 800ce28:	f7fe fffc 	bl	800be24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce2c:	3401      	adds	r4, #1
 800ce2e:	2c37      	cmp	r4, #55	; 0x37
 800ce30:	d9f5      	bls.n	800ce1e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800ce32:	4d0c      	ldr	r5, [pc, #48]	; (800ce64 <prvInitialiseTaskLists+0x4c>)
 800ce34:	4628      	mov	r0, r5
 800ce36:	f7fe fff5 	bl	800be24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce3a:	4c0b      	ldr	r4, [pc, #44]	; (800ce68 <prvInitialiseTaskLists+0x50>)
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f7fe fff1 	bl	800be24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce42:	480a      	ldr	r0, [pc, #40]	; (800ce6c <prvInitialiseTaskLists+0x54>)
 800ce44:	f7fe ffee 	bl	800be24 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ce48:	4809      	ldr	r0, [pc, #36]	; (800ce70 <prvInitialiseTaskLists+0x58>)
 800ce4a:	f7fe ffeb 	bl	800be24 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ce4e:	4809      	ldr	r0, [pc, #36]	; (800ce74 <prvInitialiseTaskLists+0x5c>)
 800ce50:	f7fe ffe8 	bl	800be24 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce54:	4b08      	ldr	r3, [pc, #32]	; (800ce78 <prvInitialiseTaskLists+0x60>)
 800ce56:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce58:	4b08      	ldr	r3, [pc, #32]	; (800ce7c <prvInitialiseTaskLists+0x64>)
 800ce5a:	601c      	str	r4, [r3, #0]
}
 800ce5c:	bd38      	pop	{r3, r4, r5, pc}
 800ce5e:	bf00      	nop
 800ce60:	2400b2b0 	.word	0x2400b2b0
 800ce64:	2400b724 	.word	0x2400b724
 800ce68:	2400b738 	.word	0x2400b738
 800ce6c:	2400b75c 	.word	0x2400b75c
 800ce70:	2400b788 	.word	0x2400b788
 800ce74:	2400b774 	.word	0x2400b774
 800ce78:	2400b2a8 	.word	0x2400b2a8
 800ce7c:	2400b2ac 	.word	0x2400b2ac

0800ce80 <prvAddNewTaskToReadyList>:
{
 800ce80:	b510      	push	{r4, lr}
 800ce82:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ce84:	f7ff f87e 	bl	800bf84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800ce88:	4a22      	ldr	r2, [pc, #136]	; (800cf14 <prvAddNewTaskToReadyList+0x94>)
 800ce8a:	6813      	ldr	r3, [r2, #0]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce90:	4b21      	ldr	r3, [pc, #132]	; (800cf18 <prvAddNewTaskToReadyList+0x98>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	b15b      	cbz	r3, 800ceae <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800ce96:	4b21      	ldr	r3, [pc, #132]	; (800cf1c <prvAddNewTaskToReadyList+0x9c>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	b96b      	cbnz	r3, 800ceb8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce9c:	4b1e      	ldr	r3, [pc, #120]	; (800cf18 <prvAddNewTaskToReadyList+0x98>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d807      	bhi.n	800ceb8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800cea8:	4b1b      	ldr	r3, [pc, #108]	; (800cf18 <prvAddNewTaskToReadyList+0x98>)
 800ceaa:	601c      	str	r4, [r3, #0]
 800ceac:	e004      	b.n	800ceb8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800ceae:	4b1a      	ldr	r3, [pc, #104]	; (800cf18 <prvAddNewTaskToReadyList+0x98>)
 800ceb0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ceb2:	6813      	ldr	r3, [r2, #0]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d029      	beq.n	800cf0c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800ceb8:	4a19      	ldr	r2, [pc, #100]	; (800cf20 <prvAddNewTaskToReadyList+0xa0>)
 800ceba:	6813      	ldr	r3, [r2, #0]
 800cebc:	3301      	adds	r3, #1
 800cebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cec0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800cec2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cec4:	4b17      	ldr	r3, [pc, #92]	; (800cf24 <prvAddNewTaskToReadyList+0xa4>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4298      	cmp	r0, r3
 800ceca:	d901      	bls.n	800ced0 <prvAddNewTaskToReadyList+0x50>
 800cecc:	4b15      	ldr	r3, [pc, #84]	; (800cf24 <prvAddNewTaskToReadyList+0xa4>)
 800cece:	6018      	str	r0, [r3, #0]
 800ced0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ced4:	1d21      	adds	r1, r4, #4
 800ced6:	4b14      	ldr	r3, [pc, #80]	; (800cf28 <prvAddNewTaskToReadyList+0xa8>)
 800ced8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cedc:	f7fe ffb0 	bl	800be40 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cee0:	f7ff f872 	bl	800bfc8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cee4:	4b0d      	ldr	r3, [pc, #52]	; (800cf1c <prvAddNewTaskToReadyList+0x9c>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	b17b      	cbz	r3, 800cf0a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ceea:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <prvAddNewTaskToReadyList+0x98>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d209      	bcs.n	800cf0a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800cef6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cefe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	f3bf 8f6f 	isb	sy
}
 800cf0a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800cf0c:	f7ff ff84 	bl	800ce18 <prvInitialiseTaskLists>
 800cf10:	e7d2      	b.n	800ceb8 <prvAddNewTaskToReadyList+0x38>
 800cf12:	bf00      	nop
 800cf14:	2400b710 	.word	0x2400b710
 800cf18:	2400b2a4 	.word	0x2400b2a4
 800cf1c:	2400b770 	.word	0x2400b770
 800cf20:	2400b71c 	.word	0x2400b71c
 800cf24:	2400b720 	.word	0x2400b720
 800cf28:	2400b2b0 	.word	0x2400b2b0

0800cf2c <prvDeleteTCB>:
	{
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf30:	3054      	adds	r0, #84	; 0x54
 800cf32:	f00f ff87 	bl	801ce44 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf36:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800cf3a:	b163      	cbz	r3, 800cf56 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d011      	beq.n	800cf64 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d00e      	beq.n	800cf62 <prvDeleteTCB+0x36>
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	e7fe      	b.n	800cf54 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800cf56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cf58:	f7fe ff26 	bl	800bda8 <vPortFree>
				vPortFree( pxTCB );
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f7fe ff23 	bl	800bda8 <vPortFree>
	}
 800cf62:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800cf64:	4620      	mov	r0, r4
 800cf66:	f7fe ff1f 	bl	800bda8 <vPortFree>
 800cf6a:	e7fa      	b.n	800cf62 <prvDeleteTCB+0x36>

0800cf6c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf6c:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <prvCheckTasksWaitingTermination+0x40>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	b1d3      	cbz	r3, 800cfa8 <prvCheckTasksWaitingTermination+0x3c>
{
 800cf72:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800cf74:	f7ff f806 	bl	800bf84 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf78:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <prvCheckTasksWaitingTermination+0x44>)
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf7e:	1d20      	adds	r0, r4, #4
 800cf80:	f7fe ff82 	bl	800be88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf84:	4a0b      	ldr	r2, [pc, #44]	; (800cfb4 <prvCheckTasksWaitingTermination+0x48>)
 800cf86:	6813      	ldr	r3, [r2, #0]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf8c:	4a07      	ldr	r2, [pc, #28]	; (800cfac <prvCheckTasksWaitingTermination+0x40>)
 800cf8e:	6813      	ldr	r3, [r2, #0]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800cf94:	f7ff f818 	bl	800bfc8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f7ff ffc7 	bl	800cf2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf9e:	4b03      	ldr	r3, [pc, #12]	; (800cfac <prvCheckTasksWaitingTermination+0x40>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1e6      	bne.n	800cf74 <prvCheckTasksWaitingTermination+0x8>
}
 800cfa6:	bd10      	pop	{r4, pc}
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	2400b714 	.word	0x2400b714
 800cfb0:	2400b788 	.word	0x2400b788
 800cfb4:	2400b710 	.word	0x2400b710

0800cfb8 <prvIdleTask>:
{
 800cfb8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800cfba:	f7ff ffd7 	bl	800cf6c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfbe:	4b07      	ldr	r3, [pc, #28]	; (800cfdc <prvIdleTask+0x24>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d9f9      	bls.n	800cfba <prvIdleTask+0x2>
				taskYIELD();
 800cfc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	e7ee      	b.n	800cfba <prvIdleTask+0x2>
 800cfdc:	2400b2b0 	.word	0x2400b2b0

0800cfe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cfe6:	4b19      	ldr	r3, [pc, #100]	; (800d04c <prvAddCurrentTaskToDelayedList+0x6c>)
 800cfe8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfea:	4b19      	ldr	r3, [pc, #100]	; (800d050 <prvAddCurrentTaskToDelayedList+0x70>)
 800cfec:	6818      	ldr	r0, [r3, #0]
 800cfee:	3004      	adds	r0, #4
 800cff0:	f7fe ff4a 	bl	800be88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cff4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cff8:	bf14      	ite	ne
 800cffa:	2300      	movne	r3, #0
 800cffc:	2301      	moveq	r3, #1
 800cffe:	2d00      	cmp	r5, #0
 800d000:	bf08      	it	eq
 800d002:	2300      	moveq	r3, #0
 800d004:	b96b      	cbnz	r3, 800d022 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d006:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d008:	4b11      	ldr	r3, [pc, #68]	; (800d050 <prvAddCurrentTaskToDelayedList+0x70>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d00e:	42a6      	cmp	r6, r4
 800d010:	d90e      	bls.n	800d030 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d012:	4b10      	ldr	r3, [pc, #64]	; (800d054 <prvAddCurrentTaskToDelayedList+0x74>)
 800d014:	6818      	ldr	r0, [r3, #0]
 800d016:	4b0e      	ldr	r3, [pc, #56]	; (800d050 <prvAddCurrentTaskToDelayedList+0x70>)
 800d018:	6819      	ldr	r1, [r3, #0]
 800d01a:	3104      	adds	r1, #4
 800d01c:	f7fe ff1b 	bl	800be56 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d020:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d022:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <prvAddCurrentTaskToDelayedList+0x70>)
 800d024:	6819      	ldr	r1, [r3, #0]
 800d026:	3104      	adds	r1, #4
 800d028:	480b      	ldr	r0, [pc, #44]	; (800d058 <prvAddCurrentTaskToDelayedList+0x78>)
 800d02a:	f7fe ff09 	bl	800be40 <vListInsertEnd>
 800d02e:	e7f7      	b.n	800d020 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d030:	4b0a      	ldr	r3, [pc, #40]	; (800d05c <prvAddCurrentTaskToDelayedList+0x7c>)
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	4b06      	ldr	r3, [pc, #24]	; (800d050 <prvAddCurrentTaskToDelayedList+0x70>)
 800d036:	6819      	ldr	r1, [r3, #0]
 800d038:	3104      	adds	r1, #4
 800d03a:	f7fe ff0c 	bl	800be56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d03e:	4b08      	ldr	r3, [pc, #32]	; (800d060 <prvAddCurrentTaskToDelayedList+0x80>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	42a3      	cmp	r3, r4
 800d044:	d9ec      	bls.n	800d020 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800d046:	4b06      	ldr	r3, [pc, #24]	; (800d060 <prvAddCurrentTaskToDelayedList+0x80>)
 800d048:	601c      	str	r4, [r3, #0]
}
 800d04a:	e7e9      	b.n	800d020 <prvAddCurrentTaskToDelayedList+0x40>
 800d04c:	2400b79c 	.word	0x2400b79c
 800d050:	2400b2a4 	.word	0x2400b2a4
 800d054:	2400b2ac 	.word	0x2400b2ac
 800d058:	2400b774 	.word	0x2400b774
 800d05c:	2400b2a8 	.word	0x2400b2a8
 800d060:	2400b750 	.word	0x2400b750

0800d064 <xTaskCreateStatic>:
	{
 800d064:	b530      	push	{r4, r5, lr}
 800d066:	b087      	sub	sp, #28
 800d068:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d06a:	b17c      	cbz	r4, 800d08c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d06c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d06e:	b1b5      	cbz	r5, 800d09e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d070:	25bc      	movs	r5, #188	; 0xbc
 800d072:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d074:	9d04      	ldr	r5, [sp, #16]
 800d076:	2dbc      	cmp	r5, #188	; 0xbc
 800d078:	d01a      	beq.n	800d0b0 <xTaskCreateStatic+0x4c>
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	e7fe      	b.n	800d08a <xTaskCreateStatic+0x26>
 800d08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d090:	f383 8811 	msr	BASEPRI, r3
 800d094:	f3bf 8f6f 	isb	sy
 800d098:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d09c:	e7fe      	b.n	800d09c <xTaskCreateStatic+0x38>
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d0ae:	e7fe      	b.n	800d0ae <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0b0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0b4:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0b6:	2402      	movs	r4, #2
 800d0b8:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0bc:	2400      	movs	r4, #0
 800d0be:	9403      	str	r4, [sp, #12]
 800d0c0:	9502      	str	r5, [sp, #8]
 800d0c2:	ac05      	add	r4, sp, #20
 800d0c4:	9401      	str	r4, [sp, #4]
 800d0c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d0c8:	9400      	str	r4, [sp, #0]
 800d0ca:	f7ff fe3d 	bl	800cd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d0d0:	f7ff fed6 	bl	800ce80 <prvAddNewTaskToReadyList>
	}
 800d0d4:	9805      	ldr	r0, [sp, #20]
 800d0d6:	b007      	add	sp, #28
 800d0d8:	bd30      	pop	{r4, r5, pc}

0800d0da <xTaskCreate>:
	{
 800d0da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	4688      	mov	r8, r1
 800d0e4:	4614      	mov	r4, r2
 800d0e6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0e8:	0090      	lsls	r0, r2, #2
 800d0ea:	f7fe fddf 	bl	800bcac <pvPortMalloc>
			if( pxStack != NULL )
 800d0ee:	b300      	cbz	r0, 800d132 <xTaskCreate+0x58>
 800d0f0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0f2:	20bc      	movs	r0, #188	; 0xbc
 800d0f4:	f7fe fdda 	bl	800bcac <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	b1b0      	cbz	r0, 800d12a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800d0fc:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800d100:	b1e5      	cbz	r5, 800d13c <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d102:	2300      	movs	r3, #0
 800d104:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d108:	9303      	str	r3, [sp, #12]
 800d10a:	9502      	str	r5, [sp, #8]
 800d10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d10e:	9301      	str	r3, [sp, #4]
 800d110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	4633      	mov	r3, r6
 800d116:	4622      	mov	r2, r4
 800d118:	4641      	mov	r1, r8
 800d11a:	4638      	mov	r0, r7
 800d11c:	f7ff fe14 	bl	800cd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d120:	4628      	mov	r0, r5
 800d122:	f7ff fead 	bl	800ce80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d126:	2001      	movs	r0, #1
 800d128:	e005      	b.n	800d136 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800d12a:	4648      	mov	r0, r9
 800d12c:	f7fe fe3c 	bl	800bda8 <vPortFree>
 800d130:	e7e6      	b.n	800d100 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d132:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d136:	b005      	add	sp, #20
 800d138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800d140:	e7f9      	b.n	800d136 <xTaskCreate+0x5c>
	...

0800d144 <vTaskStartScheduler>:
{
 800d144:	b510      	push	{r4, lr}
 800d146:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d148:	2400      	movs	r4, #0
 800d14a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d14c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d14e:	aa07      	add	r2, sp, #28
 800d150:	a906      	add	r1, sp, #24
 800d152:	a805      	add	r0, sp, #20
 800d154:	f7fe fd2e 	bl	800bbb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d158:	9b05      	ldr	r3, [sp, #20]
 800d15a:	9302      	str	r3, [sp, #8]
 800d15c:	9b06      	ldr	r3, [sp, #24]
 800d15e:	9301      	str	r3, [sp, #4]
 800d160:	9400      	str	r4, [sp, #0]
 800d162:	4623      	mov	r3, r4
 800d164:	9a07      	ldr	r2, [sp, #28]
 800d166:	491a      	ldr	r1, [pc, #104]	; (800d1d0 <vTaskStartScheduler+0x8c>)
 800d168:	481a      	ldr	r0, [pc, #104]	; (800d1d4 <vTaskStartScheduler+0x90>)
 800d16a:	f7ff ff7b 	bl	800d064 <xTaskCreateStatic>
 800d16e:	4b1a      	ldr	r3, [pc, #104]	; (800d1d8 <vTaskStartScheduler+0x94>)
 800d170:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d172:	b140      	cbz	r0, 800d186 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800d174:	f000 fbe2 	bl	800d93c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d178:	2801      	cmp	r0, #1
 800d17a:	d006      	beq.n	800d18a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d17c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d180:	d01d      	beq.n	800d1be <vTaskStartScheduler+0x7a>
}
 800d182:	b008      	add	sp, #32
 800d184:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800d186:	2000      	movs	r0, #0
 800d188:	e7f6      	b.n	800d178 <vTaskStartScheduler+0x34>
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d19a:	4b10      	ldr	r3, [pc, #64]	; (800d1dc <vTaskStartScheduler+0x98>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	3354      	adds	r3, #84	; 0x54
 800d1a0:	4a0f      	ldr	r2, [pc, #60]	; (800d1e0 <vTaskStartScheduler+0x9c>)
 800d1a2:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1a4:	4b0f      	ldr	r3, [pc, #60]	; (800d1e4 <vTaskStartScheduler+0xa0>)
 800d1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <vTaskStartScheduler+0xa4>)
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	; (800d1ec <vTaskStartScheduler+0xa8>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d1b8:	f7fe ff7e 	bl	800c0b8 <xPortStartScheduler>
 800d1bc:	e7e1      	b.n	800d182 <vTaskStartScheduler+0x3e>
 800d1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1ce:	e7fe      	b.n	800d1ce <vTaskStartScheduler+0x8a>
 800d1d0:	0801ed94 	.word	0x0801ed94
 800d1d4:	0800cfb9 	.word	0x0800cfb9
 800d1d8:	2400b74c 	.word	0x2400b74c
 800d1dc:	2400b2a4 	.word	0x2400b2a4
 800d1e0:	240000ac 	.word	0x240000ac
 800d1e4:	2400b750 	.word	0x2400b750
 800d1e8:	2400b770 	.word	0x2400b770
 800d1ec:	2400b79c 	.word	0x2400b79c

0800d1f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d1f0:	4a02      	ldr	r2, [pc, #8]	; (800d1fc <vTaskSuspendAll+0xc>)
 800d1f2:	6813      	ldr	r3, [r2, #0]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	6013      	str	r3, [r2, #0]
}
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2400b718 	.word	0x2400b718

0800d200 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d200:	4b01      	ldr	r3, [pc, #4]	; (800d208 <xTaskGetTickCount+0x8>)
 800d202:	6818      	ldr	r0, [r3, #0]
}
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	2400b79c 	.word	0x2400b79c

0800d20c <xTaskIncrementTick>:
{
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d20e:	4b3a      	ldr	r3, [pc, #232]	; (800d2f8 <xTaskIncrementTick+0xec>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d169      	bne.n	800d2ea <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d216:	4b39      	ldr	r3, [pc, #228]	; (800d2fc <xTaskIncrementTick+0xf0>)
 800d218:	681d      	ldr	r5, [r3, #0]
 800d21a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d21c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d21e:	b9c5      	cbnz	r5, 800d252 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d220:	4b37      	ldr	r3, [pc, #220]	; (800d300 <xTaskIncrementTick+0xf4>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	b143      	cbz	r3, 800d23a <xTaskIncrementTick+0x2e>
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	e7fe      	b.n	800d238 <xTaskIncrementTick+0x2c>
 800d23a:	4a31      	ldr	r2, [pc, #196]	; (800d300 <xTaskIncrementTick+0xf4>)
 800d23c:	6811      	ldr	r1, [r2, #0]
 800d23e:	4b31      	ldr	r3, [pc, #196]	; (800d304 <xTaskIncrementTick+0xf8>)
 800d240:	6818      	ldr	r0, [r3, #0]
 800d242:	6010      	str	r0, [r2, #0]
 800d244:	6019      	str	r1, [r3, #0]
 800d246:	4a30      	ldr	r2, [pc, #192]	; (800d308 <xTaskIncrementTick+0xfc>)
 800d248:	6813      	ldr	r3, [r2, #0]
 800d24a:	3301      	adds	r3, #1
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	f7ff fd65 	bl	800cd1c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d252:	4b2e      	ldr	r3, [pc, #184]	; (800d30c <xTaskIncrementTick+0x100>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	42ab      	cmp	r3, r5
 800d258:	d93d      	bls.n	800d2d6 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800d25a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d25c:	4b2c      	ldr	r3, [pc, #176]	; (800d310 <xTaskIncrementTick+0x104>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d262:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d266:	009a      	lsls	r2, r3, #2
 800d268:	4b2a      	ldr	r3, [pc, #168]	; (800d314 <xTaskIncrementTick+0x108>)
 800d26a:	589b      	ldr	r3, [r3, r2]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d900      	bls.n	800d272 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800d270:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800d272:	4b29      	ldr	r3, [pc, #164]	; (800d318 <xTaskIncrementTick+0x10c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d03c      	beq.n	800d2f4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d27a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800d27c:	e03a      	b.n	800d2f4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800d27e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d280:	4b1f      	ldr	r3, [pc, #124]	; (800d300 <xTaskIncrementTick+0xf4>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	b343      	cbz	r3, 800d2da <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d288:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <xTaskIncrementTick+0xf4>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d290:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800d292:	429d      	cmp	r5, r3
 800d294:	d326      	bcc.n	800d2e4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d296:	1d26      	adds	r6, r4, #4
 800d298:	4630      	mov	r0, r6
 800d29a:	f7fe fdf5 	bl	800be88 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d29e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d2a0:	b11b      	cbz	r3, 800d2aa <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2a2:	f104 0018 	add.w	r0, r4, #24
 800d2a6:	f7fe fdef 	bl	800be88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d2ac:	4a1b      	ldr	r2, [pc, #108]	; (800d31c <xTaskIncrementTick+0x110>)
 800d2ae:	6812      	ldr	r2, [r2, #0]
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d901      	bls.n	800d2b8 <xTaskIncrementTick+0xac>
 800d2b4:	4a19      	ldr	r2, [pc, #100]	; (800d31c <xTaskIncrementTick+0x110>)
 800d2b6:	6013      	str	r3, [r2, #0]
 800d2b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d2bc:	009a      	lsls	r2, r3, #2
 800d2be:	4631      	mov	r1, r6
 800d2c0:	4814      	ldr	r0, [pc, #80]	; (800d314 <xTaskIncrementTick+0x108>)
 800d2c2:	4410      	add	r0, r2
 800d2c4:	f7fe fdbc 	bl	800be40 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d2ca:	4b11      	ldr	r3, [pc, #68]	; (800d310 <xTaskIncrementTick+0x104>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d2d4      	bcs.n	800d27e <xTaskIncrementTick+0x72>
 800d2d4:	e7d4      	b.n	800d280 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800d2d6:	2700      	movs	r7, #0
 800d2d8:	e7d2      	b.n	800d280 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2da:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <xTaskIncrementTick+0x100>)
 800d2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e0:	601a      	str	r2, [r3, #0]
					break;
 800d2e2:	e7bb      	b.n	800d25c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800d2e4:	4a09      	ldr	r2, [pc, #36]	; (800d30c <xTaskIncrementTick+0x100>)
 800d2e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2e8:	e7b8      	b.n	800d25c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800d2ea:	4a0d      	ldr	r2, [pc, #52]	; (800d320 <xTaskIncrementTick+0x114>)
 800d2ec:	6813      	ldr	r3, [r2, #0]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d2f2:	2700      	movs	r7, #0
}
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2f8:	2400b718 	.word	0x2400b718
 800d2fc:	2400b79c 	.word	0x2400b79c
 800d300:	2400b2a8 	.word	0x2400b2a8
 800d304:	2400b2ac 	.word	0x2400b2ac
 800d308:	2400b754 	.word	0x2400b754
 800d30c:	2400b750 	.word	0x2400b750
 800d310:	2400b2a4 	.word	0x2400b2a4
 800d314:	2400b2b0 	.word	0x2400b2b0
 800d318:	2400b7a0 	.word	0x2400b7a0
 800d31c:	2400b720 	.word	0x2400b720
 800d320:	2400b758 	.word	0x2400b758

0800d324 <xTaskResumeAll>:
{
 800d324:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800d326:	4b35      	ldr	r3, [pc, #212]	; (800d3fc <xTaskResumeAll+0xd8>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	b943      	cbnz	r3, 800d33e <xTaskResumeAll+0x1a>
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	e7fe      	b.n	800d33c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800d33e:	f7fe fe21 	bl	800bf84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d342:	4b2e      	ldr	r3, [pc, #184]	; (800d3fc <xTaskResumeAll+0xd8>)
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	3a01      	subs	r2, #1
 800d348:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d14f      	bne.n	800d3f0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d350:	4b2b      	ldr	r3, [pc, #172]	; (800d400 <xTaskResumeAll+0xdc>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	b90b      	cbnz	r3, 800d35a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d356:	2400      	movs	r4, #0
 800d358:	e04b      	b.n	800d3f2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800d35a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d35c:	4b29      	ldr	r3, [pc, #164]	; (800d404 <xTaskResumeAll+0xe0>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	b31b      	cbz	r3, 800d3aa <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d362:	4b28      	ldr	r3, [pc, #160]	; (800d404 <xTaskResumeAll+0xe0>)
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d368:	f104 0018 	add.w	r0, r4, #24
 800d36c:	f7fe fd8c 	bl	800be88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d370:	1d25      	adds	r5, r4, #4
 800d372:	4628      	mov	r0, r5
 800d374:	f7fe fd88 	bl	800be88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d378:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d37a:	4b23      	ldr	r3, [pc, #140]	; (800d408 <xTaskResumeAll+0xe4>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4298      	cmp	r0, r3
 800d380:	d901      	bls.n	800d386 <xTaskResumeAll+0x62>
 800d382:	4b21      	ldr	r3, [pc, #132]	; (800d408 <xTaskResumeAll+0xe4>)
 800d384:	6018      	str	r0, [r3, #0]
 800d386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d38a:	4629      	mov	r1, r5
 800d38c:	4b1f      	ldr	r3, [pc, #124]	; (800d40c <xTaskResumeAll+0xe8>)
 800d38e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d392:	f7fe fd55 	bl	800be40 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d396:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d398:	4b1d      	ldr	r3, [pc, #116]	; (800d410 <xTaskResumeAll+0xec>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d3dc      	bcc.n	800d35c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800d3a2:	4b1c      	ldr	r3, [pc, #112]	; (800d414 <xTaskResumeAll+0xf0>)
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	e7d8      	b.n	800d35c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800d3aa:	b10c      	cbz	r4, 800d3b0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800d3ac:	f7ff fcb6 	bl	800cd1c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3b0:	4b19      	ldr	r3, [pc, #100]	; (800d418 <xTaskResumeAll+0xf4>)
 800d3b2:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d3b4:	b984      	cbnz	r4, 800d3d8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800d3b6:	4b17      	ldr	r3, [pc, #92]	; (800d414 <xTaskResumeAll+0xf0>)
 800d3b8:	681c      	ldr	r4, [r3, #0]
 800d3ba:	b1d4      	cbz	r4, 800d3f2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800d3bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d3d0:	2401      	movs	r4, #1
 800d3d2:	e00e      	b.n	800d3f2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3d4:	3c01      	subs	r4, #1
 800d3d6:	d007      	beq.n	800d3e8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800d3d8:	f7ff ff18 	bl	800d20c <xTaskIncrementTick>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d0f9      	beq.n	800d3d4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800d3e0:	4b0c      	ldr	r3, [pc, #48]	; (800d414 <xTaskResumeAll+0xf0>)
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	601a      	str	r2, [r3, #0]
 800d3e6:	e7f5      	b.n	800d3d4 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800d3e8:	4b0b      	ldr	r3, [pc, #44]	; (800d418 <xTaskResumeAll+0xf4>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e7e2      	b.n	800d3b6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800d3f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d3f2:	f7fe fde9 	bl	800bfc8 <vPortExitCritical>
}
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	bf00      	nop
 800d3fc:	2400b718 	.word	0x2400b718
 800d400:	2400b710 	.word	0x2400b710
 800d404:	2400b75c 	.word	0x2400b75c
 800d408:	2400b720 	.word	0x2400b720
 800d40c:	2400b2b0 	.word	0x2400b2b0
 800d410:	2400b2a4 	.word	0x2400b2a4
 800d414:	2400b7a0 	.word	0x2400b7a0
 800d418:	2400b758 	.word	0x2400b758

0800d41c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d41c:	4b21      	ldr	r3, [pc, #132]	; (800d4a4 <vTaskSwitchContext+0x88>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	b11b      	cbz	r3, 800d42a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800d422:	4b21      	ldr	r3, [pc, #132]	; (800d4a8 <vTaskSwitchContext+0x8c>)
 800d424:	2201      	movs	r2, #1
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800d42a:	4b1f      	ldr	r3, [pc, #124]	; (800d4a8 <vTaskSwitchContext+0x8c>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d430:	4b1e      	ldr	r3, [pc, #120]	; (800d4ac <vTaskSwitchContext+0x90>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d438:	008a      	lsls	r2, r1, #2
 800d43a:	491d      	ldr	r1, [pc, #116]	; (800d4b0 <vTaskSwitchContext+0x94>)
 800d43c:	588a      	ldr	r2, [r1, r2]
 800d43e:	b95a      	cbnz	r2, 800d458 <vTaskSwitchContext+0x3c>
 800d440:	b10b      	cbz	r3, 800d446 <vTaskSwitchContext+0x2a>
 800d442:	3b01      	subs	r3, #1
 800d444:	e7f6      	b.n	800d434 <vTaskSwitchContext+0x18>
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	e7fe      	b.n	800d456 <vTaskSwitchContext+0x3a>
 800d458:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800d45c:	0082      	lsls	r2, r0, #2
 800d45e:	440a      	add	r2, r1
 800d460:	6850      	ldr	r0, [r2, #4]
 800d462:	6840      	ldr	r0, [r0, #4]
 800d464:	6050      	str	r0, [r2, #4]
 800d466:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800d46a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d46e:	3208      	adds	r2, #8
 800d470:	4411      	add	r1, r2
 800d472:	4288      	cmp	r0, r1
 800d474:	d00f      	beq.n	800d496 <vTaskSwitchContext+0x7a>
 800d476:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d47a:	0091      	lsls	r1, r2, #2
 800d47c:	4a0c      	ldr	r2, [pc, #48]	; (800d4b0 <vTaskSwitchContext+0x94>)
 800d47e:	440a      	add	r2, r1
 800d480:	6852      	ldr	r2, [r2, #4]
 800d482:	68d1      	ldr	r1, [r2, #12]
 800d484:	4a0b      	ldr	r2, [pc, #44]	; (800d4b4 <vTaskSwitchContext+0x98>)
 800d486:	6011      	str	r1, [r2, #0]
 800d488:	4908      	ldr	r1, [pc, #32]	; (800d4ac <vTaskSwitchContext+0x90>)
 800d48a:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d48c:	6813      	ldr	r3, [r2, #0]
 800d48e:	3354      	adds	r3, #84	; 0x54
 800d490:	4a09      	ldr	r2, [pc, #36]	; (800d4b8 <vTaskSwitchContext+0x9c>)
 800d492:	6013      	str	r3, [r2, #0]
}
 800d494:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d496:	6840      	ldr	r0, [r0, #4]
 800d498:	4662      	mov	r2, ip
 800d49a:	0091      	lsls	r1, r2, #2
 800d49c:	4a04      	ldr	r2, [pc, #16]	; (800d4b0 <vTaskSwitchContext+0x94>)
 800d49e:	440a      	add	r2, r1
 800d4a0:	6050      	str	r0, [r2, #4]
 800d4a2:	e7e8      	b.n	800d476 <vTaskSwitchContext+0x5a>
 800d4a4:	2400b718 	.word	0x2400b718
 800d4a8:	2400b7a0 	.word	0x2400b7a0
 800d4ac:	2400b720 	.word	0x2400b720
 800d4b0:	2400b2b0 	.word	0x2400b2b0
 800d4b4:	2400b2a4 	.word	0x2400b2a4
 800d4b8:	240000ac 	.word	0x240000ac

0800d4bc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d4bc:	b158      	cbz	r0, 800d4d6 <vTaskPlaceOnEventList+0x1a>
{
 800d4be:	b510      	push	{r4, lr}
 800d4c0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4c2:	4a09      	ldr	r2, [pc, #36]	; (800d4e8 <vTaskPlaceOnEventList+0x2c>)
 800d4c4:	6811      	ldr	r1, [r2, #0]
 800d4c6:	3118      	adds	r1, #24
 800d4c8:	f7fe fcc5 	bl	800be56 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f7ff fd86 	bl	800cfe0 <prvAddCurrentTaskToDelayedList>
}
 800d4d4:	bd10      	pop	{r4, pc}
 800d4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800d4e6:	e7fe      	b.n	800d4e6 <vTaskPlaceOnEventList+0x2a>
 800d4e8:	2400b2a4 	.word	0x2400b2a4

0800d4ec <vTaskPlaceOnEventListRestricted>:
	{
 800d4ec:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800d4ee:	b170      	cbz	r0, 800d50e <vTaskPlaceOnEventListRestricted+0x22>
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4f4:	4a0a      	ldr	r2, [pc, #40]	; (800d520 <vTaskPlaceOnEventListRestricted+0x34>)
 800d4f6:	6811      	ldr	r1, [r2, #0]
 800d4f8:	3118      	adds	r1, #24
 800d4fa:	f7fe fca1 	bl	800be40 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800d4fe:	b10c      	cbz	r4, 800d504 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800d500:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d504:	4621      	mov	r1, r4
 800d506:	4628      	mov	r0, r5
 800d508:	f7ff fd6a 	bl	800cfe0 <prvAddCurrentTaskToDelayedList>
	}
 800d50c:	bd38      	pop	{r3, r4, r5, pc}
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800d51e:	e7fe      	b.n	800d51e <vTaskPlaceOnEventListRestricted+0x32>
 800d520:	2400b2a4 	.word	0x2400b2a4

0800d524 <xTaskRemoveFromEventList>:
{
 800d524:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d526:	68c3      	ldr	r3, [r0, #12]
 800d528:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d52a:	b324      	cbz	r4, 800d576 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d52c:	f104 0518 	add.w	r5, r4, #24
 800d530:	4628      	mov	r0, r5
 800d532:	f7fe fca9 	bl	800be88 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d536:	4b18      	ldr	r3, [pc, #96]	; (800d598 <xTaskRemoveFromEventList+0x74>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	bb2b      	cbnz	r3, 800d588 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d53c:	1d25      	adds	r5, r4, #4
 800d53e:	4628      	mov	r0, r5
 800d540:	f7fe fca2 	bl	800be88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d544:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d546:	4b15      	ldr	r3, [pc, #84]	; (800d59c <xTaskRemoveFromEventList+0x78>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4298      	cmp	r0, r3
 800d54c:	d901      	bls.n	800d552 <xTaskRemoveFromEventList+0x2e>
 800d54e:	4b13      	ldr	r3, [pc, #76]	; (800d59c <xTaskRemoveFromEventList+0x78>)
 800d550:	6018      	str	r0, [r3, #0]
 800d552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d556:	4629      	mov	r1, r5
 800d558:	4b11      	ldr	r3, [pc, #68]	; (800d5a0 <xTaskRemoveFromEventList+0x7c>)
 800d55a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d55e:	f7fe fc6f 	bl	800be40 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d562:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d564:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <xTaskRemoveFromEventList+0x80>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d911      	bls.n	800d592 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800d56e:	2001      	movs	r0, #1
 800d570:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <xTaskRemoveFromEventList+0x84>)
 800d572:	6018      	str	r0, [r3, #0]
}
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800d586:	e7fe      	b.n	800d586 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d588:	4629      	mov	r1, r5
 800d58a:	4808      	ldr	r0, [pc, #32]	; (800d5ac <xTaskRemoveFromEventList+0x88>)
 800d58c:	f7fe fc58 	bl	800be40 <vListInsertEnd>
 800d590:	e7e7      	b.n	800d562 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800d592:	2000      	movs	r0, #0
	return xReturn;
 800d594:	e7ee      	b.n	800d574 <xTaskRemoveFromEventList+0x50>
 800d596:	bf00      	nop
 800d598:	2400b718 	.word	0x2400b718
 800d59c:	2400b720 	.word	0x2400b720
 800d5a0:	2400b2b0 	.word	0x2400b2b0
 800d5a4:	2400b2a4 	.word	0x2400b2a4
 800d5a8:	2400b7a0 	.word	0x2400b7a0
 800d5ac:	2400b75c 	.word	0x2400b75c

0800d5b0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5b0:	4b03      	ldr	r3, [pc, #12]	; (800d5c0 <vTaskInternalSetTimeOutState+0x10>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5b6:	4b03      	ldr	r3, [pc, #12]	; (800d5c4 <vTaskInternalSetTimeOutState+0x14>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	6043      	str	r3, [r0, #4]
}
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	2400b754 	.word	0x2400b754
 800d5c4:	2400b79c 	.word	0x2400b79c

0800d5c8 <xTaskCheckForTimeOut>:
{
 800d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800d5ca:	b1c8      	cbz	r0, 800d600 <xTaskCheckForTimeOut+0x38>
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800d5d0:	b1f9      	cbz	r1, 800d612 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800d5d2:	f7fe fcd7 	bl	800bf84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d5d6:	4b1b      	ldr	r3, [pc, #108]	; (800d644 <xTaskCheckForTimeOut+0x7c>)
 800d5d8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5da:	686b      	ldr	r3, [r5, #4]
 800d5dc:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800d5de:	6822      	ldr	r2, [r4, #0]
 800d5e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d5e4:	d026      	beq.n	800d634 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5e6:	4e18      	ldr	r6, [pc, #96]	; (800d648 <xTaskCheckForTimeOut+0x80>)
 800d5e8:	6836      	ldr	r6, [r6, #0]
 800d5ea:	682f      	ldr	r7, [r5, #0]
 800d5ec:	42b7      	cmp	r7, r6
 800d5ee:	d001      	beq.n	800d5f4 <xTaskCheckForTimeOut+0x2c>
 800d5f0:	428b      	cmp	r3, r1
 800d5f2:	d924      	bls.n	800d63e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5f4:	4282      	cmp	r2, r0
 800d5f6:	d815      	bhi.n	800d624 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d5fc:	2401      	movs	r4, #1
 800d5fe:	e01a      	b.n	800d636 <xTaskCheckForTimeOut+0x6e>
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800d610:	e7fe      	b.n	800d610 <xTaskCheckForTimeOut+0x48>
 800d612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	f3bf 8f6f 	isb	sy
 800d61e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800d622:	e7fe      	b.n	800d622 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800d624:	1a5b      	subs	r3, r3, r1
 800d626:	4413      	add	r3, r2
 800d628:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d62a:	4628      	mov	r0, r5
 800d62c:	f7ff ffc0 	bl	800d5b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d630:	2400      	movs	r4, #0
 800d632:	e000      	b.n	800d636 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800d634:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d636:	f7fe fcc7 	bl	800bfc8 <vPortExitCritical>
}
 800d63a:	4620      	mov	r0, r4
 800d63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800d63e:	2401      	movs	r4, #1
 800d640:	e7f9      	b.n	800d636 <xTaskCheckForTimeOut+0x6e>
 800d642:	bf00      	nop
 800d644:	2400b79c 	.word	0x2400b79c
 800d648:	2400b754 	.word	0x2400b754

0800d64c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d64c:	4b01      	ldr	r3, [pc, #4]	; (800d654 <vTaskMissedYield+0x8>)
 800d64e:	2201      	movs	r2, #1
 800d650:	601a      	str	r2, [r3, #0]
}
 800d652:	4770      	bx	lr
 800d654:	2400b7a0 	.word	0x2400b7a0

0800d658 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d658:	4b05      	ldr	r3, [pc, #20]	; (800d670 <xTaskGetSchedulerState+0x18>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	b133      	cbz	r3, 800d66c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d65e:	4b05      	ldr	r3, [pc, #20]	; (800d674 <xTaskGetSchedulerState+0x1c>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	b10b      	cbz	r3, 800d668 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800d664:	2000      	movs	r0, #0
	}
 800d666:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800d668:	2002      	movs	r0, #2
 800d66a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d66c:	2001      	movs	r0, #1
 800d66e:	4770      	bx	lr
 800d670:	2400b770 	.word	0x2400b770
 800d674:	2400b718 	.word	0x2400b718

0800d678 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800d678:	2800      	cmp	r0, #0
 800d67a:	d03e      	beq.n	800d6fa <xTaskPriorityInherit+0x82>
	{
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d680:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d682:	4a20      	ldr	r2, [pc, #128]	; (800d704 <xTaskPriorityInherit+0x8c>)
 800d684:	6812      	ldr	r2, [r2, #0]
 800d686:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d688:	4293      	cmp	r3, r2
 800d68a:	d22e      	bcs.n	800d6ea <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d68c:	6982      	ldr	r2, [r0, #24]
 800d68e:	2a00      	cmp	r2, #0
 800d690:	db05      	blt.n	800d69e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d692:	4a1c      	ldr	r2, [pc, #112]	; (800d704 <xTaskPriorityInherit+0x8c>)
 800d694:	6812      	ldr	r2, [r2, #0]
 800d696:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d698:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d69c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d69e:	6961      	ldr	r1, [r4, #20]
 800d6a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d6a4:	4a18      	ldr	r2, [pc, #96]	; (800d708 <xTaskPriorityInherit+0x90>)
 800d6a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6aa:	4299      	cmp	r1, r3
 800d6ac:	d005      	beq.n	800d6ba <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6ae:	4b15      	ldr	r3, [pc, #84]	; (800d704 <xTaskPriorityInherit+0x8c>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b4:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800d6b6:	2001      	movs	r0, #1
	}
 800d6b8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6ba:	1d25      	adds	r5, r4, #4
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f7fe fbe3 	bl	800be88 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6c2:	4b10      	ldr	r3, [pc, #64]	; (800d704 <xTaskPriorityInherit+0x8c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d6c8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6ca:	4b10      	ldr	r3, [pc, #64]	; (800d70c <xTaskPriorityInherit+0x94>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4298      	cmp	r0, r3
 800d6d0:	d901      	bls.n	800d6d6 <xTaskPriorityInherit+0x5e>
 800d6d2:	4b0e      	ldr	r3, [pc, #56]	; (800d70c <xTaskPriorityInherit+0x94>)
 800d6d4:	6018      	str	r0, [r3, #0]
 800d6d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d6da:	4629      	mov	r1, r5
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	; (800d708 <xTaskPriorityInherit+0x90>)
 800d6de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6e2:	f7fe fbad 	bl	800be40 <vListInsertEnd>
				xReturn = pdTRUE;
 800d6e6:	2001      	movs	r0, #1
 800d6e8:	e7e6      	b.n	800d6b8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6ea:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d6ec:	4b05      	ldr	r3, [pc, #20]	; (800d704 <xTaskPriorityInherit+0x8c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d303      	bcc.n	800d6fe <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	e7de      	b.n	800d6b8 <xTaskPriorityInherit+0x40>
 800d6fa:	2000      	movs	r0, #0
	}
 800d6fc:	4770      	bx	lr
					xReturn = pdTRUE;
 800d6fe:	2001      	movs	r0, #1
		return xReturn;
 800d700:	e7da      	b.n	800d6b8 <xTaskPriorityInherit+0x40>
 800d702:	bf00      	nop
 800d704:	2400b2a4 	.word	0x2400b2a4
 800d708:	2400b2b0 	.word	0x2400b2b0
 800d70c:	2400b720 	.word	0x2400b720

0800d710 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800d710:	2800      	cmp	r0, #0
 800d712:	d03b      	beq.n	800d78c <xTaskPriorityDisinherit+0x7c>
	{
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800d718:	4b1e      	ldr	r3, [pc, #120]	; (800d794 <xTaskPriorityDisinherit+0x84>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4283      	cmp	r3, r0
 800d71e:	d008      	beq.n	800d732 <xTaskPriorityDisinherit+0x22>
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	e7fe      	b.n	800d730 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800d732:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d734:	b943      	cbnz	r3, 800d748 <xTaskPriorityDisinherit+0x38>
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	e7fe      	b.n	800d746 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800d748:	3b01      	subs	r3, #1
 800d74a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d74c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d74e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d750:	4291      	cmp	r1, r2
 800d752:	d01d      	beq.n	800d790 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d754:	b10b      	cbz	r3, 800d75a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d756:	2000      	movs	r0, #0
	}
 800d758:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d75a:	1d05      	adds	r5, r0, #4
 800d75c:	4628      	mov	r0, r5
 800d75e:	f7fe fb93 	bl	800be88 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d762:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d764:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d766:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800d76a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d76c:	4b0a      	ldr	r3, [pc, #40]	; (800d798 <xTaskPriorityDisinherit+0x88>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4298      	cmp	r0, r3
 800d772:	d901      	bls.n	800d778 <xTaskPriorityDisinherit+0x68>
 800d774:	4b08      	ldr	r3, [pc, #32]	; (800d798 <xTaskPriorityDisinherit+0x88>)
 800d776:	6018      	str	r0, [r3, #0]
 800d778:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d77c:	4629      	mov	r1, r5
 800d77e:	4b07      	ldr	r3, [pc, #28]	; (800d79c <xTaskPriorityDisinherit+0x8c>)
 800d780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d784:	f7fe fb5c 	bl	800be40 <vListInsertEnd>
					xReturn = pdTRUE;
 800d788:	2001      	movs	r0, #1
 800d78a:	e7e5      	b.n	800d758 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800d78c:	2000      	movs	r0, #0
	}
 800d78e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800d790:	2000      	movs	r0, #0
 800d792:	e7e1      	b.n	800d758 <xTaskPriorityDisinherit+0x48>
 800d794:	2400b2a4 	.word	0x2400b2a4
 800d798:	2400b720 	.word	0x2400b720
 800d79c:	2400b2b0 	.word	0x2400b2b0

0800d7a0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d046      	beq.n	800d832 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800d7a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d7aa:	b943      	cbnz	r3, 800d7be <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800d7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	e7fe      	b.n	800d7bc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d7be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d7c0:	428a      	cmp	r2, r1
 800d7c2:	d200      	bcs.n	800d7c6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d7c4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d7c8:	4291      	cmp	r1, r2
 800d7ca:	d001      	beq.n	800d7d0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d000      	beq.n	800d7d2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800d7d0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800d7d2:	4b18      	ldr	r3, [pc, #96]	; (800d834 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	42a3      	cmp	r3, r4
 800d7d8:	d022      	beq.n	800d820 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800d7da:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7dc:	69a3      	ldr	r3, [r4, #24]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	db02      	blt.n	800d7e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7e2:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d7e6:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d7e8:	6962      	ldr	r2, [r4, #20]
 800d7ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d7ee:	4b12      	ldr	r3, [pc, #72]	; (800d838 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d7f0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d7f4:	428a      	cmp	r2, r1
 800d7f6:	d1eb      	bne.n	800d7d0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7f8:	1d25      	adds	r5, r4, #4
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	f7fe fb44 	bl	800be88 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d800:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d802:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4298      	cmp	r0, r3
 800d808:	d901      	bls.n	800d80e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800d80a:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d80c:	6018      	str	r0, [r3, #0]
 800d80e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d812:	4629      	mov	r1, r5
 800d814:	4b08      	ldr	r3, [pc, #32]	; (800d838 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d816:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d81a:	f7fe fb11 	bl	800be40 <vListInsertEnd>
	}
 800d81e:	e7d7      	b.n	800d7d0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800d830:	e7fe      	b.n	800d830 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800d832:	4770      	bx	lr
 800d834:	2400b2a4 	.word	0x2400b2a4
 800d838:	2400b2b0 	.word	0x2400b2b0
 800d83c:	2400b720 	.word	0x2400b720

0800d840 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <pvTaskIncrementMutexHeldCount+0x18>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	b123      	cbz	r3, 800d850 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d846:	4b04      	ldr	r3, [pc, #16]	; (800d858 <pvTaskIncrementMutexHeldCount+0x18>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d84c:	3301      	adds	r3, #1
 800d84e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800d850:	4b01      	ldr	r3, [pc, #4]	; (800d858 <pvTaskIncrementMutexHeldCount+0x18>)
 800d852:	6818      	ldr	r0, [r3, #0]
	}
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	2400b2a4 	.word	0x2400b2a4

0800d85c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d85c:	4b06      	ldr	r3, [pc, #24]	; (800d878 <prvGetNextExpireTime+0x1c>)
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	6813      	ldr	r3, [r2, #0]
 800d862:	b92b      	cbnz	r3, 800d870 <prvGetNextExpireTime+0x14>
 800d864:	2301      	movs	r3, #1
 800d866:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d868:	b923      	cbnz	r3, 800d874 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d86a:	68d3      	ldr	r3, [r2, #12]
 800d86c:	6818      	ldr	r0, [r3, #0]
 800d86e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d870:	2300      	movs	r3, #0
 800d872:	e7f8      	b.n	800d866 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d874:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800d876:	4770      	bx	lr
 800d878:	2400b7a4 	.word	0x2400b7a4

0800d87c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d87c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d87e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d880:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d882:	4291      	cmp	r1, r2
 800d884:	d80c      	bhi.n	800d8a0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d886:	1ad2      	subs	r2, r2, r3
 800d888:	6983      	ldr	r3, [r0, #24]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d301      	bcc.n	800d892 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d88e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800d890:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d892:	1d01      	adds	r1, r0, #4
 800d894:	4b0b      	ldr	r3, [pc, #44]	; (800d8c4 <prvInsertTimerInActiveList+0x48>)
 800d896:	6818      	ldr	r0, [r3, #0]
 800d898:	f7fe fadd 	bl	800be56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d89c:	2000      	movs	r0, #0
 800d89e:	e7f7      	b.n	800d890 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	bf2c      	ite	cs
 800d8a4:	2200      	movcs	r2, #0
 800d8a6:	2201      	movcc	r2, #1
 800d8a8:	4299      	cmp	r1, r3
 800d8aa:	bf38      	it	cc
 800d8ac:	2200      	movcc	r2, #0
 800d8ae:	b10a      	cbz	r2, 800d8b4 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800d8b0:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d8b2:	e7ed      	b.n	800d890 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8b4:	1d01      	adds	r1, r0, #4
 800d8b6:	4b04      	ldr	r3, [pc, #16]	; (800d8c8 <prvInsertTimerInActiveList+0x4c>)
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7fe facc 	bl	800be56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d8be:	2000      	movs	r0, #0
 800d8c0:	e7e6      	b.n	800d890 <prvInsertTimerInActiveList+0x14>
 800d8c2:	bf00      	nop
 800d8c4:	2400b7a8 	.word	0x2400b7a8
 800d8c8:	2400b7a4 	.word	0x2400b7a4

0800d8cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8cc:	b530      	push	{r4, r5, lr}
 800d8ce:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8d0:	f7fe fb58 	bl	800bf84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8d4:	4b11      	ldr	r3, [pc, #68]	; (800d91c <prvCheckForValidListAndQueue+0x50>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	b11b      	cbz	r3, 800d8e2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8da:	f7fe fb75 	bl	800bfc8 <vPortExitCritical>
}
 800d8de:	b003      	add	sp, #12
 800d8e0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800d8e2:	4d0f      	ldr	r5, [pc, #60]	; (800d920 <prvCheckForValidListAndQueue+0x54>)
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	f7fe fa9d 	bl	800be24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8ea:	4c0e      	ldr	r4, [pc, #56]	; (800d924 <prvCheckForValidListAndQueue+0x58>)
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f7fe fa99 	bl	800be24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8f2:	4b0d      	ldr	r3, [pc, #52]	; (800d928 <prvCheckForValidListAndQueue+0x5c>)
 800d8f4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	; (800d92c <prvCheckForValidListAndQueue+0x60>)
 800d8f8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	4b0c      	ldr	r3, [pc, #48]	; (800d930 <prvCheckForValidListAndQueue+0x64>)
 800d900:	4a0c      	ldr	r2, [pc, #48]	; (800d934 <prvCheckForValidListAndQueue+0x68>)
 800d902:	2110      	movs	r1, #16
 800d904:	200a      	movs	r0, #10
 800d906:	f7fe fd8c 	bl	800c422 <xQueueGenericCreateStatic>
 800d90a:	4b04      	ldr	r3, [pc, #16]	; (800d91c <prvCheckForValidListAndQueue+0x50>)
 800d90c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800d90e:	2800      	cmp	r0, #0
 800d910:	d0e3      	beq.n	800d8da <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d912:	4909      	ldr	r1, [pc, #36]	; (800d938 <prvCheckForValidListAndQueue+0x6c>)
 800d914:	f7ff f998 	bl	800cc48 <vQueueAddToRegistry>
 800d918:	e7df      	b.n	800d8da <prvCheckForValidListAndQueue+0xe>
 800d91a:	bf00      	nop
 800d91c:	2400b8c8 	.word	0x2400b8c8
 800d920:	2400b84c 	.word	0x2400b84c
 800d924:	2400b860 	.word	0x2400b860
 800d928:	2400b7a4 	.word	0x2400b7a4
 800d92c:	2400b7a8 	.word	0x2400b7a8
 800d930:	2400b878 	.word	0x2400b878
 800d934:	2400b7ac 	.word	0x2400b7ac
 800d938:	0801ed9c 	.word	0x0801ed9c

0800d93c <xTimerCreateTimerTask>:
{
 800d93c:	b510      	push	{r4, lr}
 800d93e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d940:	f7ff ffc4 	bl	800d8cc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d944:	4b12      	ldr	r3, [pc, #72]	; (800d990 <xTimerCreateTimerTask+0x54>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	b1cb      	cbz	r3, 800d97e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d94a:	2400      	movs	r4, #0
 800d94c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d94e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d950:	aa07      	add	r2, sp, #28
 800d952:	a906      	add	r1, sp, #24
 800d954:	a805      	add	r0, sp, #20
 800d956:	f7fe f939 	bl	800bbcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d95a:	9b05      	ldr	r3, [sp, #20]
 800d95c:	9302      	str	r3, [sp, #8]
 800d95e:	9b06      	ldr	r3, [sp, #24]
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	2302      	movs	r3, #2
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	4623      	mov	r3, r4
 800d968:	9a07      	ldr	r2, [sp, #28]
 800d96a:	490a      	ldr	r1, [pc, #40]	; (800d994 <xTimerCreateTimerTask+0x58>)
 800d96c:	480a      	ldr	r0, [pc, #40]	; (800d998 <xTimerCreateTimerTask+0x5c>)
 800d96e:	f7ff fb79 	bl	800d064 <xTaskCreateStatic>
 800d972:	4b0a      	ldr	r3, [pc, #40]	; (800d99c <xTimerCreateTimerTask+0x60>)
 800d974:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d976:	b110      	cbz	r0, 800d97e <xTimerCreateTimerTask+0x42>
}
 800d978:	2001      	movs	r0, #1
 800d97a:	b008      	add	sp, #32
 800d97c:	bd10      	pop	{r4, pc}
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d98e:	e7fe      	b.n	800d98e <xTimerCreateTimerTask+0x52>
 800d990:	2400b8c8 	.word	0x2400b8c8
 800d994:	0801eda4 	.word	0x0801eda4
 800d998:	0800dca5 	.word	0x0800dca5
 800d99c:	2400b8cc 	.word	0x2400b8cc

0800d9a0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800d9a0:	b1b8      	cbz	r0, 800d9d2 <xTimerGenericCommand+0x32>
 800d9a2:	469c      	mov	ip, r3
 800d9a4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800d9a6:	4818      	ldr	r0, [pc, #96]	; (800da08 <xTimerGenericCommand+0x68>)
 800d9a8:	6800      	ldr	r0, [r0, #0]
 800d9aa:	b358      	cbz	r0, 800da04 <xTimerGenericCommand+0x64>
{
 800d9ac:	b500      	push	{lr}
 800d9ae:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800d9b0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d9b2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d9b4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9b6:	2905      	cmp	r1, #5
 800d9b8:	dc1c      	bgt.n	800d9f4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9ba:	f7ff fe4d 	bl	800d658 <xTaskGetSchedulerState>
 800d9be:	2802      	cmp	r0, #2
 800d9c0:	d010      	beq.n	800d9e4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	4669      	mov	r1, sp
 800d9c8:	480f      	ldr	r0, [pc, #60]	; (800da08 <xTimerGenericCommand+0x68>)
 800d9ca:	6800      	ldr	r0, [r0, #0]
 800d9cc:	f7fe fde1 	bl	800c592 <xQueueGenericSend>
 800d9d0:	e015      	b.n	800d9fe <xTimerGenericCommand+0x5e>
 800d9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800d9e2:	e7fe      	b.n	800d9e2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	9a06      	ldr	r2, [sp, #24]
 800d9e8:	4669      	mov	r1, sp
 800d9ea:	4807      	ldr	r0, [pc, #28]	; (800da08 <xTimerGenericCommand+0x68>)
 800d9ec:	6800      	ldr	r0, [r0, #0]
 800d9ee:	f7fe fdd0 	bl	800c592 <xQueueGenericSend>
 800d9f2:	e004      	b.n	800d9fe <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4662      	mov	r2, ip
 800d9f8:	4669      	mov	r1, sp
 800d9fa:	f7fe fe8e 	bl	800c71a <xQueueGenericSendFromISR>
}
 800d9fe:	b005      	add	sp, #20
 800da00:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800da04:	2000      	movs	r0, #0
}
 800da06:	4770      	bx	lr
 800da08:	2400b8c8 	.word	0x2400b8c8

0800da0c <prvSwitchTimerLists>:
{
 800da0c:	b570      	push	{r4, r5, r6, lr}
 800da0e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da10:	4b1b      	ldr	r3, [pc, #108]	; (800da80 <prvSwitchTimerLists+0x74>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	b362      	cbz	r2, 800da72 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da1c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da1e:	1d25      	adds	r5, r4, #4
 800da20:	4628      	mov	r0, r5
 800da22:	f7fe fa31 	bl	800be88 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da26:	6a23      	ldr	r3, [r4, #32]
 800da28:	4620      	mov	r0, r4
 800da2a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da2c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800da30:	f013 0f04 	tst.w	r3, #4
 800da34:	d0ec      	beq.n	800da10 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da36:	69a3      	ldr	r3, [r4, #24]
 800da38:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800da3a:	429e      	cmp	r6, r3
 800da3c:	d207      	bcs.n	800da4e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da3e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da40:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da42:	4629      	mov	r1, r5
 800da44:	4b0e      	ldr	r3, [pc, #56]	; (800da80 <prvSwitchTimerLists+0x74>)
 800da46:	6818      	ldr	r0, [r3, #0]
 800da48:	f7fe fa05 	bl	800be56 <vListInsert>
 800da4c:	e7e0      	b.n	800da10 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da4e:	2100      	movs	r1, #0
 800da50:	9100      	str	r1, [sp, #0]
 800da52:	460b      	mov	r3, r1
 800da54:	4632      	mov	r2, r6
 800da56:	4620      	mov	r0, r4
 800da58:	f7ff ffa2 	bl	800d9a0 <xTimerGenericCommand>
				configASSERT( xResult );
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d1d7      	bne.n	800da10 <prvSwitchTimerLists+0x4>
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	e7fe      	b.n	800da70 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800da72:	4a04      	ldr	r2, [pc, #16]	; (800da84 <prvSwitchTimerLists+0x78>)
 800da74:	6810      	ldr	r0, [r2, #0]
 800da76:	4902      	ldr	r1, [pc, #8]	; (800da80 <prvSwitchTimerLists+0x74>)
 800da78:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800da7a:	6013      	str	r3, [r2, #0]
}
 800da7c:	b002      	add	sp, #8
 800da7e:	bd70      	pop	{r4, r5, r6, pc}
 800da80:	2400b7a4 	.word	0x2400b7a4
 800da84:	2400b7a8 	.word	0x2400b7a8

0800da88 <prvSampleTimeNow>:
{
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800da8c:	f7ff fbb8 	bl	800d200 <xTaskGetTickCount>
 800da90:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800da92:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <prvSampleTimeNow+0x28>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4283      	cmp	r3, r0
 800da98:	d805      	bhi.n	800daa6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800da9a:	2300      	movs	r3, #0
 800da9c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800da9e:	4b04      	ldr	r3, [pc, #16]	; (800dab0 <prvSampleTimeNow+0x28>)
 800daa0:	601c      	str	r4, [r3, #0]
}
 800daa2:	4620      	mov	r0, r4
 800daa4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800daa6:	f7ff ffb1 	bl	800da0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800daaa:	2301      	movs	r3, #1
 800daac:	602b      	str	r3, [r5, #0]
 800daae:	e7f6      	b.n	800da9e <prvSampleTimeNow+0x16>
 800dab0:	2400b874 	.word	0x2400b874

0800dab4 <prvProcessExpiredTimer>:
{
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	4606      	mov	r6, r0
 800daba:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dabc:	4917      	ldr	r1, [pc, #92]	; (800db1c <prvProcessExpiredTimer+0x68>)
 800dabe:	6809      	ldr	r1, [r1, #0]
 800dac0:	68c9      	ldr	r1, [r1, #12]
 800dac2:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dac4:	1d20      	adds	r0, r4, #4
 800dac6:	f7fe f9df 	bl	800be88 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800daca:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800dace:	f01c 0f04 	tst.w	ip, #4
 800dad2:	d108      	bne.n	800dae6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dad4:	f02c 0c01 	bic.w	ip, ip, #1
 800dad8:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dadc:	6a23      	ldr	r3, [r4, #32]
 800dade:	4620      	mov	r0, r4
 800dae0:	4798      	blx	r3
}
 800dae2:	b002      	add	sp, #8
 800dae4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dae6:	69a1      	ldr	r1, [r4, #24]
 800dae8:	4633      	mov	r3, r6
 800daea:	462a      	mov	r2, r5
 800daec:	4431      	add	r1, r6
 800daee:	4620      	mov	r0, r4
 800daf0:	f7ff fec4 	bl	800d87c <prvInsertTimerInActiveList>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d0f1      	beq.n	800dadc <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800daf8:	2100      	movs	r1, #0
 800dafa:	9100      	str	r1, [sp, #0]
 800dafc:	460b      	mov	r3, r1
 800dafe:	4632      	mov	r2, r6
 800db00:	4620      	mov	r0, r4
 800db02:	f7ff ff4d 	bl	800d9a0 <xTimerGenericCommand>
			configASSERT( xResult );
 800db06:	2800      	cmp	r0, #0
 800db08:	d1e8      	bne.n	800dadc <prvProcessExpiredTimer+0x28>
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	f383 8811 	msr	BASEPRI, r3
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	f3bf 8f4f 	dsb	sy
 800db1a:	e7fe      	b.n	800db1a <prvProcessExpiredTimer+0x66>
 800db1c:	2400b7a4 	.word	0x2400b7a4

0800db20 <prvProcessTimerOrBlockTask>:
{
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	4606      	mov	r6, r0
 800db26:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800db28:	f7ff fb62 	bl	800d1f0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db2c:	a801      	add	r0, sp, #4
 800db2e:	f7ff ffab 	bl	800da88 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800db32:	9b01      	ldr	r3, [sp, #4]
 800db34:	bb3b      	cbnz	r3, 800db86 <prvProcessTimerOrBlockTask+0x66>
 800db36:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db38:	42b0      	cmp	r0, r6
 800db3a:	bf28      	it	cs
 800db3c:	2c00      	cmpcs	r4, #0
 800db3e:	d019      	beq.n	800db74 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800db40:	b124      	cbz	r4, 800db4c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db42:	4a13      	ldr	r2, [pc, #76]	; (800db90 <prvProcessTimerOrBlockTask+0x70>)
 800db44:	6812      	ldr	r2, [r2, #0]
 800db46:	6812      	ldr	r2, [r2, #0]
 800db48:	b9da      	cbnz	r2, 800db82 <prvProcessTimerOrBlockTask+0x62>
 800db4a:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db4c:	4622      	mov	r2, r4
 800db4e:	1b71      	subs	r1, r6, r5
 800db50:	4b10      	ldr	r3, [pc, #64]	; (800db94 <prvProcessTimerOrBlockTask+0x74>)
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	f7ff f8b8 	bl	800ccc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db58:	f7ff fbe4 	bl	800d324 <xTaskResumeAll>
 800db5c:	b9a8      	cbnz	r0, 800db8a <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800db5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800db62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	f3bf 8f6f 	isb	sy
 800db72:	e00a      	b.n	800db8a <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800db74:	f7ff fbd6 	bl	800d324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db78:	4629      	mov	r1, r5
 800db7a:	4630      	mov	r0, r6
 800db7c:	f7ff ff9a 	bl	800dab4 <prvProcessExpiredTimer>
 800db80:	e003      	b.n	800db8a <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db82:	461c      	mov	r4, r3
 800db84:	e7e2      	b.n	800db4c <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800db86:	f7ff fbcd 	bl	800d324 <xTaskResumeAll>
}
 800db8a:	b002      	add	sp, #8
 800db8c:	bd70      	pop	{r4, r5, r6, pc}
 800db8e:	bf00      	nop
 800db90:	2400b7a8 	.word	0x2400b7a8
 800db94:	2400b8c8 	.word	0x2400b8c8

0800db98 <prvProcessReceivedCommands>:
{
 800db98:	b510      	push	{r4, lr}
 800db9a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db9c:	e002      	b.n	800dba4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db9e:	9b04      	ldr	r3, [sp, #16]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	da0f      	bge.n	800dbc4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dba4:	2200      	movs	r2, #0
 800dba6:	a904      	add	r1, sp, #16
 800dba8:	4b3d      	ldr	r3, [pc, #244]	; (800dca0 <prvProcessReceivedCommands+0x108>)
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	f7fe fe75 	bl	800c89a <xQueueReceive>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d073      	beq.n	800dc9c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbb4:	9b04      	ldr	r3, [sp, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	daf1      	bge.n	800db9e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbba:	9907      	ldr	r1, [sp, #28]
 800dbbc:	9806      	ldr	r0, [sp, #24]
 800dbbe:	9b05      	ldr	r3, [sp, #20]
 800dbc0:	4798      	blx	r3
 800dbc2:	e7ec      	b.n	800db9e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dbc4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dbc6:	6963      	ldr	r3, [r4, #20]
 800dbc8:	b113      	cbz	r3, 800dbd0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbca:	1d20      	adds	r0, r4, #4
 800dbcc:	f7fe f95c 	bl	800be88 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbd0:	a803      	add	r0, sp, #12
 800dbd2:	f7ff ff59 	bl	800da88 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800dbd6:	9b04      	ldr	r3, [sp, #16]
 800dbd8:	2b09      	cmp	r3, #9
 800dbda:	d8e3      	bhi.n	800dba4 <prvProcessReceivedCommands+0xc>
 800dbdc:	e8df f003 	tbb	[pc, r3]
 800dbe0:	30050505 	.word	0x30050505
 800dbe4:	05055037 	.word	0x05055037
 800dbe8:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dbee:	f043 0301 	orr.w	r3, r3, #1
 800dbf2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dbf6:	9b05      	ldr	r3, [sp, #20]
 800dbf8:	69a1      	ldr	r1, [r4, #24]
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	4419      	add	r1, r3
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f7ff fe3c 	bl	800d87c <prvInsertTimerInActiveList>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d0cd      	beq.n	800dba4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc08:	6a23      	ldr	r3, [r4, #32]
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dc12:	f013 0f04 	tst.w	r3, #4
 800dc16:	d0c5      	beq.n	800dba4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc18:	69a2      	ldr	r2, [r4, #24]
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	9100      	str	r1, [sp, #0]
 800dc1e:	460b      	mov	r3, r1
 800dc20:	9805      	ldr	r0, [sp, #20]
 800dc22:	4402      	add	r2, r0
 800dc24:	4620      	mov	r0, r4
 800dc26:	f7ff febb 	bl	800d9a0 <xTimerGenericCommand>
							configASSERT( xResult );
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d1ba      	bne.n	800dba4 <prvProcessReceivedCommands+0xc>
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	e7fe      	b.n	800dc3e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc40:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dc44:	f023 0301 	bic.w	r3, r3, #1
 800dc48:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800dc4c:	e7aa      	b.n	800dba4 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc4e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dc52:	f043 0301 	orr.w	r3, r3, #1
 800dc56:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc5a:	9905      	ldr	r1, [sp, #20]
 800dc5c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc5e:	b131      	cbz	r1, 800dc6e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc60:	4603      	mov	r3, r0
 800dc62:	4602      	mov	r2, r0
 800dc64:	4401      	add	r1, r0
 800dc66:	4620      	mov	r0, r4
 800dc68:	f7ff fe08 	bl	800d87c <prvInsertTimerInActiveList>
					break;
 800dc6c:	e79a      	b.n	800dba4 <prvProcessReceivedCommands+0xc>
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc7e:	e7fe      	b.n	800dc7e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dc84:	f013 0f02 	tst.w	r3, #2
 800dc88:	d004      	beq.n	800dc94 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc8a:	f023 0301 	bic.w	r3, r3, #1
 800dc8e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800dc92:	e787      	b.n	800dba4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800dc94:	4620      	mov	r0, r4
 800dc96:	f7fe f887 	bl	800bda8 <vPortFree>
 800dc9a:	e783      	b.n	800dba4 <prvProcessReceivedCommands+0xc>
}
 800dc9c:	b008      	add	sp, #32
 800dc9e:	bd10      	pop	{r4, pc}
 800dca0:	2400b8c8 	.word	0x2400b8c8

0800dca4 <prvTimerTask>:
{
 800dca4:	b500      	push	{lr}
 800dca6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dca8:	a801      	add	r0, sp, #4
 800dcaa:	f7ff fdd7 	bl	800d85c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dcae:	9901      	ldr	r1, [sp, #4]
 800dcb0:	f7ff ff36 	bl	800db20 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800dcb4:	f7ff ff70 	bl	800db98 <prvProcessReceivedCommands>
	for( ;; )
 800dcb8:	e7f6      	b.n	800dca8 <prvTimerTask+0x4>

0800dcba <net_aton>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
int32_t net_aton(const char_t *ptr, net_ip_addr_t *addr)
{
 800dcba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcbc:	b085      	sub	sp, #20
 800dcbe:	4684      	mov	ip, r0
 800dcc0:	460e      	mov	r6, r1
  uint32_t parts[4];
  uint32_t *pp = parts;
  int32_t ret = 1;
  int32_t done;

  c0 = *cp;
 800dcc2:	7803      	ldrb	r3, [r0, #0]
  done = 0;
 800dcc4:	2000      	movs	r0, #0
  int32_t ret = 1;
 800dcc6:	2501      	movs	r5, #1
  uint32_t *pp = parts;
 800dcc8:	466c      	mov	r4, sp
  uint32_t val = 0;
 800dcca:	4601      	mov	r1, r0
 800dccc:	e03e      	b.n	800dd4c <net_aton+0x92>
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
        {
          ret = 0;
 800dcce:	4605      	mov	r5, r0
          done = 1;
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	e03b      	b.n	800dd4c <net_aton+0x92>
      ret = 0;
 800dcd4:	4605      	mov	r5, r0
      done = 1;
 800dcd6:	2001      	movs	r0, #1
 800dcd8:	e038      	b.n	800dd4c <net_aton+0x92>
        ++cp;
 800dcda:	f10c 0201 	add.w	r2, ip, #1
        c0 = (char_t) * cp;
 800dcde:	f89c 3001 	ldrb.w	r3, [ip, #1]
        if ((c0 == (char_t) 'x') || (c0 == (char_t) 'X'))
 800dce2:	2b58      	cmp	r3, #88	; 0x58
 800dce4:	bf18      	it	ne
 800dce6:	2b78      	cmpne	r3, #120	; 0x78
 800dce8:	d106      	bne.n	800dcf8 <net_aton+0x3e>
          c0 = (char_t) * cp;
 800dcea:	f89c 3002 	ldrb.w	r3, [ip, #2]
          ++cp;
 800dcee:	f10c 0c02 	add.w	ip, ip, #2
          base = 16;
 800dcf2:	f04f 0e10 	mov.w	lr, #16
 800dcf6:	e033      	b.n	800dd60 <net_aton+0xa6>
        ++cp;
 800dcf8:	4694      	mov	ip, r2
          base = 8;
 800dcfa:	f04f 0e08 	mov.w	lr, #8
 800dcfe:	e02f      	b.n	800dd60 <net_aton+0xa6>
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 800dd00:	fb0e 3101 	mla	r1, lr, r1, r3
 800dd04:	3930      	subs	r1, #48	; 0x30
          c0 = (char_t) * cp;
 800dd06:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        if (NET_ISDIGIT(c0))
 800dd0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dd0e:	b2d2      	uxtb	r2, r2
 800dd10:	2a09      	cmp	r2, #9
 800dd12:	d9f5      	bls.n	800dd00 <net_aton+0x46>
        else if ((base == 16U) && NET_ISXDIGIT(c0))
 800dd14:	f1be 0f10 	cmp.w	lr, #16
 800dd18:	d115      	bne.n	800dd46 <net_aton+0x8c>
 800dd1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dd1e:	b2d2      	uxtb	r2, r2
 800dd20:	2a05      	cmp	r2, #5
 800dd22:	d904      	bls.n	800dd2e <net_aton+0x74>
 800dd24:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 800dd28:	b2ff      	uxtb	r7, r7
 800dd2a:	2f05      	cmp	r7, #5
 800dd2c:	d80b      	bhi.n	800dd46 <net_aton+0x8c>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 800dd2e:	0109      	lsls	r1, r1, #4
 800dd30:	2a19      	cmp	r2, #25
 800dd32:	d806      	bhi.n	800dd42 <net_aton+0x88>
 800dd34:	2261      	movs	r2, #97	; 0x61
 800dd36:	1a9b      	subs	r3, r3, r2
 800dd38:	330a      	adds	r3, #10
 800dd3a:	4319      	orrs	r1, r3
          c0 = (char_t) * cp;
 800dd3c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800dd40:	e7e3      	b.n	800dd0a <net_aton+0x50>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 800dd42:	2241      	movs	r2, #65	; 0x41
 800dd44:	e7f7      	b.n	800dd36 <net_aton+0x7c>
      if (c0 == '.')
 800dd46:	2b2e      	cmp	r3, #46	; 0x2e
 800dd48:	d00c      	beq.n	800dd64 <net_aton+0xaa>
          c0 = (char_t) * cp;
        }
      }
      else
      {
        done = 1;
 800dd4a:	2001      	movs	r0, #1
    if (done == 1)
 800dd4c:	b9a0      	cbnz	r0, 800dd78 <net_aton+0xbe>
    if (!NET_ISDIGIT(c0))
 800dd4e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	2a09      	cmp	r2, #9
 800dd56:	d8bd      	bhi.n	800dcd4 <net_aton+0x1a>
      if (c0 == '0')
 800dd58:	2b30      	cmp	r3, #48	; 0x30
 800dd5a:	d0be      	beq.n	800dcda <net_aton+0x20>
      base = 10;
 800dd5c:	f04f 0e0a 	mov.w	lr, #10
          base = 8;
 800dd60:	2100      	movs	r1, #0
 800dd62:	e7d2      	b.n	800dd0a <net_aton+0x50>
        if (pp >= (parts + 3))
 800dd64:	aa03      	add	r2, sp, #12
 800dd66:	4294      	cmp	r4, r2
 800dd68:	d2b1      	bcs.n	800dcce <net_aton+0x14>
          *pp = val;
 800dd6a:	f844 1b04 	str.w	r1, [r4], #4
          c0 = (char_t) * cp;
 800dd6e:	f89c 3001 	ldrb.w	r3, [ip, #1]
          ++cp;
 800dd72:	f10c 0c01 	add.w	ip, ip, #1
 800dd76:	e7e9      	b.n	800dd4c <net_aton+0x92>
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (char_t)'\0') && (NET_ISSPACE((c0)) == false))
 800dd78:	b19b      	cbz	r3, 800dda2 <net_aton+0xe8>
 800dd7a:	2b0c      	cmp	r3, #12
 800dd7c:	bf18      	it	ne
 800dd7e:	2b20      	cmpne	r3, #32
 800dd80:	d00f      	beq.n	800dda2 <net_aton+0xe8>
 800dd82:	2b0d      	cmp	r3, #13
 800dd84:	bf14      	ite	ne
 800dd86:	2200      	movne	r2, #0
 800dd88:	2201      	moveq	r2, #1
 800dd8a:	2b0a      	cmp	r3, #10
 800dd8c:	d009      	beq.n	800dda2 <net_aton+0xe8>
 800dd8e:	b942      	cbnz	r2, 800dda2 <net_aton+0xe8>
 800dd90:	2b0b      	cmp	r3, #11
 800dd92:	bf14      	ite	ne
 800dd94:	2200      	movne	r2, #0
 800dd96:	2201      	moveq	r2, #1
 800dd98:	2b09      	cmp	r3, #9
 800dd9a:	d002      	beq.n	800dda2 <net_aton+0xe8>
 800dd9c:	b90a      	cbnz	r2, 800dda2 <net_aton+0xe8>
  {
    ret = 0;
 800dd9e:	2500      	movs	r5, #0
 800dda0:	e011      	b.n	800ddc6 <net_aton+0x10c>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 800dda2:	466b      	mov	r3, sp
 800dda4:	1ae3      	subs	r3, r4, r3
 800dda6:	109b      	asrs	r3, r3, #2
 800dda8:	2b03      	cmp	r3, #3
 800ddaa:	d834      	bhi.n	800de16 <net_aton+0x15c>
 800ddac:	e8df f003 	tbb	[pc, r3]
 800ddb0:	180e0209 	.word	0x180e0209

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 800ddb4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800ddb8:	d300      	bcc.n	800ddbc <net_aton+0x102>
        {
          ret = 0;
 800ddba:	2500      	movs	r5, #0
        }
        val |= parts[0] << 24;
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        ret = 0;
        break;
    }
  }

  if (ret == 1)
 800ddc2:	2d01      	cmp	r5, #1
 800ddc4:	d018      	beq.n	800ddf8 <net_aton+0x13e>
    {
      addr->addr = NET_HTONL(val);
    }
  }
  return ret;
}
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	b005      	add	sp, #20
 800ddca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (val > 0xffffU)
 800ddcc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800ddd0:	d223      	bcs.n	800de1a <net_aton+0x160>
        val |= (parts[0] << 24) | (parts[1] << 16);
 800ddd2:	9b01      	ldr	r3, [sp, #4]
 800ddd4:	041b      	lsls	r3, r3, #16
 800ddd6:	9a00      	ldr	r2, [sp, #0]
 800ddd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dddc:	4319      	orrs	r1, r3
        break;
 800ddde:	e7f0      	b.n	800ddc2 <net_aton+0x108>
        if (val > 0xffU)
 800dde0:	29ff      	cmp	r1, #255	; 0xff
 800dde2:	d81c      	bhi.n	800de1e <net_aton+0x164>
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800dde4:	9b01      	ldr	r3, [sp, #4]
 800dde6:	041b      	lsls	r3, r3, #16
 800dde8:	9a00      	ldr	r2, [sp, #0]
 800ddea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ddee:	9a02      	ldr	r2, [sp, #8]
 800ddf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ddf4:	4319      	orrs	r1, r3
        break;
 800ddf6:	e7e4      	b.n	800ddc2 <net_aton+0x108>
    if (addr != NULL)
 800ddf8:	2e00      	cmp	r6, #0
 800ddfa:	d0e4      	beq.n	800ddc6 <net_aton+0x10c>
      addr->addr = NET_HTONL(val);
 800ddfc:	0a0b      	lsrs	r3, r1, #8
 800ddfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de02:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800de06:	020a      	lsls	r2, r1, #8
 800de08:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800de0c:	4313      	orrs	r3, r2
 800de0e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 800de12:	6031      	str	r1, [r6, #0]
 800de14:	e7d7      	b.n	800ddc6 <net_aton+0x10c>
    switch (pp - parts + 1)
 800de16:	2500      	movs	r5, #0
 800de18:	e7d5      	b.n	800ddc6 <net_aton+0x10c>
          ret = 0;
 800de1a:	2500      	movs	r5, #0
 800de1c:	e7d3      	b.n	800ddc6 <net_aton+0x10c>
          ret = 0;
 800de1e:	2500      	movs	r5, #0
  return ret;
 800de20:	e7d1      	b.n	800ddc6 <net_aton+0x10c>

0800de22 <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 800de22:	6840      	ldr	r0, [r0, #4]
 800de24:	4770      	bx	lr
	...

0800de28 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 800de2c:	493d      	ldr	r1, [pc, #244]	; (800df24 <net_wifi_string_to_security+0xfc>)
 800de2e:	f7f2 fa5f 	bl	80002f0 <strcmp>
 800de32:	2800      	cmp	r0, #0
 800de34:	d071      	beq.n	800df1a <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 800de36:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 800de3a:	493b      	ldr	r1, [pc, #236]	; (800df28 <net_wifi_string_to_security+0x100>)
 800de3c:	4620      	mov	r0, r4
 800de3e:	f7f2 fa57 	bl	80002f0 <strcmp>
 800de42:	b908      	cbnz	r0, 800de48 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 800de44:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 800de48:	4938      	ldr	r1, [pc, #224]	; (800df2c <net_wifi_string_to_security+0x104>)
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7f2 fa50 	bl	80002f0 <strcmp>
 800de50:	b900      	cbnz	r0, 800de54 <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 800de52:	4d37      	ldr	r5, [pc, #220]	; (800df30 <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 800de54:	4937      	ldr	r1, [pc, #220]	; (800df34 <net_wifi_string_to_security+0x10c>)
 800de56:	4620      	mov	r0, r4
 800de58:	f7f2 fa4a 	bl	80002f0 <strcmp>
 800de5c:	b900      	cbnz	r0, 800de60 <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 800de5e:	4d36      	ldr	r5, [pc, #216]	; (800df38 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 800de60:	4936      	ldr	r1, [pc, #216]	; (800df3c <net_wifi_string_to_security+0x114>)
 800de62:	4620      	mov	r0, r4
 800de64:	f7f2 fa44 	bl	80002f0 <strcmp>
 800de68:	b900      	cbnz	r0, 800de6c <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 800de6a:	4d35      	ldr	r5, [pc, #212]	; (800df40 <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 800de6c:	4935      	ldr	r1, [pc, #212]	; (800df44 <net_wifi_string_to_security+0x11c>)
 800de6e:	4620      	mov	r0, r4
 800de70:	f7f2 fa3e 	bl	80002f0 <strcmp>
 800de74:	b900      	cbnz	r0, 800de78 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 800de76:	4d34      	ldr	r5, [pc, #208]	; (800df48 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 800de78:	4934      	ldr	r1, [pc, #208]	; (800df4c <net_wifi_string_to_security+0x124>)
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7f2 fa38 	bl	80002f0 <strcmp>
 800de80:	b900      	cbnz	r0, 800de84 <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 800de82:	4d33      	ldr	r5, [pc, #204]	; (800df50 <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 800de84:	4933      	ldr	r1, [pc, #204]	; (800df54 <net_wifi_string_to_security+0x12c>)
 800de86:	4620      	mov	r0, r4
 800de88:	f7f2 fa32 	bl	80002f0 <strcmp>
 800de8c:	b900      	cbnz	r0, 800de90 <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 800de8e:	4d32      	ldr	r5, [pc, #200]	; (800df58 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 800de90:	4932      	ldr	r1, [pc, #200]	; (800df5c <net_wifi_string_to_security+0x134>)
 800de92:	4620      	mov	r0, r4
 800de94:	f7f2 fa2c 	bl	80002f0 <strcmp>
 800de98:	b900      	cbnz	r0, 800de9c <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 800de9a:	4d31      	ldr	r5, [pc, #196]	; (800df60 <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 800de9c:	4931      	ldr	r1, [pc, #196]	; (800df64 <net_wifi_string_to_security+0x13c>)
 800de9e:	4620      	mov	r0, r4
 800dea0:	f7f2 fa26 	bl	80002f0 <strcmp>
 800dea4:	b900      	cbnz	r0, 800dea8 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 800dea6:	4d30      	ldr	r5, [pc, #192]	; (800df68 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 800dea8:	4930      	ldr	r1, [pc, #192]	; (800df6c <net_wifi_string_to_security+0x144>)
 800deaa:	4620      	mov	r0, r4
 800deac:	f7f2 fa20 	bl	80002f0 <strcmp>
 800deb0:	b900      	cbnz	r0, 800deb4 <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 800deb2:	4d2f      	ldr	r5, [pc, #188]	; (800df70 <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 800deb4:	492f      	ldr	r1, [pc, #188]	; (800df74 <net_wifi_string_to_security+0x14c>)
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7f2 fa1a 	bl	80002f0 <strcmp>
 800debc:	b900      	cbnz	r0, 800dec0 <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 800debe:	4d2e      	ldr	r5, [pc, #184]	; (800df78 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 800dec0:	492e      	ldr	r1, [pc, #184]	; (800df7c <net_wifi_string_to_security+0x154>)
 800dec2:	4620      	mov	r0, r4
 800dec4:	f7f2 fa14 	bl	80002f0 <strcmp>
 800dec8:	b900      	cbnz	r0, 800decc <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 800deca:	4d2d      	ldr	r5, [pc, #180]	; (800df80 <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 800decc:	492d      	ldr	r1, [pc, #180]	; (800df84 <net_wifi_string_to_security+0x15c>)
 800dece:	4620      	mov	r0, r4
 800ded0:	f7f2 fa0e 	bl	80002f0 <strcmp>
 800ded4:	b900      	cbnz	r0, 800ded8 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 800ded6:	4d2c      	ldr	r5, [pc, #176]	; (800df88 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 800ded8:	492c      	ldr	r1, [pc, #176]	; (800df8c <net_wifi_string_to_security+0x164>)
 800deda:	4620      	mov	r0, r4
 800dedc:	f7f2 fa08 	bl	80002f0 <strcmp>
 800dee0:	b900      	cbnz	r0, 800dee4 <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 800dee2:	4d2b      	ldr	r5, [pc, #172]	; (800df90 <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 800dee4:	492b      	ldr	r1, [pc, #172]	; (800df94 <net_wifi_string_to_security+0x16c>)
 800dee6:	4620      	mov	r0, r4
 800dee8:	f7f2 fa02 	bl	80002f0 <strcmp>
 800deec:	b900      	cbnz	r0, 800def0 <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 800deee:	4d2a      	ldr	r5, [pc, #168]	; (800df98 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 800def0:	492a      	ldr	r1, [pc, #168]	; (800df9c <net_wifi_string_to_security+0x174>)
 800def2:	4620      	mov	r0, r4
 800def4:	f7f2 f9fc 	bl	80002f0 <strcmp>
 800def8:	b908      	cbnz	r0, 800defe <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 800defa:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 800defe:	4928      	ldr	r1, [pc, #160]	; (800dfa0 <net_wifi_string_to_security+0x178>)
 800df00:	4620      	mov	r0, r4
 800df02:	f7f2 f9f5 	bl	80002f0 <strcmp>
 800df06:	b908      	cbnz	r0, 800df0c <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 800df08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 800df0c:	4925      	ldr	r1, [pc, #148]	; (800dfa4 <net_wifi_string_to_security+0x17c>)
 800df0e:	4620      	mov	r0, r4
 800df10:	f7f2 f9ee 	bl	80002f0 <strcmp>
 800df14:	b118      	cbz	r0, 800df1e <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 800df16:	4628      	mov	r0, r5
 800df18:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 800df1a:	2500      	movs	r5, #0
 800df1c:	e78d      	b.n	800de3a <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 800df1e:	4d22      	ldr	r5, [pc, #136]	; (800dfa8 <net_wifi_string_to_security+0x180>)
  return ret;
 800df20:	e7f9      	b.n	800df16 <net_wifi_string_to_security+0xee>
 800df22:	bf00      	nop
 800df24:	0801eb28 	.word	0x0801eb28
 800df28:	0801edb4 	.word	0x0801edb4
 800df2c:	0801edc0 	.word	0x0801edc0
 800df30:	00200002 	.word	0x00200002
 800df34:	0801edcc 	.word	0x0801edcc
 800df38:	00200006 	.word	0x00200006
 800df3c:	0801edd8 	.word	0x0801edd8
 800df40:	00400004 	.word	0x00400004
 800df44:	0801ede4 	.word	0x0801ede4
 800df48:	00400002 	.word	0x00400002
 800df4c:	0801ee84 	.word	0x0801ee84
 800df50:	00400006 	.word	0x00400006
 800df54:	0801ee90 	.word	0x0801ee90
 800df58:	40400004 	.word	0x40400004
 800df5c:	0801ee08 	.word	0x0801ee08
 800df60:	01000004 	.word	0x01000004
 800df64:	0801ee10 	.word	0x0801ee10
 800df68:	01400004 	.word	0x01400004
 800df6c:	0801ee1c 	.word	0x0801ee1c
 800df70:	02200002 	.word	0x02200002
 800df74:	0801ee2c 	.word	0x0801ee2c
 800df78:	02200004 	.word	0x02200004
 800df7c:	0801ee38 	.word	0x0801ee38
 800df80:	02400002 	.word	0x02400002
 800df84:	0801ee48 	.word	0x0801ee48
 800df88:	02400004 	.word	0x02400004
 800df8c:	0801ee58 	.word	0x0801ee58
 800df90:	02400006 	.word	0x02400006
 800df94:	0801ee68 	.word	0x0801ee68
 800df98:	42400004 	.word	0x42400004
 800df9c:	0801ee74 	.word	0x0801ee74
 800dfa0:	0801ee78 	.word	0x0801ee78
 800dfa4:	0801ee7c 	.word	0x0801ee7c
 800dfa8:	10000004 	.word	0x10000004

0800dfac <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	460d      	mov	r5, r1
 800dfb0:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800dfb2:	f000 f861 	bl	800e078 <netif_check>
  if (pnetif == NULL)
 800dfb6:	b150      	cbz	r0, 800dfce <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 800dfb8:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800dfbc:	7811      	ldrb	r1, [r2, #0]
 800dfbe:	b949      	cbnz	r1, 800dfd4 <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 800dfc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dfc2:	6816      	ldr	r6, [r2, #0]
 800dfc4:	4622      	mov	r2, r4
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	47b0      	blx	r6
 800dfca:	b930      	cbnz	r0, 800dfda <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 800dfcc:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 800dfce:	f06f 0003 	mvn.w	r0, #3
 800dfd2:	e7fb      	b.n	800dfcc <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 800dfd4:	f06f 0003 	mvn.w	r0, #3
 800dfd8:	e7f8      	b.n	800dfcc <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 800dfda:	f06f 001c 	mvn.w	r0, #28
  return ret;
 800dfde:	e7f5      	b.n	800dfcc <net_wifi_scan+0x20>

0800dfe0 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	460d      	mov	r5, r1
 800dfe4:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800dfe6:	f000 f847 	bl	800e078 <netif_check>
  if (pnetif == NULL)
 800dfea:	b148      	cbz	r0, 800e000 <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 800dfec:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800dff0:	7811      	ldrb	r1, [r2, #0]
 800dff2:	b941      	cbnz	r1, 800e006 <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 800dff4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dff6:	6856      	ldr	r6, [r2, #4]
 800dff8:	4622      	mov	r2, r4
 800dffa:	4629      	mov	r1, r5
 800dffc:	47b0      	blx	r6
  }
  return ret;
}
 800dffe:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 800e000:	f06f 0003 	mvn.w	r0, #3
 800e004:	e7fb      	b.n	800dffe <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 800e006:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800e00a:	e7f8      	b.n	800dffe <net_wifi_get_scan_results+0x1e>

0800e00c <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 800e00c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e012:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 800e014:	2000      	movs	r0, #0
 800e016:	4770      	bx	lr

0800e018 <netif_add_to_list>:
#endif /* IO */

static void netif_add_to_list(net_if_handle_t *pnetif)
{
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 800e018:	4b05      	ldr	r3, [pc, #20]	; (800e030 <netif_add_to_list+0x18>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	b12b      	cbz	r3, 800e02a <netif_add_to_list+0x12>
  else
  {
    /*add it to end of the list*/
    net_if_handle_t *plastnetif;
    plastnetif = net_if_list;
    while (plastnetif->next != NULL)
 800e01e:	461a      	mov	r2, r3
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1fb      	bne.n	800e01e <netif_add_to_list+0x6>
    {
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
 800e026:	6010      	str	r0, [r2, #0]
  }
  UNLOCK_NETIF_LIST();
}
 800e028:	4770      	bx	lr
    net_if_list = pnetif;
 800e02a:	4b01      	ldr	r3, [pc, #4]	; (800e030 <netif_add_to_list+0x18>)
 800e02c:	6018      	str	r0, [r3, #0]
 800e02e:	4770      	bx	lr
 800e030:	2400b8d0 	.word	0x2400b8d0

0800e034 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 800e034:	b510      	push	{r4, lr}
 800e036:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 800e038:	2300      	movs	r3, #0
 800e03a:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 800e03c:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 800e03e:	b110      	cbz	r0, 800e046 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 800e040:	f7ff feef 	bl	800de22 <net_get_ip_addr>
 800e044:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 800e046:	4b0b      	ldr	r3, [pc, #44]	; (800e074 <net_if_find+0x40>)
 800e048:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 800e04a:	2204      	movs	r2, #4
 800e04c:	4669      	mov	r1, sp
 800e04e:	eb0d 0002 	add.w	r0, sp, r2
 800e052:	f00e faf5 	bl	801c640 <memcmp>
 800e056:	b148      	cbz	r0, 800e06c <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 800e058:	2204      	movs	r2, #4
 800e05a:	eb0d 0102 	add.w	r1, sp, r2
 800e05e:	18a0      	adds	r0, r4, r2
 800e060:	f00e faee 	bl	801c640 <memcmp>
 800e064:	b110      	cbz	r0, 800e06c <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 800e066:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 800e068:	2c00      	cmp	r4, #0
 800e06a:	d1f5      	bne.n	800e058 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 800e06c:	4620      	mov	r0, r4
 800e06e:	b002      	add	sp, #8
 800e070:	bd10      	pop	{r4, pc}
 800e072:	bf00      	nop
 800e074:	2400b8d0 	.word	0x2400b8d0

0800e078 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 800e078:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 800e07a:	b100      	cbz	r0, 800e07e <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 800e07c:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 800e07e:	2000      	movs	r0, #0
 800e080:	f7ff ffd8 	bl	800e034 <net_if_find>
    if (pnetif == NULL)
 800e084:	e7fa      	b.n	800e07c <netif_check+0x4>

0800e086 <net_if_wait_state>:
  * @retval 0 in case of success, an error code otherwise
  */
extern uint32_t HAL_GetTick(void);

int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 800e086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e088:	4604      	mov	r4, r0
 800e08a:	460d      	mov	r5, r1
 800e08c:	4617      	mov	r7, r2
  int32_t  ret = NET_OK;
  __IO net_state_t      *p;
  p = &pnetif->state;

  uint32_t start_time = HAL_GetTick();
 800e08e:	f7f8 fcef 	bl	8006a70 <HAL_GetTick>
 800e092:	4606      	mov	r6, r0
  while (*p != state)
 800e094:	e005      	b.n	800e0a2 <net_if_wait_state+0x1c>
    if (HAL_GetTick() >= (start_time + timeout))
    {
      ret = NET_TIMEOUT;
      break;
    }
    WAIT_STATE_CHANGE(timeout);
 800e096:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	210a      	movs	r1, #10
 800e09e:	4620      	mov	r0, r4
 800e0a0:	4798      	blx	r3
  while (*p != state)
 800e0a2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	42ab      	cmp	r3, r5
 800e0aa:	d007      	beq.n	800e0bc <net_if_wait_state+0x36>
    if (HAL_GetTick() >= (start_time + timeout))
 800e0ac:	f7f8 fce0 	bl	8006a70 <HAL_GetTick>
 800e0b0:	19f3      	adds	r3, r6, r7
 800e0b2:	4298      	cmp	r0, r3
 800e0b4:	d3ef      	bcc.n	800e096 <net_if_wait_state+0x10>
      ret = NET_TIMEOUT;
 800e0b6:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret;
 800e0ba:	e000      	b.n	800e0be <net_if_wait_state+0x38>
  int32_t  ret = NET_OK;
 800e0bc:	2000      	movs	r0, #0

}
 800e0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0c0 <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 800e0c0:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 800e0c4:	b128      	cbz	r0, 800e0d2 <net_if_notify+0x12>
{
 800e0c6:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 800e0c8:	6804      	ldr	r4, [r0, #0]
 800e0ca:	b10c      	cbz	r4, 800e0d0 <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 800e0cc:	6840      	ldr	r0, [r0, #4]
 800e0ce:	47a0      	blx	r4
  }
}
 800e0d0:	bd10      	pop	{r4, pc}
 800e0d2:	4770      	bx	lr

0800e0d4 <net_if_init>:
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 800e0d4:	b168      	cbz	r0, 800e0f2 <net_if_init+0x1e>
{
 800e0d6:	b538      	push	{r3, r4, r5, lr}
 800e0d8:	460d      	mov	r5, r1
 800e0da:	4604      	mov	r4, r0
  {
    pnetif->event_handler = event_handler;
 800e0dc:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	f880 30ea 	strb.w	r3, [r0, #234]	; 0xea
    netif_add_to_list(pnetif);
 800e0e6:	f7ff ff97 	bl	800e018 <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	47a8      	blx	r5
    if (NET_OK != ret)
 800e0ee:	b918      	cbnz	r0, 800e0f8 <net_if_init+0x24>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
  }
  return ret;
}
 800e0f0:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 800e0f2:	f06f 0003 	mvn.w	r0, #3
}
 800e0f6:	4770      	bx	lr
      ret = NET_ERROR_INTERFACE_FAILURE;
 800e0f8:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800e0fc:	e7f8      	b.n	800e0f0 <net_if_init+0x1c>

0800e0fe <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 800e0fe:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 800e100:	2101      	movs	r1, #1
 800e102:	f000 f8ab 	bl	800e25c <net_state_manage_event>
}
 800e106:	bd08      	pop	{r3, pc}

0800e108 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 800e108:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 800e10a:	2102      	movs	r1, #2
 800e10c:	f000 f8a6 	bl	800e25c <net_state_manage_event>
}
 800e110:	bd08      	pop	{r3, pc}

0800e112 <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 800e112:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 800e114:	2103      	movs	r1, #3
 800e116:	f000 f8a1 	bl	800e25c <net_state_manage_event>
}
 800e11a:	bd08      	pop	{r3, pc}

0800e11c <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 800e11c:	b508      	push	{r3, lr}
 800e11e:	460a      	mov	r2, r1
  pnetif->state = state;
 800e120:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 800e124:	2300      	movs	r3, #0
 800e126:	4619      	mov	r1, r3
 800e128:	f7ff ffca 	bl	800e0c0 <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 800e12c:	bd08      	pop	{r3, pc}

0800e12e <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 800e12e:	b538      	push	{r3, r4, r5, lr}
 800e130:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800e132:	2901      	cmp	r1, #1
 800e134:	d004      	beq.n	800e140 <net_state_initialized+0x12>
 800e136:	2905      	cmp	r1, #5
 800e138:	d010      	beq.n	800e15c <net_state_initialized+0x2e>
 800e13a:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 800e13c:	4628      	mov	r0, r5
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 800e140:	2102      	movs	r1, #2
 800e142:	f7ff ffeb 	bl	800e11c <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 800e146:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	4620      	mov	r0, r4
 800e14e:	4798      	blx	r3
      if (NET_OK != ret)
 800e150:	4605      	mov	r5, r0
 800e152:	2800      	cmp	r0, #0
 800e154:	d0f2      	beq.n	800e13c <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e156:	f06f 0510 	mvn.w	r5, #16
 800e15a:	e7ef      	b.n	800e13c <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 800e15c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	4798      	blx	r3
 800e164:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 800e166:	2100      	movs	r1, #0
 800e168:	4620      	mov	r0, r4
 800e16a:	f7ff ffd7 	bl	800e11c <set_state>
      if (NET_OK != ret)
 800e16e:	2d00      	cmp	r5, #0
 800e170:	d0e4      	beq.n	800e13c <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e172:	f06f 0510 	mvn.w	r5, #16
  return ret;
 800e176:	e7e1      	b.n	800e13c <net_state_initialized+0xe>

0800e178 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800e178:	2907      	cmp	r1, #7
 800e17a:	d001      	beq.n	800e180 <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 800e17c:	2000      	movs	r0, #0
 800e17e:	4770      	bx	lr
{
 800e180:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 800e182:	2103      	movs	r1, #3
 800e184:	f7ff ffca 	bl	800e11c <set_state>
}
 800e188:	2000      	movs	r0, #0
 800e18a:	bd08      	pop	{r3, pc}

0800e18c <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 800e18c:	b510      	push	{r4, lr}
 800e18e:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800e190:	2902      	cmp	r1, #2
 800e192:	d003      	beq.n	800e19c <net_state_ready+0x10>
 800e194:	2904      	cmp	r1, #4
 800e196:	d00e      	beq.n	800e1b6 <net_state_ready+0x2a>
 800e198:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 800e19a:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 800e19c:	2104      	movs	r1, #4
 800e19e:	f7ff ffbd 	bl	800e11c <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 800e1a2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	4798      	blx	r3
      if (NET_OK != ret)
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d0f4      	beq.n	800e19a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e1b0:	f06f 0010 	mvn.w	r0, #16
 800e1b4:	e7f1      	b.n	800e19a <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 800e1b6:	2106      	movs	r1, #6
 800e1b8:	f7ff ffb0 	bl	800e11c <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 800e1bc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	4798      	blx	r3
      if (NET_OK != ret)
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d0e7      	beq.n	800e19a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e1ca:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800e1ce:	e7e4      	b.n	800e19a <net_state_ready+0xe>

0800e1d0 <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 800e1d0:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 800e1d2:	2903      	cmp	r1, #3
 800e1d4:	d006      	beq.n	800e1e4 <net_state_connecting+0x14>
 800e1d6:	290a      	cmp	r1, #10
 800e1d8:	d102      	bne.n	800e1e0 <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 800e1da:	2105      	movs	r1, #5
 800e1dc:	f7ff ff9e 	bl	800e11c <set_state>

    default:
      break;
  }
  return ret;
}
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 800e1e4:	2103      	movs	r1, #3
 800e1e6:	f7ff ff99 	bl	800e11c <set_state>
      break;
 800e1ea:	e7f9      	b.n	800e1e0 <net_state_connecting+0x10>

0800e1ec <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800e1f0:	2903      	cmp	r1, #3
 800e1f2:	d003      	beq.n	800e1fc <net_state_connected+0x10>
 800e1f4:	2909      	cmp	r1, #9
 800e1f6:	d00e      	beq.n	800e216 <net_state_connected+0x2a>
 800e1f8:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 800e1fa:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 800e1fc:	2107      	movs	r1, #7
 800e1fe:	f7ff ff8d 	bl	800e11c <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 800e202:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e206:	69db      	ldr	r3, [r3, #28]
 800e208:	4620      	mov	r0, r4
 800e20a:	4798      	blx	r3
      if (NET_OK != ret)
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d0f4      	beq.n	800e1fa <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e210:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800e214:	e7f1      	b.n	800e1fa <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 800e216:	2108      	movs	r1, #8
 800e218:	f7ff ff80 	bl	800e11c <set_state>
  int32_t       ret = NET_OK;
 800e21c:	2000      	movs	r0, #0
      break;
 800e21e:	e7ec      	b.n	800e1fa <net_state_connected+0xe>

0800e220 <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800e220:	2907      	cmp	r1, #7
 800e222:	d001      	beq.n	800e228 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 800e224:	2000      	movs	r0, #0
 800e226:	4770      	bx	lr
{
 800e228:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 800e22a:	2103      	movs	r1, #3
 800e22c:	f7ff ff76 	bl	800e11c <set_state>
}
 800e230:	2000      	movs	r0, #0
 800e232:	bd08      	pop	{r3, pc}

0800e234 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800e234:	2908      	cmp	r1, #8
 800e236:	d001      	beq.n	800e23c <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 800e238:	2000      	movs	r0, #0
 800e23a:	4770      	bx	lr
{
 800e23c:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 800e23e:	2105      	movs	r1, #5
 800e240:	f7ff ff6c 	bl	800e11c <set_state>
}
 800e244:	2000      	movs	r0, #0
 800e246:	bd08      	pop	{r3, pc}

0800e248 <net_state_stopping>:
  switch (event)
 800e248:	2906      	cmp	r1, #6
 800e24a:	d001      	beq.n	800e250 <net_state_stopping+0x8>
}
 800e24c:	2000      	movs	r0, #0
 800e24e:	4770      	bx	lr
{
 800e250:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 800e252:	2101      	movs	r1, #1
 800e254:	f7ff ff62 	bl	800e11c <set_state>
}
 800e258:	2000      	movs	r0, #0
 800e25a:	bd08      	pop	{r3, pc}

0800e25c <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 800e25c:	b510      	push	{r4, lr}
 800e25e:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800e260:	f7ff ff0a 	bl	800e078 <netif_check>
  if (pnetif == NULL)
 800e264:	b350      	cbz	r0, 800e2bc <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 800e266:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 800e26a:	3b01      	subs	r3, #1
 800e26c:	2b07      	cmp	r3, #7
 800e26e:	d828      	bhi.n	800e2c2 <net_state_manage_event+0x66>
 800e270:	e8df f003 	tbb	[pc, r3]
 800e274:	100c0804 	.word	0x100c0804
 800e278:	1c182014 	.word	0x1c182014
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 800e27c:	4621      	mov	r1, r4
 800e27e:	f7ff ff56 	bl	800e12e <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 800e282:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 800e284:	4621      	mov	r1, r4
 800e286:	f7ff ff77 	bl	800e178 <net_state_starting>
        break;
 800e28a:	e7fa      	b.n	800e282 <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 800e28c:	4621      	mov	r1, r4
 800e28e:	f7ff ff7d 	bl	800e18c <net_state_ready>
        break;
 800e292:	e7f6      	b.n	800e282 <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 800e294:	4621      	mov	r1, r4
 800e296:	f7ff ff9b 	bl	800e1d0 <net_state_connecting>
        break;
 800e29a:	e7f2      	b.n	800e282 <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 800e29c:	4621      	mov	r1, r4
 800e29e:	f7ff ffa5 	bl	800e1ec <net_state_connected>
        break;
 800e2a2:	e7ee      	b.n	800e282 <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	f7ff ffbb 	bl	800e220 <net_state_disconnecting>
        break;
 800e2aa:	e7ea      	b.n	800e282 <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	f7ff ffc1 	bl	800e234 <net_state_connection_lost>
        break;
 800e2b2:	e7e6      	b.n	800e282 <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	f7ff ffc7 	bl	800e248 <net_state_stopping>
        break;
 800e2ba:	e7e2      	b.n	800e282 <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 800e2bc:	f06f 0003 	mvn.w	r0, #3
 800e2c0:	e7df      	b.n	800e282 <net_state_manage_event+0x26>
    switch (pnetif->state)
 800e2c2:	f06f 001b 	mvn.w	r0, #27
  return ret;
 800e2c6:	e7dc      	b.n	800e282 <net_state_manage_event+0x26>

0800e2c8 <castcontext>:
{
  /*cstat -MISRAC2012-Rule-11.5 */
  return (ES_WIFIObject_t *)context;
  /*cstat +MISRAC2012-Rule-11.5 */

}
 800e2c8:	4770      	bx	lr

0800e2ca <cast2sockaddr_in>:
{
  /*cstat -MISRAC2012-Rule-11.3 -MISRAC2012-Rule-11.8 */
  return (sockaddr_in_t *) addr;
  /*cstat +MISRAC2012-Rule-11.3 +MISRAC2012-Rule-11.8 */

}
 800e2ca:	4770      	bx	lr

0800e2cc <es_wifi_socket>:
static int32_t es_wifi_socket(int32_t domain, int32_t type, int32_t protocol_in)
{
  int32_t ret = NET_OK;
  int32_t protocol = protocol_in;

  if (domain != NET_AF_INET)
 800e2cc:	2802      	cmp	r0, #2
 800e2ce:	d13b      	bne.n	800e348 <es_wifi_socket+0x7c>
    ret = NET_ERROR_UNSUPPORTED;
  }
  else
  {
    /* currently only SOCK_DGRAM and SOCK_STREAM are supported */
    if ((type != (int32_t) NET_SOCK_STREAM) && (type != (int32_t) NET_SOCK_DGRAM))
 800e2d0:	1e4b      	subs	r3, r1, #1
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d83b      	bhi.n	800e34e <es_wifi_socket+0x82>
      ret = NET_ERROR_UNSUPPORTED;
    }
    else
    {
      /* Only support PROT_IP/TCP/UDP/IPV4 are supported */
      if ((protocol != NET_IPPROTO_TCP) && (protocol != NET_IPPROTO_UDP))
 800e2d6:	2a06      	cmp	r2, #6
 800e2d8:	bf18      	it	ne
 800e2da:	2a11      	cmpne	r2, #17
 800e2dc:	d004      	beq.n	800e2e8 <es_wifi_socket+0x1c>
      {
        if (type == (int32_t) NET_SOCK_STREAM)
 800e2de:	2901      	cmp	r1, #1
 800e2e0:	d030      	beq.n	800e344 <es_wifi_socket+0x78>
        {
          protocol = NET_IPPROTO_TCP;
        }
        /*cstat -MISRAC2012-Rule-14.3_a */
        else if (type == (int32_t) NET_SOCK_DGRAM)
 800e2e2:	2902      	cmp	r1, #2
 800e2e4:	d113      	bne.n	800e30e <es_wifi_socket+0x42>
          /*cstat +MISRAC2012-Rule-14.3_a */
        {
          protocol = NET_IPPROTO_UDP;
 800e2e6:	2211      	movs	r2, #17
 800e2e8:	2000      	movs	r0, #0

  if (ret == NET_OK)
  {
    ret = NET_ERROR_INVALID_SOCKET;

    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800e2ea:	2803      	cmp	r0, #3
 800e2ec:	dc32      	bgt.n	800e354 <es_wifi_socket+0x88>
{
 800e2ee:	b410      	push	{r4}
    {
      if (WifiChannel[i].status == WIFI_FREE_SOCKET)
 800e2f0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e2f4:	4c19      	ldr	r4, [pc, #100]	; (800e35c <es_wifi_socket+0x90>)
 800e2f6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e2fa:	785b      	ldrb	r3, [r3, #1]
 800e2fc:	b153      	cbz	r3, 800e314 <es_wifi_socket+0x48>
    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800e2fe:	3001      	adds	r0, #1
 800e300:	2803      	cmp	r0, #3
 800e302:	ddf5      	ble.n	800e2f0 <es_wifi_socket+0x24>
    ret = NET_ERROR_INVALID_SOCKET;
 800e304:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return ret;
}
 800e308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e30c:	4770      	bx	lr
          ret = NET_ERROR_UNSUPPORTED;
 800e30e:	f06f 0002 	mvn.w	r0, #2
 800e312:	4770      	bx	lr
        WifiChannel[i].status = WIFI_ALLOCATED_SOCKET;
 800e314:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e318:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e31c:	2401      	movs	r4, #1
 800e31e:	705c      	strb	r4, [r3, #1]
        if (type == (int32_t) NET_SOCK_DGRAM)
 800e320:	2902      	cmp	r1, #2
 800e322:	d007      	beq.n	800e334 <es_wifi_socket+0x68>
        WifiChannel[i].protocol        = (uint8_t) protocol;
 800e324:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e328:	4c0c      	ldr	r4, [pc, #48]	; (800e35c <es_wifi_socket+0x90>)
 800e32a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e32e:	709a      	strb	r2, [r3, #2]
        WifiChannel[i].type            = (uint8_t) type;
 800e330:	70d9      	strb	r1, [r3, #3]
        break;
 800e332:	e7e9      	b.n	800e308 <es_wifi_socket+0x3c>
          WifiChannel[i].status |= WIFI_SEND_OK | WIFI_RECV_OK;
 800e334:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e338:	4c08      	ldr	r4, [pc, #32]	; (800e35c <es_wifi_socket+0x90>)
 800e33a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e33e:	240d      	movs	r4, #13
 800e340:	705c      	strb	r4, [r3, #1]
 800e342:	e7ef      	b.n	800e324 <es_wifi_socket+0x58>
          protocol = NET_IPPROTO_TCP;
 800e344:	2206      	movs	r2, #6
 800e346:	e7cf      	b.n	800e2e8 <es_wifi_socket+0x1c>
    ret = NET_ERROR_UNSUPPORTED;
 800e348:	f06f 0002 	mvn.w	r0, #2
 800e34c:	4770      	bx	lr
      ret = NET_ERROR_UNSUPPORTED;
 800e34e:	f06f 0002 	mvn.w	r0, #2
  return ret;
 800e352:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 800e354:	f06f 0005 	mvn.w	r0, #5
}
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	2400b8d4 	.word	0x2400b8d4

0800e360 <es_wifi_bind>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
static int32_t es_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 800e360:	b570      	push	{r4, r5, r6, lr}
 800e362:	4604      	mov	r4, r0
  int32_t ret;
  sockaddr_in_t *source;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e364:	2803      	cmp	r0, #3
 800e366:	d826      	bhi.n	800e3b6 <es_wifi_bind+0x56>
 800e368:	4608      	mov	r0, r1
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    /* STREAM sockets cannot be bound after connection. */
    if ((WifiChannel [sock].status == WIFI_ALLOCATED_SOCKET)
 800e36a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e36e:	4d18      	ldr	r5, [pc, #96]	; (800e3d0 <es_wifi_bind+0x70>)
 800e370:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e374:	785d      	ldrb	r5, [r3, #1]
 800e376:	2d01      	cmp	r5, #1
 800e378:	d00a      	beq.n	800e390 <es_wifi_bind+0x30>
        || (((WifiChannel [sock].status & WIFI_ALLOCATED_SOCKET) != 0U)
 800e37a:	f015 0f01 	tst.w	r5, #1
 800e37e:	d01d      	beq.n	800e3bc <es_wifi_bind+0x5c>
            && ((uint8_t) WifiChannel [sock].type == (uint8_t) NET_SOCK_DGRAM)))
 800e380:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e384:	4e12      	ldr	r6, [pc, #72]	; (800e3d0 <es_wifi_bind+0x70>)
 800e386:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e38a:	78db      	ldrb	r3, [r3, #3]
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	d118      	bne.n	800e3c2 <es_wifi_bind+0x62>
    {
      if (addrlen == sizeof(sockaddr_in_t))
 800e390:	2a10      	cmp	r2, #16
 800e392:	d119      	bne.n	800e3c8 <es_wifi_bind+0x68>
      {
        source = cast2sockaddr_in(addr);
 800e394:	f7ff ff99 	bl	800e2ca <cast2sockaddr_in>
        WifiChannel [sock].localport = NET_NTOHS(source->sin_port);
 800e398:	8841      	ldrh	r1, [r0, #2]
 800e39a:	ba49      	rev16	r1, r1
 800e39c:	4b0c      	ldr	r3, [pc, #48]	; (800e3d0 <es_wifi_bind+0x70>)
 800e39e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800e3a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e3a6:	8091      	strh	r1, [r2, #4]
        WifiChannel [sock].localaddress = source->sin_addr.s_addr;
 800e3a8:	6841      	ldr	r1, [r0, #4]
 800e3aa:	6091      	str	r1, [r2, #8]
        WifiChannel [sock].status |= WIFI_BIND_SOCKET;
 800e3ac:	f045 0502 	orr.w	r5, r5, #2
 800e3b0:	7055      	strb	r5, [r2, #1]
        ret = NET_OK;
 800e3b2:	2000      	movs	r0, #0
    {
      ret = NET_ERROR_INVALID_SOCKET;
    }
  }
  return ret;
}
 800e3b4:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 800e3b6:	f06f 0005 	mvn.w	r0, #5
 800e3ba:	e7fb      	b.n	800e3b4 <es_wifi_bind+0x54>
      ret = NET_ERROR_INVALID_SOCKET;
 800e3bc:	f06f 0005 	mvn.w	r0, #5
 800e3c0:	e7f8      	b.n	800e3b4 <es_wifi_bind+0x54>
 800e3c2:	f06f 0005 	mvn.w	r0, #5
 800e3c6:	e7f5      	b.n	800e3b4 <es_wifi_bind+0x54>
        ret = NET_ERROR_PARAMETER;
 800e3c8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800e3cc:	e7f2      	b.n	800e3b4 <es_wifi_bind+0x54>
 800e3ce:	bf00      	nop
 800e3d0:	2400b8d4 	.word	0x2400b8d4

0800e3d4 <es_wifi_shutdown>:
  * @retval socket status
  */
static int32_t es_wifi_shutdown(int32_t sock, int32_t mode)
{
  int32_t       ret;
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e3d4:	2803      	cmp	r0, #3
 800e3d6:	d82f      	bhi.n	800e438 <es_wifi_shutdown+0x64>
  {
    ret =  NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    if ((WifiChannel[sock].status &  WIFI_CONNECTED_SOCKET) != 0U)
 800e3d8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e3dc:	4a19      	ldr	r2, [pc, #100]	; (800e444 <es_wifi_shutdown+0x70>)
 800e3de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e3e2:	785b      	ldrb	r3, [r3, #1]
 800e3e4:	f013 0f10 	tst.w	r3, #16
 800e3e8:	d029      	beq.n	800e43e <es_wifi_shutdown+0x6a>
{
 800e3ea:	b410      	push	{r4}
    {
      if (mode == NET_SHUTDOWN_R)
 800e3ec:	b939      	cbnz	r1, 800e3fe <es_wifi_shutdown+0x2a>
      {
        WifiChannel[sock].status &=  ~WIFI_RECV_OK;
 800e3ee:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800e3f2:	4c14      	ldr	r4, [pc, #80]	; (800e444 <es_wifi_shutdown+0x70>)
 800e3f4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800e3f8:	f023 0308 	bic.w	r3, r3, #8
 800e3fc:	7053      	strb	r3, [r2, #1]
      }
      if (mode == NET_SHUTDOWN_W)
 800e3fe:	2901      	cmp	r1, #1
 800e400:	d005      	beq.n	800e40e <es_wifi_shutdown+0x3a>
      {
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
      }
      if (mode == NET_SHUTDOWN_RW)
 800e402:	2902      	cmp	r1, #2
 800e404:	d00d      	beq.n	800e422 <es_wifi_shutdown+0x4e>
      {
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
      }
    }
    ret = NET_OK;
 800e406:	2000      	movs	r0, #0
  }
  return ret;
}
 800e408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e40c:	4770      	bx	lr
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
 800e40e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e412:	4a0c      	ldr	r2, [pc, #48]	; (800e444 <es_wifi_shutdown+0x70>)
 800e414:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e418:	785a      	ldrb	r2, [r3, #1]
 800e41a:	f022 0204 	bic.w	r2, r2, #4
 800e41e:	705a      	strb	r2, [r3, #1]
 800e420:	e7ef      	b.n	800e402 <es_wifi_shutdown+0x2e>
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
 800e422:	4b08      	ldr	r3, [pc, #32]	; (800e444 <es_wifi_shutdown+0x70>)
 800e424:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800e428:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e42c:	7853      	ldrb	r3, [r2, #1]
 800e42e:	f023 030c 	bic.w	r3, r3, #12
 800e432:	7053      	strb	r3, [r2, #1]
    ret = NET_OK;
 800e434:	2000      	movs	r0, #0
 800e436:	e7e7      	b.n	800e408 <es_wifi_shutdown+0x34>
    ret =  NET_ERROR_INVALID_SOCKET;
 800e438:	f06f 0005 	mvn.w	r0, #5
 800e43c:	4770      	bx	lr
    ret = NET_OK;
 800e43e:	2000      	movs	r0, #0
}
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	2400b8d4 	.word	0x2400b8d4

0800e448 <conv_to_net_security>:


static uint32_t conv_to_net_security(ES_WIFI_SecurityType_t     sec)
{
  uint32_t ret;
  switch (sec)
 800e448:	2805      	cmp	r0, #5
 800e44a:	d80e      	bhi.n	800e46a <conv_to_net_security+0x22>
 800e44c:	e8df f000 	tbb	[pc, r0]
 800e450:	07051003 	.word	0x07051003
 800e454:	0b09      	.short	0x0b09
 800e456:	2000      	movs	r0, #0
 800e458:	4770      	bx	lr
      break;
    case ES_WIFI_SEC_WEP:
      ret = NET_WIFI_SM_WEP_PSK;
      break;
    case ES_WIFI_SEC_WPA:
      ret = NET_WIFI_SM_WPA_MIXED_PSK;
 800e45a:	4806      	ldr	r0, [pc, #24]	; (800e474 <conv_to_net_security+0x2c>)
      break;
 800e45c:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 800e45e:	4806      	ldr	r0, [pc, #24]	; (800e478 <conv_to_net_security+0x30>)
      break;
 800e460:	4770      	bx	lr
    case ES_WIFI_SEC_WPA_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 800e462:	4805      	ldr	r0, [pc, #20]	; (800e478 <conv_to_net_security+0x30>)
      break;
 800e464:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2_TKIP:
      ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 800e466:	4805      	ldr	r0, [pc, #20]	; (800e47c <conv_to_net_security+0x34>)
      break;
 800e468:	4770      	bx	lr
    default :
      ret = NET_WIFI_SM_UNKNOWN;
 800e46a:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 800e46e:	4770      	bx	lr
      ret = NET_WIFI_SM_WEP_PSK;
 800e470:	2001      	movs	r0, #1

  }
  return ret;
}
 800e472:	4770      	bx	lr
 800e474:	00200006 	.word	0x00200006
 800e478:	00400006 	.word	0x00400006
 800e47c:	00400002 	.word	0x00400002

0800e480 <es_wifi_setsockopt>:
  bool          *optbool = (bool *)optvalue;
  /*cstat +MISRAC2012-Rule-11.8 +MISRAC2012-Rule-11.5  */

  (void) level;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e480:	2803      	cmp	r0, #3
 800e482:	d83e      	bhi.n	800e502 <es_wifi_setsockopt+0x82>
  {
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    switch (optname)
 800e484:	f241 0105 	movw	r1, #4101	; 0x1005
 800e488:	428a      	cmp	r2, r1
 800e48a:	d013      	beq.n	800e4b4 <es_wifi_setsockopt+0x34>
 800e48c:	dc05      	bgt.n	800e49a <es_wifi_setsockopt+0x1a>
 800e48e:	2a04      	cmp	r2, #4
 800e490:	d028      	beq.n	800e4e4 <es_wifi_setsockopt+0x64>
 800e492:	2a0e      	cmp	r2, #14
 800e494:	d138      	bne.n	800e508 <es_wifi_setsockopt+0x88>
        }
        break;

      case  NET_SO_TLS_CERT_PROF:
        NET_DBG_ERROR("Ignore this option because it embedded inside Inventek Wifi module and can not be changed\n");
        ret =  NET_OK;
 800e496:	2000      	movs	r0, #0
 800e498:	4770      	bx	lr
    switch (optname)
 800e49a:	f241 0106 	movw	r1, #4102	; 0x1006
 800e49e:	428a      	cmp	r2, r1
 800e4a0:	d135      	bne.n	800e50e <es_wifi_setsockopt+0x8e>
        WifiChannel[sock].recvtimeout = * optint32;
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e4a8:	4b1e      	ldr	r3, [pc, #120]	; (800e524 <es_wifi_setsockopt+0xa4>)
 800e4aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e4ae:	6182      	str	r2, [r0, #24]
        ret = NET_OK;
 800e4b0:	2000      	movs	r0, #0
        break;
 800e4b2:	4770      	bx	lr
        WifiChannel[sock].sendtimeout = *optint32;
 800e4b4:	6819      	ldr	r1, [r3, #0]
 800e4b6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e4ba:	4a1a      	ldr	r2, [pc, #104]	; (800e524 <es_wifi_setsockopt+0xa4>)
 800e4bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e4c0:	6159      	str	r1, [r3, #20]
        if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_UDP)
 800e4c2:	789b      	ldrb	r3, [r3, #2]
 800e4c4:	2b11      	cmp	r3, #17
 800e4c6:	d001      	beq.n	800e4cc <es_wifi_setsockopt+0x4c>
        ret = NET_OK;
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	4770      	bx	lr
          if (WifiChannel[sock].sendtimeout > NET_UDP_MAX_SEND_BLOCK_TO)
 800e4cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e4d0:	dd20      	ble.n	800e514 <es_wifi_setsockopt+0x94>
            WifiChannel[sock].sendtimeout = NET_UDP_MAX_SEND_BLOCK_TO;
 800e4d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e4d6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4de:	6143      	str	r3, [r0, #20]
        ret = NET_OK;
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	4770      	bx	lr
        if (sizeof(bool) != optlen)
 800e4e4:	9a00      	ldr	r2, [sp, #0]
 800e4e6:	2a01      	cmp	r2, #1
 800e4e8:	d116      	bne.n	800e518 <es_wifi_setsockopt+0x98>
          if (*optbool == false)
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	b9bb      	cbnz	r3, 800e51e <es_wifi_setsockopt+0x9e>
            WifiChannel[sock].sendtimeout = 1;
 800e4ee:	4b0d      	ldr	r3, [pc, #52]	; (800e524 <es_wifi_setsockopt+0xa4>)
 800e4f0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800e4f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e4f8:	2101      	movs	r1, #1
 800e4fa:	6151      	str	r1, [r2, #20]
            WifiChannel[sock].recvtimeout = 1;
 800e4fc:	6191      	str	r1, [r2, #24]
          ret =  NET_OK;
 800e4fe:	2000      	movs	r0, #0
 800e500:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 800e502:	f06f 0005 	mvn.w	r0, #5
 800e506:	4770      	bx	lr
    switch (optname)
 800e508:	f06f 0003 	mvn.w	r0, #3
 800e50c:	4770      	bx	lr
 800e50e:	f06f 0003 	mvn.w	r0, #3
 800e512:	4770      	bx	lr
        ret = NET_OK;
 800e514:	2000      	movs	r0, #0
 800e516:	4770      	bx	lr
          ret = NET_ERROR_PARAMETER;
 800e518:	f06f 0003 	mvn.w	r0, #3
 800e51c:	4770      	bx	lr
          ret =  NET_OK;
 800e51e:	2000      	movs	r0, #0
      default :
        break;
    }
  }
  return ret;
}
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	2400b8d4 	.word	0x2400b8d4

0800e528 <es_wifi_getsockopt>:
  (void) optname;
  (void) optvalue;
  (void) optlen;

  return NET_ERROR_UNSUPPORTED;
}
 800e528:	f06f 0002 	mvn.w	r0, #2
 800e52c:	4770      	bx	lr

0800e52e <es_wifi_scan>:
{
  (void) mode;
  (void) pnetif;
  (void) ssid;
  return 0;
}
 800e52e:	2000      	movs	r0, #0
 800e530:	4770      	bx	lr

0800e532 <es_wifi_if_deinit>:
{
 800e532:	b538      	push	{r3, r4, r5, lr}
 800e534:	4604      	mov	r4, r0
  NET_FREE(pnetif->pdrv->extension.wifi);
 800e536:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e53a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e53c:	f00e f878 	bl	801c630 <free>
  pnetif->pdrv->extension.wifi = NULL;
 800e540:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e544:	2500      	movs	r5, #0
 800e546:	675d      	str	r5, [r3, #116]	; 0x74
  NET_FREE(pnetif->pdrv);
 800e548:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 800e54c:	f00e f870 	bl	801c630 <free>
  pnetif->pdrv = NULL;
 800e550:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 800e554:	4628      	mov	r0, r5
 800e556:	bd38      	pop	{r3, r4, r5, pc}

0800e558 <es_wifi_if_init>:
{
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	4605      	mov	r5, r0
  net_if_drv_t *p = NET_MALLOC(sizeof(net_if_drv_t));
 800e55c:	2084      	movs	r0, #132	; 0x84
 800e55e:	f00e f85f 	bl	801c620 <malloc>
  if (p != NULL)
 800e562:	2800      	cmp	r0, #0
 800e564:	d04c      	beq.n	800e600 <es_wifi_if_init+0xa8>
 800e566:	4604      	mov	r4, r0
    p->if_class = NET_INTERFACE_CLASS_WIFI;
 800e568:	2300      	movs	r3, #0
 800e56a:	7003      	strb	r3, [r0, #0]
    p->if_init = es_wifi_if_init;
 800e56c:	4b26      	ldr	r3, [pc, #152]	; (800e608 <es_wifi_if_init+0xb0>)
 800e56e:	6043      	str	r3, [r0, #4]
    p->if_deinit = es_wifi_if_deinit;
 800e570:	4b26      	ldr	r3, [pc, #152]	; (800e60c <es_wifi_if_init+0xb4>)
 800e572:	6083      	str	r3, [r0, #8]
    p->if_start = es_wifi_if_start;
 800e574:	4b26      	ldr	r3, [pc, #152]	; (800e610 <es_wifi_if_init+0xb8>)
 800e576:	60c3      	str	r3, [r0, #12]
    p->if_stop = es_wifi_if_stop;
 800e578:	4b26      	ldr	r3, [pc, #152]	; (800e614 <es_wifi_if_init+0xbc>)
 800e57a:	6103      	str	r3, [r0, #16]
    p->if_connect = es_wifi_if_connect;
 800e57c:	4b26      	ldr	r3, [pc, #152]	; (800e618 <es_wifi_if_init+0xc0>)
 800e57e:	6183      	str	r3, [r0, #24]
    p->if_disconnect = es_wifi_if_disconnect;
 800e580:	4b26      	ldr	r3, [pc, #152]	; (800e61c <es_wifi_if_init+0xc4>)
 800e582:	61c3      	str	r3, [r0, #28]
    p->psocket = es_wifi_socket;
 800e584:	4b26      	ldr	r3, [pc, #152]	; (800e620 <es_wifi_if_init+0xc8>)
 800e586:	6303      	str	r3, [r0, #48]	; 0x30
    p->pbind = es_wifi_bind;
 800e588:	4b26      	ldr	r3, [pc, #152]	; (800e624 <es_wifi_if_init+0xcc>)
 800e58a:	6343      	str	r3, [r0, #52]	; 0x34
    p->plisten = es_wifi_listen;
 800e58c:	4b26      	ldr	r3, [pc, #152]	; (800e628 <es_wifi_if_init+0xd0>)
 800e58e:	6383      	str	r3, [r0, #56]	; 0x38
    p->paccept = es_wifi_accept;
 800e590:	4b26      	ldr	r3, [pc, #152]	; (800e62c <es_wifi_if_init+0xd4>)
 800e592:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->pconnect = es_wifi_connect;
 800e594:	4b26      	ldr	r3, [pc, #152]	; (800e630 <es_wifi_if_init+0xd8>)
 800e596:	6403      	str	r3, [r0, #64]	; 0x40
    p->psend = es_wifi_send;
 800e598:	4b26      	ldr	r3, [pc, #152]	; (800e634 <es_wifi_if_init+0xdc>)
 800e59a:	6443      	str	r3, [r0, #68]	; 0x44
    p->precv = es_wifi_recv;
 800e59c:	4b26      	ldr	r3, [pc, #152]	; (800e638 <es_wifi_if_init+0xe0>)
 800e59e:	6483      	str	r3, [r0, #72]	; 0x48
    p->psendto = es_wifi_sendto;
 800e5a0:	4b26      	ldr	r3, [pc, #152]	; (800e63c <es_wifi_if_init+0xe4>)
 800e5a2:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->precvfrom = es_wifi_recvfrom;
 800e5a4:	4b26      	ldr	r3, [pc, #152]	; (800e640 <es_wifi_if_init+0xe8>)
 800e5a6:	6503      	str	r3, [r0, #80]	; 0x50
    p->psetsockopt = es_wifi_setsockopt;
 800e5a8:	4b26      	ldr	r3, [pc, #152]	; (800e644 <es_wifi_if_init+0xec>)
 800e5aa:	6543      	str	r3, [r0, #84]	; 0x54
    p->pgetsockopt = es_wifi_getsockopt;
 800e5ac:	4b26      	ldr	r3, [pc, #152]	; (800e648 <es_wifi_if_init+0xf0>)
 800e5ae:	6583      	str	r3, [r0, #88]	; 0x58
    p->pgetsockname = es_wifi_getsockname;
 800e5b0:	4b26      	ldr	r3, [pc, #152]	; (800e64c <es_wifi_if_init+0xf4>)
 800e5b2:	65c3      	str	r3, [r0, #92]	; 0x5c
    p->pgetpeername = es_wifi_getpeername;
 800e5b4:	4b26      	ldr	r3, [pc, #152]	; (800e650 <es_wifi_if_init+0xf8>)
 800e5b6:	6603      	str	r3, [r0, #96]	; 0x60
    p->pclose = es_wifi_close;
 800e5b8:	4b26      	ldr	r3, [pc, #152]	; (800e654 <es_wifi_if_init+0xfc>)
 800e5ba:	6643      	str	r3, [r0, #100]	; 0x64
    p->pshutdown = es_wifi_shutdown;
 800e5bc:	4b26      	ldr	r3, [pc, #152]	; (800e658 <es_wifi_if_init+0x100>)
 800e5be:	6683      	str	r3, [r0, #104]	; 0x68
    p->pgethostbyname = es_wifi_gethostbyname;
 800e5c0:	4b26      	ldr	r3, [pc, #152]	; (800e65c <es_wifi_if_init+0x104>)
 800e5c2:	66c3      	str	r3, [r0, #108]	; 0x6c
    p->pping = es_wifi_ping;
 800e5c4:	4b26      	ldr	r3, [pc, #152]	; (800e660 <es_wifi_if_init+0x108>)
 800e5c6:	6703      	str	r3, [r0, #112]	; 0x70
    pextwifi = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 800e5c8:	2024      	movs	r0, #36	; 0x24
 800e5ca:	f00e f829 	bl	801c620 <malloc>
    if (NULL == pextwifi)
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	b180      	cbz	r0, 800e5f4 <es_wifi_if_init+0x9c>
      (void) memset(pextwifi, 0, sizeof(net_if_wifi_class_extension_t));
 800e5d2:	2224      	movs	r2, #36	; 0x24
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	f00e f851 	bl	801c67c <memset>
      pnetif->pdrv = p;
 800e5da:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
      p->extension.wifi = pextwifi;
 800e5de:	6766      	str	r6, [r4, #116]	; 0x74
      p->extension.wifi->scan = es_wifi_scan;
 800e5e0:	4b20      	ldr	r3, [pc, #128]	; (800e664 <es_wifi_if_init+0x10c>)
 800e5e2:	6033      	str	r3, [r6, #0]
      p->extension.wifi->get_scan_results = es_wifi_get_scan_results;
 800e5e4:	4b20      	ldr	r3, [pc, #128]	; (800e668 <es_wifi_if_init+0x110>)
 800e5e6:	6073      	str	r3, [r6, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 800e5e8:	2106      	movs	r1, #6
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f7ff fe36 	bl	800e25c <net_state_manage_event>
      ret = NET_OK;
 800e5f0:	2000      	movs	r0, #0
}
 800e5f2:	bd70      	pop	{r4, r5, r6, pc}
      NET_FREE(p);
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f00e f81b 	bl	801c630 <free>
      ret = NET_ERROR_NO_MEMORY;
 800e5fa:	f06f 0007 	mvn.w	r0, #7
 800e5fe:	e7f8      	b.n	800e5f2 <es_wifi_if_init+0x9a>
    ret = NET_ERROR_NO_MEMORY;
 800e600:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800e604:	e7f5      	b.n	800e5f2 <es_wifi_if_init+0x9a>
 800e606:	bf00      	nop
 800e608:	0800e559 	.word	0x0800e559
 800e60c:	0800e533 	.word	0x0800e533
 800e610:	0800f00d 	.word	0x0800f00d
 800e614:	0800e66d 	.word	0x0800e66d
 800e618:	0800f21d 	.word	0x0800f21d
 800e61c:	0800efed 	.word	0x0800efed
 800e620:	0800e2cd 	.word	0x0800e2cd
 800e624:	0800e361 	.word	0x0800e361
 800e628:	0800ef91 	.word	0x0800ef91
 800e62c:	0800ef0d 	.word	0x0800ef0d
 800e630:	0800ea51 	.word	0x0800ea51
 800e634:	0800ee79 	.word	0x0800ee79
 800e638:	0800ede1 	.word	0x0800ede1
 800e63c:	0800eb09 	.word	0x0800eb09
 800e640:	0800ec8d 	.word	0x0800ec8d
 800e644:	0800e481 	.word	0x0800e481
 800e648:	0800e529 	.word	0x0800e529
 800e64c:	0800e965 	.word	0x0800e965
 800e650:	0800e8c1 	.word	0x0800e8c1
 800e654:	0800e7cd 	.word	0x0800e7cd
 800e658:	0800e3d5 	.word	0x0800e3d5
 800e65c:	0800e77d 	.word	0x0800e77d
 800e660:	0800e745 	.word	0x0800e745
 800e664:	0800e52f 	.word	0x0800e52f
 800e668:	0800e679 	.word	0x0800e679

0800e66c <es_wifi_if_stop>:
{
 800e66c:	b508      	push	{r3, lr}
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 800e66e:	2106      	movs	r1, #6
 800e670:	f7ff fdf4 	bl	800e25c <net_state_manage_event>
}
 800e674:	2000      	movs	r0, #0
 800e676:	bd08      	pop	{r3, pc}

0800e678 <es_wifi_get_scan_results>:

static  int32_t es_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 800e678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e67c:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 800e680:	4688      	mov	r8, r1
 800e682:	4614      	mov	r4, r2
  int32_t ret;
  ES_WIFI_APs_t APs;
  ES_WIFI_AP_t *AP = &APs.AP[0];

  if (ES_WIFI_STATUS_OK == ES_WIFI_ListAccessPoints(castcontext(pnetif->pdrv->context), &APs))
 800e684:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e688:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e68a:	f7ff fe1d 	bl	800e2c8 <castcontext>
 800e68e:	a901      	add	r1, sp, #4
 800e690:	f7f5 fe0c 	bl	80042ac <ES_WIFI_ListAccessPoints>
 800e694:	2800      	cmp	r0, #0
 800e696:	d14f      	bne.n	800e738 <es_wifi_get_scan_results+0xc0>
  {
    if (APs.nbr > number)
 800e698:	f89d 3374 	ldrb.w	r3, [sp, #884]	; 0x374
 800e69c:	42a3      	cmp	r3, r4
 800e69e:	d901      	bls.n	800e6a4 <es_wifi_get_scan_results+0x2c>
    {
      APs.nbr = number;
 800e6a0:	f88d 4374 	strb.w	r4, [sp, #884]	; 0x374
{
 800e6a4:	2600      	movs	r6, #0
 800e6a6:	ac01      	add	r4, sp, #4
 800e6a8:	e03e      	b.n	800e728 <es_wifi_get_scan_results+0xb0>
    }
    for (uint32_t i = 0; i < APs.nbr ; i++)
    {
      (void) memset((void *) &results[i], 0, sizeof(net_wifi_scan_bss_t));
 800e6aa:	2234      	movs	r2, #52	; 0x34
 800e6ac:	fb02 f706 	mul.w	r7, r2, r6
 800e6b0:	eb08 0507 	add.w	r5, r8, r7
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	f00d ffe0 	bl	801c67c <memset>
      (void) memcpy(results[i].ssid.value, AP->SSID, NET_WIFI_MAX_SSID_SIZE);
 800e6bc:	6821      	ldr	r1, [r4, #0]
 800e6be:	6860      	ldr	r0, [r4, #4]
 800e6c0:	68a2      	ldr	r2, [r4, #8]
 800e6c2:	68e3      	ldr	r3, [r4, #12]
 800e6c4:	f8c5 1001 	str.w	r1, [r5, #1]
 800e6c8:	f8c5 0005 	str.w	r0, [r5, #5]
 800e6cc:	f8c5 2009 	str.w	r2, [r5, #9]
 800e6d0:	f8c5 300d 	str.w	r3, [r5, #13]
 800e6d4:	6921      	ldr	r1, [r4, #16]
 800e6d6:	6960      	ldr	r0, [r4, #20]
 800e6d8:	69a2      	ldr	r2, [r4, #24]
 800e6da:	69e3      	ldr	r3, [r4, #28]
 800e6dc:	f8c5 1011 	str.w	r1, [r5, #17]
 800e6e0:	f8c5 0015 	str.w	r0, [r5, #21]
 800e6e4:	f8c5 2019 	str.w	r2, [r5, #25]
 800e6e8:	f8c5 301d 	str.w	r3, [r5, #29]
      results[i].ssid.length = (uint8_t) strlen((char_t *) AP->SSID);
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f7f1 fe09 	bl	8000304 <strlen>
 800e6f2:	f808 0007 	strb.w	r0, [r8, r7]
      results[i].security = conv_to_net_security(AP->Security);
 800e6f6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800e6fa:	f7ff fea5 	bl	800e448 <conv_to_net_security>
 800e6fe:	62a8      	str	r0, [r5, #40]	; 0x28
      (void)  memcpy(&results[i].bssid, AP->MAC, NET_WIFI_MAC_ADDRESS_SIZE);
 800e700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e702:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
 800e706:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e708:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
      results[i].rssi = (int8_t)AP->RSSI;
 800e70c:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 800e710:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      results[i].channel = AP->Channel;
 800e714:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800e718:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      (void) memcpy(results[i].country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 800e71c:	4b08      	ldr	r3, [pc, #32]	; (800e740 <es_wifi_get_scan_results+0xc8>)
 800e71e:	6818      	ldr	r0, [r3, #0]
 800e720:	f8c5 002d 	str.w	r0, [r5, #45]	; 0x2d
      AP++;
 800e724:	342c      	adds	r4, #44	; 0x2c
    for (uint32_t i = 0; i < APs.nbr ; i++)
 800e726:	3601      	adds	r6, #1
 800e728:	f89d 0374 	ldrb.w	r0, [sp, #884]	; 0x374
 800e72c:	42b0      	cmp	r0, r6
 800e72e:	d8bc      	bhi.n	800e6aa <es_wifi_get_scan_results+0x32>
  else
  {
    ret = NET_ERROR_NO_CONNECTION;
  }
  return ret;
}
 800e730:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 800e734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_NO_CONNECTION;
 800e738:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800e73c:	e7f8      	b.n	800e730 <es_wifi_get_scan_results+0xb8>
 800e73e:	bf00      	nop
 800e740:	0801ee9c 	.word	0x0801ee9c

0800e744 <es_wifi_ping>:
{
 800e744:	b530      	push	{r4, r5, lr}
 800e746:	b085      	sub	sp, #20
 800e748:	4684      	mov	ip, r0
 800e74a:	4614      	mov	r4, r2
 800e74c:	461d      	mov	r5, r3
  (void) memcpy(ipaddr, &addr->sa_data[2], 6);
 800e74e:	6848      	ldr	r0, [r1, #4]
 800e750:	9002      	str	r0, [sp, #8]
 800e752:	890b      	ldrh	r3, [r1, #8]
 800e754:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (ES_WIFI_STATUS_OK == ES_WIFI_Ping(castcontext(pnetif->pdrv->context), ipaddr, (uint16_t) count, (uint16_t) delay,
 800e758:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 800e75c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e75e:	f7ff fdb3 	bl	800e2c8 <castcontext>
 800e762:	9b08      	ldr	r3, [sp, #32]
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	b2ab      	uxth	r3, r5
 800e768:	b2a2      	uxth	r2, r4
 800e76a:	a902      	add	r1, sp, #8
 800e76c:	f7f5 ff48 	bl	8004600 <ES_WIFI_Ping>
 800e770:	b908      	cbnz	r0, 800e776 <es_wifi_ping+0x32>
}
 800e772:	b005      	add	sp, #20
 800e774:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_NO_CONNECTION;
 800e776:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800e77a:	e7fa      	b.n	800e772 <es_wifi_ping+0x2e>

0800e77c <es_wifi_gethostbyname>:
  if (addr->sa_len < sizeof(sockaddr_in_t))
 800e77c:	780b      	ldrb	r3, [r1, #0]
 800e77e:	2b0f      	cmp	r3, #15
 800e780:	d91e      	bls.n	800e7c0 <es_wifi_gethostbyname+0x44>
{
 800e782:	b530      	push	{r4, r5, lr}
 800e784:	b083      	sub	sp, #12
 800e786:	460c      	mov	r4, r1
 800e788:	4615      	mov	r5, r2
    if (ES_WIFI_STATUS_OK == ES_WIFI_DNS_LookUp(castcontext(pnetif->pdrv->context), (char_t *)name, ipaddr))
 800e78a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e78e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e790:	f7ff fd9a 	bl	800e2c8 <castcontext>
 800e794:	466a      	mov	r2, sp
 800e796:	4629      	mov	r1, r5
 800e798:	f7f5 ff8e 	bl	80046b8 <ES_WIFI_DNS_LookUp>
 800e79c:	b998      	cbnz	r0, 800e7c6 <es_wifi_gethostbyname+0x4a>
      uint8_t len = addr->sa_len;
 800e79e:	7825      	ldrb	r5, [r4, #0]
      sockaddr_in_t *saddr = cast2sockaddr_in(addr);
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f7ff fd92 	bl	800e2ca <cast2sockaddr_in>
 800e7a6:	4604      	mov	r4, r0
      (void)  memset(saddr, 0, len);
 800e7a8:	462a      	mov	r2, r5
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	f00d ff66 	bl	801c67c <memset>
      saddr->sin_len = len;
 800e7b0:	7025      	strb	r5, [r4, #0]
      saddr->sin_family = NET_AF_INET;
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	7063      	strb	r3, [r4, #1]
      (void) memcpy(&(saddr->sin_addr), ipaddr, 4);
 800e7b6:	9b00      	ldr	r3, [sp, #0]
 800e7b8:	6063      	str	r3, [r4, #4]
      ret = NET_OK;
 800e7ba:	2000      	movs	r0, #0
}
 800e7bc:	b003      	add	sp, #12
 800e7be:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 800e7c0:	f06f 0003 	mvn.w	r0, #3
}
 800e7c4:	4770      	bx	lr
      ret = NET_ERROR_DNS_FAILURE;
 800e7c6:	f06f 0009 	mvn.w	r0, #9
  return ret;
 800e7ca:	e7f7      	b.n	800e7bc <es_wifi_gethostbyname+0x40>

0800e7cc <es_wifi_close>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e7cc:	2803      	cmp	r0, #3
 800e7ce:	d871      	bhi.n	800e8b4 <es_wifi_close+0xe8>
{
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	4604      	mov	r4, r0
    if ((WifiChannel [sock].status & WIFI_STARTED_SERVER_SOCKET) != 0U)
 800e7d6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e7da:	4a38      	ldr	r2, [pc, #224]	; (800e8bc <es_wifi_close+0xf0>)
 800e7dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7e0:	785b      	ldrb	r3, [r3, #1]
 800e7e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e7e6:	d042      	beq.n	800e86e <es_wifi_close+0xa2>
      if (isaclone)
 800e7e8:	b301      	cbz	r1, 800e82c <es_wifi_close+0x60>
        if (ES_WIFI_CloseServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 800e7ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e7ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e7f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e7fa:	f7ff fd65 	bl	800e2c8 <castcontext>
 800e7fe:	4621      	mov	r1, r4
 800e800:	f7f6 f952 	bl	8004aa8 <ES_WIFI_CloseServerConnection>
 800e804:	b940      	cbnz	r0, 800e818 <es_wifi_close+0x4c>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e806:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e80a:	4b2c      	ldr	r3, [pc, #176]	; (800e8bc <es_wifi_close+0xf0>)
 800e80c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e810:	2000      	movs	r0, #0
 800e812:	7060      	strb	r0, [r4, #1]
}
 800e814:	b006      	add	sp, #24
 800e816:	bd10      	pop	{r4, pc}
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e818:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e81c:	4b27      	ldr	r3, [pc, #156]	; (800e8bc <es_wifi_close+0xf0>)
 800e81e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e822:	2200      	movs	r2, #0
 800e824:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 800e826:	f06f 0012 	mvn.w	r0, #18
 800e82a:	e7f3      	b.n	800e814 <es_wifi_close+0x48>
        if (ES_WIFI_StopServerSingleConn(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 800e82c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e830:	4a22      	ldr	r2, [pc, #136]	; (800e8bc <es_wifi_close+0xf0>)
 800e832:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e838:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e83c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e83e:	f7ff fd43 	bl	800e2c8 <castcontext>
 800e842:	4621      	mov	r1, r4
 800e844:	f7f6 f954 	bl	8004af0 <ES_WIFI_StopServerSingleConn>
 800e848:	b938      	cbnz	r0, 800e85a <es_wifi_close+0x8e>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e84a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e84e:	4b1b      	ldr	r3, [pc, #108]	; (800e8bc <es_wifi_close+0xf0>)
 800e850:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e854:	2000      	movs	r0, #0
 800e856:	7060      	strb	r0, [r4, #1]
          ret = NET_OK;
 800e858:	e7dc      	b.n	800e814 <es_wifi_close+0x48>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e85a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e85e:	4b17      	ldr	r3, [pc, #92]	; (800e8bc <es_wifi_close+0xf0>)
 800e860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e864:	2200      	movs	r2, #0
 800e866:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 800e868:	f06f 0012 	mvn.w	r0, #18
 800e86c:	e7d2      	b.n	800e814 <es_wifi_close+0x48>
      conn.Number = (uint8_t) sock;
 800e86e:	f88d 0006 	strb.w	r0, [sp, #6]
      if (ES_WIFI_StopClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn)
 800e872:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e876:	4a11      	ldr	r2, [pc, #68]	; (800e8bc <es_wifi_close+0xf0>)
 800e878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e882:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e884:	f7ff fd20 	bl	800e2c8 <castcontext>
 800e888:	a901      	add	r1, sp, #4
 800e88a:	f7f5 ffd1 	bl	8004830 <ES_WIFI_StopClientConnection>
 800e88e:	b148      	cbz	r0, 800e8a4 <es_wifi_close+0xd8>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e890:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e894:	4b09      	ldr	r3, [pc, #36]	; (800e8bc <es_wifi_close+0xf0>)
 800e896:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e89a:	2300      	movs	r3, #0
 800e89c:	7063      	strb	r3, [r4, #1]
        ret = NET_ERROR_SOCKET_FAILURE;
 800e89e:	f06f 0012 	mvn.w	r0, #18
 800e8a2:	e7b7      	b.n	800e814 <es_wifi_close+0x48>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e8a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e8a8:	4b04      	ldr	r3, [pc, #16]	; (800e8bc <es_wifi_close+0xf0>)
 800e8aa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	7060      	strb	r0, [r4, #1]
        ret = NET_OK;
 800e8b2:	e7af      	b.n	800e814 <es_wifi_close+0x48>
    ret = NET_ERROR_INVALID_SOCKET;
 800e8b4:	f06f 0005 	mvn.w	r0, #5
}
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	2400b8d4 	.word	0x2400b8d4

0800e8c0 <es_wifi_getpeername>:
  if (*namelen < sizeof(sockaddr_in_t))
 800e8c0:	6813      	ldr	r3, [r2, #0]
 800e8c2:	2b0f      	cmp	r3, #15
 800e8c4:	d943      	bls.n	800e94e <es_wifi_getpeername+0x8e>
{
 800e8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	460e      	mov	r6, r1
 800e8d0:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= (int32_t) ESWIFI_MAX_CHANNEL_NBR))
 800e8d2:	2803      	cmp	r0, #3
 800e8d4:	d83e      	bhi.n	800e954 <es_wifi_getpeername+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_PeerInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800e8d6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800e960 <es_wifi_getpeername+0xa0>
 800e8da:	0087      	lsls	r7, r0, #2
 800e8dc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e8e0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800e8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e8ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e8ec:	f7ff fcec 	bl	800e2c8 <castcontext>
 800e8f0:	443c      	add	r4, r7
 800e8f2:	f10d 0312 	add.w	r3, sp, #18
 800e8f6:	aa05      	add	r2, sp, #20
 800e8f8:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 800e8fc:	f7f6 fb24 	bl	8004f48 <ES_WIFI_PeerInfo>
 800e900:	bb58      	cbnz	r0, 800e95a <es_wifi_getpeername+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 800e902:	2400      	movs	r4, #0
 800e904:	9400      	str	r4, [sp, #0]
 800e906:	9401      	str	r4, [sp, #4]
 800e908:	9402      	str	r4, [sp, #8]
 800e90a:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 800e90c:	2302      	movs	r3, #2
 800e90e:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 800e912:	9b05      	ldr	r3, [sp, #20]
 800e914:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 800e916:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e91a:	ba5b      	rev16	r3, r3
 800e91c:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 800e920:	2710      	movs	r7, #16
 800e922:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 800e926:	682a      	ldr	r2, [r5, #0]
 800e928:	4621      	mov	r1, r4
 800e92a:	4630      	mov	r0, r6
 800e92c:	f00d fea6 	bl	801c67c <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 800e930:	f89d 2000 	ldrb.w	r2, [sp]
 800e934:	682b      	ldr	r3, [r5, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	bf28      	it	cs
 800e93a:	461a      	movcs	r2, r3
 800e93c:	4669      	mov	r1, sp
 800e93e:	4630      	mov	r0, r6
 800e940:	f00d fe8e 	bl	801c660 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 800e944:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 800e946:	4620      	mov	r0, r4
}
 800e948:	b006      	add	sp, #24
 800e94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 800e94e:	f06f 0003 	mvn.w	r0, #3
}
 800e952:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 800e954:	f06f 0005 	mvn.w	r0, #5
 800e958:	e7f6      	b.n	800e948 <es_wifi_getpeername+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 800e95a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800e95e:	e7f3      	b.n	800e948 <es_wifi_getpeername+0x88>
 800e960:	2400b8d4 	.word	0x2400b8d4

0800e964 <es_wifi_getsockname>:
  if (*namelen < sizeof(sockaddr_in_t))
 800e964:	6813      	ldr	r3, [r2, #0]
 800e966:	2b0f      	cmp	r3, #15
 800e968:	d943      	bls.n	800e9f2 <es_wifi_getsockname+0x8e>
{
 800e96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	4604      	mov	r4, r0
 800e972:	460e      	mov	r6, r1
 800e974:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e976:	2803      	cmp	r0, #3
 800e978:	d83e      	bhi.n	800e9f8 <es_wifi_getsockname+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_SockInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800e97a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800ea04 <es_wifi_getsockname+0xa0>
 800e97e:	0087      	lsls	r7, r0, #2
 800e980:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e984:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800e988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e98e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e990:	f7ff fc9a 	bl	800e2c8 <castcontext>
 800e994:	443c      	add	r4, r7
 800e996:	f10d 0312 	add.w	r3, sp, #18
 800e99a:	aa05      	add	r2, sp, #20
 800e99c:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 800e9a0:	f7f6 fa98 	bl	8004ed4 <ES_WIFI_SockInfo>
 800e9a4:	bb58      	cbnz	r0, 800e9fe <es_wifi_getsockname+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 800e9a6:	2400      	movs	r4, #0
 800e9a8:	9400      	str	r4, [sp, #0]
 800e9aa:	9401      	str	r4, [sp, #4]
 800e9ac:	9402      	str	r4, [sp, #8]
 800e9ae:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 800e9b6:	9b05      	ldr	r3, [sp, #20]
 800e9b8:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 800e9ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e9be:	ba5b      	rev16	r3, r3
 800e9c0:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 800e9c4:	2710      	movs	r7, #16
 800e9c6:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 800e9ca:	682a      	ldr	r2, [r5, #0]
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f00d fe54 	bl	801c67c <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 800e9d4:	f89d 2000 	ldrb.w	r2, [sp]
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	bf28      	it	cs
 800e9de:	461a      	movcs	r2, r3
 800e9e0:	4669      	mov	r1, sp
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f00d fe3c 	bl	801c660 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 800e9e8:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 800e9ea:	4620      	mov	r0, r4
}
 800e9ec:	b006      	add	sp, #24
 800e9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 800e9f2:	f06f 0003 	mvn.w	r0, #3
}
 800e9f6:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 800e9f8:	f06f 0005 	mvn.w	r0, #5
 800e9fc:	e7f6      	b.n	800e9ec <es_wifi_getsockname+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 800e9fe:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800ea02:	e7f3      	b.n	800e9ec <es_wifi_getsockname+0x88>
 800ea04:	2400b8d4 	.word	0x2400b8d4

0800ea08 <check_connection_lost>:
{
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	4604      	mov	r4, r0
  if (n <= 0)
 800ea0c:	2900      	cmp	r1, #0
 800ea0e:	dd04      	ble.n	800ea1a <check_connection_lost+0x12>
    if (NET_STATE_CONNECTION_LOST == pnetif->state)
 800ea10:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 800ea14:	2b08      	cmp	r3, #8
 800ea16:	d014      	beq.n	800ea42 <check_connection_lost+0x3a>
}
 800ea18:	bd10      	pop	{r4, pc}
    if (NET_STATE_CONNECTED == pnetif->state)
 800ea1a:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 800ea1e:	2b05      	cmp	r3, #5
 800ea20:	d1fa      	bne.n	800ea18 <check_connection_lost+0x10>
      if (ES_WIFI_IsConnected(castcontext(pnetif->pdrv->context)) == 0u)
 800ea22:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800ea26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ea28:	f7ff fc4e 	bl	800e2c8 <castcontext>
 800ea2c:	f7f5 fd16 	bl	800445c <ES_WIFI_IsConnected>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	d1f1      	bne.n	800ea18 <check_connection_lost+0x10>
        (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTION_LOST, NULL);
 800ea34:	2300      	movs	r3, #0
 800ea36:	2208      	movs	r2, #8
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f7ff fb40 	bl	800e0c0 <net_if_notify>
 800ea40:	e7ea      	b.n	800ea18 <check_connection_lost+0x10>
      (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTED, NULL);
 800ea42:	2300      	movs	r3, #0
 800ea44:	2205      	movs	r2, #5
 800ea46:	4619      	mov	r1, r3
 800ea48:	f7ff fb3a 	bl	800e0c0 <net_if_notify>
}
 800ea4c:	e7e4      	b.n	800ea18 <check_connection_lost+0x10>
	...

0800ea50 <es_wifi_connect>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ea50:	2803      	cmp	r0, #3
 800ea52:	d854      	bhi.n	800eafe <es_wifi_connect+0xae>
{
 800ea54:	b510      	push	{r4, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	4604      	mov	r4, r0
    if (addrlen == sizeof(sockaddr_in_t))
 800ea5a:	2a10      	cmp	r2, #16
 800ea5c:	d003      	beq.n	800ea66 <es_wifi_connect+0x16>
      ret = NET_ERROR_PARAMETER;
 800ea5e:	f06f 0003 	mvn.w	r0, #3
}
 800ea62:	b006      	add	sp, #24
 800ea64:	bd10      	pop	{r4, pc}
      dest = cast2sockaddr_in(addr);
 800ea66:	4608      	mov	r0, r1
 800ea68:	f7ff fc2f 	bl	800e2ca <cast2sockaddr_in>
      conn.Number = (uint8_t) sock;
 800ea6c:	f88d 4006 	strb.w	r4, [sp, #6]
      conn.LocalPort = WifiChannel[sock].localport;
 800ea70:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ea74:	4a23      	ldr	r2, [pc, #140]	; (800eb04 <es_wifi_connect+0xb4>)
 800ea76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea7a:	889a      	ldrh	r2, [r3, #4]
 800ea7c:	f8ad 200a 	strh.w	r2, [sp, #10]
      conn.RemotePort = NET_NTOHS(dest->sin_port);
 800ea80:	8842      	ldrh	r2, [r0, #2]
 800ea82:	ba52      	rev16	r2, r2
 800ea84:	f8ad 2008 	strh.w	r2, [sp, #8]
      NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 800ea88:	79c2      	ldrb	r2, [r0, #7]
 800ea8a:	f88d 200f 	strb.w	r2, [sp, #15]
 800ea8e:	7982      	ldrb	r2, [r0, #6]
 800ea90:	f88d 200e 	strb.w	r2, [sp, #14]
 800ea94:	7942      	ldrb	r2, [r0, #5]
 800ea96:	f88d 200d 	strb.w	r2, [sp, #13]
 800ea9a:	7902      	ldrb	r2, [r0, #4]
 800ea9c:	f88d 200c 	strb.w	r2, [sp, #12]
      switch (WifiChannel[sock].protocol)
 800eaa0:	789b      	ldrb	r3, [r3, #2]
 800eaa2:	2b11      	cmp	r3, #17
 800eaa4:	d022      	beq.n	800eaec <es_wifi_connect+0x9c>
 800eaa6:	2b24      	cmp	r3, #36	; 0x24
 800eaa8:	d023      	beq.n	800eaf2 <es_wifi_connect+0xa2>
 800eaaa:	2b06      	cmp	r3, #6
 800eaac:	d002      	beq.n	800eab4 <es_wifi_connect+0x64>
          ret = NET_ERROR_PARAMETER;
 800eaae:	f06f 0003 	mvn.w	r0, #3
 800eab2:	e7d6      	b.n	800ea62 <es_wifi_connect+0x12>
          conn.Type = ES_WIFI_TCP_CONNECTION;
 800eab4:	2300      	movs	r3, #0
 800eab6:	f88d 3004 	strb.w	r3, [sp, #4]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 800eaba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800eabe:	4a11      	ldr	r2, [pc, #68]	; (800eb04 <es_wifi_connect+0xb4>)
 800eac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800eaca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eacc:	f7ff fbfc 	bl	800e2c8 <castcontext>
 800ead0:	a901      	add	r1, sp, #4
 800ead2:	f7f5 fe15 	bl	8004700 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 800ead6:	b978      	cbnz	r0, 800eaf8 <es_wifi_connect+0xa8>
          WifiChannel[sock].status |= WIFI_CONNECTED_SOCKET_RW;
 800ead8:	4b0a      	ldr	r3, [pc, #40]	; (800eb04 <es_wifi_connect+0xb4>)
 800eada:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800eade:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eae2:	7853      	ldrb	r3, [r2, #1]
 800eae4:	f043 031c 	orr.w	r3, r3, #28
 800eae8:	7053      	strb	r3, [r2, #1]
 800eaea:	e7ba      	b.n	800ea62 <es_wifi_connect+0x12>
      switch (WifiChannel[sock].protocol)
 800eaec:	f06f 0002 	mvn.w	r0, #2
 800eaf0:	e7b7      	b.n	800ea62 <es_wifi_connect+0x12>
 800eaf2:	f06f 0002 	mvn.w	r0, #2
 800eaf6:	e7b4      	b.n	800ea62 <es_wifi_connect+0x12>
          ret = NET_ERROR_SOCKET_FAILURE;
 800eaf8:	f06f 0012 	mvn.w	r0, #18
 800eafc:	e7b1      	b.n	800ea62 <es_wifi_connect+0x12>
    ret = NET_ERROR_INVALID_SOCKET;
 800eafe:	f06f 0005 	mvn.w	r0, #5
}
 800eb02:	4770      	bx	lr
 800eb04:	2400b8d4 	.word	0x2400b8d4

0800eb08 <es_wifi_sendto>:
{
 800eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	b08a      	sub	sp, #40	; 0x28
 800eb0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  if ((flags != 0) || (to->sa_family != (uint8_t) NET_AF_INET))
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f040 80aa 	bne.w	800ec6a <es_wifi_sendto+0x162>
 800eb16:	4604      	mov	r4, r0
 800eb18:	460e      	mov	r6, r1
 800eb1a:	4615      	mov	r5, r2
 800eb1c:	787b      	ldrb	r3, [r7, #1]
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	f040 80a6 	bne.w	800ec70 <es_wifi_sendto+0x168>
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800eb24:	2803      	cmp	r0, #3
 800eb26:	f200 80a6 	bhi.w	800ec76 <es_wifi_sendto+0x16e>
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 800eb2a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800eb2e:	4a56      	ldr	r2, [pc, #344]	; (800ec88 <es_wifi_sendto+0x180>)
 800eb30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb34:	789b      	ldrb	r3, [r3, #2]
 800eb36:	2b11      	cmp	r3, #17
 800eb38:	f040 80a0 	bne.w	800ec7c <es_wifi_sendto+0x174>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 800eb3c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800eb40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb44:	785b      	ldrb	r3, [r3, #1]
 800eb46:	f013 0f04 	tst.w	r3, #4
 800eb4a:	f000 809a 	beq.w	800ec82 <es_wifi_sendto+0x17a>
    if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 800eb4e:	f013 0f20 	tst.w	r3, #32
 800eb52:	d102      	bne.n	800eb5a <es_wifi_sendto+0x52>
      if (tolen == sizeof(sockaddr_in_t))
 800eb54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb56:	2b10      	cmp	r3, #16
 800eb58:	d04d      	beq.n	800ebf6 <es_wifi_sendto+0xee>
      if (len > ES_WIFI_PAYLOAD_SIZE)
 800eb5a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800eb5e:	dd01      	ble.n	800eb64 <es_wifi_sendto+0x5c>
        len = ES_WIFI_PAYLOAD_SIZE;
 800eb60:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
      sockaddr_in_t *saddr = cast2sockaddr_in(to);
 800eb64:	4638      	mov	r0, r7
 800eb66:	f7ff fbb0 	bl	800e2ca <cast2sockaddr_in>
      remoteaddr = NET_NTOHL(saddr->sin_addr.s_addr);
 800eb6a:	6843      	ldr	r3, [r0, #4]
 800eb6c:	0a1a      	lsrs	r2, r3, #8
 800eb6e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800eb72:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800eb76:	0219      	lsls	r1, r3, #8
 800eb78:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800eb7c:	430a      	orrs	r2, r1
 800eb7e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      uint32_t IPaddr = NET_NTOHL(remoteaddr);
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	0a11      	lsrs	r1, r2, #8
 800eb86:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800eb8a:	430b      	orrs	r3, r1
 800eb8c:	0211      	lsls	r1, r2, #8
 800eb8e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800eb92:	430b      	orrs	r3, r1
 800eb94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb98:	9305      	str	r3, [sp, #20]
      uint16_t Port = NET_NTOHS(saddr->sin_port);
 800eb9a:	8847      	ldrh	r7, [r0, #2]
 800eb9c:	ba7f      	rev16	r7, r7
 800eb9e:	b2bf      	uxth	r7, r7
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800eba0:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 800eba4:	4b38      	ldr	r3, [pc, #224]	; (800ec88 <es_wifi_sendto+0x180>)
 800eba6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ebaa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800ebae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ebb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ebb4:	f7ff fb88 	bl	800e2c8 <castcontext>
                                                  (uint32_t) WifiChannel[sock].sendtimeout,
 800ebb8:	f8d8 3014 	ldr.w	r3, [r8, #20]
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800ebbc:	9703      	str	r7, [sp, #12]
 800ebbe:	aa05      	add	r2, sp, #20
 800ebc0:	9202      	str	r2, [sp, #8]
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	f10d 0312 	add.w	r3, sp, #18
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	b2ab      	uxth	r3, r5
 800ebcc:	4632      	mov	r2, r6
 800ebce:	b2e1      	uxtb	r1, r4
 800ebd0:	f7f6 f80a 	bl	8004be8 <ES_WIFI_SendDataTo>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d145      	bne.n	800ec64 <es_wifi_sendto+0x15c>
        ret = (int32_t) SentDatalen;
 800ebd8:	f8bd 5012 	ldrh.w	r5, [sp, #18]
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 800ebdc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ebe0:	4829      	ldr	r0, [pc, #164]	; (800ec88 <es_wifi_sendto+0x180>)
 800ebe2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebea:	f7ff ff0d 	bl	800ea08 <check_connection_lost>
}
 800ebee:	4628      	mov	r0, r5
 800ebf0:	b00a      	add	sp, #40	; 0x28
 800ebf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dest = cast2sockaddr_in(to);
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	f7ff fb67 	bl	800e2ca <cast2sockaddr_in>
        conn.Number = (uint8_t) sock;
 800ebfc:	f88d 4016 	strb.w	r4, [sp, #22]
        conn.LocalPort = WifiChannel[sock].localport;
 800ec00:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ec04:	4a20      	ldr	r2, [pc, #128]	; (800ec88 <es_wifi_sendto+0x180>)
 800ec06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec0a:	889a      	ldrh	r2, [r3, #4]
 800ec0c:	f8ad 201a 	strh.w	r2, [sp, #26]
        conn.RemotePort = NET_NTOHS(dest->sin_port);
 800ec10:	8842      	ldrh	r2, [r0, #2]
 800ec12:	ba52      	rev16	r2, r2
 800ec14:	f8ad 2018 	strh.w	r2, [sp, #24]
        NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 800ec18:	79c2      	ldrb	r2, [r0, #7]
 800ec1a:	f88d 201f 	strb.w	r2, [sp, #31]
 800ec1e:	7982      	ldrb	r2, [r0, #6]
 800ec20:	f88d 201e 	strb.w	r2, [sp, #30]
 800ec24:	7942      	ldrb	r2, [r0, #5]
 800ec26:	f88d 201d 	strb.w	r2, [sp, #29]
 800ec2a:	7902      	ldrb	r2, [r0, #4]
 800ec2c:	f88d 201c 	strb.w	r2, [sp, #28]
        conn.Type = ES_WIFI_UDP_CONNECTION;
 800ec30:	2201      	movs	r2, #1
 800ec32:	f88d 2014 	strb.w	r2, [sp, #20]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 800ec36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec38:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ec3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ec3e:	f7ff fb43 	bl	800e2c8 <castcontext>
 800ec42:	a905      	add	r1, sp, #20
 800ec44:	f7f5 fd5c 	bl	8004700 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 800ec48:	b948      	cbnz	r0, 800ec5e <es_wifi_sendto+0x156>
          WifiChannel[sock].status |= WIFI_STARTED_CLIENT_SOCKET;
 800ec4a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ec4e:	4a0e      	ldr	r2, [pc, #56]	; (800ec88 <es_wifi_sendto+0x180>)
 800ec50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec54:	785a      	ldrb	r2, [r3, #1]
 800ec56:	f042 0220 	orr.w	r2, r2, #32
 800ec5a:	705a      	strb	r2, [r3, #1]
    if (ret == NET_OK)
 800ec5c:	e77d      	b.n	800eb5a <es_wifi_sendto+0x52>
          ret = NET_ERROR_SOCKET_FAILURE;
 800ec5e:	f06f 0512 	mvn.w	r5, #18
 800ec62:	e7c4      	b.n	800ebee <es_wifi_sendto+0xe6>
        ret = NET_ERROR_SOCKET_FAILURE;
 800ec64:	f06f 0512 	mvn.w	r5, #18
 800ec68:	e7b8      	b.n	800ebdc <es_wifi_sendto+0xd4>
    ret = NET_ERROR_UNSUPPORTED;
 800ec6a:	f06f 0502 	mvn.w	r5, #2
 800ec6e:	e7be      	b.n	800ebee <es_wifi_sendto+0xe6>
 800ec70:	f06f 0502 	mvn.w	r5, #2
 800ec74:	e7bb      	b.n	800ebee <es_wifi_sendto+0xe6>
    ret = NET_ERROR_INVALID_SOCKET;
 800ec76:	f06f 0505 	mvn.w	r5, #5
 800ec7a:	e7b8      	b.n	800ebee <es_wifi_sendto+0xe6>
    ret = NET_ERROR_SOCKET_FAILURE;
 800ec7c:	f06f 0512 	mvn.w	r5, #18
 800ec80:	e7b5      	b.n	800ebee <es_wifi_sendto+0xe6>
    ret =  NET_ERROR_SOCKET_FAILURE;
 800ec82:	f06f 0512 	mvn.w	r5, #18
  return ret;
 800ec86:	e7b2      	b.n	800ebee <es_wifi_sendto+0xe6>
 800ec88:	2400b8d4 	.word	0x2400b8d4

0800ec8c <es_wifi_recvfrom>:
{
 800ec8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec90:	b08a      	sub	sp, #40	; 0x28
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ec92:	2803      	cmp	r0, #3
 800ec94:	f200 8097 	bhi.w	800edc6 <es_wifi_recvfrom+0x13a>
 800ec98:	4604      	mov	r4, r0
 800ec9a:	4688      	mov	r8, r1
 800ec9c:	4615      	mov	r5, r2
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 800ec9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800eca2:	4f4d      	ldr	r7, [pc, #308]	; (800edd8 <es_wifi_recvfrom+0x14c>)
 800eca4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800eca8:	7882      	ldrb	r2, [r0, #2]
 800ecaa:	2a11      	cmp	r2, #17
 800ecac:	f040 808e 	bne.w	800edcc <es_wifi_recvfrom+0x140>
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 800ecb0:	7842      	ldrb	r2, [r0, #1]
 800ecb2:	f012 0f08 	tst.w	r2, #8
 800ecb6:	f000 808c 	beq.w	800edd2 <es_wifi_recvfrom+0x146>
    if (((uint8_t) flags & (uint8_t) NET_MSG_DONTWAIT) == 0U)
 800ecba:	f013 0f08 	tst.w	r3, #8
 800ecbe:	d107      	bne.n	800ecd0 <es_wifi_recvfrom+0x44>
      timeout = (uint32_t) WifiChannel[sock].recvtimeout;
 800ecc0:	6986      	ldr	r6, [r0, #24]
    if (timeout > (uint32_t) ES_WIFI_MAX_SO_TIMEOUT)
 800ecc2:	f247 5330 	movw	r3, #30000	; 0x7530
 800ecc6:	429e      	cmp	r6, r3
 800ecc8:	d903      	bls.n	800ecd2 <es_wifi_recvfrom+0x46>
      ret = NET_ERROR_UNSUPPORTED;
 800ecca:	f06f 0702 	mvn.w	r7, #2
  return ret;
 800ecce:	e030      	b.n	800ed32 <es_wifi_recvfrom+0xa6>
  uint32_t timeout = 0;
 800ecd0:	2600      	movs	r6, #0
      if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 800ecd2:	f012 0f20 	tst.w	r2, #32
 800ecd6:	d030      	beq.n	800ed3a <es_wifi_recvfrom+0xae>
        uint32_t IPaddr = 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	9305      	str	r3, [sp, #20]
        uint16_t port = 0;
 800ecdc:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (len > ES_WIFI_PAYLOAD_SIZE)
 800ece0:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800ece4:	dd01      	ble.n	800ecea <es_wifi_recvfrom+0x5e>
          len = ES_WIFI_PAYLOAD_SIZE;
 800ece6:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
        if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveDataFrom(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800ecea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ecee:	4a3a      	ldr	r2, [pc, #232]	; (800edd8 <es_wifi_recvfrom+0x14c>)
 800ecf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ecf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ecfa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ecfc:	f7ff fae4 	bl	800e2c8 <castcontext>
 800ed00:	f10d 0312 	add.w	r3, sp, #18
 800ed04:	9303      	str	r3, [sp, #12]
 800ed06:	ab05      	add	r3, sp, #20
 800ed08:	9302      	str	r3, [sp, #8]
 800ed0a:	9601      	str	r6, [sp, #4]
 800ed0c:	ab04      	add	r3, sp, #16
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	b2ab      	uxth	r3, r5
 800ed12:	4642      	mov	r2, r8
 800ed14:	b2e1      	uxtb	r1, r4
 800ed16:	f7f6 f857 	bl	8004dc8 <ES_WIFI_ReceiveDataFrom>
 800ed1a:	b368      	cbz	r0, 800ed78 <es_wifi_recvfrom+0xec>
          ret = NET_ERROR_SOCKET_FAILURE;
 800ed1c:	f06f 0712 	mvn.w	r7, #18
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 800ed20:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ed24:	482c      	ldr	r0, [pc, #176]	; (800edd8 <es_wifi_recvfrom+0x14c>)
 800ed26:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ed2e:	f7ff fe6b 	bl	800ea08 <check_connection_lost>
}
 800ed32:	4638      	mov	r0, r7
 800ed34:	b00a      	add	sp, #40	; 0x28
 800ed36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void) NET_ATON((const char_t *)"224.0.0.251", &ipaddr);
 800ed3a:	a905      	add	r1, sp, #20
 800ed3c:	4827      	ldr	r0, [pc, #156]	; (800eddc <es_wifi_recvfrom+0x150>)
 800ed3e:	f7fe ffbc 	bl	800dcba <net_aton>
        NET_IPADDR_PORT_TO_SOCKADDR(&saddr, &ipaddr, 5353);
 800ed42:	2310      	movs	r3, #16
 800ed44:	f88d 3018 	strb.w	r3, [sp, #24]
 800ed48:	2202      	movs	r2, #2
 800ed4a:	f88d 2019 	strb.w	r2, [sp, #25]
 800ed4e:	f64e 1214 	movw	r2, #59668	; 0xe914
 800ed52:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ed56:	9a05      	ldr	r2, [sp, #20]
 800ed58:	9207      	str	r2, [sp, #28]
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	9108      	str	r1, [sp, #32]
 800ed5e:	9109      	str	r1, [sp, #36]	; 0x24
        ret = es_wifi_sendto(sock, NULL, 0, flags, &saddr, sizeof(sockaddr_in_t));
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	ab06      	add	r3, sp, #24
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	460b      	mov	r3, r1
 800ed68:	460a      	mov	r2, r1
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f7ff fecc 	bl	800eb08 <es_wifi_sendto>
      if (ret == NET_OK)
 800ed70:	4607      	mov	r7, r0
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d1d4      	bne.n	800ed20 <es_wifi_recvfrom+0x94>
 800ed76:	e7af      	b.n	800ecd8 <es_wifi_recvfrom+0x4c>
          (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 800ed78:	2100      	movs	r1, #0
 800ed7a:	9106      	str	r1, [sp, #24]
 800ed7c:	9107      	str	r1, [sp, #28]
 800ed7e:	9108      	str	r1, [sp, #32]
 800ed80:	9109      	str	r1, [sp, #36]	; 0x24
          saddr.sin_family = NET_AF_INET;
 800ed82:	2302      	movs	r3, #2
 800ed84:	f88d 3019 	strb.w	r3, [sp, #25]
          saddr.sin_addr.s_addr = IPaddr;
 800ed88:	9b05      	ldr	r3, [sp, #20]
 800ed8a:	9307      	str	r3, [sp, #28]
          saddr.sin_port = NET_HTONS(port);
 800ed8c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ed90:	ba5b      	rev16	r3, r3
 800ed92:	f8ad 301a 	strh.w	r3, [sp, #26]
          saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 800ed96:	2510      	movs	r5, #16
 800ed98:	f88d 5018 	strb.w	r5, [sp, #24]
          (void)  memset(from, 0, *fromlen);
 800ed9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eda2:	f00d fc6b 	bl	801c67c <memset>
          (void)  memcpy(from, &saddr, MIN((*fromlen), (saddr.sin_len)));
 800eda6:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800edaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	429a      	cmp	r2, r3
 800edb0:	bf28      	it	cs
 800edb2:	461a      	movcs	r2, r3
 800edb4:	a906      	add	r1, sp, #24
 800edb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800edb8:	f00d fc52 	bl	801c660 <memcpy>
          *fromlen = sizeof(sockaddr_in_t);
 800edbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edbe:	601d      	str	r5, [r3, #0]
          ret = (int32_t) ReceivedDatalen;
 800edc0:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 800edc4:	e7ac      	b.n	800ed20 <es_wifi_recvfrom+0x94>
    ret = NET_ERROR_INVALID_SOCKET;
 800edc6:	f06f 0705 	mvn.w	r7, #5
 800edca:	e7b2      	b.n	800ed32 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 800edcc:	f06f 0712 	mvn.w	r7, #18
 800edd0:	e7af      	b.n	800ed32 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 800edd2:	f06f 0712 	mvn.w	r7, #18
 800edd6:	e7ac      	b.n	800ed32 <es_wifi_recvfrom+0xa6>
 800edd8:	2400b8d4 	.word	0x2400b8d4
 800eddc:	0801eea0 	.word	0x0801eea0

0800ede0 <es_wifi_recv>:
{
 800ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ede2:	b085      	sub	sp, #20
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ede4:	2803      	cmp	r0, #3
 800ede6:	d83f      	bhi.n	800ee68 <es_wifi_recv+0x88>
 800ede8:	4604      	mov	r4, r0
 800edea:	460e      	mov	r6, r1
 800edec:	4615      	mov	r5, r2
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 800edee:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800edf2:	4920      	ldr	r1, [pc, #128]	; (800ee74 <es_wifi_recv+0x94>)
 800edf4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800edf8:	7852      	ldrb	r2, [r2, #1]
 800edfa:	f012 0f08 	tst.w	r2, #8
 800edfe:	d036      	beq.n	800ee6e <es_wifi_recv+0x8e>
    if (flags == (int32_t) NET_MSG_DONTWAIT)
 800ee00:	2b08      	cmp	r3, #8
 800ee02:	d02c      	beq.n	800ee5e <es_wifi_recv+0x7e>
      timeout = (uint16_t) WifiChannel[sock].recvtimeout;
 800ee04:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800ee08:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ee0c:	8b1f      	ldrh	r7, [r3, #24]
    if (len > ES_WIFI_PAYLOAD_SIZE)
 800ee0e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800ee12:	dd01      	ble.n	800ee18 <es_wifi_recv+0x38>
      len = ES_WIFI_PAYLOAD_SIZE;
 800ee14:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800ee18:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ee1c:	4a15      	ldr	r2, [pc, #84]	; (800ee74 <es_wifi_recv+0x94>)
 800ee1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee24:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ee28:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ee2a:	f7ff fa4d 	bl	800e2c8 <castcontext>
 800ee2e:	9701      	str	r7, [sp, #4]
 800ee30:	f10d 030e 	add.w	r3, sp, #14
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	b2ab      	uxth	r3, r5
 800ee38:	4632      	mov	r2, r6
 800ee3a:	b2e1      	uxtb	r1, r4
 800ee3c:	f7f5 ff70 	bl	8004d20 <ES_WIFI_ReceiveData>
 800ee40:	b978      	cbnz	r0, 800ee62 <es_wifi_recv+0x82>
      ret = (int32_t) ReceivedDatalen;
 800ee42:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 800ee46:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ee4a:	480a      	ldr	r0, [pc, #40]	; (800ee74 <es_wifi_recv+0x94>)
 800ee4c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ee50:	4629      	mov	r1, r5
 800ee52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ee54:	f7ff fdd8 	bl	800ea08 <check_connection_lost>
}
 800ee58:	4628      	mov	r0, r5
 800ee5a:	b005      	add	sp, #20
 800ee5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      timeout = 0;
 800ee5e:	2700      	movs	r7, #0
 800ee60:	e7d5      	b.n	800ee0e <es_wifi_recv+0x2e>
      ret = NET_ERROR_SOCKET_FAILURE;
 800ee62:	f06f 0512 	mvn.w	r5, #18
 800ee66:	e7ee      	b.n	800ee46 <es_wifi_recv+0x66>
    ret = NET_ERROR_INVALID_SOCKET;
 800ee68:	f06f 0505 	mvn.w	r5, #5
 800ee6c:	e7f4      	b.n	800ee58 <es_wifi_recv+0x78>
    ret = NET_ERROR_SOCKET_FAILURE;
 800ee6e:	f06f 0512 	mvn.w	r5, #18
  return ret;
 800ee72:	e7f1      	b.n	800ee58 <es_wifi_recv+0x78>
 800ee74:	2400b8d4 	.word	0x2400b8d4

0800ee78 <es_wifi_send>:
{
 800ee78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee7a:	b085      	sub	sp, #20
  if (flags != 0)
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d139      	bne.n	800eef4 <es_wifi_send+0x7c>
 800ee80:	4604      	mov	r4, r0
 800ee82:	460f      	mov	r7, r1
 800ee84:	4615      	mov	r5, r2
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ee86:	2803      	cmp	r0, #3
 800ee88:	d837      	bhi.n	800eefa <es_wifi_send+0x82>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 800ee8a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800ee8e:	4a1e      	ldr	r2, [pc, #120]	; (800ef08 <es_wifi_send+0x90>)
 800ee90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee94:	785b      	ldrb	r3, [r3, #1]
 800ee96:	f013 0f04 	tst.w	r3, #4
 800ee9a:	d031      	beq.n	800ef00 <es_wifi_send+0x88>
    if (len > ES_WIFI_PAYLOAD_SIZE)
 800ee9c:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800eea0:	dd01      	ble.n	800eea6 <es_wifi_send+0x2e>
      len = ES_WIFI_PAYLOAD_SIZE;
 800eea2:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800eea6:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 800eeaa:	4b17      	ldr	r3, [pc, #92]	; (800ef08 <es_wifi_send+0x90>)
 800eeac:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800eeb0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800eeb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800eeb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eeb8:	f7ff fa06 	bl	800e2c8 <castcontext>
                                              (uint32_t) WifiChannel[sock].sendtimeout))
 800eebc:	6973      	ldr	r3, [r6, #20]
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800eebe:	9301      	str	r3, [sp, #4]
 800eec0:	f10d 030e 	add.w	r3, sp, #14
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	b2ab      	uxth	r3, r5
 800eec8:	463a      	mov	r2, r7
 800eeca:	b2e1      	uxtb	r1, r4
 800eecc:	f7f5 fe32 	bl	8004b34 <ES_WIFI_SendData>
 800eed0:	b968      	cbnz	r0, 800eeee <es_wifi_send+0x76>
      ret = (int32_t) SentDatalen;
 800eed2:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 800eed6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800eeda:	480b      	ldr	r0, [pc, #44]	; (800ef08 <es_wifi_send+0x90>)
 800eedc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800eee0:	4629      	mov	r1, r5
 800eee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eee4:	f7ff fd90 	bl	800ea08 <check_connection_lost>
}
 800eee8:	4628      	mov	r0, r5
 800eeea:	b005      	add	sp, #20
 800eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = NET_ERROR_SOCKET_FAILURE;
 800eeee:	f06f 0512 	mvn.w	r5, #18
 800eef2:	e7f0      	b.n	800eed6 <es_wifi_send+0x5e>
    ret = NET_ERROR_UNSUPPORTED;
 800eef4:	f06f 0502 	mvn.w	r5, #2
 800eef8:	e7f6      	b.n	800eee8 <es_wifi_send+0x70>
    ret = NET_ERROR_INVALID_SOCKET;
 800eefa:	f06f 0505 	mvn.w	r5, #5
 800eefe:	e7f3      	b.n	800eee8 <es_wifi_send+0x70>
    ret = NET_ERROR_SOCKET_FAILURE;
 800ef00:	f06f 0512 	mvn.w	r5, #18
  return ret;
 800ef04:	e7f0      	b.n	800eee8 <es_wifi_send+0x70>
 800ef06:	bf00      	nop
 800ef08:	2400b8d4 	.word	0x2400b8d4

0800ef0c <es_wifi_accept>:
{
 800ef0c:	b530      	push	{r4, r5, lr}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	4604      	mov	r4, r0
  sockaddr_in_t *addrin = cast2sockaddr_in(addr);
 800ef12:	4608      	mov	r0, r1
 800ef14:	f7ff f9d9 	bl	800e2ca <cast2sockaddr_in>
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ef18:	2c03      	cmp	r4, #3
 800ef1a:	d834      	bhi.n	800ef86 <es_wifi_accept+0x7a>
 800ef1c:	4605      	mov	r5, r0
    conn.Number = (uint8_t) sock;
 800ef1e:	f88d 4006 	strb.w	r4, [sp, #6]
    status = ES_WIFI_WaitServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), 0, &conn);
 800ef22:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ef26:	4a19      	ldr	r2, [pc, #100]	; (800ef8c <es_wifi_accept+0x80>)
 800ef28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ef2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ef32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ef34:	f7ff f9c8 	bl	800e2c8 <castcontext>
 800ef38:	aa01      	add	r2, sp, #4
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	f7f5 fd06 	bl	800494c <ES_WIFI_WaitServerConnection>
    if (ES_WIFI_STATUS_OK == status)
 800ef40:	b9e8      	cbnz	r0, 800ef7e <es_wifi_accept+0x72>
      addrin->sin_port = NET_NTOHS(conn.RemotePort);
 800ef42:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ef46:	ba5b      	rev16	r3, r3
 800ef48:	806b      	strh	r3, [r5, #2]
      addrin->sin_addr.s_addr = NET_ARTON(conn.RemoteIP);
 800ef4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ef4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800ef52:	041b      	lsls	r3, r3, #16
 800ef54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef58:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ef5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef60:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ef64:	4313      	orrs	r3, r2
 800ef66:	606b      	str	r3, [r5, #4]
      WifiChannel [sock].status |= WIFI_CONNECTED_SOCKET_RW | WIFI_STARTED_SERVER_SOCKET ;
 800ef68:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800ef6c:	4b07      	ldr	r3, [pc, #28]	; (800ef8c <es_wifi_accept+0x80>)
 800ef6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef72:	785a      	ldrb	r2, [r3, #1]
 800ef74:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 800ef78:	705a      	strb	r2, [r3, #1]
      ret = sock;
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	e001      	b.n	800ef82 <es_wifi_accept+0x76>
      ret =  NET_ERROR_SOCKET_FAILURE;
 800ef7e:	f06f 0012 	mvn.w	r0, #18
}
 800ef82:	b007      	add	sp, #28
 800ef84:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 800ef86:	f06f 0005 	mvn.w	r0, #5
  return ret;
 800ef8a:	e7fa      	b.n	800ef82 <es_wifi_accept+0x76>
 800ef8c:	2400b8d4 	.word	0x2400b8d4

0800ef90 <es_wifi_listen>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ef90:	2803      	cmp	r0, #3
 800ef92:	d826      	bhi.n	800efe2 <es_wifi_listen+0x52>
{
 800ef94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef98:	b086      	sub	sp, #24
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	460f      	mov	r7, r1
    ES_WIFIObject_t  *pEsWifiObj = castcontext(WifiChannel[sock].pnetif->pdrv->context);
 800ef9e:	4d12      	ldr	r5, [pc, #72]	; (800efe8 <es_wifi_listen+0x58>)
 800efa0:	eb00 0680 	add.w	r6, r0, r0, lsl #2
 800efa4:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800efa8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800efaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800efae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800efb0:	f7ff f98a 	bl	800e2c8 <castcontext>
    conn.Number = (uint8_t) sock;
 800efb4:	f88d 4006 	strb.w	r4, [sp, #6]
    conn.LocalPort = WifiChannel[sock].localport;
 800efb8:	88b3      	ldrh	r3, [r6, #4]
 800efba:	f8ad 300a 	strh.w	r3, [sp, #10]
    conn.Type = ES_WIFI_UDP_CONNECTION;
 800efbe:	2301      	movs	r3, #1
 800efc0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_TCP)
 800efc4:	78b3      	ldrb	r3, [r6, #2]
 800efc6:	2b06      	cmp	r3, #6
 800efc8:	d007      	beq.n	800efda <es_wifi_listen+0x4a>
    conn.Backlog = (uint8_t) backlog;
 800efca:	f88d 7014 	strb.w	r7, [sp, #20]
    ret = (int32_t) ES_WIFI_StartServerSingleConn(pEsWifiObj, &conn);
 800efce:	a901      	add	r1, sp, #4
 800efd0:	f7f5 fc50 	bl	8004874 <ES_WIFI_StartServerSingleConn>
}
 800efd4:	b006      	add	sp, #24
 800efd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      conn.Type = ES_WIFI_TCP_CONNECTION;
 800efda:	2300      	movs	r3, #0
 800efdc:	f88d 3004 	strb.w	r3, [sp, #4]
 800efe0:	e7f3      	b.n	800efca <es_wifi_listen+0x3a>
    ret = NET_ERROR_INVALID_SOCKET;
 800efe2:	f06f 0005 	mvn.w	r0, #5
}
 800efe6:	4770      	bx	lr
 800efe8:	2400b8d4 	.word	0x2400b8d4

0800efec <es_wifi_if_disconnect>:
{
 800efec:	b510      	push	{r4, lr}
 800efee:	4604      	mov	r4, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 800eff0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800eff4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eff6:	f7ff f967 	bl	800e2c8 <castcontext>
  (void) ES_WIFI_Disconnect(pEsWifiObj);
 800effa:	f7f5 fa49 	bl	8004490 <ES_WIFI_Disconnect>
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 800effe:	2107      	movs	r1, #7
 800f000:	4620      	mov	r0, r4
 800f002:	f7ff f92b 	bl	800e25c <net_state_manage_event>
}
 800f006:	2000      	movs	r0, #0
 800f008:	bd10      	pop	{r4, pc}
	...

0800f00c <es_wifi_if_start>:
{
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	4604      	mov	r4, r0
  if (wifi_probe(&pnetif->pdrv->context) == NET_OK)
 800f010:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f014:	302c      	adds	r0, #44	; 0x2c
 800f016:	f7f3 fa2b 	bl	8002470 <wifi_probe>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d13f      	bne.n	800f09e <es_wifi_if_start+0x92>
 800f01e:	4605      	mov	r5, r0
    pEsWifiObj = castcontext(pnetif->pdrv->context);
 800f020:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800f024:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f026:	f7ff f94f 	bl	800e2c8 <castcontext>
 800f02a:	4606      	mov	r6, r0
    if (ES_WIFI_STATUS_OK != ES_WIFI_Init(pEsWifiObj))
 800f02c:	f7f5 f8fc 	bl	8004228 <ES_WIFI_Init>
 800f030:	bbc0      	cbnz	r0, 800f0a4 <es_wifi_if_start+0x98>
      (void)strncpy(pnetif->DeviceName, (char_t *)pEsWifiObj->Product_Name, NET_DEVICE_NAME_LEN);
 800f032:	2240      	movs	r2, #64	; 0x40
 800f034:	f106 0168 	add.w	r1, r6, #104	; 0x68
 800f038:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f03c:	f00e f829 	bl	801d092 <strncpy>
      (void) strncpy(pnetif->DeviceID, (char_t *)pEsWifiObj->Product_ID, NET_DEVICE_ID_LEN);
 800f040:	2240      	movs	r2, #64	; 0x40
 800f042:	4631      	mov	r1, r6
 800f044:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800f048:	f00e f823 	bl	801d092 <strncpy>
      (void) strncpy(pnetif->DeviceVer, (char_t *)pEsWifiObj->FW_Rev, NET_DEVICE_VER_LEN);
 800f04c:	2240      	movs	r2, #64	; 0x40
 800f04e:	f106 0120 	add.w	r1, r6, #32
 800f052:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 800f056:	f00e f81c 	bl	801d092 <strncpy>
      (void) ES_WIFI_GetMACAddress(pEsWifiObj, pnetif->macaddr.mac);
 800f05a:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
 800f05e:	4630      	mov	r0, r6
 800f060:	f7f5 faac 	bl	80045bc <ES_WIFI_GetMACAddress>
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800f064:	462b      	mov	r3, r5
 800f066:	e012      	b.n	800f08e <es_wifi_if_start+0x82>
        WifiChannel[i].status          = WIFI_FREE_SOCKET;
 800f068:	4910      	ldr	r1, [pc, #64]	; (800f0ac <es_wifi_if_start+0xa0>)
 800f06a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800f06e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 800f072:	f04f 0c00 	mov.w	ip, #0
 800f076:	f882 c001 	strb.w	ip, [r2, #1]
        WifiChannel[i].Number          = (uint8_t) i;
 800f07a:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
        WifiChannel[i].recvtimeout     = MIN((NET_SOCK_DEFAULT_RECEIVE_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 800f07e:	f247 5130 	movw	r1, #30000	; 0x7530
 800f082:	6191      	str	r1, [r2, #24]
        WifiChannel[i].sendtimeout     = MIN((NET_SOCK_DEFAULT_SEND_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 800f084:	6151      	str	r1, [r2, #20]
        WifiChannel[i].blocking        = 1; /* default blocking */
 800f086:	2101      	movs	r1, #1
 800f088:	6111      	str	r1, [r2, #16]
        WifiChannel[i].pnetif          = pnetif;
 800f08a:	6254      	str	r4, [r2, #36]	; 0x24
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800f08c:	440b      	add	r3, r1
 800f08e:	2b03      	cmp	r3, #3
 800f090:	ddea      	ble.n	800f068 <es_wifi_if_start+0x5c>
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 800f092:	2107      	movs	r1, #7
 800f094:	4620      	mov	r0, r4
 800f096:	f7ff f8e1 	bl	800e25c <net_state_manage_event>
}
 800f09a:	4628      	mov	r0, r5
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_DEVICE_ERROR;
 800f09e:	f06f 050c 	mvn.w	r5, #12
 800f0a2:	e7fa      	b.n	800f09a <es_wifi_if_start+0x8e>
      ret = NET_ERROR_INTERFACE_FAILURE;
 800f0a4:	f06f 0510 	mvn.w	r5, #16
  return ret;
 800f0a8:	e7f7      	b.n	800f09a <es_wifi_if_start+0x8e>
 800f0aa:	bf00      	nop
 800f0ac:	2400b8d4 	.word	0x2400b8d4

0800f0b0 <es_wifi_driver>:
{
 800f0b0:	b508      	push	{r3, lr}
  return es_wifi_if_init(pnetif);
 800f0b2:	f7ff fa51 	bl	800e558 <es_wifi_if_init>
}
 800f0b6:	bd08      	pop	{r3, pc}

0800f0b8 <GetESWifiSecurityType>:
  if (security == NET_WIFI_SM_OPEN)
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	b1e8      	cbz	r0, 800f0f8 <GetESWifiSecurityType+0x40>
  ES_WIFI_SecurityType_t        ret = ES_WIFI_SEC_UNKNOWN;
 800f0bc:	20ff      	movs	r0, #255	; 0xff
  if (MATCH(security, NET_WEP_ENABLED))
 800f0be:	f013 0f01 	tst.w	r3, #1
 800f0c2:	d000      	beq.n	800f0c6 <GetESWifiSecurityType+0xe>
    ret = ES_WIFI_SEC_WEP;
 800f0c4:	2001      	movs	r0, #1
  if (MATCH(security, NET_WIFI_SM_WPA_MIXED_PSK))
 800f0c6:	4a14      	ldr	r2, [pc, #80]	; (800f118 <GetESWifiSecurityType+0x60>)
 800f0c8:	439a      	bics	r2, r3
 800f0ca:	d017      	beq.n	800f0fc <GetESWifiSecurityType+0x44>
  if (MATCH(security, NET_WIFI_SM_WPA_TKIP_PSK))
 800f0cc:	4a13      	ldr	r2, [pc, #76]	; (800f11c <GetESWifiSecurityType+0x64>)
 800f0ce:	439a      	bics	r2, r3
 800f0d0:	d016      	beq.n	800f100 <GetESWifiSecurityType+0x48>
  if (MATCH(security, NET_WIFI_SM_WPA_AES_PSK))
 800f0d2:	4a13      	ldr	r2, [pc, #76]	; (800f120 <GetESWifiSecurityType+0x68>)
 800f0d4:	439a      	bics	r2, r3
 800f0d6:	d015      	beq.n	800f104 <GetESWifiSecurityType+0x4c>
  if (MATCH(security, NET_WIFI_SM_WPA2_WPA_PSK))
 800f0d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f0dc:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800f0e0:	d012      	beq.n	800f108 <GetESWifiSecurityType+0x50>
  if (MATCH(security, NET_WIFI_SM_WPA2_TKIP_PSK))
 800f0e2:	4a10      	ldr	r2, [pc, #64]	; (800f124 <GetESWifiSecurityType+0x6c>)
 800f0e4:	439a      	bics	r2, r3
 800f0e6:	d011      	beq.n	800f10c <GetESWifiSecurityType+0x54>
  if (MATCH(security, NET_WIFI_SM_WPA2_AES_PSK))
 800f0e8:	4a0f      	ldr	r2, [pc, #60]	; (800f128 <GetESWifiSecurityType+0x70>)
 800f0ea:	439a      	bics	r2, r3
 800f0ec:	d010      	beq.n	800f110 <GetESWifiSecurityType+0x58>
  if (MATCH(security, NET_WIFI_SM_WPA2_MIXED_PSK))
 800f0ee:	4a0f      	ldr	r2, [pc, #60]	; (800f12c <GetESWifiSecurityType+0x74>)
 800f0f0:	ea32 0303 	bics.w	r3, r2, r3
 800f0f4:	d00e      	beq.n	800f114 <GetESWifiSecurityType+0x5c>
}
 800f0f6:	4770      	bx	lr
    ret = ES_WIFI_SEC_OPEN;
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	e7e0      	b.n	800f0be <GetESWifiSecurityType+0x6>
    ret = ES_WIFI_SEC_WPA;
 800f0fc:	2002      	movs	r0, #2
 800f0fe:	e7e5      	b.n	800f0cc <GetESWifiSecurityType+0x14>
    ret = ES_WIFI_SEC_WPA;
 800f100:	2002      	movs	r0, #2
 800f102:	e7e6      	b.n	800f0d2 <GetESWifiSecurityType+0x1a>
    ret = ES_WIFI_SEC_WPA;
 800f104:	2002      	movs	r0, #2
 800f106:	e7e7      	b.n	800f0d8 <GetESWifiSecurityType+0x20>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f108:	2004      	movs	r0, #4
 800f10a:	e7ea      	b.n	800f0e2 <GetESWifiSecurityType+0x2a>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f10c:	2004      	movs	r0, #4
 800f10e:	e7eb      	b.n	800f0e8 <GetESWifiSecurityType+0x30>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f110:	2004      	movs	r0, #4
 800f112:	e7ec      	b.n	800f0ee <GetESWifiSecurityType+0x36>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f114:	2004      	movs	r0, #4
 800f116:	e7ee      	b.n	800f0f6 <GetESWifiSecurityType+0x3e>
 800f118:	00200006 	.word	0x00200006
 800f11c:	00200002 	.word	0x00200002
 800f120:	00200004 	.word	0x00200004
 800f124:	00400002 	.word	0x00400002
 800f128:	00400004 	.word	0x00400004
 800f12c:	00400006 	.word	0x00400006

0800f130 <es_wifi_if_connect_sta>:
{
 800f130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f132:	b083      	sub	sp, #12
 800f134:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 800f136:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
 800f13a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f13c:	f7ff f8c4 	bl	800e2c8 <castcontext>
 800f140:	4604      	mov	r4, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 800f142:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800f144:	695b      	ldr	r3, [r3, #20]
  ret = ES_WIFI_Connect(pEsWifiObj, credentials->ssid, credentials->psk,
 800f146:	681e      	ldr	r6, [r3, #0]
 800f148:	685f      	ldr	r7, [r3, #4]
 800f14a:	6898      	ldr	r0, [r3, #8]
 800f14c:	f7ff ffb4 	bl	800f0b8 <GetESWifiSecurityType>
 800f150:	4603      	mov	r3, r0
 800f152:	463a      	mov	r2, r7
 800f154:	4631      	mov	r1, r6
 800f156:	4620      	mov	r0, r4
 800f158:	f7f5 f936 	bl	80043c8 <ES_WIFI_Connect>
  if (ret == ES_WIFI_STATUS_OK)
 800f15c:	4606      	mov	r6, r0
 800f15e:	b138      	cbz	r0, 800f170 <es_wifi_if_connect_sta+0x40>
  if (ES_WIFI_STATUS_OK == ret)
 800f160:	b91e      	cbnz	r6, 800f16a <es_wifi_if_connect_sta+0x3a>
    if (pEsWifiObj->NetSettings.IsConnected != 0U)
 800f162:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 800f166:	b943      	cbnz	r3, 800f17a <es_wifi_if_connect_sta+0x4a>
      ret = ES_WIFI_STATUS_ERROR;
 800f168:	2602      	movs	r6, #2
}
 800f16a:	4630      	mov	r0, r6
 800f16c:	b003      	add	sp, #12
 800f16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = ES_WIFI_GetNetworkSettings(pEsWifiObj);
 800f170:	4620      	mov	r0, r4
 800f172:	f7f5 f99d 	bl	80044b0 <ES_WIFI_GetNetworkSettings>
 800f176:	4606      	mov	r6, r0
 800f178:	e7f2      	b.n	800f160 <es_wifi_if_connect_sta+0x30>
      (void) memcpy(addr, pEsWifiObj->NetSettings.IP_Addr, 4);
 800f17a:	f8d4 20d5 	ldr.w	r2, [r4, #213]	; 0xd5
 800f17e:	9201      	str	r2, [sp, #4]
      pnetif->ipaddr.addr = NET_ARTON(addr);
 800f180:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800f184:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 800f188:	430b      	orrs	r3, r1
 800f18a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 800f18e:	430b      	orrs	r3, r1
 800f190:	b2d2      	uxtb	r2, r2
 800f192:	4313      	orrs	r3, r2
 800f194:	606b      	str	r3, [r5, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 800f196:	210a      	movs	r1, #10
 800f198:	4628      	mov	r0, r5
 800f19a:	f7ff f85f 	bl	800e25c <net_state_manage_event>
      ret = ES_WIFI_STATUS_OK;
 800f19e:	e7e4      	b.n	800f16a <es_wifi_if_connect_sta+0x3a>

0800f1a0 <es_wifi_if_connect_ap>:
{
 800f1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1a2:	b093      	sub	sp, #76	; 0x4c
 800f1a4:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 800f1a6:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
 800f1aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f1ac:	f7ff f88c 	bl	800e2c8 <castcontext>
 800f1b0:	4606      	mov	r6, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 800f1b2:	6f64      	ldr	r4, [r4, #116]	; 0x74
 800f1b4:	6967      	ldr	r7, [r4, #20]
  (void) strncpy((char_t *) ApConfig.SSID, credentials->ssid, sizeof(ApConfig.SSID));
 800f1b6:	2221      	movs	r2, #33	; 0x21
 800f1b8:	6839      	ldr	r1, [r7, #0]
 800f1ba:	4668      	mov	r0, sp
 800f1bc:	f00d ff69 	bl	801d092 <strncpy>
  (void) strncpy((char_t *) ApConfig.Pass, credentials->psk, sizeof(ApConfig.SSID));
 800f1c0:	2221      	movs	r2, #33	; 0x21
 800f1c2:	6879      	ldr	r1, [r7, #4]
 800f1c4:	eb0d 0002 	add.w	r0, sp, r2
 800f1c8:	f00d ff63 	bl	801d092 <strncpy>
  ApConfig.Security = GetESWifiSecurityType(credentials->security_mode);
 800f1cc:	68b8      	ldr	r0, [r7, #8]
 800f1ce:	f7ff ff73 	bl	800f0b8 <GetESWifiSecurityType>
 800f1d2:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  ApConfig.Channel = pnetif->pdrv->extension.wifi->access_channel;
 800f1d6:	7e63      	ldrb	r3, [r4, #25]
 800f1d8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  ApConfig.MaxConnections = pnetif->pdrv->extension.wifi->max_connections;
 800f1dc:	7ea3      	ldrb	r3, [r4, #26]
 800f1de:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (pnetif->pdrv->extension.wifi->AP_hidden)
 800f1e2:	7ee3      	ldrb	r3, [r4, #27]
 800f1e4:	b15b      	cbz	r3, 800f1fe <es_wifi_if_connect_ap+0x5e>
    ApConfig.Hidden = 1;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  ret = ES_WIFI_ActivateAP(pEsWifiObj, &ApConfig);
 800f1ec:	4669      	mov	r1, sp
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f7f5 f978 	bl	80044e4 <ES_WIFI_ActivateAP>
  if (ret == ES_WIFI_STATUS_OK)
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	b130      	cbz	r0, 800f206 <es_wifi_if_connect_ap+0x66>
}
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	b013      	add	sp, #76	; 0x4c
 800f1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ApConfig.Hidden = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 800f204:	e7f2      	b.n	800f1ec <es_wifi_if_connect_ap+0x4c>
    (void) NET_ATON("192.168.10.1", &(pnetif->ipaddr));
 800f206:	1d29      	adds	r1, r5, #4
 800f208:	4803      	ldr	r0, [pc, #12]	; (800f218 <es_wifi_if_connect_ap+0x78>)
 800f20a:	f7fe fd56 	bl	800dcba <net_aton>
    (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 800f20e:	210a      	movs	r1, #10
 800f210:	4628      	mov	r0, r5
 800f212:	f7ff f823 	bl	800e25c <net_state_manage_event>
    ret = ES_WIFI_STATUS_OK;
 800f216:	e7ef      	b.n	800f1f8 <es_wifi_if_connect_ap+0x58>
 800f218:	0801eeac 	.word	0x0801eeac

0800f21c <es_wifi_if_connect>:
{
 800f21c:	b508      	push	{r3, lr}
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 800f21e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800f222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f224:	7e1b      	ldrb	r3, [r3, #24]
 800f226:	b913      	cbnz	r3, 800f22e <es_wifi_if_connect+0x12>
    ret =  es_wifi_if_connect_sta(pnetif);
 800f228:	f7ff ff82 	bl	800f130 <es_wifi_if_connect_sta>
}
 800f22c:	bd08      	pop	{r3, pc}
    ret =  es_wifi_if_connect_ap(pnetif);
 800f22e:	f7ff ffb7 	bl	800f1a0 <es_wifi_if_connect_ap>
  return ret;
 800f232:	e7fb      	b.n	800f22c <es_wifi_if_connect+0x10>

0800f234 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f234:	8880      	ldrh	r0, [r0, #4]
 800f236:	4770      	bx	lr

0800f238 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	6803      	ldr	r3, [r0, #0]
 800f23c:	460c      	mov	r4, r1
 800f23e:	2100      	movs	r1, #0
 800f240:	4605      	mov	r5, r0
 800f242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f244:	4798      	blx	r3
 800f246:	4606      	mov	r6, r0
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	4628      	mov	r0, r5
 800f24c:	1ba4      	subs	r4, r4, r6
 800f24e:	6a1b      	ldr	r3, [r3, #32]
 800f250:	b2a4      	uxth	r4, r4
 800f252:	4798      	blx	r3
 800f254:	fbb4 f0f0 	udiv	r0, r4, r0
 800f258:	bd70      	pop	{r4, r5, r6, pc}

0800f25a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f25a:	2300      	movs	r3, #0
 800f25c:	8083      	strh	r3, [r0, #4]
 800f25e:	4770      	bx	lr

0800f260 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f260:	b510      	push	{r4, lr}
 800f262:	6803      	ldr	r3, [r0, #0]
 800f264:	4604      	mov	r4, r0
 800f266:	8881      	ldrh	r1, [r0, #4]
 800f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26a:	4798      	blx	r3
 800f26c:	88a3      	ldrh	r3, [r4, #4]
 800f26e:	3301      	adds	r3, #1
 800f270:	80a3      	strh	r3, [r4, #4]
 800f272:	bd10      	pop	{r4, pc}

0800f274 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f274:	6803      	ldr	r3, [r0, #0]
 800f276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f278:	4718      	bx	r3

0800f27a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f27a:	4770      	bx	lr

0800f27c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f27c:	4a02      	ldr	r2, [pc, #8]	; (800f288 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f27e:	6002      	str	r2, [r0, #0]
 800f280:	2200      	movs	r2, #0
 800f282:	8082      	strh	r2, [r0, #4]
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	0801eec4 	.word	0x0801eec4

0800f28c <_ZN8touchgfx9Container13getFirstChildEv>:
 800f28c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f28e:	4770      	bx	lr

0800f290 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f290:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f292:	2000      	movs	r0, #0
 800f294:	b12b      	cbz	r3, 800f2a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f296:	b920      	cbnz	r0, 800f2a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f298:	1a5a      	subs	r2, r3, r1
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	4250      	negs	r0, r2
 800f29e:	4150      	adcs	r0, r2
 800f2a0:	e7f8      	b.n	800f294 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f2a2:	4770      	bx	lr

0800f2a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	6148      	str	r0, [r1, #20]
 800f2a8:	618b      	str	r3, [r1, #24]
 800f2aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f2ac:	b913      	cbnz	r3, 800f2b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800f2ae:	6281      	str	r1, [r0, #40]	; 0x28
 800f2b0:	4770      	bx	lr
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	699a      	ldr	r2, [r3, #24]
 800f2b6:	2a00      	cmp	r2, #0
 800f2b8:	d1fb      	bne.n	800f2b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800f2ba:	6199      	str	r1, [r3, #24]
 800f2bc:	4770      	bx	lr

0800f2be <_ZN8touchgfx9Container9removeAllEv>:
 800f2be:	2200      	movs	r2, #0
 800f2c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f2c2:	b123      	cbz	r3, 800f2ce <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f2c4:	6999      	ldr	r1, [r3, #24]
 800f2c6:	6281      	str	r1, [r0, #40]	; 0x28
 800f2c8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f2cc:	e7f8      	b.n	800f2c0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f2ce:	4770      	bx	lr

0800f2d0 <_ZN8touchgfx9Container6unlinkEv>:
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	6283      	str	r3, [r0, #40]	; 0x28
 800f2d4:	4770      	bx	lr

0800f2d6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	8002      	strh	r2, [r0, #0]
 800f2da:	8042      	strh	r2, [r0, #2]
 800f2dc:	8082      	strh	r2, [r0, #4]
 800f2de:	80c2      	strh	r2, [r0, #6]
 800f2e0:	4770      	bx	lr

0800f2e2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f2e2:	b570      	push	{r4, r5, r6, lr}
 800f2e4:	460d      	mov	r5, r1
 800f2e6:	4616      	mov	r6, r2
 800f2e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f2ea:	b13c      	cbz	r4, 800f2fc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f2ec:	6823      	ldr	r3, [r4, #0]
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2f6:	4798      	blx	r3
 800f2f8:	69a4      	ldr	r4, [r4, #24]
 800f2fa:	e7f6      	b.n	800f2ea <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}

0800f2fe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f2fe:	b538      	push	{r3, r4, r5, lr}
 800f300:	460d      	mov	r5, r1
 800f302:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f304:	b134      	cbz	r4, 800f314 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f306:	682b      	ldr	r3, [r5, #0]
 800f308:	4621      	mov	r1, r4
 800f30a:	4628      	mov	r0, r5
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	4798      	blx	r3
 800f310:	69a4      	ldr	r4, [r4, #24]
 800f312:	e7f7      	b.n	800f304 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f314:	bd38      	pop	{r3, r4, r5, pc}

0800f316 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800f316:	b510      	push	{r4, lr}
 800f318:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f31a:	b12c      	cbz	r4, 800f328 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800f31c:	6823      	ldr	r3, [r4, #0]
 800f31e:	4620      	mov	r0, r4
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	4798      	blx	r3
 800f324:	69a4      	ldr	r4, [r4, #24]
 800f326:	e7f8      	b.n	800f31a <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800f328:	bd10      	pop	{r4, pc}

0800f32a <_ZN8touchgfx9ContainerD1Ev>:
 800f32a:	4770      	bx	lr

0800f32c <_ZN8touchgfx9ContainerD0Ev>:
 800f32c:	b510      	push	{r4, lr}
 800f32e:	4604      	mov	r4, r0
 800f330:	212c      	movs	r1, #44	; 0x2c
 800f332:	f00c ffde 	bl	801c2f2 <_ZdlPvj>
 800f336:	4620      	mov	r0, r4
 800f338:	bd10      	pop	{r4, pc}

0800f33a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f33a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f33c:	b19b      	cbz	r3, 800f366 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f33e:	428b      	cmp	r3, r1
 800f340:	d109      	bne.n	800f356 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f342:	699a      	ldr	r2, [r3, #24]
 800f344:	2100      	movs	r1, #0
 800f346:	6159      	str	r1, [r3, #20]
 800f348:	6282      	str	r2, [r0, #40]	; 0x28
 800f34a:	b902      	cbnz	r2, 800f34e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f34c:	4770      	bx	lr
 800f34e:	6199      	str	r1, [r3, #24]
 800f350:	4770      	bx	lr
 800f352:	4613      	mov	r3, r2
 800f354:	b13a      	cbz	r2, 800f366 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f356:	699a      	ldr	r2, [r3, #24]
 800f358:	428a      	cmp	r2, r1
 800f35a:	d1fa      	bne.n	800f352 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f35c:	698a      	ldr	r2, [r1, #24]
 800f35e:	619a      	str	r2, [r3, #24]
 800f360:	2300      	movs	r3, #0
 800f362:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f366:	4770      	bx	lr

0800f368 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f368:	b410      	push	{r4}
 800f36a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f36c:	4604      	mov	r4, r0
 800f36e:	b92b      	cbnz	r3, 800f37c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f370:	6803      	ldr	r3, [r0, #0]
 800f372:	4611      	mov	r1, r2
 800f374:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f37a:	4718      	bx	r3
 800f37c:	b941      	cbnz	r1, 800f390 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f37e:	6193      	str	r3, [r2, #24]
 800f380:	6282      	str	r2, [r0, #40]	; 0x28
 800f382:	6154      	str	r4, [r2, #20]
 800f384:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	4603      	mov	r3, r0
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0f9      	beq.n	800f384 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f390:	4299      	cmp	r1, r3
 800f392:	6998      	ldr	r0, [r3, #24]
 800f394:	d1f9      	bne.n	800f38a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f396:	6190      	str	r0, [r2, #24]
 800f398:	618a      	str	r2, [r1, #24]
 800f39a:	e7f2      	b.n	800f382 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800f39c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a0:	461f      	mov	r7, r3
 800f3a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800f3a6:	460d      	mov	r5, r1
 800f3a8:	4616      	mov	r6, r2
 800f3aa:	b103      	cbz	r3, 800f3ae <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f3ac:	6038      	str	r0, [r7, #0]
 800f3ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f3b0:	b314      	cbz	r4, 800f3f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f3b2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f3b6:	b1eb      	cbz	r3, 800f3f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f3b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f3bc:	428d      	cmp	r5, r1
 800f3be:	db19      	blt.n	800f3f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f3c0:	b289      	uxth	r1, r1
 800f3c2:	8923      	ldrh	r3, [r4, #8]
 800f3c4:	440b      	add	r3, r1
 800f3c6:	b21b      	sxth	r3, r3
 800f3c8:	429d      	cmp	r5, r3
 800f3ca:	da13      	bge.n	800f3f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f3cc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f3d0:	4296      	cmp	r6, r2
 800f3d2:	db0f      	blt.n	800f3f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f3d4:	b292      	uxth	r2, r2
 800f3d6:	8963      	ldrh	r3, [r4, #10]
 800f3d8:	4413      	add	r3, r2
 800f3da:	b21b      	sxth	r3, r3
 800f3dc:	429e      	cmp	r6, r3
 800f3de:	da09      	bge.n	800f3f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f3e0:	6823      	ldr	r3, [r4, #0]
 800f3e2:	1ab2      	subs	r2, r6, r2
 800f3e4:	1a69      	subs	r1, r5, r1
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800f3ec:	b212      	sxth	r2, r2
 800f3ee:	463b      	mov	r3, r7
 800f3f0:	b209      	sxth	r1, r1
 800f3f2:	47c0      	blx	r8
 800f3f4:	69a4      	ldr	r4, [r4, #24]
 800f3f6:	e7db      	b.n	800f3b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800f3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f400:	4c6d      	ldr	r4, [pc, #436]	; (800f5b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800f402:	b0a1      	sub	sp, #132	; 0x84
 800f404:	4606      	mov	r6, r0
 800f406:	6824      	ldr	r4, [r4, #0]
 800f408:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800f40a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800f40e:	2400      	movs	r4, #0
 800f410:	9303      	str	r3, [sp, #12]
 800f412:	802c      	strh	r4, [r5, #0]
 800f414:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800f416:	802c      	strh	r4, [r5, #0]
 800f418:	601c      	str	r4, [r3, #0]
 800f41a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f41e:	f7ff ffbd 	bl	800f39c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f422:	f1b9 0f03 	cmp.w	r9, #3
 800f426:	f340 80c1 	ble.w	800f5ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800f42a:	4631      	mov	r1, r6
 800f42c:	a80c      	add	r0, sp, #48	; 0x30
 800f42e:	f003 fa6f 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f432:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800f436:	9306      	str	r3, [sp, #24]
 800f438:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800f43c:	9307      	str	r3, [sp, #28]
 800f43e:	9b03      	ldr	r3, [sp, #12]
 800f440:	f8d3 a000 	ldr.w	sl, [r3]
 800f444:	f1ba 0f00 	cmp.w	sl, #0
 800f448:	f000 80b3 	beq.w	800f5b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800f44c:	4651      	mov	r1, sl
 800f44e:	a810      	add	r0, sp, #64	; 0x40
 800f450:	f003 fa5e 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f454:	2002      	movs	r0, #2
 800f456:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800f45a:	9b01      	ldr	r3, [sp, #4]
 800f45c:	9a06      	ldr	r2, [sp, #24]
 800f45e:	fb91 f1f0 	sdiv	r1, r1, r0
 800f462:	189d      	adds	r5, r3, r2
 800f464:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800f468:	9a07      	ldr	r2, [sp, #28]
 800f46a:	4419      	add	r1, r3
 800f46c:	9b02      	ldr	r3, [sp, #8]
 800f46e:	4413      	add	r3, r2
 800f470:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800f474:	1a6d      	subs	r5, r5, r1
 800f476:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800f47a:	fb92 f2f0 	sdiv	r2, r2, r0
 800f47e:	440a      	add	r2, r1
 800f480:	1a9b      	subs	r3, r3, r2
 800f482:	435b      	muls	r3, r3
 800f484:	fb05 3505 	mla	r5, r5, r5, r3
 800f488:	4f4c      	ldr	r7, [pc, #304]	; (800f5bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800f48a:	ac10      	add	r4, sp, #64	; 0x40
 800f48c:	f1b9 0f0c 	cmp.w	r9, #12
 800f490:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f494:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f498:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f49a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f49c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f4a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f4a4:	f04f 0303 	mov.w	r3, #3
 800f4a8:	bfd8      	it	le
 800f4aa:	f109 32ff 	addle.w	r2, r9, #4294967295
 800f4ae:	f04f 0400 	mov.w	r4, #0
 800f4b2:	f8cd 9000 	str.w	r9, [sp]
 800f4b6:	bfcc      	ite	gt
 800f4b8:	4698      	movgt	r8, r3
 800f4ba:	fb92 f8f3 	sdivle	r8, r2, r3
 800f4be:	1c63      	adds	r3, r4, #1
 800f4c0:	aa10      	add	r2, sp, #64	; 0x40
 800f4c2:	f004 0401 	and.w	r4, r4, #1
 800f4c6:	f04f 0b00 	mov.w	fp, #0
 800f4ca:	9308      	str	r3, [sp, #32]
 800f4cc:	9b00      	ldr	r3, [sp, #0]
 800f4ce:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800f4d2:	fb93 f3f8 	sdiv	r3, r3, r8
 800f4d6:	3404      	adds	r4, #4
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	9304      	str	r3, [sp, #16]
 800f4dc:	9a04      	ldr	r2, [sp, #16]
 800f4de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f4e2:	fb13 f302 	smulbb	r3, r3, r2
 800f4e6:	9a01      	ldr	r2, [sp, #4]
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	1899      	adds	r1, r3, r2
 800f4ec:	9305      	str	r3, [sp, #20]
 800f4ee:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f4f2:	b209      	sxth	r1, r1
 800f4f4:	4299      	cmp	r1, r3
 800f4f6:	db4d      	blt.n	800f594 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f4f8:	8932      	ldrh	r2, [r6, #8]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	b21b      	sxth	r3, r3
 800f4fe:	4299      	cmp	r1, r3
 800f500:	da48      	bge.n	800f594 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f502:	9b04      	ldr	r3, [sp, #16]
 800f504:	6827      	ldr	r7, [r4, #0]
 800f506:	fb17 f703 	smulbb	r7, r7, r3
 800f50a:	9b02      	ldr	r3, [sp, #8]
 800f50c:	b2bf      	uxth	r7, r7
 800f50e:	18fa      	adds	r2, r7, r3
 800f510:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f514:	b212      	sxth	r2, r2
 800f516:	429a      	cmp	r2, r3
 800f518:	db3c      	blt.n	800f594 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f51a:	8970      	ldrh	r0, [r6, #10]
 800f51c:	4403      	add	r3, r0
 800f51e:	b21b      	sxth	r3, r3
 800f520:	429a      	cmp	r2, r3
 800f522:	da37      	bge.n	800f594 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f524:	2300      	movs	r3, #0
 800f526:	4630      	mov	r0, r6
 800f528:	930b      	str	r3, [sp, #44]	; 0x2c
 800f52a:	ab0b      	add	r3, sp, #44	; 0x2c
 800f52c:	f7ff ff36 	bl	800f39c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f532:	b37a      	cbz	r2, 800f594 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f534:	4552      	cmp	r2, sl
 800f536:	d02d      	beq.n	800f594 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f538:	4611      	mov	r1, r2
 800f53a:	a80e      	add	r0, sp, #56	; 0x38
 800f53c:	9209      	str	r2, [sp, #36]	; 0x24
 800f53e:	f003 f9e7 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f542:	f04f 0e02 	mov.w	lr, #2
 800f546:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800f54a:	9a06      	ldr	r2, [sp, #24]
 800f54c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800f550:	9b01      	ldr	r3, [sp, #4]
 800f552:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800f556:	4413      	add	r3, r2
 800f558:	9a07      	ldr	r2, [sp, #28]
 800f55a:	fb91 f1fe 	sdiv	r1, r1, lr
 800f55e:	fb9c fcfe 	sdiv	ip, ip, lr
 800f562:	4401      	add	r1, r0
 800f564:	1a58      	subs	r0, r3, r1
 800f566:	9b02      	ldr	r3, [sp, #8]
 800f568:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800f56c:	4413      	add	r3, r2
 800f56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f570:	448c      	add	ip, r1
 800f572:	eba3 030c 	sub.w	r3, r3, ip
 800f576:	435b      	muls	r3, r3
 800f578:	fb00 3300 	mla	r3, r0, r0, r3
 800f57c:	42ab      	cmp	r3, r5
 800f57e:	d208      	bcs.n	800f592 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800f580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f582:	461d      	mov	r5, r3
 800f584:	9803      	ldr	r0, [sp, #12]
 800f586:	6001      	str	r1, [r0, #0]
 800f588:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800f58a:	9805      	ldr	r0, [sp, #20]
 800f58c:	8008      	strh	r0, [r1, #0]
 800f58e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f590:	800f      	strh	r7, [r1, #0]
 800f592:	4692      	mov	sl, r2
 800f594:	f10b 0b01 	add.w	fp, fp, #1
 800f598:	3408      	adds	r4, #8
 800f59a:	f1bb 0f04 	cmp.w	fp, #4
 800f59e:	d19d      	bne.n	800f4dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800f5a0:	9b00      	ldr	r3, [sp, #0]
 800f5a2:	9c08      	ldr	r4, [sp, #32]
 800f5a4:	444b      	add	r3, r9
 800f5a6:	4544      	cmp	r4, r8
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	d188      	bne.n	800f4be <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800f5ac:	b021      	add	sp, #132	; 0x84
 800f5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b2:	f04f 35ff 	mov.w	r5, #4294967295
 800f5b6:	e767      	b.n	800f488 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800f5b8:	2400b980 	.word	0x2400b980
 800f5bc:	0801da28 	.word	0x0801da28

0800f5c0 <_ZN8touchgfx4RectaNERKS0_>:
 800f5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5c4:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f5c8:	888c      	ldrh	r4, [r1, #4]
 800f5ca:	f9b0 9000 	ldrsh.w	r9, [r0]
 800f5ce:	443c      	add	r4, r7
 800f5d0:	b2a4      	uxth	r4, r4
 800f5d2:	fa0f f884 	sxth.w	r8, r4
 800f5d6:	45c1      	cmp	r9, r8
 800f5d8:	da2f      	bge.n	800f63a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f5da:	8882      	ldrh	r2, [r0, #4]
 800f5dc:	444a      	add	r2, r9
 800f5de:	b292      	uxth	r2, r2
 800f5e0:	fa0f fe82 	sxth.w	lr, r2
 800f5e4:	4577      	cmp	r7, lr
 800f5e6:	da28      	bge.n	800f63a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f5e8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f5ec:	88cb      	ldrh	r3, [r1, #6]
 800f5ee:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800f5f2:	442b      	add	r3, r5
 800f5f4:	b21b      	sxth	r3, r3
 800f5f6:	429e      	cmp	r6, r3
 800f5f8:	da1f      	bge.n	800f63a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f5fa:	88c3      	ldrh	r3, [r0, #6]
 800f5fc:	4433      	add	r3, r6
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	fa0f fc83 	sxth.w	ip, r3
 800f604:	4565      	cmp	r5, ip
 800f606:	da18      	bge.n	800f63a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f608:	454f      	cmp	r7, r9
 800f60a:	bfb8      	it	lt
 800f60c:	464f      	movlt	r7, r9
 800f60e:	42b5      	cmp	r5, r6
 800f610:	bfb8      	it	lt
 800f612:	4635      	movlt	r5, r6
 800f614:	45f0      	cmp	r8, lr
 800f616:	bfd8      	it	le
 800f618:	4622      	movle	r2, r4
 800f61a:	1bd2      	subs	r2, r2, r7
 800f61c:	8082      	strh	r2, [r0, #4]
 800f61e:	884a      	ldrh	r2, [r1, #2]
 800f620:	88c9      	ldrh	r1, [r1, #6]
 800f622:	8007      	strh	r7, [r0, #0]
 800f624:	440a      	add	r2, r1
 800f626:	8045      	strh	r5, [r0, #2]
 800f628:	b292      	uxth	r2, r2
 800f62a:	b211      	sxth	r1, r2
 800f62c:	458c      	cmp	ip, r1
 800f62e:	bfa8      	it	ge
 800f630:	4613      	movge	r3, r2
 800f632:	1b5b      	subs	r3, r3, r5
 800f634:	80c3      	strh	r3, [r0, #6]
 800f636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f63a:	2300      	movs	r3, #0
 800f63c:	8003      	strh	r3, [r0, #0]
 800f63e:	8043      	strh	r3, [r0, #2]
 800f640:	8083      	strh	r3, [r0, #4]
 800f642:	80c3      	strh	r3, [r0, #6]
 800f644:	e7f7      	b.n	800f636 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800f646 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800f646:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	dd06      	ble.n	800f65c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800f64e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f652:	2800      	cmp	r0, #0
 800f654:	bfcc      	ite	gt
 800f656:	2000      	movgt	r0, #0
 800f658:	2001      	movle	r0, #1
 800f65a:	4770      	bx	lr
 800f65c:	2001      	movs	r0, #1
 800f65e:	4770      	bx	lr

0800f660 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800f660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f664:	2300      	movs	r3, #0
 800f666:	4604      	mov	r4, r0
 800f668:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800f66a:	8003      	strh	r3, [r0, #0]
 800f66c:	8043      	strh	r3, [r0, #2]
 800f66e:	8083      	strh	r3, [r0, #4]
 800f670:	80c3      	strh	r3, [r0, #6]
 800f672:	2d00      	cmp	r5, #0
 800f674:	d040      	beq.n	800f6f8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800f676:	1d28      	adds	r0, r5, #4
 800f678:	f7ff ffe5 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f67c:	b988      	cbnz	r0, 800f6a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f67e:	4620      	mov	r0, r4
 800f680:	f7ff ffe1 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f684:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f688:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f68c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800f690:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800f694:	b138      	cbz	r0, 800f6a6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800f696:	8022      	strh	r2, [r4, #0]
 800f698:	8063      	strh	r3, [r4, #2]
 800f69a:	f8a4 e004 	strh.w	lr, [r4, #4]
 800f69e:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f6a2:	69ad      	ldr	r5, [r5, #24]
 800f6a4:	e7e5      	b.n	800f672 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800f6a6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f6aa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f6ae:	4290      	cmp	r0, r2
 800f6b0:	4607      	mov	r7, r0
 800f6b2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800f6b6:	460e      	mov	r6, r1
 800f6b8:	bfa8      	it	ge
 800f6ba:	4617      	movge	r7, r2
 800f6bc:	4299      	cmp	r1, r3
 800f6be:	4472      	add	r2, lr
 800f6c0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800f6c4:	bfa8      	it	ge
 800f6c6:	461e      	movge	r6, r3
 800f6c8:	4440      	add	r0, r8
 800f6ca:	4471      	add	r1, lr
 800f6cc:	4463      	add	r3, ip
 800f6ce:	b200      	sxth	r0, r0
 800f6d0:	8027      	strh	r7, [r4, #0]
 800f6d2:	b212      	sxth	r2, r2
 800f6d4:	8066      	strh	r6, [r4, #2]
 800f6d6:	b209      	sxth	r1, r1
 800f6d8:	b21b      	sxth	r3, r3
 800f6da:	4290      	cmp	r0, r2
 800f6dc:	bfac      	ite	ge
 800f6de:	ebc7 0200 	rsbge	r2, r7, r0
 800f6e2:	ebc7 0202 	rsblt	r2, r7, r2
 800f6e6:	4299      	cmp	r1, r3
 800f6e8:	bfac      	ite	ge
 800f6ea:	ebc6 0301 	rsbge	r3, r6, r1
 800f6ee:	ebc6 0303 	rsblt	r3, r6, r3
 800f6f2:	80a2      	strh	r2, [r4, #4]
 800f6f4:	80e3      	strh	r3, [r4, #6]
 800f6f6:	e7d4      	b.n	800f6a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6fe <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800f6fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f702:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f706:	b383      	cbz	r3, 800f76a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f708:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f70a:	b374      	cbz	r4, 800f76a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f70c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f710:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f714:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f718:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f71c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f720:	b303      	cbz	r3, 800f764 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f722:	4668      	mov	r0, sp
 800f724:	1d21      	adds	r1, r4, #4
 800f726:	f8ad 5000 	strh.w	r5, [sp]
 800f72a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f72e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f732:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f736:	f7ff ff43 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 800f73a:	4668      	mov	r0, sp
 800f73c:	f7ff ff83 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f740:	b980      	cbnz	r0, 800f764 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f742:	f8bd 3000 	ldrh.w	r3, [sp]
 800f746:	4669      	mov	r1, sp
 800f748:	88a2      	ldrh	r2, [r4, #4]
 800f74a:	4620      	mov	r0, r4
 800f74c:	1a9b      	subs	r3, r3, r2
 800f74e:	88e2      	ldrh	r2, [r4, #6]
 800f750:	f8ad 3000 	strh.w	r3, [sp]
 800f754:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f758:	1a9b      	subs	r3, r3, r2
 800f75a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	4798      	blx	r3
 800f764:	69a4      	ldr	r4, [r4, #24]
 800f766:	2c00      	cmp	r4, #0
 800f768:	d1d8      	bne.n	800f71c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f76a:	b002      	add	sp, #8
 800f76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f770 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f770:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f772:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f776:	460d      	mov	r5, r1
 800f778:	4616      	mov	r6, r2
 800f77a:	b323      	cbz	r3, 800f7c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f77c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f77e:	b314      	cbz	r4, 800f7c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f780:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f784:	b1eb      	cbz	r3, 800f7c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f786:	6828      	ldr	r0, [r5, #0]
 800f788:	466b      	mov	r3, sp
 800f78a:	6869      	ldr	r1, [r5, #4]
 800f78c:	c303      	stmia	r3!, {r0, r1}
 800f78e:	4668      	mov	r0, sp
 800f790:	1d21      	adds	r1, r4, #4
 800f792:	f7ff ff15 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 800f796:	4668      	mov	r0, sp
 800f798:	f7ff ff55 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f79c:	b988      	cbnz	r0, 800f7c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f79e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f7a2:	4669      	mov	r1, sp
 800f7a4:	88a2      	ldrh	r2, [r4, #4]
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	1a9b      	subs	r3, r3, r2
 800f7aa:	88e2      	ldrh	r2, [r4, #6]
 800f7ac:	f8ad 3000 	strh.w	r3, [sp]
 800f7b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f7b4:	1a9b      	subs	r3, r3, r2
 800f7b6:	4632      	mov	r2, r6
 800f7b8:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f7bc:	6823      	ldr	r3, [r4, #0]
 800f7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7c0:	4798      	blx	r3
 800f7c2:	69a4      	ldr	r4, [r4, #24]
 800f7c4:	e7db      	b.n	800f77e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f7c6:	b002      	add	sp, #8
 800f7c8:	bd70      	pop	{r4, r5, r6, pc}

0800f7ca <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800f7ca:	4770      	bx	lr

0800f7cc <_ZN8touchgfx3HAL10FlushCacheEv>:
 800f7cc:	4770      	bx	lr

0800f7ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f7ce:	6803      	ldr	r3, [r0, #0]
 800f7d0:	b513      	push	{r0, r1, r4, lr}
 800f7d2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	e9cd 3300 	strd	r3, r3, [sp]
 800f7dc:	466b      	mov	r3, sp
 800f7de:	47a0      	blx	r4
 800f7e0:	b002      	add	sp, #8
 800f7e2:	bd10      	pop	{r4, pc}

0800f7e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f7ea:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f7ee:	4770      	bx	lr

0800f7f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f7f6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f7fa:	4770      	bx	lr

0800f7fc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800f7fc:	6843      	ldr	r3, [r0, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	725a      	strb	r2, [r3, #9]
 800f802:	6840      	ldr	r0, [r0, #4]
 800f804:	6803      	ldr	r3, [r0, #0]
 800f806:	691b      	ldr	r3, [r3, #16]
 800f808:	4718      	bx	r3

0800f80a <_ZN8touchgfx3HAL8flushDMAEv>:
 800f80a:	6840      	ldr	r0, [r0, #4]
 800f80c:	6803      	ldr	r3, [r0, #0]
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	4718      	bx	r3

0800f812 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800f812:	b530      	push	{r4, r5, lr}
 800f814:	b08b      	sub	sp, #44	; 0x2c
 800f816:	6804      	ldr	r4, [r0, #0]
 800f818:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800f81c:	9509      	str	r5, [sp, #36]	; 0x24
 800f81e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800f822:	9508      	str	r5, [sp, #32]
 800f824:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800f828:	9507      	str	r5, [sp, #28]
 800f82a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800f82e:	9506      	str	r5, [sp, #24]
 800f830:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800f834:	9505      	str	r5, [sp, #20]
 800f836:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800f83a:	9504      	str	r5, [sp, #16]
 800f83c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800f840:	9503      	str	r5, [sp, #12]
 800f842:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800f846:	9502      	str	r5, [sp, #8]
 800f848:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800f84c:	e9cd 3500 	strd	r3, r5, [sp]
 800f850:	4613      	mov	r3, r2
 800f852:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800f854:	2200      	movs	r2, #0
 800f856:	47a0      	blx	r4
 800f858:	b00b      	add	sp, #44	; 0x2c
 800f85a:	bd30      	pop	{r4, r5, pc}

0800f85c <_ZN8touchgfx3HAL10beginFrameEv>:
 800f85c:	4b04      	ldr	r3, [pc, #16]	; (800f870 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	b123      	cbz	r3, 800f86c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f862:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800f866:	f080 0001 	eor.w	r0, r0, #1
 800f86a:	4770      	bx	lr
 800f86c:	2001      	movs	r0, #1
 800f86e:	4770      	bx	lr
 800f870:	2400b97e 	.word	0x2400b97e

0800f874 <_ZN8touchgfx3HAL8endFrameEv>:
 800f874:	b510      	push	{r4, lr}
 800f876:	4604      	mov	r4, r0
 800f878:	6840      	ldr	r0, [r0, #4]
 800f87a:	6803      	ldr	r3, [r0, #0]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	4798      	blx	r3
 800f880:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800f884:	b113      	cbz	r3, 800f88c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f886:	2301      	movs	r3, #1
 800f888:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800f88c:	bd10      	pop	{r4, pc}

0800f88e <_ZN8touchgfx3HAL10initializeEv>:
 800f88e:	b510      	push	{r4, lr}
 800f890:	4604      	mov	r4, r0
 800f892:	f7f0 fff1 	bl	8000878 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f896:	6860      	ldr	r0, [r4, #4]
 800f898:	6803      	ldr	r3, [r0, #0]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	4798      	blx	r3
 800f89e:	68e0      	ldr	r0, [r4, #12]
 800f8a0:	6803      	ldr	r3, [r0, #0]
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	4798      	blx	r3
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8b0:	4718      	bx	r3

0800f8b2 <_ZN8touchgfx3HAL9taskEntryEv>:
 800f8b2:	b508      	push	{r3, lr}
 800f8b4:	6803      	ldr	r3, [r0, #0]
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f8bc:	4798      	blx	r3
 800f8be:	6823      	ldr	r3, [r4, #0]
 800f8c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	4798      	blx	r3
 800f8c6:	f7f1 f833 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800f8ca:	6823      	ldr	r3, [r4, #0]
 800f8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ce:	e7f8      	b.n	800f8c2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800f8d0 <_ZN8touchgfx3HAL4tickEv>:
 800f8d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f8d2:	6803      	ldr	r3, [r0, #0]
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	4d5b      	ldr	r5, [pc, #364]	; (800fa44 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800f8d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f8dc:	4798      	blx	r3
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	f000 8095 	beq.w	800fa0e <_ZN8touchgfx3HAL4tickEv+0x13e>
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	2600      	movs	r6, #0
 800f8e8:	f7f0 fdec 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f8ec:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800f8f0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800f8f4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f8f8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800f8fc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800f900:	b133      	cbz	r3, 800f910 <_ZN8touchgfx3HAL4tickEv+0x40>
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	4620      	mov	r0, r4
 800f906:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f90a:	4798      	blx	r3
 800f90c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800f910:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800f914:	2601      	movs	r6, #1
 800f916:	6862      	ldr	r2, [r4, #4]
 800f918:	f083 0301 	eor.w	r3, r3, #1
 800f91c:	702e      	strb	r6, [r5, #0]
 800f91e:	7253      	strb	r3, [r2, #9]
 800f920:	f001 ffc2 	bl	80118a8 <_ZN8touchgfx11Application11getInstanceEv>
 800f924:	6803      	ldr	r3, [r0, #0]
 800f926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f928:	4798      	blx	r3
 800f92a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f92e:	b90b      	cbnz	r3, 800f934 <_ZN8touchgfx3HAL4tickEv+0x64>
 800f930:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800f934:	f001 ffb8 	bl	80118a8 <_ZN8touchgfx11Application11getInstanceEv>
 800f938:	6803      	ldr	r3, [r0, #0]
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	4798      	blx	r3
 800f93e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f940:	6803      	ldr	r3, [r0, #0]
 800f942:	691b      	ldr	r3, [r3, #16]
 800f944:	4798      	blx	r3
 800f946:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f94a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800f94e:	3b01      	subs	r3, #1
 800f950:	b2db      	uxtb	r3, r3
 800f952:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f956:	b10a      	cbz	r2, 800f95c <_ZN8touchgfx3HAL4tickEv+0x8c>
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1eb      	bne.n	800f934 <_ZN8touchgfx3HAL4tickEv+0x64>
 800f95c:	4a3a      	ldr	r2, [pc, #232]	; (800fa48 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800f95e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800f962:	7813      	ldrb	r3, [r2, #0]
 800f964:	3301      	adds	r3, #1
 800f966:	b25b      	sxtb	r3, r3
 800f968:	4299      	cmp	r1, r3
 800f96a:	7013      	strb	r3, [r2, #0]
 800f96c:	dc10      	bgt.n	800f990 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800f96e:	2300      	movs	r3, #0
 800f970:	68e0      	ldr	r0, [r4, #12]
 800f972:	a902      	add	r1, sp, #8
 800f974:	7013      	strb	r3, [r2, #0]
 800f976:	aa03      	add	r2, sp, #12
 800f978:	6803      	ldr	r3, [r0, #0]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	4798      	blx	r3
 800f97e:	6823      	ldr	r3, [r4, #0]
 800f980:	2800      	cmp	r0, #0
 800f982:	d050      	beq.n	800fa26 <_ZN8touchgfx3HAL4tickEv+0x156>
 800f984:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f988:	4620      	mov	r0, r4
 800f98a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f98e:	4798      	blx	r3
 800f990:	2300      	movs	r3, #0
 800f992:	6960      	ldr	r0, [r4, #20]
 800f994:	f88d 3007 	strb.w	r3, [sp, #7]
 800f998:	b158      	cbz	r0, 800f9b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f99a:	6803      	ldr	r3, [r0, #0]
 800f99c:	f10d 0107 	add.w	r1, sp, #7
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	4798      	blx	r3
 800f9a4:	b128      	cbz	r0, 800f9b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f9a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f9ac:	6803      	ldr	r3, [r0, #0]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	4798      	blx	r3
 800f9b2:	f104 001c 	add.w	r0, r4, #28
 800f9b6:	f00c fbe7 	bl	801c188 <_ZN8touchgfx8Gestures4tickEv>
 800f9ba:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800f9be:	b30b      	cbz	r3, 800fa04 <_ZN8touchgfx3HAL4tickEv+0x134>
 800f9c0:	6920      	ldr	r0, [r4, #16]
 800f9c2:	6803      	ldr	r3, [r0, #0]
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	4798      	blx	r3
 800f9c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	b903      	cbnz	r3, 800f9d0 <_ZN8touchgfx3HAL4tickEv+0x100>
 800f9ce:	6720      	str	r0, [r4, #112]	; 0x70
 800f9d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f9d2:	4a1e      	ldr	r2, [pc, #120]	; (800fa4c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800f9d4:	1af3      	subs	r3, r6, r3
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d914      	bls.n	800fa04 <_ZN8touchgfx3HAL4tickEv+0x134>
 800f9da:	6920      	ldr	r0, [r4, #16]
 800f9dc:	6803      	ldr	r3, [r0, #0]
 800f9de:	699b      	ldr	r3, [r3, #24]
 800f9e0:	4798      	blx	r3
 800f9e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f9e4:	2264      	movs	r2, #100	; 0x64
 800f9e6:	1af3      	subs	r3, r6, r3
 800f9e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9ec:	fbb0 f0f3 	udiv	r0, r0, r3
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	dc1d      	bgt.n	800fa30 <_ZN8touchgfx3HAL4tickEv+0x160>
 800f9f4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800f9f8:	6920      	ldr	r0, [r4, #16]
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	6803      	ldr	r3, [r0, #0]
 800f9fe:	69db      	ldr	r3, [r3, #28]
 800fa00:	4798      	blx	r3
 800fa02:	6726      	str	r6, [r4, #112]	; 0x70
 800fa04:	f001 ff50 	bl	80118a8 <_ZN8touchgfx11Application11getInstanceEv>
 800fa08:	6803      	ldr	r3, [r0, #0]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	4798      	blx	r3
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	4620      	mov	r0, r4
 800fa12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fa16:	4798      	blx	r3
 800fa18:	2001      	movs	r0, #1
 800fa1a:	f7f0 fd91 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	702b      	strb	r3, [r5, #0]
 800fa22:	b004      	add	sp, #16
 800fa24:	bd70      	pop	{r4, r5, r6, pc}
 800fa26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	4798      	blx	r3
 800fa2e:	e7af      	b.n	800f990 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800fa30:	2863      	cmp	r0, #99	; 0x63
 800fa32:	bfcb      	itete	gt
 800fa34:	2300      	movgt	r3, #0
 800fa36:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800fa3a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800fa3e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800fa42:	e7d9      	b.n	800f9f8 <_ZN8touchgfx3HAL4tickEv+0x128>
 800fa44:	2400b984 	.word	0x2400b984
 800fa48:	2400b985 	.word	0x2400b985
 800fa4c:	05f5e100 	.word	0x05f5e100

0800fa50 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800fa50:	f7f0 bf46 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fa54 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800fa54:	6581      	str	r1, [r0, #88]	; 0x58
 800fa56:	301c      	adds	r0, #28
 800fa58:	f00c bb94 	b.w	801c184 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800fa5c <_ZN8touchgfx3HAL5touchEll>:
 800fa5c:	b530      	push	{r4, r5, lr}
 800fa5e:	b087      	sub	sp, #28
 800fa60:	4604      	mov	r4, r0
 800fa62:	a804      	add	r0, sp, #16
 800fa64:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800fa68:	f001 fc9a 	bl	80113a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800fa6c:	9b04      	ldr	r3, [sp, #16]
 800fa6e:	a906      	add	r1, sp, #24
 800fa70:	a803      	add	r0, sp, #12
 800fa72:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fa76:	9b05      	ldr	r3, [sp, #20]
 800fa78:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800fa7c:	f001 fce2 	bl	8011444 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800fa80:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800fa84:	f104 001c 	add.w	r0, r4, #28
 800fa88:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800fa8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fa90:	b189      	cbz	r1, 800fab6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800fa92:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800fa9e:	462a      	mov	r2, r5
 800faa0:	f00c fb80 	bl	801c1a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800faa4:	b128      	cbz	r0, 800fab2 <_ZN8touchgfx3HAL5touchEll+0x56>
 800faa6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800faaa:	65e3      	str	r3, [r4, #92]	; 0x5c
 800faac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fab0:	6623      	str	r3, [r4, #96]	; 0x60
 800fab2:	b007      	add	sp, #28
 800fab4:	bd30      	pop	{r4, r5, pc}
 800fab6:	f00c fbb5 	bl	801c224 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800faba:	2301      	movs	r3, #1
 800fabc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800fac0:	e7f1      	b.n	800faa6 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800fac2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800fac2:	b510      	push	{r4, lr}
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d046      	beq.n	800fb56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fac8:	ea81 0002 	eor.w	r0, r1, r2
 800facc:	07c4      	lsls	r4, r0, #31
 800face:	d508      	bpl.n	800fae2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800fad0:	440b      	add	r3, r1
 800fad2:	3a01      	subs	r2, #1
 800fad4:	428b      	cmp	r3, r1
 800fad6:	d93e      	bls.n	800fb56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fad8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fadc:	f801 0b01 	strb.w	r0, [r1], #1
 800fae0:	e7f8      	b.n	800fad4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800fae2:	07d0      	lsls	r0, r2, #31
 800fae4:	bf42      	ittt	mi
 800fae6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800faea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800faee:	f801 0b01 	strbmi.w	r0, [r1], #1
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d911      	bls.n	800fb1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800faf6:	ea81 0402 	eor.w	r4, r1, r2
 800fafa:	4610      	mov	r0, r2
 800fafc:	07a4      	lsls	r4, r4, #30
 800fafe:	d022      	beq.n	800fb46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800fb00:	f023 0401 	bic.w	r4, r3, #1
 800fb04:	440c      	add	r4, r1
 800fb06:	428c      	cmp	r4, r1
 800fb08:	4602      	mov	r2, r0
 800fb0a:	d904      	bls.n	800fb16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800fb0c:	8812      	ldrh	r2, [r2, #0]
 800fb0e:	3002      	adds	r0, #2
 800fb10:	f821 2b02 	strh.w	r2, [r1], #2
 800fb14:	e7f7      	b.n	800fb06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800fb16:	f003 0301 	and.w	r3, r3, #1
 800fb1a:	f023 0003 	bic.w	r0, r3, #3
 800fb1e:	4408      	add	r0, r1
 800fb20:	4288      	cmp	r0, r1
 800fb22:	4614      	mov	r4, r2
 800fb24:	d904      	bls.n	800fb30 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800fb26:	6824      	ldr	r4, [r4, #0]
 800fb28:	3204      	adds	r2, #4
 800fb2a:	f841 4b04 	str.w	r4, [r1], #4
 800fb2e:	e7f7      	b.n	800fb20 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800fb30:	f003 0303 	and.w	r3, r3, #3
 800fb34:	3a01      	subs	r2, #1
 800fb36:	440b      	add	r3, r1
 800fb38:	428b      	cmp	r3, r1
 800fb3a:	d90c      	bls.n	800fb56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fb3c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fb40:	f801 0b01 	strb.w	r0, [r1], #1
 800fb44:	e7f8      	b.n	800fb38 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800fb46:	0790      	lsls	r0, r2, #30
 800fb48:	d0e7      	beq.n	800fb1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fb4a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800fb4e:	3b02      	subs	r3, #2
 800fb50:	f821 0b02 	strh.w	r0, [r1], #2
 800fb54:	e7e1      	b.n	800fb1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fb56:	2001      	movs	r0, #1
 800fb58:	bd10      	pop	{r4, pc}

0800fb5a <_ZN8touchgfx3HAL7noTouchEv>:
 800fb5a:	b510      	push	{r4, lr}
 800fb5c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800fb60:	4604      	mov	r4, r0
 800fb62:	b153      	cbz	r3, 800fb7a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800fb64:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800fb68:	2101      	movs	r1, #1
 800fb6a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800fb6e:	301c      	adds	r0, #28
 800fb70:	f00c fb58 	bl	801c224 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fb74:	2300      	movs	r3, #0
 800fb76:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800fb7a:	bd10      	pop	{r4, pc}

0800fb7c <_ZN8touchgfx8Drawable5setXYEss>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	6803      	ldr	r3, [r0, #0]
 800fb80:	4604      	mov	r4, r0
 800fb82:	4615      	mov	r5, r2
 800fb84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb86:	4798      	blx	r3
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb94:	4718      	bx	r3
	...

0800fb98 <_ZN8touchgfx3HAL3lcdEv>:
 800fb98:	4b04      	ldr	r3, [pc, #16]	; (800fbac <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fba0:	b10a      	cbz	r2, 800fba6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800fba2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fba4:	b900      	cbnz	r0, 800fba8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800fba6:	6898      	ldr	r0, [r3, #8]
 800fba8:	4770      	bx	lr
 800fbaa:	bf00      	nop
 800fbac:	2400b980 	.word	0x2400b980

0800fbb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800fbb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbb4:	b085      	sub	sp, #20
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	2000      	movs	r0, #0
 800fbba:	4699      	mov	r9, r3
 800fbbc:	ad04      	add	r5, sp, #16
 800fbbe:	460f      	mov	r7, r1
 800fbc0:	4690      	mov	r8, r2
 800fbc2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800fbc6:	69a0      	ldr	r0, [r4, #24]
 800fbc8:	6806      	ldr	r6, [r0, #0]
 800fbca:	9501      	str	r5, [sp, #4]
 800fbcc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800fbd0:	9500      	str	r5, [sp, #0]
 800fbd2:	6835      	ldr	r5, [r6, #0]
 800fbd4:	47a8      	blx	r5
 800fbd6:	4d10      	ldr	r5, [pc, #64]	; (800fc18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800fbd8:	4606      	mov	r6, r0
 800fbda:	f8a5 9000 	strh.w	r9, [r5]
 800fbde:	f7ff ffdb 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 800fbe2:	6803      	ldr	r3, [r0, #0]
 800fbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe6:	4798      	blx	r3
 800fbe8:	b128      	cbz	r0, 800fbf6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800fbea:	2801      	cmp	r0, #1
 800fbec:	d00b      	beq.n	800fc06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800fbee:	4630      	mov	r0, r6
 800fbf0:	b005      	add	sp, #20
 800fbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbf6:	882b      	ldrh	r3, [r5, #0]
 800fbf8:	fb08 7203 	mla	r2, r8, r3, r7
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800fc02:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fc04:	e7f3      	b.n	800fbee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800fc06:	882a      	ldrh	r2, [r5, #0]
 800fc08:	9b03      	ldr	r3, [sp, #12]
 800fc0a:	fb08 7202 	mla	r2, r8, r2, r7
 800fc0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fc12:	1a9a      	subs	r2, r3, r2
 800fc14:	63e2      	str	r2, [r4, #60]	; 0x3c
 800fc16:	e7ea      	b.n	800fbee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800fc18:	2400b97a 	.word	0x2400b97a

0800fc1c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800fc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc1e:	b08b      	sub	sp, #44	; 0x2c
 800fc20:	4617      	mov	r7, r2
 800fc22:	4604      	mov	r4, r0
 800fc24:	460e      	mov	r6, r1
 800fc26:	461d      	mov	r5, r3
 800fc28:	f7ff ffb6 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 800fc2c:	6803      	ldr	r3, [r0, #0]
 800fc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc30:	4798      	blx	r3
 800fc32:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800fc36:	9007      	str	r0, [sp, #28]
 800fc38:	4631      	mov	r1, r6
 800fc3a:	6822      	ldr	r2, [r4, #0]
 800fc3c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fc40:	4b0c      	ldr	r3, [pc, #48]	; (800fc74 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800fc42:	4620      	mov	r0, r4
 800fc44:	881b      	ldrh	r3, [r3, #0]
 800fc46:	9306      	str	r3, [sp, #24]
 800fc48:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800fc4c:	9305      	str	r3, [sp, #20]
 800fc4e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800fc52:	9304      	str	r3, [sp, #16]
 800fc54:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fc58:	9303      	str	r3, [sp, #12]
 800fc5a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800fc5e:	9302      	str	r3, [sp, #8]
 800fc60:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fc64:	e9cd 5300 	strd	r5, r3, [sp]
 800fc68:	463b      	mov	r3, r7
 800fc6a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	47a8      	blx	r5
 800fc70:	b00b      	add	sp, #44	; 0x2c
 800fc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc74:	2400b97a 	.word	0x2400b97a

0800fc78 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800fc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc7c:	4698      	mov	r8, r3
 800fc7e:	6803      	ldr	r3, [r0, #0]
 800fc80:	b08b      	sub	sp, #44	; 0x2c
 800fc82:	4617      	mov	r7, r2
 800fc84:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800fc86:	460e      	mov	r6, r1
 800fc88:	4b13      	ldr	r3, [pc, #76]	; (800fcd8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	f8b3 9000 	ldrh.w	r9, [r3]
 800fc90:	f7ff ff82 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 800fc94:	6803      	ldr	r3, [r0, #0]
 800fc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc98:	4798      	blx	r3
 800fc9a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800fc9e:	2200      	movs	r2, #0
 800fca0:	4631      	mov	r1, r6
 800fca2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fca6:	2302      	movs	r3, #2
 800fca8:	4620      	mov	r0, r4
 800fcaa:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800fcae:	2301      	movs	r3, #1
 800fcb0:	9305      	str	r3, [sp, #20]
 800fcb2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800fcb6:	9304      	str	r3, [sp, #16]
 800fcb8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800fcbc:	9303      	str	r3, [sp, #12]
 800fcbe:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fcc2:	9302      	str	r3, [sp, #8]
 800fcc4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fcc8:	e9cd 8300 	strd	r8, r3, [sp]
 800fccc:	463b      	mov	r3, r7
 800fcce:	47a8      	blx	r5
 800fcd0:	b00b      	add	sp, #44	; 0x2c
 800fcd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcd6:	bf00      	nop
 800fcd8:	2400b97a 	.word	0x2400b97a

0800fcdc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800fcdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fce0:	4698      	mov	r8, r3
 800fce2:	6803      	ldr	r3, [r0, #0]
 800fce4:	b087      	sub	sp, #28
 800fce6:	460e      	mov	r6, r1
 800fce8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800fcea:	4617      	mov	r7, r2
 800fcec:	4b0f      	ldr	r3, [pc, #60]	; (800fd2c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800fcee:	4604      	mov	r4, r0
 800fcf0:	f8b3 9000 	ldrh.w	r9, [r3]
 800fcf4:	f7ff ff50 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 800fcf8:	6803      	ldr	r3, [r0, #0]
 800fcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfc:	4798      	blx	r3
 800fcfe:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800fd02:	463a      	mov	r2, r7
 800fd04:	4631      	mov	r1, r6
 800fd06:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd0a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800fd0e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800fd12:	4620      	mov	r0, r4
 800fd14:	9302      	str	r3, [sp, #8]
 800fd16:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fd1a:	9301      	str	r3, [sp, #4]
 800fd1c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	4643      	mov	r3, r8
 800fd24:	47a8      	blx	r5
 800fd26:	b007      	add	sp, #28
 800fd28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd2c:	2400b97a 	.word	0x2400b97a

0800fd30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	4604      	mov	r4, r0
 800fd36:	b08f      	sub	sp, #60	; 0x3c
 800fd38:	4610      	mov	r0, r2
 800fd3a:	460d      	mov	r5, r1
 800fd3c:	4691      	mov	r9, r2
 800fd3e:	461e      	mov	r6, r3
 800fd40:	f004 f8b8 	bl	8013eb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	f000 809d 	beq.w	800fe84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f8df b198 	ldr.w	fp, [pc, #408]	; 800fee8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800fd52:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fd56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd58:	4798      	blx	r3
 800fd5a:	6823      	ldr	r3, [r4, #0]
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800feec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800fd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd64:	4798      	blx	r3
 800fd66:	f8bb 3000 	ldrh.w	r3, [fp]
 800fd6a:	4f5c      	ldr	r7, [pc, #368]	; (800fedc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fd6c:	9301      	str	r3, [sp, #4]
 800fd6e:	f8ba 3000 	ldrh.w	r3, [sl]
 800fd72:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800fd76:	4640      	mov	r0, r8
 800fd78:	9302      	str	r3, [sp, #8]
 800fd7a:	883b      	ldrh	r3, [r7, #0]
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	4b58      	ldr	r3, [pc, #352]	; (800fee0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fd80:	881a      	ldrh	r2, [r3, #0]
 800fd82:	9305      	str	r3, [sp, #20]
 800fd84:	9204      	str	r2, [sp, #16]
 800fd86:	f004 f9d9 	bl	801413c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fd8a:	8038      	strh	r0, [r7, #0]
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	f004 fa09 	bl	80141a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd92:	9b05      	ldr	r3, [sp, #20]
 800fd94:	b280      	uxth	r0, r0
 800fd96:	8018      	strh	r0, [r3, #0]
 800fd98:	4b52      	ldr	r3, [pc, #328]	; (800fee4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d174      	bne.n	800fe8a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800fda0:	883b      	ldrh	r3, [r7, #0]
 800fda2:	f8aa 0000 	strh.w	r0, [sl]
 800fda6:	f8ab 3000 	strh.w	r3, [fp]
 800fdaa:	4648      	mov	r0, r9
 800fdac:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800fdb0:	f004 f880 	bl	8013eb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800fdba:	4611      	mov	r1, r2
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800fdc2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800fdc6:	f7ff fed9 	bl	800fb7c <_ZN8touchgfx8Drawable5setXYEss>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800fdd0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800fdd4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dd5c      	ble.n	800fe96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fddc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	dd58      	ble.n	800fe96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fde4:	462a      	mov	r2, r5
 800fde6:	ab0a      	add	r3, sp, #40	; 0x28
 800fde8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fdec:	6851      	ldr	r1, [r2, #4]
 800fdee:	c303      	stmia	r3!, {r0, r1}
 800fdf0:	4631      	mov	r1, r6
 800fdf2:	a80a      	add	r0, sp, #40	; 0x28
 800fdf4:	f7ff fbe4 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 800fdf8:	4b38      	ldr	r3, [pc, #224]	; (800fedc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe00:	4b37      	ldr	r3, [pc, #220]	; (800fee0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fe02:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800fe06:	aa0a      	add	r2, sp, #40	; 0x28
 800fe08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe0c:	910c      	str	r1, [sp, #48]	; 0x30
 800fe0e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800fe12:	ab08      	add	r3, sp, #32
 800fe14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe18:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	a90c      	add	r1, sp, #48	; 0x30
 800fe20:	f7ff fbce 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 800fe24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d13c      	bne.n	800fea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800fe30:	2600      	movs	r6, #0
 800fe32:	696b      	ldr	r3, [r5, #20]
 800fe34:	a908      	add	r1, sp, #32
 800fe36:	682a      	ldr	r2, [r5, #0]
 800fe38:	4628      	mov	r0, r5
 800fe3a:	9305      	str	r3, [sp, #20]
 800fe3c:	616e      	str	r6, [r5, #20]
 800fe3e:	6892      	ldr	r2, [r2, #8]
 800fe40:	4790      	blx	r2
 800fe42:	9b05      	ldr	r3, [sp, #20]
 800fe44:	4652      	mov	r2, sl
 800fe46:	4649      	mov	r1, r9
 800fe48:	616b      	str	r3, [r5, #20]
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800fe50:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800fe54:	f7ff fe92 	bl	800fb7c <_ZN8touchgfx8Drawable5setXYEss>
 800fe58:	9a01      	ldr	r2, [sp, #4]
 800fe5a:	4b23      	ldr	r3, [pc, #140]	; (800fee8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	801a      	strh	r2, [r3, #0]
 800fe60:	9a02      	ldr	r2, [sp, #8]
 800fe62:	4b22      	ldr	r3, [pc, #136]	; (800feec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800fe64:	801a      	strh	r2, [r3, #0]
 800fe66:	9a03      	ldr	r2, [sp, #12]
 800fe68:	4b1c      	ldr	r3, [pc, #112]	; (800fedc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fe6a:	801a      	strh	r2, [r3, #0]
 800fe6c:	4b1c      	ldr	r3, [pc, #112]	; (800fee0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fe6e:	9a04      	ldr	r2, [sp, #16]
 800fe70:	801a      	strh	r2, [r3, #0]
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800fe78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe7a:	4798      	blx	r3
 800fe7c:	6823      	ldr	r3, [r4, #0]
 800fe7e:	4620      	mov	r0, r4
 800fe80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe82:	4798      	blx	r3
 800fe84:	b00f      	add	sp, #60	; 0x3c
 800fe86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8a:	883b      	ldrh	r3, [r7, #0]
 800fe8c:	f8ab 0000 	strh.w	r0, [fp]
 800fe90:	f8aa 3000 	strh.w	r3, [sl]
 800fe94:	e789      	b.n	800fdaa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800fe96:	462a      	mov	r2, r5
 800fe98:	ab0a      	add	r3, sp, #40	; 0x28
 800fe9a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fe9e:	6851      	ldr	r1, [r2, #4]
 800fea0:	c303      	stmia	r3!, {r0, r1}
 800fea2:	e7a9      	b.n	800fdf8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800fea4:	a807      	add	r0, sp, #28
 800fea6:	f004 fa81 	bl	80143ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 800feaa:	4606      	mov	r6, r0
 800feac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800feae:	6803      	ldr	r3, [r0, #0]
 800feb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb2:	4798      	blx	r3
 800feb4:	4286      	cmp	r6, r0
 800feb6:	d1b8      	bne.n	800fe2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800feb8:	f7ff fe6e 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 800febc:	6803      	ldr	r3, [r0, #0]
 800febe:	4606      	mov	r6, r0
 800fec0:	a807      	add	r0, sp, #28
 800fec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fec4:	9305      	str	r3, [sp, #20]
 800fec6:	f004 fa71 	bl	80143ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 800feca:	9b05      	ldr	r3, [sp, #20]
 800fecc:	4601      	mov	r1, r0
 800fece:	4630      	mov	r0, r6
 800fed0:	4798      	blx	r3
 800fed2:	f080 0001 	eor.w	r0, r0, #1
 800fed6:	b2c0      	uxtb	r0, r0
 800fed8:	e7a8      	b.n	800fe2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800feda:	bf00      	nop
 800fedc:	2400b974 	.word	0x2400b974
 800fee0:	2400b976 	.word	0x2400b976
 800fee4:	2400b978 	.word	0x2400b978
 800fee8:	2400b97a 	.word	0x2400b97a
 800feec:	2400b97c 	.word	0x2400b97c

0800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800fef0:	4b07      	ldr	r3, [pc, #28]	; (800ff10 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800fef2:	b510      	push	{r4, lr}
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	4604      	mov	r4, r0
 800fef8:	b13b      	cbz	r3, 800ff0a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fefa:	6803      	ldr	r3, [r0, #0]
 800fefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fefe:	4798      	blx	r3
 800ff00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff02:	4283      	cmp	r3, r0
 800ff04:	d101      	bne.n	800ff0a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ff06:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ff08:	bd10      	pop	{r4, pc}
 800ff0a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ff0c:	e7fc      	b.n	800ff08 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800ff0e:	bf00      	nop
 800ff10:	2400b97e 	.word	0x2400b97e

0800ff14 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800ff14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff18:	461d      	mov	r5, r3
 800ff1a:	b08a      	sub	sp, #40	; 0x28
 800ff1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff20:	4690      	mov	r8, r2
 800ff22:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800ff26:	2400      	movs	r4, #0
 800ff28:	4607      	mov	r7, r0
 800ff2a:	fb06 8505 	mla	r5, r6, r5, r8
 800ff2e:	9404      	str	r4, [sp, #16]
 800ff30:	f88d 4020 	strb.w	r4, [sp, #32]
 800ff34:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ff38:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ff3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ff40:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ff44:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ff48:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ff4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ff50:	f7ff ffce 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ff54:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800ff5e:	a901      	add	r1, sp, #4
 800ff60:	9505      	str	r5, [sp, #20]
 800ff62:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ff66:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800ff6a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800ff6e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800ff72:	6803      	ldr	r3, [r0, #0]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	4798      	blx	r3
 800ff78:	b00a      	add	sp, #40	; 0x28
 800ff7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff7e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800ff7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff82:	b08b      	sub	sp, #44	; 0x2c
 800ff84:	2400      	movs	r4, #0
 800ff86:	4691      	mov	r9, r2
 800ff88:	461d      	mov	r5, r3
 800ff8a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800ff8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff92:	4688      	mov	r8, r1
 800ff94:	4607      	mov	r7, r0
 800ff96:	9404      	str	r4, [sp, #16]
 800ff98:	fb06 9505 	mla	r5, r6, r5, r9
 800ff9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ffa0:	f7ff ffa6 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ffa4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ffa8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ffb2:	a901      	add	r1, sp, #4
 800ffb4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ffb8:	9505      	str	r5, [sp, #20]
 800ffba:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ffbe:	f8ad 401c 	strh.w	r4, [sp, #28]
 800ffc2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800ffc6:	f8cd 8010 	str.w	r8, [sp, #16]
 800ffca:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ffce:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ffd2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800ffd6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800ffda:	6803      	ldr	r3, [r0, #0]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	4798      	blx	r3
 800ffe0:	b00b      	add	sp, #44	; 0x2c
 800ffe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ffe8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800ffe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffec:	b08a      	sub	sp, #40	; 0x28
 800ffee:	4698      	mov	r8, r3
 800fff0:	2300      	movs	r3, #0
 800fff2:	4606      	mov	r6, r0
 800fff4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800fff8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800fffc:	2d0b      	cmp	r5, #11
 800fffe:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8010002:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8010006:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801000a:	9304      	str	r3, [sp, #16]
 801000c:	d137      	bne.n	801007e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801000e:	2380      	movs	r3, #128	; 0x80
 8010010:	f88d 0020 	strb.w	r0, [sp, #32]
 8010014:	4630      	mov	r0, r6
 8010016:	9203      	str	r2, [sp, #12]
 8010018:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801001c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010020:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010024:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010028:	f8ad 301a 	strh.w	r3, [sp, #26]
 801002c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010030:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010034:	f7ff ff5c 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010038:	2c0b      	cmp	r4, #11
 801003a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801003e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010042:	bf94      	ite	ls
 8010044:	4b19      	ldrls	r3, [pc, #100]	; (80100ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010046:	2100      	movhi	r1, #0
 8010048:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801004c:	bf98      	it	ls
 801004e:	5d19      	ldrbls	r1, [r3, r4]
 8010050:	fb02 8307 	mla	r3, r2, r7, r8
 8010054:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010058:	10c9      	asrs	r1, r1, #3
 801005a:	fb01 0003 	mla	r0, r1, r3, r0
 801005e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010062:	a901      	add	r1, sp, #4
 8010064:	9005      	str	r0, [sp, #20]
 8010066:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801006a:	2300      	movs	r3, #0
 801006c:	6870      	ldr	r0, [r6, #4]
 801006e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010072:	6803      	ldr	r3, [r0, #0]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	4798      	blx	r3
 8010078:	b00a      	add	sp, #40	; 0x28
 801007a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801007e:	2d02      	cmp	r5, #2
 8010080:	d109      	bne.n	8010096 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010082:	28ff      	cmp	r0, #255	; 0xff
 8010084:	d105      	bne.n	8010092 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010086:	f1bc 0f00 	cmp.w	ip, #0
 801008a:	bf14      	ite	ne
 801008c:	2340      	movne	r3, #64	; 0x40
 801008e:	2320      	moveq	r3, #32
 8010090:	e7be      	b.n	8010010 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010092:	2340      	movs	r3, #64	; 0x40
 8010094:	e7bc      	b.n	8010010 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010096:	28ff      	cmp	r0, #255	; 0xff
 8010098:	d105      	bne.n	80100a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801009a:	f1bc 0f00 	cmp.w	ip, #0
 801009e:	bf14      	ite	ne
 80100a0:	2304      	movne	r3, #4
 80100a2:	2301      	moveq	r3, #1
 80100a4:	e7b4      	b.n	8010010 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80100a6:	2304      	movs	r3, #4
 80100a8:	e7b2      	b.n	8010010 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80100aa:	bf00      	nop
 80100ac:	0801ef80 	.word	0x0801ef80

080100b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	b08b      	sub	sp, #44	; 0x2c
 80100b6:	461d      	mov	r5, r3
 80100b8:	2400      	movs	r4, #0
 80100ba:	4688      	mov	r8, r1
 80100bc:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80100c0:	4693      	mov	fp, r2
 80100c2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80100c6:	4607      	mov	r7, r0
 80100c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80100cc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80100d0:	9404      	str	r4, [sp, #16]
 80100d2:	bf14      	ite	ne
 80100d4:	2308      	movne	r3, #8
 80100d6:	2302      	moveq	r3, #2
 80100d8:	fb05 b50a 	mla	r5, r5, sl, fp
 80100dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80100e0:	f7ff ff06 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80100e4:	2e0b      	cmp	r6, #11
 80100e6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80100ea:	a901      	add	r1, sp, #4
 80100ec:	bf98      	it	ls
 80100ee:	4b13      	ldrls	r3, [pc, #76]	; (801013c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80100f0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80100f4:	bf98      	it	ls
 80100f6:	5d9c      	ldrbls	r4, [r3, r6]
 80100f8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80100fc:	10e4      	asrs	r4, r4, #3
 80100fe:	f8cd 8010 	str.w	r8, [sp, #16]
 8010102:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010106:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801010a:	fb04 0405 	mla	r4, r4, r5, r0
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010114:	2300      	movs	r3, #0
 8010116:	9405      	str	r4, [sp, #20]
 8010118:	f8ad 301c 	strh.w	r3, [sp, #28]
 801011c:	f88d 9020 	strb.w	r9, [sp, #32]
 8010120:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8010124:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010128:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801012c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8010130:	6803      	ldr	r3, [r0, #0]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	4798      	blx	r3
 8010136:	b00b      	add	sp, #44	; 0x2c
 8010138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013c:	0801ef80 	.word	0x0801ef80

08010140 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010144:	461e      	mov	r6, r3
 8010146:	4b0a      	ldr	r3, [pc, #40]	; (8010170 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010148:	460f      	mov	r7, r1
 801014a:	4690      	mov	r8, r2
 801014c:	881d      	ldrh	r5, [r3, #0]
 801014e:	f7ff fd23 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 8010152:	6803      	ldr	r3, [r0, #0]
 8010154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010156:	4798      	blx	r3
 8010158:	280b      	cmp	r0, #11
 801015a:	bf96      	itet	ls
 801015c:	4b05      	ldrls	r3, [pc, #20]	; (8010174 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801015e:	2400      	movhi	r4, #0
 8010160:	5c1c      	ldrbls	r4, [r3, r0]
 8010162:	fb08 7005 	mla	r0, r8, r5, r7
 8010166:	10e4      	asrs	r4, r4, #3
 8010168:	fb04 6000 	mla	r0, r4, r0, r6
 801016c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010170:	2400b97a 	.word	0x2400b97a
 8010174:	0801ef80 	.word	0x0801ef80

08010178 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801017a:	b08b      	sub	sp, #44	; 0x2c
 801017c:	461f      	mov	r7, r3
 801017e:	4604      	mov	r4, r0
 8010180:	4616      	mov	r6, r2
 8010182:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010186:	2500      	movs	r5, #0
 8010188:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801018c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010190:	9504      	str	r5, [sp, #16]
 8010192:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010196:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801019a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801019e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80101a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80101a6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80101aa:	f88d 3020 	strb.w	r3, [sp, #32]
 80101ae:	f7ff fe9f 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80101b2:	463a      	mov	r2, r7
 80101b4:	4631      	mov	r1, r6
 80101b6:	4603      	mov	r3, r0
 80101b8:	4620      	mov	r0, r4
 80101ba:	f7ff ffc1 	bl	8010140 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80101be:	4b0e      	ldr	r3, [pc, #56]	; (80101f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80101c0:	9005      	str	r0, [sp, #20]
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80101c8:	f7ff fce6 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 80101cc:	6803      	ldr	r3, [r0, #0]
 80101ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d0:	4798      	blx	r3
 80101d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101d4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80101d8:	a901      	add	r1, sp, #4
 80101da:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80101de:	9304      	str	r3, [sp, #16]
 80101e0:	6860      	ldr	r0, [r4, #4]
 80101e2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80101e6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80101ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80101ee:	6803      	ldr	r3, [r0, #0]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	4798      	blx	r3
 80101f4:	b00b      	add	sp, #44	; 0x2c
 80101f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f8:	2400b97a 	.word	0x2400b97a

080101fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80101fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101fe:	b08d      	sub	sp, #52	; 0x34
 8010200:	2501      	movs	r5, #1
 8010202:	4604      	mov	r4, r0
 8010204:	466b      	mov	r3, sp
 8010206:	9503      	str	r5, [sp, #12]
 8010208:	e883 0006 	stmia.w	r3, {r1, r2}
 801020c:	2300      	movs	r3, #0
 801020e:	f8bd 6000 	ldrh.w	r6, [sp]
 8010212:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010216:	9306      	str	r3, [sp, #24]
 8010218:	6803      	ldr	r3, [r0, #0]
 801021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021c:	4798      	blx	r3
 801021e:	463a      	mov	r2, r7
 8010220:	4631      	mov	r1, r6
 8010222:	4603      	mov	r3, r0
 8010224:	4620      	mov	r0, r4
 8010226:	f7ff ff8b 	bl	8010140 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801022a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801022c:	9004      	str	r0, [sp, #16]
 801022e:	9307      	str	r3, [sp, #28]
 8010230:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010234:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010238:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801023c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010240:	4b0e      	ldr	r3, [pc, #56]	; (801027c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010248:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801024c:	f7ff fca4 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 8010250:	6803      	ldr	r3, [r0, #0]
 8010252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010254:	4798      	blx	r3
 8010256:	23ff      	movs	r3, #255	; 0xff
 8010258:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801025c:	a903      	add	r1, sp, #12
 801025e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010262:	6860      	ldr	r0, [r4, #4]
 8010264:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010268:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801026c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010270:	6803      	ldr	r3, [r0, #0]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	4798      	blx	r3
 8010276:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010278:	b00d      	add	sp, #52	; 0x34
 801027a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801027c:	2400b97a 	.word	0x2400b97a

08010280 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010284:	b08c      	sub	sp, #48	; 0x30
 8010286:	461e      	mov	r6, r3
 8010288:	2300      	movs	r3, #0
 801028a:	4604      	mov	r4, r0
 801028c:	466d      	mov	r5, sp
 801028e:	9306      	str	r3, [sp, #24]
 8010290:	6803      	ldr	r3, [r0, #0]
 8010292:	e885 0006 	stmia.w	r5, {r1, r2}
 8010296:	2501      	movs	r5, #1
 8010298:	f8bd 7000 	ldrh.w	r7, [sp]
 801029c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80102a0:	9503      	str	r5, [sp, #12]
 80102a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102a4:	4798      	blx	r3
 80102a6:	4642      	mov	r2, r8
 80102a8:	4639      	mov	r1, r7
 80102aa:	4603      	mov	r3, r0
 80102ac:	4620      	mov	r0, r4
 80102ae:	f7ff ff47 	bl	8010140 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80102b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80102b6:	9004      	str	r0, [sp, #16]
 80102b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80102bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80102c0:	9607      	str	r6, [sp, #28]
 80102c2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80102c6:	4b10      	ldr	r3, [pc, #64]	; (8010308 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80102c8:	881b      	ldrh	r3, [r3, #0]
 80102ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80102ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102d0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80102d4:	f7ff fc60 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 80102d8:	6803      	ldr	r3, [r0, #0]
 80102da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102dc:	4798      	blx	r3
 80102de:	23ff      	movs	r3, #255	; 0xff
 80102e0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80102e4:	a903      	add	r1, sp, #12
 80102e6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80102ea:	6860      	ldr	r0, [r4, #4]
 80102ec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80102f0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80102f4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80102f8:	6803      	ldr	r3, [r0, #0]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	4798      	blx	r3
 80102fe:	4630      	mov	r0, r6
 8010300:	b00c      	add	sp, #48	; 0x30
 8010302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010306:	bf00      	nop
 8010308:	2400b97a 	.word	0x2400b97a

0801030c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801030e:	b085      	sub	sp, #20
 8010310:	4605      	mov	r5, r0
 8010312:	ac02      	add	r4, sp, #8
 8010314:	e884 0006 	stmia.w	r4, {r1, r2}
 8010318:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801031c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010320:	f7ff fde6 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010324:	4631      	mov	r1, r6
 8010326:	4603      	mov	r3, r0
 8010328:	463a      	mov	r2, r7
 801032a:	4628      	mov	r0, r5
 801032c:	f7ff ff08 	bl	8010140 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010330:	4a05      	ldr	r2, [pc, #20]	; (8010348 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010332:	682b      	ldr	r3, [r5, #0]
 8010334:	8812      	ldrh	r2, [r2, #0]
 8010336:	9200      	str	r2, [sp, #0]
 8010338:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801033a:	4603      	mov	r3, r0
 801033c:	4628      	mov	r0, r5
 801033e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010342:	47b0      	blx	r6
 8010344:	b005      	add	sp, #20
 8010346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010348:	2400b97a 	.word	0x2400b97a

0801034c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8010352:	4604      	mov	r4, r0
 8010354:	b19b      	cbz	r3, 801037e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010356:	2002      	movs	r0, #2
 8010358:	f7f0 f932 	bl	80005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801035c:	2300      	movs	r3, #0
 801035e:	4620      	mov	r0, r4
 8010360:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010364:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8010368:	6823      	ldr	r3, [r4, #0]
 801036a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801036e:	f7ff fdbf 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010372:	4601      	mov	r1, r0
 8010374:	4620      	mov	r0, r4
 8010376:	462b      	mov	r3, r5
 8010378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801037c:	4718      	bx	r3
 801037e:	bd70      	pop	{r4, r5, r6, pc}

08010380 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8010386:	4604      	mov	r4, r0
 8010388:	460d      	mov	r5, r1
 801038a:	428b      	cmp	r3, r1
 801038c:	d006      	beq.n	801039c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801038e:	6803      	ldr	r3, [r0, #0]
 8010390:	b929      	cbnz	r1, 801039e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010392:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010396:	4798      	blx	r3
 8010398:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801039c:	bd38      	pop	{r3, r4, r5, pc}
 801039e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80103a2:	e7f8      	b.n	8010396 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080103a4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80103a4:	4b0d      	ldr	r3, [pc, #52]	; (80103dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80103a6:	b510      	push	{r4, lr}
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	4604      	mov	r4, r0
 80103ac:	b95b      	cbnz	r3, 80103c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80103ae:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80103b2:	2b02      	cmp	r3, #2
 80103b4:	d007      	beq.n	80103c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80103b6:	6840      	ldr	r0, [r0, #4]
 80103b8:	f000 f916 	bl	80105e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80103bc:	b118      	cbz	r0, 80103c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80103be:	6862      	ldr	r2, [r4, #4]
 80103c0:	7a53      	ldrb	r3, [r2, #9]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0fc      	beq.n	80103c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80103c6:	f7f0 fa81 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80103ca:	4620      	mov	r0, r4
 80103cc:	2100      	movs	r1, #0
 80103ce:	f7ff ffd7 	bl	8010380 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80103d2:	4620      	mov	r0, r4
 80103d4:	f7ff fd8c 	bl	800fef0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	bf00      	nop
 80103dc:	2400b97e 	.word	0x2400b97e

080103e0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80103e0:	4770      	bx	lr

080103e2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80103e2:	2000      	movs	r0, #0
 80103e4:	4770      	bx	lr

080103e6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80103e6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80103ea:	1a13      	subs	r3, r2, r0
 80103ec:	4258      	negs	r0, r3
 80103ee:	4158      	adcs	r0, r3
 80103f0:	4770      	bx	lr

080103f2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80103f2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80103f6:	1a9b      	subs	r3, r3, r2
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	bfdc      	itt	le
 80103fc:	6882      	ldrle	r2, [r0, #8]
 80103fe:	189b      	addle	r3, r3, r2
 8010400:	2b01      	cmp	r3, #1
 8010402:	bfcc      	ite	gt
 8010404:	2000      	movgt	r0, #0
 8010406:	2001      	movle	r0, #1
 8010408:	4770      	bx	lr

0801040a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801040a:	6902      	ldr	r2, [r0, #16]
 801040c:	6843      	ldr	r3, [r0, #4]
 801040e:	2024      	movs	r0, #36	; 0x24
 8010410:	fb00 3002 	mla	r0, r0, r2, r3
 8010414:	4770      	bx	lr

08010416 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010416:	6803      	ldr	r3, [r0, #0]
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	4718      	bx	r3

0801041c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801041c:	2301      	movs	r3, #1
 801041e:	b570      	push	{r4, r5, r6, lr}
 8010420:	7203      	strb	r3, [r0, #8]
 8010422:	4604      	mov	r4, r0
 8010424:	6840      	ldr	r0, [r0, #4]
 8010426:	6803      	ldr	r3, [r0, #0]
 8010428:	699b      	ldr	r3, [r3, #24]
 801042a:	4798      	blx	r3
 801042c:	6803      	ldr	r3, [r0, #0]
 801042e:	4605      	mov	r5, r0
 8010430:	2b40      	cmp	r3, #64	; 0x40
 8010432:	d00c      	beq.n	801044e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010434:	d810      	bhi.n	8010458 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010436:	2b04      	cmp	r3, #4
 8010438:	d01d      	beq.n	8010476 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801043a:	d804      	bhi.n	8010446 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801043c:	2b01      	cmp	r3, #1
 801043e:	d006      	beq.n	801044e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010440:	2b02      	cmp	r3, #2
 8010442:	d02c      	beq.n	801049e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8010444:	bd70      	pop	{r4, r5, r6, pc}
 8010446:	2b08      	cmp	r3, #8
 8010448:	d01d      	beq.n	8010486 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801044a:	2b20      	cmp	r3, #32
 801044c:	d1fa      	bne.n	8010444 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801044e:	6823      	ldr	r3, [r4, #0]
 8010450:	4620      	mov	r0, r4
 8010452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010454:	4798      	blx	r3
 8010456:	e013      	b.n	8010480 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801045c:	d0f7      	beq.n	801044e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801045e:	d804      	bhi.n	801046a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010460:	2b80      	cmp	r3, #128	; 0x80
 8010462:	d0f4      	beq.n	801044e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010468:	e7f0      	b.n	801044c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801046a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801046e:	d0ee      	beq.n	801044e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010474:	e7e5      	b.n	8010442 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010476:	6823      	ldr	r3, [r4, #0]
 8010478:	7f01      	ldrb	r1, [r0, #28]
 801047a:	4620      	mov	r0, r4
 801047c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047e:	4798      	blx	r3
 8010480:	6823      	ldr	r3, [r4, #0]
 8010482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010484:	e006      	b.n	8010494 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010486:	6823      	ldr	r3, [r4, #0]
 8010488:	7f01      	ldrb	r1, [r0, #28]
 801048a:	4620      	mov	r0, r4
 801048c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801048e:	4798      	blx	r3
 8010490:	6823      	ldr	r3, [r4, #0]
 8010492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010494:	4629      	mov	r1, r5
 8010496:	4620      	mov	r0, r4
 8010498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801049c:	4718      	bx	r3
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	4620      	mov	r0, r4
 80104a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104a4:	4798      	blx	r3
 80104a6:	e7f3      	b.n	8010490 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080104a8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80104a8:	4770      	bx	lr

080104aa <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80104aa:	4770      	bx	lr

080104ac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80104ac:	4770      	bx	lr

080104ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80104ae:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80104b2:	b510      	push	{r4, lr}
 80104b4:	1ad2      	subs	r2, r2, r3
 80104b6:	2a00      	cmp	r2, #0
 80104b8:	bfdc      	itt	le
 80104ba:	6884      	ldrle	r4, [r0, #8]
 80104bc:	1912      	addle	r2, r2, r4
 80104be:	2a01      	cmp	r2, #1
 80104c0:	dd16      	ble.n	80104f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80104c2:	6842      	ldr	r2, [r0, #4]
 80104c4:	2424      	movs	r4, #36	; 0x24
 80104c6:	fb04 2303 	mla	r3, r4, r3, r2
 80104ca:	f101 0220 	add.w	r2, r1, #32
 80104ce:	f851 4b04 	ldr.w	r4, [r1], #4
 80104d2:	4291      	cmp	r1, r2
 80104d4:	f843 4b04 	str.w	r4, [r3], #4
 80104d8:	d1f9      	bne.n	80104ce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80104da:	780a      	ldrb	r2, [r1, #0]
 80104dc:	701a      	strb	r2, [r3, #0]
 80104de:	68c3      	ldr	r3, [r0, #12]
 80104e0:	6882      	ldr	r2, [r0, #8]
 80104e2:	f3bf 8f5b 	dmb	ish
 80104e6:	3301      	adds	r3, #1
 80104e8:	429a      	cmp	r2, r3
 80104ea:	bfd8      	it	le
 80104ec:	1a9b      	suble	r3, r3, r2
 80104ee:	60c3      	str	r3, [r0, #12]
 80104f0:	bd10      	pop	{r4, pc}

080104f2 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80104f2:	6903      	ldr	r3, [r0, #16]
 80104f4:	6882      	ldr	r2, [r0, #8]
 80104f6:	f3bf 8f5b 	dmb	ish
 80104fa:	3301      	adds	r3, #1
 80104fc:	429a      	cmp	r2, r3
 80104fe:	bfd8      	it	le
 8010500:	1a9b      	suble	r3, r3, r2
 8010502:	6103      	str	r3, [r0, #16]
 8010504:	4770      	bx	lr
	...

08010508 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8010508:	b570      	push	{r4, r5, r6, lr}
 801050a:	4604      	mov	r4, r0
 801050c:	460e      	mov	r6, r1
 801050e:	6860      	ldr	r0, [r4, #4]
 8010510:	6803      	ldr	r3, [r0, #0]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	4798      	blx	r3
 8010516:	2800      	cmp	r0, #0
 8010518:	d1f9      	bne.n	801050e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801051a:	4d0d      	ldr	r5, [pc, #52]	; (8010550 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801051c:	6828      	ldr	r0, [r5, #0]
 801051e:	6803      	ldr	r3, [r0, #0]
 8010520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010522:	4798      	blx	r3
 8010524:	f7f0 f9e4 	bl	80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010528:	6828      	ldr	r0, [r5, #0]
 801052a:	2101      	movs	r1, #1
 801052c:	f7ff ff28 	bl	8010380 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010530:	6860      	ldr	r0, [r4, #4]
 8010532:	4631      	mov	r1, r6
 8010534:	6803      	ldr	r3, [r0, #0]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	4798      	blx	r3
 801053a:	6823      	ldr	r3, [r4, #0]
 801053c:	4620      	mov	r0, r4
 801053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010540:	4798      	blx	r3
 8010542:	6828      	ldr	r0, [r5, #0]
 8010544:	6803      	ldr	r3, [r0, #0]
 8010546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801054a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801054c:	4718      	bx	r3
 801054e:	bf00      	nop
 8010550:	2400b980 	.word	0x2400b980

08010554 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010554:	b508      	push	{r3, lr}
 8010556:	f7f0 f9b9 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801055a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801055e:	f7f0 b9bf 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010562 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010562:	b510      	push	{r4, lr}
 8010564:	4604      	mov	r4, r0
 8010566:	2114      	movs	r1, #20
 8010568:	f00b fec3 	bl	801c2f2 <_ZdlPvj>
 801056c:	4620      	mov	r0, r4
 801056e:	bd10      	pop	{r4, pc}

08010570 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010570:	b510      	push	{r4, lr}
 8010572:	4604      	mov	r4, r0
 8010574:	6840      	ldr	r0, [r0, #4]
 8010576:	6803      	ldr	r3, [r0, #0]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4798      	blx	r3
 801057c:	b948      	cbnz	r0, 8010592 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801057e:	7a63      	ldrb	r3, [r4, #9]
 8010580:	b13b      	cbz	r3, 8010592 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010582:	7a23      	ldrb	r3, [r4, #8]
 8010584:	b92b      	cbnz	r3, 8010592 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010586:	6823      	ldr	r3, [r4, #0]
 8010588:	4620      	mov	r0, r4
 801058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010590:	4718      	bx	r3
 8010592:	bd10      	pop	{r4, pc}

08010594 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010594:	b570      	push	{r4, r5, r6, lr}
 8010596:	4604      	mov	r4, r0
 8010598:	6840      	ldr	r0, [r0, #4]
 801059a:	6803      	ldr	r3, [r0, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4798      	blx	r3
 80105a0:	4605      	mov	r5, r0
 80105a2:	b930      	cbnz	r0, 80105b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80105a4:	7a23      	ldrb	r3, [r4, #8]
 80105a6:	b123      	cbz	r3, 80105b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80105a8:	6860      	ldr	r0, [r4, #4]
 80105aa:	6803      	ldr	r3, [r0, #0]
 80105ac:	695b      	ldr	r3, [r3, #20]
 80105ae:	4798      	blx	r3
 80105b0:	7225      	strb	r5, [r4, #8]
 80105b2:	6860      	ldr	r0, [r4, #4]
 80105b4:	6803      	ldr	r3, [r0, #0]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4798      	blx	r3
 80105ba:	b928      	cbnz	r0, 80105c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	4620      	mov	r0, r4
 80105c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105c6:	4718      	bx	r3
 80105c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105cc:	f7f0 b99a 	b.w	8000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080105d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80105d0:	b510      	push	{r4, lr}
 80105d2:	6082      	str	r2, [r0, #8]
 80105d4:	2200      	movs	r2, #0
 80105d6:	4c03      	ldr	r4, [pc, #12]	; (80105e4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80105d8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80105dc:	e9c0 4100 	strd	r4, r1, [r0]
 80105e0:	bd10      	pop	{r4, pc}
 80105e2:	bf00      	nop
 80105e4:	0801f0bc 	.word	0x0801f0bc

080105e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80105e8:	6840      	ldr	r0, [r0, #4]
 80105ea:	6803      	ldr	r3, [r0, #0]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4718      	bx	r3

080105f0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80105f0:	2300      	movs	r3, #0
 80105f2:	8083      	strh	r3, [r0, #4]
 80105f4:	80c3      	strh	r3, [r0, #6]
 80105f6:	8003      	strh	r3, [r0, #0]
 80105f8:	8043      	strh	r3, [r0, #2]
 80105fa:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80105fe:	2bff      	cmp	r3, #255	; 0xff
 8010600:	bf01      	itttt	eq
 8010602:	890b      	ldrheq	r3, [r1, #8]
 8010604:	8083      	strheq	r3, [r0, #4]
 8010606:	894b      	ldrheq	r3, [r1, #10]
 8010608:	80c3      	strheq	r3, [r0, #6]
 801060a:	4770      	bx	lr

0801060c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801060c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801060e:	4604      	mov	r4, r0
 8010610:	466b      	mov	r3, sp
 8010612:	6808      	ldr	r0, [r1, #0]
 8010614:	6849      	ldr	r1, [r1, #4]
 8010616:	c303      	stmia	r3!, {r0, r1}
 8010618:	6823      	ldr	r3, [r4, #0]
 801061a:	4669      	mov	r1, sp
 801061c:	4620      	mov	r0, r4
 801061e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010620:	4798      	blx	r3
 8010622:	4b08      	ldr	r3, [pc, #32]	; (8010644 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801062a:	b10a      	cbz	r2, 8010630 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801062c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801062e:	b900      	cbnz	r0, 8010632 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8010630:	6898      	ldr	r0, [r3, #8]
 8010632:	6803      	ldr	r3, [r0, #0]
 8010634:	4669      	mov	r1, sp
 8010636:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010638:	6a1d      	ldr	r5, [r3, #32]
 801063a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801063e:	47a8      	blx	r5
 8010640:	b003      	add	sp, #12
 8010642:	bd30      	pop	{r4, r5, pc}
 8010644:	2400b980 	.word	0x2400b980

08010648 <_ZN8touchgfx3BoxD1Ev>:
 8010648:	4770      	bx	lr

0801064a <_ZN8touchgfx3BoxD0Ev>:
 801064a:	b510      	push	{r4, lr}
 801064c:	4604      	mov	r4, r0
 801064e:	212c      	movs	r1, #44	; 0x2c
 8010650:	f00b fe4f 	bl	801c2f2 <_ZdlPvj>
 8010654:	4620      	mov	r0, r4
 8010656:	bd10      	pop	{r4, pc}

08010658 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8010658:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801065c:	b12a      	cbz	r2, 801066a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801065e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8010662:	b112      	cbz	r2, 801066a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010664:	6803      	ldr	r3, [r0, #0]
 8010666:	695b      	ldr	r3, [r3, #20]
 8010668:	4718      	bx	r3
 801066a:	4770      	bx	lr

0801066c <_ZN8touchgfx5ImageD1Ev>:
 801066c:	4770      	bx	lr

0801066e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801066e:	b570      	push	{r4, r5, r6, lr}
 8010670:	880b      	ldrh	r3, [r1, #0]
 8010672:	460d      	mov	r5, r1
 8010674:	4604      	mov	r4, r0
 8010676:	84c3      	strh	r3, [r0, #38]	; 0x26
 8010678:	4608      	mov	r0, r1
 801067a:	f003 fd5f 	bl	801413c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801067e:	4606      	mov	r6, r0
 8010680:	4628      	mov	r0, r5
 8010682:	f003 fd8f 	bl	80141a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	4605      	mov	r5, r0
 801068a:	4631      	mov	r1, r6
 801068c:	4620      	mov	r0, r4
 801068e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010690:	4798      	blx	r3
 8010692:	6823      	ldr	r3, [r4, #0]
 8010694:	4629      	mov	r1, r5
 8010696:	4620      	mov	r0, r4
 8010698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801069a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801069e:	4718      	bx	r3

080106a0 <_ZN8touchgfx5ImageD0Ev>:
 80106a0:	b510      	push	{r4, lr}
 80106a2:	4604      	mov	r4, r0
 80106a4:	212c      	movs	r1, #44	; 0x2c
 80106a6:	f00b fe24 	bl	801c2f2 <_ZdlPvj>
 80106aa:	4620      	mov	r0, r4
 80106ac:	bd10      	pop	{r4, pc}

080106ae <_ZNK8touchgfx5Image12getSolidRectEv>:
 80106ae:	b510      	push	{r4, lr}
 80106b0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80106b4:	4604      	mov	r4, r0
 80106b6:	2bff      	cmp	r3, #255	; 0xff
 80106b8:	d006      	beq.n	80106c8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80106ba:	2300      	movs	r3, #0
 80106bc:	8003      	strh	r3, [r0, #0]
 80106be:	8043      	strh	r3, [r0, #2]
 80106c0:	8083      	strh	r3, [r0, #4]
 80106c2:	80c3      	strh	r3, [r0, #6]
 80106c4:	4620      	mov	r0, r4
 80106c6:	bd10      	pop	{r4, pc}
 80106c8:	3126      	adds	r1, #38	; 0x26
 80106ca:	f003 fd9f 	bl	801420c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80106ce:	e7f9      	b.n	80106c4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080106d0 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80106d0:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80106d4:	b12a      	cbz	r2, 80106e2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80106d6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80106da:	b112      	cbz	r2, 80106e2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80106dc:	6803      	ldr	r3, [r0, #0]
 80106de:	695b      	ldr	r3, [r3, #20]
 80106e0:	4718      	bx	r3
 80106e2:	4770      	bx	lr

080106e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80106e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e8:	4604      	mov	r4, r0
 80106ea:	b088      	sub	sp, #32
 80106ec:	2500      	movs	r5, #0
 80106ee:	460f      	mov	r7, r1
 80106f0:	f854 3b26 	ldr.w	r3, [r4], #38
 80106f4:	a904      	add	r1, sp, #16
 80106f6:	4606      	mov	r6, r0
 80106f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80106fe:	4798      	blx	r3
 8010700:	4620      	mov	r0, r4
 8010702:	f003 fd1b 	bl	801413c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010706:	4680      	mov	r8, r0
 8010708:	4620      	mov	r0, r4
 801070a:	f003 fd4b 	bl	80141a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801070e:	9506      	str	r5, [sp, #24]
 8010710:	ad06      	add	r5, sp, #24
 8010712:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010716:	4639      	mov	r1, r7
 8010718:	f8ad 801c 	strh.w	r8, [sp, #28]
 801071c:	4628      	mov	r0, r5
 801071e:	f7fe ff4f 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 8010722:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010726:	2b00      	cmp	r3, #0
 8010728:	dd19      	ble.n	801075e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801072a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801072e:	2b00      	cmp	r3, #0
 8010730:	dd15      	ble.n	801075e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010732:	4b0c      	ldr	r3, [pc, #48]	; (8010764 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801073a:	b10a      	cbz	r2, 8010740 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801073c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801073e:	b900      	cbnz	r0, 8010742 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8010740:	6898      	ldr	r0, [r3, #8]
 8010742:	2701      	movs	r7, #1
 8010744:	6801      	ldr	r1, [r0, #0]
 8010746:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801074a:	9702      	str	r7, [sp, #8]
 801074c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8010750:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8010754:	e9cd 5600 	strd	r5, r6, [sp]
 8010758:	688d      	ldr	r5, [r1, #8]
 801075a:	4621      	mov	r1, r4
 801075c:	47a8      	blx	r5
 801075e:	b008      	add	sp, #32
 8010760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010764:	2400b980 	.word	0x2400b980

08010768 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010768:	b510      	push	{r4, lr}
 801076a:	6803      	ldr	r3, [r0, #0]
 801076c:	460c      	mov	r4, r1
 801076e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010770:	4798      	blx	r3
 8010772:	1b03      	subs	r3, r0, r4
 8010774:	4258      	negs	r0, r3
 8010776:	4158      	adcs	r0, r3
 8010778:	bd10      	pop	{r4, pc}
	...

0801077c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801077c:	4b01      	ldr	r3, [pc, #4]	; (8010784 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801077e:	6019      	str	r1, [r3, #0]
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop
 8010784:	2400b988 	.word	0x2400b988

08010788 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801078c:	4696      	mov	lr, r2
 801078e:	b097      	sub	sp, #92	; 0x5c
 8010790:	4605      	mov	r5, r0
 8010792:	4614      	mov	r4, r2
 8010794:	460e      	mov	r6, r1
 8010796:	461f      	mov	r7, r3
 8010798:	f10d 0c1c 	add.w	ip, sp, #28
 801079c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80107a0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80107a4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80107a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107b0:	f8de 3000 	ldr.w	r3, [lr]
 80107b4:	f104 0e14 	add.w	lr, r4, #20
 80107b8:	f8cc 3000 	str.w	r3, [ip]
 80107bc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80107c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107c8:	f8de 3000 	ldr.w	r3, [lr]
 80107cc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80107d0:	f8cc 3000 	str.w	r3, [ip]
 80107d4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80107d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107e0:	f8de 3000 	ldr.w	r3, [lr]
 80107e4:	4631      	mov	r1, r6
 80107e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107e8:	4628      	mov	r0, r5
 80107ea:	f8cc 3000 	str.w	r3, [ip]
 80107ee:	682b      	ldr	r3, [r5, #0]
 80107f0:	9201      	str	r2, [sp, #4]
 80107f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80107f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80107f8:	9200      	str	r2, [sp, #0]
 80107fa:	aa07      	add	r2, sp, #28
 80107fc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010800:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8010804:	463b      	mov	r3, r7
 8010806:	47d8      	blx	fp
 8010808:	46a6      	mov	lr, r4
 801080a:	f10d 0c1c 	add.w	ip, sp, #28
 801080e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010816:	f8de 3000 	ldr.w	r3, [lr]
 801081a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801081e:	343c      	adds	r4, #60	; 0x3c
 8010820:	f8cc 3000 	str.w	r3, [ip]
 8010824:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010828:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801082c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010830:	f8de 3000 	ldr.w	r3, [lr]
 8010834:	f8cc 3000 	str.w	r3, [ip]
 8010838:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801083c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801083e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	4631      	mov	r1, r6
 8010846:	4628      	mov	r0, r5
 8010848:	f8cc 3000 	str.w	r3, [ip]
 801084c:	682b      	ldr	r3, [r5, #0]
 801084e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010852:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010854:	f8cd 8008 	str.w	r8, [sp, #8]
 8010858:	9201      	str	r2, [sp, #4]
 801085a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801085c:	9200      	str	r2, [sp, #0]
 801085e:	aa07      	add	r2, sp, #28
 8010860:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8010862:	463b      	mov	r3, r7
 8010864:	47a0      	blx	r4
 8010866:	b017      	add	sp, #92	; 0x5c
 8010868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801086c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801086c:	2000      	movs	r0, #0
 801086e:	4770      	bx	lr

08010870 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	b08d      	sub	sp, #52	; 0x34
 8010876:	4688      	mov	r8, r1
 8010878:	f8d3 c000 	ldr.w	ip, [r3]
 801087c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801087e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8010882:	680f      	ldr	r7, [r1, #0]
 8010884:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8010888:	eba7 070c 	sub.w	r7, r7, ip
 801088c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8010890:	edd3 6a07 	vldr	s13, [r3, #28]
 8010894:	42bc      	cmp	r4, r7
 8010896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010898:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801089c:	bfa8      	it	ge
 801089e:	463c      	movge	r4, r7
 80108a0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80108a4:	f9ba 1000 	ldrsh.w	r1, [sl]
 80108a8:	ee07 4a90 	vmov	s15, r4
 80108ac:	eb09 0e0c 	add.w	lr, r9, ip
 80108b0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80108b4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80108b8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80108bc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80108c0:	4571      	cmp	r1, lr
 80108c2:	ee25 4a04 	vmul.f32	s8, s10, s8
 80108c6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80108ca:	ee25 5a27 	vmul.f32	s10, s10, s15
 80108ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80108d2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80108d6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80108da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80108de:	ee36 0a84 	vadd.f32	s0, s13, s8
 80108e2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80108e6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80108ea:	f340 808c 	ble.w	8010a06 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80108ee:	eba1 060e 	sub.w	r6, r1, lr
 80108f2:	fb96 f5f4 	sdiv	r5, r6, r4
 80108f6:	ee07 5a10 	vmov	s14, r5
 80108fa:	2d00      	cmp	r5, #0
 80108fc:	fb04 6615 	mls	r6, r4, r5, r6
 8010900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010904:	eea7 0a04 	vfma.f32	s0, s14, s8
 8010908:	eee7 0a24 	vfma.f32	s1, s14, s9
 801090c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8010910:	dd12      	ble.n	8010938 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8010912:	ee70 6a44 	vsub.f32	s13, s0, s8
 8010916:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801091a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801091e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010926:	bf14      	ite	ne
 8010928:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801092c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8010930:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010934:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010938:	fb05 f204 	mul.w	r2, r5, r4
 801093c:	1abf      	subs	r7, r7, r2
 801093e:	4494      	add	ip, r2
 8010940:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8010944:	4411      	add	r1, r2
 8010946:	eb09 020c 	add.w	r2, r9, ip
 801094a:	b209      	sxth	r1, r1
 801094c:	443a      	add	r2, r7
 801094e:	428a      	cmp	r2, r1
 8010950:	bfc4      	itt	gt
 8010952:	eba1 0209 	subgt.w	r2, r1, r9
 8010956:	eba2 070c 	subgt.w	r7, r2, ip
 801095a:	2f00      	cmp	r7, #0
 801095c:	dd50      	ble.n	8010a00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801095e:	fb97 f1f4 	sdiv	r1, r7, r4
 8010962:	fb04 7211 	mls	r2, r4, r1, r7
 8010966:	b90a      	cbnz	r2, 801096c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8010968:	3901      	subs	r1, #1
 801096a:	4622      	mov	r2, r4
 801096c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010970:	6840      	ldr	r0, [r0, #4]
 8010972:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8010976:	44b6      	add	lr, r6
 8010978:	f8d0 a000 	ldr.w	sl, [r0]
 801097c:	2900      	cmp	r1, #0
 801097e:	bfcc      	ite	gt
 8010980:	46a1      	movgt	r9, r4
 8010982:	4691      	movle	r9, r2
 8010984:	900b      	str	r0, [sp, #44]	; 0x2c
 8010986:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010988:	fb04 e505 	mla	r5, r4, r5, lr
 801098c:	eef0 6a42 	vmov.f32	s13, s4
 8010990:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010994:	9008      	str	r0, [sp, #32]
 8010996:	eeb0 7a61 	vmov.f32	s14, s3
 801099a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801099c:	695b      	ldr	r3, [r3, #20]
 801099e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80109a2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80109a6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80109aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80109ac:	445b      	add	r3, fp
 80109ae:	9307      	str	r3, [sp, #28]
 80109b0:	ee16 3a90 	vmov	r3, s13
 80109b4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80109b8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80109bc:	ee21 3a23 	vmul.f32	s6, s2, s7
 80109c0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80109c4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80109c8:	ee17 7a90 	vmov	r7, s15
 80109cc:	ee73 7a42 	vsub.f32	s15, s6, s4
 80109d0:	fb97 f7f4 	sdiv	r7, r7, r4
 80109d4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80109d8:	ee17 ca90 	vmov	ip, s15
 80109dc:	fb9c fcf4 	sdiv	ip, ip, r4
 80109e0:	fb0c 3306 	mla	r3, ip, r6, r3
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	ee17 3a10 	vmov	r3, s14
 80109ea:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80109ee:	fb07 3706 	mla	r7, r7, r6, r3
 80109f2:	eba9 0306 	sub.w	r3, r9, r6
 80109f6:	e9cd 4700 	strd	r4, r7, [sp]
 80109fa:	f8da 4008 	ldr.w	r4, [sl, #8]
 80109fe:	47a0      	blx	r4
 8010a00:	b00d      	add	sp, #52	; 0x34
 8010a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a06:	2500      	movs	r5, #0
 8010a08:	462e      	mov	r6, r5
 8010a0a:	e799      	b.n	8010940 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08010a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a10:	b0db      	sub	sp, #364	; 0x16c
 8010a12:	461d      	mov	r5, r3
 8010a14:	4614      	mov	r4, r2
 8010a16:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8010a1a:	910f      	str	r1, [sp, #60]	; 0x3c
 8010a1c:	4629      	mov	r1, r5
 8010a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8010a20:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8010a24:	9009      	str	r0, [sp, #36]	; 0x24
 8010a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a28:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8010a2c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8010a30:	9310      	str	r3, [sp, #64]	; 0x40
 8010a32:	6803      	ldr	r3, [r0, #0]
 8010a34:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8010a36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010a3a:	47b8      	blx	r7
 8010a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a3e:	6058      	str	r0, [r3, #4]
 8010a40:	2800      	cmp	r0, #0
 8010a42:	f000 83a1 	beq.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a46:	682b      	ldr	r3, [r5, #0]
 8010a48:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8010a4c:	ed94 7a02 	vldr	s14, [r4, #8]
 8010a50:	9314      	str	r3, [sp, #80]	; 0x50
 8010a52:	686b      	ldr	r3, [r5, #4]
 8010a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a58:	9315      	str	r3, [sp, #84]	; 0x54
 8010a5a:	4bc1      	ldr	r3, [pc, #772]	; (8010d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8010a5c:	7819      	ldrb	r1, [r3, #0]
 8010a5e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8010a62:	2900      	cmp	r1, #0
 8010a64:	bf16      	itet	ne
 8010a66:	4619      	movne	r1, r3
 8010a68:	4611      	moveq	r1, r2
 8010a6a:	4613      	movne	r3, r2
 8010a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a70:	9116      	str	r1, [sp, #88]	; 0x58
 8010a72:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8010a76:	f240 8387 	bls.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a7a:	ed94 7a07 	vldr	s14, [r4, #28]
 8010a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a86:	f240 837f 	bls.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a8a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8010a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a96:	f240 8377 	bls.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a9a:	6822      	ldr	r2, [r4, #0]
 8010a9c:	4bb1      	ldr	r3, [pc, #708]	; (8010d64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	f2c0 8372 	blt.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010aa4:	49b0      	ldr	r1, [pc, #704]	; (8010d68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8010aa6:	6963      	ldr	r3, [r4, #20]
 8010aa8:	428a      	cmp	r2, r1
 8010aaa:	f300 836d 	bgt.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010aae:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010ab2:	48ae      	ldr	r0, [pc, #696]	; (8010d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8010ab4:	33ff      	adds	r3, #255	; 0xff
 8010ab6:	4283      	cmp	r3, r0
 8010ab8:	f200 8366 	bhi.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010abe:	4dac      	ldr	r5, [pc, #688]	; (8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8010ac0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010ac4:	33ff      	adds	r3, #255	; 0xff
 8010ac6:	42ab      	cmp	r3, r5
 8010ac8:	f200 835e 	bhi.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010acc:	6862      	ldr	r2, [r4, #4]
 8010ace:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8010ad2:	33ff      	adds	r3, #255	; 0xff
 8010ad4:	4283      	cmp	r3, r0
 8010ad6:	f200 8357 	bhi.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010ada:	69a1      	ldr	r1, [r4, #24]
 8010adc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8010ae0:	33ff      	adds	r3, #255	; 0xff
 8010ae2:	4283      	cmp	r3, r0
 8010ae4:	f200 8350 	bhi.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010aea:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8010aee:	30ff      	adds	r0, #255	; 0xff
 8010af0:	42a8      	cmp	r0, r5
 8010af2:	f200 8349 	bhi.w	8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010af6:	428a      	cmp	r2, r1
 8010af8:	f280 8110 	bge.w	8010d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8010afc:	429a      	cmp	r2, r3
 8010afe:	f300 8119 	bgt.w	8010d34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8010b02:	4299      	cmp	r1, r3
 8010b04:	f280 811d 	bge.w	8010d42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8010b08:	2502      	movs	r5, #2
 8010b0a:	2701      	movs	r7, #1
 8010b0c:	46a9      	mov	r9, r5
 8010b0e:	46b8      	mov	r8, r7
 8010b10:	f04f 0a00 	mov.w	sl, #0
 8010b14:	4621      	mov	r1, r4
 8010b16:	a849      	add	r0, sp, #292	; 0x124
 8010b18:	f002 ff98 	bl	8013a4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8010b1c:	4622      	mov	r2, r4
 8010b1e:	4653      	mov	r3, sl
 8010b20:	a949      	add	r1, sp, #292	; 0x124
 8010b22:	f8cd 9000 	str.w	r9, [sp]
 8010b26:	a819      	add	r0, sp, #100	; 0x64
 8010b28:	f003 f8c0 	bl	8013cac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010b2c:	4622      	mov	r2, r4
 8010b2e:	4653      	mov	r3, sl
 8010b30:	a949      	add	r1, sp, #292	; 0x124
 8010b32:	f8cd 8000 	str.w	r8, [sp]
 8010b36:	a829      	add	r0, sp, #164	; 0xa4
 8010b38:	f003 f8b8 	bl	8013cac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010b3c:	4643      	mov	r3, r8
 8010b3e:	4622      	mov	r2, r4
 8010b40:	a949      	add	r1, sp, #292	; 0x124
 8010b42:	f8cd 9000 	str.w	r9, [sp]
 8010b46:	a839      	add	r0, sp, #228	; 0xe4
 8010b48:	f003 f8b0 	bl	8013cac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010b4c:	42af      	cmp	r7, r5
 8010b4e:	af12      	add	r7, sp, #72	; 0x48
 8010b50:	bfb7      	itett	lt
 8010b52:	2300      	movlt	r3, #0
 8010b54:	2301      	movge	r3, #1
 8010b56:	ad29      	addlt	r5, sp, #164	; 0xa4
 8010b58:	ac19      	addlt	r4, sp, #100	; 0x64
 8010b5a:	bfb1      	iteee	lt
 8010b5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010b5e:	ad19      	addge	r5, sp, #100	; 0x64
 8010b60:	930e      	strge	r3, [sp, #56]	; 0x38
 8010b62:	ac29      	addge	r4, sp, #164	; 0xa4
 8010b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b6a:	e887 0003 	stmia.w	r7, {r0, r1}
 8010b6e:	b928      	cbnz	r0, 8010b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8010b70:	4b80      	ldr	r3, [pc, #512]	; (8010d74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8010b72:	6818      	ldr	r0, [r3, #0]
 8010b74:	6803      	ldr	r3, [r0, #0]
 8010b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b78:	4798      	blx	r3
 8010b7a:	6038      	str	r0, [r7, #0]
 8010b7c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010b7e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010b82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b86:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010b88:	930c      	str	r3, [sp, #48]	; 0x30
 8010b8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b8c:	6963      	ldr	r3, [r4, #20]
 8010b8e:	440b      	add	r3, r1
 8010b90:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010b94:	4408      	add	r0, r1
 8010b96:	b200      	sxth	r0, r0
 8010b98:	4283      	cmp	r3, r0
 8010b9a:	900d      	str	r0, [sp, #52]	; 0x34
 8010b9c:	f280 80dd 	bge.w	8010d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8010ba0:	428b      	cmp	r3, r1
 8010ba2:	da08      	bge.n	8010bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010ba4:	2a00      	cmp	r2, #0
 8010ba6:	dd06      	ble.n	8010bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010ba8:	1acb      	subs	r3, r1, r3
 8010baa:	429a      	cmp	r2, r3
 8010bac:	f2c0 80e4 	blt.w	8010d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f300 80e2 	bgt.w	8010d7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8010bb6:	6967      	ldr	r7, [r4, #20]
 8010bb8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bbe:	443b      	add	r3, r7
 8010bc0:	461f      	mov	r7, r3
 8010bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bc4:	1bdf      	subs	r7, r3, r7
 8010bc6:	4297      	cmp	r7, r2
 8010bc8:	bfa8      	it	ge
 8010bca:	4617      	movge	r7, r2
 8010bcc:	2f00      	cmp	r7, #0
 8010bce:	f340 8166 	ble.w	8010e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8010bd2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010bd4:	6829      	ldr	r1, [r5, #0]
 8010bd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010bda:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010bde:	4411      	add	r1, r2
 8010be0:	6820      	ldr	r0, [r4, #0]
 8010be2:	4299      	cmp	r1, r3
 8010be4:	dd1a      	ble.n	8010c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010be6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010bea:	4402      	add	r2, r0
 8010bec:	440b      	add	r3, r1
 8010bee:	b21b      	sxth	r3, r3
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	dc13      	bgt.n	8010c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010bf6:	a912      	add	r1, sp, #72	; 0x48
 8010bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	9206      	str	r2, [sp, #24]
 8010c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c02:	9500      	str	r5, [sp, #0]
 8010c04:	9205      	str	r2, [sp, #20]
 8010c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c08:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010c0c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010c0e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010c12:	aa49      	add	r2, sp, #292	; 0x124
 8010c14:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8010c18:	4623      	mov	r3, r4
 8010c1a:	47c8      	blx	r9
 8010c1c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010c20:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010c24:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8010c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c2c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010c30:	68a1      	ldr	r1, [r4, #8]
 8010c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c36:	ed94 6a08 	vldr	s12, [r4, #32]
 8010c3a:	edd4 6a07 	vldr	s13, [r4, #28]
 8010c3e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010c42:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010c46:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010c4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010c4e:	edc4 6a07 	vstr	s13, [r4, #28]
 8010c52:	441a      	add	r2, r3
 8010c54:	6963      	ldr	r3, [r4, #20]
 8010c56:	3301      	adds	r3, #1
 8010c58:	6022      	str	r2, [r4, #0]
 8010c5a:	6163      	str	r3, [r4, #20]
 8010c5c:	69a3      	ldr	r3, [r4, #24]
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	61a3      	str	r3, [r4, #24]
 8010c62:	6923      	ldr	r3, [r4, #16]
 8010c64:	440b      	add	r3, r1
 8010c66:	68e1      	ldr	r1, [r4, #12]
 8010c68:	428b      	cmp	r3, r1
 8010c6a:	6123      	str	r3, [r4, #16]
 8010c6c:	db15      	blt.n	8010c9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8010c6e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010c72:	3201      	adds	r2, #1
 8010c74:	1a5b      	subs	r3, r3, r1
 8010c76:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010c7a:	6022      	str	r2, [r4, #0]
 8010c7c:	6123      	str	r3, [r4, #16]
 8010c7e:	edc4 6a07 	vstr	s13, [r4, #28]
 8010c82:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8010c86:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010c8a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010c8e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c96:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010c9a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010c9e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010ca2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8010ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010caa:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010cae:	68a9      	ldr	r1, [r5, #8]
 8010cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cb4:	ed95 6a08 	vldr	s12, [r5, #32]
 8010cb8:	edd5 6a07 	vldr	s13, [r5, #28]
 8010cbc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010cc0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010cc4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010cc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ccc:	edc5 6a07 	vstr	s13, [r5, #28]
 8010cd0:	441a      	add	r2, r3
 8010cd2:	696b      	ldr	r3, [r5, #20]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	602a      	str	r2, [r5, #0]
 8010cd8:	616b      	str	r3, [r5, #20]
 8010cda:	69ab      	ldr	r3, [r5, #24]
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	61ab      	str	r3, [r5, #24]
 8010ce0:	692b      	ldr	r3, [r5, #16]
 8010ce2:	440b      	add	r3, r1
 8010ce4:	68e9      	ldr	r1, [r5, #12]
 8010ce6:	428b      	cmp	r3, r1
 8010ce8:	612b      	str	r3, [r5, #16]
 8010cea:	db15      	blt.n	8010d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8010cec:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010cf0:	3201      	adds	r2, #1
 8010cf2:	1a5b      	subs	r3, r3, r1
 8010cf4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010cf8:	602a      	str	r2, [r5, #0]
 8010cfa:	612b      	str	r3, [r5, #16]
 8010cfc:	edc5 6a07 	vstr	s13, [r5, #28]
 8010d00:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8010d04:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010d08:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010d0c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d14:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010d18:	3f01      	subs	r7, #1
 8010d1a:	e757      	b.n	8010bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8010d1c:	4299      	cmp	r1, r3
 8010d1e:	dc13      	bgt.n	8010d48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8010d20:	429a      	cmp	r2, r3
 8010d22:	da14      	bge.n	8010d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8010d24:	2502      	movs	r5, #2
 8010d26:	2703      	movs	r7, #3
 8010d28:	f04f 0800 	mov.w	r8, #0
 8010d2c:	46a9      	mov	r9, r5
 8010d2e:	f04f 0a01 	mov.w	sl, #1
 8010d32:	e6ef      	b.n	8010b14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010d34:	2501      	movs	r5, #1
 8010d36:	2700      	movs	r7, #0
 8010d38:	46a9      	mov	r9, r5
 8010d3a:	46b8      	mov	r8, r7
 8010d3c:	f04f 0a02 	mov.w	sl, #2
 8010d40:	e6e8      	b.n	8010b14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010d42:	2501      	movs	r5, #1
 8010d44:	2702      	movs	r7, #2
 8010d46:	e6e1      	b.n	8010b0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8010d48:	2500      	movs	r5, #0
 8010d4a:	2701      	movs	r7, #1
 8010d4c:	e7f4      	b.n	8010d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8010d4e:	2702      	movs	r7, #2
 8010d50:	2503      	movs	r5, #3
 8010d52:	f04f 0900 	mov.w	r9, #0
 8010d56:	46b8      	mov	r8, r7
 8010d58:	e7e9      	b.n	8010d2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	e728      	b.n	8010bb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8010d5e:	bf00      	nop
 8010d60:	2400b978 	.word	0x2400b978
 8010d64:	fffd8f01 	.word	0xfffd8f01
 8010d68:	00027100 	.word	0x00027100
 8010d6c:	0004e1ff 	.word	0x0004e1ff
 8010d70:	0004e1fe 	.word	0x0004e1fe
 8010d74:	2400b980 	.word	0x2400b980
 8010d78:	4613      	mov	r3, r2
 8010d7a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010d7c:	469e      	mov	lr, r3
 8010d7e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8010d80:	469c      	mov	ip, r3
 8010d82:	9111      	str	r1, [sp, #68]	; 0x44
 8010d84:	f04f 0900 	mov.w	r9, #0
 8010d88:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8010d8c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8010d90:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8010d94:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8010d98:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8010d9c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8010da0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8010da4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8010da8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8010dac:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8010db0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8010db4:	f1bc 0f00 	cmp.w	ip, #0
 8010db8:	d147      	bne.n	8010e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8010dba:	eb03 0c07 	add.w	ip, r3, r7
 8010dbe:	1ad7      	subs	r7, r2, r3
 8010dc0:	f1b9 0f00 	cmp.w	r9, #0
 8010dc4:	d009      	beq.n	8010dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8010dc6:	9029      	str	r0, [sp, #164]	; 0xa4
 8010dc8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8010dcc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8010dd0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8010dd4:	912d      	str	r1, [sp, #180]	; 0xb4
 8010dd6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8010dda:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010ddc:	f04f 0800 	mov.w	r8, #0
 8010de0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8010de4:	9111      	str	r1, [sp, #68]	; 0x44
 8010de6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8010dea:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8010dee:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8010df2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8010df6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8010dfa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8010dfe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8010e02:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8010e06:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8010e0a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8010e0e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8010e12:	f1be 0f00 	cmp.w	lr, #0
 8010e16:	d031      	beq.n	8010e7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8010e18:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010e1a:	4450      	add	r0, sl
 8010e1c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010e20:	4431      	add	r1, r6
 8010e22:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010e26:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010e2a:	4549      	cmp	r1, r9
 8010e2c:	db08      	blt.n	8010e40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8010e2e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010e32:	3001      	adds	r0, #1
 8010e34:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010e38:	eba1 0109 	sub.w	r1, r1, r9
 8010e3c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010e40:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010e44:	f04f 0801 	mov.w	r8, #1
 8010e48:	e7e3      	b.n	8010e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8010e4a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010e4c:	4450      	add	r0, sl
 8010e4e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010e52:	4431      	add	r1, r6
 8010e54:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010e58:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010e5c:	4541      	cmp	r1, r8
 8010e5e:	db08      	blt.n	8010e72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8010e60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010e64:	3001      	adds	r0, #1
 8010e66:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010e6a:	eba1 0108 	sub.w	r1, r1, r8
 8010e6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010e72:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e76:	f04f 0901 	mov.w	r9, #1
 8010e7a:	e79b      	b.n	8010db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8010e7c:	449c      	add	ip, r3
 8010e7e:	1aff      	subs	r7, r7, r3
 8010e80:	f1b8 0f00 	cmp.w	r8, #0
 8010e84:	d009      	beq.n	8010e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8010e86:	9019      	str	r0, [sp, #100]	; 0x64
 8010e88:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8010e8c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8010e90:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8010e94:	911d      	str	r1, [sp, #116]	; 0x74
 8010e96:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8010e9a:	1ad2      	subs	r2, r2, r3
 8010e9c:	e68b      	b.n	8010bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ea0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f000 80d1 	beq.w	801104a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8010ea8:	ad19      	add	r5, sp, #100	; 0x64
 8010eaa:	ac39      	add	r4, sp, #228	; 0xe4
 8010eac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010eae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010eb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8010eb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010eba:	6963      	ldr	r3, [r4, #20]
 8010ebc:	440b      	add	r3, r1
 8010ebe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010ec2:	4408      	add	r0, r1
 8010ec4:	b200      	sxth	r0, r0
 8010ec6:	4283      	cmp	r3, r0
 8010ec8:	900d      	str	r0, [sp, #52]	; 0x34
 8010eca:	f280 80c1 	bge.w	8011050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8010ece:	428b      	cmp	r3, r1
 8010ed0:	da08      	bge.n	8010ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010ed2:	2a00      	cmp	r2, #0
 8010ed4:	dd06      	ble.n	8010ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010ed6:	1acb      	subs	r3, r1, r3
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	f2c0 80bb 	blt.w	8011054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f300 80b9 	bgt.w	8011056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8010ee4:	6967      	ldr	r7, [r4, #20]
 8010ee6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eec:	443b      	add	r3, r7
 8010eee:	461f      	mov	r7, r3
 8010ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ef2:	1bdf      	subs	r7, r3, r7
 8010ef4:	4297      	cmp	r7, r2
 8010ef6:	bfa8      	it	ge
 8010ef8:	4617      	movge	r7, r2
 8010efa:	2f00      	cmp	r7, #0
 8010efc:	f340 813c 	ble.w	8011178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8010f00:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010f02:	6829      	ldr	r1, [r5, #0]
 8010f04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f08:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010f0c:	4411      	add	r1, r2
 8010f0e:	6820      	ldr	r0, [r4, #0]
 8010f10:	4299      	cmp	r1, r3
 8010f12:	dd1a      	ble.n	8010f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010f14:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010f18:	4402      	add	r2, r0
 8010f1a:	440b      	add	r3, r1
 8010f1c:	b21b      	sxth	r3, r3
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	dc13      	bgt.n	8010f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010f22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f24:	a912      	add	r1, sp, #72	; 0x48
 8010f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	9206      	str	r2, [sp, #24]
 8010f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f30:	9500      	str	r5, [sp, #0]
 8010f32:	9205      	str	r2, [sp, #20]
 8010f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f36:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010f3a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010f3c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010f40:	aa49      	add	r2, sp, #292	; 0x124
 8010f42:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8010f46:	4623      	mov	r3, r4
 8010f48:	47c8      	blx	r9
 8010f4a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010f4e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010f52:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8010f56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f5a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010f5e:	68a1      	ldr	r1, [r4, #8]
 8010f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f64:	ed94 6a08 	vldr	s12, [r4, #32]
 8010f68:	edd4 6a07 	vldr	s13, [r4, #28]
 8010f6c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010f70:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010f74:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010f78:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010f7c:	edc4 6a07 	vstr	s13, [r4, #28]
 8010f80:	441a      	add	r2, r3
 8010f82:	6963      	ldr	r3, [r4, #20]
 8010f84:	3301      	adds	r3, #1
 8010f86:	6022      	str	r2, [r4, #0]
 8010f88:	6163      	str	r3, [r4, #20]
 8010f8a:	69a3      	ldr	r3, [r4, #24]
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	61a3      	str	r3, [r4, #24]
 8010f90:	6923      	ldr	r3, [r4, #16]
 8010f92:	440b      	add	r3, r1
 8010f94:	68e1      	ldr	r1, [r4, #12]
 8010f96:	428b      	cmp	r3, r1
 8010f98:	6123      	str	r3, [r4, #16]
 8010f9a:	db15      	blt.n	8010fc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8010f9c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010fa0:	3201      	adds	r2, #1
 8010fa2:	1a5b      	subs	r3, r3, r1
 8010fa4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010fa8:	6022      	str	r2, [r4, #0]
 8010faa:	6123      	str	r3, [r4, #16]
 8010fac:	edc4 6a07 	vstr	s13, [r4, #28]
 8010fb0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8010fb4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010fb8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010fbc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fc4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010fc8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010fcc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010fd0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8010fd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fd8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010fdc:	68a9      	ldr	r1, [r5, #8]
 8010fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fe2:	ed95 6a08 	vldr	s12, [r5, #32]
 8010fe6:	edd5 6a07 	vldr	s13, [r5, #28]
 8010fea:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010fee:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010ff2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010ff6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ffa:	edc5 6a07 	vstr	s13, [r5, #28]
 8010ffe:	441a      	add	r2, r3
 8011000:	696b      	ldr	r3, [r5, #20]
 8011002:	3301      	adds	r3, #1
 8011004:	602a      	str	r2, [r5, #0]
 8011006:	616b      	str	r3, [r5, #20]
 8011008:	69ab      	ldr	r3, [r5, #24]
 801100a:	3b01      	subs	r3, #1
 801100c:	61ab      	str	r3, [r5, #24]
 801100e:	692b      	ldr	r3, [r5, #16]
 8011010:	440b      	add	r3, r1
 8011012:	68e9      	ldr	r1, [r5, #12]
 8011014:	428b      	cmp	r3, r1
 8011016:	612b      	str	r3, [r5, #16]
 8011018:	db15      	blt.n	8011046 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801101a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801101e:	3201      	adds	r2, #1
 8011020:	1a5b      	subs	r3, r3, r1
 8011022:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011026:	602a      	str	r2, [r5, #0]
 8011028:	612b      	str	r3, [r5, #16]
 801102a:	edc5 6a07 	vstr	s13, [r5, #28]
 801102e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8011032:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011036:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801103a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801103e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011042:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011046:	3f01      	subs	r7, #1
 8011048:	e757      	b.n	8010efa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801104a:	ad39      	add	r5, sp, #228	; 0xe4
 801104c:	ac19      	add	r4, sp, #100	; 0x64
 801104e:	e72d      	b.n	8010eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8011050:	4613      	mov	r3, r2
 8011052:	e744      	b.n	8010ede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011054:	4613      	mov	r3, r2
 8011056:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8011058:	469e      	mov	lr, r3
 801105a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801105e:	461f      	mov	r7, r3
 8011060:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011064:	f04f 0900 	mov.w	r9, #0
 8011068:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801106c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8011070:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8011074:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8011078:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801107c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801107e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8011082:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8011086:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801108a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801108e:	960e      	str	r6, [sp, #56]	; 0x38
 8011090:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8011094:	2f00      	cmp	r7, #0
 8011096:	d146      	bne.n	8011126 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011098:	449c      	add	ip, r3
 801109a:	1ad7      	subs	r7, r2, r3
 801109c:	f1b9 0f00 	cmp.w	r9, #0
 80110a0:	d009      	beq.n	80110b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80110a2:	9039      	str	r0, [sp, #228]	; 0xe4
 80110a4:	913d      	str	r1, [sp, #244]	; 0xf4
 80110a6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80110aa:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80110ae:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80110b2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80110b6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80110b8:	f04f 0800 	mov.w	r8, #0
 80110bc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80110c0:	910e      	str	r1, [sp, #56]	; 0x38
 80110c2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80110c6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80110ca:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80110ce:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80110d2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80110d6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80110da:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80110de:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80110e2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80110e6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80110ea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80110ee:	f1be 0f00 	cmp.w	lr, #0
 80110f2:	d030      	beq.n	8011156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80110f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80110f6:	4450      	add	r0, sl
 80110f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80110fc:	4431      	add	r1, r6
 80110fe:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011102:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011106:	4549      	cmp	r1, r9
 8011108:	db08      	blt.n	801111c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801110a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801110e:	3001      	adds	r0, #1
 8011110:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011114:	eba1 0109 	sub.w	r1, r1, r9
 8011118:	ee37 7a06 	vadd.f32	s14, s14, s12
 801111c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011120:	f04f 0801 	mov.w	r8, #1
 8011124:	e7e3      	b.n	80110ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011126:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011128:	4450      	add	r0, sl
 801112a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801112e:	4431      	add	r1, r6
 8011130:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011134:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011138:	4541      	cmp	r1, r8
 801113a:	db08      	blt.n	801114e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801113c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011140:	3001      	adds	r0, #1
 8011142:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011146:	eba1 0108 	sub.w	r1, r1, r8
 801114a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801114e:	3f01      	subs	r7, #1
 8011150:	f04f 0901 	mov.w	r9, #1
 8011154:	e79e      	b.n	8011094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8011156:	449c      	add	ip, r3
 8011158:	1aff      	subs	r7, r7, r3
 801115a:	f1b8 0f00 	cmp.w	r8, #0
 801115e:	d009      	beq.n	8011174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011160:	9019      	str	r0, [sp, #100]	; 0x64
 8011162:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011166:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801116a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801116e:	911d      	str	r1, [sp, #116]	; 0x74
 8011170:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011174:	1ad2      	subs	r2, r2, r3
 8011176:	e6b5      	b.n	8010ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	b923      	cbnz	r3, 8011188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801117e:	4b04      	ldr	r3, [pc, #16]	; (8011190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011180:	6818      	ldr	r0, [r3, #0]
 8011182:	6803      	ldr	r3, [r0, #0]
 8011184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011186:	4798      	blx	r3
 8011188:	b05b      	add	sp, #364	; 0x16c
 801118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801118e:	bf00      	nop
 8011190:	2400b980 	.word	0x2400b980

08011194 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011194:	2b03      	cmp	r3, #3
 8011196:	d818      	bhi.n	80111ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8011198:	e8df f003 	tbb	[pc, r3]
 801119c:	130d0602 	.word	0x130d0602
 80111a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80111a4:	1850      	adds	r0, r2, r1
 80111a6:	4770      	bx	lr
 80111a8:	8803      	ldrh	r3, [r0, #0]
 80111aa:	8880      	ldrh	r0, [r0, #4]
 80111ac:	4418      	add	r0, r3
 80111ae:	b200      	sxth	r0, r0
 80111b0:	1a80      	subs	r0, r0, r2
 80111b2:	3801      	subs	r0, #1
 80111b4:	4770      	bx	lr
 80111b6:	8803      	ldrh	r3, [r0, #0]
 80111b8:	8880      	ldrh	r0, [r0, #4]
 80111ba:	4418      	add	r0, r3
 80111bc:	b200      	sxth	r0, r0
 80111be:	1a40      	subs	r0, r0, r1
 80111c0:	e7f7      	b.n	80111b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80111c2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80111c6:	4410      	add	r0, r2
 80111c8:	4770      	bx	lr
 80111ca:	2000      	movs	r0, #0
 80111cc:	4770      	bx	lr

080111ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80111ce:	2b03      	cmp	r3, #3
 80111d0:	d817      	bhi.n	8011202 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80111d2:	e8df f003 	tbb	[pc, r3]
 80111d6:	0602      	.short	0x0602
 80111d8:	1009      	.short	0x1009
 80111da:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80111de:	1850      	adds	r0, r2, r1
 80111e0:	4770      	bx	lr
 80111e2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80111e6:	e7fa      	b.n	80111de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80111e8:	8843      	ldrh	r3, [r0, #2]
 80111ea:	88c0      	ldrh	r0, [r0, #6]
 80111ec:	4418      	add	r0, r3
 80111ee:	b200      	sxth	r0, r0
 80111f0:	1a80      	subs	r0, r0, r2
 80111f2:	3801      	subs	r0, #1
 80111f4:	4770      	bx	lr
 80111f6:	8843      	ldrh	r3, [r0, #2]
 80111f8:	88c0      	ldrh	r0, [r0, #6]
 80111fa:	4418      	add	r0, r3
 80111fc:	b200      	sxth	r0, r0
 80111fe:	1a40      	subs	r0, r0, r1
 8011200:	e7f7      	b.n	80111f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011202:	2000      	movs	r0, #0
 8011204:	4770      	bx	lr
	...

08011208 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011208:	4b01      	ldr	r3, [pc, #4]	; (8011210 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801120a:	2200      	movs	r2, #0
 801120c:	601a      	str	r2, [r3, #0]
 801120e:	4770      	bx	lr
 8011210:	2400b988 	.word	0x2400b988

08011214 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011214:	4603      	mov	r3, r0
 8011216:	b1c8      	cbz	r0, 801124c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011218:	0c02      	lsrs	r2, r0, #16
 801121a:	0412      	lsls	r2, r2, #16
 801121c:	b9a2      	cbnz	r2, 8011248 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801121e:	0403      	lsls	r3, r0, #16
 8011220:	2010      	movs	r0, #16
 8011222:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011226:	bf04      	itt	eq
 8011228:	021b      	lsleq	r3, r3, #8
 801122a:	3008      	addeq	r0, #8
 801122c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011230:	bf04      	itt	eq
 8011232:	011b      	lsleq	r3, r3, #4
 8011234:	3004      	addeq	r0, #4
 8011236:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801123a:	bf04      	itt	eq
 801123c:	009b      	lsleq	r3, r3, #2
 801123e:	3002      	addeq	r0, #2
 8011240:	2b00      	cmp	r3, #0
 8011242:	db04      	blt.n	801124e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011244:	3001      	adds	r0, #1
 8011246:	4770      	bx	lr
 8011248:	2000      	movs	r0, #0
 801124a:	e7ea      	b.n	8011222 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801124c:	2020      	movs	r0, #32
 801124e:	4770      	bx	lr

08011250 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011254:	b087      	sub	sp, #28
 8011256:	4681      	mov	r9, r0
 8011258:	4698      	mov	r8, r3
 801125a:	4610      	mov	r0, r2
 801125c:	460d      	mov	r5, r1
 801125e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8011262:	b981      	cbnz	r1, 8011286 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8011264:	b14b      	cbz	r3, 801127a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8011266:	460b      	mov	r3, r1
 8011268:	464a      	mov	r2, r9
 801126a:	4641      	mov	r1, r8
 801126c:	e9cd 4700 	strd	r4, r7, [sp]
 8011270:	f7ff ffee 	bl	8011250 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011274:	b007      	add	sp, #28
 8011276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127a:	f04f 33ff 	mov.w	r3, #4294967295
 801127e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011282:	603b      	str	r3, [r7, #0]
 8011284:	e7f6      	b.n	8011274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8011286:	fa32 fa01 	lsrs.w	sl, r2, r1
 801128a:	d107      	bne.n	801129c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801128c:	fb09 f602 	mul.w	r6, r9, r2
 8011290:	fbb6 f0f4 	udiv	r0, r6, r4
 8011294:	fb04 6610 	mls	r6, r4, r0, r6
 8011298:	603e      	str	r6, [r7, #0]
 801129a:	e7eb      	b.n	8011274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801129c:	2601      	movs	r6, #1
 801129e:	fa09 fb01 	lsl.w	fp, r9, r1
 80112a2:	408e      	lsls	r6, r1
 80112a4:	fbbb f3f4 	udiv	r3, fp, r4
 80112a8:	3e01      	subs	r6, #1
 80112aa:	9302      	str	r3, [sp, #8]
 80112ac:	fb0a f303 	mul.w	r3, sl, r3
 80112b0:	4016      	ands	r6, r2
 80112b2:	9303      	str	r3, [sp, #12]
 80112b4:	4630      	mov	r0, r6
 80112b6:	f7ff ffad 	bl	8011214 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80112ba:	464a      	mov	r2, r9
 80112bc:	460b      	mov	r3, r1
 80112be:	4601      	mov	r1, r0
 80112c0:	4630      	mov	r0, r6
 80112c2:	e9cd 4700 	strd	r4, r7, [sp]
 80112c6:	f7ff ffc3 	bl	8011250 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80112ca:	9b02      	ldr	r3, [sp, #8]
 80112cc:	4606      	mov	r6, r0
 80112ce:	eb05 0108 	add.w	r1, r5, r8
 80112d2:	fb04 bb13 	mls	fp, r4, r3, fp
 80112d6:	4658      	mov	r0, fp
 80112d8:	f7ff ff9c 	bl	8011214 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80112dc:	ab05      	add	r3, sp, #20
 80112de:	465a      	mov	r2, fp
 80112e0:	e9cd 4300 	strd	r4, r3, [sp]
 80112e4:	4603      	mov	r3, r0
 80112e6:	4650      	mov	r0, sl
 80112e8:	f7ff ffb2 	bl	8011250 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80112ec:	6839      	ldr	r1, [r7, #0]
 80112ee:	9a05      	ldr	r2, [sp, #20]
 80112f0:	9b03      	ldr	r3, [sp, #12]
 80112f2:	4411      	add	r1, r2
 80112f4:	fbb1 f2f4 	udiv	r2, r1, r4
 80112f8:	18d3      	adds	r3, r2, r3
 80112fa:	fb04 1412 	mls	r4, r4, r2, r1
 80112fe:	441e      	add	r6, r3
 8011300:	603c      	str	r4, [r7, #0]
 8011302:	4430      	add	r0, r6
 8011304:	e7b6      	b.n	8011274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08011306 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8011306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801130a:	b085      	sub	sp, #20
 801130c:	f1b0 0900 	subs.w	r9, r0, #0
 8011310:	461d      	mov	r5, r3
 8011312:	4617      	mov	r7, r2
 8011314:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011316:	bfbb      	ittet	lt
 8011318:	f1c9 0900 	rsblt	r9, r9, #0
 801131c:	f04f 36ff 	movlt.w	r6, #4294967295
 8011320:	2601      	movge	r6, #1
 8011322:	6823      	ldrlt	r3, [r4, #0]
 8011324:	bfbc      	itt	lt
 8011326:	425b      	neglt	r3, r3
 8011328:	6023      	strlt	r3, [r4, #0]
 801132a:	2a00      	cmp	r2, #0
 801132c:	da04      	bge.n	8011338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801132e:	6823      	ldr	r3, [r4, #0]
 8011330:	4257      	negs	r7, r2
 8011332:	4276      	negs	r6, r6
 8011334:	425b      	negs	r3, r3
 8011336:	6023      	str	r3, [r4, #0]
 8011338:	2d00      	cmp	r5, #0
 801133a:	4638      	mov	r0, r7
 801133c:	bfba      	itte	lt
 801133e:	426d      	neglt	r5, r5
 8011340:	f04f 38ff 	movlt.w	r8, #4294967295
 8011344:	f04f 0801 	movge.w	r8, #1
 8011348:	f7ff ff64 	bl	8011214 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801134c:	ab03      	add	r3, sp, #12
 801134e:	463a      	mov	r2, r7
 8011350:	e9cd 5300 	strd	r5, r3, [sp]
 8011354:	4603      	mov	r3, r0
 8011356:	4648      	mov	r0, r9
 8011358:	f7ff ff7a 	bl	8011250 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801135c:	6823      	ldr	r3, [r4, #0]
 801135e:	9a03      	ldr	r2, [sp, #12]
 8011360:	4546      	cmp	r6, r8
 8011362:	441a      	add	r2, r3
 8011364:	fb92 f3f5 	sdiv	r3, r2, r5
 8011368:	4418      	add	r0, r3
 801136a:	fb05 2313 	mls	r3, r5, r3, r2
 801136e:	bf18      	it	ne
 8011370:	4240      	negne	r0, r0
 8011372:	1c72      	adds	r2, r6, #1
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	d105      	bne.n	8011384 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8011378:	2b00      	cmp	r3, #0
 801137a:	f1c3 0200 	rsb	r2, r3, #0
 801137e:	db0b      	blt.n	8011398 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8011380:	6022      	str	r2, [r4, #0]
 8011382:	e006      	b.n	8011392 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011384:	2e01      	cmp	r6, #1
 8011386:	d104      	bne.n	8011392 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011388:	2b00      	cmp	r3, #0
 801138a:	da02      	bge.n	8011392 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801138c:	442b      	add	r3, r5
 801138e:	3801      	subs	r0, #1
 8011390:	6023      	str	r3, [r4, #0]
 8011392:	b005      	add	sp, #20
 8011394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011398:	3801      	subs	r0, #1
 801139a:	1b52      	subs	r2, r2, r5
 801139c:	e7f0      	b.n	8011380 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080113a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80113a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80113a4:	4c1c      	ldr	r4, [pc, #112]	; (8011418 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80113a6:	4605      	mov	r5, r0
 80113a8:	6807      	ldr	r7, [r0, #0]
 80113aa:	69a3      	ldr	r3, [r4, #24]
 80113ac:	b92b      	cbnz	r3, 80113ba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80113ae:	6840      	ldr	r0, [r0, #4]
 80113b0:	e9c5 7000 	strd	r7, r0, [r5]
 80113b4:	b004      	add	sp, #16
 80113b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ba:	f04f 0802 	mov.w	r8, #2
 80113be:	68a2      	ldr	r2, [r4, #8]
 80113c0:	ae04      	add	r6, sp, #16
 80113c2:	6820      	ldr	r0, [r4, #0]
 80113c4:	fb93 f1f8 	sdiv	r1, r3, r8
 80113c8:	440a      	add	r2, r1
 80113ca:	69e1      	ldr	r1, [r4, #28]
 80113cc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80113d0:	463a      	mov	r2, r7
 80113d2:	9600      	str	r6, [sp, #0]
 80113d4:	f7ff ff97 	bl	8011306 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80113d8:	69a3      	ldr	r3, [r4, #24]
 80113da:	4607      	mov	r7, r0
 80113dc:	686a      	ldr	r2, [r5, #4]
 80113de:	6a21      	ldr	r1, [r4, #32]
 80113e0:	9600      	str	r6, [sp, #0]
 80113e2:	6860      	ldr	r0, [r4, #4]
 80113e4:	f7ff ff8f 	bl	8011306 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80113e8:	69a3      	ldr	r3, [r4, #24]
 80113ea:	6962      	ldr	r2, [r4, #20]
 80113ec:	4407      	add	r7, r0
 80113ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80113f0:	9600      	str	r6, [sp, #0]
 80113f2:	68e0      	ldr	r0, [r4, #12]
 80113f4:	fb93 f8f8 	sdiv	r8, r3, r8
 80113f8:	4442      	add	r2, r8
 80113fa:	9203      	str	r2, [sp, #12]
 80113fc:	682a      	ldr	r2, [r5, #0]
 80113fe:	f7ff ff82 	bl	8011306 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011402:	4680      	mov	r8, r0
 8011404:	9600      	str	r6, [sp, #0]
 8011406:	69a3      	ldr	r3, [r4, #24]
 8011408:	686a      	ldr	r2, [r5, #4]
 801140a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801140c:	6920      	ldr	r0, [r4, #16]
 801140e:	f7ff ff7a 	bl	8011306 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011412:	4440      	add	r0, r8
 8011414:	e7cc      	b.n	80113b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8011416:	bf00      	nop
 8011418:	2400b98c 	.word	0x2400b98c

0801141c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801141c:	4b07      	ldr	r3, [pc, #28]	; (801143c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b01      	cmp	r3, #1
 8011422:	d109      	bne.n	8011438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8011424:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011428:	f9b0 2000 	ldrsh.w	r2, [r0]
 801142c:	8003      	strh	r3, [r0, #0]
 801142e:	4b04      	ldr	r3, [pc, #16]	; (8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	3b01      	subs	r3, #1
 8011434:	1a9b      	subs	r3, r3, r2
 8011436:	800b      	strh	r3, [r1, #0]
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop
 801143c:	2400b978 	.word	0x2400b978
 8011440:	2400b974 	.word	0x2400b974

08011444 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8011444:	4b07      	ldr	r3, [pc, #28]	; (8011464 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8011446:	b510      	push	{r4, lr}
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d108      	bne.n	8011460 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801144e:	4b06      	ldr	r3, [pc, #24]	; (8011468 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8011450:	880c      	ldrh	r4, [r1, #0]
 8011452:	881b      	ldrh	r3, [r3, #0]
 8011454:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011458:	3b01      	subs	r3, #1
 801145a:	1b1b      	subs	r3, r3, r4
 801145c:	8003      	strh	r3, [r0, #0]
 801145e:	800a      	strh	r2, [r1, #0]
 8011460:	bd10      	pop	{r4, pc}
 8011462:	bf00      	nop
 8011464:	2400b978 	.word	0x2400b978
 8011468:	2400b974 	.word	0x2400b974

0801146c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801146c:	4b0a      	ldr	r3, [pc, #40]	; (8011498 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801146e:	b510      	push	{r4, lr}
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	2b01      	cmp	r3, #1
 8011474:	d10e      	bne.n	8011494 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011476:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801147a:	8843      	ldrh	r3, [r0, #2]
 801147c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011480:	18ca      	adds	r2, r1, r3
 8011482:	4b06      	ldr	r3, [pc, #24]	; (801149c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011484:	8044      	strh	r4, [r0, #2]
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	1a9b      	subs	r3, r3, r2
 801148a:	8003      	strh	r3, [r0, #0]
 801148c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011490:	8081      	strh	r1, [r0, #4]
 8011492:	80c3      	strh	r3, [r0, #6]
 8011494:	bd10      	pop	{r4, pc}
 8011496:	bf00      	nop
 8011498:	2400b978 	.word	0x2400b978
 801149c:	2400b974 	.word	0x2400b974

080114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80114a0:	4b08      	ldr	r3, [pc, #32]	; (80114c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d10c      	bne.n	80114c2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80114a8:	8803      	ldrh	r3, [r0, #0]
 80114aa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80114ae:	8842      	ldrh	r2, [r0, #2]
 80114b0:	8002      	strh	r2, [r0, #0]
 80114b2:	185a      	adds	r2, r3, r1
 80114b4:	4b04      	ldr	r3, [pc, #16]	; (80114c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80114b6:	881b      	ldrh	r3, [r3, #0]
 80114b8:	1a9b      	subs	r3, r3, r2
 80114ba:	8043      	strh	r3, [r0, #2]
 80114bc:	88c3      	ldrh	r3, [r0, #6]
 80114be:	80c1      	strh	r1, [r0, #6]
 80114c0:	8083      	strh	r3, [r0, #4]
 80114c2:	4770      	bx	lr
 80114c4:	2400b978 	.word	0x2400b978
 80114c8:	2400b974 	.word	0x2400b974

080114cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80114cc:	4b07      	ldr	r3, [pc, #28]	; (80114ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80114ce:	b510      	push	{r4, lr}
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d108      	bne.n	80114e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80114d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80114da:	f9b0 4000 	ldrsh.w	r4, [r0]
 80114de:	8003      	strh	r3, [r0, #0]
 80114e0:	8893      	ldrh	r3, [r2, #4]
 80114e2:	3b01      	subs	r3, #1
 80114e4:	1b1b      	subs	r3, r3, r4
 80114e6:	800b      	strh	r3, [r1, #0]
 80114e8:	bd10      	pop	{r4, pc}
 80114ea:	bf00      	nop
 80114ec:	2400b978 	.word	0x2400b978

080114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80114f0:	4b0a      	ldr	r3, [pc, #40]	; (801151c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80114f2:	460a      	mov	r2, r1
 80114f4:	b510      	push	{r4, lr}
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d10d      	bne.n	8011518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80114fc:	8881      	ldrh	r1, [r0, #4]
 80114fe:	8803      	ldrh	r3, [r0, #0]
 8011500:	440b      	add	r3, r1
 8011502:	4601      	mov	r1, r0
 8011504:	3b01      	subs	r3, #1
 8011506:	f821 3b02 	strh.w	r3, [r1], #2
 801150a:	f7ff ffdf 	bl	80114cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801150e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011512:	88c2      	ldrh	r2, [r0, #6]
 8011514:	80c3      	strh	r3, [r0, #6]
 8011516:	8082      	strh	r2, [r0, #4]
 8011518:	bd10      	pop	{r4, pc}
 801151a:	bf00      	nop
 801151c:	2400b978 	.word	0x2400b978

08011520 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8011520:	b570      	push	{r4, r5, r6, lr}
 8011522:	2300      	movs	r3, #0
 8011524:	4c0a      	ldr	r4, [pc, #40]	; (8011550 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8011526:	4605      	mov	r5, r0
 8011528:	460e      	mov	r6, r1
 801152a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801152e:	6820      	ldr	r0, [r4, #0]
 8011530:	b110      	cbz	r0, 8011538 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8011532:	6803      	ldr	r3, [r0, #0]
 8011534:	695b      	ldr	r3, [r3, #20]
 8011536:	4798      	blx	r3
 8011538:	6026      	str	r6, [r4, #0]
 801153a:	4630      	mov	r0, r6
 801153c:	6833      	ldr	r3, [r6, #0]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	4798      	blx	r3
 8011542:	682b      	ldr	r3, [r5, #0]
 8011544:	4628      	mov	r0, r5
 8011546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801154c:	4718      	bx	r3
 801154e:	bf00      	nop
 8011550:	2400b9bc 	.word	0x2400b9bc

08011554 <_ZN8touchgfx11Application13requestRedrawEv>:
 8011554:	4b06      	ldr	r3, [pc, #24]	; (8011570 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8011556:	2100      	movs	r1, #0
 8011558:	f9b3 2000 	ldrsh.w	r2, [r3]
 801155c:	4b05      	ldr	r3, [pc, #20]	; (8011574 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801155e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8011562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011566:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801156a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801156e:	4770      	bx	lr
 8011570:	2400b974 	.word	0x2400b974
 8011574:	2400b976 	.word	0x2400b976

08011578 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8011578:	4b03      	ldr	r3, [pc, #12]	; (8011588 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801157a:	6818      	ldr	r0, [r3, #0]
 801157c:	b110      	cbz	r0, 8011584 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801157e:	6803      	ldr	r3, [r0, #0]
 8011580:	699b      	ldr	r3, [r3, #24]
 8011582:	4718      	bx	r3
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop
 8011588:	2400b9bc 	.word	0x2400b9bc

0801158c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801158c:	4770      	bx	lr
	...

08011590 <_ZN8touchgfx11Application4drawEv>:
 8011590:	4b09      	ldr	r3, [pc, #36]	; (80115b8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8011592:	b507      	push	{r0, r1, r2, lr}
 8011594:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011598:	2100      	movs	r1, #0
 801159a:	4b08      	ldr	r3, [pc, #32]	; (80115bc <_ZN8touchgfx11Application4drawEv+0x2c>)
 801159c:	9100      	str	r1, [sp, #0]
 801159e:	4669      	mov	r1, sp
 80115a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80115a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80115ac:	6803      	ldr	r3, [r0, #0]
 80115ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115b0:	4798      	blx	r3
 80115b2:	b003      	add	sp, #12
 80115b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80115b8:	2400b974 	.word	0x2400b974
 80115bc:	2400b976 	.word	0x2400b976

080115c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80115c0:	4b03      	ldr	r3, [pc, #12]	; (80115d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80115c2:	6818      	ldr	r0, [r3, #0]
 80115c4:	b110      	cbz	r0, 80115cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80115c6:	6803      	ldr	r3, [r0, #0]
 80115c8:	69db      	ldr	r3, [r3, #28]
 80115ca:	4718      	bx	r3
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	2400b9bc 	.word	0x2400b9bc

080115d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80115d4:	4b03      	ldr	r3, [pc, #12]	; (80115e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	b110      	cbz	r0, 80115e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80115da:	6803      	ldr	r3, [r0, #0]
 80115dc:	6a1b      	ldr	r3, [r3, #32]
 80115de:	4718      	bx	r3
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop
 80115e4:	2400b9bc 	.word	0x2400b9bc

080115e8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80115e8:	2300      	movs	r3, #0
 80115ea:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80115ee:	4770      	bx	lr

080115f0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80115f0:	4b03      	ldr	r3, [pc, #12]	; (8011600 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80115f2:	6818      	ldr	r0, [r3, #0]
 80115f4:	b110      	cbz	r0, 80115fc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80115f6:	6803      	ldr	r3, [r0, #0]
 80115f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115fa:	4718      	bx	r3
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop
 8011600:	2400b9bc 	.word	0x2400b9bc

08011604 <_ZN8touchgfx11Application15handleTickEventEv>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	4d32      	ldr	r5, [pc, #200]	; (80116d0 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8011608:	4604      	mov	r4, r0
 801160a:	6828      	ldr	r0, [r5, #0]
 801160c:	b140      	cbz	r0, 8011620 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801160e:	7a03      	ldrb	r3, [r0, #8]
 8011610:	b933      	cbnz	r3, 8011620 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8011612:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8011616:	6803      	ldr	r3, [r0, #0]
 8011618:	689b      	ldr	r3, [r3, #8]
 801161a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801161e:	4718      	bx	r3
 8011620:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8011624:	b97b      	cbnz	r3, 8011646 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011626:	b170      	cbz	r0, 8011646 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011628:	7a03      	ldrb	r3, [r0, #8]
 801162a:	b163      	cbz	r3, 8011646 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801162c:	4b29      	ldr	r3, [pc, #164]	; (80116d4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801162e:	6818      	ldr	r0, [r3, #0]
 8011630:	b110      	cbz	r0, 8011638 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8011632:	6803      	ldr	r3, [r0, #0]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	4798      	blx	r3
 8011638:	6828      	ldr	r0, [r5, #0]
 801163a:	6803      	ldr	r3, [r0, #0]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	4798      	blx	r3
 8011640:	2301      	movs	r3, #1
 8011642:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8011646:	2500      	movs	r5, #0
 8011648:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801164c:	42a8      	cmp	r0, r5
 801164e:	dd0c      	ble.n	801166a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8011650:	1963      	adds	r3, r4, r5
 8011652:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011656:	b132      	cbz	r2, 8011666 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8011658:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801165c:	4413      	add	r3, r2
 801165e:	6858      	ldr	r0, [r3, #4]
 8011660:	6803      	ldr	r3, [r0, #0]
 8011662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011664:	4798      	blx	r3
 8011666:	3501      	adds	r5, #1
 8011668:	e7ee      	b.n	8011648 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801166a:	2300      	movs	r3, #0
 801166c:	461a      	mov	r2, r3
 801166e:	4298      	cmp	r0, r3
 8011670:	d015      	beq.n	801169e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8011672:	18e1      	adds	r1, r4, r3
 8011674:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8011678:	b16d      	cbz	r5, 8011696 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801167a:	429a      	cmp	r2, r3
 801167c:	d00a      	beq.n	8011694 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801167e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8011682:	4431      	add	r1, r6
 8011684:	684e      	ldr	r6, [r1, #4]
 8011686:	b291      	uxth	r1, r2
 8011688:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801168c:	604e      	str	r6, [r1, #4]
 801168e:	18a1      	adds	r1, r4, r2
 8011690:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8011694:	3201      	adds	r2, #1
 8011696:	3301      	adds	r3, #1
 8011698:	e7e9      	b.n	801166e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801169a:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801169e:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 80116a2:	4295      	cmp	r5, r2
 80116a4:	dd0d      	ble.n	80116c2 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 80116a6:	1e6b      	subs	r3, r5, #1
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80116ae:	4618      	mov	r0, r3
 80116b0:	3104      	adds	r1, #4
 80116b2:	4285      	cmp	r5, r0
 80116b4:	ddf1      	ble.n	801169a <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 80116b6:	f851 6f04 	ldr.w	r6, [r1, #4]!
 80116ba:	3001      	adds	r0, #1
 80116bc:	f841 6c04 	str.w	r6, [r1, #-4]
 80116c0:	e7f7      	b.n	80116b2 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 80116c2:	4b04      	ldr	r3, [pc, #16]	; (80116d4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80116c4:	6818      	ldr	r0, [r3, #0]
 80116c6:	b110      	cbz	r0, 80116ce <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80116c8:	6803      	ldr	r3, [r0, #0]
 80116ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116cc:	e7a5      	b.n	801161a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	2400b9c0 	.word	0x2400b9c0
 80116d4:	2400b9bc 	.word	0x2400b9bc

080116d8 <_ZN8touchgfx11ApplicationD1Ev>:
 80116d8:	4770      	bx	lr

080116da <_ZN8touchgfx11ApplicationD0Ev>:
 80116da:	b510      	push	{r4, lr}
 80116dc:	4604      	mov	r4, r0
 80116de:	f44f 719c 	mov.w	r1, #312	; 0x138
 80116e2:	f00a fe06 	bl	801c2f2 <_ZdlPvj>
 80116e6:	4620      	mov	r0, r4
 80116e8:	bd10      	pop	{r4, pc}

080116ea <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80116ea:	b510      	push	{r4, lr}
 80116ec:	f9b1 4000 	ldrsh.w	r4, [r1]
 80116f0:	888a      	ldrh	r2, [r1, #4]
 80116f2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80116f6:	4422      	add	r2, r4
 80116f8:	b212      	sxth	r2, r2
 80116fa:	4293      	cmp	r3, r2
 80116fc:	da15      	bge.n	801172a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80116fe:	8882      	ldrh	r2, [r0, #4]
 8011700:	4413      	add	r3, r2
 8011702:	b21b      	sxth	r3, r3
 8011704:	429c      	cmp	r4, r3
 8011706:	da10      	bge.n	801172a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011708:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801170c:	88c9      	ldrh	r1, [r1, #6]
 801170e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011712:	4419      	add	r1, r3
 8011714:	b209      	sxth	r1, r1
 8011716:	428a      	cmp	r2, r1
 8011718:	da07      	bge.n	801172a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801171a:	88c0      	ldrh	r0, [r0, #6]
 801171c:	4410      	add	r0, r2
 801171e:	b200      	sxth	r0, r0
 8011720:	4283      	cmp	r3, r0
 8011722:	bfac      	ite	ge
 8011724:	2000      	movge	r0, #0
 8011726:	2001      	movlt	r0, #1
 8011728:	bd10      	pop	{r4, pc}
 801172a:	2000      	movs	r0, #0
 801172c:	e7fc      	b.n	8011728 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801172e <_ZN8touchgfx4Rect10restrictToEss>:
 801172e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	b510      	push	{r4, lr}
 8011736:	da04      	bge.n	8011742 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8011738:	8884      	ldrh	r4, [r0, #4]
 801173a:	4423      	add	r3, r4
 801173c:	8083      	strh	r3, [r0, #4]
 801173e:	2300      	movs	r3, #0
 8011740:	8003      	strh	r3, [r0, #0]
 8011742:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011746:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801174a:	1b09      	subs	r1, r1, r4
 801174c:	428b      	cmp	r3, r1
 801174e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011752:	bfc8      	it	gt
 8011754:	8081      	strhgt	r1, [r0, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	da04      	bge.n	8011764 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801175a:	88c1      	ldrh	r1, [r0, #6]
 801175c:	440b      	add	r3, r1
 801175e:	80c3      	strh	r3, [r0, #6]
 8011760:	2300      	movs	r3, #0
 8011762:	8043      	strh	r3, [r0, #2]
 8011764:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011768:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801176c:	1a52      	subs	r2, r2, r1
 801176e:	4293      	cmp	r3, r2
 8011770:	bfc8      	it	gt
 8011772:	80c2      	strhgt	r2, [r0, #6]
 8011774:	bd10      	pop	{r4, pc}
	...

08011778 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8011778:	4b10      	ldr	r3, [pc, #64]	; (80117bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801177a:	b510      	push	{r4, lr}
 801177c:	460c      	mov	r4, r1
 801177e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011782:	4b0f      	ldr	r3, [pc, #60]	; (80117c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8011784:	4620      	mov	r0, r4
 8011786:	f9b3 1000 	ldrsh.w	r1, [r3]
 801178a:	f7ff ffd0 	bl	801172e <_ZN8touchgfx4Rect10restrictToEss>
 801178e:	4b0d      	ldr	r3, [pc, #52]	; (80117c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8011790:	6818      	ldr	r0, [r3, #0]
 8011792:	b190      	cbz	r0, 80117ba <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8011794:	6803      	ldr	r3, [r0, #0]
 8011796:	4621      	mov	r1, r4
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	4798      	blx	r3
 801179c:	4b0a      	ldr	r3, [pc, #40]	; (80117c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801179e:	6818      	ldr	r0, [r3, #0]
 80117a0:	b118      	cbz	r0, 80117aa <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80117a2:	6803      	ldr	r3, [r0, #0]
 80117a4:	4621      	mov	r1, r4
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	4798      	blx	r3
 80117aa:	4b08      	ldr	r3, [pc, #32]	; (80117cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80117ac:	4621      	mov	r1, r4
 80117ae:	6818      	ldr	r0, [r3, #0]
 80117b0:	6803      	ldr	r3, [r0, #0]
 80117b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b6:	69db      	ldr	r3, [r3, #28]
 80117b8:	4718      	bx	r3
 80117ba:	bd10      	pop	{r4, pc}
 80117bc:	2400b976 	.word	0x2400b976
 80117c0:	2400b974 	.word	0x2400b974
 80117c4:	2400b9bc 	.word	0x2400b9bc
 80117c8:	2400b9b8 	.word	0x2400b9b8
 80117cc:	2400b980 	.word	0x2400b980

080117d0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80117d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117d2:	4606      	mov	r6, r0
 80117d4:	4608      	mov	r0, r1
 80117d6:	460f      	mov	r7, r1
 80117d8:	f7fd ff35 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 80117dc:	b9e8      	cbnz	r0, 801181a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80117de:	f9b7 5000 	ldrsh.w	r5, [r7]
 80117e2:	f9b6 4000 	ldrsh.w	r4, [r6]
 80117e6:	42a5      	cmp	r5, r4
 80117e8:	db17      	blt.n	801181a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80117ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80117ee:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	db11      	blt.n	801181a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80117f6:	88b9      	ldrh	r1, [r7, #4]
 80117f8:	440d      	add	r5, r1
 80117fa:	88b1      	ldrh	r1, [r6, #4]
 80117fc:	440c      	add	r4, r1
 80117fe:	b22d      	sxth	r5, r5
 8011800:	b224      	sxth	r4, r4
 8011802:	42a5      	cmp	r5, r4
 8011804:	dc09      	bgt.n	801181a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011806:	88f8      	ldrh	r0, [r7, #6]
 8011808:	4410      	add	r0, r2
 801180a:	88f2      	ldrh	r2, [r6, #6]
 801180c:	4413      	add	r3, r2
 801180e:	b200      	sxth	r0, r0
 8011810:	b21b      	sxth	r3, r3
 8011812:	4298      	cmp	r0, r3
 8011814:	bfcc      	ite	gt
 8011816:	2000      	movgt	r0, #0
 8011818:	2001      	movle	r0, #1
 801181a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801181c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	4604      	mov	r4, r0
 8011820:	4608      	mov	r0, r1
 8011822:	460d      	mov	r5, r1
 8011824:	f7fd ff0f 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011828:	b978      	cbnz	r0, 801184a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801182a:	4620      	mov	r0, r4
 801182c:	f7fd ff0b 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011830:	f9b5 6000 	ldrsh.w	r6, [r5]
 8011834:	b150      	cbz	r0, 801184c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8011836:	8026      	strh	r6, [r4, #0]
 8011838:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801183c:	8063      	strh	r3, [r4, #2]
 801183e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011842:	80a3      	strh	r3, [r4, #4]
 8011844:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011848:	80e3      	strh	r3, [r4, #6]
 801184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801184c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011850:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011854:	42b1      	cmp	r1, r6
 8011856:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801185a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801185e:	460f      	mov	r7, r1
 8011860:	88ed      	ldrh	r5, [r5, #6]
 8011862:	bfa8      	it	ge
 8011864:	4637      	movge	r7, r6
 8011866:	4293      	cmp	r3, r2
 8011868:	4618      	mov	r0, r3
 801186a:	4466      	add	r6, ip
 801186c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8011870:	bfa8      	it	ge
 8011872:	4610      	movge	r0, r2
 8011874:	442a      	add	r2, r5
 8011876:	88e5      	ldrh	r5, [r4, #6]
 8011878:	4461      	add	r1, ip
 801187a:	b236      	sxth	r6, r6
 801187c:	8027      	strh	r7, [r4, #0]
 801187e:	442b      	add	r3, r5
 8011880:	b209      	sxth	r1, r1
 8011882:	b212      	sxth	r2, r2
 8011884:	8060      	strh	r0, [r4, #2]
 8011886:	b21b      	sxth	r3, r3
 8011888:	428e      	cmp	r6, r1
 801188a:	bfac      	ite	ge
 801188c:	ebc7 0106 	rsbge	r1, r7, r6
 8011890:	ebc7 0101 	rsblt	r1, r7, r1
 8011894:	429a      	cmp	r2, r3
 8011896:	bfac      	ite	ge
 8011898:	ebc0 0202 	rsbge	r2, r0, r2
 801189c:	ebc0 0203 	rsblt	r2, r0, r3
 80118a0:	80a1      	strh	r1, [r4, #4]
 80118a2:	80e2      	strh	r2, [r4, #6]
 80118a4:	e7d1      	b.n	801184a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080118a8 <_ZN8touchgfx11Application11getInstanceEv>:
 80118a8:	4b01      	ldr	r3, [pc, #4]	; (80118b0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80118aa:	6818      	ldr	r0, [r3, #0]
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop
 80118b0:	2400b9cc 	.word	0x2400b9cc

080118b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80118b4:	2300      	movs	r3, #0
 80118b6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80118ba:	30a8      	adds	r0, #168	; 0xa8
 80118bc:	f820 3c24 	strh.w	r3, [r0, #-36]
 80118c0:	f802 3b01 	strb.w	r3, [r2], #1
 80118c4:	4282      	cmp	r2, r0
 80118c6:	d1fb      	bne.n	80118c0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80118c8:	4770      	bx	lr

080118ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80118ca:	4603      	mov	r3, r0
 80118cc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80118d0:	2200      	movs	r2, #0
 80118d2:	801a      	strh	r2, [r3, #0]
 80118d4:	3308      	adds	r3, #8
 80118d6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80118da:	f823 2c04 	strh.w	r2, [r3, #-4]
 80118de:	f823 2c02 	strh.w	r2, [r3, #-2]
 80118e2:	428b      	cmp	r3, r1
 80118e4:	d1f5      	bne.n	80118d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80118e6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80118ea:	4770      	bx	lr

080118ec <_ZN8touchgfx11ApplicationC1Ev>:
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	4b19      	ldr	r3, [pc, #100]	; (8011954 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80118f0:	2500      	movs	r5, #0
 80118f2:	4604      	mov	r4, r0
 80118f4:	30a8      	adds	r0, #168	; 0xa8
 80118f6:	f840 3ca8 	str.w	r3, [r0, #-168]
 80118fa:	f820 5c24 	strh.w	r5, [r0, #-36]
 80118fe:	f7ff ffe4 	bl	80118ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011902:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8011906:	f7ff ffe0 	bl	80118ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801190a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801190e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8011912:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8011916:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801191a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801191e:	490e      	ldr	r1, [pc, #56]	; (8011958 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8011920:	480e      	ldr	r0, [pc, #56]	; (801195c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8011922:	f00a fbdd 	bl	801c0e0 <CRC_Lock>
 8011926:	4e0e      	ldr	r6, [pc, #56]	; (8011960 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8011928:	4b0e      	ldr	r3, [pc, #56]	; (8011964 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801192a:	b158      	cbz	r0, 8011944 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801192c:	801d      	strh	r5, [r3, #0]
 801192e:	2300      	movs	r3, #0
 8011930:	4a0d      	ldr	r2, [pc, #52]	; (8011968 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8011932:	4620      	mov	r0, r4
 8011934:	6013      	str	r3, [r2, #0]
 8011936:	4a0d      	ldr	r2, [pc, #52]	; (801196c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8011938:	6033      	str	r3, [r6, #0]
 801193a:	6013      	str	r3, [r2, #0]
 801193c:	f7ff ffba 	bl	80118b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8011940:	4620      	mov	r0, r4
 8011942:	bd70      	pop	{r4, r5, r6, pc}
 8011944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011948:	2002      	movs	r0, #2
 801194a:	801a      	strh	r2, [r3, #0]
 801194c:	6030      	str	r0, [r6, #0]
 801194e:	f001 fa1d 	bl	8012d8c <_ZN8touchgfx6Screen4drawEv>
 8011952:	e7ec      	b.n	801192e <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8011954:	0801f20c 	.word	0x0801f20c
 8011958:	b5e8b5cd 	.word	0xb5e8b5cd
 801195c:	f407a5c2 	.word	0xf407a5c2
 8011960:	2400b9bc 	.word	0x2400b9bc
 8011964:	24000054 	.word	0x24000054
 8011968:	2400b9cc 	.word	0x2400b9cc
 801196c:	2400b9c0 	.word	0x2400b9c0

08011970 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8011970:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8011974:	3b01      	subs	r3, #1
 8011976:	b29b      	uxth	r3, r3
 8011978:	428b      	cmp	r3, r1
 801197a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801197e:	b510      	push	{r4, lr}
 8011980:	d908      	bls.n	8011994 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8011982:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011986:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8011990:	685a      	ldr	r2, [r3, #4]
 8011992:	6062      	str	r2, [r4, #4]
 8011994:	bd10      	pop	{r4, pc}
	...

08011998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8011998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801199c:	b08f      	sub	sp, #60	; 0x3c
 801199e:	4b94      	ldr	r3, [pc, #592]	; (8011bf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80119a0:	4683      	mov	fp, r0
 80119a2:	ac0a      	add	r4, sp, #40	; 0x28
 80119a4:	e884 0006 	stmia.w	r4, {r1, r2}
 80119a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80119ac:	4620      	mov	r0, r4
 80119ae:	4b91      	ldr	r3, [pc, #580]	; (8011bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 80119b0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80119b4:	f7ff febb 	bl	801172e <_ZN8touchgfx4Rect10restrictToEss>
 80119b8:	4620      	mov	r0, r4
 80119ba:	f7fd fe44 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 80119be:	2800      	cmp	r0, #0
 80119c0:	d16a      	bne.n	8011a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80119c2:	9403      	str	r4, [sp, #12]
 80119c4:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80119c8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80119cc:	2400      	movs	r4, #0
 80119ce:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80119d2:	9301      	str	r3, [sp, #4]
 80119d4:	36a0      	adds	r6, #160	; 0xa0
 80119d6:	42a5      	cmp	r5, r4
 80119d8:	d00d      	beq.n	80119f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80119da:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80119de:	9803      	ldr	r0, [sp, #12]
 80119e0:	f7ff fef6 	bl	80117d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 80119e4:	b128      	cbz	r0, 80119f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80119e6:	1e69      	subs	r1, r5, #1
 80119e8:	9801      	ldr	r0, [sp, #4]
 80119ea:	1b09      	subs	r1, r1, r4
 80119ec:	b289      	uxth	r1, r1
 80119ee:	f7ff ffbf 	bl	8011970 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80119f2:	3401      	adds	r4, #1
 80119f4:	e7ef      	b.n	80119d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80119f6:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80119fa:	1e7b      	subs	r3, r7, #1
 80119fc:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8011a00:	9704      	str	r7, [sp, #16]
 8011a02:	9302      	str	r3, [sp, #8]
 8011a04:	2400      	movs	r4, #0
 8011a06:	4655      	mov	r5, sl
 8011a08:	9705      	str	r7, [sp, #20]
 8011a0a:	4626      	mov	r6, r4
 8011a0c:	9b05      	ldr	r3, [sp, #20]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d078      	beq.n	8011b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8011a12:	9903      	ldr	r1, [sp, #12]
 8011a14:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8011a18:	f7ff fe67 	bl	80116ea <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011a1c:	b360      	cbz	r0, 8011a78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8011a1e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8011a22:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8011a26:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8011a2a:	45e6      	cmp	lr, ip
 8011a2c:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8011a30:	db35      	blt.n	8011a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8011a32:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8011a36:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8011a3a:	4472      	add	r2, lr
 8011a3c:	4463      	add	r3, ip
 8011a3e:	b212      	sxth	r2, r2
 8011a40:	b21b      	sxth	r3, r3
 8011a42:	429a      	cmp	r2, r3
 8011a44:	dc2b      	bgt.n	8011a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8011a46:	fa1f f288 	uxth.w	r2, r8
 8011a4a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8011a4e:	45c1      	cmp	r9, r8
 8011a50:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011a54:	4413      	add	r3, r2
 8011a56:	fa1f fc89 	uxth.w	ip, r9
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	fa0f fe83 	sxth.w	lr, r3
 8011a60:	db0f      	blt.n	8011a82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8011a62:	eba3 030c 	sub.w	r3, r3, ip
 8011a66:	1ac9      	subs	r1, r1, r3
 8011a68:	b209      	sxth	r1, r1
 8011a6a:	2900      	cmp	r1, #0
 8011a6c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011a70:	dd12      	ble.n	8011a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011a72:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8011a76:	4604      	mov	r4, r0
 8011a78:	9b05      	ldr	r3, [sp, #20]
 8011a7a:	3d08      	subs	r5, #8
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	9305      	str	r3, [sp, #20]
 8011a80:	e7c4      	b.n	8011a0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8011a82:	4461      	add	r1, ip
 8011a84:	b209      	sxth	r1, r1
 8011a86:	4571      	cmp	r1, lr
 8011a88:	dc3a      	bgt.n	8011b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011a8a:	eba2 020c 	sub.w	r2, r2, ip
 8011a8e:	b212      	sxth	r2, r2
 8011a90:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8011a94:	2a00      	cmp	r2, #0
 8011a96:	dcee      	bgt.n	8011a76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8011a98:	b00f      	add	sp, #60	; 0x3c
 8011a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9e:	45c1      	cmp	r9, r8
 8011aa0:	db2e      	blt.n	8011b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011aa2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8011aa6:	4499      	add	r9, r3
 8011aa8:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8011aac:	4498      	add	r8, r3
 8011aae:	fa0f f989 	sxth.w	r9, r9
 8011ab2:	fa0f f888 	sxth.w	r8, r8
 8011ab6:	45c1      	cmp	r9, r8
 8011ab8:	dc22      	bgt.n	8011b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011aba:	fa1f f28c 	uxth.w	r2, ip
 8011abe:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8011ac2:	45e6      	cmp	lr, ip
 8011ac4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8011ac8:	4413      	add	r3, r2
 8011aca:	fa1f f88e 	uxth.w	r8, lr
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	fa0f f983 	sxth.w	r9, r3
 8011ad4:	db0a      	blt.n	8011aec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8011ad6:	eba3 0308 	sub.w	r3, r3, r8
 8011ada:	1ac9      	subs	r1, r1, r3
 8011adc:	b209      	sxth	r1, r1
 8011ade:	2900      	cmp	r1, #0
 8011ae0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8011ae4:	ddd8      	ble.n	8011a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011ae6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8011aea:	e7c4      	b.n	8011a76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8011aec:	4441      	add	r1, r8
 8011aee:	b209      	sxth	r1, r1
 8011af0:	4549      	cmp	r1, r9
 8011af2:	dc05      	bgt.n	8011b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011af4:	eba2 0208 	sub.w	r2, r2, r8
 8011af8:	b212      	sxth	r2, r2
 8011afa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011afe:	e7c9      	b.n	8011a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8011b00:	4606      	mov	r6, r0
 8011b02:	e7b9      	b.n	8011a78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8011b04:	2c00      	cmp	r4, #0
 8011b06:	f47f af7d 	bne.w	8011a04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8011b0a:	2e00      	cmp	r6, #0
 8011b0c:	f000 81e1 	beq.w	8011ed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8011b10:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8011b14:	4655      	mov	r5, sl
 8011b16:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8011b1a:	b2b9      	uxth	r1, r7
 8011b1c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8011b20:	b2b3      	uxth	r3, r6
 8011b22:	9105      	str	r1, [sp, #20]
 8011b24:	9805      	ldr	r0, [sp, #20]
 8011b26:	441a      	add	r2, r3
 8011b28:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011b2c:	b292      	uxth	r2, r2
 8011b2e:	4401      	add	r1, r0
 8011b30:	fa0f f882 	sxth.w	r8, r2
 8011b34:	b289      	uxth	r1, r1
 8011b36:	9106      	str	r1, [sp, #24]
 8011b38:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8011b3c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8011b40:	9b04      	ldr	r3, [sp, #16]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d058      	beq.n	8011bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8011b46:	9903      	ldr	r1, [sp, #12]
 8011b48:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8011b4c:	f7ff fdcd 	bl	80116ea <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011b50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011b54:	b1d8      	cbz	r0, 8011b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011b56:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8011b5a:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8011b5e:	4576      	cmp	r6, lr
 8011b60:	dc26      	bgt.n	8011bb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8011b62:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8011b66:	44f4      	add	ip, lr
 8011b68:	fa0f fc8c 	sxth.w	ip, ip
 8011b6c:	45e0      	cmp	r8, ip
 8011b6e:	db1f      	blt.n	8011bb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8011b70:	428f      	cmp	r7, r1
 8011b72:	fa1f fc81 	uxth.w	ip, r1
 8011b76:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8011b7a:	dc0f      	bgt.n	8011b9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8011b7c:	9806      	ldr	r0, [sp, #24]
 8011b7e:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8011b82:	eba0 0c0c 	sub.w	ip, r0, ip
 8011b86:	eba1 010c 	sub.w	r1, r1, ip
 8011b8a:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8011b8e:	4620      	mov	r0, r4
 8011b90:	9904      	ldr	r1, [sp, #16]
 8011b92:	3d08      	subs	r5, #8
 8011b94:	4604      	mov	r4, r0
 8011b96:	3901      	subs	r1, #1
 8011b98:	9104      	str	r1, [sp, #16]
 8011b9a:	e7cf      	b.n	8011b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8011b9c:	4461      	add	r1, ip
 8011b9e:	b209      	sxth	r1, r1
 8011ba0:	4549      	cmp	r1, r9
 8011ba2:	dcf5      	bgt.n	8011b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011ba4:	9905      	ldr	r1, [sp, #20]
 8011ba6:	eba1 0c0c 	sub.w	ip, r1, ip
 8011baa:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8011bae:	e7ee      	b.n	8011b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011bb0:	428f      	cmp	r7, r1
 8011bb2:	dced      	bgt.n	8011b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011bb4:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8011bb8:	4461      	add	r1, ip
 8011bba:	b209      	sxth	r1, r1
 8011bbc:	4589      	cmp	r9, r1
 8011bbe:	dbe7      	blt.n	8011b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011bc0:	4576      	cmp	r6, lr
 8011bc2:	fa1f fc8e 	uxth.w	ip, lr
 8011bc6:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8011bca:	dc08      	bgt.n	8011bde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8011bcc:	eba2 0c0c 	sub.w	ip, r2, ip
 8011bd0:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8011bd4:	eba1 010c 	sub.w	r1, r1, ip
 8011bd8:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8011bdc:	e7d7      	b.n	8011b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011bde:	4461      	add	r1, ip
 8011be0:	b209      	sxth	r1, r1
 8011be2:	4588      	cmp	r8, r1
 8011be4:	dbd4      	blt.n	8011b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011be6:	eba3 0c0c 	sub.w	ip, r3, ip
 8011bea:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8011bee:	e7ce      	b.n	8011b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011bf0:	2400b976 	.word	0x2400b976
 8011bf4:	2400b974 	.word	0x2400b974
 8011bf8:	2c00      	cmp	r4, #0
 8011bfa:	f000 816a 	beq.w	8011ed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8011bfe:	9b02      	ldr	r3, [sp, #8]
 8011c00:	3301      	adds	r3, #1
 8011c02:	f000 8166 	beq.w	8011ed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8011c06:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8011c0a:	9803      	ldr	r0, [sp, #12]
 8011c0c:	4621      	mov	r1, r4
 8011c0e:	f7ff fddf 	bl	80117d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011c12:	b120      	cbz	r0, 8011c1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8011c14:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011c18:	9801      	ldr	r0, [sp, #4]
 8011c1a:	f7ff fea9 	bl	8011970 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011c1e:	9903      	ldr	r1, [sp, #12]
 8011c20:	4620      	mov	r0, r4
 8011c22:	f7ff fd62 	bl	80116ea <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f000 809b 	beq.w	8011d62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8011c2c:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8011c30:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8011c34:	b281      	uxth	r1, r0
 8011c36:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8011c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c3c:	eb01 0c03 	add.w	ip, r1, r3
 8011c40:	b2ab      	uxth	r3, r5
 8011c42:	4285      	cmp	r5, r0
 8011c44:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8011c48:	fa1f f98c 	uxth.w	r9, ip
 8011c4c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8011c50:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8011c54:	eb03 040c 	add.w	r4, r3, ip
 8011c58:	b2a4      	uxth	r4, r4
 8011c5a:	9405      	str	r4, [sp, #20]
 8011c5c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8011c60:	9404      	str	r4, [sp, #16]
 8011c62:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8011c66:	f340 809a 	ble.w	8011d9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8011c6a:	1a5b      	subs	r3, r3, r1
 8011c6c:	4596      	cmp	lr, r2
 8011c6e:	fa0f f589 	sxth.w	r5, r9
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	b21e      	sxth	r6, r3
 8011c76:	dd2e      	ble.n	8011cd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8011c78:	9f02      	ldr	r7, [sp, #8]
 8011c7a:	fa1f fe8e 	uxth.w	lr, lr
 8011c7e:	b292      	uxth	r2, r2
 8011c80:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8011c84:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8011c88:	9f04      	ldr	r7, [sp, #16]
 8011c8a:	ebae 0102 	sub.w	r1, lr, r2
 8011c8e:	4486      	add	lr, r0
 8011c90:	1b7f      	subs	r7, r7, r5
 8011c92:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8011c96:	b289      	uxth	r1, r1
 8011c98:	442a      	add	r2, r5
 8011c9a:	fa0f fe8e 	sxth.w	lr, lr
 8011c9e:	b20c      	sxth	r4, r1
 8011ca0:	b212      	sxth	r2, r2
 8011ca2:	4367      	muls	r7, r4
 8011ca4:	ebae 0202 	sub.w	r2, lr, r2
 8011ca8:	4372      	muls	r2, r6
 8011caa:	4297      	cmp	r7, r2
 8011cac:	db09      	blt.n	8011cc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8011cae:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8011cb2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8011cb6:	449c      	add	ip, r3
 8011cb8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8011cbc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8011cc0:	e680      	b.n	80119c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011cc2:	4401      	add	r1, r0
 8011cc4:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8011cc8:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8011ccc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011cd0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011cd4:	e676      	b.n	80119c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011cd6:	9f04      	ldr	r7, [sp, #16]
 8011cd8:	42bd      	cmp	r5, r7
 8011cda:	da27      	bge.n	8011d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8011cdc:	9902      	ldr	r1, [sp, #8]
 8011cde:	1b7f      	subs	r7, r7, r5
 8011ce0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8011ce4:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8011ce8:	eb04 010e 	add.w	r1, r4, lr
 8011cec:	fa1f f881 	uxth.w	r8, r1
 8011cf0:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8011cf4:	4411      	add	r1, r2
 8011cf6:	fa0f f988 	sxth.w	r9, r8
 8011cfa:	eba2 020e 	sub.w	r2, r2, lr
 8011cfe:	eba1 0108 	sub.w	r1, r1, r8
 8011d02:	4372      	muls	r2, r6
 8011d04:	b289      	uxth	r1, r1
 8011d06:	fa0f f881 	sxth.w	r8, r1
 8011d0a:	fb08 f707 	mul.w	r7, r8, r7
 8011d0e:	42ba      	cmp	r2, r7
 8011d10:	dc06      	bgt.n	8011d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8011d12:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8011d16:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8011d1a:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8011d1e:	e7ca      	b.n	8011cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8011d20:	4421      	add	r1, r4
 8011d22:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8011d26:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011d2a:	e64b      	b.n	80119c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011d2c:	9d05      	ldr	r5, [sp, #20]
 8011d2e:	2c06      	cmp	r4, #6
 8011d30:	eba9 0505 	sub.w	r5, r9, r5
 8011d34:	b2ad      	uxth	r5, r5
 8011d36:	fa0f fe85 	sxth.w	lr, r5
 8011d3a:	d818      	bhi.n	8011d6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8011d3c:	9b04      	ldr	r3, [sp, #16]
 8011d3e:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8011d42:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8011d46:	1c63      	adds	r3, r4, #1
 8011d48:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8011d4c:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8011d50:	9b01      	ldr	r3, [sp, #4]
 8011d52:	9d01      	ldr	r5, [sp, #4]
 8011d54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d58:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8011d5c:	805a      	strh	r2, [r3, #2]
 8011d5e:	809e      	strh	r6, [r3, #4]
 8011d60:	80d9      	strh	r1, [r3, #6]
 8011d62:	9b02      	ldr	r3, [sp, #8]
 8011d64:	f1aa 0a08 	sub.w	sl, sl, #8
 8011d68:	3b01      	subs	r3, #1
 8011d6a:	9302      	str	r3, [sp, #8]
 8011d6c:	e747      	b.n	8011bfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8011d6e:	9a02      	ldr	r2, [sp, #8]
 8011d70:	45b6      	cmp	lr, r6
 8011d72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011d76:	db0d      	blt.n	8011d94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8011d78:	449c      	add	ip, r3
 8011d7a:	445a      	add	r2, fp
 8011d7c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8011d80:	fa1f fc8c 	uxth.w	ip, ip
 8011d84:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8011d88:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8011d8c:	448c      	add	ip, r1
 8011d8e:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8011d92:	e617      	b.n	80119c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011d94:	445a      	add	r2, fp
 8011d96:	44ac      	add	ip, r5
 8011d98:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8011d9c:	e78e      	b.n	8011cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8011d9e:	fa1f f18e 	uxth.w	r1, lr
 8011da2:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8011da6:	b293      	uxth	r3, r2
 8011da8:	4596      	cmp	lr, r2
 8011daa:	eb01 0806 	add.w	r8, r1, r6
 8011dae:	9306      	str	r3, [sp, #24]
 8011db0:	fa1f f888 	uxth.w	r8, r8
 8011db4:	9f06      	ldr	r7, [sp, #24]
 8011db6:	fa0f f388 	sxth.w	r3, r8
 8011dba:	9307      	str	r3, [sp, #28]
 8011dbc:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8011dc0:	443b      	add	r3, r7
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	9308      	str	r3, [sp, #32]
 8011dc6:	da25      	bge.n	8011e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8011dc8:	9905      	ldr	r1, [sp, #20]
 8011dca:	eba3 0308 	sub.w	r3, r3, r8
 8011dce:	eba2 020e 	sub.w	r2, r2, lr
 8011dd2:	1b40      	subs	r0, r0, r5
 8011dd4:	eba9 0401 	sub.w	r4, r9, r1
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	b2a4      	uxth	r4, r4
 8011ddc:	b219      	sxth	r1, r3
 8011dde:	fa0f f984 	sxth.w	r9, r4
 8011de2:	4348      	muls	r0, r1
 8011de4:	fb09 f202 	mul.w	r2, r9, r2
 8011de8:	4282      	cmp	r2, r0
 8011dea:	9a02      	ldr	r2, [sp, #8]
 8011dec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011df0:	445a      	add	r2, fp
 8011df2:	dc06      	bgt.n	8011e02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8011df4:	9b07      	ldr	r3, [sp, #28]
 8011df6:	44a4      	add	ip, r4
 8011df8:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8011dfc:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8011e00:	e75c      	b.n	8011cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8011e02:	9904      	ldr	r1, [sp, #16]
 8011e04:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8011e08:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8011e0c:	4433      	add	r3, r6
 8011e0e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011e12:	e5d7      	b.n	80119c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011e14:	9f06      	ldr	r7, [sp, #24]
 8011e16:	9b04      	ldr	r3, [sp, #16]
 8011e18:	1bc9      	subs	r1, r1, r7
 8011e1a:	fa0f f789 	sxth.w	r7, r9
 8011e1e:	b289      	uxth	r1, r1
 8011e20:	429f      	cmp	r7, r3
 8011e22:	fa0f fe81 	sxth.w	lr, r1
 8011e26:	dd22      	ble.n	8011e6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8011e28:	9a05      	ldr	r2, [sp, #20]
 8011e2a:	1b40      	subs	r0, r0, r5
 8011e2c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011e30:	eba9 0202 	sub.w	r2, r9, r2
 8011e34:	9d07      	ldr	r5, [sp, #28]
 8011e36:	fb0e f000 	mul.w	r0, lr, r0
 8011e3a:	b292      	uxth	r2, r2
 8011e3c:	eba5 0a03 	sub.w	sl, r5, r3
 8011e40:	9b02      	ldr	r3, [sp, #8]
 8011e42:	b214      	sxth	r4, r2
 8011e44:	00db      	lsls	r3, r3, #3
 8011e46:	fb04 fa0a 	mul.w	sl, r4, sl
 8011e4a:	445b      	add	r3, fp
 8011e4c:	4550      	cmp	r0, sl
 8011e4e:	db03      	blt.n	8011e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8011e50:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8011e54:	4494      	add	ip, r2
 8011e56:	e731      	b.n	8011cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8011e58:	9a04      	ldr	r2, [sp, #16]
 8011e5a:	4431      	add	r1, r6
 8011e5c:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8011e60:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8011e64:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8011e68:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011e6c:	e75b      	b.n	8011d26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8011e6e:	9b08      	ldr	r3, [sp, #32]
 8011e70:	2c06      	cmp	r4, #6
 8011e72:	eba3 0308 	sub.w	r3, r3, r8
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	b21d      	sxth	r5, r3
 8011e7a:	d813      	bhi.n	8011ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8011e7c:	9b07      	ldr	r3, [sp, #28]
 8011e7e:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8011e82:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8011e86:	1c63      	adds	r3, r4, #1
 8011e88:	9901      	ldr	r1, [sp, #4]
 8011e8a:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8011e8e:	9b01      	ldr	r3, [sp, #4]
 8011e90:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8011e94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e98:	805a      	strh	r2, [r3, #2]
 8011e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e9c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8011ea0:	809a      	strh	r2, [r3, #4]
 8011ea2:	e75e      	b.n	8011d62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8011ea4:	9802      	ldr	r0, [sp, #8]
 8011ea6:	4575      	cmp	r5, lr
 8011ea8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8011eac:	db0d      	blt.n	8011eca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8011eae:	4431      	add	r1, r6
 8011eb0:	9b06      	ldr	r3, [sp, #24]
 8011eb2:	4458      	add	r0, fp
 8011eb4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8011eb8:	b289      	uxth	r1, r1
 8011eba:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8011ebe:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011ec2:	4419      	add	r1, r3
 8011ec4:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8011ec8:	e57c      	b.n	80119c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011eca:	4458      	add	r0, fp
 8011ecc:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8011ed0:	e79c      	b.n	8011e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8011ed2:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8011ed6:	2e07      	cmp	r6, #7
 8011ed8:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8011edc:	d812      	bhi.n	8011f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8011ede:	1c75      	adds	r5, r6, #1
 8011ee0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8011ee4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8011ee8:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8011eec:	9d01      	ldr	r5, [sp, #4]
 8011eee:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8011ef2:	442c      	add	r4, r5
 8011ef4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8011ef8:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8011efc:	8061      	strh	r1, [r4, #2]
 8011efe:	80a2      	strh	r2, [r4, #4]
 8011f00:	80e3      	strh	r3, [r4, #6]
 8011f02:	e5c9      	b.n	8011a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011f04:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8011f08:	3e01      	subs	r6, #1
 8011f0a:	445c      	add	r4, fp
 8011f0c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011f10:	f04f 37ff 	mov.w	r7, #4294967295
 8011f14:	2500      	movs	r5, #0
 8011f16:	9305      	str	r3, [sp, #20]
 8011f18:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8011f1c:	1e72      	subs	r2, r6, #1
 8011f1e:	9302      	str	r3, [sp, #8]
 8011f20:	4691      	mov	r9, r2
 8011f22:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8011f26:	9304      	str	r3, [sp, #16]
 8011f28:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8011f2c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8011f30:	6818      	ldr	r0, [r3, #0]
 8011f32:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011f36:	9207      	str	r2, [sp, #28]
 8011f38:	bf16      	itet	ne
 8011f3a:	9905      	ldrne	r1, [sp, #20]
 8011f3c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8011f40:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8011f44:	9306      	str	r3, [sp, #24]
 8011f46:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8011f4a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8011f4e:	fb18 f801 	smulbb	r8, r8, r1
 8011f52:	6859      	ldr	r1, [r3, #4]
 8011f54:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011f58:	4671      	mov	r1, lr
 8011f5a:	a80c      	add	r0, sp, #48	; 0x30
 8011f5c:	f7ff fc5e 	bl	801181c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011f60:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8011f64:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8011f68:	f04f 0c08 	mov.w	ip, #8
 8011f6c:	9b04      	ldr	r3, [sp, #16]
 8011f6e:	9a02      	ldr	r2, [sp, #8]
 8011f70:	fb10 f001 	smulbb	r0, r0, r1
 8011f74:	fb02 8803 	mla	r8, r2, r3, r8
 8011f78:	eba0 0108 	sub.w	r1, r0, r8
 8011f7c:	fb90 f0fc 	sdiv	r0, r0, ip
 8011f80:	4288      	cmp	r0, r1
 8011f82:	dc20      	bgt.n	8011fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8011f84:	4551      	cmp	r1, sl
 8011f86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011f8a:	da03      	bge.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8011f8c:	b1d9      	cbz	r1, 8011fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8011f8e:	468a      	mov	sl, r1
 8011f90:	464f      	mov	r7, r9
 8011f92:	4635      	mov	r5, r6
 8011f94:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f98:	f119 0f02 	cmn.w	r9, #2
 8011f9c:	d1c6      	bne.n	8011f2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8011f9e:	4616      	mov	r6, r2
 8011fa0:	3201      	adds	r2, #1
 8011fa2:	f1a4 0408 	sub.w	r4, r4, #8
 8011fa6:	d1b7      	bne.n	8011f18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8011fa8:	9b01      	ldr	r3, [sp, #4]
 8011faa:	b2ac      	uxth	r4, r5
 8011fac:	00ed      	lsls	r5, r5, #3
 8011fae:	1958      	adds	r0, r3, r5
 8011fb0:	1c7b      	adds	r3, r7, #1
 8011fb2:	d10b      	bne.n	8011fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8011fb4:	4601      	mov	r1, r0
 8011fb6:	9803      	ldr	r0, [sp, #12]
 8011fb8:	f7ff fc30 	bl	801181c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	9801      	ldr	r0, [sp, #4]
 8011fc0:	f7ff fcd6 	bl	8011970 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011fc4:	e4fe      	b.n	80119c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011fc6:	464f      	mov	r7, r9
 8011fc8:	4635      	mov	r5, r6
 8011fca:	e7ed      	b.n	8011fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8011fcc:	9b01      	ldr	r3, [sp, #4]
 8011fce:	00ff      	lsls	r7, r7, #3
 8011fd0:	445d      	add	r5, fp
 8011fd2:	19d9      	adds	r1, r3, r7
 8011fd4:	445f      	add	r7, fp
 8011fd6:	f7ff fc21 	bl	801181c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011fda:	9b03      	ldr	r3, [sp, #12]
 8011fdc:	cb03      	ldmia	r3!, {r0, r1}
 8011fde:	9b03      	ldr	r3, [sp, #12]
 8011fe0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8011fe4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8011fe8:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8011fec:	6869      	ldr	r1, [r5, #4]
 8011fee:	c303      	stmia	r3!, {r0, r1}
 8011ff0:	e7e4      	b.n	8011fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8011ff2:	bf00      	nop

08011ff4 <_ZN8touchgfx11Application10invalidateEv>:
 8011ff4:	4b09      	ldr	r3, [pc, #36]	; (801201c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	2100      	movs	r1, #0
 8011ffa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ffe:	4b08      	ldr	r3, [pc, #32]	; (8012020 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8012000:	9100      	str	r1, [sp, #0]
 8012002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012006:	f8ad 2004 	strh.w	r2, [sp, #4]
 801200a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801200e:	ab02      	add	r3, sp, #8
 8012010:	e913 0006 	ldmdb	r3, {r1, r2}
 8012014:	b002      	add	sp, #8
 8012016:	f7ff bcbf 	b.w	8011998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801201a:	bf00      	nop
 801201c:	2400b974 	.word	0x2400b974
 8012020:	2400b976 	.word	0x2400b976

08012024 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012028:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801202c:	b09b      	sub	sp, #108	; 0x6c
 801202e:	4604      	mov	r4, r0
 8012030:	4630      	mov	r0, r6
 8012032:	f7fd fb08 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012036:	4605      	mov	r5, r0
 8012038:	b940      	cbnz	r0, 801204c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801203a:	4620      	mov	r0, r4
 801203c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012040:	f7ff fcaa 	bl	8011998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012044:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8012048:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801204c:	4bc8      	ldr	r3, [pc, #800]	; (8012370 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d03e      	beq.n	80120d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012054:	4dc7      	ldr	r5, [pc, #796]	; (8012374 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012056:	4628      	mov	r0, r5
 8012058:	f7fd faf5 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 801205c:	4606      	mov	r6, r0
 801205e:	2800      	cmp	r0, #0
 8012060:	d137      	bne.n	80120d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012062:	4628      	mov	r0, r5
 8012064:	f7ff fa02 	bl	801146c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012068:	6829      	ldr	r1, [r5, #0]
 801206a:	686a      	ldr	r2, [r5, #4]
 801206c:	4620      	mov	r0, r4
 801206e:	f7ff fc93 	bl	8011998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012072:	802e      	strh	r6, [r5, #0]
 8012074:	806e      	strh	r6, [r5, #2]
 8012076:	80ae      	strh	r6, [r5, #4]
 8012078:	80ee      	strh	r6, [r5, #6]
 801207a:	ae09      	add	r6, sp, #36	; 0x24
 801207c:	4630      	mov	r0, r6
 801207e:	f7ff fc24 	bl	80118ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012082:	4abd      	ldr	r2, [pc, #756]	; (8012378 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012084:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8012088:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801208c:	8815      	ldrh	r5, [r2, #0]
 801208e:	9202      	str	r2, [sp, #8]
 8012090:	462b      	mov	r3, r5
 8012092:	429f      	cmp	r7, r3
 8012094:	d924      	bls.n	80120e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8012096:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801209a:	2907      	cmp	r1, #7
 801209c:	d816      	bhi.n	80120cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801209e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80120a2:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80120a6:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80120aa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80120ae:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80120b2:	1c4a      	adds	r2, r1, #1
 80120b4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80120b8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80120bc:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80120c0:	f8a2 9002 	strh.w	r9, [r2, #2]
 80120c4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80120c8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80120cc:	3301      	adds	r3, #1
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	e7df      	b.n	8012092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80120d2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d1cf      	bne.n	801207a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80120da:	b01b      	add	sp, #108	; 0x6c
 80120dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e0:	462f      	mov	r7, r5
 80120e2:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80120e6:	42bb      	cmp	r3, r7
 80120e8:	d90b      	bls.n	8012102 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80120ea:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80120ee:	3701      	adds	r7, #1
 80120f0:	4620      	mov	r0, r4
 80120f2:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80120f6:	b2bf      	uxth	r7, r7
 80120f8:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80120fc:	f7ff fc4c 	bl	8011998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012100:	e7ef      	b.n	80120e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8012102:	4a9e      	ldr	r2, [pc, #632]	; (801237c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8012104:	6813      	ldr	r3, [r2, #0]
 8012106:	4690      	mov	r8, r2
 8012108:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801210c:	2b01      	cmp	r3, #1
 801210e:	f040 80e4 	bne.w	80122da <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8012112:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8012116:	4629      	mov	r1, r5
 8012118:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801211c:	2500      	movs	r5, #0
 801211e:	33aa      	adds	r3, #170	; 0xaa
 8012120:	428f      	cmp	r7, r1
 8012122:	f103 0308 	add.w	r3, r3, #8
 8012126:	dd0a      	ble.n	801213e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8012128:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801212c:	3101      	adds	r1, #1
 801212e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8012132:	4402      	add	r2, r0
 8012134:	b212      	sxth	r2, r2
 8012136:	4295      	cmp	r5, r2
 8012138:	bfb8      	it	lt
 801213a:	4615      	movlt	r5, r2
 801213c:	e7f0      	b.n	8012120 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801213e:	4b90      	ldr	r3, [pc, #576]	; (8012380 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8012140:	f8df b238 	ldr.w	fp, [pc, #568]	; 801237c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8012144:	881b      	ldrh	r3, [r3, #0]
 8012146:	46d8      	mov	r8, fp
 8012148:	2b0f      	cmp	r3, #15
 801214a:	bf8c      	ite	hi
 801214c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8012150:	f04f 0a01 	movls.w	sl, #1
 8012154:	2300      	movs	r3, #0
 8012156:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801215a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801215e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012162:	4438      	add	r0, r7
 8012164:	b207      	sxth	r7, r0
 8012166:	f8db 0000 	ldr.w	r0, [fp]
 801216a:	42bd      	cmp	r5, r7
 801216c:	6803      	ldr	r3, [r0, #0]
 801216e:	f340 8084 	ble.w	801227a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8012172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012176:	4798      	blx	r3
 8012178:	eb07 030a 	add.w	r3, r7, sl
 801217c:	4298      	cmp	r0, r3
 801217e:	da07      	bge.n	8012190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012180:	4285      	cmp	r5, r0
 8012182:	dd05      	ble.n	8012190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012184:	4287      	cmp	r7, r0
 8012186:	dd6d      	ble.n	8012264 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012188:	2f00      	cmp	r7, #0
 801218a:	dd6b      	ble.n	8012264 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801218c:	4628      	mov	r0, r5
 801218e:	e004      	b.n	801219a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8012190:	4287      	cmp	r7, r0
 8012192:	dcfb      	bgt.n	801218c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8012194:	42a8      	cmp	r0, r5
 8012196:	bfa8      	it	ge
 8012198:	4628      	movge	r0, r5
 801219a:	4b7a      	ldr	r3, [pc, #488]	; (8012384 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801219c:	1bc0      	subs	r0, r0, r7
 801219e:	2200      	movs	r2, #0
 80121a0:	f8ad 7016 	strh.w	r7, [sp, #22]
 80121a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80121ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 80121b0:	9b02      	ldr	r3, [sp, #8]
 80121b2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80121b6:	881f      	ldrh	r7, [r3, #0]
 80121b8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80121bc:	42bb      	cmp	r3, r7
 80121be:	d9cc      	bls.n	801215a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80121c0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80121c4:	ab07      	add	r3, sp, #28
 80121c6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80121ca:	6851      	ldr	r1, [r2, #4]
 80121cc:	c303      	stmia	r3!, {r0, r1}
 80121ce:	a905      	add	r1, sp, #20
 80121d0:	a807      	add	r0, sp, #28
 80121d2:	f7ff fa8a 	bl	80116ea <_ZNK8touchgfx4Rect9intersectERKS0_>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d04c      	beq.n	8012274 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80121da:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80121de:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80121e2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80121e6:	4686      	mov	lr, r0
 80121e8:	4290      	cmp	r0, r2
 80121ea:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80121ee:	4448      	add	r0, r9
 80121f0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80121f4:	bfb8      	it	lt
 80121f6:	4696      	movlt	lr, r2
 80121f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80121fc:	444a      	add	r2, r9
 80121fe:	b280      	uxth	r0, r0
 8012200:	4299      	cmp	r1, r3
 8012202:	468c      	mov	ip, r1
 8012204:	b292      	uxth	r2, r2
 8012206:	9303      	str	r3, [sp, #12]
 8012208:	bfb8      	it	lt
 801220a:	469c      	movlt	ip, r3
 801220c:	b203      	sxth	r3, r0
 801220e:	fa0f f982 	sxth.w	r9, r2
 8012212:	f8ad e01c 	strh.w	lr, [sp, #28]
 8012216:	f8ad c01e 	strh.w	ip, [sp, #30]
 801221a:	454b      	cmp	r3, r9
 801221c:	bfb8      	it	lt
 801221e:	4602      	movlt	r2, r0
 8012220:	9b03      	ldr	r3, [sp, #12]
 8012222:	eba2 020e 	sub.w	r2, r2, lr
 8012226:	f8ad 2020 	strh.w	r2, [sp, #32]
 801222a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801222e:	4411      	add	r1, r2
 8012230:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012234:	4413      	add	r3, r2
 8012236:	b289      	uxth	r1, r1
 8012238:	b29b      	uxth	r3, r3
 801223a:	b208      	sxth	r0, r1
 801223c:	b21a      	sxth	r2, r3
 801223e:	4290      	cmp	r0, r2
 8012240:	bfb8      	it	lt
 8012242:	460b      	movlt	r3, r1
 8012244:	eba3 030c 	sub.w	r3, r3, ip
 8012248:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801224c:	a807      	add	r0, sp, #28
 801224e:	f7fd f9fa 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012252:	b920      	cbnz	r0, 801225e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	a907      	add	r1, sp, #28
 8012258:	4620      	mov	r0, r4
 801225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801225c:	4798      	blx	r3
 801225e:	3701      	adds	r7, #1
 8012260:	b2bf      	uxth	r7, r7
 8012262:	e7a9      	b.n	80121b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8012264:	f8d8 0000 	ldr.w	r0, [r8]
 8012268:	2101      	movs	r1, #1
 801226a:	6803      	ldr	r3, [r0, #0]
 801226c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012270:	4798      	blx	r3
 8012272:	e772      	b.n	801215a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012274:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012278:	e7e8      	b.n	801224c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801227c:	4798      	blx	r3
 801227e:	4b42      	ldr	r3, [pc, #264]	; (8012388 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	f43f af29 	beq.w	80120da <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8012288:	2300      	movs	r3, #0
 801228a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801228e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8012292:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8012296:	9b02      	ldr	r3, [sp, #8]
 8012298:	881b      	ldrh	r3, [r3, #0]
 801229a:	429d      	cmp	r5, r3
 801229c:	f67f af1d 	bls.w	80120da <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80122a0:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 80122a4:	2907      	cmp	r1, #7
 80122a6:	d815      	bhi.n	80122d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80122a8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80122ac:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80122b0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80122b4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80122b8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80122bc:	1c4a      	adds	r2, r1, #1
 80122be:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 80122c2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80122c6:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80122ca:	f8a2 e002 	strh.w	lr, [r2, #2]
 80122ce:	f8a2 c004 	strh.w	ip, [r2, #4]
 80122d2:	80d7      	strh	r7, [r2, #6]
 80122d4:	3301      	adds	r3, #1
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	e7df      	b.n	801229a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 80122da:	2b02      	cmp	r3, #2
 80122dc:	f040 8135 	bne.w	801254a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80122e0:	4b2a      	ldr	r3, [pc, #168]	; (801238c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80122e2:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	f000 809c 	beq.w	8012426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80122ee:	9b02      	ldr	r3, [sp, #8]
 80122f0:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 80122f4:	f8b3 b000 	ldrh.w	fp, [r3]
 80122f8:	f10b 0b01 	add.w	fp, fp, #1
 80122fc:	fa1f fb8b 	uxth.w	fp, fp
 8012300:	2a00      	cmp	r2, #0
 8012302:	d0bc      	beq.n	801227e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012304:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8012308:	4659      	mov	r1, fp
 801230a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801230e:	f04f 0800 	mov.w	r8, #0
 8012312:	441d      	add	r5, r3
 8012314:	b22d      	sxth	r5, r5
 8012316:	b28b      	uxth	r3, r1
 8012318:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801231c:	429a      	cmp	r2, r3
 801231e:	f240 80c0 	bls.w	80124a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8012322:	4427      	add	r7, r4
 8012324:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8012328:	4608      	mov	r0, r1
 801232a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801232e:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8012332:	4563      	cmp	r3, ip
 8012334:	f340 80a2 	ble.w	801247c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8012338:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801233c:	4465      	add	r5, ip
 801233e:	b22d      	sxth	r5, r5
 8012340:	429d      	cmp	r5, r3
 8012342:	bfa8      	it	ge
 8012344:	461d      	movge	r5, r3
 8012346:	3101      	adds	r1, #1
 8012348:	4680      	mov	r8, r0
 801234a:	e7e4      	b.n	8012316 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801234c:	d10b      	bne.n	8012366 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801234e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8012352:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8012356:	458c      	cmp	ip, r1
 8012358:	bfb4      	ite	lt
 801235a:	469c      	movlt	ip, r3
 801235c:	46bc      	movge	ip, r7
 801235e:	4572      	cmp	r2, lr
 8012360:	bfb8      	it	lt
 8012362:	4672      	movlt	r2, lr
 8012364:	e087      	b.n	8012476 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8012366:	428a      	cmp	r2, r1
 8012368:	46bc      	mov	ip, r7
 801236a:	bfb8      	it	lt
 801236c:	460a      	movlt	r2, r1
 801236e:	e082      	b.n	8012476 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8012370:	2400b9b8 	.word	0x2400b9b8
 8012374:	2400b9c4 	.word	0x2400b9c4
 8012378:	24000054 	.word	0x24000054
 801237c:	2400b980 	.word	0x2400b980
 8012380:	2400b976 	.word	0x2400b976
 8012384:	2400b974 	.word	0x2400b974
 8012388:	2400b97e 	.word	0x2400b97e
 801238c:	2400b978 	.word	0x2400b978
 8012390:	1961      	adds	r1, r4, r5
 8012392:	ab07      	add	r3, sp, #28
 8012394:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8012398:	6849      	ldr	r1, [r1, #4]
 801239a:	c303      	stmia	r3!, {r0, r1}
 801239c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80123a0:	a807      	add	r0, sp, #28
 80123a2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80123a6:	2b13      	cmp	r3, #19
 80123a8:	440b      	add	r3, r1
 80123aa:	bfd8      	it	le
 80123ac:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80123b0:	1a9b      	subs	r3, r3, r2
 80123b2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80123b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80123ba:	f7ff f871 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123be:	a807      	add	r0, sp, #28
 80123c0:	f7fd f941 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 80123c4:	bb78      	cbnz	r0, 8012426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80123c6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80123ca:	4425      	add	r5, r4
 80123cc:	f8d8 0000 	ldr.w	r0, [r8]
 80123d0:	f1bc 0f14 	cmp.w	ip, #20
 80123d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80123d8:	f8d0 e000 	ldr.w	lr, [r0]
 80123dc:	bfa8      	it	ge
 80123de:	f04f 0c14 	movge.w	ip, #20
 80123e2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80123e6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80123ea:	fa1f fc8c 	uxth.w	ip, ip
 80123ee:	f8cd c000 	str.w	ip, [sp]
 80123f2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80123f6:	47d0      	blx	sl
 80123f8:	4682      	mov	sl, r0
 80123fa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80123fe:	a807      	add	r0, sp, #28
 8012400:	f7ff f834 	bl	801146c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012404:	6823      	ldr	r3, [r4, #0]
 8012406:	4620      	mov	r0, r4
 8012408:	a907      	add	r1, sp, #28
 801240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801240c:	4798      	blx	r3
 801240e:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8012412:	eba0 000a 	sub.w	r0, r0, sl
 8012416:	b200      	sxth	r0, r0
 8012418:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801241c:	b918      	cbnz	r0, 8012426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801241e:	b2b9      	uxth	r1, r7
 8012420:	4648      	mov	r0, r9
 8012422:	f7ff faa5 	bl	8011970 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012426:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801242a:	f1bb 0f00 	cmp.w	fp, #0
 801242e:	f43f af26 	beq.w	801227e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012432:	9b02      	ldr	r3, [sp, #8]
 8012434:	2700      	movs	r7, #0
 8012436:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801243a:	881b      	ldrh	r3, [r3, #0]
 801243c:	3301      	adds	r3, #1
 801243e:	b29b      	uxth	r3, r3
 8012440:	b299      	uxth	r1, r3
 8012442:	00fd      	lsls	r5, r7, #3
 8012444:	458b      	cmp	fp, r1
 8012446:	d9a3      	bls.n	8012390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8012448:	4425      	add	r5, r4
 801244a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801244e:	469c      	mov	ip, r3
 8012450:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8012454:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8012458:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801245c:	4408      	add	r0, r1
 801245e:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8012462:	4471      	add	r1, lr
 8012464:	b200      	sxth	r0, r0
 8012466:	b209      	sxth	r1, r1
 8012468:	4288      	cmp	r0, r1
 801246a:	f6bf af6f 	bge.w	801234c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801246e:	4586      	cmp	lr, r0
 8012470:	4672      	mov	r2, lr
 8012472:	bfb8      	it	lt
 8012474:	4602      	movlt	r2, r0
 8012476:	3301      	adds	r3, #1
 8012478:	4667      	mov	r7, ip
 801247a:	e7e1      	b.n	8012440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801247c:	d10c      	bne.n	8012498 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801247e:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8012482:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8012486:	4287      	cmp	r7, r0
 8012488:	bfb4      	ite	lt
 801248a:	4608      	movlt	r0, r1
 801248c:	4640      	movge	r0, r8
 801248e:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8012492:	443b      	add	r3, r7
 8012494:	b21b      	sxth	r3, r3
 8012496:	e753      	b.n	8012340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8012498:	4565      	cmp	r5, ip
 801249a:	4640      	mov	r0, r8
 801249c:	bfa8      	it	ge
 801249e:	4665      	movge	r5, ip
 80124a0:	e751      	b.n	8012346 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 80124a2:	eb09 0007 	add.w	r0, r9, r7
 80124a6:	4427      	add	r7, r4
 80124a8:	9203      	str	r2, [sp, #12]
 80124aa:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 80124ae:	f1ba 0f13 	cmp.w	sl, #19
 80124b2:	bfde      	ittt	le
 80124b4:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 80124b8:	4455      	addle	r5, sl
 80124ba:	b22d      	sxthle	r5, r5
 80124bc:	f7fd f8c3 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 80124c0:	9a03      	ldr	r2, [sp, #12]
 80124c2:	2800      	cmp	r0, #0
 80124c4:	f47f af1c 	bne.w	8012300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 80124c8:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 80124cc:	fa1f fa8a 	uxth.w	sl, sl
 80124d0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80124d4:	1aad      	subs	r5, r5, r2
 80124d6:	4829      	ldr	r0, [pc, #164]	; (801257c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 80124d8:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 80124dc:	2d14      	cmp	r5, #20
 80124de:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80124e2:	6800      	ldr	r0, [r0, #0]
 80124e4:	bfa8      	it	ge
 80124e6:	2514      	movge	r5, #20
 80124e8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80124ec:	f8ad 201e 	strh.w	r2, [sp, #30]
 80124f0:	b289      	uxth	r1, r1
 80124f2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80124f6:	b2ad      	uxth	r5, r5
 80124f8:	f8d0 c000 	ldr.w	ip, [r0]
 80124fc:	b292      	uxth	r2, r2
 80124fe:	4555      	cmp	r5, sl
 8012500:	bf94      	ite	ls
 8012502:	9500      	strls	r5, [sp, #0]
 8012504:	f8cd a000 	strhi.w	sl, [sp]
 8012508:	b29b      	uxth	r3, r3
 801250a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801250e:	47a8      	blx	r5
 8012510:	6823      	ldr	r3, [r4, #0]
 8012512:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012516:	a907      	add	r1, sp, #28
 8012518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801251a:	4620      	mov	r0, r4
 801251c:	4798      	blx	r3
 801251e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012522:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8012526:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801252a:	1a5b      	subs	r3, r3, r1
 801252c:	440a      	add	r2, r1
 801252e:	b21b      	sxth	r3, r3
 8012530:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8012534:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8012538:	2b00      	cmp	r3, #0
 801253a:	f47f aed8 	bne.w	80122ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801253e:	fa1f f188 	uxth.w	r1, r8
 8012542:	4648      	mov	r0, r9
 8012544:	f7ff fa14 	bl	8011970 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012548:	e6d1      	b.n	80122ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801254a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801254e:	42ab      	cmp	r3, r5
 8012550:	f67f ae95 	bls.w	801227e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012554:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8012558:	ab07      	add	r3, sp, #28
 801255a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801255e:	6851      	ldr	r1, [r2, #4]
 8012560:	c303      	stmia	r3!, {r0, r1}
 8012562:	a807      	add	r0, sp, #28
 8012564:	f7fd f86f 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012568:	b920      	cbnz	r0, 8012574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	a907      	add	r1, sp, #28
 801256e:	4620      	mov	r0, r4
 8012570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012572:	4798      	blx	r3
 8012574:	3501      	adds	r5, #1
 8012576:	b2ad      	uxth	r5, r5
 8012578:	e7e7      	b.n	801254a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801257a:	bf00      	nop
 801257c:	2400b980 	.word	0x2400b980

08012580 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8012580:	4b03      	ldr	r3, [pc, #12]	; (8012590 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8012582:	2200      	movs	r2, #0
 8012584:	801a      	strh	r2, [r3, #0]
 8012586:	805a      	strh	r2, [r3, #2]
 8012588:	809a      	strh	r2, [r3, #4]
 801258a:	80da      	strh	r2, [r3, #6]
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	2400b9c4 	.word	0x2400b9c4

08012594 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8012594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012598:	b09d      	sub	sp, #116	; 0x74
 801259a:	4606      	mov	r6, r0
 801259c:	4614      	mov	r4, r2
 801259e:	468a      	mov	sl, r1
 80125a0:	a803      	add	r0, sp, #12
 80125a2:	461d      	mov	r5, r3
 80125a4:	f000 fd6c 	bl	8013080 <_ZN8touchgfx12TextProviderC1Ev>
 80125a8:	6833      	ldr	r3, [r6, #0]
 80125aa:	4630      	mov	r0, r6
 80125ac:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80125b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125b2:	4798      	blx	r3
 80125b4:	6833      	ldr	r3, [r6, #0]
 80125b6:	4607      	mov	r7, r0
 80125b8:	4630      	mov	r0, r6
 80125ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125bc:	4798      	blx	r3
 80125be:	462a      	mov	r2, r5
 80125c0:	2500      	movs	r5, #0
 80125c2:	4621      	mov	r1, r4
 80125c4:	9000      	str	r0, [sp, #0]
 80125c6:	463b      	mov	r3, r7
 80125c8:	462c      	mov	r4, r5
 80125ca:	46a9      	mov	r9, r5
 80125cc:	46a8      	mov	r8, r5
 80125ce:	a803      	add	r0, sp, #12
 80125d0:	f000 fda9 	bl	8013126 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80125d4:	2300      	movs	r3, #0
 80125d6:	9302      	str	r3, [sp, #8]
 80125d8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80125dc:	429c      	cmp	r4, r3
 80125de:	d002      	beq.n	80125e6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80125e0:	455c      	cmp	r4, fp
 80125e2:	bf18      	it	ne
 80125e4:	4625      	movne	r5, r4
 80125e6:	ab02      	add	r3, sp, #8
 80125e8:	4632      	mov	r2, r6
 80125ea:	4651      	mov	r1, sl
 80125ec:	a803      	add	r0, sp, #12
 80125ee:	f001 f88f 	bl	8013710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80125f2:	4604      	mov	r4, r0
 80125f4:	b108      	cbz	r0, 80125fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80125f6:	280a      	cmp	r0, #10
 80125f8:	d10a      	bne.n	8012610 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80125fa:	45c1      	cmp	r9, r8
 80125fc:	bf38      	it	cc
 80125fe:	46c1      	movcc	r9, r8
 8012600:	f04f 0800 	mov.w	r8, #0
 8012604:	2c00      	cmp	r4, #0
 8012606:	d1e5      	bne.n	80125d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8012608:	4648      	mov	r0, r9
 801260a:	b01d      	add	sp, #116	; 0x74
 801260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012610:	9a02      	ldr	r2, [sp, #8]
 8012612:	2a00      	cmp	r2, #0
 8012614:	d0de      	beq.n	80125d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8012616:	7b57      	ldrb	r7, [r2, #13]
 8012618:	4629      	mov	r1, r5
 801261a:	6833      	ldr	r3, [r6, #0]
 801261c:	007f      	lsls	r7, r7, #1
 801261e:	8894      	ldrh	r4, [r2, #4]
 8012620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012622:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8012626:	7a97      	ldrb	r7, [r2, #10]
 8012628:	4307      	orrs	r7, r0
 801262a:	4630      	mov	r0, r6
 801262c:	4798      	blx	r3
 801262e:	4438      	add	r0, r7
 8012630:	4480      	add	r8, r0
 8012632:	fa1f f888 	uxth.w	r8, r8
 8012636:	e7e5      	b.n	8012604 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08012638 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8012638:	b508      	push	{r3, lr}
 801263a:	6803      	ldr	r3, [r0, #0]
 801263c:	68db      	ldr	r3, [r3, #12]
 801263e:	4798      	blx	r3
 8012640:	b128      	cbz	r0, 801264e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8012642:	7b43      	ldrb	r3, [r0, #13]
 8012644:	7a80      	ldrb	r0, [r0, #10]
 8012646:	005b      	lsls	r3, r3, #1
 8012648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801264c:	4318      	orrs	r0, r3
 801264e:	bd08      	pop	{r3, pc}

08012650 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8012650:	b40e      	push	{r1, r2, r3}
 8012652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012654:	b09e      	sub	sp, #120	; 0x78
 8012656:	4605      	mov	r5, r0
 8012658:	ab23      	add	r3, sp, #140	; 0x8c
 801265a:	a805      	add	r0, sp, #20
 801265c:	f853 4b04 	ldr.w	r4, [r3], #4
 8012660:	9303      	str	r3, [sp, #12]
 8012662:	f000 fd0d 	bl	8013080 <_ZN8touchgfx12TextProviderC1Ev>
 8012666:	682b      	ldr	r3, [r5, #0]
 8012668:	4628      	mov	r0, r5
 801266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801266c:	4798      	blx	r3
 801266e:	682b      	ldr	r3, [r5, #0]
 8012670:	4606      	mov	r6, r0
 8012672:	4628      	mov	r0, r5
 8012674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012676:	4798      	blx	r3
 8012678:	4633      	mov	r3, r6
 801267a:	4621      	mov	r1, r4
 801267c:	ae1e      	add	r6, sp, #120	; 0x78
 801267e:	2400      	movs	r4, #0
 8012680:	9000      	str	r0, [sp, #0]
 8012682:	9a03      	ldr	r2, [sp, #12]
 8012684:	a805      	add	r0, sp, #20
 8012686:	f000 fd4e 	bl	8013126 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801268a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801268e:	462a      	mov	r2, r5
 8012690:	4633      	mov	r3, r6
 8012692:	4621      	mov	r1, r4
 8012694:	a805      	add	r0, sp, #20
 8012696:	f001 f83b 	bl	8013710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801269a:	b300      	cbz	r0, 80126de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801269c:	280a      	cmp	r0, #10
 801269e:	d01a      	beq.n	80126d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80126a0:	9f04      	ldr	r7, [sp, #16]
 80126a2:	b1c7      	cbz	r7, 80126d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80126a4:	7b78      	ldrb	r0, [r7, #13]
 80126a6:	7a3b      	ldrb	r3, [r7, #8]
 80126a8:	00c1      	lsls	r1, r0, #3
 80126aa:	88aa      	ldrh	r2, [r5, #4]
 80126ac:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80126b0:	4319      	orrs	r1, r3
 80126b2:	0643      	lsls	r3, r0, #25
 80126b4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80126b8:	bf48      	it	mi
 80126ba:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80126be:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80126c2:	bf48      	it	mi
 80126c4:	b219      	sxthmi	r1, r3
 80126c6:	79fb      	ldrb	r3, [r7, #7]
 80126c8:	4303      	orrs	r3, r0
 80126ca:	4413      	add	r3, r2
 80126cc:	1a5b      	subs	r3, r3, r1
 80126ce:	b29b      	uxth	r3, r3
 80126d0:	42a3      	cmp	r3, r4
 80126d2:	bfc8      	it	gt
 80126d4:	b21c      	sxthgt	r4, r3
 80126d6:	4633      	mov	r3, r6
 80126d8:	462a      	mov	r2, r5
 80126da:	2100      	movs	r1, #0
 80126dc:	e7da      	b.n	8012694 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80126de:	b2a0      	uxth	r0, r4
 80126e0:	b01e      	add	sp, #120	; 0x78
 80126e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80126e6:	b003      	add	sp, #12
 80126e8:	4770      	bx	lr

080126ea <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80126ea:	b40e      	push	{r1, r2, r3}
 80126ec:	b570      	push	{r4, r5, r6, lr}
 80126ee:	b09d      	sub	sp, #116	; 0x74
 80126f0:	4604      	mov	r4, r0
 80126f2:	ab21      	add	r3, sp, #132	; 0x84
 80126f4:	a803      	add	r0, sp, #12
 80126f6:	f853 5b04 	ldr.w	r5, [r3], #4
 80126fa:	9302      	str	r3, [sp, #8]
 80126fc:	f000 fcc0 	bl	8013080 <_ZN8touchgfx12TextProviderC1Ev>
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	4620      	mov	r0, r4
 8012704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012706:	4798      	blx	r3
 8012708:	6823      	ldr	r3, [r4, #0]
 801270a:	4606      	mov	r6, r0
 801270c:	4620      	mov	r0, r4
 801270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012710:	2401      	movs	r4, #1
 8012712:	4798      	blx	r3
 8012714:	4633      	mov	r3, r6
 8012716:	9000      	str	r0, [sp, #0]
 8012718:	4629      	mov	r1, r5
 801271a:	9a02      	ldr	r2, [sp, #8]
 801271c:	a803      	add	r0, sp, #12
 801271e:	f000 fd02 	bl	8013126 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012722:	a803      	add	r0, sp, #12
 8012724:	f001 f874 	bl	8013810 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012728:	b2a3      	uxth	r3, r4
 801272a:	b138      	cbz	r0, 801273c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801272c:	280a      	cmp	r0, #10
 801272e:	a803      	add	r0, sp, #12
 8012730:	bf04      	itt	eq
 8012732:	3301      	addeq	r3, #1
 8012734:	b21c      	sxtheq	r4, r3
 8012736:	f001 f86b 	bl	8013810 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801273a:	e7f5      	b.n	8012728 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801273c:	4618      	mov	r0, r3
 801273e:	b01d      	add	sp, #116	; 0x74
 8012740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012744:	b003      	add	sp, #12
 8012746:	4770      	bx	lr

08012748 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8012748:	b40e      	push	{r1, r2, r3}
 801274a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801274c:	b09e      	sub	sp, #120	; 0x78
 801274e:	4604      	mov	r4, r0
 8012750:	ab23      	add	r3, sp, #140	; 0x8c
 8012752:	a805      	add	r0, sp, #20
 8012754:	f853 5b04 	ldr.w	r5, [r3], #4
 8012758:	9303      	str	r3, [sp, #12]
 801275a:	f000 fc91 	bl	8013080 <_ZN8touchgfx12TextProviderC1Ev>
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	4620      	mov	r0, r4
 8012762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012764:	4798      	blx	r3
 8012766:	6823      	ldr	r3, [r4, #0]
 8012768:	4606      	mov	r6, r0
 801276a:	4620      	mov	r0, r4
 801276c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801276e:	4798      	blx	r3
 8012770:	4633      	mov	r3, r6
 8012772:	4629      	mov	r1, r5
 8012774:	9000      	str	r0, [sp, #0]
 8012776:	9a03      	ldr	r2, [sp, #12]
 8012778:	a805      	add	r0, sp, #20
 801277a:	f000 fcd4 	bl	8013126 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801277e:	ad1e      	add	r5, sp, #120	; 0x78
 8012780:	2100      	movs	r1, #0
 8012782:	26ff      	movs	r6, #255	; 0xff
 8012784:	4622      	mov	r2, r4
 8012786:	a805      	add	r0, sp, #20
 8012788:	f845 1d68 	str.w	r1, [r5, #-104]!
 801278c:	462b      	mov	r3, r5
 801278e:	f000 ffbf 	bl	8013710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012792:	b1d8      	cbz	r0, 80127cc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8012794:	280a      	cmp	r0, #10
 8012796:	d012      	beq.n	80127be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8012798:	9804      	ldr	r0, [sp, #16]
 801279a:	b180      	cbz	r0, 80127be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801279c:	7b47      	ldrb	r7, [r0, #13]
 801279e:	7922      	ldrb	r2, [r4, #4]
 80127a0:	00fb      	lsls	r3, r7, #3
 80127a2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80127a6:	7a03      	ldrb	r3, [r0, #8]
 80127a8:	430b      	orrs	r3, r1
 80127aa:	0679      	lsls	r1, r7, #25
 80127ac:	bf44      	itt	mi
 80127ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80127b2:	b21b      	sxthmi	r3, r3
 80127b4:	1ad3      	subs	r3, r2, r3
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	429e      	cmp	r6, r3
 80127ba:	bf28      	it	cs
 80127bc:	461e      	movcs	r6, r3
 80127be:	462b      	mov	r3, r5
 80127c0:	4622      	mov	r2, r4
 80127c2:	2100      	movs	r1, #0
 80127c4:	a805      	add	r0, sp, #20
 80127c6:	f000 ffa3 	bl	8013710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80127ca:	e7e2      	b.n	8012792 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80127cc:	4630      	mov	r0, r6
 80127ce:	b01e      	add	sp, #120	; 0x78
 80127d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80127d4:	b003      	add	sp, #12
 80127d6:	4770      	bx	lr

080127d8 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80127d8:	b513      	push	{r0, r1, r4, lr}
 80127da:	6803      	ldr	r3, [r0, #0]
 80127dc:	2400      	movs	r4, #0
 80127de:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80127e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80127e6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80127ea:	4669      	mov	r1, sp
 80127ec:	691b      	ldr	r3, [r3, #16]
 80127ee:	9400      	str	r4, [sp, #0]
 80127f0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80127f4:	4798      	blx	r3
 80127f6:	b002      	add	sp, #8
 80127f8:	bd10      	pop	{r4, pc}

080127fa <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80127fa:	b538      	push	{r3, r4, r5, lr}
 80127fc:	680b      	ldr	r3, [r1, #0]
 80127fe:	460c      	mov	r4, r1
 8012800:	4605      	mov	r5, r0
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	4798      	blx	r3
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	4620      	mov	r0, r4
 801280a:	4629      	mov	r1, r5
 801280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801280e:	4798      	blx	r3
 8012810:	4628      	mov	r0, r5
 8012812:	bd38      	pop	{r3, r4, r5, pc}

08012814 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8012814:	b410      	push	{r4}
 8012816:	880a      	ldrh	r2, [r1, #0]
 8012818:	8884      	ldrh	r4, [r0, #4]
 801281a:	4422      	add	r2, r4
 801281c:	800a      	strh	r2, [r1, #0]
 801281e:	884a      	ldrh	r2, [r1, #2]
 8012820:	88c4      	ldrh	r4, [r0, #6]
 8012822:	4422      	add	r2, r4
 8012824:	804a      	strh	r2, [r1, #2]
 8012826:	6940      	ldr	r0, [r0, #20]
 8012828:	b120      	cbz	r0, 8012834 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801282a:	6803      	ldr	r3, [r0, #0]
 801282c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012832:	4718      	bx	r3
 8012834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012838:	4770      	bx	lr

0801283a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801283a:	b570      	push	{r4, r5, r6, lr}
 801283c:	8882      	ldrh	r2, [r0, #4]
 801283e:	460c      	mov	r4, r1
 8012840:	880b      	ldrh	r3, [r1, #0]
 8012842:	4605      	mov	r5, r0
 8012844:	4413      	add	r3, r2
 8012846:	800b      	strh	r3, [r1, #0]
 8012848:	884b      	ldrh	r3, [r1, #2]
 801284a:	88c2      	ldrh	r2, [r0, #6]
 801284c:	4413      	add	r3, r2
 801284e:	804b      	strh	r3, [r1, #2]
 8012850:	1d01      	adds	r1, r0, #4
 8012852:	4620      	mov	r0, r4
 8012854:	f7fc feb4 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 8012858:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801285c:	2b00      	cmp	r3, #0
 801285e:	dd0b      	ble.n	8012878 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012860:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012864:	2b00      	cmp	r3, #0
 8012866:	dd07      	ble.n	8012878 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012868:	6968      	ldr	r0, [r5, #20]
 801286a:	b128      	cbz	r0, 8012878 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801286c:	6803      	ldr	r3, [r0, #0]
 801286e:	4621      	mov	r1, r4
 8012870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012876:	4718      	bx	r3
 8012878:	bd70      	pop	{r4, r5, r6, pc}
	...

0801287c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	8882      	ldrh	r2, [r0, #4]
 8012880:	460c      	mov	r4, r1
 8012882:	880b      	ldrh	r3, [r1, #0]
 8012884:	4605      	mov	r5, r0
 8012886:	4413      	add	r3, r2
 8012888:	800b      	strh	r3, [r1, #0]
 801288a:	884b      	ldrh	r3, [r1, #2]
 801288c:	88c2      	ldrh	r2, [r0, #6]
 801288e:	4413      	add	r3, r2
 8012890:	804b      	strh	r3, [r1, #2]
 8012892:	1d01      	adds	r1, r0, #4
 8012894:	4620      	mov	r0, r4
 8012896:	f7fc fe93 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 801289a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	dd18      	ble.n	80128d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80128a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	dd14      	ble.n	80128d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80128aa:	6968      	ldr	r0, [r5, #20]
 80128ac:	b128      	cbz	r0, 80128ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80128ae:	6803      	ldr	r3, [r0, #0]
 80128b0:	4621      	mov	r1, r4
 80128b2:	691b      	ldr	r3, [r3, #16]
 80128b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128b8:	4718      	bx	r3
 80128ba:	4b07      	ldr	r3, [pc, #28]	; (80128d8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	3304      	adds	r3, #4
 80128c0:	429d      	cmp	r5, r3
 80128c2:	d107      	bne.n	80128d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80128c4:	f7fe fff0 	bl	80118a8 <_ZN8touchgfx11Application11getInstanceEv>
 80128c8:	6821      	ldr	r1, [r4, #0]
 80128ca:	6862      	ldr	r2, [r4, #4]
 80128cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128d0:	f7ff b862 	b.w	8011998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80128d4:	bd70      	pop	{r4, r5, r6, pc}
 80128d6:	bf00      	nop
 80128d8:	2400b9bc 	.word	0x2400b9bc

080128dc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80128dc:	b570      	push	{r4, r5, r6, lr}
 80128de:	4604      	mov	r4, r0
 80128e0:	4616      	mov	r6, r2
 80128e2:	460d      	mov	r5, r1
 80128e4:	b901      	cbnz	r1, 80128e8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80128e6:	b192      	cbz	r2, 801290e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80128e8:	6823      	ldr	r3, [r4, #0]
 80128ea:	4620      	mov	r0, r4
 80128ec:	699b      	ldr	r3, [r3, #24]
 80128ee:	4798      	blx	r3
 80128f0:	88e2      	ldrh	r2, [r4, #6]
 80128f2:	88a1      	ldrh	r1, [r4, #4]
 80128f4:	4620      	mov	r0, r4
 80128f6:	4432      	add	r2, r6
 80128f8:	4429      	add	r1, r5
 80128fa:	b212      	sxth	r2, r2
 80128fc:	b209      	sxth	r1, r1
 80128fe:	f7fd f93d 	bl	800fb7c <_ZN8touchgfx8Drawable5setXYEss>
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	4620      	mov	r0, r4
 8012906:	699b      	ldr	r3, [r3, #24]
 8012908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801290c:	4718      	bx	r3
 801290e:	bd70      	pop	{r4, r5, r6, pc}

08012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8012910:	b510      	push	{r4, lr}
 8012912:	2300      	movs	r3, #0
 8012914:	4604      	mov	r4, r0
 8012916:	4608      	mov	r0, r1
 8012918:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801291c:	8023      	strh	r3, [r4, #0]
 801291e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012922:	8063      	strh	r3, [r4, #2]
 8012924:	6803      	ldr	r3, [r0, #0]
 8012926:	80a1      	strh	r1, [r4, #4]
 8012928:	4621      	mov	r1, r4
 801292a:	80e2      	strh	r2, [r4, #6]
 801292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801292e:	4798      	blx	r3
 8012930:	4620      	mov	r0, r4
 8012932:	bd10      	pop	{r4, pc}

08012934 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8012934:	b530      	push	{r4, r5, lr}
 8012936:	8083      	strh	r3, [r0, #4]
 8012938:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801293c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8012940:	7183      	strb	r3, [r0, #6]
 8012942:	79c3      	ldrb	r3, [r0, #7]
 8012944:	6101      	str	r1, [r0, #16]
 8012946:	f365 0306 	bfi	r3, r5, #0, #7
 801294a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801294e:	8282      	strh	r2, [r0, #20]
 8012950:	f365 13c7 	bfi	r3, r5, #7, #1
 8012954:	71c3      	strb	r3, [r0, #7]
 8012956:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801295a:	7203      	strb	r3, [r0, #8]
 801295c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8012960:	7243      	strb	r3, [r0, #9]
 8012962:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012966:	8143      	strh	r3, [r0, #10]
 8012968:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801296c:	8183      	strh	r3, [r0, #12]
 801296e:	4b01      	ldr	r3, [pc, #4]	; (8012974 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8012970:	6003      	str	r3, [r0, #0]
 8012972:	bd30      	pop	{r4, r5, pc}
 8012974:	0801f2c0 	.word	0x0801f2c0

08012978 <_ZNK8touchgfx9ConstFont4findEt>:
 8012978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801297a:	6904      	ldr	r4, [r0, #16]
 801297c:	b3bc      	cbz	r4, 80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801297e:	88a3      	ldrh	r3, [r4, #4]
 8012980:	8a82      	ldrh	r2, [r0, #20]
 8012982:	1acb      	subs	r3, r1, r3
 8012984:	f102 32ff 	add.w	r2, r2, #4294967295
 8012988:	d431      	bmi.n	80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801298a:	4293      	cmp	r3, r2
 801298c:	dd0c      	ble.n	80129a8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801298e:	230e      	movs	r3, #14
 8012990:	fb03 4302 	mla	r3, r3, r2, r4
 8012994:	889b      	ldrh	r3, [r3, #4]
 8012996:	1a5b      	subs	r3, r3, r1
 8012998:	1ad3      	subs	r3, r2, r3
 801299a:	429a      	cmp	r2, r3
 801299c:	db27      	blt.n	80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801299e:	2b00      	cmp	r3, #0
 80129a0:	bfbc      	itt	lt
 80129a2:	2302      	movlt	r3, #2
 80129a4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80129a8:	2500      	movs	r5, #0
 80129aa:	260e      	movs	r6, #14
 80129ac:	4295      	cmp	r5, r2
 80129ae:	dc1e      	bgt.n	80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80129b0:	fb06 4003 	mla	r0, r6, r3, r4
 80129b4:	8887      	ldrh	r7, [r0, #4]
 80129b6:	42b9      	cmp	r1, r7
 80129b8:	d01a      	beq.n	80129f0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80129ba:	d20d      	bcs.n	80129d8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80129bc:	1e5a      	subs	r2, r3, #1
 80129be:	4295      	cmp	r5, r2
 80129c0:	dc15      	bgt.n	80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80129c2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80129c6:	1a5b      	subs	r3, r3, r1
 80129c8:	1ad3      	subs	r3, r2, r3
 80129ca:	429a      	cmp	r2, r3
 80129cc:	db0f      	blt.n	80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80129ce:	429d      	cmp	r5, r3
 80129d0:	ddec      	ble.n	80129ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80129d2:	1953      	adds	r3, r2, r5
 80129d4:	105b      	asrs	r3, r3, #1
 80129d6:	e7e9      	b.n	80129ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80129d8:	1c5d      	adds	r5, r3, #1
 80129da:	42aa      	cmp	r2, r5
 80129dc:	db07      	blt.n	80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80129de:	8a43      	ldrh	r3, [r0, #18]
 80129e0:	1acb      	subs	r3, r1, r3
 80129e2:	442b      	add	r3, r5
 80129e4:	429d      	cmp	r5, r3
 80129e6:	dc02      	bgt.n	80129ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80129e8:	429a      	cmp	r2, r3
 80129ea:	dadf      	bge.n	80129ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80129ec:	e7f1      	b.n	80129d2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80129ee:	2000      	movs	r0, #0
 80129f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080129f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80129f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f4:	4604      	mov	r4, r0
 80129f6:	4617      	mov	r7, r2
 80129f8:	461e      	mov	r6, r3
 80129fa:	b911      	cbnz	r1, 8012a02 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80129fc:	2500      	movs	r5, #0
 80129fe:	4628      	mov	r0, r5
 8012a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a02:	290a      	cmp	r1, #10
 8012a04:	d0fa      	beq.n	80129fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012a06:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012a0a:	4291      	cmp	r1, r2
 8012a0c:	d0f6      	beq.n	80129fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012a0e:	f242 020b 	movw	r2, #8203	; 0x200b
 8012a12:	4291      	cmp	r1, r2
 8012a14:	d0f2      	beq.n	80129fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012a16:	f7ff ffaf 	bl	8012978 <_ZNK8touchgfx9ConstFont4findEt>
 8012a1a:	4605      	mov	r5, r0
 8012a1c:	b950      	cbnz	r0, 8012a34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	4620      	mov	r0, r4
 8012a22:	691b      	ldr	r3, [r3, #16]
 8012a24:	4798      	blx	r3
 8012a26:	4601      	mov	r1, r0
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f7ff ffa5 	bl	8012978 <_ZNK8touchgfx9ConstFont4findEt>
 8012a2e:	4605      	mov	r5, r0
 8012a30:	2800      	cmp	r0, #0
 8012a32:	d0e3      	beq.n	80129fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012a34:	6823      	ldr	r3, [r4, #0]
 8012a36:	4629      	mov	r1, r5
 8012a38:	4620      	mov	r0, r4
 8012a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a3c:	4798      	blx	r3
 8012a3e:	6038      	str	r0, [r7, #0]
 8012a40:	6823      	ldr	r3, [r4, #0]
 8012a42:	4620      	mov	r0, r4
 8012a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a46:	4798      	blx	r3
 8012a48:	7030      	strb	r0, [r6, #0]
 8012a4a:	e7d8      	b.n	80129fe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08012a4c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	4770      	bx	lr

08012a50 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8012a50:	2001      	movs	r0, #1
 8012a52:	4770      	bx	lr

08012a54 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8012a54:	2002      	movs	r0, #2
 8012a56:	4770      	bx	lr

08012a58 <_ZN8touchgfx6ScreenD1Ev>:
 8012a58:	4770      	bx	lr

08012a5a <_ZN8touchgfx12GestureEventD1Ev>:
 8012a5a:	4770      	bx	lr

08012a5c <_ZN8touchgfx9DragEventD1Ev>:
 8012a5c:	4770      	bx	lr

08012a5e <_ZN8touchgfx10ClickEventD1Ev>:
 8012a5e:	4770      	bx	lr

08012a60 <_ZN8touchgfx10ClickEventD0Ev>:
 8012a60:	b510      	push	{r4, lr}
 8012a62:	4604      	mov	r4, r0
 8012a64:	210c      	movs	r1, #12
 8012a66:	f009 fc44 	bl	801c2f2 <_ZdlPvj>
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	bd10      	pop	{r4, pc}

08012a6e <_ZN8touchgfx9DragEventD0Ev>:
 8012a6e:	b510      	push	{r4, lr}
 8012a70:	4604      	mov	r4, r0
 8012a72:	2110      	movs	r1, #16
 8012a74:	f009 fc3d 	bl	801c2f2 <_ZdlPvj>
 8012a78:	4620      	mov	r0, r4
 8012a7a:	bd10      	pop	{r4, pc}

08012a7c <_ZN8touchgfx12GestureEventD0Ev>:
 8012a7c:	b510      	push	{r4, lr}
 8012a7e:	4604      	mov	r4, r0
 8012a80:	210c      	movs	r1, #12
 8012a82:	f009 fc36 	bl	801c2f2 <_ZdlPvj>
 8012a86:	4620      	mov	r0, r4
 8012a88:	bd10      	pop	{r4, pc}

08012a8a <_ZN8touchgfx6ScreenD0Ev>:
 8012a8a:	b510      	push	{r4, lr}
 8012a8c:	4604      	mov	r4, r0
 8012a8e:	213c      	movs	r1, #60	; 0x3c
 8012a90:	f009 fc2f 	bl	801c2f2 <_ZdlPvj>
 8012a94:	4620      	mov	r0, r4
 8012a96:	bd10      	pop	{r4, pc}

08012a98 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8012a98:	b530      	push	{r4, r5, lr}
 8012a9a:	460d      	mov	r5, r1
 8012a9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012a9e:	b087      	sub	sp, #28
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	b301      	cbz	r1, 8012ae6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8012aa4:	a801      	add	r0, sp, #4
 8012aa6:	f7ff ff33 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012aaa:	892a      	ldrh	r2, [r5, #8]
 8012aac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012ab0:	7928      	ldrb	r0, [r5, #4]
 8012ab2:	1ad2      	subs	r2, r2, r3
 8012ab4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012ab6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8012aba:	441a      	add	r2, r3
 8012abc:	896b      	ldrh	r3, [r5, #10]
 8012abe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8012ac2:	f88d 0010 	strb.w	r0, [sp, #16]
 8012ac6:	1b5b      	subs	r3, r3, r5
 8012ac8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8012aca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012acc:	442b      	add	r3, r5
 8012ace:	4d07      	ldr	r5, [pc, #28]	; (8012aec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8012ad0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012ad4:	a903      	add	r1, sp, #12
 8012ad6:	9503      	str	r5, [sp, #12]
 8012ad8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012adc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012ae0:	6803      	ldr	r3, [r0, #0]
 8012ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ae4:	4798      	blx	r3
 8012ae6:	b007      	add	sp, #28
 8012ae8:	bd30      	pop	{r4, r5, pc}
 8012aea:	bf00      	nop
 8012aec:	0801f340 	.word	0x0801f340

08012af0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8012af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012af6:	b08a      	sub	sp, #40	; 0x28
 8012af8:	4604      	mov	r4, r0
 8012afa:	460d      	mov	r5, r1
 8012afc:	b113      	cbz	r3, 8012b04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8012afe:	790b      	ldrb	r3, [r1, #4]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d044      	beq.n	8012b8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012b04:	f104 0804 	add.w	r8, r4, #4
 8012b08:	a803      	add	r0, sp, #12
 8012b0a:	4641      	mov	r1, r8
 8012b0c:	f7ff ff00 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b10:	792b      	ldrb	r3, [r5, #4]
 8012b12:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8012b16:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8012b1a:	b983      	cbnz	r3, 8012b3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8012b1c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8012b20:	892a      	ldrh	r2, [r5, #8]
 8012b22:	88e9      	ldrh	r1, [r5, #6]
 8012b24:	4640      	mov	r0, r8
 8012b26:	1b92      	subs	r2, r2, r6
 8012b28:	9301      	str	r3, [sp, #4]
 8012b2a:	1bc9      	subs	r1, r1, r7
 8012b2c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8012b30:	b212      	sxth	r2, r2
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	b209      	sxth	r1, r1
 8012b36:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012b3a:	f7fc fc5f 	bl	800f3fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8012b3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012b40:	b329      	cbz	r1, 8012b8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012b42:	a805      	add	r0, sp, #20
 8012b44:	f7ff fee4 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b48:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012b4c:	792b      	ldrb	r3, [r5, #4]
 8012b4e:	a907      	add	r1, sp, #28
 8012b50:	1abf      	subs	r7, r7, r2
 8012b52:	88ea      	ldrh	r2, [r5, #6]
 8012b54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012b56:	4417      	add	r7, r2
 8012b58:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8012b5a:	f88d 3020 	strb.w	r3, [sp, #32]
 8012b5e:	4417      	add	r7, r2
 8012b60:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8012b64:	1ab6      	subs	r6, r6, r2
 8012b66:	892a      	ldrh	r2, [r5, #8]
 8012b68:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8012b6c:	4416      	add	r6, r2
 8012b6e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012b70:	4416      	add	r6, r2
 8012b72:	4a08      	ldr	r2, [pc, #32]	; (8012b94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8012b74:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8012b78:	2600      	movs	r6, #0
 8012b7a:	9207      	str	r2, [sp, #28]
 8012b7c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8012b80:	6803      	ldr	r3, [r0, #0]
 8012b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b84:	4798      	blx	r3
 8012b86:	792b      	ldrb	r3, [r5, #4]
 8012b88:	b10b      	cbz	r3, 8012b8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012b8a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8012b8e:	b00a      	add	sp, #40	; 0x28
 8012b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b94:	0801f318 	.word	0x0801f318

08012b98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8012b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9c:	460c      	mov	r4, r1
 8012b9e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012ba0:	b088      	sub	sp, #32
 8012ba2:	4605      	mov	r5, r0
 8012ba4:	2900      	cmp	r1, #0
 8012ba6:	d06d      	beq.n	8012c84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8012ba8:	4668      	mov	r0, sp
 8012baa:	f7ff feb1 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012bae:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8012bb0:	88e3      	ldrh	r3, [r4, #6]
 8012bb2:	f9bd 8000 	ldrsh.w	r8, [sp]
 8012bb6:	440b      	add	r3, r1
 8012bb8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8012bbc:	b21b      	sxth	r3, r3
 8012bbe:	4543      	cmp	r3, r8
 8012bc0:	db31      	blt.n	8012c26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012bc2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8012bc6:	44c4      	add	ip, r8
 8012bc8:	fa0f fc8c 	sxth.w	ip, ip
 8012bcc:	4563      	cmp	r3, ip
 8012bce:	da2a      	bge.n	8012c26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012bd0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8012bd2:	8926      	ldrh	r6, [r4, #8]
 8012bd4:	4416      	add	r6, r2
 8012bd6:	b236      	sxth	r6, r6
 8012bd8:	42be      	cmp	r6, r7
 8012bda:	db24      	blt.n	8012c26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012bdc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012be0:	4438      	add	r0, r7
 8012be2:	b200      	sxth	r0, r0
 8012be4:	4286      	cmp	r6, r0
 8012be6:	da1e      	bge.n	8012c26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012be8:	8963      	ldrh	r3, [r4, #10]
 8012bea:	4419      	add	r1, r3
 8012bec:	b209      	sxth	r1, r1
 8012bee:	4541      	cmp	r1, r8
 8012bf0:	db08      	blt.n	8012c04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012bf2:	4561      	cmp	r1, ip
 8012bf4:	da06      	bge.n	8012c04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012bf6:	89a3      	ldrh	r3, [r4, #12]
 8012bf8:	441a      	add	r2, r3
 8012bfa:	b212      	sxth	r2, r2
 8012bfc:	42ba      	cmp	r2, r7
 8012bfe:	db01      	blt.n	8012c04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012c00:	4282      	cmp	r2, r0
 8012c02:	db10      	blt.n	8012c26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012c04:	4b21      	ldr	r3, [pc, #132]	; (8012c8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8012c06:	a904      	add	r1, sp, #16
 8012c08:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8012c0a:	9304      	str	r3, [sp, #16]
 8012c0c:	2302      	movs	r3, #2
 8012c0e:	f88d 3014 	strb.w	r3, [sp, #20]
 8012c12:	2300      	movs	r3, #0
 8012c14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012c18:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012c1c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012c20:	6803      	ldr	r3, [r0, #0]
 8012c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c24:	4798      	blx	r3
 8012c26:	1d29      	adds	r1, r5, #4
 8012c28:	a802      	add	r0, sp, #8
 8012c2a:	f7ff fe71 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012c2e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012c32:	88e0      	ldrh	r0, [r4, #6]
 8012c34:	eba3 0808 	sub.w	r8, r3, r8
 8012c38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012c3c:	7921      	ldrb	r1, [r4, #4]
 8012c3e:	fa1f f888 	uxth.w	r8, r8
 8012c42:	1bdf      	subs	r7, r3, r7
 8012c44:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8012c48:	b2bb      	uxth	r3, r7
 8012c4a:	4440      	add	r0, r8
 8012c4c:	8922      	ldrh	r2, [r4, #8]
 8012c4e:	8967      	ldrh	r7, [r4, #10]
 8012c50:	4460      	add	r0, ip
 8012c52:	89a4      	ldrh	r4, [r4, #12]
 8012c54:	441a      	add	r2, r3
 8012c56:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8012c58:	44b8      	add	r8, r7
 8012c5a:	4423      	add	r3, r4
 8012c5c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8012c60:	4432      	add	r2, r6
 8012c62:	44e0      	add	r8, ip
 8012c64:	4433      	add	r3, r6
 8012c66:	4c0a      	ldr	r4, [pc, #40]	; (8012c90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8012c68:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8012c6a:	f88d 1014 	strb.w	r1, [sp, #20]
 8012c6e:	a904      	add	r1, sp, #16
 8012c70:	9404      	str	r4, [sp, #16]
 8012c72:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012c76:	f8ad 801a 	strh.w	r8, [sp, #26]
 8012c7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012c7e:	6803      	ldr	r3, [r0, #0]
 8012c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c82:	4798      	blx	r3
 8012c84:	b008      	add	sp, #32
 8012c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c8a:	bf00      	nop
 8012c8c:	0801f318 	.word	0x0801f318
 8012c90:	0801f32c 	.word	0x0801f32c

08012c94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8012c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c96:	4604      	mov	r4, r0
 8012c98:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8012c9c:	3201      	adds	r2, #1
 8012c9e:	d112      	bne.n	8012cc6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8012ca0:	2500      	movs	r5, #0
 8012ca2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012ca6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012caa:	6803      	ldr	r3, [r0, #0]
 8012cac:	9500      	str	r5, [sp, #0]
 8012cae:	466d      	mov	r5, sp
 8012cb0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012cb4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012cb8:	4629      	mov	r1, r5
 8012cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cbc:	4798      	blx	r3
 8012cbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012cc2:	e884 0003 	stmia.w	r4, {r0, r1}
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	b003      	add	sp, #12
 8012cca:	bd30      	pop	{r4, r5, pc}

08012ccc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8012ccc:	b513      	push	{r0, r1, r4, lr}
 8012cce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	d109      	bne.n	8012cec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8012cd8:	4601      	mov	r1, r0
 8012cda:	4668      	mov	r0, sp
 8012cdc:	f7ff fe18 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ce0:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ce4:	8423      	strh	r3, [r4, #32]
 8012ce6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012cea:	8463      	strh	r3, [r4, #34]	; 0x22
 8012cec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8012cf0:	b002      	add	sp, #8
 8012cf2:	bd10      	pop	{r4, pc}

08012cf4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8012cf4:	b513      	push	{r0, r1, r4, lr}
 8012cf6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	d109      	bne.n	8012d14 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8012d00:	4601      	mov	r1, r0
 8012d02:	4668      	mov	r0, sp
 8012d04:	f7ff fe04 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d08:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d0c:	8423      	strh	r3, [r4, #32]
 8012d0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012d12:	8463      	strh	r3, [r4, #34]	; 0x22
 8012d14:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012d18:	b002      	add	sp, #8
 8012d1a:	bd10      	pop	{r4, pc}

08012d1c <_ZN8touchgfx6ScreenC1Ev>:
 8012d1c:	b570      	push	{r4, r5, r6, lr}
 8012d1e:	4b17      	ldr	r3, [pc, #92]	; (8012d7c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8012d20:	4605      	mov	r5, r0
 8012d22:	4a17      	ldr	r2, [pc, #92]	; (8012d80 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8012d24:	2101      	movs	r1, #1
 8012d26:	f845 3b04 	str.w	r3, [r5], #4
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	6042      	str	r2, [r0, #4]
 8012d2e:	4604      	mov	r4, r0
 8012d30:	8103      	strh	r3, [r0, #8]
 8012d32:	8143      	strh	r3, [r0, #10]
 8012d34:	8183      	strh	r3, [r0, #12]
 8012d36:	81c3      	strh	r3, [r0, #14]
 8012d38:	8203      	strh	r3, [r0, #16]
 8012d3a:	8243      	strh	r3, [r0, #18]
 8012d3c:	8283      	strh	r3, [r0, #20]
 8012d3e:	82c3      	strh	r3, [r0, #22]
 8012d40:	6203      	str	r3, [r0, #32]
 8012d42:	8483      	strh	r3, [r0, #36]	; 0x24
 8012d44:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012d46:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8012d4a:	6343      	str	r3, [r0, #52]	; 0x34
 8012d4c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8012d50:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8012d54:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8012d58:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8012d5c:	4b09      	ldr	r3, [pc, #36]	; (8012d84 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8012d5e:	4628      	mov	r0, r5
 8012d60:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012d64:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8012d66:	4a08      	ldr	r2, [pc, #32]	; (8012d88 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8012d68:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012d6c:	4798      	blx	r3
 8012d6e:	6863      	ldr	r3, [r4, #4]
 8012d70:	4628      	mov	r0, r5
 8012d72:	4631      	mov	r1, r6
 8012d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d76:	4798      	blx	r3
 8012d78:	4620      	mov	r0, r4
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}
 8012d7c:	0801f354 	.word	0x0801f354
 8012d80:	0801eef8 	.word	0x0801eef8
 8012d84:	2400b976 	.word	0x2400b976
 8012d88:	2400b974 	.word	0x2400b974

08012d8c <_ZN8touchgfx6Screen4drawEv>:
 8012d8c:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8012d8e:	b507      	push	{r0, r1, r2, lr}
 8012d90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012d94:	2100      	movs	r1, #0
 8012d96:	4b08      	ldr	r3, [pc, #32]	; (8012db8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8012d98:	9100      	str	r1, [sp, #0]
 8012d9a:	4669      	mov	r1, sp
 8012d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012da0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012da4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012da8:	6803      	ldr	r3, [r0, #0]
 8012daa:	689b      	ldr	r3, [r3, #8]
 8012dac:	4798      	blx	r3
 8012dae:	b003      	add	sp, #12
 8012db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012db4:	2400b974 	.word	0x2400b974
 8012db8:	2400b976 	.word	0x2400b976

08012dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8012dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012dc4:	b089      	sub	sp, #36	; 0x24
 8012dc6:	4680      	mov	r8, r0
 8012dc8:	460c      	mov	r4, r1
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	4615      	mov	r5, r2
 8012dce:	dd0e      	ble.n	8012dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012dd0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	dd0a      	ble.n	8012dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012dd8:	4628      	mov	r0, r5
 8012dda:	f7ff ff5b 	bl	8012c94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012dde:	4621      	mov	r1, r4
 8012de0:	f7fe fc83 	bl	80116ea <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012de4:	69eb      	ldr	r3, [r5, #28]
 8012de6:	b928      	cbnz	r0, 8012df4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8012de8:	461d      	mov	r5, r3
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d1f4      	bne.n	8012dd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8012dee:	b009      	add	sp, #36	; 0x24
 8012df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df4:	ae04      	add	r6, sp, #16
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f000 80b5 	beq.w	8012f66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012dfc:	682b      	ldr	r3, [r5, #0]
 8012dfe:	4629      	mov	r1, r5
 8012e00:	a802      	add	r0, sp, #8
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	4798      	blx	r3
 8012e06:	4628      	mov	r0, r5
 8012e08:	f7ff ff60 	bl	8012ccc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012e0c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8012e10:	4407      	add	r7, r0
 8012e12:	4628      	mov	r0, r5
 8012e14:	f7ff ff6e 	bl	8012cf4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012e18:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012e1c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012e20:	b23f      	sxth	r7, r7
 8012e22:	4418      	add	r0, r3
 8012e24:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012e28:	4621      	mov	r1, r4
 8012e2a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012e2e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012e32:	4630      	mov	r0, r6
 8012e34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e38:	f8ad 7010 	strh.w	r7, [sp, #16]
 8012e3c:	f7fc fbc0 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 8012e40:	4628      	mov	r0, r5
 8012e42:	f7ff ff27 	bl	8012c94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012e46:	ab06      	add	r3, sp, #24
 8012e48:	4602      	mov	r2, r0
 8012e4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012e4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e52:	4611      	mov	r1, r2
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7fc fbb3 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 8012e5a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012e5e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012e62:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8012e66:	4299      	cmp	r1, r3
 8012e68:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8012e6c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8012e70:	d10b      	bne.n	8012e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012e72:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012e76:	4552      	cmp	r2, sl
 8012e78:	d107      	bne.n	8012e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012e7a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012e7e:	455a      	cmp	r2, fp
 8012e80:	d103      	bne.n	8012e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012e82:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012e86:	454a      	cmp	r2, r9
 8012e88:	d06d      	beq.n	8012f66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012e8a:	f1bb 0f00 	cmp.w	fp, #0
 8012e8e:	dd65      	ble.n	8012f5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012e90:	f1b9 0f00 	cmp.w	r9, #0
 8012e94:	dd62      	ble.n	8012f5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012e96:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012e9a:	fa1f f08a 	uxth.w	r0, sl
 8012e9e:	4552      	cmp	r2, sl
 8012ea0:	9000      	str	r0, [sp, #0]
 8012ea2:	da12      	bge.n	8012eca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8012ea4:	9301      	str	r3, [sp, #4]
 8012ea6:	9b00      	ldr	r3, [sp, #0]
 8012ea8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012eac:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012eb0:	1a9a      	subs	r2, r3, r2
 8012eb2:	f8ad 1010 	strh.w	r1, [sp, #16]
 8012eb6:	4631      	mov	r1, r6
 8012eb8:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012ebc:	4640      	mov	r0, r8
 8012ebe:	f8ad 2016 	strh.w	r2, [sp, #22]
 8012ec2:	69ea      	ldr	r2, [r5, #28]
 8012ec4:	f7ff ff7a 	bl	8012dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012ec8:	9b01      	ldr	r3, [sp, #4]
 8012eca:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012ece:	b29f      	uxth	r7, r3
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	da0d      	bge.n	8012ef0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8012ed4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012ed8:	1aba      	subs	r2, r7, r2
 8012eda:	f8ad a012 	strh.w	sl, [sp, #18]
 8012ede:	4631      	mov	r1, r6
 8012ee0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012ee4:	4640      	mov	r0, r8
 8012ee6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012eea:	69ea      	ldr	r2, [r5, #28]
 8012eec:	f7ff ff66 	bl	8012dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012ef0:	8822      	ldrh	r2, [r4, #0]
 8012ef2:	445f      	add	r7, fp
 8012ef4:	88a3      	ldrh	r3, [r4, #4]
 8012ef6:	b2bf      	uxth	r7, r7
 8012ef8:	4413      	add	r3, r2
 8012efa:	b23a      	sxth	r2, r7
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	b219      	sxth	r1, r3
 8012f00:	4291      	cmp	r1, r2
 8012f02:	dd0d      	ble.n	8012f20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8012f04:	1bdb      	subs	r3, r3, r7
 8012f06:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012f0a:	f8ad a012 	strh.w	sl, [sp, #18]
 8012f0e:	4631      	mov	r1, r6
 8012f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012f14:	4640      	mov	r0, r8
 8012f16:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012f1a:	69ea      	ldr	r2, [r5, #28]
 8012f1c:	f7ff ff4e 	bl	8012dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012f20:	88e2      	ldrh	r2, [r4, #6]
 8012f22:	8863      	ldrh	r3, [r4, #2]
 8012f24:	4413      	add	r3, r2
 8012f26:	9a00      	ldr	r2, [sp, #0]
 8012f28:	444a      	add	r2, r9
 8012f2a:	b29b      	uxth	r3, r3
 8012f2c:	fa1f f982 	uxth.w	r9, r2
 8012f30:	b219      	sxth	r1, r3
 8012f32:	fa0f f289 	sxth.w	r2, r9
 8012f36:	428a      	cmp	r2, r1
 8012f38:	da15      	bge.n	8012f66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012f3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012f3e:	eba3 0309 	sub.w	r3, r3, r9
 8012f42:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012f46:	f8ad 1014 	strh.w	r1, [sp, #20]
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012f50:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012f58:	69ea      	ldr	r2, [r5, #28]
 8012f5a:	e001      	b.n	8012f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8012f5c:	69ea      	ldr	r2, [r5, #28]
 8012f5e:	4621      	mov	r1, r4
 8012f60:	4640      	mov	r0, r8
 8012f62:	f7ff ff2b 	bl	8012dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012f66:	4628      	mov	r0, r5
 8012f68:	f7ff fe94 	bl	8012c94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012f6c:	6861      	ldr	r1, [r4, #4]
 8012f6e:	4602      	mov	r2, r0
 8012f70:	4633      	mov	r3, r6
 8012f72:	6820      	ldr	r0, [r4, #0]
 8012f74:	c303      	stmia	r3!, {r0, r1}
 8012f76:	4611      	mov	r1, r2
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f7fc fb21 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 8012f7e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f77f af33 	ble.w	8012dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012f88:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f77f af2e 	ble.w	8012dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012f92:	4628      	mov	r0, r5
 8012f94:	f7ff fe9a 	bl	8012ccc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012f98:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012f9c:	1a18      	subs	r0, r3, r0
 8012f9e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012fa2:	4628      	mov	r0, r5
 8012fa4:	f7ff fea6 	bl	8012cf4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012fa8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012fac:	4631      	mov	r1, r6
 8012fae:	1a18      	subs	r0, r3, r0
 8012fb0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	682b      	ldr	r3, [r5, #0]
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	4798      	blx	r3
 8012fbc:	e717      	b.n	8012dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08012fbe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8012fbe:	b570      	push	{r4, r5, r6, lr}
 8012fc0:	1d06      	adds	r6, r0, #4
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	460c      	mov	r4, r1
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	4631      	mov	r1, r6
 8012fca:	4605      	mov	r5, r0
 8012fcc:	a802      	add	r0, sp, #8
 8012fce:	9301      	str	r3, [sp, #4]
 8012fd0:	f7ff fc9e 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012fd4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012fd8:	8822      	ldrh	r2, [r4, #0]
 8012fda:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8012fde:	1ad2      	subs	r2, r2, r3
 8012fe0:	8863      	ldrh	r3, [r4, #2]
 8012fe2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012fe6:	1a5b      	subs	r3, r3, r1
 8012fe8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8012fec:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012ff0:	aa01      	add	r2, sp, #4
 8012ff2:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012ffc:	a904      	add	r1, sp, #16
 8012ffe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013002:	f7fc fbb5 	bl	800f770 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8013006:	9a01      	ldr	r2, [sp, #4]
 8013008:	b11a      	cbz	r2, 8013012 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801300a:	4621      	mov	r1, r4
 801300c:	4628      	mov	r0, r5
 801300e:	f7ff fed5 	bl	8012dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013012:	b006      	add	sp, #24
 8013014:	bd70      	pop	{r4, r5, r6, pc}

08013016 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8013016:	4602      	mov	r2, r0
 8013018:	b530      	push	{r4, r5, lr}
 801301a:	4604      	mov	r4, r0
 801301c:	b085      	sub	sp, #20
 801301e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8013022:	460d      	mov	r5, r1
 8013024:	466b      	mov	r3, sp
 8013026:	6851      	ldr	r1, [r2, #4]
 8013028:	c303      	stmia	r3!, {r0, r1}
 801302a:	4629      	mov	r1, r5
 801302c:	4668      	mov	r0, sp
 801302e:	f7fc fac7 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 8013032:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013036:	b12b      	cbz	r3, 8013044 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8013038:	4669      	mov	r1, sp
 801303a:	4620      	mov	r0, r4
 801303c:	f7ff ffbf 	bl	8012fbe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8013040:	b005      	add	sp, #20
 8013042:	bd30      	pop	{r4, r5, pc}
 8013044:	3404      	adds	r4, #4
 8013046:	a802      	add	r0, sp, #8
 8013048:	4621      	mov	r1, r4
 801304a:	f7ff fc61 	bl	8012910 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801304e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013052:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8013056:	4669      	mov	r1, sp
 8013058:	4620      	mov	r0, r4
 801305a:	1a9b      	subs	r3, r3, r2
 801305c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8013060:	f8ad 3000 	strh.w	r3, [sp]
 8013064:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013068:	1a9b      	subs	r3, r3, r2
 801306a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801306e:	f7fc fb46 	bl	800f6fe <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8013072:	e7e5      	b.n	8013040 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08013074 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8013074:	460b      	mov	r3, r1
 8013076:	680a      	ldr	r2, [r1, #0]
 8013078:	1d01      	adds	r1, r0, #4
 801307a:	6992      	ldr	r2, [r2, #24]
 801307c:	4618      	mov	r0, r3
 801307e:	4710      	bx	r2

08013080 <_ZN8touchgfx12TextProviderC1Ev>:
 8013080:	b538      	push	{r3, r4, r5, lr}
 8013082:	2500      	movs	r5, #0
 8013084:	2302      	movs	r3, #2
 8013086:	4604      	mov	r4, r0
 8013088:	220e      	movs	r2, #14
 801308a:	7403      	strb	r3, [r0, #16]
 801308c:	4629      	mov	r1, r5
 801308e:	6145      	str	r5, [r0, #20]
 8013090:	7605      	strb	r5, [r0, #24]
 8013092:	83c5      	strh	r5, [r0, #30]
 8013094:	8405      	strh	r5, [r0, #32]
 8013096:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013098:	8705      	strh	r5, [r0, #56]	; 0x38
 801309a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801309c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80130a0:	e9c0 5500 	strd	r5, r5, [r0]
 80130a4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80130a8:	304c      	adds	r0, #76	; 0x4c
 80130aa:	f009 fae7 	bl	801c67c <memset>
 80130ae:	2301      	movs	r3, #1
 80130b0:	4620      	mov	r0, r4
 80130b2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80130b6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80130ba:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80130be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80130c2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80130c6:	f7f0 f983 	bl	80033d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80130ca:	4620      	mov	r0, r4
 80130cc:	bd38      	pop	{r3, r4, r5, pc}

080130ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80130ce:	b530      	push	{r4, r5, lr}
 80130d0:	2500      	movs	r5, #0
 80130d2:	2401      	movs	r4, #1
 80130d4:	6843      	ldr	r3, [r0, #4]
 80130d6:	b913      	cbnz	r3, 80130de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80130d8:	6803      	ldr	r3, [r0, #0]
 80130da:	b313      	cbz	r3, 8013122 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80130dc:	6043      	str	r3, [r0, #4]
 80130de:	7e03      	ldrb	r3, [r0, #24]
 80130e0:	b143      	cbz	r3, 80130f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80130e2:	6943      	ldr	r3, [r0, #20]
 80130e4:	b12b      	cbz	r3, 80130f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80130e6:	881a      	ldrh	r2, [r3, #0]
 80130e8:	b11a      	cbz	r2, 80130f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80130ea:	1c9a      	adds	r2, r3, #2
 80130ec:	6142      	str	r2, [r0, #20]
 80130ee:	8818      	ldrh	r0, [r3, #0]
 80130f0:	bd30      	pop	{r4, r5, pc}
 80130f2:	7605      	strb	r5, [r0, #24]
 80130f4:	6843      	ldr	r3, [r0, #4]
 80130f6:	8819      	ldrh	r1, [r3, #0]
 80130f8:	b199      	cbz	r1, 8013122 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80130fa:	1c9a      	adds	r2, r3, #2
 80130fc:	2902      	cmp	r1, #2
 80130fe:	6042      	str	r2, [r0, #4]
 8013100:	d1f5      	bne.n	80130ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8013102:	7c03      	ldrb	r3, [r0, #16]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d8e5      	bhi.n	80130d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013108:	1c5a      	adds	r2, r3, #1
 801310a:	3302      	adds	r3, #2
 801310c:	7402      	strb	r2, [r0, #16]
 801310e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013112:	6143      	str	r3, [r0, #20]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d0dd      	beq.n	80130d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013118:	881b      	ldrh	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d0da      	beq.n	80130d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801311e:	7604      	strb	r4, [r0, #24]
 8013120:	e7d8      	b.n	80130d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013122:	2000      	movs	r0, #0
 8013124:	e7e4      	b.n	80130f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08013126 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8013126:	6001      	str	r1, [r0, #0]
 8013128:	2100      	movs	r1, #0
 801312a:	b430      	push	{r4, r5}
 801312c:	6041      	str	r1, [r0, #4]
 801312e:	6815      	ldr	r5, [r2, #0]
 8013130:	6085      	str	r5, [r0, #8]
 8013132:	6852      	ldr	r2, [r2, #4]
 8013134:	6443      	str	r3, [r0, #68]	; 0x44
 8013136:	9b02      	ldr	r3, [sp, #8]
 8013138:	60c2      	str	r2, [r0, #12]
 801313a:	7401      	strb	r1, [r0, #16]
 801313c:	6141      	str	r1, [r0, #20]
 801313e:	7601      	strb	r1, [r0, #24]
 8013140:	8701      	strh	r1, [r0, #56]	; 0x38
 8013142:	8401      	strh	r1, [r0, #32]
 8013144:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8013148:	6483      	str	r3, [r0, #72]	; 0x48
 801314a:	bc30      	pop	{r4, r5}
 801314c:	f7f0 b940 	b.w	80033d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08013150 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8013150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013152:	4605      	mov	r5, r0
 8013154:	4608      	mov	r0, r1
 8013156:	b1f1      	cbz	r1, 8013196 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8013158:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801315c:	460b      	mov	r3, r1
 801315e:	f101 0708 	add.w	r7, r1, #8
 8013162:	4622      	mov	r2, r4
 8013164:	6818      	ldr	r0, [r3, #0]
 8013166:	3308      	adds	r3, #8
 8013168:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801316c:	4626      	mov	r6, r4
 801316e:	42bb      	cmp	r3, r7
 8013170:	c603      	stmia	r6!, {r0, r1}
 8013172:	4634      	mov	r4, r6
 8013174:	d1f6      	bne.n	8013164 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8013176:	6818      	ldr	r0, [r3, #0]
 8013178:	6030      	str	r0, [r6, #0]
 801317a:	4610      	mov	r0, r2
 801317c:	889b      	ldrh	r3, [r3, #4]
 801317e:	80b3      	strh	r3, [r6, #4]
 8013180:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8013184:	015b      	lsls	r3, r3, #5
 8013186:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801318a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801318e:	430b      	orrs	r3, r1
 8013190:	425b      	negs	r3, r3
 8013192:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8013196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013198 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8013198:	b538      	push	{r3, r4, r5, lr}
 801319a:	460c      	mov	r4, r1
 801319c:	6811      	ldr	r1, [r2, #0]
 801319e:	4610      	mov	r0, r2
 80131a0:	68cd      	ldr	r5, [r1, #12]
 80131a2:	4619      	mov	r1, r3
 80131a4:	47a8      	blx	r5
 80131a6:	2800      	cmp	r0, #0
 80131a8:	bf08      	it	eq
 80131aa:	4620      	moveq	r0, r4
 80131ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080131b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80131b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b2:	4604      	mov	r4, r0
 80131b4:	4615      	mov	r5, r2
 80131b6:	4608      	mov	r0, r1
 80131b8:	b93a      	cbnz	r2, 80131ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80131ba:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80131be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80131c2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80131c6:	4628      	mov	r0, r5
 80131c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131ca:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80131ce:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80131d2:	8893      	ldrh	r3, [r2, #4]
 80131d4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80131d8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80131dc:	79ee      	ldrb	r6, [r5, #7]
 80131de:	4316      	orrs	r6, r2
 80131e0:	19da      	adds	r2, r3, r7
 80131e2:	b291      	uxth	r1, r2
 80131e4:	b2b7      	uxth	r7, r6
 80131e6:	291d      	cmp	r1, #29
 80131e8:	d87b      	bhi.n	80132e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80131ea:	2201      	movs	r2, #1
 80131ec:	10f6      	asrs	r6, r6, #3
 80131ee:	408a      	lsls	r2, r1
 80131f0:	4974      	ldr	r1, [pc, #464]	; (80133c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80131f2:	420a      	tst	r2, r1
 80131f4:	d12e      	bne.n	8013254 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80131f6:	f412 7f60 	tst.w	r2, #896	; 0x380
 80131fa:	d072      	beq.n	80132e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80131fc:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8013200:	462b      	mov	r3, r5
 8013202:	f105 0e08 	add.w	lr, r5, #8
 8013206:	4615      	mov	r5, r2
 8013208:	6818      	ldr	r0, [r3, #0]
 801320a:	3308      	adds	r3, #8
 801320c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013210:	4694      	mov	ip, r2
 8013212:	4573      	cmp	r3, lr
 8013214:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013218:	4662      	mov	r2, ip
 801321a:	d1f5      	bne.n	8013208 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801321c:	6818      	ldr	r0, [r3, #0]
 801321e:	f8cc 0000 	str.w	r0, [ip]
 8013222:	889b      	ldrh	r3, [r3, #4]
 8013224:	f8ac 3004 	strh.w	r3, [ip, #4]
 8013228:	b2b3      	uxth	r3, r6
 801322a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801322e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8013232:	1aca      	subs	r2, r1, r3
 8013234:	1bcf      	subs	r7, r1, r7
 8013236:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801323a:	b292      	uxth	r2, r2
 801323c:	1afb      	subs	r3, r7, r3
 801323e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8013242:	10d2      	asrs	r2, r2, #3
 8013244:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8013248:	4302      	orrs	r2, r0
 801324a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801324e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8013252:	e7b8      	b.n	80131c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8013254:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013256:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801325a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801325c:	f640 6333 	movw	r3, #3635	; 0xe33
 8013260:	4299      	cmp	r1, r3
 8013262:	d110      	bne.n	8013286 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8013264:	6803      	ldr	r3, [r0, #0]
 8013266:	68db      	ldr	r3, [r3, #12]
 8013268:	4798      	blx	r3
 801326a:	7b41      	ldrb	r1, [r0, #13]
 801326c:	00cb      	lsls	r3, r1, #3
 801326e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013272:	7a03      	ldrb	r3, [r0, #8]
 8013274:	0648      	lsls	r0, r1, #25
 8013276:	ea43 0302 	orr.w	r3, r3, r2
 801327a:	bf44      	itt	mi
 801327c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013280:	b21b      	sxthmi	r3, r3
 8013282:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013286:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801328a:	462a      	mov	r2, r5
 801328c:	f105 0c08 	add.w	ip, r5, #8
 8013290:	443b      	add	r3, r7
 8013292:	4433      	add	r3, r6
 8013294:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8013298:	b29b      	uxth	r3, r3
 801329a:	4635      	mov	r5, r6
 801329c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80132a0:	6810      	ldr	r0, [r2, #0]
 80132a2:	3208      	adds	r2, #8
 80132a4:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80132a8:	4637      	mov	r7, r6
 80132aa:	4562      	cmp	r2, ip
 80132ac:	c703      	stmia	r7!, {r0, r1}
 80132ae:	463e      	mov	r6, r7
 80132b0:	d1f6      	bne.n	80132a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80132b2:	6810      	ldr	r0, [r2, #0]
 80132b4:	6038      	str	r0, [r7, #0]
 80132b6:	8892      	ldrh	r2, [r2, #4]
 80132b8:	80ba      	strh	r2, [r7, #4]
 80132ba:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80132be:	10db      	asrs	r3, r3, #3
 80132c0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80132c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80132c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80132cc:	4313      	orrs	r3, r2
 80132ce:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80132d2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80132d6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80132da:	1a9b      	subs	r3, r3, r2
 80132dc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80132e0:	e771      	b.n	80131c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80132e2:	f023 0204 	bic.w	r2, r3, #4
 80132e6:	f640 611b 	movw	r1, #3611	; 0xe1b
 80132ea:	428a      	cmp	r2, r1
 80132ec:	d003      	beq.n	80132f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80132ee:	f640 621d 	movw	r2, #3613	; 0xe1d
 80132f2:	4293      	cmp	r3, r2
 80132f4:	d120      	bne.n	8013338 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80132f6:	3b01      	subs	r3, #1
 80132f8:	4602      	mov	r2, r0
 80132fa:	4629      	mov	r1, r5
 80132fc:	4620      	mov	r0, r4
 80132fe:	b29b      	uxth	r3, r3
 8013300:	f7ff ff4a 	bl	8013198 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013304:	7b41      	ldrb	r1, [r0, #13]
 8013306:	00cb      	lsls	r3, r1, #3
 8013308:	0649      	lsls	r1, r1, #25
 801330a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801330e:	7a03      	ldrb	r3, [r0, #8]
 8013310:	ea43 0302 	orr.w	r3, r3, r2
 8013314:	bf44      	itt	mi
 8013316:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801331a:	b21b      	sxthmi	r3, r3
 801331c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013320:	7b6b      	ldrb	r3, [r5, #13]
 8013322:	7aaa      	ldrb	r2, [r5, #10]
 8013324:	005b      	lsls	r3, r3, #1
 8013326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801332a:	4313      	orrs	r3, r2
 801332c:	115a      	asrs	r2, r3, #5
 801332e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8013332:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8013336:	e035      	b.n	80133a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8013338:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801333c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8013340:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8013344:	7a2a      	ldrb	r2, [r5, #8]
 8013346:	ea42 0201 	orr.w	r2, r2, r1
 801334a:	f640 6109 	movw	r1, #3593	; 0xe09
 801334e:	bf1c      	itt	ne
 8013350:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8013354:	b212      	sxthne	r2, r2
 8013356:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801335a:	f023 0210 	bic.w	r2, r3, #16
 801335e:	428a      	cmp	r2, r1
 8013360:	d003      	beq.n	801336a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8013362:	f640 6213 	movw	r2, #3603	; 0xe13
 8013366:	4293      	cmp	r3, r2
 8013368:	d129      	bne.n	80133be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801336a:	7b6e      	ldrb	r6, [r5, #13]
 801336c:	4629      	mov	r1, r5
 801336e:	0076      	lsls	r6, r6, #1
 8013370:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8013374:	7aae      	ldrb	r6, [r5, #10]
 8013376:	4316      	orrs	r6, r2
 8013378:	f640 6213 	movw	r2, #3603	; 0xe13
 801337c:	4293      	cmp	r3, r2
 801337e:	4602      	mov	r2, r0
 8013380:	4620      	mov	r0, r4
 8013382:	bf16      	itet	ne
 8013384:	f103 33ff 	addne.w	r3, r3, #4294967295
 8013388:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801338c:	b29b      	uxthne	r3, r3
 801338e:	f7ff ff03 	bl	8013198 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013392:	7b43      	ldrb	r3, [r0, #13]
 8013394:	7a82      	ldrb	r2, [r0, #10]
 8013396:	005b      	lsls	r3, r3, #1
 8013398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801339c:	4313      	orrs	r3, r2
 801339e:	1af6      	subs	r6, r6, r3
 80133a0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80133a4:	7b69      	ldrb	r1, [r5, #13]
 80133a6:	00cb      	lsls	r3, r1, #3
 80133a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80133ac:	7a2b      	ldrb	r3, [r5, #8]
 80133ae:	4313      	orrs	r3, r2
 80133b0:	064a      	lsls	r2, r1, #25
 80133b2:	bf44      	itt	mi
 80133b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80133b8:	b21b      	sxthmi	r3, r3
 80133ba:	1bdb      	subs	r3, r3, r7
 80133bc:	e747      	b.n	801324e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80133be:	2300      	movs	r3, #0
 80133c0:	e7b7      	b.n	8013332 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80133c2:	bf00      	nop
 80133c4:	3fc00079 	.word	0x3fc00079

080133c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80133c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133cc:	4604      	mov	r4, r0
 80133ce:	b942      	cbnz	r2, 80133e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80133d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133d4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80133d8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80133dc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80133e0:	e047      	b.n	8013472 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80133e2:	7b51      	ldrb	r1, [r2, #13]
 80133e4:	8893      	ldrh	r3, [r2, #4]
 80133e6:	010d      	lsls	r5, r1, #4
 80133e8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80133ec:	79d5      	ldrb	r5, [r2, #7]
 80133ee:	4305      	orrs	r5, r0
 80133f0:	2d04      	cmp	r5, #4
 80133f2:	bfcc      	ite	gt
 80133f4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80133f8:	f04f 0e01 	movle.w	lr, #1
 80133fc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8013400:	f200 80ab 	bhi.w	801355a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8013404:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8013408:	4283      	cmp	r3, r0
 801340a:	d216      	bcs.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801340c:	f240 605b 	movw	r0, #1627	; 0x65b
 8013410:	4283      	cmp	r3, r0
 8013412:	d859      	bhi.n	80134c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8013414:	f240 6057 	movw	r0, #1623	; 0x657
 8013418:	4283      	cmp	r3, r0
 801341a:	d20e      	bcs.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801341c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8013420:	d24a      	bcs.n	80134b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8013422:	f240 604e 	movw	r0, #1614	; 0x64e
 8013426:	4283      	cmp	r3, r0
 8013428:	d207      	bcs.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801342a:	f240 601a 	movw	r0, #1562	; 0x61a
 801342e:	4283      	cmp	r3, r0
 8013430:	d02a      	beq.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013432:	d821      	bhi.n	8013478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8013434:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8013438:	d35b      	bcc.n	80134f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801343a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801343e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013442:	f040 80d0 	bne.w	80135e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013446:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801344a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801344e:	f040 80ca 	bne.w	80135e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013452:	00cb      	lsls	r3, r1, #3
 8013454:	0649      	lsls	r1, r1, #25
 8013456:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801345a:	7a13      	ldrb	r3, [r2, #8]
 801345c:	ea43 0300 	orr.w	r3, r3, r0
 8013460:	bf44      	itt	mi
 8013462:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013466:	b21b      	sxthmi	r3, r3
 8013468:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801346c:	1b5d      	subs	r5, r3, r5
 801346e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013472:	4610      	mov	r0, r2
 8013474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013478:	f240 604b 	movw	r0, #1611	; 0x64b
 801347c:	4283      	cmp	r3, r0
 801347e:	d338      	bcc.n	80134f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013480:	f240 604c 	movw	r0, #1612	; 0x64c
 8013484:	4283      	cmp	r3, r0
 8013486:	d9d8      	bls.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013488:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801348c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8013490:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013494:	f040 80f3 	bne.w	801367e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013498:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801349c:	f040 80ef 	bne.w	801367e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80134a0:	00cb      	lsls	r3, r1, #3
 80134a2:	064e      	lsls	r6, r1, #25
 80134a4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80134a8:	7a13      	ldrb	r3, [r2, #8]
 80134aa:	ea43 0300 	orr.w	r3, r3, r0
 80134ae:	bf44      	itt	mi
 80134b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80134b4:	b21b      	sxthmi	r3, r3
 80134b6:	e7d9      	b.n	801346c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80134b8:	f240 6054 	movw	r0, #1620	; 0x654
 80134bc:	4283      	cmp	r3, r0
 80134be:	d8e3      	bhi.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80134c0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80134c4:	d9e0      	bls.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80134c6:	e7b8      	b.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80134c8:	f240 6074 	movw	r0, #1652	; 0x674
 80134cc:	4283      	cmp	r3, r0
 80134ce:	d0b4      	beq.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80134d0:	d82d      	bhi.n	801352e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80134d2:	f240 605e 	movw	r0, #1630	; 0x65e
 80134d6:	4283      	cmp	r3, r0
 80134d8:	d804      	bhi.n	80134e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80134da:	f240 605d 	movw	r0, #1629	; 0x65d
 80134de:	4283      	cmp	r3, r0
 80134e0:	d3d2      	bcc.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80134e2:	e7aa      	b.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80134e4:	f240 605f 	movw	r0, #1631	; 0x65f
 80134e8:	4283      	cmp	r3, r0
 80134ea:	d0cd      	beq.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80134ec:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80134f0:	d0a3      	beq.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80134f2:	00cb      	lsls	r3, r1, #3
 80134f4:	0649      	lsls	r1, r1, #25
 80134f6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80134fa:	7a13      	ldrb	r3, [r2, #8]
 80134fc:	ea43 0300 	orr.w	r3, r3, r0
 8013500:	bf44      	itt	mi
 8013502:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013506:	b21b      	sxthmi	r3, r3
 8013508:	1b5d      	subs	r5, r3, r5
 801350a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801350e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013512:	7b53      	ldrb	r3, [r2, #13]
 8013514:	015b      	lsls	r3, r3, #5
 8013516:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801351a:	7993      	ldrb	r3, [r2, #6]
 801351c:	430b      	orrs	r3, r1
 801351e:	2105      	movs	r1, #5
 8013520:	005b      	lsls	r3, r3, #1
 8013522:	fb93 f3f1 	sdiv	r3, r3, r1
 8013526:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801352a:	440b      	add	r3, r1
 801352c:	e756      	b.n	80133dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801352e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8013532:	4283      	cmp	r3, r0
 8013534:	d809      	bhi.n	801354a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8013536:	f240 60df 	movw	r0, #1759	; 0x6df
 801353a:	4283      	cmp	r3, r0
 801353c:	f4bf af7d 	bcs.w	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013540:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8013544:	2b05      	cmp	r3, #5
 8013546:	d8d4      	bhi.n	80134f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013548:	e777      	b.n	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801354a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801354e:	4283      	cmp	r3, r0
 8013550:	d09a      	beq.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013552:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8013556:	4283      	cmp	r3, r0
 8013558:	e7ca      	b.n	80134f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801355a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801355e:	d22b      	bcs.n	80135b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8013560:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8013564:	4283      	cmp	r3, r0
 8013566:	d28f      	bcs.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013568:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801356c:	4283      	cmp	r3, r0
 801356e:	d816      	bhi.n	801359e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8013570:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8013574:	4283      	cmp	r3, r0
 8013576:	f4bf af60 	bcs.w	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801357a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801357e:	4283      	cmp	r3, r0
 8013580:	d80a      	bhi.n	8013598 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8013582:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8013586:	4283      	cmp	r3, r0
 8013588:	f4bf af57 	bcs.w	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801358c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8013590:	4283      	cmp	r3, r0
 8013592:	f43f af79 	beq.w	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013596:	e7ac      	b.n	80134f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013598:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801359c:	e7f8      	b.n	8013590 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801359e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80135a2:	4283      	cmp	r3, r0
 80135a4:	d802      	bhi.n	80135ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80135a6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80135aa:	e798      	b.n	80134de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80135ac:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80135b0:	4283      	cmp	r3, r0
 80135b2:	f47f af42 	bne.w	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80135b6:	e767      	b.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80135b8:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80135bc:	4283      	cmp	r3, r0
 80135be:	f43f af63 	beq.w	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80135c2:	d802      	bhi.n	80135ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80135c4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80135c8:	e7f2      	b.n	80135b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80135ca:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80135ce:	4283      	cmp	r3, r0
 80135d0:	d805      	bhi.n	80135de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80135d2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80135d6:	4283      	cmp	r3, r0
 80135d8:	f4ff af2f 	bcc.w	801343a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80135dc:	e754      	b.n	8013488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80135de:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80135e2:	4283      	cmp	r3, r0
 80135e4:	e7af      	b.n	8013546 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80135e6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80135ea:	4617      	mov	r7, r2
 80135ec:	f102 0808 	add.w	r8, r2, #8
 80135f0:	4666      	mov	r6, ip
 80135f2:	6838      	ldr	r0, [r7, #0]
 80135f4:	3708      	adds	r7, #8
 80135f6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80135fa:	46e6      	mov	lr, ip
 80135fc:	4547      	cmp	r7, r8
 80135fe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8013602:	46f4      	mov	ip, lr
 8013604:	d1f5      	bne.n	80135f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8013606:	6838      	ldr	r0, [r7, #0]
 8013608:	f8ce 0000 	str.w	r0, [lr]
 801360c:	88b9      	ldrh	r1, [r7, #4]
 801360e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8013612:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8013616:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801361a:	d009      	beq.n	8013630 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801361c:	7b51      	ldrb	r1, [r2, #13]
 801361e:	7992      	ldrb	r2, [r2, #6]
 8013620:	0149      	lsls	r1, r1, #5
 8013622:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013626:	4311      	orrs	r1, r2
 8013628:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801362c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8013630:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013634:	b2ad      	uxth	r5, r5
 8013636:	d00d      	beq.n	8013654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8013638:	442b      	add	r3, r5
 801363a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801363e:	b29b      	uxth	r3, r3
 8013640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013644:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013648:	10db      	asrs	r3, r3, #3
 801364a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801364e:	4313      	orrs	r3, r2
 8013650:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013654:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013658:	00cb      	lsls	r3, r1, #3
 801365a:	064f      	lsls	r7, r1, #25
 801365c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013660:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8013664:	ea43 0302 	orr.w	r3, r3, r2
 8013668:	bf44      	itt	mi
 801366a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801366e:	b21b      	sxthmi	r3, r3
 8013670:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013674:	1b5b      	subs	r3, r3, r5
 8013676:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801367a:	4632      	mov	r2, r6
 801367c:	e6f9      	b.n	8013472 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801367e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8013682:	4617      	mov	r7, r2
 8013684:	f102 0908 	add.w	r9, r2, #8
 8013688:	4666      	mov	r6, ip
 801368a:	6838      	ldr	r0, [r7, #0]
 801368c:	3708      	adds	r7, #8
 801368e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013692:	46e0      	mov	r8, ip
 8013694:	454f      	cmp	r7, r9
 8013696:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801369a:	46c4      	mov	ip, r8
 801369c:	d1f5      	bne.n	801368a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801369e:	6838      	ldr	r0, [r7, #0]
 80136a0:	f8c8 0000 	str.w	r0, [r8]
 80136a4:	88b9      	ldrh	r1, [r7, #4]
 80136a6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80136aa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80136ae:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80136b2:	d009      	beq.n	80136c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80136b4:	7b51      	ldrb	r1, [r2, #13]
 80136b6:	7992      	ldrb	r2, [r2, #6]
 80136b8:	0149      	lsls	r1, r1, #5
 80136ba:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80136be:	4311      	orrs	r1, r2
 80136c0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80136c4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80136c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80136cc:	d00e      	beq.n	80136ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80136ce:	eba3 030e 	sub.w	r3, r3, lr
 80136d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80136d6:	b29b      	uxth	r3, r3
 80136d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80136dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80136e0:	10db      	asrs	r3, r3, #3
 80136e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136e6:	4313      	orrs	r3, r2
 80136e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80136ec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80136f0:	00cb      	lsls	r3, r1, #3
 80136f2:	0648      	lsls	r0, r1, #25
 80136f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80136f8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80136fc:	ea43 0302 	orr.w	r3, r3, r2
 8013700:	bf44      	itt	mi
 8013702:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013706:	b21b      	sxthmi	r3, r3
 8013708:	1b5d      	subs	r5, r3, r5
 801370a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801370e:	e7b4      	b.n	801367a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08013710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8013710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013714:	461e      	mov	r6, r3
 8013716:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013718:	4604      	mov	r4, r0
 801371a:	4617      	mov	r7, r2
 801371c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013720:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013724:	f7ef fe02 	bl	800332c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013728:	4605      	mov	r5, r0
 801372a:	b918      	cbnz	r0, 8013734 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801372c:	6030      	str	r0, [r6, #0]
 801372e:	4628      	mov	r0, r5
 8013730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	4601      	mov	r1, r0
 8013738:	4638      	mov	r0, r7
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	4798      	blx	r3
 801373e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8013742:	4602      	mov	r2, r0
 8013744:	6030      	str	r0, [r6, #0]
 8013746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801374a:	d213      	bcs.n	8013774 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801374c:	4643      	mov	r3, r8
 801374e:	4639      	mov	r1, r7
 8013750:	4620      	mov	r0, r4
 8013752:	f7ff fe39 	bl	80133c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8013756:	6030      	str	r0, [r6, #0]
 8013758:	6833      	ldr	r3, [r6, #0]
 801375a:	b143      	cbz	r3, 801376e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801375c:	7b5a      	ldrb	r2, [r3, #13]
 801375e:	7a9b      	ldrb	r3, [r3, #10]
 8013760:	0052      	lsls	r2, r2, #1
 8013762:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013766:	4313      	orrs	r3, r2
 8013768:	bf0c      	ite	eq
 801376a:	2301      	moveq	r3, #1
 801376c:	2300      	movne	r3, #0
 801376e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8013772:	e7dc      	b.n	801372e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8013774:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013778:	b29b      	uxth	r3, r3
 801377a:	2b7f      	cmp	r3, #127	; 0x7f
 801377c:	d804      	bhi.n	8013788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801377e:	4639      	mov	r1, r7
 8013780:	4620      	mov	r0, r4
 8013782:	f7ff fd15 	bl	80131b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013786:	e7e6      	b.n	8013756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8013788:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801378c:	2b00      	cmp	r3, #0
 801378e:	d0e3      	beq.n	8013758 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013790:	f640 1302 	movw	r3, #2306	; 0x902
 8013794:	429d      	cmp	r5, r3
 8013796:	d1df      	bne.n	8013758 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013798:	4601      	mov	r1, r0
 801379a:	4620      	mov	r0, r4
 801379c:	f7ff fcd8 	bl	8013150 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80137a0:	e7d9      	b.n	8013756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080137a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80137a2:	b510      	push	{r4, lr}
 80137a4:	4604      	mov	r4, r0
 80137a6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80137aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80137ac:	b1e1      	cbz	r1, 80137e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80137ae:	2b0a      	cmp	r3, #10
 80137b0:	d02d      	beq.n	801380e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80137b2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80137b4:	3901      	subs	r1, #1
 80137b6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80137ba:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80137bc:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80137c0:	1c51      	adds	r1, r2, #1
 80137c2:	b289      	uxth	r1, r1
 80137c4:	2901      	cmp	r1, #1
 80137c6:	bf8a      	itet	hi
 80137c8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80137cc:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80137ce:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80137d0:	1c5a      	adds	r2, r3, #1
 80137d2:	8722      	strh	r2, [r4, #56]	; 0x38
 80137d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80137d6:	4413      	add	r3, r2
 80137d8:	b29b      	uxth	r3, r3
 80137da:	2b09      	cmp	r3, #9
 80137dc:	bf88      	it	hi
 80137de:	3b0a      	subhi	r3, #10
 80137e0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80137e4:	8458      	strh	r0, [r3, #34]	; 0x22
 80137e6:	e7de      	b.n	80137a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80137e8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80137ea:	2b0a      	cmp	r3, #10
 80137ec:	d00f      	beq.n	801380e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80137ee:	4620      	mov	r0, r4
 80137f0:	f7ff fc6d 	bl	80130ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80137f4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80137f6:	1c5a      	adds	r2, r3, #1
 80137f8:	8722      	strh	r2, [r4, #56]	; 0x38
 80137fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80137fc:	4413      	add	r3, r2
 80137fe:	b29b      	uxth	r3, r3
 8013800:	2b09      	cmp	r3, #9
 8013802:	bf88      	it	hi
 8013804:	3b0a      	subhi	r3, #10
 8013806:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801380a:	8458      	strh	r0, [r3, #34]	; 0x22
 801380c:	e7ec      	b.n	80137e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801380e:	bd10      	pop	{r4, pc}

08013810 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013814:	4604      	mov	r4, r0
 8013816:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801381a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801381c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801381e:	3a01      	subs	r2, #1
 8013820:	8702      	strh	r2, [r0, #56]	; 0x38
 8013822:	1c5a      	adds	r2, r3, #1
 8013824:	b292      	uxth	r2, r2
 8013826:	2a09      	cmp	r2, #9
 8013828:	bf8a      	itet	hi
 801382a:	3b09      	subhi	r3, #9
 801382c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801382e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8013830:	f7ff ffb7 	bl	80137a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8013834:	8c23      	ldrh	r3, [r4, #32]
 8013836:	2b01      	cmp	r3, #1
 8013838:	bf9c      	itt	ls
 801383a:	3301      	addls	r3, #1
 801383c:	8423      	strhls	r3, [r4, #32]
 801383e:	8be3      	ldrh	r3, [r4, #30]
 8013840:	b90b      	cbnz	r3, 8013846 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8013842:	2302      	movs	r3, #2
 8013844:	83e3      	strh	r3, [r4, #30]
 8013846:	8be3      	ldrh	r3, [r4, #30]
 8013848:	4628      	mov	r0, r5
 801384a:	3b01      	subs	r3, #1
 801384c:	b29b      	uxth	r3, r3
 801384e:	83e3      	strh	r3, [r4, #30]
 8013850:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013854:	8365      	strh	r5, [r4, #26]
 8013856:	bd38      	pop	{r3, r4, r5, pc}

08013858 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8013858:	428a      	cmp	r2, r1
 801385a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801385e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8013860:	d932      	bls.n	80138c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8013862:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8013864:	1a54      	subs	r4, r2, r1
 8013866:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801386a:	19ee      	adds	r6, r5, r7
 801386c:	fa1f fe84 	uxth.w	lr, r4
 8013870:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8013874:	3e01      	subs	r6, #1
 8013876:	b2b4      	uxth	r4, r6
 8013878:	eba4 090e 	sub.w	r9, r4, lr
 801387c:	fa1f f989 	uxth.w	r9, r9
 8013880:	2c09      	cmp	r4, #9
 8013882:	4626      	mov	r6, r4
 8013884:	bf88      	it	hi
 8013886:	f1a4 060a 	subhi.w	r6, r4, #10
 801388a:	f1bc 0f00 	cmp.w	ip, #0
 801388e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013892:	bf08      	it	eq
 8013894:	f04f 0c02 	moveq.w	ip, #2
 8013898:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801389c:	b2a4      	uxth	r4, r4
 801389e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80138a2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80138a6:	454c      	cmp	r4, r9
 80138a8:	fa1f fc8c 	uxth.w	ip, ip
 80138ac:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80138b0:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80138b4:	d1e4      	bne.n	8013880 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80138b6:	eba5 050e 	sub.w	r5, r5, lr
 80138ba:	eb0e 0408 	add.w	r4, lr, r8
 80138be:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80138c2:	8705      	strh	r5, [r0, #56]	; 0x38
 80138c4:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80138c8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80138ca:	250a      	movs	r5, #10
 80138cc:	1a64      	subs	r4, r4, r1
 80138ce:	4439      	add	r1, r7
 80138d0:	b289      	uxth	r1, r1
 80138d2:	8704      	strh	r4, [r0, #56]	; 0x38
 80138d4:	2909      	cmp	r1, #9
 80138d6:	bf88      	it	hi
 80138d8:	390a      	subhi	r1, #10
 80138da:	86c1      	strh	r1, [r0, #54]	; 0x36
 80138dc:	b18a      	cbz	r2, 8013902 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80138de:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80138e0:	3a01      	subs	r2, #1
 80138e2:	3101      	adds	r1, #1
 80138e4:	b292      	uxth	r2, r2
 80138e6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80138ea:	8701      	strh	r1, [r0, #56]	; 0x38
 80138ec:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80138ee:	b901      	cbnz	r1, 80138f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80138f0:	86c5      	strh	r5, [r0, #54]	; 0x36
 80138f2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80138f4:	3901      	subs	r1, #1
 80138f6:	b289      	uxth	r1, r1
 80138f8:	86c1      	strh	r1, [r0, #54]	; 0x36
 80138fa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80138fe:	844c      	strh	r4, [r1, #34]	; 0x22
 8013900:	e7ec      	b.n	80138dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8013902:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013906:	f7ff bf4c 	b.w	80137a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801390a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801390a:	b570      	push	{r4, r5, r6, lr}
 801390c:	2500      	movs	r5, #0
 801390e:	4295      	cmp	r5, r2
 8013910:	d011      	beq.n	8013936 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8013912:	8bc4      	ldrh	r4, [r0, #30]
 8013914:	f831 6b02 	ldrh.w	r6, [r1], #2
 8013918:	4414      	add	r4, r2
 801391a:	3c01      	subs	r4, #1
 801391c:	1b64      	subs	r4, r4, r5
 801391e:	b2a4      	uxth	r4, r4
 8013920:	2c01      	cmp	r4, #1
 8013922:	bf88      	it	hi
 8013924:	3c02      	subhi	r4, #2
 8013926:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801392a:	8b64      	ldrh	r4, [r4, #26]
 801392c:	42b4      	cmp	r4, r6
 801392e:	d117      	bne.n	8013960 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8013930:	3501      	adds	r5, #1
 8013932:	b2ad      	uxth	r5, r5
 8013934:	e7eb      	b.n	801390e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8013936:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801393a:	2400      	movs	r4, #0
 801393c:	4413      	add	r3, r2
 801393e:	b2a2      	uxth	r2, r4
 8013940:	429a      	cmp	r2, r3
 8013942:	da0f      	bge.n	8013964 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8013944:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8013946:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801394a:	3401      	adds	r4, #1
 801394c:	4432      	add	r2, r6
 801394e:	b292      	uxth	r2, r2
 8013950:	2a09      	cmp	r2, #9
 8013952:	bf88      	it	hi
 8013954:	3a0a      	subhi	r2, #10
 8013956:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801395a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801395c:	42aa      	cmp	r2, r5
 801395e:	d0ee      	beq.n	801393e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8013960:	2000      	movs	r0, #0
 8013962:	bd70      	pop	{r4, r5, r6, pc}
 8013964:	2001      	movs	r0, #1
 8013966:	e7fc      	b.n	8013962 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08013968 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8013968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801396c:	4605      	mov	r5, r0
 801396e:	4616      	mov	r6, r2
 8013970:	1c8c      	adds	r4, r1, #2
 8013972:	8809      	ldrh	r1, [r1, #0]
 8013974:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8013978:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801397c:	42b3      	cmp	r3, r6
 801397e:	d124      	bne.n	80139ca <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8013980:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8013984:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8013988:	f001 070f 	and.w	r7, r1, #15
 801398c:	4652      	mov	r2, sl
 801398e:	f8cd 8000 	str.w	r8, [sp]
 8013992:	464b      	mov	r3, r9
 8013994:	4621      	mov	r1, r4
 8013996:	4628      	mov	r0, r5
 8013998:	f7ff ffb7 	bl	801390a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801399c:	4683      	mov	fp, r0
 801399e:	b168      	cbz	r0, 80139bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80139a0:	eb0a 0109 	add.w	r1, sl, r9
 80139a4:	463a      	mov	r2, r7
 80139a6:	4628      	mov	r0, r5
 80139a8:	4441      	add	r1, r8
 80139aa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80139ae:	4649      	mov	r1, r9
 80139b0:	f7ff ff52 	bl	8013858 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80139b4:	4658      	mov	r0, fp
 80139b6:	b003      	add	sp, #12
 80139b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139bc:	eb07 010a 	add.w	r1, r7, sl
 80139c0:	4449      	add	r1, r9
 80139c2:	4441      	add	r1, r8
 80139c4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80139c8:	e7d2      	b.n	8013970 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80139ca:	f04f 0b00 	mov.w	fp, #0
 80139ce:	e7f1      	b.n	80139b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080139d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	8810      	ldrh	r0, [r2, #0]
 80139d4:	4298      	cmp	r0, r3
 80139d6:	d817      	bhi.n	8013a08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80139d8:	1e48      	subs	r0, r1, #1
 80139da:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80139de:	4298      	cmp	r0, r3
 80139e0:	d312      	bcc.n	8013a08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80139e2:	2400      	movs	r4, #0
 80139e4:	428c      	cmp	r4, r1
 80139e6:	d20f      	bcs.n	8013a08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80139e8:	1860      	adds	r0, r4, r1
 80139ea:	1040      	asrs	r0, r0, #1
 80139ec:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80139f0:	0085      	lsls	r5, r0, #2
 80139f2:	42b3      	cmp	r3, r6
 80139f4:	d902      	bls.n	80139fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80139f6:	3001      	adds	r0, #1
 80139f8:	b284      	uxth	r4, r0
 80139fa:	e7f3      	b.n	80139e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80139fc:	d201      	bcs.n	8013a02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80139fe:	b281      	uxth	r1, r0
 8013a00:	e7f0      	b.n	80139e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8013a02:	442a      	add	r2, r5
 8013a04:	8850      	ldrh	r0, [r2, #2]
 8013a06:	bd70      	pop	{r4, r5, r6, pc}
 8013a08:	2000      	movs	r0, #0
 8013a0a:	e7fc      	b.n	8013a06 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08013a0c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8013a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a10:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8013a12:	4604      	mov	r4, r0
 8013a14:	260b      	movs	r6, #11
 8013a16:	886f      	ldrh	r7, [r5, #2]
 8013a18:	087f      	lsrs	r7, r7, #1
 8013a1a:	3e01      	subs	r6, #1
 8013a1c:	d013      	beq.n	8013a46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8013a1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013a20:	462a      	mov	r2, r5
 8013a22:	4639      	mov	r1, r7
 8013a24:	4620      	mov	r0, r4
 8013a26:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013a2a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013a2e:	4643      	mov	r3, r8
 8013a30:	f7ff ffce 	bl	80139d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8013a34:	b138      	cbz	r0, 8013a46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8013a36:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8013a3a:	4642      	mov	r2, r8
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	f7ff ff93 	bl	8013968 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8013a42:	2800      	cmp	r0, #0
 8013a44:	d1e9      	bne.n	8013a1a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8013a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08013a4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8013a4c:	b570      	push	{r4, r5, r6, lr}
 8013a4e:	694a      	ldr	r2, [r1, #20]
 8013a50:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013a52:	684b      	ldr	r3, [r1, #4]
 8013a54:	1b54      	subs	r4, r2, r5
 8013a56:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8013a58:	f000 8106 	beq.w	8013c68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8013a5c:	1b9b      	subs	r3, r3, r6
 8013a5e:	d003      	beq.n	8013a68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013a60:	4363      	muls	r3, r4
 8013a62:	2210      	movs	r2, #16
 8013a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a68:	680c      	ldr	r4, [r1, #0]
 8013a6a:	698a      	ldr	r2, [r1, #24]
 8013a6c:	1b65      	subs	r5, r4, r5
 8013a6e:	f000 80fd 	beq.w	8013c6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8013a72:	1b92      	subs	r2, r2, r6
 8013a74:	d003      	beq.n	8013a7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013a76:	436a      	muls	r2, r5
 8013a78:	2410      	movs	r4, #16
 8013a7a:	fb92 f2f4 	sdiv	r2, r2, r4
 8013a7e:	1a9b      	subs	r3, r3, r2
 8013a80:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8013ca8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8013a84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a88:	460a      	mov	r2, r1
 8013a8a:	ee07 3a90 	vmov	s15, r3
 8013a8e:	f100 040c 	add.w	r4, r0, #12
 8013a92:	4603      	mov	r3, r0
 8013a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a98:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013a9c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8013aa0:	eeb1 6a43 	vneg.f32	s12, s6
 8013aa4:	edd2 7a02 	vldr	s15, [r2, #8]
 8013aa8:	3214      	adds	r2, #20
 8013aaa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013aae:	ece3 6a01 	vstmia	r3!, {s13}
 8013ab2:	429c      	cmp	r4, r3
 8013ab4:	ed52 7a02 	vldr	s15, [r2, #-8]
 8013ab8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013abc:	edc3 7a02 	vstr	s15, [r3, #8]
 8013ac0:	ed52 7a01 	vldr	s15, [r2, #-4]
 8013ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ac8:	edc3 7a05 	vstr	s15, [r3, #20]
 8013acc:	d1ea      	bne.n	8013aa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8013ace:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013ad0:	698b      	ldr	r3, [r1, #24]
 8013ad2:	edd0 4a02 	vldr	s9, [r0, #8]
 8013ad6:	1a9b      	subs	r3, r3, r2
 8013ad8:	edd0 3a00 	vldr	s7, [r0]
 8013adc:	edd0 6a01 	vldr	s13, [r0, #4]
 8013ae0:	ee07 3a90 	vmov	s15, r3
 8013ae4:	684b      	ldr	r3, [r1, #4]
 8013ae6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8013aea:	ed90 5a05 	vldr	s10, [r0, #20]
 8013aee:	1a9b      	subs	r3, r3, r2
 8013af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013af4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8013af8:	ed90 2a03 	vldr	s4, [r0, #12]
 8013afc:	ee07 3a10 	vmov	s14, r3
 8013b00:	edd0 5a04 	vldr	s11, [r0, #16]
 8013b04:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013b08:	ed90 1a07 	vldr	s2, [r0, #28]
 8013b0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b10:	edd0 2a06 	vldr	s5, [r0, #24]
 8013b14:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8013b18:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8013b1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b20:	ee32 5a45 	vsub.f32	s10, s4, s10
 8013b24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b28:	ee67 7a83 	vmul.f32	s15, s15, s6
 8013b2c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8013b30:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013b32:	694a      	ldr	r2, [r1, #20]
 8013b34:	1b13      	subs	r3, r2, r4
 8013b36:	ee07 3a10 	vmov	s14, r3
 8013b3a:	680b      	ldr	r3, [r1, #0]
 8013b3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b40:	1b1b      	subs	r3, r3, r4
 8013b42:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b46:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8013b4a:	ee07 3a10 	vmov	s14, r3
 8013b4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b52:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b56:	eee6 4a87 	vfma.f32	s9, s13, s14
 8013b5a:	ee64 4a86 	vmul.f32	s9, s9, s12
 8013b5e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8013b62:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013b64:	698b      	ldr	r3, [r1, #24]
 8013b66:	1a9b      	subs	r3, r3, r2
 8013b68:	ee06 3a90 	vmov	s13, r3
 8013b6c:	684b      	ldr	r3, [r1, #4]
 8013b6e:	1a9b      	subs	r3, r3, r2
 8013b70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b74:	ee07 3a10 	vmov	s14, r3
 8013b78:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013b7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b80:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8013b84:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b88:	eee5 6a87 	vfma.f32	s13, s11, s14
 8013b8c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8013b90:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8013b94:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013b96:	694a      	ldr	r2, [r1, #20]
 8013b98:	1b13      	subs	r3, r2, r4
 8013b9a:	ee07 3a10 	vmov	s14, r3
 8013b9e:	680b      	ldr	r3, [r1, #0]
 8013ba0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ba4:	1b1b      	subs	r3, r3, r4
 8013ba6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013baa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8013bae:	ee07 3a10 	vmov	s14, r3
 8013bb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bb6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013bba:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013bbe:	edd0 5a08 	vldr	s11, [r0, #32]
 8013bc2:	ee31 1a65 	vsub.f32	s2, s2, s11
 8013bc6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8013bca:	ee25 5a06 	vmul.f32	s10, s10, s12
 8013bce:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8013bd2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013bd4:	698b      	ldr	r3, [r1, #24]
 8013bd6:	1a9b      	subs	r3, r3, r2
 8013bd8:	ee07 3a10 	vmov	s14, r3
 8013bdc:	684b      	ldr	r3, [r1, #4]
 8013bde:	1a9b      	subs	r3, r3, r2
 8013be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013be4:	ee01 3a90 	vmov	s3, r3
 8013be8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013bec:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013bf0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8013bf4:	ee61 1a84 	vmul.f32	s3, s3, s8
 8013bf8:	eea1 7a21 	vfma.f32	s14, s2, s3
 8013bfc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8013c00:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013c04:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013c06:	694a      	ldr	r2, [r1, #20]
 8013c08:	1b13      	subs	r3, r2, r4
 8013c0a:	ee03 3a10 	vmov	s6, r3
 8013c0e:	680b      	ldr	r3, [r1, #0]
 8013c10:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013c14:	1b1b      	subs	r3, r3, r4
 8013c16:	ee23 3a04 	vmul.f32	s6, s6, s8
 8013c1a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8013c1e:	ee03 3a10 	vmov	s6, r3
 8013c22:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013c26:	ee23 4a04 	vmul.f32	s8, s6, s8
 8013c2a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8013c2e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8013c32:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8013c36:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8013c3a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8013c3e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8013c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c46:	dd13      	ble.n	8013c70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8013c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013c4c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8013c50:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013c52:	eee3 7a87 	vfma.f32	s15, s7, s14
 8013c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5e:	dd15      	ble.n	8013c8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8013c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013c64:	6403      	str	r3, [r0, #64]	; 0x40
 8013c66:	bd70      	pop	{r4, r5, r6, pc}
 8013c68:	4623      	mov	r3, r4
 8013c6a:	e6fd      	b.n	8013a68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013c6c:	462a      	mov	r2, r5
 8013c6e:	e706      	b.n	8013a7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013c70:	d502      	bpl.n	8013c78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8013c72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013c76:	e7e9      	b.n	8013c4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8013c78:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8013c7c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8013c80:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8013c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c88:	dade      	bge.n	8013c48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8013c8a:	e7f2      	b.n	8013c72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8013c8c:	d502      	bpl.n	8013c94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8013c8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013c92:	e7e7      	b.n	8013c64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8013c94:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8013c98:	eee3 4a86 	vfma.f32	s9, s7, s12
 8013c9c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8013ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca4:	dadc      	bge.n	8013c60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8013ca6:	e7f2      	b.n	8013c8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8013ca8:	3d800000 	.word	0x3d800000

08013cac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8013cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb0:	2714      	movs	r7, #20
 8013cb2:	435f      	muls	r7, r3
 8013cb4:	eb02 0c07 	add.w	ip, r2, r7
 8013cb8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8013cbc:	f115 0e0f 	adds.w	lr, r5, #15
 8013cc0:	f100 80a2 	bmi.w	8013e08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8013cc4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8013cc8:	9c08      	ldr	r4, [sp, #32]
 8013cca:	2614      	movs	r6, #20
 8013ccc:	f8c0 e014 	str.w	lr, [r0, #20]
 8013cd0:	4366      	muls	r6, r4
 8013cd2:	eb02 0806 	add.w	r8, r2, r6
 8013cd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013cda:	f115 040f 	adds.w	r4, r5, #15
 8013cde:	f100 809f 	bmi.w	8013e20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8013ce2:	1124      	asrs	r4, r4, #4
 8013ce4:	eba4 040e 	sub.w	r4, r4, lr
 8013ce8:	6184      	str	r4, [r0, #24]
 8013cea:	2c00      	cmp	r4, #0
 8013cec:	f000 808a 	beq.w	8013e04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8013cf0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8013cf4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013cf8:	5995      	ldr	r5, [r2, r6]
 8013cfa:	eba4 0809 	sub.w	r8, r4, r9
 8013cfe:	59d4      	ldr	r4, [r2, r7]
 8013d00:	eba5 0a04 	sub.w	sl, r5, r4
 8013d04:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8013d08:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8013d0c:	fb0e fe05 	mul.w	lr, lr, r5
 8013d10:	fb0a ee19 	mls	lr, sl, r9, lr
 8013d14:	fb08 e404 	mla	r4, r8, r4, lr
 8013d18:	3c01      	subs	r4, #1
 8013d1a:	19a4      	adds	r4, r4, r6
 8013d1c:	f100 808c 	bmi.w	8013e38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8013d20:	fb94 fef6 	sdiv	lr, r4, r6
 8013d24:	fb06 441e 	mls	r4, r6, lr, r4
 8013d28:	f8c0 e000 	str.w	lr, [r0]
 8013d2c:	6104      	str	r4, [r0, #16]
 8013d2e:	2d00      	cmp	r5, #0
 8013d30:	f2c0 8095 	blt.w	8013e5e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8013d34:	fb95 f4f6 	sdiv	r4, r5, r6
 8013d38:	fb06 5514 	mls	r5, r6, r4, r5
 8013d3c:	6044      	str	r4, [r0, #4]
 8013d3e:	6085      	str	r5, [r0, #8]
 8013d40:	60c6      	str	r6, [r0, #12]
 8013d42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013d46:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013d4a:	6945      	ldr	r5, [r0, #20]
 8013d4c:	59d2      	ldr	r2, [r2, r7]
 8013d4e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8013d52:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8013e80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8013d56:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013d5a:	ee07 4a10 	vmov	s14, r4
 8013d5e:	6804      	ldr	r4, [r0, #0]
 8013d60:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8013d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d68:	ee07 2a90 	vmov	s15, r2
 8013d6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d78:	edd3 6a00 	vldr	s13, [r3]
 8013d7c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013d80:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8013d84:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013d88:	edc0 6a07 	vstr	s13, [r0, #28]
 8013d8c:	edd0 6a01 	vldr	s13, [r0, #4]
 8013d90:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8013d94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d98:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013d9c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013da0:	ed80 6a08 	vstr	s12, [r0, #32]
 8013da4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8013da6:	6242      	str	r2, [r0, #36]	; 0x24
 8013da8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8013dac:	ed93 6a03 	vldr	s12, [r3, #12]
 8013db0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013db4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013db8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013dbc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8013dc0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013dc4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8013dc8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013dcc:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8013dd0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013dd2:	6302      	str	r2, [r0, #48]	; 0x30
 8013dd4:	ed93 6a06 	vldr	s12, [r3, #24]
 8013dd8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8013ddc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013de0:	eeb0 7a46 	vmov.f32	s14, s12
 8013de4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8013de8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013dec:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013df0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8013df4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8013df8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013dfc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8013e00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013e02:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e08:	2410      	movs	r4, #16
 8013e0a:	f1c5 0501 	rsb	r5, r5, #1
 8013e0e:	fb9e fef4 	sdiv	lr, lr, r4
 8013e12:	f015 050f 	ands.w	r5, r5, #15
 8013e16:	bf18      	it	ne
 8013e18:	2501      	movne	r5, #1
 8013e1a:	ebae 0e05 	sub.w	lr, lr, r5
 8013e1e:	e753      	b.n	8013cc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8013e20:	f04f 0910 	mov.w	r9, #16
 8013e24:	f1c5 0501 	rsb	r5, r5, #1
 8013e28:	fb94 f4f9 	sdiv	r4, r4, r9
 8013e2c:	f015 050f 	ands.w	r5, r5, #15
 8013e30:	bf18      	it	ne
 8013e32:	2501      	movne	r5, #1
 8013e34:	1b64      	subs	r4, r4, r5
 8013e36:	e755      	b.n	8013ce4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8013e38:	4264      	negs	r4, r4
 8013e3a:	fb94 fef6 	sdiv	lr, r4, r6
 8013e3e:	f1ce 0800 	rsb	r8, lr, #0
 8013e42:	fb06 441e 	mls	r4, r6, lr, r4
 8013e46:	f8c0 8000 	str.w	r8, [r0]
 8013e4a:	6104      	str	r4, [r0, #16]
 8013e4c:	2c00      	cmp	r4, #0
 8013e4e:	f43f af6e 	beq.w	8013d2e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8013e52:	ea6f 0e0e 	mvn.w	lr, lr
 8013e56:	1b34      	subs	r4, r6, r4
 8013e58:	f8c0 e000 	str.w	lr, [r0]
 8013e5c:	e766      	b.n	8013d2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8013e5e:	426d      	negs	r5, r5
 8013e60:	fb95 f4f6 	sdiv	r4, r5, r6
 8013e64:	f1c4 0e00 	rsb	lr, r4, #0
 8013e68:	fb06 5514 	mls	r5, r6, r4, r5
 8013e6c:	f8c0 e004 	str.w	lr, [r0, #4]
 8013e70:	6085      	str	r5, [r0, #8]
 8013e72:	2d00      	cmp	r5, #0
 8013e74:	f43f af64 	beq.w	8013d40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8013e78:	43e4      	mvns	r4, r4
 8013e7a:	1b75      	subs	r5, r6, r5
 8013e7c:	6044      	str	r4, [r0, #4]
 8013e7e:	e75e      	b.n	8013d3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8013e80:	3d800000 	.word	0x3d800000

08013e84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013e84:	4b01      	ldr	r3, [pc, #4]	; (8013e8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8013e86:	6018      	str	r0, [r3, #0]
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	2400b9e0 	.word	0x2400b9e0

08013e90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8013e90:	4b06      	ldr	r3, [pc, #24]	; (8013eac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8013e92:	881a      	ldrh	r2, [r3, #0]
 8013e94:	4282      	cmp	r2, r0
 8013e96:	d807      	bhi.n	8013ea8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8013e98:	4b05      	ldr	r3, [pc, #20]	; (8013eb0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8013e9a:	881b      	ldrh	r3, [r3, #0]
 8013e9c:	4413      	add	r3, r2
 8013e9e:	4298      	cmp	r0, r3
 8013ea0:	bfac      	ite	ge
 8013ea2:	2000      	movge	r0, #0
 8013ea4:	2001      	movlt	r0, #1
 8013ea6:	4770      	bx	lr
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	4770      	bx	lr
 8013eac:	2400ba00 	.word	0x2400ba00
 8013eb0:	2400ba04 	.word	0x2400ba04

08013eb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013eb4:	b508      	push	{r3, lr}
 8013eb6:	4601      	mov	r1, r0
 8013eb8:	f7ff ffea 	bl	8013e90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013ebc:	b118      	cbz	r0, 8013ec6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8013ebe:	4b02      	ldr	r3, [pc, #8]	; (8013ec8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8013ec6:	bd08      	pop	{r3, pc}
 8013ec8:	2400b9e4 	.word	0x2400b9e4

08013ecc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8013ecc:	b538      	push	{r3, r4, r5, lr}
 8013ece:	4604      	mov	r4, r0
 8013ed0:	f7ff ffde 	bl	8013e90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013ed4:	b188      	cbz	r0, 8013efa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8013ed6:	4b09      	ldr	r3, [pc, #36]	; (8013efc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8013ed8:	881a      	ldrh	r2, [r3, #0]
 8013eda:	4b09      	ldr	r3, [pc, #36]	; (8013f00 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8013edc:	1aa4      	subs	r4, r4, r2
 8013ede:	220e      	movs	r2, #14
 8013ee0:	681d      	ldr	r5, [r3, #0]
 8013ee2:	4362      	muls	r2, r4
 8013ee4:	18ac      	adds	r4, r5, r2
 8013ee6:	7b23      	ldrb	r3, [r4, #12]
 8013ee8:	f013 0320 	ands.w	r3, r3, #32
 8013eec:	bf17      	itett	ne
 8013eee:	680b      	ldrne	r3, [r1, #0]
 8013ef0:	4618      	moveq	r0, r3
 8013ef2:	50ab      	strne	r3, [r5, r2]
 8013ef4:	684b      	ldrne	r3, [r1, #4]
 8013ef6:	bf18      	it	ne
 8013ef8:	6063      	strne	r3, [r4, #4]
 8013efa:	bd38      	pop	{r3, r4, r5, pc}
 8013efc:	2400ba00 	.word	0x2400ba00
 8013f00:	2400b9e8 	.word	0x2400b9e8

08013f04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8013f04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f08:	4606      	mov	r6, r0
 8013f0a:	460c      	mov	r4, r1
 8013f0c:	f7ff ffc0 	bl	8013e90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013f10:	b918      	cbnz	r0, 8013f1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8013f12:	2000      	movs	r0, #0
 8013f14:	b002      	add	sp, #8
 8013f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f1a:	4608      	mov	r0, r1
 8013f1c:	f7fb fb93 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	d1f6      	bne.n	8013f12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013f24:	4b3f      	ldr	r3, [pc, #252]	; (8014024 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8013f26:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8014028 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8013f2a:	881d      	ldrh	r5, [r3, #0]
 8013f2c:	f8d9 a000 	ldr.w	sl, [r9]
 8013f30:	46c8      	mov	r8, r9
 8013f32:	1b73      	subs	r3, r6, r5
 8013f34:	250e      	movs	r5, #14
 8013f36:	435d      	muls	r5, r3
 8013f38:	eb0a 0705 	add.w	r7, sl, r5
 8013f3c:	7b3b      	ldrb	r3, [r7, #12]
 8013f3e:	f013 0f20 	tst.w	r3, #32
 8013f42:	d0e6      	beq.n	8013f12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013f44:	4621      	mov	r1, r4
 8013f46:	4638      	mov	r0, r7
 8013f48:	f7fd fc42 	bl	80117d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d1e1      	bne.n	8013f14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8013f50:	4639      	mov	r1, r7
 8013f52:	4620      	mov	r0, r4
 8013f54:	f7fd fc3c 	bl	80117d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013f58:	b108      	cbz	r0, 8013f5e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8013f5a:	4621      	mov	r1, r4
 8013f5c:	e020      	b.n	8013fa0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8013f5e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013f62:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d11e      	bne.n	8013fa8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013f6a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013f6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d118      	bne.n	8013fa8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013f76:	6820      	ldr	r0, [r4, #0]
 8013f78:	466b      	mov	r3, sp
 8013f7a:	6861      	ldr	r1, [r4, #4]
 8013f7c:	c303      	stmia	r3!, {r0, r1}
 8013f7e:	4639      	mov	r1, r7
 8013f80:	4668      	mov	r0, sp
 8013f82:	f7fd fc4b 	bl	801181c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013f86:	f8d9 3000 	ldr.w	r3, [r9]
 8013f8a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013f8e:	442b      	add	r3, r5
 8013f90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013f94:	4413      	add	r3, r2
 8013f96:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	dc04      	bgt.n	8013fa8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013f9e:	4669      	mov	r1, sp
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f7ff ff93 	bl	8013ecc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8013fa6:	e7b5      	b.n	8013f14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8013fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8013fac:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013fb0:	442b      	add	r3, r5
 8013fb2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013fb6:	4291      	cmp	r1, r2
 8013fb8:	d119      	bne.n	8013fee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8013fba:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013fbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8013fc2:	4291      	cmp	r1, r2
 8013fc4:	d113      	bne.n	8013fee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8013fc6:	6820      	ldr	r0, [r4, #0]
 8013fc8:	466a      	mov	r2, sp
 8013fca:	6861      	ldr	r1, [r4, #4]
 8013fcc:	c203      	stmia	r2!, {r0, r1}
 8013fce:	4619      	mov	r1, r3
 8013fd0:	4668      	mov	r0, sp
 8013fd2:	f7fd fc23 	bl	801181c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8013fda:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013fde:	442b      	add	r3, r5
 8013fe0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013fe4:	4413      	add	r3, r2
 8013fe6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013fea:	4293      	cmp	r3, r2
 8013fec:	ddd7      	ble.n	8013f9e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8013fee:	4620      	mov	r0, r4
 8013ff0:	f7fb fb29 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ff4:	b990      	cbnz	r0, 801401c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8013ff6:	88a7      	ldrh	r7, [r4, #4]
 8013ff8:	88e3      	ldrh	r3, [r4, #6]
 8013ffa:	fb17 f703 	smulbb	r7, r7, r3
 8013ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8014002:	441d      	add	r5, r3
 8014004:	4628      	mov	r0, r5
 8014006:	f7fb fb1e 	bl	800f646 <_ZNK8touchgfx4Rect7isEmptyEv>
 801400a:	b948      	cbnz	r0, 8014020 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801400c:	88ab      	ldrh	r3, [r5, #4]
 801400e:	88ea      	ldrh	r2, [r5, #6]
 8014010:	fb13 f302 	smulbb	r3, r3, r2
 8014014:	42bb      	cmp	r3, r7
 8014016:	f6bf af7c 	bge.w	8013f12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801401a:	e79e      	b.n	8013f5a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801401c:	2700      	movs	r7, #0
 801401e:	e7ee      	b.n	8013ffe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8014020:	2300      	movs	r3, #0
 8014022:	e7f7      	b.n	8014014 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8014024:	2400ba00 	.word	0x2400ba00
 8014028:	2400b9e8 	.word	0x2400b9e8

0801402c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801402e:	4c24      	ldr	r4, [pc, #144]	; (80140c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d042      	beq.n	80140bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8014036:	4a23      	ldr	r2, [pc, #140]	; (80140c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8014038:	4d23      	ldr	r5, [pc, #140]	; (80140c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801403a:	8811      	ldrh	r1, [r2, #0]
 801403c:	f8b5 c000 	ldrh.w	ip, [r5]
 8014040:	4822      	ldr	r0, [pc, #136]	; (80140cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8014042:	4461      	add	r1, ip
 8014044:	1c4a      	adds	r2, r1, #1
 8014046:	008f      	lsls	r7, r1, #2
 8014048:	f022 0201 	bic.w	r2, r2, #1
 801404c:	19de      	adds	r6, r3, r7
 801404e:	0412      	lsls	r2, r2, #16
 8014050:	6006      	str	r6, [r0, #0]
 8014052:	4e1f      	ldr	r6, [pc, #124]	; (80140d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8014054:	0c12      	lsrs	r2, r2, #16
 8014056:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801405a:	19da      	adds	r2, r3, r7
 801405c:	6032      	str	r2, [r6, #0]
 801405e:	220e      	movs	r2, #14
 8014060:	fb02 f20c 	mul.w	r2, r2, ip
 8014064:	3203      	adds	r2, #3
 8014066:	f022 0203 	bic.w	r2, r2, #3
 801406a:	443a      	add	r2, r7
 801406c:	4f19      	ldr	r7, [pc, #100]	; (80140d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801406e:	4413      	add	r3, r2
 8014070:	603b      	str	r3, [r7, #0]
 8014072:	2300      	movs	r3, #0
 8014074:	4f18      	ldr	r7, [pc, #96]	; (80140d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8014076:	469c      	mov	ip, r3
 8014078:	803b      	strh	r3, [r7, #0]
 801407a:	4f18      	ldr	r7, [pc, #96]	; (80140dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801407c:	683f      	ldr	r7, [r7, #0]
 801407e:	1aba      	subs	r2, r7, r2
 8014080:	4f17      	ldr	r7, [pc, #92]	; (80140e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8014082:	603a      	str	r2, [r7, #0]
 8014084:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014088:	4a16      	ldr	r2, [pc, #88]	; (80140e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801408a:	8013      	strh	r3, [r2, #0]
 801408c:	428b      	cmp	r3, r1
 801408e:	d10d      	bne.n	80140ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8014090:	882d      	ldrh	r5, [r5, #0]
 8014092:	2300      	movs	r3, #0
 8014094:	6830      	ldr	r0, [r6, #0]
 8014096:	240e      	movs	r4, #14
 8014098:	429d      	cmp	r5, r3
 801409a:	d90f      	bls.n	80140bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801409c:	fb04 0203 	mla	r2, r4, r3, r0
 80140a0:	3301      	adds	r3, #1
 80140a2:	7b11      	ldrb	r1, [r2, #12]
 80140a4:	f36f 1145 	bfc	r1, #5, #1
 80140a8:	7311      	strb	r1, [r2, #12]
 80140aa:	e7f5      	b.n	8014098 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80140ac:	6822      	ldr	r2, [r4, #0]
 80140ae:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80140b2:	6802      	ldr	r2, [r0, #0]
 80140b4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80140b8:	3301      	adds	r3, #1
 80140ba:	e7e7      	b.n	801408c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80140bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140be:	bf00      	nop
 80140c0:	2400b9e4 	.word	0x2400b9e4
 80140c4:	2400ba00 	.word	0x2400ba00
 80140c8:	2400ba04 	.word	0x2400ba04
 80140cc:	2400b9f8 	.word	0x2400b9f8
 80140d0:	2400b9e8 	.word	0x2400b9e8
 80140d4:	2400b9f0 	.word	0x2400b9f0
 80140d8:	2400ba02 	.word	0x2400ba02
 80140dc:	2400b9ec 	.word	0x2400b9ec
 80140e0:	2400b9fc 	.word	0x2400b9fc
 80140e4:	2400b9f4 	.word	0x2400b9f4

080140e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80140e8:	4b06      	ldr	r3, [pc, #24]	; (8014104 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	b943      	cbnz	r3, 8014100 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80140ee:	b139      	cbz	r1, 8014100 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80140f0:	4b05      	ldr	r3, [pc, #20]	; (8014108 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80140f2:	801a      	strh	r2, [r3, #0]
 80140f4:	4b05      	ldr	r3, [pc, #20]	; (801410c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80140f6:	6019      	str	r1, [r3, #0]
 80140f8:	4b05      	ldr	r3, [pc, #20]	; (8014110 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80140fa:	6018      	str	r0, [r3, #0]
 80140fc:	f7ff bf96 	b.w	801402c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop
 8014104:	2400b9f0 	.word	0x2400b9f0
 8014108:	2400ba04 	.word	0x2400ba04
 801410c:	2400b9ec 	.word	0x2400b9ec
 8014110:	2400b9e4 	.word	0x2400b9e4

08014114 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8014114:	b470      	push	{r4, r5, r6}
 8014116:	4c07      	ldr	r4, [pc, #28]	; (8014134 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8014118:	4605      	mov	r5, r0
 801411a:	4610      	mov	r0, r2
 801411c:	9a03      	ldr	r2, [sp, #12]
 801411e:	6826      	ldr	r6, [r4, #0]
 8014120:	b936      	cbnz	r6, 8014130 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8014122:	6025      	str	r5, [r4, #0]
 8014124:	4c04      	ldr	r4, [pc, #16]	; (8014138 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8014126:	8021      	strh	r1, [r4, #0]
 8014128:	4619      	mov	r1, r3
 801412a:	bc70      	pop	{r4, r5, r6}
 801412c:	f7ff bfdc 	b.w	80140e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8014130:	bc70      	pop	{r4, r5, r6}
 8014132:	4770      	bx	lr
 8014134:	2400ba08 	.word	0x2400ba08
 8014138:	2400ba00 	.word	0x2400ba00

0801413c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801413c:	4a12      	ldr	r2, [pc, #72]	; (8014188 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801413e:	8803      	ldrh	r3, [r0, #0]
 8014140:	8812      	ldrh	r2, [r2, #0]
 8014142:	4293      	cmp	r3, r2
 8014144:	d207      	bcs.n	8014156 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8014146:	4a11      	ldr	r2, [pc, #68]	; (801418c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8014148:	2114      	movs	r1, #20
 801414a:	6812      	ldr	r2, [r2, #0]
 801414c:	fb01 2303 	mla	r3, r1, r3, r2
 8014150:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8014154:	4770      	bx	lr
 8014156:	490e      	ldr	r1, [pc, #56]	; (8014190 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8014158:	8809      	ldrh	r1, [r1, #0]
 801415a:	4411      	add	r1, r2
 801415c:	428b      	cmp	r3, r1
 801415e:	da04      	bge.n	801416a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8014160:	1a9b      	subs	r3, r3, r2
 8014162:	4a0c      	ldr	r2, [pc, #48]	; (8014194 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8014164:	210e      	movs	r1, #14
 8014166:	6812      	ldr	r2, [r2, #0]
 8014168:	e7f0      	b.n	801414c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801416a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801416e:	4293      	cmp	r3, r2
 8014170:	d108      	bne.n	8014184 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8014172:	4b09      	ldr	r3, [pc, #36]	; (8014198 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	b91b      	cbnz	r3, 8014180 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8014178:	4b08      	ldr	r3, [pc, #32]	; (801419c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801417a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801417e:	4770      	bx	lr
 8014180:	4b07      	ldr	r3, [pc, #28]	; (80141a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8014182:	e7fa      	b.n	801417a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8014184:	2000      	movs	r0, #0
 8014186:	4770      	bx	lr
 8014188:	2400ba00 	.word	0x2400ba00
 801418c:	2400ba08 	.word	0x2400ba08
 8014190:	2400ba04 	.word	0x2400ba04
 8014194:	2400b9e8 	.word	0x2400b9e8
 8014198:	2400b978 	.word	0x2400b978
 801419c:	2400b97a 	.word	0x2400b97a
 80141a0:	2400b97c 	.word	0x2400b97c

080141a4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80141a4:	4a12      	ldr	r2, [pc, #72]	; (80141f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80141a6:	8803      	ldrh	r3, [r0, #0]
 80141a8:	8812      	ldrh	r2, [r2, #0]
 80141aa:	4293      	cmp	r3, r2
 80141ac:	d207      	bcs.n	80141be <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80141ae:	4a11      	ldr	r2, [pc, #68]	; (80141f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80141b0:	2114      	movs	r1, #20
 80141b2:	6812      	ldr	r2, [r2, #0]
 80141b4:	fb01 2303 	mla	r3, r1, r3, r2
 80141b8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80141bc:	4770      	bx	lr
 80141be:	490e      	ldr	r1, [pc, #56]	; (80141f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80141c0:	8809      	ldrh	r1, [r1, #0]
 80141c2:	4411      	add	r1, r2
 80141c4:	428b      	cmp	r3, r1
 80141c6:	da04      	bge.n	80141d2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80141c8:	1a9b      	subs	r3, r3, r2
 80141ca:	4a0c      	ldr	r2, [pc, #48]	; (80141fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80141cc:	210e      	movs	r1, #14
 80141ce:	6812      	ldr	r2, [r2, #0]
 80141d0:	e7f0      	b.n	80141b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80141d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d108      	bne.n	80141ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80141da:	4b09      	ldr	r3, [pc, #36]	; (8014200 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	b91b      	cbnz	r3, 80141e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80141e0:	4b08      	ldr	r3, [pc, #32]	; (8014204 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80141e2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80141e6:	4770      	bx	lr
 80141e8:	4b07      	ldr	r3, [pc, #28]	; (8014208 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80141ea:	e7fa      	b.n	80141e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80141ec:	2000      	movs	r0, #0
 80141ee:	4770      	bx	lr
 80141f0:	2400ba00 	.word	0x2400ba00
 80141f4:	2400ba08 	.word	0x2400ba08
 80141f8:	2400ba04 	.word	0x2400ba04
 80141fc:	2400b9e8 	.word	0x2400b9e8
 8014200:	2400b978 	.word	0x2400b978
 8014204:	2400b97c 	.word	0x2400b97c
 8014208:	2400b97a 	.word	0x2400b97a

0801420c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801420c:	4a1f      	ldr	r2, [pc, #124]	; (801428c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801420e:	b510      	push	{r4, lr}
 8014210:	880b      	ldrh	r3, [r1, #0]
 8014212:	8812      	ldrh	r2, [r2, #0]
 8014214:	4293      	cmp	r3, r2
 8014216:	d213      	bcs.n	8014240 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8014218:	4a1d      	ldr	r2, [pc, #116]	; (8014290 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801421a:	2114      	movs	r1, #20
 801421c:	6812      	ldr	r2, [r2, #0]
 801421e:	fb01 2303 	mla	r3, r1, r3, r2
 8014222:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8014226:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801422a:	8a1a      	ldrh	r2, [r3, #16]
 801422c:	8a5b      	ldrh	r3, [r3, #18]
 801422e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8014232:	8004      	strh	r4, [r0, #0]
 8014234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014238:	8041      	strh	r1, [r0, #2]
 801423a:	8082      	strh	r2, [r0, #4]
 801423c:	80c3      	strh	r3, [r0, #6]
 801423e:	e00e      	b.n	801425e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8014240:	4914      	ldr	r1, [pc, #80]	; (8014294 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8014242:	8809      	ldrh	r1, [r1, #0]
 8014244:	4411      	add	r1, r2
 8014246:	428b      	cmp	r3, r1
 8014248:	da0a      	bge.n	8014260 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801424a:	1a9b      	subs	r3, r3, r2
 801424c:	4a12      	ldr	r2, [pc, #72]	; (8014298 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801424e:	210e      	movs	r1, #14
 8014250:	6812      	ldr	r2, [r2, #0]
 8014252:	fb01 2303 	mla	r3, r1, r3, r2
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	6002      	str	r2, [r0, #0]
 801425a:	685a      	ldr	r2, [r3, #4]
 801425c:	6042      	str	r2, [r0, #4]
 801425e:	bd10      	pop	{r4, pc}
 8014260:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014264:	4293      	cmp	r3, r2
 8014266:	d10b      	bne.n	8014280 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8014268:	4b0c      	ldr	r3, [pc, #48]	; (801429c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801426a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801426e:	4b0c      	ldr	r3, [pc, #48]	; (80142a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8014270:	8081      	strh	r1, [r0, #4]
 8014272:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014276:	2300      	movs	r3, #0
 8014278:	80c2      	strh	r2, [r0, #6]
 801427a:	8003      	strh	r3, [r0, #0]
 801427c:	8043      	strh	r3, [r0, #2]
 801427e:	e7ee      	b.n	801425e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8014280:	2300      	movs	r3, #0
 8014282:	8003      	strh	r3, [r0, #0]
 8014284:	8043      	strh	r3, [r0, #2]
 8014286:	8083      	strh	r3, [r0, #4]
 8014288:	e7d8      	b.n	801423c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801428a:	bf00      	nop
 801428c:	2400ba00 	.word	0x2400ba00
 8014290:	2400ba08 	.word	0x2400ba08
 8014294:	2400ba04 	.word	0x2400ba04
 8014298:	2400b9e8 	.word	0x2400b9e8
 801429c:	2400b974 	.word	0x2400b974
 80142a0:	2400b976 	.word	0x2400b976

080142a4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80142a4:	4a12      	ldr	r2, [pc, #72]	; (80142f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80142a6:	8803      	ldrh	r3, [r0, #0]
 80142a8:	8811      	ldrh	r1, [r2, #0]
 80142aa:	428b      	cmp	r3, r1
 80142ac:	d20b      	bcs.n	80142c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80142ae:	4a11      	ldr	r2, [pc, #68]	; (80142f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80142b0:	6812      	ldr	r2, [r2, #0]
 80142b2:	b112      	cbz	r2, 80142ba <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80142b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80142b8:	b9c0      	cbnz	r0, 80142ec <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80142ba:	4a0f      	ldr	r2, [pc, #60]	; (80142f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80142bc:	6811      	ldr	r1, [r2, #0]
 80142be:	2214      	movs	r2, #20
 80142c0:	4353      	muls	r3, r2
 80142c2:	58c8      	ldr	r0, [r1, r3]
 80142c4:	4770      	bx	lr
 80142c6:	4a0d      	ldr	r2, [pc, #52]	; (80142fc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80142c8:	8812      	ldrh	r2, [r2, #0]
 80142ca:	440a      	add	r2, r1
 80142cc:	4293      	cmp	r3, r2
 80142ce:	da04      	bge.n	80142da <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80142d0:	4a08      	ldr	r2, [pc, #32]	; (80142f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80142d2:	6812      	ldr	r2, [r2, #0]
 80142d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80142d8:	4770      	bx	lr
 80142da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80142de:	4293      	cmp	r3, r2
 80142e0:	d103      	bne.n	80142ea <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80142e2:	4b07      	ldr	r3, [pc, #28]	; (8014300 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80142e8:	4770      	bx	lr
 80142ea:	2000      	movs	r0, #0
 80142ec:	4770      	bx	lr
 80142ee:	bf00      	nop
 80142f0:	2400ba00 	.word	0x2400ba00
 80142f4:	2400b9e4 	.word	0x2400b9e4
 80142f8:	2400ba08 	.word	0x2400ba08
 80142fc:	2400ba04 	.word	0x2400ba04
 8014300:	2400b980 	.word	0x2400b980

08014304 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8014304:	4b24      	ldr	r3, [pc, #144]	; (8014398 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8014306:	8802      	ldrh	r2, [r0, #0]
 8014308:	8818      	ldrh	r0, [r3, #0]
 801430a:	4282      	cmp	r2, r0
 801430c:	d221      	bcs.n	8014352 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801430e:	4b23      	ldr	r3, [pc, #140]	; (801439c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8014310:	6819      	ldr	r1, [r3, #0]
 8014312:	2314      	movs	r3, #20
 8014314:	fb03 1302 	mla	r3, r3, r2, r1
 8014318:	6858      	ldr	r0, [r3, #4]
 801431a:	2800      	cmp	r0, #0
 801431c:	d03a      	beq.n	8014394 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801431e:	4920      	ldr	r1, [pc, #128]	; (80143a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8014320:	6809      	ldr	r1, [r1, #0]
 8014322:	2900      	cmp	r1, #0
 8014324:	d036      	beq.n	8014394 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8014326:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801432a:	2900      	cmp	r1, #0
 801432c:	d032      	beq.n	8014394 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801432e:	891a      	ldrh	r2, [r3, #8]
 8014330:	8958      	ldrh	r0, [r3, #10]
 8014332:	4350      	muls	r0, r2
 8014334:	7c5a      	ldrb	r2, [r3, #17]
 8014336:	7cdb      	ldrb	r3, [r3, #19]
 8014338:	0952      	lsrs	r2, r2, #5
 801433a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801433e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8014342:	2b0b      	cmp	r3, #11
 8014344:	bf18      	it	ne
 8014346:	0040      	lslne	r0, r0, #1
 8014348:	3003      	adds	r0, #3
 801434a:	f020 0003 	bic.w	r0, r0, #3
 801434e:	4408      	add	r0, r1
 8014350:	4770      	bx	lr
 8014352:	4b14      	ldr	r3, [pc, #80]	; (80143a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	4403      	add	r3, r0
 8014358:	429a      	cmp	r2, r3
 801435a:	da1a      	bge.n	8014392 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801435c:	4b12      	ldr	r3, [pc, #72]	; (80143a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801435e:	1a10      	subs	r0, r2, r0
 8014360:	210e      	movs	r1, #14
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	fb01 3000 	mla	r0, r1, r0, r3
 8014368:	7b03      	ldrb	r3, [r0, #12]
 801436a:	f003 031f 	and.w	r3, r3, #31
 801436e:	2b0b      	cmp	r3, #11
 8014370:	d10b      	bne.n	801438a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8014372:	8903      	ldrh	r3, [r0, #8]
 8014374:	8940      	ldrh	r0, [r0, #10]
 8014376:	4358      	muls	r0, r3
 8014378:	4b09      	ldr	r3, [pc, #36]	; (80143a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801437a:	3003      	adds	r0, #3
 801437c:	6819      	ldr	r1, [r3, #0]
 801437e:	f020 0303 	bic.w	r3, r0, #3
 8014382:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8014386:	4418      	add	r0, r3
 8014388:	4770      	bx	lr
 801438a:	2b0d      	cmp	r3, #13
 801438c:	d101      	bne.n	8014392 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801438e:	300d      	adds	r0, #13
 8014390:	4770      	bx	lr
 8014392:	2000      	movs	r0, #0
 8014394:	4770      	bx	lr
 8014396:	bf00      	nop
 8014398:	2400ba00 	.word	0x2400ba00
 801439c:	2400ba08 	.word	0x2400ba08
 80143a0:	2400b9e4 	.word	0x2400b9e4
 80143a4:	2400ba04 	.word	0x2400ba04
 80143a8:	2400b9e8 	.word	0x2400b9e8

080143ac <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80143ac:	4a17      	ldr	r2, [pc, #92]	; (801440c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80143ae:	b510      	push	{r4, lr}
 80143b0:	8803      	ldrh	r3, [r0, #0]
 80143b2:	8812      	ldrh	r2, [r2, #0]
 80143b4:	4293      	cmp	r3, r2
 80143b6:	d20c      	bcs.n	80143d2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80143b8:	4a15      	ldr	r2, [pc, #84]	; (8014410 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80143ba:	2114      	movs	r1, #20
 80143bc:	6812      	ldr	r2, [r2, #0]
 80143be:	fb01 2303 	mla	r3, r1, r3, r2
 80143c2:	7c58      	ldrb	r0, [r3, #17]
 80143c4:	0942      	lsrs	r2, r0, #5
 80143c6:	7cd8      	ldrb	r0, [r3, #19]
 80143c8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80143cc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80143d0:	bd10      	pop	{r4, pc}
 80143d2:	4910      	ldr	r1, [pc, #64]	; (8014414 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80143d4:	8809      	ldrh	r1, [r1, #0]
 80143d6:	4411      	add	r1, r2
 80143d8:	428b      	cmp	r3, r1
 80143da:	da09      	bge.n	80143f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80143dc:	1a9b      	subs	r3, r3, r2
 80143de:	4a0e      	ldr	r2, [pc, #56]	; (8014418 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80143e0:	210e      	movs	r1, #14
 80143e2:	6812      	ldr	r2, [r2, #0]
 80143e4:	fb01 2303 	mla	r3, r1, r3, r2
 80143e8:	7b18      	ldrb	r0, [r3, #12]
 80143ea:	f000 001f 	and.w	r0, r0, #31
 80143ee:	e7ef      	b.n	80143d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80143f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d106      	bne.n	8014406 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80143f8:	f7fb fbce 	bl	800fb98 <_ZN8touchgfx3HAL3lcdEv>
 80143fc:	6803      	ldr	r3, [r0, #0]
 80143fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014404:	4718      	bx	r3
 8014406:	2000      	movs	r0, #0
 8014408:	e7e2      	b.n	80143d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801440a:	bf00      	nop
 801440c:	2400ba00 	.word	0x2400ba00
 8014410:	2400ba08 	.word	0x2400ba08
 8014414:	2400ba04 	.word	0x2400ba04
 8014418:	2400b9e8 	.word	0x2400b9e8

0801441c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801441c:	2018      	movs	r0, #24
 801441e:	4770      	bx	lr

08014420 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8014420:	2001      	movs	r0, #1
 8014422:	4770      	bx	lr

08014424 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8014424:	4b02      	ldr	r3, [pc, #8]	; (8014430 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8014426:	8818      	ldrh	r0, [r3, #0]
 8014428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801442c:	b280      	uxth	r0, r0
 801442e:	4770      	bx	lr
 8014430:	2400b97a 	.word	0x2400b97a

08014434 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014434:	2bff      	cmp	r3, #255	; 0xff
 8014436:	d040      	beq.n	80144ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8014438:	2a2c      	cmp	r2, #44	; 0x2c
 801443a:	d02a      	beq.n	8014492 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801443c:	d80f      	bhi.n	801445e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801443e:	2a08      	cmp	r2, #8
 8014440:	d037      	beq.n	80144b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014442:	d805      	bhi.n	8014450 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8014444:	2a04      	cmp	r2, #4
 8014446:	d032      	beq.n	80144ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8014448:	2a05      	cmp	r2, #5
 801444a:	d02e      	beq.n	80144aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801444c:	2000      	movs	r0, #0
 801444e:	4770      	bx	lr
 8014450:	2a0a      	cmp	r2, #10
 8014452:	d02e      	beq.n	80144b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014454:	d301      	bcc.n	801445a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8014456:	2a0b      	cmp	r2, #11
 8014458:	d1f8      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801445a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801445c:	4770      	bx	lr
 801445e:	2a30      	cmp	r2, #48	; 0x30
 8014460:	d029      	beq.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8014462:	d808      	bhi.n	8014476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8014464:	2a2e      	cmp	r2, #46	; 0x2e
 8014466:	684b      	ldr	r3, [r1, #4]
 8014468:	d01a      	beq.n	80144a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801446a:	d90b      	bls.n	8014484 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d1ec      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014472:	6a00      	ldr	r0, [r0, #32]
 8014474:	4770      	bx	lr
 8014476:	2a32      	cmp	r2, #50	; 0x32
 8014478:	d01d      	beq.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801447a:	d301      	bcc.n	8014480 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801447c:	2a33      	cmp	r2, #51	; 0x33
 801447e:	d1e5      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014480:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8014482:	4770      	bx	lr
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d0f3      	beq.n	8014472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801448a:	2b01      	cmp	r3, #1
 801448c:	d1de      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801448e:	6900      	ldr	r0, [r0, #16]
 8014490:	4770      	bx	lr
 8014492:	684b      	ldr	r3, [r1, #4]
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	b133      	cbz	r3, 80144a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8014498:	2b01      	cmp	r3, #1
 801449a:	d1d7      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801449c:	6880      	ldr	r0, [r0, #8]
 801449e:	4770      	bx	lr
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1d2      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144a6:	6980      	ldr	r0, [r0, #24]
 80144a8:	4770      	bx	lr
 80144aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80144ac:	4770      	bx	lr
 80144ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80144b0:	4770      	bx	lr
 80144b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80144b4:	4770      	bx	lr
 80144b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80144b8:	4770      	bx	lr
 80144ba:	2a2c      	cmp	r2, #44	; 0x2c
 80144bc:	d02a      	beq.n	8014514 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80144be:	d80f      	bhi.n	80144e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 80144c0:	2a08      	cmp	r2, #8
 80144c2:	d035      	beq.n	8014530 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80144c4:	d805      	bhi.n	80144d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80144c6:	2a04      	cmp	r2, #4
 80144c8:	d030      	beq.n	801452c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 80144ca:	2a05      	cmp	r2, #5
 80144cc:	d1be      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80144d0:	4770      	bx	lr
 80144d2:	2a0a      	cmp	r2, #10
 80144d4:	d02c      	beq.n	8014530 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80144d6:	d301      	bcc.n	80144dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 80144d8:	2a0b      	cmp	r2, #11
 80144da:	d1b7      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80144de:	4770      	bx	lr
 80144e0:	2a30      	cmp	r2, #48	; 0x30
 80144e2:	d027      	beq.n	8014534 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80144e4:	d808      	bhi.n	80144f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80144e6:	2a2e      	cmp	r2, #46	; 0x2e
 80144e8:	684b      	ldr	r3, [r1, #4]
 80144ea:	d01a      	beq.n	8014522 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80144ec:	d90b      	bls.n	8014506 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d1ab      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80144f6:	4770      	bx	lr
 80144f8:	2a32      	cmp	r2, #50	; 0x32
 80144fa:	d01b      	beq.n	8014534 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80144fc:	d301      	bcc.n	8014502 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 80144fe:	2a33      	cmp	r2, #51	; 0x33
 8014500:	d1a4      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014502:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014504:	4770      	bx	lr
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d0f3      	beq.n	80144f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801450c:	2b01      	cmp	r3, #1
 801450e:	d19d      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014510:	6940      	ldr	r0, [r0, #20]
 8014512:	4770      	bx	lr
 8014514:	684b      	ldr	r3, [r1, #4]
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	b133      	cbz	r3, 8014528 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801451a:	2b01      	cmp	r3, #1
 801451c:	d196      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801451e:	68c0      	ldr	r0, [r0, #12]
 8014520:	4770      	bx	lr
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d191      	bne.n	801444c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014528:	69c0      	ldr	r0, [r0, #28]
 801452a:	4770      	bx	lr
 801452c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801452e:	4770      	bx	lr
 8014530:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8014532:	4770      	bx	lr
 8014534:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014536:	4770      	bx	lr

08014538 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801453c:	b085      	sub	sp, #20
 801453e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014540:	9203      	str	r2, [sp, #12]
 8014542:	6870      	ldr	r0, [r6, #4]
 8014544:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014548:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801454c:	9101      	str	r1, [sp, #4]
 801454e:	fa1f f885 	uxth.w	r8, r5
 8014552:	43ed      	mvns	r5, r5
 8014554:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014558:	b2ed      	uxtb	r5, r5
 801455a:	fb00 2404 	mla	r4, r0, r4, r2
 801455e:	6832      	ldr	r2, [r6, #0]
 8014560:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014564:	4414      	add	r4, r2
 8014566:	f8dc 2000 	ldr.w	r2, [ip]
 801456a:	9202      	str	r2, [sp, #8]
 801456c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014570:	f102 0e04 	add.w	lr, r2, #4
 8014574:	9a01      	ldr	r2, [sp, #4]
 8014576:	2a00      	cmp	r2, #0
 8014578:	dc03      	bgt.n	8014582 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801457a:	9a03      	ldr	r2, [sp, #12]
 801457c:	2a00      	cmp	r2, #0
 801457e:	f340 8116 	ble.w	80147ae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8014582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014584:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8014588:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801458c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801458e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8014592:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014596:	2b00      	cmp	r3, #0
 8014598:	dd0e      	ble.n	80145b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801459a:	1406      	asrs	r6, r0, #16
 801459c:	d405      	bmi.n	80145aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801459e:	4556      	cmp	r6, sl
 80145a0:	da03      	bge.n	80145aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80145a2:	1416      	asrs	r6, r2, #16
 80145a4:	d401      	bmi.n	80145aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80145a6:	454e      	cmp	r6, r9
 80145a8:	db07      	blt.n	80145ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80145aa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80145ac:	3b01      	subs	r3, #1
 80145ae:	3403      	adds	r4, #3
 80145b0:	4430      	add	r0, r6
 80145b2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80145b4:	4432      	add	r2, r6
 80145b6:	e7ee      	b.n	8014596 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80145b8:	d063      	beq.n	8014682 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80145ba:	1e5e      	subs	r6, r3, #1
 80145bc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80145be:	fb07 0706 	mla	r7, r7, r6, r0
 80145c2:	143f      	asrs	r7, r7, #16
 80145c4:	d454      	bmi.n	8014670 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80145c6:	4557      	cmp	r7, sl
 80145c8:	da52      	bge.n	8014670 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80145ca:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80145cc:	fb07 2606 	mla	r6, r7, r6, r2
 80145d0:	1436      	asrs	r6, r6, #16
 80145d2:	d44d      	bmi.n	8014670 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80145d4:	454e      	cmp	r6, r9
 80145d6:	da4b      	bge.n	8014670 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80145d8:	1ce6      	adds	r6, r4, #3
 80145da:	4699      	mov	r9, r3
 80145dc:	f1b9 0f00 	cmp.w	r9, #0
 80145e0:	f106 0603 	add.w	r6, r6, #3
 80145e4:	dd48      	ble.n	8014678 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80145e6:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80145ea:	1417      	asrs	r7, r2, #16
 80145ec:	9902      	ldr	r1, [sp, #8]
 80145ee:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80145f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80145f6:	fb0b 1707 	mla	r7, fp, r7, r1
 80145fa:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80145fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014600:	f817 700a 	ldrb.w	r7, [r7, sl]
 8014604:	fb1b fb05 	smulbb	fp, fp, r5
 8014608:	4408      	add	r0, r1
 801460a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801460c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014610:	440a      	add	r2, r1
 8014612:	eb0e 0a07 	add.w	sl, lr, r7
 8014616:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801461a:	fb07 b708 	mla	r7, r7, r8, fp
 801461e:	b2bf      	uxth	r7, r7
 8014620:	f107 0b01 	add.w	fp, r7, #1
 8014624:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014628:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801462c:	fb1b fb05 	smulbb	fp, fp, r5
 8014630:	123f      	asrs	r7, r7, #8
 8014632:	f806 7c06 	strb.w	r7, [r6, #-6]
 8014636:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801463a:	fb07 b708 	mla	r7, r7, r8, fp
 801463e:	b2bf      	uxth	r7, r7
 8014640:	f107 0b01 	add.w	fp, r7, #1
 8014644:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014648:	123f      	asrs	r7, r7, #8
 801464a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801464e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8014652:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8014656:	fb1a fa05 	smulbb	sl, sl, r5
 801465a:	fb07 a708 	mla	r7, r7, r8, sl
 801465e:	b2bf      	uxth	r7, r7
 8014660:	f107 0a01 	add.w	sl, r7, #1
 8014664:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014668:	123f      	asrs	r7, r7, #8
 801466a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801466e:	e7b5      	b.n	80145dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8014670:	2700      	movs	r7, #0
 8014672:	1bde      	subs	r6, r3, r7
 8014674:	2e00      	cmp	r6, #0
 8014676:	dc42      	bgt.n	80146fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8014678:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801467c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014680:	441c      	add	r4, r3
 8014682:	9b01      	ldr	r3, [sp, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	f340 8092 	ble.w	80147ae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801468a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801468e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014690:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014694:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014698:	eef0 6a62 	vmov.f32	s13, s5
 801469c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80146a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80146a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80146a8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80146ac:	eef0 6a43 	vmov.f32	s13, s6
 80146b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80146b4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80146b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80146bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80146c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80146c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80146c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80146cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80146d0:	ee12 2a90 	vmov	r2, s5
 80146d4:	eef0 2a47 	vmov.f32	s5, s14
 80146d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80146dc:	ee13 2a10 	vmov	r2, s6
 80146e0:	9311      	str	r3, [sp, #68]	; 0x44
 80146e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146e4:	eeb0 3a67 	vmov.f32	s6, s15
 80146e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80146ec:	9312      	str	r3, [sp, #72]	; 0x48
 80146ee:	9b01      	ldr	r3, [sp, #4]
 80146f0:	9a03      	ldr	r2, [sp, #12]
 80146f2:	3b01      	subs	r3, #1
 80146f4:	9301      	str	r3, [sp, #4]
 80146f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146f8:	bf08      	it	eq
 80146fa:	4613      	moveq	r3, r2
 80146fc:	e73a      	b.n	8014574 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80146fe:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8014702:	d44e      	bmi.n	80147a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014704:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014708:	4556      	cmp	r6, sl
 801470a:	dd4a      	ble.n	80147a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801470c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8014710:	d447      	bmi.n	80147a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014712:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014716:	4559      	cmp	r1, fp
 8014718:	dd43      	ble.n	80147a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801471a:	fa0f f986 	sxth.w	r9, r6
 801471e:	9902      	ldr	r1, [sp, #8]
 8014720:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014724:	fb0b 1909 	mla	r9, fp, r9, r1
 8014728:	f814 b006 	ldrb.w	fp, [r4, r6]
 801472c:	f819 900a 	ldrb.w	r9, [r9, sl]
 8014730:	fb1b fb05 	smulbb	fp, fp, r5
 8014734:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014738:	eb0e 0a09 	add.w	sl, lr, r9
 801473c:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8014740:	fb09 b908 	mla	r9, r9, r8, fp
 8014744:	fa1f f989 	uxth.w	r9, r9
 8014748:	f109 0b01 	add.w	fp, r9, #1
 801474c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014750:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014754:	f804 9006 	strb.w	r9, [r4, r6]
 8014758:	4426      	add	r6, r4
 801475a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801475e:	f896 b001 	ldrb.w	fp, [r6, #1]
 8014762:	fb1b fb05 	smulbb	fp, fp, r5
 8014766:	fb09 b908 	mla	r9, r9, r8, fp
 801476a:	fa1f f989 	uxth.w	r9, r9
 801476e:	f109 0b01 	add.w	fp, r9, #1
 8014772:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014776:	ea4f 2929 	mov.w	r9, r9, asr #8
 801477a:	f886 9001 	strb.w	r9, [r6, #1]
 801477e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014782:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014786:	fb1a fa05 	smulbb	sl, sl, r5
 801478a:	fb09 a908 	mla	r9, r9, r8, sl
 801478e:	fa1f f989 	uxth.w	r9, r9
 8014792:	f109 0a01 	add.w	sl, r9, #1
 8014796:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801479a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801479e:	f886 9002 	strb.w	r9, [r6, #2]
 80147a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80147a4:	3701      	adds	r7, #1
 80147a6:	4408      	add	r0, r1
 80147a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80147aa:	440a      	add	r2, r1
 80147ac:	e761      	b.n	8014672 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80147ae:	b005      	add	sp, #20
 80147b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080147b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80147b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80147ba:	4693      	mov	fp, r2
 80147bc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80147be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80147c2:	6868      	ldr	r0, [r5, #4]
 80147c4:	6877      	ldr	r7, [r6, #4]
 80147c6:	9100      	str	r1, [sp, #0]
 80147c8:	3704      	adds	r7, #4
 80147ca:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80147ce:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80147d2:	fb00 2404 	mla	r4, r0, r4, r2
 80147d6:	682a      	ldr	r2, [r5, #0]
 80147d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80147dc:	4414      	add	r4, r2
 80147de:	6832      	ldr	r2, [r6, #0]
 80147e0:	9201      	str	r2, [sp, #4]
 80147e2:	9a00      	ldr	r2, [sp, #0]
 80147e4:	2a00      	cmp	r2, #0
 80147e6:	dc03      	bgt.n	80147f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80147e8:	f1bb 0f00 	cmp.w	fp, #0
 80147ec:	f340 80bc 	ble.w	8014968 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80147f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147f2:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80147f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80147fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80147fc:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8014800:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014804:	2b00      	cmp	r3, #0
 8014806:	dd0c      	ble.n	8014822 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014808:	1405      	asrs	r5, r0, #16
 801480a:	d405      	bmi.n	8014818 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801480c:	4555      	cmp	r5, sl
 801480e:	da03      	bge.n	8014818 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014810:	1415      	asrs	r5, r2, #16
 8014812:	d401      	bmi.n	8014818 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014814:	454d      	cmp	r5, r9
 8014816:	db05      	blt.n	8014824 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014818:	4440      	add	r0, r8
 801481a:	4472      	add	r2, lr
 801481c:	3b01      	subs	r3, #1
 801481e:	3403      	adds	r4, #3
 8014820:	e7f0      	b.n	8014804 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8014822:	d03f      	beq.n	80148a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8014824:	1e5d      	subs	r5, r3, #1
 8014826:	fb08 0c05 	mla	ip, r8, r5, r0
 801482a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801482e:	d42e      	bmi.n	801488e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014830:	45d4      	cmp	ip, sl
 8014832:	da2c      	bge.n	801488e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014834:	fb0e 2505 	mla	r5, lr, r5, r2
 8014838:	142d      	asrs	r5, r5, #16
 801483a:	d428      	bmi.n	801488e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801483c:	454d      	cmp	r5, r9
 801483e:	da26      	bge.n	801488e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014840:	1ce5      	adds	r5, r4, #3
 8014842:	469c      	mov	ip, r3
 8014844:	f1bc 0f00 	cmp.w	ip, #0
 8014848:	f105 0503 	add.w	r5, r5, #3
 801484c:	dd25      	ble.n	801489a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801484e:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014852:	ea4f 4922 	mov.w	r9, r2, asr #16
 8014856:	f10c 3cff 	add.w	ip, ip, #4294967295
 801485a:	4472      	add	r2, lr
 801485c:	468a      	mov	sl, r1
 801485e:	9901      	ldr	r1, [sp, #4]
 8014860:	fb0a 1909 	mla	r9, sl, r9, r1
 8014864:	1401      	asrs	r1, r0, #16
 8014866:	4440      	add	r0, r8
 8014868:	f819 9001 	ldrb.w	r9, [r9, r1]
 801486c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014870:	eb07 0a09 	add.w	sl, r7, r9
 8014874:	f817 9009 	ldrb.w	r9, [r7, r9]
 8014878:	f805 9c06 	strb.w	r9, [r5, #-6]
 801487c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8014880:	f805 9c05 	strb.w	r9, [r5, #-5]
 8014884:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014888:	f805 9c04 	strb.w	r9, [r5, #-4]
 801488c:	e7da      	b.n	8014844 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801488e:	2500      	movs	r5, #0
 8014890:	eba3 0c05 	sub.w	ip, r3, r5
 8014894:	f1bc 0f00 	cmp.w	ip, #0
 8014898:	dc3b      	bgt.n	8014912 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801489a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801489e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80148a2:	441c      	add	r4, r3
 80148a4:	9b00      	ldr	r3, [sp, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	dd5e      	ble.n	8014968 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80148aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80148ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80148b4:	eeb0 6a62 	vmov.f32	s12, s5
 80148b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80148bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80148c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80148c4:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80148c8:	eeb0 6a43 	vmov.f32	s12, s6
 80148cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80148d0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80148d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80148d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80148dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80148e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80148e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80148e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80148ec:	ee12 2a90 	vmov	r2, s5
 80148f0:	eef0 2a47 	vmov.f32	s5, s14
 80148f4:	fb92 f8f3 	sdiv	r8, r2, r3
 80148f8:	ee13 2a10 	vmov	r2, s6
 80148fc:	eeb0 3a67 	vmov.f32	s6, s15
 8014900:	fb92 fef3 	sdiv	lr, r2, r3
 8014904:	9b00      	ldr	r3, [sp, #0]
 8014906:	3b01      	subs	r3, #1
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801490c:	bf08      	it	eq
 801490e:	465b      	moveq	r3, fp
 8014910:	e767      	b.n	80147e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8014912:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014916:	d423      	bmi.n	8014960 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014918:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801491c:	45cc      	cmp	ip, r9
 801491e:	dd1f      	ble.n	8014960 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014920:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014924:	d41c      	bmi.n	8014960 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014926:	68f1      	ldr	r1, [r6, #12]
 8014928:	4551      	cmp	r1, sl
 801492a:	dd19      	ble.n	8014960 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801492c:	fa0f fc8c 	sxth.w	ip, ip
 8014930:	9901      	ldr	r1, [sp, #4]
 8014932:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8014936:	f81c c009 	ldrb.w	ip, [ip, r9]
 801493a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801493e:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8014942:	eb07 090c 	add.w	r9, r7, ip
 8014946:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801494a:	f804 a00c 	strb.w	sl, [r4, ip]
 801494e:	44a4      	add	ip, r4
 8014950:	f899 a001 	ldrb.w	sl, [r9, #1]
 8014954:	f88c a001 	strb.w	sl, [ip, #1]
 8014958:	f899 9002 	ldrb.w	r9, [r9, #2]
 801495c:	f88c 9002 	strb.w	r9, [ip, #2]
 8014960:	4440      	add	r0, r8
 8014962:	4472      	add	r2, lr
 8014964:	3501      	adds	r5, #1
 8014966:	e793      	b.n	8014890 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8014968:	b003      	add	sp, #12
 801496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801496e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801496e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014972:	b085      	sub	sp, #20
 8014974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014978:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801497a:	9202      	str	r2, [sp, #8]
 801497c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8014980:	6860      	ldr	r0, [r4, #4]
 8014982:	9203      	str	r2, [sp, #12]
 8014984:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014988:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801498c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014990:	fb00 2505 	mla	r5, r0, r5, r2
 8014994:	6822      	ldr	r2, [r4, #0]
 8014996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801499a:	4415      	add	r5, r2
 801499c:	f8dc 2000 	ldr.w	r2, [ip]
 80149a0:	9200      	str	r2, [sp, #0]
 80149a2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80149a6:	3204      	adds	r2, #4
 80149a8:	9201      	str	r2, [sp, #4]
 80149aa:	2900      	cmp	r1, #0
 80149ac:	dc03      	bgt.n	80149b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80149ae:	9a02      	ldr	r2, [sp, #8]
 80149b0:	2a00      	cmp	r2, #0
 80149b2:	f340 8127 	ble.w	8014c04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80149b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149b8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80149bc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80149c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80149c2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80149c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	dd0d      	ble.n	80149ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80149ce:	1422      	asrs	r2, r4, #16
 80149d0:	d405      	bmi.n	80149de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80149d2:	4542      	cmp	r2, r8
 80149d4:	da03      	bge.n	80149de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80149d6:	1402      	asrs	r2, r0, #16
 80149d8:	d401      	bmi.n	80149de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80149da:	42ba      	cmp	r2, r7
 80149dc:	db06      	blt.n	80149ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80149de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80149e0:	4474      	add	r4, lr
 80149e2:	3b01      	subs	r3, #1
 80149e4:	3503      	adds	r5, #3
 80149e6:	4410      	add	r0, r2
 80149e8:	e7ef      	b.n	80149ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80149ea:	d075      	beq.n	8014ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80149ec:	1e5a      	subs	r2, r3, #1
 80149ee:	fb0e 4602 	mla	r6, lr, r2, r4
 80149f2:	1436      	asrs	r6, r6, #16
 80149f4:	d465      	bmi.n	8014ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80149f6:	4546      	cmp	r6, r8
 80149f8:	da63      	bge.n	8014ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80149fa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80149fc:	fb06 0202 	mla	r2, r6, r2, r0
 8014a00:	1412      	asrs	r2, r2, #16
 8014a02:	d45e      	bmi.n	8014ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014a04:	42ba      	cmp	r2, r7
 8014a06:	da5c      	bge.n	8014ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014a08:	1cef      	adds	r7, r5, #3
 8014a0a:	4699      	mov	r9, r3
 8014a0c:	f1b9 0f00 	cmp.w	r9, #0
 8014a10:	dd5d      	ble.n	8014ace <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8014a12:	1402      	asrs	r2, r0, #16
 8014a14:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014a18:	1426      	asrs	r6, r4, #16
 8014a1a:	4692      	mov	sl, r2
 8014a1c:	9a00      	ldr	r2, [sp, #0]
 8014a1e:	fb08 220a 	mla	r2, r8, sl, r2
 8014a22:	5d92      	ldrb	r2, [r2, r6]
 8014a24:	9e01      	ldr	r6, [sp, #4]
 8014a26:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014a2a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8014a2e:	d041      	beq.n	8014ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014a30:	9a03      	ldr	r2, [sp, #12]
 8014a32:	fa5f fb86 	uxtb.w	fp, r6
 8014a36:	fb02 f808 	mul.w	r8, r2, r8
 8014a3a:	f108 0201 	add.w	r2, r8, #1
 8014a3e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8014a42:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014a46:	1212      	asrs	r2, r2, #8
 8014a48:	fa1f fa82 	uxth.w	sl, r2
 8014a4c:	43d2      	mvns	r2, r2
 8014a4e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014a52:	b2d2      	uxtb	r2, r2
 8014a54:	fb08 b802 	mla	r8, r8, r2, fp
 8014a58:	fa1f f888 	uxth.w	r8, r8
 8014a5c:	f108 0b01 	add.w	fp, r8, #1
 8014a60:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014a64:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014a68:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014a6c:	fb1b fb0a 	smulbb	fp, fp, sl
 8014a70:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014a74:	fb16 fa0a 	smulbb	sl, r6, sl
 8014a78:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014a7c:	f807 8c03 	strb.w	r8, [r7, #-3]
 8014a80:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014a84:	fb06 aa02 	mla	sl, r6, r2, sl
 8014a88:	fb08 b802 	mla	r8, r8, r2, fp
 8014a8c:	fa1f fa8a 	uxth.w	sl, sl
 8014a90:	fa1f f888 	uxth.w	r8, r8
 8014a94:	f10a 0601 	add.w	r6, sl, #1
 8014a98:	f108 0b01 	add.w	fp, r8, #1
 8014a9c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8014aa0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014aa4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014aa8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014aac:	f807 ac01 	strb.w	sl, [r7, #-1]
 8014ab0:	f807 8c02 	strb.w	r8, [r7, #-2]
 8014ab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ab6:	4474      	add	r4, lr
 8014ab8:	3703      	adds	r7, #3
 8014aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8014abe:	4410      	add	r0, r2
 8014ac0:	e7a4      	b.n	8014a0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014ac2:	f04f 0800 	mov.w	r8, #0
 8014ac6:	eba3 0208 	sub.w	r2, r3, r8
 8014aca:	2a00      	cmp	r2, #0
 8014acc:	dc3b      	bgt.n	8014b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8014ace:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ad6:	441d      	add	r5, r3
 8014ad8:	2900      	cmp	r1, #0
 8014ada:	f340 8093 	ble.w	8014c04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014ade:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ae4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014ae8:	3901      	subs	r1, #1
 8014aea:	eeb0 6a62 	vmov.f32	s12, s5
 8014aee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014af2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014af6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014afa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014afe:	eeb0 6a43 	vmov.f32	s12, s6
 8014b02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b06:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014b0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014b0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014b12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014b16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014b1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014b1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014b22:	ee12 2a90 	vmov	r2, s5
 8014b26:	eef0 2a47 	vmov.f32	s5, s14
 8014b2a:	fb92 fef3 	sdiv	lr, r2, r3
 8014b2e:	ee13 2a10 	vmov	r2, s6
 8014b32:	eeb0 3a67 	vmov.f32	s6, s15
 8014b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b3a:	9a02      	ldr	r2, [sp, #8]
 8014b3c:	9312      	str	r3, [sp, #72]	; 0x48
 8014b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b40:	bf08      	it	eq
 8014b42:	4613      	moveq	r3, r2
 8014b44:	e731      	b.n	80149aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014b46:	1427      	asrs	r7, r4, #16
 8014b48:	d456      	bmi.n	8014bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014b4a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014b4e:	42be      	cmp	r6, r7
 8014b50:	dd52      	ble.n	8014bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014b52:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014b56:	d44f      	bmi.n	8014bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014b58:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014b5c:	454a      	cmp	r2, r9
 8014b5e:	dd4b      	ble.n	8014bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014b60:	9a00      	ldr	r2, [sp, #0]
 8014b62:	b236      	sxth	r6, r6
 8014b64:	fb09 2606 	mla	r6, r9, r6, r2
 8014b68:	5df2      	ldrb	r2, [r6, r7]
 8014b6a:	9e01      	ldr	r6, [sp, #4]
 8014b6c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8014b70:	0e3a      	lsrs	r2, r7, #24
 8014b72:	d041      	beq.n	8014bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014b74:	9e03      	ldr	r6, [sp, #12]
 8014b76:	fa5f fb87 	uxtb.w	fp, r7
 8014b7a:	4372      	muls	r2, r6
 8014b7c:	1c56      	adds	r6, r2, #1
 8014b7e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014b82:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014b86:	1212      	asrs	r2, r2, #8
 8014b88:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014b8c:	fa1f fa82 	uxth.w	sl, r2
 8014b90:	43d2      	mvns	r2, r2
 8014b92:	fb1b fb0a 	smulbb	fp, fp, sl
 8014b96:	b2d2      	uxtb	r2, r2
 8014b98:	fb09 b902 	mla	r9, r9, r2, fp
 8014b9c:	fa1f f989 	uxth.w	r9, r9
 8014ba0:	f109 0b01 	add.w	fp, r9, #1
 8014ba4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014ba8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014bac:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014bb0:	fb1b fb0a 	smulbb	fp, fp, sl
 8014bb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014bb8:	fb17 fa0a 	smulbb	sl, r7, sl
 8014bbc:	f805 9006 	strb.w	r9, [r5, r6]
 8014bc0:	442e      	add	r6, r5
 8014bc2:	78b7      	ldrb	r7, [r6, #2]
 8014bc4:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014bc8:	fb07 aa02 	mla	sl, r7, r2, sl
 8014bcc:	fb09 b902 	mla	r9, r9, r2, fp
 8014bd0:	fa1f fa8a 	uxth.w	sl, sl
 8014bd4:	fa1f f989 	uxth.w	r9, r9
 8014bd8:	f10a 0701 	add.w	r7, sl, #1
 8014bdc:	f109 0b01 	add.w	fp, r9, #1
 8014be0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014be4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014be8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014bec:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014bf0:	f886 a002 	strb.w	sl, [r6, #2]
 8014bf4:	f886 9001 	strb.w	r9, [r6, #1]
 8014bf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bfa:	4474      	add	r4, lr
 8014bfc:	f108 0801 	add.w	r8, r8, #1
 8014c00:	4410      	add	r0, r2
 8014c02:	e760      	b.n	8014ac6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8014c04:	b005      	add	sp, #20
 8014c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0e:	b085      	sub	sp, #20
 8014c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014c16:	9203      	str	r2, [sp, #12]
 8014c18:	6868      	ldr	r0, [r5, #4]
 8014c1a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014c1e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014c22:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014c26:	fb00 2404 	mla	r4, r0, r4, r2
 8014c2a:	682a      	ldr	r2, [r5, #0]
 8014c2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014c30:	4414      	add	r4, r2
 8014c32:	f8dc 2000 	ldr.w	r2, [ip]
 8014c36:	9201      	str	r2, [sp, #4]
 8014c38:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014c3c:	3204      	adds	r2, #4
 8014c3e:	9202      	str	r2, [sp, #8]
 8014c40:	2900      	cmp	r1, #0
 8014c42:	dc03      	bgt.n	8014c4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014c44:	9a03      	ldr	r2, [sp, #12]
 8014c46:	2a00      	cmp	r2, #0
 8014c48:	f340 8137 	ble.w	8014eba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c4e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014c52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014c56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c58:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014c5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	dd0d      	ble.n	8014c80 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c64:	1405      	asrs	r5, r0, #16
 8014c66:	d405      	bmi.n	8014c74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014c68:	4545      	cmp	r5, r8
 8014c6a:	da03      	bge.n	8014c74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014c6c:	1415      	asrs	r5, r2, #16
 8014c6e:	d401      	bmi.n	8014c74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014c70:	42bd      	cmp	r5, r7
 8014c72:	db06      	blt.n	8014c82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014c74:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014c76:	4470      	add	r0, lr
 8014c78:	3b01      	subs	r3, #1
 8014c7a:	3403      	adds	r4, #3
 8014c7c:	442a      	add	r2, r5
 8014c7e:	e7ef      	b.n	8014c60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8014c80:	d070      	beq.n	8014d64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8014c82:	1e5d      	subs	r5, r3, #1
 8014c84:	fb0e 0605 	mla	r6, lr, r5, r0
 8014c88:	1436      	asrs	r6, r6, #16
 8014c8a:	d462      	bmi.n	8014d52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c8c:	4546      	cmp	r6, r8
 8014c8e:	da60      	bge.n	8014d52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c90:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014c92:	fb06 2505 	mla	r5, r6, r5, r2
 8014c96:	142d      	asrs	r5, r5, #16
 8014c98:	d45b      	bmi.n	8014d52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c9a:	42bd      	cmp	r5, r7
 8014c9c:	da59      	bge.n	8014d52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c9e:	1ce5      	adds	r5, r4, #3
 8014ca0:	469a      	mov	sl, r3
 8014ca2:	f1ba 0f00 	cmp.w	sl, #0
 8014ca6:	dd58      	ble.n	8014d5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8014ca8:	1416      	asrs	r6, r2, #16
 8014caa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014cae:	1407      	asrs	r7, r0, #16
 8014cb0:	46b1      	mov	r9, r6
 8014cb2:	9e01      	ldr	r6, [sp, #4]
 8014cb4:	fb08 6609 	mla	r6, r8, r9, r6
 8014cb8:	5df6      	ldrb	r6, [r6, r7]
 8014cba:	9f02      	ldr	r7, [sp, #8]
 8014cbc:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8014cc0:	0e37      	lsrs	r7, r6, #24
 8014cc2:	2fff      	cmp	r7, #255	; 0xff
 8014cc4:	f000 80f0 	beq.w	8014ea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8014cc8:	fa5f f887 	uxtb.w	r8, r7
 8014ccc:	b3d7      	cbz	r7, 8014d44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014cce:	fa1f f788 	uxth.w	r7, r8
 8014cd2:	ea6f 0808 	mvn.w	r8, r8
 8014cd6:	fa5f fb86 	uxtb.w	fp, r6
 8014cda:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8014cde:	fa5f f888 	uxtb.w	r8, r8
 8014ce2:	fb1b fb07 	smulbb	fp, fp, r7
 8014ce6:	fb09 b908 	mla	r9, r9, r8, fp
 8014cea:	fa1f f989 	uxth.w	r9, r9
 8014cee:	f109 0b01 	add.w	fp, r9, #1
 8014cf2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014cf6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8014cfa:	fb1b fb08 	smulbb	fp, fp, r8
 8014cfe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014d02:	f805 9c03 	strb.w	r9, [r5, #-3]
 8014d06:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8014d0a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014d0e:	fb09 b907 	mla	r9, r9, r7, fp
 8014d12:	fa1f f989 	uxth.w	r9, r9
 8014d16:	f109 0b01 	add.w	fp, r9, #1
 8014d1a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014d1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014d22:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014d26:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8014d2a:	fb19 f808 	smulbb	r8, r9, r8
 8014d2e:	fb06 8607 	mla	r6, r6, r7, r8
 8014d32:	b2b6      	uxth	r6, r6
 8014d34:	f106 0801 	add.w	r8, r6, #1
 8014d38:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8014d3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014d40:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014d44:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014d46:	4470      	add	r0, lr
 8014d48:	3503      	adds	r5, #3
 8014d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d4e:	4432      	add	r2, r6
 8014d50:	e7a7      	b.n	8014ca2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014d52:	2600      	movs	r6, #0
 8014d54:	1b9d      	subs	r5, r3, r6
 8014d56:	2d00      	cmp	r5, #0
 8014d58:	dc3b      	bgt.n	8014dd2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014d5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014d5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d62:	441c      	add	r4, r3
 8014d64:	2900      	cmp	r1, #0
 8014d66:	f340 80a8 	ble.w	8014eba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014d6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014d74:	3901      	subs	r1, #1
 8014d76:	eeb0 6a62 	vmov.f32	s12, s5
 8014d7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014d7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014d82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014d8a:	eeb0 6a43 	vmov.f32	s12, s6
 8014d8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d92:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014d96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014d9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014d9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014da2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014da6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014daa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014dae:	ee12 2a90 	vmov	r2, s5
 8014db2:	eef0 2a47 	vmov.f32	s5, s14
 8014db6:	fb92 fef3 	sdiv	lr, r2, r3
 8014dba:	ee13 2a10 	vmov	r2, s6
 8014dbe:	eeb0 3a67 	vmov.f32	s6, s15
 8014dc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8014dc6:	9a03      	ldr	r2, [sp, #12]
 8014dc8:	9312      	str	r3, [sp, #72]	; 0x48
 8014dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dcc:	bf08      	it	eq
 8014dce:	4613      	moveq	r3, r2
 8014dd0:	e736      	b.n	8014c40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014dd2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014dd6:	d457      	bmi.n	8014e88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014dd8:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8014ddc:	4547      	cmp	r7, r8
 8014dde:	dd53      	ble.n	8014e88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014de0:	ea5f 4922 	movs.w	r9, r2, asr #16
 8014de4:	d450      	bmi.n	8014e88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014de6:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8014dea:	454d      	cmp	r5, r9
 8014dec:	dd4c      	ble.n	8014e88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014dee:	9d01      	ldr	r5, [sp, #4]
 8014df0:	b23f      	sxth	r7, r7
 8014df2:	fb09 5707 	mla	r7, r9, r7, r5
 8014df6:	f817 5008 	ldrb.w	r5, [r7, r8]
 8014dfa:	9f02      	ldr	r7, [sp, #8]
 8014dfc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8014e00:	0e2f      	lsrs	r7, r5, #24
 8014e02:	2fff      	cmp	r7, #255	; 0xff
 8014e04:	d045      	beq.n	8014e92 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014e06:	fa5f f987 	uxtb.w	r9, r7
 8014e0a:	b3ef      	cbz	r7, 8014e88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014e0c:	fa1f f889 	uxth.w	r8, r9
 8014e10:	ea6f 0909 	mvn.w	r9, r9
 8014e14:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014e18:	fa5f fb85 	uxtb.w	fp, r5
 8014e1c:	f814 a007 	ldrb.w	sl, [r4, r7]
 8014e20:	fa5f f989 	uxtb.w	r9, r9
 8014e24:	fb1b fb08 	smulbb	fp, fp, r8
 8014e28:	fb0a ba09 	mla	sl, sl, r9, fp
 8014e2c:	fa1f fa8a 	uxth.w	sl, sl
 8014e30:	f10a 0b01 	add.w	fp, sl, #1
 8014e34:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014e38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014e3c:	f804 a007 	strb.w	sl, [r4, r7]
 8014e40:	4427      	add	r7, r4
 8014e42:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014e46:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8014e4a:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014e4e:	fb1b fb09 	smulbb	fp, fp, r9
 8014e52:	fb0a ba08 	mla	sl, sl, r8, fp
 8014e56:	fa1f fa8a 	uxth.w	sl, sl
 8014e5a:	f10a 0b01 	add.w	fp, sl, #1
 8014e5e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014e62:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014e66:	f887 a001 	strb.w	sl, [r7, #1]
 8014e6a:	f897 a002 	ldrb.w	sl, [r7, #2]
 8014e6e:	fb1a f909 	smulbb	r9, sl, r9
 8014e72:	fb05 9508 	mla	r5, r5, r8, r9
 8014e76:	b2ad      	uxth	r5, r5
 8014e78:	f105 0901 	add.w	r9, r5, #1
 8014e7c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8014e80:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e84:	f887 9002 	strb.w	r9, [r7, #2]
 8014e88:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014e8a:	4470      	add	r0, lr
 8014e8c:	3601      	adds	r6, #1
 8014e8e:	442a      	add	r2, r5
 8014e90:	e760      	b.n	8014d54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014e92:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014e96:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8014e9a:	55e5      	strb	r5, [r4, r7]
 8014e9c:	4427      	add	r7, r4
 8014e9e:	0c2d      	lsrs	r5, r5, #16
 8014ea0:	f887 8001 	strb.w	r8, [r7, #1]
 8014ea4:	70bd      	strb	r5, [r7, #2]
 8014ea6:	e7ef      	b.n	8014e88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014ea8:	0a37      	lsrs	r7, r6, #8
 8014eaa:	f805 6c03 	strb.w	r6, [r5, #-3]
 8014eae:	0c36      	lsrs	r6, r6, #16
 8014eb0:	f805 7c02 	strb.w	r7, [r5, #-2]
 8014eb4:	f805 6c01 	strb.w	r6, [r5, #-1]
 8014eb8:	e744      	b.n	8014d44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014eba:	b005      	add	sp, #20
 8014ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ec0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014ec6:	9201      	str	r2, [sp, #4]
 8014ec8:	6870      	ldr	r0, [r6, #4]
 8014eca:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8014ece:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014ed2:	fa1f fe85 	uxth.w	lr, r5
 8014ed6:	43ed      	mvns	r5, r5
 8014ed8:	f8dc 8000 	ldr.w	r8, [ip]
 8014edc:	b2ed      	uxtb	r5, r5
 8014ede:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014ee2:	fb00 2404 	mla	r4, r0, r4, r2
 8014ee6:	6832      	ldr	r2, [r6, #0]
 8014ee8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014eec:	4414      	add	r4, r2
 8014eee:	2900      	cmp	r1, #0
 8014ef0:	dc03      	bgt.n	8014efa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8014ef2:	9a01      	ldr	r2, [sp, #4]
 8014ef4:	2a00      	cmp	r2, #0
 8014ef6:	f340 810d 	ble.w	8015114 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014efa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014efc:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8014f00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f06:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8014f0a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	dd0e      	ble.n	8014f30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014f12:	1406      	asrs	r6, r0, #16
 8014f14:	d405      	bmi.n	8014f22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014f16:	4556      	cmp	r6, sl
 8014f18:	da03      	bge.n	8014f22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014f1a:	1416      	asrs	r6, r2, #16
 8014f1c:	d401      	bmi.n	8014f22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014f1e:	454e      	cmp	r6, r9
 8014f20:	db07      	blt.n	8014f32 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014f22:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014f24:	3b01      	subs	r3, #1
 8014f26:	3403      	adds	r4, #3
 8014f28:	4430      	add	r0, r6
 8014f2a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014f2c:	4432      	add	r2, r6
 8014f2e:	e7ee      	b.n	8014f0e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8014f30:	d060      	beq.n	8014ff4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8014f32:	1e5e      	subs	r6, r3, #1
 8014f34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014f36:	fb07 0706 	mla	r7, r7, r6, r0
 8014f3a:	143f      	asrs	r7, r7, #16
 8014f3c:	d451      	bmi.n	8014fe2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014f3e:	4557      	cmp	r7, sl
 8014f40:	da4f      	bge.n	8014fe2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014f42:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014f44:	fb07 2606 	mla	r6, r7, r6, r2
 8014f48:	1436      	asrs	r6, r6, #16
 8014f4a:	d44a      	bmi.n	8014fe2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014f4c:	454e      	cmp	r6, r9
 8014f4e:	da48      	bge.n	8014fe2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014f50:	1ce6      	adds	r6, r4, #3
 8014f52:	4699      	mov	r9, r3
 8014f54:	f1b9 0f00 	cmp.w	r9, #0
 8014f58:	f106 0603 	add.w	r6, r6, #3
 8014f5c:	dd45      	ble.n	8014fea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8014f5e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8014f62:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014f66:	1417      	asrs	r7, r2, #16
 8014f68:	f109 39ff 	add.w	r9, r9, #4294967295
 8014f6c:	fb0b a707 	mla	r7, fp, r7, sl
 8014f70:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014f74:	fb1b fb05 	smulbb	fp, fp, r5
 8014f78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014f7c:	eb08 0a07 	add.w	sl, r8, r7
 8014f80:	f818 7007 	ldrb.w	r7, [r8, r7]
 8014f84:	fb07 b70e 	mla	r7, r7, lr, fp
 8014f88:	b2bf      	uxth	r7, r7
 8014f8a:	f107 0b01 	add.w	fp, r7, #1
 8014f8e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014f92:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8014f96:	fb1b fb05 	smulbb	fp, fp, r5
 8014f9a:	123f      	asrs	r7, r7, #8
 8014f9c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8014fa0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014fa4:	fb07 b70e 	mla	r7, r7, lr, fp
 8014fa8:	b2bf      	uxth	r7, r7
 8014faa:	f107 0b01 	add.w	fp, r7, #1
 8014fae:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014fb2:	123f      	asrs	r7, r7, #8
 8014fb4:	f806 7c05 	strb.w	r7, [r6, #-5]
 8014fb8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8014fbc:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8014fc0:	fb1a fa05 	smulbb	sl, sl, r5
 8014fc4:	fb07 a70e 	mla	r7, r7, lr, sl
 8014fc8:	b2bf      	uxth	r7, r7
 8014fca:	f107 0a01 	add.w	sl, r7, #1
 8014fce:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014fd2:	123f      	asrs	r7, r7, #8
 8014fd4:	f806 7c04 	strb.w	r7, [r6, #-4]
 8014fd8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014fda:	4438      	add	r0, r7
 8014fdc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014fde:	443a      	add	r2, r7
 8014fe0:	e7b8      	b.n	8014f54 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014fe2:	2700      	movs	r7, #0
 8014fe4:	1bde      	subs	r6, r3, r7
 8014fe6:	2e00      	cmp	r6, #0
 8014fe8:	dc3f      	bgt.n	801506a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8014fea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014fee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ff2:	441c      	add	r4, r3
 8014ff4:	2900      	cmp	r1, #0
 8014ff6:	f340 808d 	ble.w	8015114 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015000:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015004:	3901      	subs	r1, #1
 8015006:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801500a:	eef0 6a62 	vmov.f32	s13, s5
 801500e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015012:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015016:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801501a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801501e:	eef0 6a43 	vmov.f32	s13, s6
 8015022:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015026:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801502a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801502e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015032:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015036:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801503a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801503e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015042:	ee12 2a90 	vmov	r2, s5
 8015046:	eef0 2a47 	vmov.f32	s5, s14
 801504a:	fb92 f3f3 	sdiv	r3, r2, r3
 801504e:	ee13 2a10 	vmov	r2, s6
 8015052:	930f      	str	r3, [sp, #60]	; 0x3c
 8015054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015056:	eeb0 3a67 	vmov.f32	s6, s15
 801505a:	fb92 f3f3 	sdiv	r3, r2, r3
 801505e:	9a01      	ldr	r2, [sp, #4]
 8015060:	9310      	str	r3, [sp, #64]	; 0x40
 8015062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015064:	bf08      	it	eq
 8015066:	4613      	moveq	r3, r2
 8015068:	e741      	b.n	8014eee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801506a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801506e:	d44b      	bmi.n	8015108 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015070:	f8dc b008 	ldr.w	fp, [ip, #8]
 8015074:	45cb      	cmp	fp, r9
 8015076:	dd47      	ble.n	8015108 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015078:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801507c:	d444      	bmi.n	8015108 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801507e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8015082:	4556      	cmp	r6, sl
 8015084:	dd40      	ble.n	8015108 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015086:	fa0f f68b 	sxth.w	r6, fp
 801508a:	fb0a 9906 	mla	r9, sl, r6, r9
 801508e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015092:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015096:	f814 b006 	ldrb.w	fp, [r4, r6]
 801509a:	fb1b fb05 	smulbb	fp, fp, r5
 801509e:	eb08 0a09 	add.w	sl, r8, r9
 80150a2:	f818 9009 	ldrb.w	r9, [r8, r9]
 80150a6:	fb09 b90e 	mla	r9, r9, lr, fp
 80150aa:	fa1f f989 	uxth.w	r9, r9
 80150ae:	f109 0b01 	add.w	fp, r9, #1
 80150b2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80150b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80150ba:	f804 9006 	strb.w	r9, [r4, r6]
 80150be:	4426      	add	r6, r4
 80150c0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80150c4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80150c8:	fb1b fb05 	smulbb	fp, fp, r5
 80150cc:	fb09 b90e 	mla	r9, r9, lr, fp
 80150d0:	fa1f f989 	uxth.w	r9, r9
 80150d4:	f109 0b01 	add.w	fp, r9, #1
 80150d8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80150dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80150e0:	f886 9001 	strb.w	r9, [r6, #1]
 80150e4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80150e8:	f896 a002 	ldrb.w	sl, [r6, #2]
 80150ec:	fb1a fa05 	smulbb	sl, sl, r5
 80150f0:	fb09 a90e 	mla	r9, r9, lr, sl
 80150f4:	fa1f f989 	uxth.w	r9, r9
 80150f8:	f109 0a01 	add.w	sl, r9, #1
 80150fc:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015100:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015104:	f886 9002 	strb.w	r9, [r6, #2]
 8015108:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801510a:	3701      	adds	r7, #1
 801510c:	4430      	add	r0, r6
 801510e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015110:	4432      	add	r2, r6
 8015112:	e767      	b.n	8014fe4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8015114:	b003      	add	sp, #12
 8015116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801511a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801511a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801511e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015124:	9201      	str	r2, [sp, #4]
 8015126:	6868      	ldr	r0, [r5, #4]
 8015128:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801512a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801512e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8015132:	fb00 2404 	mla	r4, r0, r4, r2
 8015136:	682a      	ldr	r2, [r5, #0]
 8015138:	f8d7 8000 	ldr.w	r8, [r7]
 801513c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015140:	4414      	add	r4, r2
 8015142:	2900      	cmp	r1, #0
 8015144:	dc03      	bgt.n	801514e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8015146:	9a01      	ldr	r2, [sp, #4]
 8015148:	2a00      	cmp	r2, #0
 801514a:	f340 80af 	ble.w	80152ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801514e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015150:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8015154:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801515a:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801515e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015162:	2b00      	cmp	r3, #0
 8015164:	dd0c      	ble.n	8015180 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015166:	1405      	asrs	r5, r0, #16
 8015168:	d405      	bmi.n	8015176 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801516a:	4555      	cmp	r5, sl
 801516c:	da03      	bge.n	8015176 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801516e:	1415      	asrs	r5, r2, #16
 8015170:	d401      	bmi.n	8015176 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015172:	454d      	cmp	r5, r9
 8015174:	db05      	blt.n	8015182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015176:	4470      	add	r0, lr
 8015178:	4462      	add	r2, ip
 801517a:	3b01      	subs	r3, #1
 801517c:	3403      	adds	r4, #3
 801517e:	e7f0      	b.n	8015162 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015180:	d038      	beq.n	80151f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015182:	1e5d      	subs	r5, r3, #1
 8015184:	fb0e 0605 	mla	r6, lr, r5, r0
 8015188:	1436      	asrs	r6, r6, #16
 801518a:	d42a      	bmi.n	80151e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801518c:	4556      	cmp	r6, sl
 801518e:	da28      	bge.n	80151e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015190:	fb0c 2505 	mla	r5, ip, r5, r2
 8015194:	142d      	asrs	r5, r5, #16
 8015196:	d424      	bmi.n	80151e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015198:	454d      	cmp	r5, r9
 801519a:	da22      	bge.n	80151e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801519c:	1ce6      	adds	r6, r4, #3
 801519e:	4699      	mov	r9, r3
 80151a0:	f1b9 0f00 	cmp.w	r9, #0
 80151a4:	f106 0603 	add.w	r6, r6, #3
 80151a8:	dd1f      	ble.n	80151ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80151aa:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80151ae:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80151b2:	1415      	asrs	r5, r2, #16
 80151b4:	4470      	add	r0, lr
 80151b6:	4462      	add	r2, ip
 80151b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80151bc:	fb0b a505 	mla	r5, fp, r5, sl
 80151c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151c4:	eb08 0a05 	add.w	sl, r8, r5
 80151c8:	f818 5005 	ldrb.w	r5, [r8, r5]
 80151cc:	f806 5c06 	strb.w	r5, [r6, #-6]
 80151d0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80151d4:	f806 5c05 	strb.w	r5, [r6, #-5]
 80151d8:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80151dc:	f806 5c04 	strb.w	r5, [r6, #-4]
 80151e0:	e7de      	b.n	80151a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80151e2:	2600      	movs	r6, #0
 80151e4:	1b9d      	subs	r5, r3, r6
 80151e6:	2d00      	cmp	r5, #0
 80151e8:	dc38      	bgt.n	801525c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80151ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80151ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80151f2:	441c      	add	r4, r3
 80151f4:	2900      	cmp	r1, #0
 80151f6:	dd59      	ble.n	80152ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80151f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80151fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015202:	3901      	subs	r1, #1
 8015204:	eeb0 6a62 	vmov.f32	s12, s5
 8015208:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801520c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015210:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015214:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8015218:	eeb0 6a43 	vmov.f32	s12, s6
 801521c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015220:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8015224:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015228:	ee61 7a27 	vmul.f32	s15, s2, s15
 801522c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015230:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015234:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015238:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801523c:	ee12 2a90 	vmov	r2, s5
 8015240:	eef0 2a47 	vmov.f32	s5, s14
 8015244:	fb92 fef3 	sdiv	lr, r2, r3
 8015248:	ee13 2a10 	vmov	r2, s6
 801524c:	eeb0 3a67 	vmov.f32	s6, s15
 8015250:	fb92 fcf3 	sdiv	ip, r2, r3
 8015254:	9a01      	ldr	r2, [sp, #4]
 8015256:	bf08      	it	eq
 8015258:	4613      	moveq	r3, r2
 801525a:	e772      	b.n	8015142 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801525c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015260:	d420      	bmi.n	80152a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015262:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8015266:	45cb      	cmp	fp, r9
 8015268:	dd1c      	ble.n	80152a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801526a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801526e:	d419      	bmi.n	80152a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015270:	68fd      	ldr	r5, [r7, #12]
 8015272:	4555      	cmp	r5, sl
 8015274:	dd16      	ble.n	80152a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015276:	fa0f f58b 	sxth.w	r5, fp
 801527a:	fb0a 9505 	mla	r5, sl, r5, r9
 801527e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015282:	f818 9005 	ldrb.w	r9, [r8, r5]
 8015286:	eb08 0b05 	add.w	fp, r8, r5
 801528a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801528e:	f804 9005 	strb.w	r9, [r4, r5]
 8015292:	4425      	add	r5, r4
 8015294:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8015298:	f885 9001 	strb.w	r9, [r5, #1]
 801529c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80152a0:	f885 9002 	strb.w	r9, [r5, #2]
 80152a4:	4470      	add	r0, lr
 80152a6:	4462      	add	r2, ip
 80152a8:	3601      	adds	r6, #1
 80152aa:	e79b      	b.n	80151e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80152ac:	b003      	add	sp, #12
 80152ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80152b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b6:	b085      	sub	sp, #20
 80152b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80152bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80152be:	9202      	str	r2, [sp, #8]
 80152c0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80152c4:	6860      	ldr	r0, [r4, #4]
 80152c6:	9203      	str	r2, [sp, #12]
 80152c8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80152cc:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80152d0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80152d4:	fb00 2505 	mla	r5, r0, r5, r2
 80152d8:	6822      	ldr	r2, [r4, #0]
 80152da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152de:	4415      	add	r5, r2
 80152e0:	f8dc 2000 	ldr.w	r2, [ip]
 80152e4:	9201      	str	r2, [sp, #4]
 80152e6:	2900      	cmp	r1, #0
 80152e8:	dc03      	bgt.n	80152f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80152ea:	9a02      	ldr	r2, [sp, #8]
 80152ec:	2a00      	cmp	r2, #0
 80152ee:	f340 8122 	ble.w	8015536 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80152f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152f4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80152f8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80152fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80152fe:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015302:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015306:	2b00      	cmp	r3, #0
 8015308:	dd0d      	ble.n	8015326 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801530a:	1422      	asrs	r2, r4, #16
 801530c:	d405      	bmi.n	801531a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801530e:	4542      	cmp	r2, r8
 8015310:	da03      	bge.n	801531a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015312:	1402      	asrs	r2, r0, #16
 8015314:	d401      	bmi.n	801531a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015316:	42ba      	cmp	r2, r7
 8015318:	db06      	blt.n	8015328 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801531a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801531c:	4474      	add	r4, lr
 801531e:	3b01      	subs	r3, #1
 8015320:	3503      	adds	r5, #3
 8015322:	4410      	add	r0, r2
 8015324:	e7ef      	b.n	8015306 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8015326:	d072      	beq.n	801540e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8015328:	1e5a      	subs	r2, r3, #1
 801532a:	fb0e 4602 	mla	r6, lr, r2, r4
 801532e:	1436      	asrs	r6, r6, #16
 8015330:	d462      	bmi.n	80153f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015332:	4546      	cmp	r6, r8
 8015334:	da60      	bge.n	80153f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015336:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015338:	fb06 0202 	mla	r2, r6, r2, r0
 801533c:	1412      	asrs	r2, r2, #16
 801533e:	d45b      	bmi.n	80153f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015340:	42ba      	cmp	r2, r7
 8015342:	da59      	bge.n	80153f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015344:	1cef      	adds	r7, r5, #3
 8015346:	4699      	mov	r9, r3
 8015348:	f1b9 0f00 	cmp.w	r9, #0
 801534c:	dd5a      	ble.n	8015404 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801534e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015352:	1426      	asrs	r6, r4, #16
 8015354:	1402      	asrs	r2, r0, #16
 8015356:	fb08 6202 	mla	r2, r8, r2, r6
 801535a:	9e01      	ldr	r6, [sp, #4]
 801535c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015360:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015364:	d041      	beq.n	80153ea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015366:	9a03      	ldr	r2, [sp, #12]
 8015368:	fa5f fb86 	uxtb.w	fp, r6
 801536c:	fb02 f808 	mul.w	r8, r2, r8
 8015370:	f108 0201 	add.w	r2, r8, #1
 8015374:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015378:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801537c:	1212      	asrs	r2, r2, #8
 801537e:	fa1f fa82 	uxth.w	sl, r2
 8015382:	43d2      	mvns	r2, r2
 8015384:	fb1b fb0a 	smulbb	fp, fp, sl
 8015388:	b2d2      	uxtb	r2, r2
 801538a:	fb08 b802 	mla	r8, r8, r2, fp
 801538e:	fa1f f888 	uxth.w	r8, r8
 8015392:	f108 0b01 	add.w	fp, r8, #1
 8015396:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801539a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801539e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80153a2:	fb1b fb0a 	smulbb	fp, fp, sl
 80153a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80153aa:	fb16 fa0a 	smulbb	sl, r6, sl
 80153ae:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80153b2:	f807 8c03 	strb.w	r8, [r7, #-3]
 80153b6:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80153ba:	fb06 aa02 	mla	sl, r6, r2, sl
 80153be:	fb08 b802 	mla	r8, r8, r2, fp
 80153c2:	fa1f fa8a 	uxth.w	sl, sl
 80153c6:	fa1f f888 	uxth.w	r8, r8
 80153ca:	f10a 0601 	add.w	r6, sl, #1
 80153ce:	f108 0b01 	add.w	fp, r8, #1
 80153d2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80153d6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80153da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80153de:	ea4f 2828 	mov.w	r8, r8, asr #8
 80153e2:	f807 ac01 	strb.w	sl, [r7, #-1]
 80153e6:	f807 8c02 	strb.w	r8, [r7, #-2]
 80153ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153ec:	4474      	add	r4, lr
 80153ee:	3703      	adds	r7, #3
 80153f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80153f4:	4410      	add	r0, r2
 80153f6:	e7a7      	b.n	8015348 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80153f8:	f04f 0800 	mov.w	r8, #0
 80153fc:	eba3 0208 	sub.w	r2, r3, r8
 8015400:	2a00      	cmp	r2, #0
 8015402:	dc3b      	bgt.n	801547c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8015404:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015408:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801540c:	441d      	add	r5, r3
 801540e:	2900      	cmp	r1, #0
 8015410:	f340 8091 	ble.w	8015536 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8015414:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801541a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801541e:	3901      	subs	r1, #1
 8015420:	eeb0 6a62 	vmov.f32	s12, s5
 8015424:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015428:	ee31 1a05 	vadd.f32	s2, s2, s10
 801542c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015430:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015434:	eeb0 6a43 	vmov.f32	s12, s6
 8015438:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801543c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015440:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015444:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015448:	ee77 2a62 	vsub.f32	s5, s14, s5
 801544c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015450:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015454:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015458:	ee12 2a90 	vmov	r2, s5
 801545c:	eef0 2a47 	vmov.f32	s5, s14
 8015460:	fb92 fef3 	sdiv	lr, r2, r3
 8015464:	ee13 2a10 	vmov	r2, s6
 8015468:	eeb0 3a67 	vmov.f32	s6, s15
 801546c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015470:	9a02      	ldr	r2, [sp, #8]
 8015472:	9312      	str	r3, [sp, #72]	; 0x48
 8015474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015476:	bf08      	it	eq
 8015478:	4613      	moveq	r3, r2
 801547a:	e734      	b.n	80152e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801547c:	1427      	asrs	r7, r4, #16
 801547e:	d454      	bmi.n	801552a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015480:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015484:	42be      	cmp	r6, r7
 8015486:	dd50      	ble.n	801552a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015488:	ea5f 4920 	movs.w	r9, r0, asr #16
 801548c:	d44d      	bmi.n	801552a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801548e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015492:	454a      	cmp	r2, r9
 8015494:	dd49      	ble.n	801552a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015496:	b236      	sxth	r6, r6
 8015498:	9a01      	ldr	r2, [sp, #4]
 801549a:	fb09 7606 	mla	r6, r9, r6, r7
 801549e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80154a2:	0e3a      	lsrs	r2, r7, #24
 80154a4:	d041      	beq.n	801552a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80154a6:	9e03      	ldr	r6, [sp, #12]
 80154a8:	fa5f fb87 	uxtb.w	fp, r7
 80154ac:	4372      	muls	r2, r6
 80154ae:	1c56      	adds	r6, r2, #1
 80154b0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80154b4:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80154b8:	1212      	asrs	r2, r2, #8
 80154ba:	f815 9006 	ldrb.w	r9, [r5, r6]
 80154be:	fa1f fa82 	uxth.w	sl, r2
 80154c2:	43d2      	mvns	r2, r2
 80154c4:	fb1b fb0a 	smulbb	fp, fp, sl
 80154c8:	b2d2      	uxtb	r2, r2
 80154ca:	fb09 b902 	mla	r9, r9, r2, fp
 80154ce:	fa1f f989 	uxth.w	r9, r9
 80154d2:	f109 0b01 	add.w	fp, r9, #1
 80154d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80154da:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80154de:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80154e2:	fb1b fb0a 	smulbb	fp, fp, sl
 80154e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80154ea:	fb17 fa0a 	smulbb	sl, r7, sl
 80154ee:	f805 9006 	strb.w	r9, [r5, r6]
 80154f2:	442e      	add	r6, r5
 80154f4:	78b7      	ldrb	r7, [r6, #2]
 80154f6:	f896 9001 	ldrb.w	r9, [r6, #1]
 80154fa:	fb07 aa02 	mla	sl, r7, r2, sl
 80154fe:	fb09 b902 	mla	r9, r9, r2, fp
 8015502:	fa1f fa8a 	uxth.w	sl, sl
 8015506:	fa1f f989 	uxth.w	r9, r9
 801550a:	f10a 0701 	add.w	r7, sl, #1
 801550e:	f109 0b01 	add.w	fp, r9, #1
 8015512:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015516:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801551a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801551e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015522:	f886 a002 	strb.w	sl, [r6, #2]
 8015526:	f886 9001 	strb.w	r9, [r6, #1]
 801552a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801552c:	4474      	add	r4, lr
 801552e:	f108 0801 	add.w	r8, r8, #1
 8015532:	4410      	add	r0, r2
 8015534:	e762      	b.n	80153fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015536:	b005      	add	sp, #20
 8015538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801553c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801553c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015540:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015546:	9201      	str	r2, [sp, #4]
 8015548:	6860      	ldr	r0, [r4, #4]
 801554a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801554e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8015552:	fb00 2505 	mla	r5, r0, r5, r2
 8015556:	6822      	ldr	r2, [r4, #0]
 8015558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801555c:	4415      	add	r5, r2
 801555e:	f8dc 2000 	ldr.w	r2, [ip]
 8015562:	9200      	str	r2, [sp, #0]
 8015564:	2900      	cmp	r1, #0
 8015566:	dc03      	bgt.n	8015570 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8015568:	9a01      	ldr	r2, [sp, #4]
 801556a:	2a00      	cmp	r2, #0
 801556c:	f340 812b 	ble.w	80157c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015572:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015576:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801557a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801557c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015580:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015584:	2b00      	cmp	r3, #0
 8015586:	dd0e      	ble.n	80155a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015588:	1422      	asrs	r2, r4, #16
 801558a:	d405      	bmi.n	8015598 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801558c:	4572      	cmp	r2, lr
 801558e:	da03      	bge.n	8015598 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015590:	1402      	asrs	r2, r0, #16
 8015592:	d401      	bmi.n	8015598 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015594:	42ba      	cmp	r2, r7
 8015596:	db07      	blt.n	80155a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8015598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801559a:	3b01      	subs	r3, #1
 801559c:	3503      	adds	r5, #3
 801559e:	4414      	add	r4, r2
 80155a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80155a2:	4410      	add	r0, r2
 80155a4:	e7ee      	b.n	8015584 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80155a6:	d06f      	beq.n	8015688 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80155a8:	1e5a      	subs	r2, r3, #1
 80155aa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80155ac:	fb06 4602 	mla	r6, r6, r2, r4
 80155b0:	1436      	asrs	r6, r6, #16
 80155b2:	d45e      	bmi.n	8015672 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80155b4:	4576      	cmp	r6, lr
 80155b6:	da5c      	bge.n	8015672 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80155b8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80155ba:	fb06 0202 	mla	r2, r6, r2, r0
 80155be:	1412      	asrs	r2, r2, #16
 80155c0:	d457      	bmi.n	8015672 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80155c2:	42ba      	cmp	r2, r7
 80155c4:	da55      	bge.n	8015672 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80155c6:	1cee      	adds	r6, r5, #3
 80155c8:	469a      	mov	sl, r3
 80155ca:	f1ba 0f00 	cmp.w	sl, #0
 80155ce:	dd56      	ble.n	801567e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80155d0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80155d4:	1427      	asrs	r7, r4, #16
 80155d6:	1402      	asrs	r2, r0, #16
 80155d8:	fb0e 7202 	mla	r2, lr, r2, r7
 80155dc:	9f00      	ldr	r7, [sp, #0]
 80155de:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80155e2:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80155e6:	d03c      	beq.n	8015662 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80155e8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80155ec:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80155f0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80155f4:	fa5f f28e 	uxtb.w	r2, lr
 80155f8:	b2ff      	uxtb	r7, r7
 80155fa:	f000 80dd 	beq.w	80157b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80155fe:	fa1f f882 	uxth.w	r8, r2
 8015602:	43d2      	mvns	r2, r2
 8015604:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8015608:	fb17 f708 	smulbb	r7, r7, r8
 801560c:	b2d2      	uxtb	r2, r2
 801560e:	fb19 f908 	smulbb	r9, r9, r8
 8015612:	fb0e 7702 	mla	r7, lr, r2, r7
 8015616:	fb1b f808 	smulbb	r8, fp, r8
 801561a:	b2bf      	uxth	r7, r7
 801561c:	f107 0e01 	add.w	lr, r7, #1
 8015620:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8015624:	123f      	asrs	r7, r7, #8
 8015626:	f806 7c03 	strb.w	r7, [r6, #-3]
 801562a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801562e:	fb07 9902 	mla	r9, r7, r2, r9
 8015632:	fa1f f989 	uxth.w	r9, r9
 8015636:	f109 0701 	add.w	r7, r9, #1
 801563a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801563e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8015642:	fb07 8802 	mla	r8, r7, r2, r8
 8015646:	ea4f 2929 	mov.w	r9, r9, asr #8
 801564a:	fa1f f888 	uxth.w	r8, r8
 801564e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8015652:	f108 0201 	add.w	r2, r8, #1
 8015656:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801565a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801565e:	f806 8c01 	strb.w	r8, [r6, #-1]
 8015662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015664:	3603      	adds	r6, #3
 8015666:	f10a 3aff 	add.w	sl, sl, #4294967295
 801566a:	4414      	add	r4, r2
 801566c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801566e:	4410      	add	r0, r2
 8015670:	e7ab      	b.n	80155ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8015672:	f04f 0e00 	mov.w	lr, #0
 8015676:	eba3 020e 	sub.w	r2, r3, lr
 801567a:	2a00      	cmp	r2, #0
 801567c:	dc3d      	bgt.n	80156fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801567e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015686:	441d      	add	r5, r3
 8015688:	2900      	cmp	r1, #0
 801568a:	f340 809c 	ble.w	80157c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801568e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015694:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015698:	3901      	subs	r1, #1
 801569a:	eeb0 6a62 	vmov.f32	s12, s5
 801569e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80156a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80156a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80156aa:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80156ae:	eeb0 6a43 	vmov.f32	s12, s6
 80156b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80156b6:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80156ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80156be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80156c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80156c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80156ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80156ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80156d2:	ee12 2a90 	vmov	r2, s5
 80156d6:	eef0 2a47 	vmov.f32	s5, s14
 80156da:	fb92 f3f3 	sdiv	r3, r2, r3
 80156de:	ee13 2a10 	vmov	r2, s6
 80156e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80156e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156e6:	eeb0 3a67 	vmov.f32	s6, s15
 80156ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80156ee:	9a01      	ldr	r2, [sp, #4]
 80156f0:	9310      	str	r3, [sp, #64]	; 0x40
 80156f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156f4:	bf08      	it	eq
 80156f6:	4613      	moveq	r3, r2
 80156f8:	e734      	b.n	8015564 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80156fa:	1427      	asrs	r7, r4, #16
 80156fc:	d44d      	bmi.n	801579a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80156fe:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015702:	42be      	cmp	r6, r7
 8015704:	dd49      	ble.n	801579a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015706:	ea5f 4820 	movs.w	r8, r0, asr #16
 801570a:	d446      	bmi.n	801579a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801570c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015710:	4542      	cmp	r2, r8
 8015712:	dd42      	ble.n	801579a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015714:	b236      	sxth	r6, r6
 8015716:	9a00      	ldr	r2, [sp, #0]
 8015718:	fb08 7606 	mla	r6, r8, r6, r7
 801571c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8015720:	0e3a      	lsrs	r2, r7, #24
 8015722:	d03a      	beq.n	801579a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015724:	2aff      	cmp	r2, #255	; 0xff
 8015726:	b2d6      	uxtb	r6, r2
 8015728:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801572c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8015730:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8015734:	b2ff      	uxtb	r7, r7
 8015736:	d037      	beq.n	80157a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8015738:	fa1f f986 	uxth.w	r9, r6
 801573c:	4472      	add	r2, lr
 801573e:	43f6      	mvns	r6, r6
 8015740:	f815 8002 	ldrb.w	r8, [r5, r2]
 8015744:	fb17 f709 	smulbb	r7, r7, r9
 8015748:	fb1a fa09 	smulbb	sl, sl, r9
 801574c:	b2f6      	uxtb	r6, r6
 801574e:	fb1b f909 	smulbb	r9, fp, r9
 8015752:	fb08 7706 	mla	r7, r8, r6, r7
 8015756:	b2bf      	uxth	r7, r7
 8015758:	f107 0801 	add.w	r8, r7, #1
 801575c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8015760:	123f      	asrs	r7, r7, #8
 8015762:	54af      	strb	r7, [r5, r2]
 8015764:	442a      	add	r2, r5
 8015766:	7857      	ldrb	r7, [r2, #1]
 8015768:	fb07 aa06 	mla	sl, r7, r6, sl
 801576c:	fa1f fa8a 	uxth.w	sl, sl
 8015770:	f10a 0701 	add.w	r7, sl, #1
 8015774:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015778:	7897      	ldrb	r7, [r2, #2]
 801577a:	fb07 9906 	mla	r9, r7, r6, r9
 801577e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015782:	fa1f f989 	uxth.w	r9, r9
 8015786:	f882 a001 	strb.w	sl, [r2, #1]
 801578a:	f109 0601 	add.w	r6, r9, #1
 801578e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8015792:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015796:	f882 9002 	strb.w	r9, [r2, #2]
 801579a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801579c:	f10e 0e01 	add.w	lr, lr, #1
 80157a0:	4414      	add	r4, r2
 80157a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80157a4:	4410      	add	r0, r2
 80157a6:	e766      	b.n	8015676 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80157a8:	4472      	add	r2, lr
 80157aa:	54af      	strb	r7, [r5, r2]
 80157ac:	442a      	add	r2, r5
 80157ae:	f882 a001 	strb.w	sl, [r2, #1]
 80157b2:	f882 b002 	strb.w	fp, [r2, #2]
 80157b6:	e7f0      	b.n	801579a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80157b8:	f806 7c03 	strb.w	r7, [r6, #-3]
 80157bc:	f806 9c02 	strb.w	r9, [r6, #-2]
 80157c0:	f806 bc01 	strb.w	fp, [r6, #-1]
 80157c4:	e74d      	b.n	8015662 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80157c6:	b003      	add	sp, #12
 80157c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80157cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d0:	b087      	sub	sp, #28
 80157d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80157d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80157d8:	9204      	str	r2, [sp, #16]
 80157da:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80157de:	6860      	ldr	r0, [r4, #4]
 80157e0:	9205      	str	r2, [sp, #20]
 80157e2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80157e6:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80157ea:	9101      	str	r1, [sp, #4]
 80157ec:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80157f0:	fb00 2505 	mla	r5, r0, r5, r2
 80157f4:	6822      	ldr	r2, [r4, #0]
 80157f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157fa:	4415      	add	r5, r2
 80157fc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015800:	3201      	adds	r2, #1
 8015802:	f022 0201 	bic.w	r2, r2, #1
 8015806:	9202      	str	r2, [sp, #8]
 8015808:	f8dc 2000 	ldr.w	r2, [ip]
 801580c:	9203      	str	r2, [sp, #12]
 801580e:	9a01      	ldr	r2, [sp, #4]
 8015810:	2a00      	cmp	r2, #0
 8015812:	dc03      	bgt.n	801581c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015814:	9a04      	ldr	r2, [sp, #16]
 8015816:	2a00      	cmp	r2, #0
 8015818:	f340 8135 	ble.w	8015a86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801581c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801581e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015822:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015826:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015828:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801582c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015830:	2b00      	cmp	r3, #0
 8015832:	dd0d      	ble.n	8015850 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015834:	1422      	asrs	r2, r4, #16
 8015836:	d405      	bmi.n	8015844 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015838:	4542      	cmp	r2, r8
 801583a:	da03      	bge.n	8015844 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801583c:	1402      	asrs	r2, r0, #16
 801583e:	d401      	bmi.n	8015844 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015840:	42ba      	cmp	r2, r7
 8015842:	db06      	blt.n	8015852 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8015844:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015846:	4474      	add	r4, lr
 8015848:	3b01      	subs	r3, #1
 801584a:	3503      	adds	r5, #3
 801584c:	4410      	add	r0, r2
 801584e:	e7ef      	b.n	8015830 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015850:	d077      	beq.n	8015942 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8015852:	1e5a      	subs	r2, r3, #1
 8015854:	fb0e 4602 	mla	r6, lr, r2, r4
 8015858:	1436      	asrs	r6, r6, #16
 801585a:	d469      	bmi.n	8015930 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801585c:	4546      	cmp	r6, r8
 801585e:	da67      	bge.n	8015930 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015860:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015862:	fb06 0202 	mla	r2, r6, r2, r0
 8015866:	1412      	asrs	r2, r2, #16
 8015868:	d462      	bmi.n	8015930 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801586a:	42ba      	cmp	r2, r7
 801586c:	da60      	bge.n	8015930 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801586e:	1cee      	adds	r6, r5, #3
 8015870:	4699      	mov	r9, r3
 8015872:	f1b9 0f00 	cmp.w	r9, #0
 8015876:	dd5f      	ble.n	8015938 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8015878:	1422      	asrs	r2, r4, #16
 801587a:	9902      	ldr	r1, [sp, #8]
 801587c:	1407      	asrs	r7, r0, #16
 801587e:	fb01 2707 	mla	r7, r1, r7, r2
 8015882:	9903      	ldr	r1, [sp, #12]
 8015884:	087a      	lsrs	r2, r7, #1
 8015886:	5c8a      	ldrb	r2, [r1, r2]
 8015888:	07f9      	lsls	r1, r7, #31
 801588a:	bf54      	ite	pl
 801588c:	f002 020f 	andpl.w	r2, r2, #15
 8015890:	1112      	asrmi	r2, r2, #4
 8015892:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015896:	b2d2      	uxtb	r2, r2
 8015898:	2a00      	cmp	r2, #0
 801589a:	d042      	beq.n	8015922 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801589c:	497b      	ldr	r1, [pc, #492]	; (8015a8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801589e:	680f      	ldr	r7, [r1, #0]
 80158a0:	9905      	ldr	r1, [sp, #20]
 80158a2:	fa5f fb87 	uxtb.w	fp, r7
 80158a6:	434a      	muls	r2, r1
 80158a8:	f102 0801 	add.w	r8, r2, #1
 80158ac:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80158b0:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80158b4:	1212      	asrs	r2, r2, #8
 80158b6:	fa1f fa82 	uxth.w	sl, r2
 80158ba:	43d2      	mvns	r2, r2
 80158bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80158c0:	b2d2      	uxtb	r2, r2
 80158c2:	fb08 b802 	mla	r8, r8, r2, fp
 80158c6:	fa1f f888 	uxth.w	r8, r8
 80158ca:	f108 0b01 	add.w	fp, r8, #1
 80158ce:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80158d2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80158d6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80158da:	fb1b fb0a 	smulbb	fp, fp, sl
 80158de:	ea4f 2828 	mov.w	r8, r8, asr #8
 80158e2:	fb17 fa0a 	smulbb	sl, r7, sl
 80158e6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80158ea:	f806 8c03 	strb.w	r8, [r6, #-3]
 80158ee:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80158f2:	fb07 aa02 	mla	sl, r7, r2, sl
 80158f6:	fb08 b802 	mla	r8, r8, r2, fp
 80158fa:	fa1f fa8a 	uxth.w	sl, sl
 80158fe:	fa1f f888 	uxth.w	r8, r8
 8015902:	f10a 0701 	add.w	r7, sl, #1
 8015906:	f108 0b01 	add.w	fp, r8, #1
 801590a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801590e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015912:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015916:	ea4f 2828 	mov.w	r8, r8, asr #8
 801591a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801591e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8015922:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015924:	4474      	add	r4, lr
 8015926:	3603      	adds	r6, #3
 8015928:	f109 39ff 	add.w	r9, r9, #4294967295
 801592c:	4410      	add	r0, r2
 801592e:	e7a0      	b.n	8015872 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8015930:	2700      	movs	r7, #0
 8015932:	1bda      	subs	r2, r3, r7
 8015934:	2a00      	cmp	r2, #0
 8015936:	dc3e      	bgt.n	80159b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8015938:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801593c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015940:	441d      	add	r5, r3
 8015942:	9b01      	ldr	r3, [sp, #4]
 8015944:	2b00      	cmp	r3, #0
 8015946:	f340 809e 	ble.w	8015a86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801594a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801594e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015950:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015954:	eeb0 6a62 	vmov.f32	s12, s5
 8015958:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801595c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015960:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015964:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015968:	eeb0 6a43 	vmov.f32	s12, s6
 801596c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015970:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015974:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015978:	ee61 7a27 	vmul.f32	s15, s2, s15
 801597c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015980:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015984:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015988:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801598c:	ee12 2a90 	vmov	r2, s5
 8015990:	eef0 2a47 	vmov.f32	s5, s14
 8015994:	fb92 fef3 	sdiv	lr, r2, r3
 8015998:	ee13 2a10 	vmov	r2, s6
 801599c:	eeb0 3a67 	vmov.f32	s6, s15
 80159a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80159a4:	9314      	str	r3, [sp, #80]	; 0x50
 80159a6:	9b01      	ldr	r3, [sp, #4]
 80159a8:	9a04      	ldr	r2, [sp, #16]
 80159aa:	3b01      	subs	r3, #1
 80159ac:	9301      	str	r3, [sp, #4]
 80159ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159b0:	bf08      	it	eq
 80159b2:	4613      	moveq	r3, r2
 80159b4:	e72b      	b.n	801580e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80159b6:	1426      	asrs	r6, r4, #16
 80159b8:	d460      	bmi.n	8015a7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80159ba:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80159be:	42b2      	cmp	r2, r6
 80159c0:	dd5c      	ble.n	8015a7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80159c2:	ea5f 4820 	movs.w	r8, r0, asr #16
 80159c6:	d459      	bmi.n	8015a7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80159c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80159cc:	4542      	cmp	r2, r8
 80159ce:	dd55      	ble.n	8015a7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80159d0:	9a02      	ldr	r2, [sp, #8]
 80159d2:	9903      	ldr	r1, [sp, #12]
 80159d4:	fb08 6602 	mla	r6, r8, r2, r6
 80159d8:	0872      	lsrs	r2, r6, #1
 80159da:	07f6      	lsls	r6, r6, #31
 80159dc:	5c8a      	ldrb	r2, [r1, r2]
 80159de:	bf54      	ite	pl
 80159e0:	f002 020f 	andpl.w	r2, r2, #15
 80159e4:	1112      	asrmi	r2, r2, #4
 80159e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80159ea:	b2d2      	uxtb	r2, r2
 80159ec:	2a00      	cmp	r2, #0
 80159ee:	d045      	beq.n	8015a7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80159f0:	4926      	ldr	r1, [pc, #152]	; (8015a8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80159f2:	f8d1 8000 	ldr.w	r8, [r1]
 80159f6:	9905      	ldr	r1, [sp, #20]
 80159f8:	fa5f fb88 	uxtb.w	fp, r8
 80159fc:	434a      	muls	r2, r1
 80159fe:	1c56      	adds	r6, r2, #1
 8015a00:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015a04:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015a08:	1212      	asrs	r2, r2, #8
 8015a0a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8015a0e:	fa1f fa82 	uxth.w	sl, r2
 8015a12:	43d2      	mvns	r2, r2
 8015a14:	fb1b fb0a 	smulbb	fp, fp, sl
 8015a18:	b2d2      	uxtb	r2, r2
 8015a1a:	fb09 b902 	mla	r9, r9, r2, fp
 8015a1e:	fa1f f989 	uxth.w	r9, r9
 8015a22:	f109 0b01 	add.w	fp, r9, #1
 8015a26:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015a2a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8015a2e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8015a32:	fb1b fb0a 	smulbb	fp, fp, sl
 8015a36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015a3a:	fb18 fa0a 	smulbb	sl, r8, sl
 8015a3e:	f805 9006 	strb.w	r9, [r5, r6]
 8015a42:	442e      	add	r6, r5
 8015a44:	f896 8002 	ldrb.w	r8, [r6, #2]
 8015a48:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015a4c:	fb08 aa02 	mla	sl, r8, r2, sl
 8015a50:	fb09 b902 	mla	r9, r9, r2, fp
 8015a54:	fa1f fa8a 	uxth.w	sl, sl
 8015a58:	fa1f f989 	uxth.w	r9, r9
 8015a5c:	f10a 0801 	add.w	r8, sl, #1
 8015a60:	f109 0b01 	add.w	fp, r9, #1
 8015a64:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8015a68:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015a6c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015a70:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015a74:	f886 a002 	strb.w	sl, [r6, #2]
 8015a78:	f886 9001 	strb.w	r9, [r6, #1]
 8015a7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a7e:	4474      	add	r4, lr
 8015a80:	3701      	adds	r7, #1
 8015a82:	4410      	add	r0, r2
 8015a84:	e755      	b.n	8015932 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8015a86:	b007      	add	sp, #28
 8015a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a8c:	2400b988 	.word	0x2400b988

08015a90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a94:	b085      	sub	sp, #20
 8015a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015a9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a9c:	9203      	str	r2, [sp, #12]
 8015a9e:	6860      	ldr	r0, [r4, #4]
 8015aa0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015aa4:	9100      	str	r1, [sp, #0]
 8015aa6:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8015aaa:	fb00 2606 	mla	r6, r0, r6, r2
 8015aae:	6822      	ldr	r2, [r4, #0]
 8015ab0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015ab4:	4416      	add	r6, r2
 8015ab6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015aba:	3201      	adds	r2, #1
 8015abc:	f022 0201 	bic.w	r2, r2, #1
 8015ac0:	9201      	str	r2, [sp, #4]
 8015ac2:	f8dc 2000 	ldr.w	r2, [ip]
 8015ac6:	9202      	str	r2, [sp, #8]
 8015ac8:	9a00      	ldr	r2, [sp, #0]
 8015aca:	2a00      	cmp	r2, #0
 8015acc:	dc03      	bgt.n	8015ad6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8015ace:	9a03      	ldr	r2, [sp, #12]
 8015ad0:	2a00      	cmp	r2, #0
 8015ad2:	f340 8140 	ble.w	8015d56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ad8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015adc:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8015ae0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ae2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015ae6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	dd0e      	ble.n	8015b0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015aee:	142a      	asrs	r2, r5, #16
 8015af0:	d405      	bmi.n	8015afe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015af2:	4572      	cmp	r2, lr
 8015af4:	da03      	bge.n	8015afe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015af6:	1422      	asrs	r2, r4, #16
 8015af8:	d401      	bmi.n	8015afe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015afa:	42ba      	cmp	r2, r7
 8015afc:	db07      	blt.n	8015b0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015afe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b00:	3b01      	subs	r3, #1
 8015b02:	3603      	adds	r6, #3
 8015b04:	4415      	add	r5, r2
 8015b06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b08:	4414      	add	r4, r2
 8015b0a:	e7ee      	b.n	8015aea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015b0c:	d072      	beq.n	8015bf4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015b0e:	1e5a      	subs	r2, r3, #1
 8015b10:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015b12:	fb00 5002 	mla	r0, r0, r2, r5
 8015b16:	1400      	asrs	r0, r0, #16
 8015b18:	d463      	bmi.n	8015be2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015b1a:	4570      	cmp	r0, lr
 8015b1c:	da61      	bge.n	8015be2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015b1e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015b20:	fb00 4202 	mla	r2, r0, r2, r4
 8015b24:	1412      	asrs	r2, r2, #16
 8015b26:	d45c      	bmi.n	8015be2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015b28:	42ba      	cmp	r2, r7
 8015b2a:	da5a      	bge.n	8015be2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015b2c:	1cf0      	adds	r0, r6, #3
 8015b2e:	469a      	mov	sl, r3
 8015b30:	f1ba 0f00 	cmp.w	sl, #0
 8015b34:	dd59      	ble.n	8015bea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8015b36:	142a      	asrs	r2, r5, #16
 8015b38:	9901      	ldr	r1, [sp, #4]
 8015b3a:	1427      	asrs	r7, r4, #16
 8015b3c:	fb01 2707 	mla	r7, r1, r7, r2
 8015b40:	9902      	ldr	r1, [sp, #8]
 8015b42:	087a      	lsrs	r2, r7, #1
 8015b44:	5c8a      	ldrb	r2, [r1, r2]
 8015b46:	07f9      	lsls	r1, r7, #31
 8015b48:	bf54      	ite	pl
 8015b4a:	f002 020f 	andpl.w	r2, r2, #15
 8015b4e:	1112      	asrmi	r2, r2, #4
 8015b50:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015b54:	b2d2      	uxtb	r2, r2
 8015b56:	2a00      	cmp	r2, #0
 8015b58:	d03b      	beq.n	8015bd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015b5a:	4980      	ldr	r1, [pc, #512]	; (8015d5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015b5c:	2aff      	cmp	r2, #255	; 0xff
 8015b5e:	680f      	ldr	r7, [r1, #0]
 8015b60:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015b64:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8015b68:	b2ff      	uxtb	r7, r7
 8015b6a:	f000 80ed 	beq.w	8015d48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8015b6e:	fa1f f882 	uxth.w	r8, r2
 8015b72:	43d2      	mvns	r2, r2
 8015b74:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8015b78:	fb17 f708 	smulbb	r7, r7, r8
 8015b7c:	b2d2      	uxtb	r2, r2
 8015b7e:	fb19 f908 	smulbb	r9, r9, r8
 8015b82:	fb0e 7702 	mla	r7, lr, r2, r7
 8015b86:	fb1b f808 	smulbb	r8, fp, r8
 8015b8a:	b2bf      	uxth	r7, r7
 8015b8c:	f107 0e01 	add.w	lr, r7, #1
 8015b90:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8015b94:	123f      	asrs	r7, r7, #8
 8015b96:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015b9a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8015b9e:	fb07 9902 	mla	r9, r7, r2, r9
 8015ba2:	fa1f f989 	uxth.w	r9, r9
 8015ba6:	f109 0701 	add.w	r7, r9, #1
 8015baa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8015bae:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8015bb2:	fb07 8802 	mla	r8, r7, r2, r8
 8015bb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015bba:	fa1f f888 	uxth.w	r8, r8
 8015bbe:	f800 9c02 	strb.w	r9, [r0, #-2]
 8015bc2:	f108 0201 	add.w	r2, r8, #1
 8015bc6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8015bca:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015bce:	f800 8c01 	strb.w	r8, [r0, #-1]
 8015bd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015bd4:	3003      	adds	r0, #3
 8015bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015bda:	4415      	add	r5, r2
 8015bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015bde:	4414      	add	r4, r2
 8015be0:	e7a6      	b.n	8015b30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015be2:	2700      	movs	r7, #0
 8015be4:	1bda      	subs	r2, r3, r7
 8015be6:	2a00      	cmp	r2, #0
 8015be8:	dc40      	bgt.n	8015c6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8015bea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015bee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015bf2:	441e      	add	r6, r3
 8015bf4:	9b00      	ldr	r3, [sp, #0]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	f340 80ad 	ble.w	8015d56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015bfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015c06:	eeb0 6a62 	vmov.f32	s12, s5
 8015c0a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015c0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015c12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015c16:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015c1a:	eeb0 6a43 	vmov.f32	s12, s6
 8015c1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015c22:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015c26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015c2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015c2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015c32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015c36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015c3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015c3e:	ee12 2a90 	vmov	r2, s5
 8015c42:	eef0 2a47 	vmov.f32	s5, s14
 8015c46:	fb92 f3f3 	sdiv	r3, r2, r3
 8015c4a:	ee13 2a10 	vmov	r2, s6
 8015c4e:	9311      	str	r3, [sp, #68]	; 0x44
 8015c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c52:	eeb0 3a67 	vmov.f32	s6, s15
 8015c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8015c5a:	9312      	str	r3, [sp, #72]	; 0x48
 8015c5c:	9b00      	ldr	r3, [sp, #0]
 8015c5e:	9a03      	ldr	r2, [sp, #12]
 8015c60:	3b01      	subs	r3, #1
 8015c62:	9300      	str	r3, [sp, #0]
 8015c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c66:	bf08      	it	eq
 8015c68:	4613      	moveq	r3, r2
 8015c6a:	e72d      	b.n	8015ac8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8015c6c:	1428      	asrs	r0, r5, #16
 8015c6e:	d45c      	bmi.n	8015d2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c70:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015c74:	4282      	cmp	r2, r0
 8015c76:	dd58      	ble.n	8015d2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c78:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8015c7c:	d455      	bmi.n	8015d2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c7e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015c82:	4572      	cmp	r2, lr
 8015c84:	dd51      	ble.n	8015d2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c86:	9a01      	ldr	r2, [sp, #4]
 8015c88:	9902      	ldr	r1, [sp, #8]
 8015c8a:	fb0e 0002 	mla	r0, lr, r2, r0
 8015c8e:	0842      	lsrs	r2, r0, #1
 8015c90:	07c0      	lsls	r0, r0, #31
 8015c92:	5c8a      	ldrb	r2, [r1, r2]
 8015c94:	bf54      	ite	pl
 8015c96:	f002 020f 	andpl.w	r2, r2, #15
 8015c9a:	1112      	asrmi	r2, r2, #4
 8015c9c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015ca0:	b2d2      	uxtb	r2, r2
 8015ca2:	2a00      	cmp	r2, #0
 8015ca4:	d041      	beq.n	8015d2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015ca6:	492d      	ldr	r1, [pc, #180]	; (8015d5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015ca8:	2aff      	cmp	r2, #255	; 0xff
 8015caa:	6808      	ldr	r0, [r1, #0]
 8015cac:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8015cb0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015cb4:	fa5f fe80 	uxtb.w	lr, r0
 8015cb8:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8015cbc:	d03b      	beq.n	8015d36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8015cbe:	fa1f f982 	uxth.w	r9, r2
 8015cc2:	4438      	add	r0, r7
 8015cc4:	43d2      	mvns	r2, r2
 8015cc6:	f816 8000 	ldrb.w	r8, [r6, r0]
 8015cca:	fb1e fe09 	smulbb	lr, lr, r9
 8015cce:	fb1a fa09 	smulbb	sl, sl, r9
 8015cd2:	b2d2      	uxtb	r2, r2
 8015cd4:	fb1b f909 	smulbb	r9, fp, r9
 8015cd8:	fb08 ee02 	mla	lr, r8, r2, lr
 8015cdc:	fa1f fe8e 	uxth.w	lr, lr
 8015ce0:	f10e 0801 	add.w	r8, lr, #1
 8015ce4:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8015ce8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015cec:	f806 e000 	strb.w	lr, [r6, r0]
 8015cf0:	4430      	add	r0, r6
 8015cf2:	f890 e001 	ldrb.w	lr, [r0, #1]
 8015cf6:	fb0e aa02 	mla	sl, lr, r2, sl
 8015cfa:	fa1f fa8a 	uxth.w	sl, sl
 8015cfe:	f10a 0e01 	add.w	lr, sl, #1
 8015d02:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8015d06:	f890 e002 	ldrb.w	lr, [r0, #2]
 8015d0a:	fb0e 9902 	mla	r9, lr, r2, r9
 8015d0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015d12:	fa1f f989 	uxth.w	r9, r9
 8015d16:	f880 a001 	strb.w	sl, [r0, #1]
 8015d1a:	f109 0201 	add.w	r2, r9, #1
 8015d1e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8015d22:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d26:	f880 9002 	strb.w	r9, [r0, #2]
 8015d2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015d2c:	3701      	adds	r7, #1
 8015d2e:	4415      	add	r5, r2
 8015d30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d32:	4414      	add	r4, r2
 8015d34:	e756      	b.n	8015be4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015d36:	4438      	add	r0, r7
 8015d38:	f806 e000 	strb.w	lr, [r6, r0]
 8015d3c:	4430      	add	r0, r6
 8015d3e:	f880 a001 	strb.w	sl, [r0, #1]
 8015d42:	f880 b002 	strb.w	fp, [r0, #2]
 8015d46:	e7f0      	b.n	8015d2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015d48:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015d4c:	f800 9c02 	strb.w	r9, [r0, #-2]
 8015d50:	f800 bc01 	strb.w	fp, [r0, #-1]
 8015d54:	e73d      	b.n	8015bd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015d56:	b005      	add	sp, #20
 8015d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5c:	2400b988 	.word	0x2400b988

08015d60 <_ZN8touchgfx8LCD24bppD1Ev>:
 8015d60:	4770      	bx	lr

08015d62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8015d62:	4770      	bx	lr

08015d64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015d64:	4770      	bx	lr

08015d66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015d66:	4770      	bx	lr

08015d68 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8015d68:	4770      	bx	lr

08015d6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015d6a:	4770      	bx	lr

08015d6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015d6c:	4770      	bx	lr

08015d6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015d6e:	4770      	bx	lr

08015d70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015d70:	4770      	bx	lr

08015d72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015d72:	4770      	bx	lr

08015d74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015d74:	4770      	bx	lr

08015d76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015d76:	4770      	bx	lr

08015d78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015d78:	4770      	bx	lr

08015d7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015d7a:	4770      	bx	lr

08015d7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015d7c:	4770      	bx	lr

08015d7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015d7e:	4770      	bx	lr

08015d80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015d80:	4770      	bx	lr

08015d82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015d82:	4770      	bx	lr

08015d84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015d84:	4770      	bx	lr

08015d86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015d86:	4770      	bx	lr

08015d88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015d88:	4770      	bx	lr
	...

08015d8c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d8e:	4606      	mov	r6, r0
 8015d90:	b087      	sub	sp, #28
 8015d92:	4615      	mov	r5, r2
 8015d94:	461f      	mov	r7, r3
 8015d96:	b353      	cbz	r3, 8015dee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015d98:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	dd26      	ble.n	8015dee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015da0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	dd22      	ble.n	8015dee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015da8:	6808      	ldr	r0, [r1, #0]
 8015daa:	aa04      	add	r2, sp, #16
 8015dac:	6849      	ldr	r1, [r1, #4]
 8015dae:	4c1b      	ldr	r4, [pc, #108]	; (8015e1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015db0:	c203      	stmia	r2!, {r0, r1}
 8015db2:	a804      	add	r0, sp, #16
 8015db4:	f7fb fb74 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015db8:	6820      	ldr	r0, [r4, #0]
 8015dba:	6803      	ldr	r3, [r0, #0]
 8015dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dbe:	4798      	blx	r3
 8015dc0:	2fff      	cmp	r7, #255	; 0xff
 8015dc2:	d016      	beq.n	8015df2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015dc4:	f010 0f08 	tst.w	r0, #8
 8015dc8:	6820      	ldr	r0, [r4, #0]
 8015dca:	d015      	beq.n	8015df8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8015dcc:	2400      	movs	r4, #0
 8015dce:	6801      	ldr	r1, [r0, #0]
 8015dd0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015dd4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015dd8:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8015ddc:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015de0:	9401      	str	r4, [sp, #4]
 8015de2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015de6:	9400      	str	r4, [sp, #0]
 8015de8:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8015dea:	4629      	mov	r1, r5
 8015dec:	47a0      	blx	r4
 8015dee:	b007      	add	sp, #28
 8015df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015df2:	f010 0f02 	tst.w	r0, #2
 8015df6:	e7e7      	b.n	8015dc8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8015df8:	6803      	ldr	r3, [r0, #0]
 8015dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dfc:	4798      	blx	r3
 8015dfe:	4b08      	ldr	r3, [pc, #32]	; (8015e20 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8015e00:	4601      	mov	r1, r0
 8015e02:	4630      	mov	r0, r6
 8015e04:	881a      	ldrh	r2, [r3, #0]
 8015e06:	6833      	ldr	r3, [r6, #0]
 8015e08:	e9cd 5700 	strd	r5, r7, [sp]
 8015e0c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015e0e:	ab04      	add	r3, sp, #16
 8015e10:	47a8      	blx	r5
 8015e12:	6820      	ldr	r0, [r4, #0]
 8015e14:	6803      	ldr	r3, [r0, #0]
 8015e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e18:	4798      	blx	r3
 8015e1a:	e7e8      	b.n	8015dee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015e1c:	2400b980 	.word	0x2400b980
 8015e20:	2400b97a 	.word	0x2400b97a

08015e24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e28:	b08b      	sub	sp, #44	; 0x2c
 8015e2a:	460d      	mov	r5, r1
 8015e2c:	4616      	mov	r6, r2
 8015e2e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015e32:	f1b8 0f00 	cmp.w	r8, #0
 8015e36:	d047      	beq.n	8015ec8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015e38:	6810      	ldr	r0, [r2, #0]
 8015e3a:	ac06      	add	r4, sp, #24
 8015e3c:	6851      	ldr	r1, [r2, #4]
 8015e3e:	4f51      	ldr	r7, [pc, #324]	; (8015f84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8015e40:	c403      	stmia	r4!, {r0, r1}
 8015e42:	6818      	ldr	r0, [r3, #0]
 8015e44:	ac08      	add	r4, sp, #32
 8015e46:	6859      	ldr	r1, [r3, #4]
 8015e48:	c403      	stmia	r4!, {r0, r1}
 8015e4a:	a806      	add	r0, sp, #24
 8015e4c:	f7fb fb28 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015e50:	4631      	mov	r1, r6
 8015e52:	a808      	add	r0, sp, #32
 8015e54:	f7fb fb4c 	bl	80114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015e58:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015e5c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015e60:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015e64:	6838      	ldr	r0, [r7, #0]
 8015e66:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015e6a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8015e6e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8015e72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015e76:	440d      	add	r5, r1
 8015e78:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015e7c:	440a      	add	r2, r1
 8015e7e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015e82:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015e86:	4413      	add	r3, r2
 8015e88:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015e8c:	6803      	ldr	r3, [r0, #0]
 8015e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e90:	4798      	blx	r3
 8015e92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015e96:	d01a      	beq.n	8015ece <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8015e98:	f010 0f04 	tst.w	r0, #4
 8015e9c:	6838      	ldr	r0, [r7, #0]
 8015e9e:	d019      	beq.n	8015ed4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8015ea0:	2100      	movs	r1, #0
 8015ea2:	6807      	ldr	r7, [r0, #0]
 8015ea4:	b2a4      	uxth	r4, r4
 8015ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8015eaa:	b2b6      	uxth	r6, r6
 8015eac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015eb0:	9401      	str	r4, [sp, #4]
 8015eb2:	9600      	str	r6, [sp, #0]
 8015eb4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015eb8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8015ebc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015ec0:	9102      	str	r1, [sp, #8]
 8015ec2:	4629      	mov	r1, r5
 8015ec4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8015ec6:	47a0      	blx	r4
 8015ec8:	b00b      	add	sp, #44	; 0x2c
 8015eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ece:	f010 0f01 	tst.w	r0, #1
 8015ed2:	e7e3      	b.n	8015e9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8015ed4:	6803      	ldr	r3, [r0, #0]
 8015ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ed8:	4798      	blx	r3
 8015eda:	4a2b      	ldr	r2, [pc, #172]	; (8015f88 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8015edc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8015ee0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015ee4:	8813      	ldrh	r3, [r2, #0]
 8015ee6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8015eea:	fb03 f404 	mul.w	r4, r3, r4
 8015eee:	fb03 c101 	mla	r1, r3, r1, ip
 8015ef2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015ef6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015efa:	4408      	add	r0, r1
 8015efc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015f00:	4404      	add	r4, r0
 8015f02:	d02e      	beq.n	8015f62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8015f04:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8015f08:	1b9b      	subs	r3, r3, r6
 8015f0a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8015f0e:	1b96      	subs	r6, r2, r6
 8015f10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f14:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015f18:	42a0      	cmp	r0, r4
 8015f1a:	d22d      	bcs.n	8015f78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015f1c:	eb00 0e01 	add.w	lr, r0, r1
 8015f20:	4570      	cmp	r0, lr
 8015f22:	d210      	bcs.n	8015f46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8015f24:	f890 9000 	ldrb.w	r9, [r0]
 8015f28:	f815 2b01 	ldrb.w	r2, [r5], #1
 8015f2c:	fb19 f90c 	smulbb	r9, r9, ip
 8015f30:	fb02 9208 	mla	r2, r2, r8, r9
 8015f34:	b292      	uxth	r2, r2
 8015f36:	f102 0901 	add.w	r9, r2, #1
 8015f3a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8015f3e:	1212      	asrs	r2, r2, #8
 8015f40:	f800 2b01 	strb.w	r2, [r0], #1
 8015f44:	e7ec      	b.n	8015f20 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8015f46:	4418      	add	r0, r3
 8015f48:	4435      	add	r5, r6
 8015f4a:	e7e5      	b.n	8015f18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8015f4c:	8813      	ldrh	r3, [r2, #0]
 8015f4e:	1b9b      	subs	r3, r3, r6
 8015f50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f54:	4418      	add	r0, r3
 8015f56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015f5a:	1b9b      	subs	r3, r3, r6
 8015f5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f60:	441d      	add	r5, r3
 8015f62:	42a0      	cmp	r0, r4
 8015f64:	d208      	bcs.n	8015f78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015f66:	eb00 0c01 	add.w	ip, r0, r1
 8015f6a:	4560      	cmp	r0, ip
 8015f6c:	d2ee      	bcs.n	8015f4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8015f6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015f72:	f800 3b01 	strb.w	r3, [r0], #1
 8015f76:	e7f8      	b.n	8015f6a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8015f78:	6838      	ldr	r0, [r7, #0]
 8015f7a:	6803      	ldr	r3, [r0, #0]
 8015f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f7e:	4798      	blx	r3
 8015f80:	e7a2      	b.n	8015ec8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015f82:	bf00      	nop
 8015f84:	2400b980 	.word	0x2400b980
 8015f88:	2400b97a 	.word	0x2400b97a

08015f8c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8015f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f8e:	2300      	movs	r3, #0
 8015f90:	b085      	sub	sp, #20
 8015f92:	9300      	str	r3, [sp, #0]
 8015f94:	4b41      	ldr	r3, [pc, #260]	; (801609c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d136      	bne.n	801600a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8015f9c:	4a40      	ldr	r2, [pc, #256]	; (80160a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8015f9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fa2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d131      	bne.n	801600e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8015faa:	4b3e      	ldr	r3, [pc, #248]	; (80160a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8015fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fb0:	ac02      	add	r4, sp, #8
 8015fb2:	6808      	ldr	r0, [r1, #0]
 8015fb4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015fb8:	ab02      	add	r3, sp, #8
 8015fba:	6849      	ldr	r1, [r1, #4]
 8015fbc:	4d3a      	ldr	r5, [pc, #232]	; (80160a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8015fbe:	c303      	stmia	r3!, {r0, r1}
 8015fc0:	4669      	mov	r1, sp
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	f7fb fa94 	bl	80114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015fc8:	4668      	mov	r0, sp
 8015fca:	f7fb fa69 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015fce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015fd2:	f8bd 2000 	ldrh.w	r2, [sp]
 8015fd6:	462e      	mov	r6, r5
 8015fd8:	6828      	ldr	r0, [r5, #0]
 8015fda:	4413      	add	r3, r2
 8015fdc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015fe0:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015fe4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015fe8:	4413      	add	r3, r2
 8015fea:	f8ad 300a 	strh.w	r3, [sp, #10]
 8015fee:	6803      	ldr	r3, [r0, #0]
 8015ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ff2:	4798      	blx	r3
 8015ff4:	f010 0f01 	tst.w	r0, #1
 8015ff8:	d00b      	beq.n	8016012 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8015ffa:	6828      	ldr	r0, [r5, #0]
 8015ffc:	6803      	ldr	r3, [r0, #0]
 8015ffe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016004:	4798      	blx	r3
 8016006:	b005      	add	sp, #20
 8016008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801600a:	4a26      	ldr	r2, [pc, #152]	; (80160a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801600c:	e7c7      	b.n	8015f9e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801600e:	4b24      	ldr	r3, [pc, #144]	; (80160a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8016010:	e7cc      	b.n	8015fac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8016012:	6830      	ldr	r0, [r6, #0]
 8016014:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8016018:	6803      	ldr	r3, [r0, #0]
 801601a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016020:	4798      	blx	r3
 8016022:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016026:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801602a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801602e:	fb14 3402 	smlabb	r4, r4, r2, r3
 8016032:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016036:	4404      	add	r4, r0
 8016038:	6830      	ldr	r0, [r6, #0]
 801603a:	6803      	ldr	r3, [r0, #0]
 801603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801603e:	4798      	blx	r3
 8016040:	4917      	ldr	r1, [pc, #92]	; (80160a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8016042:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016046:	880b      	ldrh	r3, [r1, #0]
 8016048:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801604c:	fb03 c202 	mla	r2, r3, r2, ip
 8016050:	437b      	muls	r3, r7
 8016052:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8016056:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801605a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801605e:	4410      	add	r0, r2
 8016060:	18c2      	adds	r2, r0, r3
 8016062:	4290      	cmp	r0, r2
 8016064:	d214      	bcs.n	8016090 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8016066:	eb00 0c07 	add.w	ip, r0, r7
 801606a:	4560      	cmp	r0, ip
 801606c:	d204      	bcs.n	8016078 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801606e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016072:	f800 3b01 	strb.w	r3, [r0], #1
 8016076:	e7f8      	b.n	801606a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8016078:	880b      	ldrh	r3, [r1, #0]
 801607a:	1b5b      	subs	r3, r3, r5
 801607c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016080:	4418      	add	r0, r3
 8016082:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016086:	1b5b      	subs	r3, r3, r5
 8016088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801608c:	441c      	add	r4, r3
 801608e:	e7e8      	b.n	8016062 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8016090:	6830      	ldr	r0, [r6, #0]
 8016092:	6803      	ldr	r3, [r0, #0]
 8016094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016096:	4798      	blx	r3
 8016098:	e7b5      	b.n	8016006 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801609a:	bf00      	nop
 801609c:	2400b978 	.word	0x2400b978
 80160a0:	2400b97a 	.word	0x2400b97a
 80160a4:	2400b97c 	.word	0x2400b97c
 80160a8:	2400b980 	.word	0x2400b980

080160ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80160ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b0:	b089      	sub	sp, #36	; 0x24
 80160b2:	4607      	mov	r7, r0
 80160b4:	4689      	mov	r9, r1
 80160b6:	4692      	mov	sl, r2
 80160b8:	ac08      	add	r4, sp, #32
 80160ba:	461e      	mov	r6, r3
 80160bc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80160c0:	4620      	mov	r0, r4
 80160c2:	f7fe f8ef 	bl	80142a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	4605      	mov	r5, r0
 80160ca:	4620      	mov	r0, r4
 80160cc:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80160d0:	f7fe f834 	bl	801413c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160d4:	4683      	mov	fp, r0
 80160d6:	4620      	mov	r0, r4
 80160d8:	f7fe f864 	bl	80141a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160dc:	4653      	mov	r3, sl
 80160de:	464a      	mov	r2, r9
 80160e0:	4639      	mov	r1, r7
 80160e2:	9500      	str	r5, [sp, #0]
 80160e4:	e9cd b001 	strd	fp, r0, [sp, #4]
 80160e8:	a806      	add	r0, sp, #24
 80160ea:	47c0      	blx	r8
 80160ec:	a906      	add	r1, sp, #24
 80160ee:	4630      	mov	r0, r6
 80160f0:	f7fd ff08 	bl	8013f04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80160f4:	4628      	mov	r0, r5
 80160f6:	b009      	add	sp, #36	; 0x24
 80160f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160fc <_ZN8touchgfx8LCD24bppD0Ev>:
 80160fc:	b510      	push	{r4, lr}
 80160fe:	4604      	mov	r4, r0
 8016100:	2158      	movs	r1, #88	; 0x58
 8016102:	f006 f8f6 	bl	801c2f2 <_ZdlPvj>
 8016106:	4620      	mov	r0, r4
 8016108:	bd10      	pop	{r4, pc}

0801610a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801610a:	b510      	push	{r4, lr}
 801610c:	4604      	mov	r4, r0
 801610e:	2104      	movs	r1, #4
 8016110:	f006 f8ef 	bl	801c2f2 <_ZdlPvj>
 8016114:	4620      	mov	r0, r4
 8016116:	bd10      	pop	{r4, pc}

08016118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8016118:	b510      	push	{r4, lr}
 801611a:	4604      	mov	r4, r0
 801611c:	2104      	movs	r1, #4
 801611e:	f006 f8e8 	bl	801c2f2 <_ZdlPvj>
 8016122:	4620      	mov	r0, r4
 8016124:	bd10      	pop	{r4, pc}

08016126 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8016126:	b510      	push	{r4, lr}
 8016128:	4604      	mov	r4, r0
 801612a:	2104      	movs	r1, #4
 801612c:	f006 f8e1 	bl	801c2f2 <_ZdlPvj>
 8016130:	4620      	mov	r0, r4
 8016132:	bd10      	pop	{r4, pc}

08016134 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8016134:	b510      	push	{r4, lr}
 8016136:	4604      	mov	r4, r0
 8016138:	2104      	movs	r1, #4
 801613a:	f006 f8da 	bl	801c2f2 <_ZdlPvj>
 801613e:	4620      	mov	r0, r4
 8016140:	bd10      	pop	{r4, pc}

08016142 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8016142:	b510      	push	{r4, lr}
 8016144:	4604      	mov	r4, r0
 8016146:	2104      	movs	r1, #4
 8016148:	f006 f8d3 	bl	801c2f2 <_ZdlPvj>
 801614c:	4620      	mov	r0, r4
 801614e:	bd10      	pop	{r4, pc}

08016150 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8016150:	b510      	push	{r4, lr}
 8016152:	4604      	mov	r4, r0
 8016154:	2104      	movs	r1, #4
 8016156:	f006 f8cc 	bl	801c2f2 <_ZdlPvj>
 801615a:	4620      	mov	r0, r4
 801615c:	bd10      	pop	{r4, pc}

0801615e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801615e:	b510      	push	{r4, lr}
 8016160:	4604      	mov	r4, r0
 8016162:	2104      	movs	r1, #4
 8016164:	f006 f8c5 	bl	801c2f2 <_ZdlPvj>
 8016168:	4620      	mov	r0, r4
 801616a:	bd10      	pop	{r4, pc}

0801616c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801616c:	b510      	push	{r4, lr}
 801616e:	4604      	mov	r4, r0
 8016170:	2104      	movs	r1, #4
 8016172:	f006 f8be 	bl	801c2f2 <_ZdlPvj>
 8016176:	4620      	mov	r0, r4
 8016178:	bd10      	pop	{r4, pc}

0801617a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801617a:	b510      	push	{r4, lr}
 801617c:	4604      	mov	r4, r0
 801617e:	2104      	movs	r1, #4
 8016180:	f006 f8b7 	bl	801c2f2 <_ZdlPvj>
 8016184:	4620      	mov	r0, r4
 8016186:	bd10      	pop	{r4, pc}

08016188 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8016188:	b510      	push	{r4, lr}
 801618a:	4604      	mov	r4, r0
 801618c:	2104      	movs	r1, #4
 801618e:	f006 f8b0 	bl	801c2f2 <_ZdlPvj>
 8016192:	4620      	mov	r0, r4
 8016194:	bd10      	pop	{r4, pc}

08016196 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8016196:	b510      	push	{r4, lr}
 8016198:	4604      	mov	r4, r0
 801619a:	2104      	movs	r1, #4
 801619c:	f006 f8a9 	bl	801c2f2 <_ZdlPvj>
 80161a0:	4620      	mov	r0, r4
 80161a2:	bd10      	pop	{r4, pc}

080161a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80161a4:	b510      	push	{r4, lr}
 80161a6:	4604      	mov	r4, r0
 80161a8:	2104      	movs	r1, #4
 80161aa:	f006 f8a2 	bl	801c2f2 <_ZdlPvj>
 80161ae:	4620      	mov	r0, r4
 80161b0:	bd10      	pop	{r4, pc}

080161b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80161b2:	b510      	push	{r4, lr}
 80161b4:	4604      	mov	r4, r0
 80161b6:	2104      	movs	r1, #4
 80161b8:	f006 f89b 	bl	801c2f2 <_ZdlPvj>
 80161bc:	4620      	mov	r0, r4
 80161be:	bd10      	pop	{r4, pc}

080161c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80161c0:	b510      	push	{r4, lr}
 80161c2:	4604      	mov	r4, r0
 80161c4:	2104      	movs	r1, #4
 80161c6:	f006 f894 	bl	801c2f2 <_ZdlPvj>
 80161ca:	4620      	mov	r0, r4
 80161cc:	bd10      	pop	{r4, pc}

080161ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80161ce:	b510      	push	{r4, lr}
 80161d0:	4604      	mov	r4, r0
 80161d2:	2104      	movs	r1, #4
 80161d4:	f006 f88d 	bl	801c2f2 <_ZdlPvj>
 80161d8:	4620      	mov	r0, r4
 80161da:	bd10      	pop	{r4, pc}

080161dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80161dc:	b510      	push	{r4, lr}
 80161de:	4604      	mov	r4, r0
 80161e0:	2104      	movs	r1, #4
 80161e2:	f006 f886 	bl	801c2f2 <_ZdlPvj>
 80161e6:	4620      	mov	r0, r4
 80161e8:	bd10      	pop	{r4, pc}

080161ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80161ea:	b510      	push	{r4, lr}
 80161ec:	4604      	mov	r4, r0
 80161ee:	2104      	movs	r1, #4
 80161f0:	f006 f87f 	bl	801c2f2 <_ZdlPvj>
 80161f4:	4620      	mov	r0, r4
 80161f6:	bd10      	pop	{r4, pc}

080161f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80161f8:	b510      	push	{r4, lr}
 80161fa:	4604      	mov	r4, r0
 80161fc:	2104      	movs	r1, #4
 80161fe:	f006 f878 	bl	801c2f2 <_ZdlPvj>
 8016202:	4620      	mov	r0, r4
 8016204:	bd10      	pop	{r4, pc}

08016206 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8016206:	b510      	push	{r4, lr}
 8016208:	4604      	mov	r4, r0
 801620a:	2104      	movs	r1, #4
 801620c:	f006 f871 	bl	801c2f2 <_ZdlPvj>
 8016210:	4620      	mov	r0, r4
 8016212:	bd10      	pop	{r4, pc}

08016214 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8016214:	b510      	push	{r4, lr}
 8016216:	4604      	mov	r4, r0
 8016218:	2104      	movs	r1, #4
 801621a:	f006 f86a 	bl	801c2f2 <_ZdlPvj>
 801621e:	4620      	mov	r0, r4
 8016220:	bd10      	pop	{r4, pc}

08016222 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8016222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016226:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801622a:	9c06      	ldr	r4, [sp, #24]
 801622c:	2800      	cmp	r0, #0
 801622e:	d06e      	beq.n	801630e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016230:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8016234:	2d00      	cmp	r5, #0
 8016236:	dd6a      	ble.n	801630e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016238:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801623c:	f1bc 0f00 	cmp.w	ip, #0
 8016240:	dd65      	ble.n	801630e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016242:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8016246:	28ff      	cmp	r0, #255	; 0xff
 8016248:	f9b3 3000 	ldrsh.w	r3, [r3]
 801624c:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8016250:	fb02 3306 	mla	r3, r2, r6, r3
 8016254:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8016258:	b2e4      	uxtb	r4, r4
 801625a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801625e:	4419      	add	r1, r3
 8016260:	fb02 f30c 	mul.w	r3, r2, ip
 8016264:	eba2 0205 	sub.w	r2, r2, r5
 8016268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801626c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016270:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016274:	440b      	add	r3, r1
 8016276:	d03e      	beq.n	80162f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8016278:	fa1f fc80 	uxth.w	ip, r0
 801627c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8016280:	fb06 f60c 	mul.w	r6, r6, ip
 8016284:	b280      	uxth	r0, r0
 8016286:	fb07 f70c 	mul.w	r7, r7, ip
 801628a:	fb04 f40c 	mul.w	r4, r4, ip
 801628e:	4299      	cmp	r1, r3
 8016290:	d23d      	bcs.n	801630e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016292:	eb01 0c05 	add.w	ip, r1, r5
 8016296:	458c      	cmp	ip, r1
 8016298:	f101 0e03 	add.w	lr, r1, #3
 801629c:	d928      	bls.n	80162f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801629e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80162a2:	fb11 f100 	smulbb	r1, r1, r0
 80162a6:	4421      	add	r1, r4
 80162a8:	b289      	uxth	r1, r1
 80162aa:	f101 0801 	add.w	r8, r1, #1
 80162ae:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80162b2:	1209      	asrs	r1, r1, #8
 80162b4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80162b8:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80162bc:	fb11 f100 	smulbb	r1, r1, r0
 80162c0:	4439      	add	r1, r7
 80162c2:	b289      	uxth	r1, r1
 80162c4:	f101 0801 	add.w	r8, r1, #1
 80162c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80162cc:	1209      	asrs	r1, r1, #8
 80162ce:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80162d2:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80162d6:	fb11 f100 	smulbb	r1, r1, r0
 80162da:	4431      	add	r1, r6
 80162dc:	b289      	uxth	r1, r1
 80162de:	f101 0801 	add.w	r8, r1, #1
 80162e2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80162e6:	1209      	asrs	r1, r1, #8
 80162e8:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80162ec:	4671      	mov	r1, lr
 80162ee:	e7d2      	b.n	8016296 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80162f0:	4411      	add	r1, r2
 80162f2:	e7cc      	b.n	801628e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80162f4:	4411      	add	r1, r2
 80162f6:	4299      	cmp	r1, r3
 80162f8:	d209      	bcs.n	801630e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80162fa:	1948      	adds	r0, r1, r5
 80162fc:	4281      	cmp	r1, r0
 80162fe:	d2f9      	bcs.n	80162f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8016300:	700c      	strb	r4, [r1, #0]
 8016302:	3103      	adds	r1, #3
 8016304:	f801 7c02 	strb.w	r7, [r1, #-2]
 8016308:	f801 6c01 	strb.w	r6, [r1, #-1]
 801630c:	e7f6      	b.n	80162fc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801630e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016314 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8016314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016318:	b093      	sub	sp, #76	; 0x4c
 801631a:	4699      	mov	r9, r3
 801631c:	4617      	mov	r7, r2
 801631e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016322:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8016326:	4604      	mov	r4, r0
 8016328:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801632c:	a80c      	add	r0, sp, #48	; 0x30
 801632e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8016332:	460d      	mov	r5, r1
 8016334:	4649      	mov	r1, r9
 8016336:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801633a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801633e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8016342:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8016346:	f7f9 f93b 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 801634a:	4639      	mov	r1, r7
 801634c:	a80c      	add	r0, sp, #48	; 0x30
 801634e:	f7f9 f937 	bl	800f5c0 <_ZN8touchgfx4RectaNERKS0_>
 8016352:	4b78      	ldr	r3, [pc, #480]	; (8016534 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8016354:	8818      	ldrh	r0, [r3, #0]
 8016356:	4b78      	ldr	r3, [pc, #480]	; (8016538 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8016358:	b202      	sxth	r2, r0
 801635a:	8819      	ldrh	r1, [r3, #0]
 801635c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016360:	b20f      	sxth	r7, r1
 8016362:	2b00      	cmp	r3, #0
 8016364:	da07      	bge.n	8016376 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8016366:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801636a:	4463      	add	r3, ip
 801636c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8016370:	2300      	movs	r3, #0
 8016372:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8016376:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801637a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801637e:	1ad2      	subs	r2, r2, r3
 8016380:	4594      	cmp	ip, r2
 8016382:	bfc4      	itt	gt
 8016384:	1ac2      	subgt	r2, r0, r3
 8016386:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801638a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801638e:	2a00      	cmp	r2, #0
 8016390:	da07      	bge.n	80163a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8016392:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8016396:	4462      	add	r2, ip
 8016398:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801639c:	2200      	movs	r2, #0
 801639e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80163a2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80163a6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80163aa:	1abf      	subs	r7, r7, r2
 80163ac:	45bc      	cmp	ip, r7
 80163ae:	f8df c190 	ldr.w	ip, [pc, #400]	; 8016540 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80163b2:	bfc8      	it	gt
 80163b4:	1a8f      	subgt	r7, r1, r2
 80163b6:	f89c c000 	ldrb.w	ip, [ip]
 80163ba:	bfc8      	it	gt
 80163bc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80163c0:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80163c4:	f1bc 0f00 	cmp.w	ip, #0
 80163c8:	d176      	bne.n	80164b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80163ca:	4287      	cmp	r7, r0
 80163cc:	bf14      	ite	ne
 80163ce:	2100      	movne	r1, #0
 80163d0:	2101      	moveq	r1, #1
 80163d2:	2f00      	cmp	r7, #0
 80163d4:	9107      	str	r1, [sp, #28]
 80163d6:	dd73      	ble.n	80164c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80163d8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80163dc:	2900      	cmp	r1, #0
 80163de:	9104      	str	r1, [sp, #16]
 80163e0:	dd6e      	ble.n	80164c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80163e2:	f8b9 1000 	ldrh.w	r1, [r9]
 80163e6:	a80e      	add	r0, sp, #56	; 0x38
 80163e8:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80163ec:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80163f0:	1a5b      	subs	r3, r3, r1
 80163f2:	a910      	add	r1, sp, #64	; 0x40
 80163f4:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80163f8:	b21b      	sxth	r3, r3
 80163fa:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80163fe:	f8df a144 	ldr.w	sl, [pc, #324]	; 8016544 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8016402:	9305      	str	r3, [sp, #20]
 8016404:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8016408:	1ad2      	subs	r2, r2, r3
 801640a:	b213      	sxth	r3, r2
 801640c:	9306      	str	r3, [sp, #24]
 801640e:	9b05      	ldr	r3, [sp, #20]
 8016410:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8016414:	9b06      	ldr	r3, [sp, #24]
 8016416:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801641a:	9b04      	ldr	r3, [sp, #16]
 801641c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016420:	2300      	movs	r3, #0
 8016422:	9310      	str	r3, [sp, #64]	; 0x40
 8016424:	f7fb f864 	bl	80114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016428:	4640      	mov	r0, r8
 801642a:	f7fb f839 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801642e:	a810      	add	r0, sp, #64	; 0x40
 8016430:	f7fb f836 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016434:	4b41      	ldr	r3, [pc, #260]	; (801653c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8016436:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801643a:	4628      	mov	r0, r5
 801643c:	881b      	ldrh	r3, [r3, #0]
 801643e:	9308      	str	r3, [sp, #32]
 8016440:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8016444:	b21b      	sxth	r3, r3
 8016446:	9303      	str	r3, [sp, #12]
 8016448:	682b      	ldr	r3, [r5, #0]
 801644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801644c:	4798      	blx	r3
 801644e:	9a03      	ldr	r2, [sp, #12]
 8016450:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016454:	4681      	mov	r9, r0
 8016456:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801645a:	fb13 f302 	smulbb	r3, r3, r2
 801645e:	2203      	movs	r2, #3
 8016460:	f8da 0000 	ldr.w	r0, [sl]
 8016464:	fb15 3302 	smlabb	r3, r5, r2, r3
 8016468:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801646a:	920b      	str	r2, [sp, #44]	; 0x2c
 801646c:	441d      	add	r5, r3
 801646e:	6803      	ldr	r3, [r0, #0]
 8016470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016472:	4798      	blx	r3
 8016474:	9009      	str	r0, [sp, #36]	; 0x24
 8016476:	f8da 0000 	ldr.w	r0, [sl]
 801647a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801647e:	6803      	ldr	r3, [r0, #0]
 8016480:	910a      	str	r1, [sp, #40]	; 0x28
 8016482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016484:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8016488:	4798      	blx	r3
 801648a:	f010 0f01 	tst.w	r0, #1
 801648e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016492:	d01e      	beq.n	80164d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8016494:	f8da 0000 	ldr.w	r0, [sl]
 8016498:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801649c:	6803      	ldr	r3, [r0, #0]
 801649e:	9200      	str	r2, [sp, #0]
 80164a0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80164a2:	462b      	mov	r3, r5
 80164a4:	e898 0006 	ldmia.w	r8, {r1, r2}
 80164a8:	47b0      	blx	r6
 80164aa:	9b05      	ldr	r3, [sp, #20]
 80164ac:	80a7      	strh	r7, [r4, #4]
 80164ae:	8023      	strh	r3, [r4, #0]
 80164b0:	9b06      	ldr	r3, [sp, #24]
 80164b2:	8063      	strh	r3, [r4, #2]
 80164b4:	9b04      	ldr	r3, [sp, #16]
 80164b6:	e007      	b.n	80164c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 80164b8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 80164bc:	4288      	cmp	r0, r1
 80164be:	e785      	b.n	80163cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80164c0:	2300      	movs	r3, #0
 80164c2:	8023      	strh	r3, [r4, #0]
 80164c4:	8063      	strh	r3, [r4, #2]
 80164c6:	80a3      	strh	r3, [r4, #4]
 80164c8:	4620      	mov	r0, r4
 80164ca:	80e3      	strh	r3, [r4, #6]
 80164cc:	b013      	add	sp, #76	; 0x4c
 80164ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164d2:	fb09 f606 	mul.w	r6, r9, r6
 80164d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164d8:	fb11 6602 	smlabb	r6, r1, r2, r6
 80164dc:	9a07      	ldr	r2, [sp, #28]
 80164de:	4433      	add	r3, r6
 80164e0:	461e      	mov	r6, r3
 80164e2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80164e6:	b16a      	cbz	r2, 8016504 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80164e8:	9a08      	ldr	r2, [sp, #32]
 80164ea:	4593      	cmp	fp, r2
 80164ec:	d10a      	bne.n	8016504 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80164ee:	f8da 0000 	ldr.w	r0, [sl]
 80164f2:	fb09 f303 	mul.w	r3, r9, r3
 80164f6:	4629      	mov	r1, r5
 80164f8:	6802      	ldr	r2, [r0, #0]
 80164fa:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80164fe:	4632      	mov	r2, r6
 8016500:	47d0      	blx	sl
 8016502:	e7d2      	b.n	80164aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8016504:	9a03      	ldr	r2, [sp, #12]
 8016506:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8016544 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801650a:	fb02 5803 	mla	r8, r2, r3, r5
 801650e:	4545      	cmp	r5, r8
 8016510:	d2cb      	bcs.n	80164aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8016512:	f8db 0000 	ldr.w	r0, [fp]
 8016516:	4629      	mov	r1, r5
 8016518:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801651c:	6802      	ldr	r2, [r0, #0]
 801651e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016522:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8016526:	4632      	mov	r2, r6
 8016528:	47d0      	blx	sl
 801652a:	9b03      	ldr	r3, [sp, #12]
 801652c:	444e      	add	r6, r9
 801652e:	441d      	add	r5, r3
 8016530:	e7ed      	b.n	801650e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8016532:	bf00      	nop
 8016534:	2400b974 	.word	0x2400b974
 8016538:	2400b976 	.word	0x2400b976
 801653c:	2400b97a 	.word	0x2400b97a
 8016540:	2400b978 	.word	0x2400b978
 8016544:	2400b980 	.word	0x2400b980

08016548 <_ZN8touchgfx8LCD24bppC1Ev>:
 8016548:	2200      	movs	r2, #0
 801654a:	490c      	ldr	r1, [pc, #48]	; (801657c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801654c:	6042      	str	r2, [r0, #4]
 801654e:	6001      	str	r1, [r0, #0]
 8016550:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8016554:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8016558:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801655c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8016560:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8016564:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8016568:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801656c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8016570:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8016574:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8016578:	4770      	bx	lr
 801657a:	bf00      	nop
 801657c:	0801f518 	.word	0x0801f518

08016580 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8016580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016584:	b091      	sub	sp, #68	; 0x44
 8016586:	4607      	mov	r7, r0
 8016588:	4688      	mov	r8, r1
 801658a:	6810      	ldr	r0, [r2, #0]
 801658c:	6851      	ldr	r1, [r2, #4]
 801658e:	ac0c      	add	r4, sp, #48	; 0x30
 8016590:	4616      	mov	r6, r2
 8016592:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8016596:	4d64      	ldr	r5, [pc, #400]	; (8016728 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8016598:	f8df a190 	ldr.w	sl, [pc, #400]	; 801672c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801659c:	c403      	stmia	r4!, {r0, r1}
 801659e:	6818      	ldr	r0, [r3, #0]
 80165a0:	ac0e      	add	r4, sp, #56	; 0x38
 80165a2:	6859      	ldr	r1, [r3, #4]
 80165a4:	c403      	stmia	r4!, {r0, r1}
 80165a6:	a80c      	add	r0, sp, #48	; 0x30
 80165a8:	f7fa ff7a 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80165ac:	4631      	mov	r1, r6
 80165ae:	a80e      	add	r0, sp, #56	; 0x38
 80165b0:	f7fa ff9e 	bl	80114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80165b4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80165b8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80165bc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80165c0:	6828      	ldr	r0, [r5, #0]
 80165c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80165c6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80165ca:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 80165ce:	440f      	add	r7, r1
 80165d0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80165d4:	440a      	add	r2, r1
 80165d6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80165da:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80165de:	4413      	add	r3, r2
 80165e0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80165e4:	6803      	ldr	r3, [r0, #0]
 80165e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165e8:	4798      	blx	r3
 80165ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80165ee:	6828      	ldr	r0, [r5, #0]
 80165f0:	d01f      	beq.n	8016632 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80165f2:	2201      	movs	r2, #1
 80165f4:	2500      	movs	r5, #0
 80165f6:	6801      	ldr	r1, [r0, #0]
 80165f8:	b2a4      	uxth	r4, r4
 80165fa:	b2b6      	uxth	r6, r6
 80165fc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016600:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8016604:	250b      	movs	r5, #11
 8016606:	9507      	str	r5, [sp, #28]
 8016608:	f8ba 5000 	ldrh.w	r5, [sl]
 801660c:	f8cd 9010 	str.w	r9, [sp, #16]
 8016610:	9602      	str	r6, [sp, #8]
 8016612:	9401      	str	r4, [sp, #4]
 8016614:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8016618:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801661c:	9203      	str	r2, [sp, #12]
 801661e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016622:	9200      	str	r2, [sp, #0]
 8016624:	4642      	mov	r2, r8
 8016626:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8016628:	4639      	mov	r1, r7
 801662a:	47a0      	blx	r4
 801662c:	b011      	add	sp, #68	; 0x44
 801662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016632:	6803      	ldr	r3, [r0, #0]
 8016634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016636:	4798      	blx	r3
 8016638:	f8ba 5000 	ldrh.w	r5, [sl]
 801663c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8016640:	f04f 0e04 	mov.w	lr, #4
 8016644:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016648:	436e      	muls	r6, r5
 801664a:	fb05 2303 	mla	r3, r5, r3, r2
 801664e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016652:	1b2d      	subs	r5, r5, r4
 8016654:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801665c:	4418      	add	r0, r3
 801665e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016662:	1982      	adds	r2, r0, r6
 8016664:	1b1b      	subs	r3, r3, r4
 8016666:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801666a:	930b      	str	r3, [sp, #44]	; 0x2c
 801666c:	4290      	cmp	r0, r2
 801666e:	d254      	bcs.n	801671a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8016670:	eb00 0a04 	add.w	sl, r0, r4
 8016674:	4550      	cmp	r0, sl
 8016676:	d24c      	bcs.n	8016712 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8016678:	f817 1b01 	ldrb.w	r1, [r7], #1
 801667c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8016680:	eb08 0c01 	add.w	ip, r8, r1
 8016684:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8016688:	b173      	cbz	r3, 80166a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801668a:	2bff      	cmp	r3, #255	; 0xff
 801668c:	f818 b001 	ldrb.w	fp, [r8, r1]
 8016690:	d10c      	bne.n	80166ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8016692:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016696:	d109      	bne.n	80166ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8016698:	f880 b000 	strb.w	fp, [r0]
 801669c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80166a0:	7043      	strb	r3, [r0, #1]
 80166a2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80166a6:	7083      	strb	r3, [r0, #2]
 80166a8:	3003      	adds	r0, #3
 80166aa:	e7e3      	b.n	8016674 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 80166ac:	fb09 f103 	mul.w	r1, r9, r3
 80166b0:	1c4b      	adds	r3, r1, #1
 80166b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80166b6:	7801      	ldrb	r1, [r0, #0]
 80166b8:	121b      	asrs	r3, r3, #8
 80166ba:	b29e      	uxth	r6, r3
 80166bc:	43db      	mvns	r3, r3
 80166be:	fb1b fb06 	smulbb	fp, fp, r6
 80166c2:	b2db      	uxtb	r3, r3
 80166c4:	fb01 b103 	mla	r1, r1, r3, fp
 80166c8:	b289      	uxth	r1, r1
 80166ca:	f101 0b01 	add.w	fp, r1, #1
 80166ce:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80166d2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80166d6:	fb1b fb03 	smulbb	fp, fp, r3
 80166da:	1209      	asrs	r1, r1, #8
 80166dc:	7001      	strb	r1, [r0, #0]
 80166de:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80166e2:	fb01 b106 	mla	r1, r1, r6, fp
 80166e6:	b289      	uxth	r1, r1
 80166e8:	f101 0b01 	add.w	fp, r1, #1
 80166ec:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80166f0:	1209      	asrs	r1, r1, #8
 80166f2:	7041      	strb	r1, [r0, #1]
 80166f4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80166f8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80166fc:	fb1c f303 	smulbb	r3, ip, r3
 8016700:	fb01 3606 	mla	r6, r1, r6, r3
 8016704:	b2b6      	uxth	r6, r6
 8016706:	1c73      	adds	r3, r6, #1
 8016708:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801670c:	1236      	asrs	r6, r6, #8
 801670e:	7086      	strb	r6, [r0, #2]
 8016710:	e7ca      	b.n	80166a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8016712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016714:	4428      	add	r0, r5
 8016716:	441f      	add	r7, r3
 8016718:	e7a8      	b.n	801666c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801671a:	4b03      	ldr	r3, [pc, #12]	; (8016728 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801671c:	6818      	ldr	r0, [r3, #0]
 801671e:	6803      	ldr	r3, [r0, #0]
 8016720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016722:	4798      	blx	r3
 8016724:	e782      	b.n	801662c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8016726:	bf00      	nop
 8016728:	2400b980 	.word	0x2400b980
 801672c:	2400b97a 	.word	0x2400b97a

08016730 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8016730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016734:	b091      	sub	sp, #68	; 0x44
 8016736:	4680      	mov	r8, r0
 8016738:	460e      	mov	r6, r1
 801673a:	6810      	ldr	r0, [r2, #0]
 801673c:	6851      	ldr	r1, [r2, #4]
 801673e:	ad0c      	add	r5, sp, #48	; 0x30
 8016740:	4614      	mov	r4, r2
 8016742:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8016746:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80168e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801674a:	f8df a198 	ldr.w	sl, [pc, #408]	; 80168e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801674e:	c503      	stmia	r5!, {r0, r1}
 8016750:	6818      	ldr	r0, [r3, #0]
 8016752:	ad0e      	add	r5, sp, #56	; 0x38
 8016754:	6859      	ldr	r1, [r3, #4]
 8016756:	c503      	stmia	r5!, {r0, r1}
 8016758:	a80c      	add	r0, sp, #48	; 0x30
 801675a:	f7fa fea1 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801675e:	4621      	mov	r1, r4
 8016760:	a80e      	add	r0, sp, #56	; 0x38
 8016762:	f7fa fec5 	bl	80114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016766:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801676a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801676e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016772:	f8d9 0000 	ldr.w	r0, [r9]
 8016776:	fb11 2103 	smlabb	r1, r1, r3, r2
 801677a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801677e:	eb08 0401 	add.w	r4, r8, r1
 8016782:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8016786:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801678a:	440a      	add	r2, r1
 801678c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8016790:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016794:	4413      	add	r3, r2
 8016796:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801679a:	6803      	ldr	r3, [r0, #0]
 801679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801679e:	4798      	blx	r3
 80167a0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80167a4:	f8d9 0000 	ldr.w	r0, [r9]
 80167a8:	d022      	beq.n	80167f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80167aa:	2200      	movs	r2, #0
 80167ac:	f04f 0c01 	mov.w	ip, #1
 80167b0:	6801      	ldr	r1, [r0, #0]
 80167b2:	b2ad      	uxth	r5, r5
 80167b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80167b8:	e9cd c208 	strd	ip, r2, [sp, #32]
 80167bc:	f04f 0c0b 	mov.w	ip, #11
 80167c0:	f8cd c01c 	str.w	ip, [sp, #28]
 80167c4:	f8ba c000 	ldrh.w	ip, [sl]
 80167c8:	9704      	str	r7, [sp, #16]
 80167ca:	9502      	str	r5, [sp, #8]
 80167cc:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 80167d0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80167d4:	9203      	str	r2, [sp, #12]
 80167d6:	fa1f f288 	uxth.w	r2, r8
 80167da:	9201      	str	r2, [sp, #4]
 80167dc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80167e0:	9200      	str	r2, [sp, #0]
 80167e2:	4632      	mov	r2, r6
 80167e4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80167e6:	4621      	mov	r1, r4
 80167e8:	47a8      	blx	r5
 80167ea:	b011      	add	sp, #68	; 0x44
 80167ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f0:	6803      	ldr	r3, [r0, #0]
 80167f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167f4:	4798      	blx	r3
 80167f6:	f8ba 2000 	ldrh.w	r2, [sl]
 80167fa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80167fe:	f04f 0e03 	mov.w	lr, #3
 8016802:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8016806:	4355      	muls	r5, r2
 8016808:	fa1f fc87 	uxth.w	ip, r7
 801680c:	fb02 1303 	mla	r3, r2, r3, r1
 8016810:	eba2 0208 	sub.w	r2, r2, r8
 8016814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016818:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801681c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016820:	4418      	add	r0, r3
 8016822:	920b      	str	r2, [sp, #44]	; 0x2c
 8016824:	1943      	adds	r3, r0, r5
 8016826:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801682a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801682e:	eba2 0208 	sub.w	r2, r2, r8
 8016832:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016836:	b2ad      	uxth	r5, r5
 8016838:	4298      	cmp	r0, r3
 801683a:	d24a      	bcs.n	80168d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801683c:	eb00 0908 	add.w	r9, r0, r8
 8016840:	4621      	mov	r1, r4
 8016842:	4548      	cmp	r0, r9
 8016844:	460c      	mov	r4, r1
 8016846:	d240      	bcs.n	80168ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8016848:	f04f 0a04 	mov.w	sl, #4
 801684c:	7824      	ldrb	r4, [r4, #0]
 801684e:	2fff      	cmp	r7, #255	; 0xff
 8016850:	f101 0101 	add.w	r1, r1, #1
 8016854:	fb1e a404 	smlabb	r4, lr, r4, sl
 8016858:	eb06 0a04 	add.w	sl, r6, r4
 801685c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8016860:	d02b      	beq.n	80168ba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8016862:	7804      	ldrb	r4, [r0, #0]
 8016864:	fb14 f405 	smulbb	r4, r4, r5
 8016868:	fb0b 440c 	mla	r4, fp, ip, r4
 801686c:	b2a4      	uxth	r4, r4
 801686e:	f104 0b01 	add.w	fp, r4, #1
 8016872:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016876:	f890 b001 	ldrb.w	fp, [r0, #1]
 801687a:	fb1b fb05 	smulbb	fp, fp, r5
 801687e:	1224      	asrs	r4, r4, #8
 8016880:	7004      	strb	r4, [r0, #0]
 8016882:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8016886:	fb04 b40c 	mla	r4, r4, ip, fp
 801688a:	b2a4      	uxth	r4, r4
 801688c:	f104 0b01 	add.w	fp, r4, #1
 8016890:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016894:	1224      	asrs	r4, r4, #8
 8016896:	7044      	strb	r4, [r0, #1]
 8016898:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801689c:	f890 a002 	ldrb.w	sl, [r0, #2]
 80168a0:	fb1a fa05 	smulbb	sl, sl, r5
 80168a4:	fb04 a40c 	mla	r4, r4, ip, sl
 80168a8:	b2a4      	uxth	r4, r4
 80168aa:	f104 0a01 	add.w	sl, r4, #1
 80168ae:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80168b2:	1224      	asrs	r4, r4, #8
 80168b4:	7084      	strb	r4, [r0, #2]
 80168b6:	3003      	adds	r0, #3
 80168b8:	e7c3      	b.n	8016842 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 80168ba:	f880 b000 	strb.w	fp, [r0]
 80168be:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80168c2:	7044      	strb	r4, [r0, #1]
 80168c4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80168c8:	e7f4      	b.n	80168b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 80168ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80168cc:	4420      	add	r0, r4
 80168ce:	188c      	adds	r4, r1, r2
 80168d0:	e7b2      	b.n	8016838 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 80168d2:	4b03      	ldr	r3, [pc, #12]	; (80168e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80168d4:	6818      	ldr	r0, [r3, #0]
 80168d6:	6803      	ldr	r3, [r0, #0]
 80168d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168da:	4798      	blx	r3
 80168dc:	e785      	b.n	80167ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 80168de:	bf00      	nop
 80168e0:	2400b980 	.word	0x2400b980
 80168e4:	2400b97a 	.word	0x2400b97a

080168e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80168e8:	b430      	push	{r4, r5}
 80168ea:	780d      	ldrb	r5, [r1, #0]
 80168ec:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80168f0:	b11d      	cbz	r5, 80168fa <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 80168f2:	2d01      	cmp	r5, #1
 80168f4:	d005      	beq.n	8016902 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80168f6:	bc30      	pop	{r4, r5}
 80168f8:	4770      	bx	lr
 80168fa:	9402      	str	r4, [sp, #8]
 80168fc:	bc30      	pop	{r4, r5}
 80168fe:	f7ff be3f 	b.w	8016580 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8016902:	9402      	str	r4, [sp, #8]
 8016904:	bc30      	pop	{r4, r5}
 8016906:	f7ff bf13 	b.w	8016730 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801690c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801690c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016910:	4605      	mov	r5, r0
 8016912:	b08f      	sub	sp, #60	; 0x3c
 8016914:	460c      	mov	r4, r1
 8016916:	461f      	mov	r7, r3
 8016918:	2b00      	cmp	r3, #0
 801691a:	d052      	beq.n	80169c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801691c:	6808      	ldr	r0, [r1, #0]
 801691e:	ab0a      	add	r3, sp, #40	; 0x28
 8016920:	6849      	ldr	r1, [r1, #4]
 8016922:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8016aec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8016926:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8016af0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801692a:	c303      	stmia	r3!, {r0, r1}
 801692c:	6810      	ldr	r0, [r2, #0]
 801692e:	ab0c      	add	r3, sp, #48	; 0x30
 8016930:	6851      	ldr	r1, [r2, #4]
 8016932:	c303      	stmia	r3!, {r0, r1}
 8016934:	a80a      	add	r0, sp, #40	; 0x28
 8016936:	f7fa fdb3 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801693a:	4621      	mov	r1, r4
 801693c:	a80c      	add	r0, sp, #48	; 0x30
 801693e:	f7fa fdd7 	bl	80114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016942:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8016946:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801694a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801694e:	f8d8 0000 	ldr.w	r0, [r8]
 8016952:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016956:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801695a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801695e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8016962:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8016966:	440a      	add	r2, r1
 8016968:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801696c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016970:	4413      	add	r3, r2
 8016972:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016976:	6803      	ldr	r3, [r0, #0]
 8016978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801697a:	4798      	blx	r3
 801697c:	2fff      	cmp	r7, #255	; 0xff
 801697e:	d023      	beq.n	80169c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8016980:	f010 0f04 	tst.w	r0, #4
 8016984:	f8d8 0000 	ldr.w	r0, [r8]
 8016988:	d021      	beq.n	80169ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801698a:	2100      	movs	r1, #0
 801698c:	f04f 0e01 	mov.w	lr, #1
 8016990:	f8d0 c000 	ldr.w	ip, [r0]
 8016994:	b2a4      	uxth	r4, r4
 8016996:	9106      	str	r1, [sp, #24]
 8016998:	b2b6      	uxth	r6, r6
 801699a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801699e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80169a2:	e9cd e107 	strd	lr, r1, [sp, #28]
 80169a6:	f8b9 e000 	ldrh.w	lr, [r9]
 80169aa:	9703      	str	r7, [sp, #12]
 80169ac:	9401      	str	r4, [sp, #4]
 80169ae:	9600      	str	r6, [sp, #0]
 80169b0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80169b4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80169b8:	9102      	str	r1, [sp, #8]
 80169ba:	4629      	mov	r1, r5
 80169bc:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80169c0:	47a0      	blx	r4
 80169c2:	b00f      	add	sp, #60	; 0x3c
 80169c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169c8:	f010 0f01 	tst.w	r0, #1
 80169cc:	e7da      	b.n	8016984 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80169ce:	6803      	ldr	r3, [r0, #0]
 80169d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169d2:	4798      	blx	r3
 80169d4:	f8b9 1000 	ldrh.w	r1, [r9]
 80169d8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80169dc:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80169e0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80169e4:	434c      	muls	r4, r1
 80169e6:	2fff      	cmp	r7, #255	; 0xff
 80169e8:	fb01 2303 	mla	r3, r1, r3, r2
 80169ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80169f0:	eba1 0106 	sub.w	r1, r1, r6
 80169f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80169f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80169fc:	4418      	add	r0, r3
 80169fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8016a02:	eba3 0606 	sub.w	r6, r3, r6
 8016a06:	4404      	add	r4, r0
 8016a08:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8016a0c:	d04a      	beq.n	8016aa4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8016a0e:	43fa      	mvns	r2, r7
 8016a10:	b2bb      	uxth	r3, r7
 8016a12:	b2d7      	uxtb	r7, r2
 8016a14:	42a0      	cmp	r0, r4
 8016a16:	d263      	bcs.n	8016ae0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016a18:	eb00 0e0c 	add.w	lr, r0, ip
 8016a1c:	4586      	cmp	lr, r0
 8016a1e:	f100 0803 	add.w	r8, r0, #3
 8016a22:	d93a      	bls.n	8016a9a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8016a24:	f835 2b02 	ldrh.w	r2, [r5], #2
 8016a28:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8016a2c:	00d0      	lsls	r0, r2, #3
 8016a2e:	fb19 f907 	smulbb	r9, r9, r7
 8016a32:	b2c0      	uxtb	r0, r0
 8016a34:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8016a38:	fb00 9003 	mla	r0, r0, r3, r9
 8016a3c:	b280      	uxth	r0, r0
 8016a3e:	f100 0901 	add.w	r9, r0, #1
 8016a42:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8016a46:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8016a4a:	fb19 f907 	smulbb	r9, r9, r7
 8016a4e:	1200      	asrs	r0, r0, #8
 8016a50:	f808 0c03 	strb.w	r0, [r8, #-3]
 8016a54:	10d0      	asrs	r0, r2, #3
 8016a56:	1212      	asrs	r2, r2, #8
 8016a58:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8016a5c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8016a60:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8016a64:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016a68:	fb00 9003 	mla	r0, r0, r3, r9
 8016a6c:	b280      	uxth	r0, r0
 8016a6e:	f100 0901 	add.w	r9, r0, #1
 8016a72:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8016a76:	1200      	asrs	r0, r0, #8
 8016a78:	f808 0c02 	strb.w	r0, [r8, #-2]
 8016a7c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8016a80:	fb10 f007 	smulbb	r0, r0, r7
 8016a84:	fb02 0203 	mla	r2, r2, r3, r0
 8016a88:	b292      	uxth	r2, r2
 8016a8a:	1c50      	adds	r0, r2, #1
 8016a8c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016a90:	4640      	mov	r0, r8
 8016a92:	1212      	asrs	r2, r2, #8
 8016a94:	f808 2c01 	strb.w	r2, [r8, #-1]
 8016a98:	e7c0      	b.n	8016a1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8016a9a:	4408      	add	r0, r1
 8016a9c:	4435      	add	r5, r6
 8016a9e:	e7b9      	b.n	8016a14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8016aa0:	4408      	add	r0, r1
 8016aa2:	4435      	add	r5, r6
 8016aa4:	42a0      	cmp	r0, r4
 8016aa6:	d21b      	bcs.n	8016ae0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016aa8:	eb00 070c 	add.w	r7, r0, ip
 8016aac:	42b8      	cmp	r0, r7
 8016aae:	d2f7      	bcs.n	8016aa0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8016ab0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8016ab4:	3003      	adds	r0, #3
 8016ab6:	00da      	lsls	r2, r3, #3
 8016ab8:	b2d2      	uxtb	r2, r2
 8016aba:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016abe:	f800 2c03 	strb.w	r2, [r0, #-3]
 8016ac2:	10da      	asrs	r2, r3, #3
 8016ac4:	121b      	asrs	r3, r3, #8
 8016ac6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016aca:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8016ace:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8016ad2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8016ad6:	f800 2c02 	strb.w	r2, [r0, #-2]
 8016ada:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016ade:	e7e5      	b.n	8016aac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8016ae0:	4b02      	ldr	r3, [pc, #8]	; (8016aec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8016ae2:	6818      	ldr	r0, [r3, #0]
 8016ae4:	6803      	ldr	r3, [r0, #0]
 8016ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae8:	4798      	blx	r3
 8016aea:	e76a      	b.n	80169c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016aec:	2400b980 	.word	0x2400b980
 8016af0:	2400b97a 	.word	0x2400b97a

08016af4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8016af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016af8:	b08a      	sub	sp, #40	; 0x28
 8016afa:	460d      	mov	r5, r1
 8016afc:	4604      	mov	r4, r0
 8016afe:	461e      	mov	r6, r3
 8016b00:	6808      	ldr	r0, [r1, #0]
 8016b02:	ab06      	add	r3, sp, #24
 8016b04:	6849      	ldr	r1, [r1, #4]
 8016b06:	4f5d      	ldr	r7, [pc, #372]	; (8016c7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8016b08:	c303      	stmia	r3!, {r0, r1}
 8016b0a:	6810      	ldr	r0, [r2, #0]
 8016b0c:	ab08      	add	r3, sp, #32
 8016b0e:	6851      	ldr	r1, [r2, #4]
 8016b10:	c303      	stmia	r3!, {r0, r1}
 8016b12:	a806      	add	r0, sp, #24
 8016b14:	f7fa fcc4 	bl	80114a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016b18:	4629      	mov	r1, r5
 8016b1a:	a808      	add	r0, sp, #32
 8016b1c:	f7fa fce8 	bl	80114f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016b20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016b24:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016b28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016b2c:	6838      	ldr	r0, [r7, #0]
 8016b2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016b32:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8016b36:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8016b3a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016b3e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8016b42:	440a      	add	r2, r1
 8016b44:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016b48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016b4c:	4413      	add	r3, r2
 8016b4e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016b52:	6803      	ldr	r3, [r0, #0]
 8016b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b56:	4798      	blx	r3
 8016b58:	2eff      	cmp	r6, #255	; 0xff
 8016b5a:	d119      	bne.n	8016b90 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8016b5c:	f010 0f20 	tst.w	r0, #32
 8016b60:	6838      	ldr	r0, [r7, #0]
 8016b62:	d018      	beq.n	8016b96 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8016b64:	b2ad      	uxth	r5, r5
 8016b66:	2700      	movs	r7, #0
 8016b68:	6801      	ldr	r1, [r0, #0]
 8016b6a:	9501      	str	r5, [sp, #4]
 8016b6c:	fa1f f588 	uxth.w	r5, r8
 8016b70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8016b74:	9500      	str	r5, [sp, #0]
 8016b76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016b7a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8016b7e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8016b82:	9602      	str	r6, [sp, #8]
 8016b84:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8016b86:	4621      	mov	r1, r4
 8016b88:	47a8      	blx	r5
 8016b8a:	b00a      	add	sp, #40	; 0x28
 8016b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016b94:	e7e4      	b.n	8016b60 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8016b96:	6803      	ldr	r3, [r0, #0]
 8016b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b9a:	4798      	blx	r3
 8016b9c:	4b38      	ldr	r3, [pc, #224]	; (8016c80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8016b9e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016ba2:	f8b3 c000 	ldrh.w	ip, [r3]
 8016ba6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016baa:	fb0c f505 	mul.w	r5, ip, r5
 8016bae:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8016bb2:	fb0c 2303 	mla	r3, ip, r3, r2
 8016bb6:	ebac 0c08 	sub.w	ip, ip, r8
 8016bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bbe:	ebae 0e08 	sub.w	lr, lr, r8
 8016bc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016bc6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016bca:	4418      	add	r0, r3
 8016bcc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016bd0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8016bd4:	4405      	add	r5, r0
 8016bd6:	42a8      	cmp	r0, r5
 8016bd8:	d24a      	bcs.n	8016c70 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8016bda:	eb00 0803 	add.w	r8, r0, r3
 8016bde:	4540      	cmp	r0, r8
 8016be0:	d243      	bcs.n	8016c6a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8016be2:	78e2      	ldrb	r2, [r4, #3]
 8016be4:	b15a      	cbz	r2, 8016bfe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8016be6:	2aff      	cmp	r2, #255	; 0xff
 8016be8:	f894 9000 	ldrb.w	r9, [r4]
 8016bec:	d10a      	bne.n	8016c04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016bee:	2eff      	cmp	r6, #255	; 0xff
 8016bf0:	d108      	bne.n	8016c04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016bf2:	f880 9000 	strb.w	r9, [r0]
 8016bf6:	7862      	ldrb	r2, [r4, #1]
 8016bf8:	7042      	strb	r2, [r0, #1]
 8016bfa:	78a2      	ldrb	r2, [r4, #2]
 8016bfc:	7082      	strb	r2, [r0, #2]
 8016bfe:	3003      	adds	r0, #3
 8016c00:	3404      	adds	r4, #4
 8016c02:	e7ec      	b.n	8016bde <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8016c04:	4372      	muls	r2, r6
 8016c06:	1c51      	adds	r1, r2, #1
 8016c08:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8016c0c:	1209      	asrs	r1, r1, #8
 8016c0e:	fa1f fa81 	uxth.w	sl, r1
 8016c12:	43c9      	mvns	r1, r1
 8016c14:	fb19 f90a 	smulbb	r9, r9, sl
 8016c18:	b2ca      	uxtb	r2, r1
 8016c1a:	7801      	ldrb	r1, [r0, #0]
 8016c1c:	fb01 9902 	mla	r9, r1, r2, r9
 8016c20:	fa1f f989 	uxth.w	r9, r9
 8016c24:	f109 0101 	add.w	r1, r9, #1
 8016c28:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8016c2c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c30:	f880 9000 	strb.w	r9, [r0]
 8016c34:	f890 9001 	ldrb.w	r9, [r0, #1]
 8016c38:	7861      	ldrb	r1, [r4, #1]
 8016c3a:	fb19 f902 	smulbb	r9, r9, r2
 8016c3e:	fb01 910a 	mla	r1, r1, sl, r9
 8016c42:	b289      	uxth	r1, r1
 8016c44:	f101 0901 	add.w	r9, r1, #1
 8016c48:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8016c4c:	1209      	asrs	r1, r1, #8
 8016c4e:	7041      	strb	r1, [r0, #1]
 8016c50:	7881      	ldrb	r1, [r0, #2]
 8016c52:	f894 9002 	ldrb.w	r9, [r4, #2]
 8016c56:	fb11 f202 	smulbb	r2, r1, r2
 8016c5a:	fb09 220a 	mla	r2, r9, sl, r2
 8016c5e:	b292      	uxth	r2, r2
 8016c60:	1c51      	adds	r1, r2, #1
 8016c62:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016c66:	1212      	asrs	r2, r2, #8
 8016c68:	e7c8      	b.n	8016bfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8016c6a:	4460      	add	r0, ip
 8016c6c:	4474      	add	r4, lr
 8016c6e:	e7b2      	b.n	8016bd6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8016c70:	6838      	ldr	r0, [r7, #0]
 8016c72:	6803      	ldr	r3, [r0, #0]
 8016c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c76:	4798      	blx	r3
 8016c78:	e787      	b.n	8016b8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8016c7a:	bf00      	nop
 8016c7c:	2400b980 	.word	0x2400b980
 8016c80:	2400b97a 	.word	0x2400b97a

08016c84 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8016c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c88:	b085      	sub	sp, #20
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	460c      	mov	r4, r1
 8016c8e:	4691      	mov	r9, r2
 8016c90:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8016c94:	4698      	mov	r8, r3
 8016c96:	b31d      	cbz	r5, 8016ce0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016c98:	4608      	mov	r0, r1
 8016c9a:	f7fd fa4f 	bl	801413c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016c9e:	4607      	mov	r7, r0
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f7fd fa7f 	bl	80141a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016ca6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016caa:	4620      	mov	r0, r4
 8016cac:	f8ad 9008 	strh.w	r9, [sp, #8]
 8016cb0:	f8ad 800a 	strh.w	r8, [sp, #10]
 8016cb4:	f8ad 700c 	strh.w	r7, [sp, #12]
 8016cb8:	f7fd fb78 	bl	80143ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016cbc:	280b      	cmp	r0, #11
 8016cbe:	d80f      	bhi.n	8016ce0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016cc0:	e8df f000 	tbb	[pc, r0]
 8016cc4:	0e062920 	.word	0x0e062920
 8016cc8:	0e0e0e0e 	.word	0x0e0e0e0e
 8016ccc:	110e0e0e 	.word	0x110e0e0e
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	f7fd fae7 	bl	80142a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016cd6:	462b      	mov	r3, r5
 8016cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016cda:	a902      	add	r1, sp, #8
 8016cdc:	f7ff ff0a 	bl	8016af4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016ce0:	b005      	add	sp, #20
 8016ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f7fd fadc 	bl	80142a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016cec:	4606      	mov	r6, r0
 8016cee:	4620      	mov	r0, r4
 8016cf0:	f7fd fb08 	bl	8014304 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8016cf4:	9500      	str	r5, [sp, #0]
 8016cf6:	4601      	mov	r1, r0
 8016cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cfa:	aa02      	add	r2, sp, #8
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f7ff fdf3 	bl	80168e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8016d02:	e7ed      	b.n	8016ce0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016d04:	4620      	mov	r0, r4
 8016d06:	f7fd facd 	bl	80142a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016d0a:	462b      	mov	r3, r5
 8016d0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d0e:	a902      	add	r1, sp, #8
 8016d10:	f7ff fdfc 	bl	801690c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016d14:	e7e4      	b.n	8016ce0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016d16:	6833      	ldr	r3, [r6, #0]
 8016d18:	4620      	mov	r0, r4
 8016d1a:	68df      	ldr	r7, [r3, #12]
 8016d1c:	f7fd fac2 	bl	80142a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016d20:	2300      	movs	r3, #0
 8016d22:	4601      	mov	r1, r0
 8016d24:	aa02      	add	r2, sp, #8
 8016d26:	4630      	mov	r0, r6
 8016d28:	e9cd 5300 	strd	r5, r3, [sp]
 8016d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d2e:	47b8      	blx	r7
 8016d30:	e7d6      	b.n	8016ce0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08016d32 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8016d32:	b4f0      	push	{r4, r5, r6, r7}
 8016d34:	4616      	mov	r6, r2
 8016d36:	461c      	mov	r4, r3
 8016d38:	460d      	mov	r5, r1
 8016d3a:	9a04      	ldr	r2, [sp, #16]
 8016d3c:	2e01      	cmp	r6, #1
 8016d3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016d42:	d00e      	beq.n	8016d62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8016d44:	d303      	bcc.n	8016d4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8016d46:	2e02      	cmp	r6, #2
 8016d48:	d006      	beq.n	8016d58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8016d4a:	bcf0      	pop	{r4, r5, r6, r7}
 8016d4c:	4770      	bx	lr
 8016d4e:	4621      	mov	r1, r4
 8016d50:	4628      	mov	r0, r5
 8016d52:	bcf0      	pop	{r4, r5, r6, r7}
 8016d54:	f7ff bdda 	b.w	801690c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016d58:	4621      	mov	r1, r4
 8016d5a:	4628      	mov	r0, r5
 8016d5c:	bcf0      	pop	{r4, r5, r6, r7}
 8016d5e:	f7ff bec9 	b.w	8016af4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016d62:	6805      	ldr	r5, [r0, #0]
 8016d64:	2600      	movs	r6, #0
 8016d66:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8016d6a:	68ed      	ldr	r5, [r5, #12]
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	4622      	mov	r2, r4
 8016d70:	46ac      	mov	ip, r5
 8016d72:	bcf0      	pop	{r4, r5, r6, r7}
 8016d74:	4760      	bx	ip
	...

08016d78 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8016d78:	b160      	cbz	r0, 8016d94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8016d7a:	2903      	cmp	r1, #3
 8016d7c:	d818      	bhi.n	8016db0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8016d7e:	e8df f001 	tbb	[pc, r1]
 8016d82:	1902      	.short	0x1902
 8016d84:	1b06      	.short	0x1b06
 8016d86:	4b0e      	ldr	r3, [pc, #56]	; (8016dc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8016d88:	8818      	ldrh	r0, [r3, #0]
 8016d8a:	4240      	negs	r0, r0
 8016d8c:	4770      	bx	lr
 8016d8e:	4b0c      	ldr	r3, [pc, #48]	; (8016dc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8016d90:	8818      	ldrh	r0, [r3, #0]
 8016d92:	4770      	bx	lr
 8016d94:	2903      	cmp	r1, #3
 8016d96:	d80b      	bhi.n	8016db0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8016d98:	a301      	add	r3, pc, #4	; (adr r3, 8016da0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8016d9a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8016d9e:	bf00      	nop
 8016da0:	08016db5 	.word	0x08016db5
 8016da4:	08016d8f 	.word	0x08016d8f
 8016da8:	08016db9 	.word	0x08016db9
 8016dac:	08016d87 	.word	0x08016d87
 8016db0:	2000      	movs	r0, #0
 8016db2:	4770      	bx	lr
 8016db4:	2001      	movs	r0, #1
 8016db6:	4770      	bx	lr
 8016db8:	f04f 30ff 	mov.w	r0, #4294967295
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	2400b97a 	.word	0x2400b97a

08016dc4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8016dc4:	b160      	cbz	r0, 8016de0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8016dc6:	2903      	cmp	r1, #3
 8016dc8:	d818      	bhi.n	8016dfc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8016dca:	e8df f001 	tbb	[pc, r1]
 8016dce:	0219      	.short	0x0219
 8016dd0:	051b      	.short	0x051b
 8016dd2:	4b0e      	ldr	r3, [pc, #56]	; (8016e0c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8016dd4:	8818      	ldrh	r0, [r3, #0]
 8016dd6:	4770      	bx	lr
 8016dd8:	4b0c      	ldr	r3, [pc, #48]	; (8016e0c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8016dda:	8818      	ldrh	r0, [r3, #0]
 8016ddc:	4240      	negs	r0, r0
 8016dde:	4770      	bx	lr
 8016de0:	2903      	cmp	r1, #3
 8016de2:	d80b      	bhi.n	8016dfc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8016de4:	a301      	add	r3, pc, #4	; (adr r3, 8016dec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8016de6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8016dea:	bf00      	nop
 8016dec:	08016dd3 	.word	0x08016dd3
 8016df0:	08016e05 	.word	0x08016e05
 8016df4:	08016dd9 	.word	0x08016dd9
 8016df8:	08016e01 	.word	0x08016e01
 8016dfc:	2000      	movs	r0, #0
 8016dfe:	4770      	bx	lr
 8016e00:	2001      	movs	r0, #1
 8016e02:	4770      	bx	lr
 8016e04:	f04f 30ff 	mov.w	r0, #4294967295
 8016e08:	4770      	bx	lr
 8016e0a:	bf00      	nop
 8016e0c:	2400b97a 	.word	0x2400b97a

08016e10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8016e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e14:	b097      	sub	sp, #92	; 0x5c
 8016e16:	910b      	str	r1, [sp, #44]	; 0x2c
 8016e18:	a912      	add	r1, sp, #72	; 0x48
 8016e1a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8016e1e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8016e22:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8016e26:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8016e2a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8016e2e:	e881 000c 	stmia.w	r1, {r2, r3}
 8016e32:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8016e36:	930a      	str	r3, [sp, #40]	; 0x28
 8016e38:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8016e3c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8016e40:	9311      	str	r3, [sp, #68]	; 0x44
 8016e42:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8016e46:	798d      	ldrb	r5, [r1, #6]
 8016e48:	930c      	str	r3, [sp, #48]	; 0x30
 8016e4a:	7b4b      	ldrb	r3, [r1, #13]
 8016e4c:	0158      	lsls	r0, r3, #5
 8016e4e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016e52:	4328      	orrs	r0, r5
 8016e54:	9009      	str	r0, [sp, #36]	; 0x24
 8016e56:	f000 817c 	beq.w	8017152 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016e5a:	011b      	lsls	r3, r3, #4
 8016e5c:	79c8      	ldrb	r0, [r1, #7]
 8016e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e62:	4303      	orrs	r3, r0
 8016e64:	930e      	str	r3, [sp, #56]	; 0x38
 8016e66:	f000 8174 	beq.w	8017152 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016e6a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8016e6e:	b29b      	uxth	r3, r3
 8016e70:	2f00      	cmp	r7, #0
 8016e72:	f000 8116 	beq.w	80170a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8016e76:	1aff      	subs	r7, r7, r3
 8016e78:	b2bf      	uxth	r7, r7
 8016e7a:	043b      	lsls	r3, r7, #16
 8016e7c:	d502      	bpl.n	8016e84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016e7e:	1bf6      	subs	r6, r6, r7
 8016e80:	2700      	movs	r7, #0
 8016e82:	b236      	sxth	r6, r6
 8016e84:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016e88:	a812      	add	r0, sp, #72	; 0x48
 8016e8a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8016e8e:	428e      	cmp	r6, r1
 8016e90:	b28b      	uxth	r3, r1
 8016e92:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8016e96:	bfbf      	itttt	lt
 8016e98:	18ff      	addlt	r7, r7, r3
 8016e9a:	1bbe      	sublt	r6, r7, r6
 8016e9c:	b2b7      	uxthlt	r7, r6
 8016e9e:	460e      	movlt	r6, r1
 8016ea0:	8891      	ldrh	r1, [r2, #4]
 8016ea2:	440b      	add	r3, r1
 8016ea4:	4631      	mov	r1, r6
 8016ea6:	b21b      	sxth	r3, r3
 8016ea8:	9310      	str	r3, [sp, #64]	; 0x40
 8016eaa:	88d3      	ldrh	r3, [r2, #6]
 8016eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016eae:	449a      	add	sl, r3
 8016eb0:	fa0f f38a 	sxth.w	r3, sl
 8016eb4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8016eb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8016eba:	4bb5      	ldr	r3, [pc, #724]	; (8017190 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8016ebc:	f893 b000 	ldrb.w	fp, [r3]
 8016ec0:	f10b 3cff 	add.w	ip, fp, #4294967295
 8016ec4:	f1dc 0300 	rsbs	r3, ip, #0
 8016ec8:	eb43 030c 	adc.w	r3, r3, ip
 8016ecc:	930d      	str	r3, [sp, #52]	; 0x34
 8016ece:	464b      	mov	r3, r9
 8016ed0:	f7fa f960 	bl	8011194 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016ed4:	4631      	mov	r1, r6
 8016ed6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8016eda:	464b      	mov	r3, r9
 8016edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ede:	a812      	add	r0, sp, #72	; 0x48
 8016ee0:	f7fa f975 	bl	80111ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016ee4:	a916      	add	r1, sp, #88	; 0x58
 8016ee6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8016eea:	a815      	add	r0, sp, #84	; 0x54
 8016eec:	f7fa fa96 	bl	801141c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8016ef0:	f1b9 0f00 	cmp.w	r9, #0
 8016ef4:	f040 80d8 	bne.w	80170a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8016ef8:	f1bb 0f01 	cmp.w	fp, #1
 8016efc:	f040 80dc 	bne.w	80170b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8016f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f02:	b153      	cbz	r3, 8016f1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8016f04:	2508      	movs	r5, #8
 8016f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f08:	fb95 f3f8 	sdiv	r3, r5, r8
 8016f0c:	1e5d      	subs	r5, r3, #1
 8016f0e:	4415      	add	r5, r2
 8016f10:	fb95 f5f3 	sdiv	r5, r5, r3
 8016f14:	fb15 f503 	smulbb	r5, r5, r3
 8016f18:	b2ad      	uxth	r5, r5
 8016f1a:	b907      	cbnz	r7, 8016f1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8016f1c:	b16c      	cbz	r4, 8016f3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8016f1e:	fb04 7305 	mla	r3, r4, r5, r7
 8016f22:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016f24:	ebaa 0a04 	sub.w	sl, sl, r4
 8016f28:	fb08 f303 	mul.w	r3, r8, r3
 8016f2c:	fa1f fa8a 	uxth.w	sl, sl
 8016f30:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016f34:	f003 0407 	and.w	r4, r3, #7
 8016f38:	9226      	str	r2, [sp, #152]	; 0x98
 8016f3a:	4649      	mov	r1, r9
 8016f3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016f3e:	f7ff ff1b 	bl	8016d78 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8016f42:	4683      	mov	fp, r0
 8016f44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016f46:	f7ff ff3d 	bl	8016dc4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8016f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f4e:	4681      	mov	r9, r0
 8016f50:	1a9b      	subs	r3, r3, r2
 8016f52:	459a      	cmp	sl, r3
 8016f54:	bfa8      	it	ge
 8016f56:	469a      	movge	sl, r3
 8016f58:	f1ba 0f00 	cmp.w	sl, #0
 8016f5c:	f340 80f9 	ble.w	8017152 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016f60:	1bf6      	subs	r6, r6, r7
 8016f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f64:	1b9e      	subs	r6, r3, r6
 8016f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f68:	429e      	cmp	r6, r3
 8016f6a:	bfd4      	ite	le
 8016f6c:	ebc7 0706 	rsble	r7, r7, r6
 8016f70:	ebc7 0703 	rsbgt	r7, r7, r3
 8016f74:	2f00      	cmp	r7, #0
 8016f76:	f340 80ec 	ble.w	8017152 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016f7a:	1bed      	subs	r5, r5, r7
 8016f7c:	fb08 f305 	mul.w	r3, r8, r5
 8016f80:	930d      	str	r3, [sp, #52]	; 0x34
 8016f82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f84:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8016f88:	930e      	str	r3, [sp, #56]	; 0x38
 8016f8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f94:	b2db      	uxtb	r3, r3
 8016f96:	9310      	str	r3, [sp, #64]	; 0x40
 8016f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	f040 80de 	bne.w	801715c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8016fa0:	4b7c      	ldr	r3, [pc, #496]	; (8017194 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8016fa2:	6818      	ldr	r0, [r3, #0]
 8016fa4:	6803      	ldr	r3, [r0, #0]
 8016fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fa8:	4798      	blx	r3
 8016faa:	2301      	movs	r3, #1
 8016fac:	4a7a      	ldr	r2, [pc, #488]	; (8017198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8016fae:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8016fb2:	fb07 9b1b 	mls	fp, r7, fp, r9
 8016fb6:	fa03 f308 	lsl.w	r3, r3, r8
 8016fba:	8811      	ldrh	r1, [r2, #0]
 8016fbc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8016fc0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8016fc4:	3b01      	subs	r3, #1
 8016fc6:	fb06 bb07 	mla	fp, r6, r7, fp
 8016fca:	b2db      	uxtb	r3, r3
 8016fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8016fce:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8016fd2:	fb01 2303 	mla	r3, r1, r3, r2
 8016fd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016fda:	18c3      	adds	r3, r0, r3
 8016fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8016fde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016fe0:	781a      	ldrb	r2, [r3, #0]
 8016fe2:	4122      	asrs	r2, r4
 8016fe4:	b2d2      	uxtb	r2, r2
 8016fe6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8016fea:	f0c0 80d7 	bcc.w	801719c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8016fee:	46be      	mov	lr, r7
 8016ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ff2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016ff6:	f0c0 80ba 	bcc.w	801716e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8016ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ffc:	4013      	ands	r3, r2
 8016ffe:	d041      	beq.n	8017084 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8017000:	20ff      	movs	r0, #255	; 0xff
 8017002:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017004:	fb90 f5f5 	sdiv	r5, r0, r5
 8017008:	436b      	muls	r3, r5
 801700a:	2bfe      	cmp	r3, #254	; 0xfe
 801700c:	dd03      	ble.n	8017016 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801700e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017010:	4285      	cmp	r5, r0
 8017012:	f000 80a5 	beq.w	8017160 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8017016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017018:	9810      	ldr	r0, [sp, #64]	; 0x40
 801701a:	fb15 f303 	smulbb	r3, r5, r3
 801701e:	b29b      	uxth	r3, r3
 8017020:	1c5d      	adds	r5, r3, #1
 8017022:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8017026:	780d      	ldrb	r5, [r1, #0]
 8017028:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801702c:	fa1f fc83 	uxth.w	ip, r3
 8017030:	43db      	mvns	r3, r3
 8017032:	fb10 f90c 	smulbb	r9, r0, ip
 8017036:	b2db      	uxtb	r3, r3
 8017038:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801703a:	fb05 9503 	mla	r5, r5, r3, r9
 801703e:	b2ad      	uxth	r5, r5
 8017040:	f105 0901 	add.w	r9, r5, #1
 8017044:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017048:	fb10 f90c 	smulbb	r9, r0, ip
 801704c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801704e:	122d      	asrs	r5, r5, #8
 8017050:	fb10 fc0c 	smulbb	ip, r0, ip
 8017054:	700d      	strb	r5, [r1, #0]
 8017056:	784d      	ldrb	r5, [r1, #1]
 8017058:	fb05 9503 	mla	r5, r5, r3, r9
 801705c:	b2ad      	uxth	r5, r5
 801705e:	f105 0901 	add.w	r9, r5, #1
 8017062:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017066:	122d      	asrs	r5, r5, #8
 8017068:	704d      	strb	r5, [r1, #1]
 801706a:	788d      	ldrb	r5, [r1, #2]
 801706c:	fb05 cc03 	mla	ip, r5, r3, ip
 8017070:	fa1f fc8c 	uxth.w	ip, ip
 8017074:	f10c 0301 	add.w	r3, ip, #1
 8017078:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801707c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017080:	f881 c002 	strb.w	ip, [r1, #2]
 8017084:	4444      	add	r4, r8
 8017086:	4431      	add	r1, r6
 8017088:	b2a4      	uxth	r4, r4
 801708a:	2c07      	cmp	r4, #7
 801708c:	bf89      	itett	hi
 801708e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8017090:	fa42 f208 	asrls.w	r2, r2, r8
 8017094:	2400      	movhi	r4, #0
 8017096:	785a      	ldrbhi	r2, [r3, #1]
 8017098:	bf8a      	itet	hi
 801709a:	3301      	addhi	r3, #1
 801709c:	b2d2      	uxtbls	r2, r2
 801709e:	9326      	strhi	r3, [sp, #152]	; 0x98
 80170a0:	e7a7      	b.n	8016ff2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80170a2:	441e      	add	r6, r3
 80170a4:	b236      	sxth	r6, r6
 80170a6:	e6ed      	b.n	8016e84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80170a8:	f1b9 0f01 	cmp.w	r9, #1
 80170ac:	f47f af28 	bne.w	8016f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80170b0:	f1bb 0f01 	cmp.w	fp, #1
 80170b4:	f47f af24 	bne.w	8016f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80170b8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8017194 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80170bc:	f8db 0000 	ldr.w	r0, [fp]
 80170c0:	6803      	ldr	r3, [r0, #0]
 80170c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170c4:	4798      	blx	r3
 80170c6:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80170ca:	465a      	mov	r2, fp
 80170cc:	d006      	beq.n	80170dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80170ce:	f1b8 0f04 	cmp.w	r8, #4
 80170d2:	d141      	bne.n	8017158 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80170d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170d6:	3300      	adds	r3, #0
 80170d8:	bf18      	it	ne
 80170da:	2301      	movne	r3, #1
 80170dc:	0580      	lsls	r0, r0, #22
 80170de:	d566      	bpl.n	80171ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80170e0:	f1b8 0f08 	cmp.w	r8, #8
 80170e4:	d163      	bne.n	80171ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	bf0c      	ite	eq
 80170ea:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80170ee:	f44f 7180 	movne.w	r1, #256	; 0x100
 80170f2:	2f00      	cmp	r7, #0
 80170f4:	f47f af04 	bne.w	8016f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80170f8:	2c00      	cmp	r4, #0
 80170fa:	f47f af01 	bne.w	8016f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80170fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017100:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017102:	18f3      	adds	r3, r6, r3
 8017104:	4283      	cmp	r3, r0
 8017106:	f73f aefb 	bgt.w	8016f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801710a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801710c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801710e:	4403      	add	r3, r0
 8017110:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017112:	4283      	cmp	r3, r0
 8017114:	f73f aef4 	bgt.w	8016f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017118:	f1b8 0f08 	cmp.w	r8, #8
 801711c:	6810      	ldr	r0, [r2, #0]
 801711e:	f04f 0600 	mov.w	r6, #0
 8017122:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8017126:	bf18      	it	ne
 8017128:	3501      	addne	r5, #1
 801712a:	6804      	ldr	r4, [r0, #0]
 801712c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017130:	bf18      	it	ne
 8017132:	f025 0501 	bicne.w	r5, r5, #1
 8017136:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801713a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801713c:	bf18      	it	ne
 801713e:	b2ad      	uxthne	r5, r5
 8017140:	9104      	str	r1, [sp, #16]
 8017142:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8017144:	e9cd 5a00 	strd	r5, sl, [sp]
 8017148:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801714c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801714e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8017150:	47a0      	blx	r4
 8017152:	b017      	add	sp, #92	; 0x5c
 8017154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017158:	2300      	movs	r3, #0
 801715a:	e7bf      	b.n	80170dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801715c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801715e:	e724      	b.n	8016faa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8017160:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017162:	700b      	strb	r3, [r1, #0]
 8017164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017166:	704b      	strb	r3, [r1, #1]
 8017168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801716a:	708b      	strb	r3, [r1, #2]
 801716c:	e78a      	b.n	8017084 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801716e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017170:	b153      	cbz	r3, 8017188 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8017172:	441c      	add	r4, r3
 8017174:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017176:	b2a4      	uxth	r4, r4
 8017178:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801717c:	f004 0407 	and.w	r4, r4, #7
 8017180:	781a      	ldrb	r2, [r3, #0]
 8017182:	9326      	str	r3, [sp, #152]	; 0x98
 8017184:	4122      	asrs	r2, r4
 8017186:	b2d2      	uxtb	r2, r2
 8017188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801718a:	445b      	add	r3, fp
 801718c:	9309      	str	r3, [sp, #36]	; 0x24
 801718e:	e72a      	b.n	8016fe6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8017190:	2400b978 	.word	0x2400b978
 8017194:	2400b980 	.word	0x2400b980
 8017198:	2400b97a 	.word	0x2400b97a
 801719c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d1d7      	bne.n	8017152 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80171a2:	4b06      	ldr	r3, [pc, #24]	; (80171bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80171a4:	6818      	ldr	r0, [r3, #0]
 80171a6:	6803      	ldr	r3, [r0, #0]
 80171a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171aa:	4798      	blx	r3
 80171ac:	e7d1      	b.n	8017152 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	f43f aea6 	beq.w	8016f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80171b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80171b8:	e79b      	b.n	80170f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80171ba:	bf00      	nop
 80171bc:	2400b980 	.word	0x2400b980

080171c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80171c0:	b538      	push	{r3, r4, r5, lr}
 80171c2:	4c15      	ldr	r4, [pc, #84]	; (8017218 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80171c4:	4605      	mov	r5, r0
 80171c6:	7823      	ldrb	r3, [r4, #0]
 80171c8:	f3bf 8f5b 	dmb	ish
 80171cc:	07da      	lsls	r2, r3, #31
 80171ce:	d40b      	bmi.n	80171e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80171d0:	4620      	mov	r0, r4
 80171d2:	f005 f890 	bl	801c2f6 <__cxa_guard_acquire>
 80171d6:	b138      	cbz	r0, 80171e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80171d8:	4620      	mov	r0, r4
 80171da:	f005 f898 	bl	801c30e <__cxa_guard_release>
 80171de:	4a0f      	ldr	r2, [pc, #60]	; (801721c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80171e0:	490f      	ldr	r1, [pc, #60]	; (8017220 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80171e2:	4810      	ldr	r0, [pc, #64]	; (8017224 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80171e4:	f005 f880 	bl	801c2e8 <__aeabi_atexit>
 80171e8:	4c0f      	ldr	r4, [pc, #60]	; (8017228 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80171ea:	7823      	ldrb	r3, [r4, #0]
 80171ec:	f3bf 8f5b 	dmb	ish
 80171f0:	07db      	lsls	r3, r3, #31
 80171f2:	d40b      	bmi.n	801720c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80171f4:	4620      	mov	r0, r4
 80171f6:	f005 f87e 	bl	801c2f6 <__cxa_guard_acquire>
 80171fa:	b138      	cbz	r0, 801720c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80171fc:	4620      	mov	r0, r4
 80171fe:	f005 f886 	bl	801c30e <__cxa_guard_release>
 8017202:	4a06      	ldr	r2, [pc, #24]	; (801721c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8017204:	4909      	ldr	r1, [pc, #36]	; (801722c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8017206:	480a      	ldr	r0, [pc, #40]	; (8017230 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8017208:	f005 f86e 	bl	801c2e8 <__aeabi_atexit>
 801720c:	4b05      	ldr	r3, [pc, #20]	; (8017224 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801720e:	612b      	str	r3, [r5, #16]
 8017210:	4b07      	ldr	r3, [pc, #28]	; (8017230 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8017212:	616b      	str	r3, [r5, #20]
 8017214:	bd38      	pop	{r3, r4, r5, pc}
 8017216:	bf00      	nop
 8017218:	2400ba4c 	.word	0x2400ba4c
 801721c:	24000000 	.word	0x24000000
 8017220:	08015d85 	.word	0x08015d85
 8017224:	24000098 	.word	0x24000098
 8017228:	2400ba50 	.word	0x2400ba50
 801722c:	08015d83 	.word	0x08015d83
 8017230:	2400009c 	.word	0x2400009c

08017234 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8017234:	b538      	push	{r3, r4, r5, lr}
 8017236:	4c15      	ldr	r4, [pc, #84]	; (801728c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8017238:	4605      	mov	r5, r0
 801723a:	7823      	ldrb	r3, [r4, #0]
 801723c:	f3bf 8f5b 	dmb	ish
 8017240:	07da      	lsls	r2, r3, #31
 8017242:	d40b      	bmi.n	801725c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8017244:	4620      	mov	r0, r4
 8017246:	f005 f856 	bl	801c2f6 <__cxa_guard_acquire>
 801724a:	b138      	cbz	r0, 801725c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801724c:	4620      	mov	r0, r4
 801724e:	f005 f85e 	bl	801c30e <__cxa_guard_release>
 8017252:	4a0f      	ldr	r2, [pc, #60]	; (8017290 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8017254:	490f      	ldr	r1, [pc, #60]	; (8017294 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8017256:	4810      	ldr	r0, [pc, #64]	; (8017298 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8017258:	f005 f846 	bl	801c2e8 <__aeabi_atexit>
 801725c:	4c0f      	ldr	r4, [pc, #60]	; (801729c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801725e:	7823      	ldrb	r3, [r4, #0]
 8017260:	f3bf 8f5b 	dmb	ish
 8017264:	07db      	lsls	r3, r3, #31
 8017266:	d40b      	bmi.n	8017280 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8017268:	4620      	mov	r0, r4
 801726a:	f005 f844 	bl	801c2f6 <__cxa_guard_acquire>
 801726e:	b138      	cbz	r0, 8017280 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8017270:	4620      	mov	r0, r4
 8017272:	f005 f84c 	bl	801c30e <__cxa_guard_release>
 8017276:	4a06      	ldr	r2, [pc, #24]	; (8017290 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8017278:	4909      	ldr	r1, [pc, #36]	; (80172a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801727a:	480a      	ldr	r0, [pc, #40]	; (80172a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801727c:	f005 f834 	bl	801c2e8 <__aeabi_atexit>
 8017280:	4b05      	ldr	r3, [pc, #20]	; (8017298 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8017282:	60ab      	str	r3, [r5, #8]
 8017284:	4b07      	ldr	r3, [pc, #28]	; (80172a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8017286:	60eb      	str	r3, [r5, #12]
 8017288:	bd38      	pop	{r3, r4, r5, pc}
 801728a:	bf00      	nop
 801728c:	2400ba2c 	.word	0x2400ba2c
 8017290:	24000000 	.word	0x24000000
 8017294:	08015d89 	.word	0x08015d89
 8017298:	24000078 	.word	0x24000078
 801729c:	2400ba30 	.word	0x2400ba30
 80172a0:	08015d87 	.word	0x08015d87
 80172a4:	2400007c 	.word	0x2400007c

080172a8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80172a8:	b510      	push	{r4, lr}
 80172aa:	4604      	mov	r4, r0
 80172ac:	f7ff ff88 	bl	80171c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80172b0:	4620      	mov	r0, r4
 80172b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172b6:	f7ff bfbd 	b.w	8017234 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080172bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80172bc:	b538      	push	{r3, r4, r5, lr}
 80172be:	4c15      	ldr	r4, [pc, #84]	; (8017314 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80172c0:	4605      	mov	r5, r0
 80172c2:	7823      	ldrb	r3, [r4, #0]
 80172c4:	f3bf 8f5b 	dmb	ish
 80172c8:	07da      	lsls	r2, r3, #31
 80172ca:	d40b      	bmi.n	80172e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80172cc:	4620      	mov	r0, r4
 80172ce:	f005 f812 	bl	801c2f6 <__cxa_guard_acquire>
 80172d2:	b138      	cbz	r0, 80172e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80172d4:	4620      	mov	r0, r4
 80172d6:	f005 f81a 	bl	801c30e <__cxa_guard_release>
 80172da:	4a0f      	ldr	r2, [pc, #60]	; (8017318 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80172dc:	490f      	ldr	r1, [pc, #60]	; (801731c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80172de:	4810      	ldr	r0, [pc, #64]	; (8017320 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80172e0:	f005 f802 	bl	801c2e8 <__aeabi_atexit>
 80172e4:	4c0f      	ldr	r4, [pc, #60]	; (8017324 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80172e6:	7823      	ldrb	r3, [r4, #0]
 80172e8:	f3bf 8f5b 	dmb	ish
 80172ec:	07db      	lsls	r3, r3, #31
 80172ee:	d40b      	bmi.n	8017308 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80172f0:	4620      	mov	r0, r4
 80172f2:	f005 f800 	bl	801c2f6 <__cxa_guard_acquire>
 80172f6:	b138      	cbz	r0, 8017308 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80172f8:	4620      	mov	r0, r4
 80172fa:	f005 f808 	bl	801c30e <__cxa_guard_release>
 80172fe:	4a06      	ldr	r2, [pc, #24]	; (8017318 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8017300:	4909      	ldr	r1, [pc, #36]	; (8017328 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8017302:	480a      	ldr	r0, [pc, #40]	; (801732c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8017304:	f004 fff0 	bl	801c2e8 <__aeabi_atexit>
 8017308:	4b05      	ldr	r3, [pc, #20]	; (8017320 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801730a:	622b      	str	r3, [r5, #32]
 801730c:	4b07      	ldr	r3, [pc, #28]	; (801732c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801730e:	626b      	str	r3, [r5, #36]	; 0x24
 8017310:	bd38      	pop	{r3, r4, r5, pc}
 8017312:	bf00      	nop
 8017314:	2400ba54 	.word	0x2400ba54
 8017318:	24000000 	.word	0x24000000
 801731c:	08015d7d 	.word	0x08015d7d
 8017320:	240000a0 	.word	0x240000a0
 8017324:	2400ba58 	.word	0x2400ba58
 8017328:	08015d7b 	.word	0x08015d7b
 801732c:	240000a4 	.word	0x240000a4

08017330 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8017330:	b538      	push	{r3, r4, r5, lr}
 8017332:	4c15      	ldr	r4, [pc, #84]	; (8017388 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8017334:	4605      	mov	r5, r0
 8017336:	7823      	ldrb	r3, [r4, #0]
 8017338:	f3bf 8f5b 	dmb	ish
 801733c:	07da      	lsls	r2, r3, #31
 801733e:	d40b      	bmi.n	8017358 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8017340:	4620      	mov	r0, r4
 8017342:	f004 ffd8 	bl	801c2f6 <__cxa_guard_acquire>
 8017346:	b138      	cbz	r0, 8017358 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8017348:	4620      	mov	r0, r4
 801734a:	f004 ffe0 	bl	801c30e <__cxa_guard_release>
 801734e:	4a0f      	ldr	r2, [pc, #60]	; (801738c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8017350:	490f      	ldr	r1, [pc, #60]	; (8017390 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8017352:	4810      	ldr	r0, [pc, #64]	; (8017394 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8017354:	f004 ffc8 	bl	801c2e8 <__aeabi_atexit>
 8017358:	4c0f      	ldr	r4, [pc, #60]	; (8017398 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801735a:	7823      	ldrb	r3, [r4, #0]
 801735c:	f3bf 8f5b 	dmb	ish
 8017360:	07db      	lsls	r3, r3, #31
 8017362:	d40b      	bmi.n	801737c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8017364:	4620      	mov	r0, r4
 8017366:	f004 ffc6 	bl	801c2f6 <__cxa_guard_acquire>
 801736a:	b138      	cbz	r0, 801737c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801736c:	4620      	mov	r0, r4
 801736e:	f004 ffce 	bl	801c30e <__cxa_guard_release>
 8017372:	4a06      	ldr	r2, [pc, #24]	; (801738c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8017374:	4909      	ldr	r1, [pc, #36]	; (801739c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8017376:	480a      	ldr	r0, [pc, #40]	; (80173a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8017378:	f004 ffb6 	bl	801c2e8 <__aeabi_atexit>
 801737c:	4b05      	ldr	r3, [pc, #20]	; (8017394 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801737e:	61ab      	str	r3, [r5, #24]
 8017380:	4b07      	ldr	r3, [pc, #28]	; (80173a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8017382:	61eb      	str	r3, [r5, #28]
 8017384:	bd38      	pop	{r3, r4, r5, pc}
 8017386:	bf00      	nop
 8017388:	2400ba34 	.word	0x2400ba34
 801738c:	24000000 	.word	0x24000000
 8017390:	08015d81 	.word	0x08015d81
 8017394:	24000080 	.word	0x24000080
 8017398:	2400ba38 	.word	0x2400ba38
 801739c:	08015d7f 	.word	0x08015d7f
 80173a0:	24000084 	.word	0x24000084

080173a4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80173a4:	b510      	push	{r4, lr}
 80173a6:	4604      	mov	r4, r0
 80173a8:	f7ff ff88 	bl	80172bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80173ac:	4620      	mov	r0, r4
 80173ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173b2:	f7ff bfbd 	b.w	8017330 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080173b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80173b8:	b538      	push	{r3, r4, r5, lr}
 80173ba:	4c15      	ldr	r4, [pc, #84]	; (8017410 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80173bc:	4605      	mov	r5, r0
 80173be:	7823      	ldrb	r3, [r4, #0]
 80173c0:	f3bf 8f5b 	dmb	ish
 80173c4:	07da      	lsls	r2, r3, #31
 80173c6:	d40b      	bmi.n	80173e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80173c8:	4620      	mov	r0, r4
 80173ca:	f004 ff94 	bl	801c2f6 <__cxa_guard_acquire>
 80173ce:	b138      	cbz	r0, 80173e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80173d0:	4620      	mov	r0, r4
 80173d2:	f004 ff9c 	bl	801c30e <__cxa_guard_release>
 80173d6:	4a0f      	ldr	r2, [pc, #60]	; (8017414 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80173d8:	490f      	ldr	r1, [pc, #60]	; (8017418 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80173da:	4810      	ldr	r0, [pc, #64]	; (801741c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80173dc:	f004 ff84 	bl	801c2e8 <__aeabi_atexit>
 80173e0:	4c0f      	ldr	r4, [pc, #60]	; (8017420 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80173e2:	7823      	ldrb	r3, [r4, #0]
 80173e4:	f3bf 8f5b 	dmb	ish
 80173e8:	07db      	lsls	r3, r3, #31
 80173ea:	d40b      	bmi.n	8017404 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80173ec:	4620      	mov	r0, r4
 80173ee:	f004 ff82 	bl	801c2f6 <__cxa_guard_acquire>
 80173f2:	b138      	cbz	r0, 8017404 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80173f4:	4620      	mov	r0, r4
 80173f6:	f004 ff8a 	bl	801c30e <__cxa_guard_release>
 80173fa:	4a06      	ldr	r2, [pc, #24]	; (8017414 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80173fc:	4909      	ldr	r1, [pc, #36]	; (8017424 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80173fe:	480a      	ldr	r0, [pc, #40]	; (8017428 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8017400:	f004 ff72 	bl	801c2e8 <__aeabi_atexit>
 8017404:	4b05      	ldr	r3, [pc, #20]	; (801741c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8017406:	632b      	str	r3, [r5, #48]	; 0x30
 8017408:	4b07      	ldr	r3, [pc, #28]	; (8017428 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801740a:	636b      	str	r3, [r5, #52]	; 0x34
 801740c:	bd38      	pop	{r3, r4, r5, pc}
 801740e:	bf00      	nop
 8017410:	2400ba3c 	.word	0x2400ba3c
 8017414:	24000000 	.word	0x24000000
 8017418:	08015d75 	.word	0x08015d75
 801741c:	24000088 	.word	0x24000088
 8017420:	2400ba40 	.word	0x2400ba40
 8017424:	08015d73 	.word	0x08015d73
 8017428:	2400008c 	.word	0x2400008c

0801742c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801742c:	b538      	push	{r3, r4, r5, lr}
 801742e:	4c15      	ldr	r4, [pc, #84]	; (8017484 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8017430:	4605      	mov	r5, r0
 8017432:	7823      	ldrb	r3, [r4, #0]
 8017434:	f3bf 8f5b 	dmb	ish
 8017438:	07da      	lsls	r2, r3, #31
 801743a:	d40b      	bmi.n	8017454 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801743c:	4620      	mov	r0, r4
 801743e:	f004 ff5a 	bl	801c2f6 <__cxa_guard_acquire>
 8017442:	b138      	cbz	r0, 8017454 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8017444:	4620      	mov	r0, r4
 8017446:	f004 ff62 	bl	801c30e <__cxa_guard_release>
 801744a:	4a0f      	ldr	r2, [pc, #60]	; (8017488 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801744c:	490f      	ldr	r1, [pc, #60]	; (801748c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801744e:	4810      	ldr	r0, [pc, #64]	; (8017490 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8017450:	f004 ff4a 	bl	801c2e8 <__aeabi_atexit>
 8017454:	4c0f      	ldr	r4, [pc, #60]	; (8017494 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8017456:	7823      	ldrb	r3, [r4, #0]
 8017458:	f3bf 8f5b 	dmb	ish
 801745c:	07db      	lsls	r3, r3, #31
 801745e:	d40b      	bmi.n	8017478 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8017460:	4620      	mov	r0, r4
 8017462:	f004 ff48 	bl	801c2f6 <__cxa_guard_acquire>
 8017466:	b138      	cbz	r0, 8017478 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8017468:	4620      	mov	r0, r4
 801746a:	f004 ff50 	bl	801c30e <__cxa_guard_release>
 801746e:	4a06      	ldr	r2, [pc, #24]	; (8017488 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8017470:	4909      	ldr	r1, [pc, #36]	; (8017498 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8017472:	480a      	ldr	r0, [pc, #40]	; (801749c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8017474:	f004 ff38 	bl	801c2e8 <__aeabi_atexit>
 8017478:	4b05      	ldr	r3, [pc, #20]	; (8017490 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801747a:	62ab      	str	r3, [r5, #40]	; 0x28
 801747c:	4b07      	ldr	r3, [pc, #28]	; (801749c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801747e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8017480:	bd38      	pop	{r3, r4, r5, pc}
 8017482:	bf00      	nop
 8017484:	2400ba14 	.word	0x2400ba14
 8017488:	24000000 	.word	0x24000000
 801748c:	08015d79 	.word	0x08015d79
 8017490:	24000060 	.word	0x24000060
 8017494:	2400ba18 	.word	0x2400ba18
 8017498:	08015d77 	.word	0x08015d77
 801749c:	24000064 	.word	0x24000064

080174a0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80174a0:	b510      	push	{r4, lr}
 80174a2:	4604      	mov	r4, r0
 80174a4:	f7ff ff88 	bl	80173b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80174a8:	4620      	mov	r0, r4
 80174aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174ae:	f7ff bfbd 	b.w	801742c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080174b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80174b4:	b538      	push	{r3, r4, r5, lr}
 80174b6:	4c15      	ldr	r4, [pc, #84]	; (801750c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80174b8:	4605      	mov	r5, r0
 80174ba:	7823      	ldrb	r3, [r4, #0]
 80174bc:	f3bf 8f5b 	dmb	ish
 80174c0:	07da      	lsls	r2, r3, #31
 80174c2:	d40b      	bmi.n	80174dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80174c4:	4620      	mov	r0, r4
 80174c6:	f004 ff16 	bl	801c2f6 <__cxa_guard_acquire>
 80174ca:	b138      	cbz	r0, 80174dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80174cc:	4620      	mov	r0, r4
 80174ce:	f004 ff1e 	bl	801c30e <__cxa_guard_release>
 80174d2:	4a0f      	ldr	r2, [pc, #60]	; (8017510 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80174d4:	490f      	ldr	r1, [pc, #60]	; (8017514 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80174d6:	4810      	ldr	r0, [pc, #64]	; (8017518 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80174d8:	f004 ff06 	bl	801c2e8 <__aeabi_atexit>
 80174dc:	4c0f      	ldr	r4, [pc, #60]	; (801751c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80174de:	7823      	ldrb	r3, [r4, #0]
 80174e0:	f3bf 8f5b 	dmb	ish
 80174e4:	07db      	lsls	r3, r3, #31
 80174e6:	d40b      	bmi.n	8017500 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80174e8:	4620      	mov	r0, r4
 80174ea:	f004 ff04 	bl	801c2f6 <__cxa_guard_acquire>
 80174ee:	b138      	cbz	r0, 8017500 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80174f0:	4620      	mov	r0, r4
 80174f2:	f004 ff0c 	bl	801c30e <__cxa_guard_release>
 80174f6:	4a06      	ldr	r2, [pc, #24]	; (8017510 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80174f8:	4909      	ldr	r1, [pc, #36]	; (8017520 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80174fa:	480a      	ldr	r0, [pc, #40]	; (8017524 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80174fc:	f004 fef4 	bl	801c2e8 <__aeabi_atexit>
 8017500:	4b05      	ldr	r3, [pc, #20]	; (8017518 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8017502:	642b      	str	r3, [r5, #64]	; 0x40
 8017504:	4b07      	ldr	r3, [pc, #28]	; (8017524 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8017506:	646b      	str	r3, [r5, #68]	; 0x44
 8017508:	bd38      	pop	{r3, r4, r5, pc}
 801750a:	bf00      	nop
 801750c:	2400ba44 	.word	0x2400ba44
 8017510:	24000000 	.word	0x24000000
 8017514:	08015d6d 	.word	0x08015d6d
 8017518:	24000090 	.word	0x24000090
 801751c:	2400ba48 	.word	0x2400ba48
 8017520:	08015d6b 	.word	0x08015d6b
 8017524:	24000094 	.word	0x24000094

08017528 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4c15      	ldr	r4, [pc, #84]	; (8017580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801752c:	4605      	mov	r5, r0
 801752e:	7823      	ldrb	r3, [r4, #0]
 8017530:	f3bf 8f5b 	dmb	ish
 8017534:	07da      	lsls	r2, r3, #31
 8017536:	d40b      	bmi.n	8017550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017538:	4620      	mov	r0, r4
 801753a:	f004 fedc 	bl	801c2f6 <__cxa_guard_acquire>
 801753e:	b138      	cbz	r0, 8017550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017540:	4620      	mov	r0, r4
 8017542:	f004 fee4 	bl	801c30e <__cxa_guard_release>
 8017546:	4a0f      	ldr	r2, [pc, #60]	; (8017584 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8017548:	490f      	ldr	r1, [pc, #60]	; (8017588 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801754a:	4810      	ldr	r0, [pc, #64]	; (801758c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801754c:	f004 fecc 	bl	801c2e8 <__aeabi_atexit>
 8017550:	4c0f      	ldr	r4, [pc, #60]	; (8017590 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8017552:	7823      	ldrb	r3, [r4, #0]
 8017554:	f3bf 8f5b 	dmb	ish
 8017558:	07db      	lsls	r3, r3, #31
 801755a:	d40b      	bmi.n	8017574 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801755c:	4620      	mov	r0, r4
 801755e:	f004 feca 	bl	801c2f6 <__cxa_guard_acquire>
 8017562:	b138      	cbz	r0, 8017574 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8017564:	4620      	mov	r0, r4
 8017566:	f004 fed2 	bl	801c30e <__cxa_guard_release>
 801756a:	4a06      	ldr	r2, [pc, #24]	; (8017584 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801756c:	4909      	ldr	r1, [pc, #36]	; (8017594 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801756e:	480a      	ldr	r0, [pc, #40]	; (8017598 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017570:	f004 feba 	bl	801c2e8 <__aeabi_atexit>
 8017574:	4b05      	ldr	r3, [pc, #20]	; (801758c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8017576:	63ab      	str	r3, [r5, #56]	; 0x38
 8017578:	4b07      	ldr	r3, [pc, #28]	; (8017598 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801757a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801757c:	bd38      	pop	{r3, r4, r5, pc}
 801757e:	bf00      	nop
 8017580:	2400ba24 	.word	0x2400ba24
 8017584:	24000000 	.word	0x24000000
 8017588:	08015d71 	.word	0x08015d71
 801758c:	24000070 	.word	0x24000070
 8017590:	2400ba28 	.word	0x2400ba28
 8017594:	08015d6f 	.word	0x08015d6f
 8017598:	24000074 	.word	0x24000074

0801759c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801759c:	b510      	push	{r4, lr}
 801759e:	4604      	mov	r4, r0
 80175a0:	f7ff ff88 	bl	80174b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80175a4:	4620      	mov	r0, r4
 80175a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175aa:	f7ff bfbd 	b.w	8017528 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080175b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80175b0:	b538      	push	{r3, r4, r5, lr}
 80175b2:	4c15      	ldr	r4, [pc, #84]	; (8017608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80175b4:	4605      	mov	r5, r0
 80175b6:	7823      	ldrb	r3, [r4, #0]
 80175b8:	f3bf 8f5b 	dmb	ish
 80175bc:	07da      	lsls	r2, r3, #31
 80175be:	d40b      	bmi.n	80175d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80175c0:	4620      	mov	r0, r4
 80175c2:	f004 fe98 	bl	801c2f6 <__cxa_guard_acquire>
 80175c6:	b138      	cbz	r0, 80175d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80175c8:	4620      	mov	r0, r4
 80175ca:	f004 fea0 	bl	801c30e <__cxa_guard_release>
 80175ce:	4a0f      	ldr	r2, [pc, #60]	; (801760c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80175d0:	490f      	ldr	r1, [pc, #60]	; (8017610 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80175d2:	4810      	ldr	r0, [pc, #64]	; (8017614 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80175d4:	f004 fe88 	bl	801c2e8 <__aeabi_atexit>
 80175d8:	4c0f      	ldr	r4, [pc, #60]	; (8017618 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80175da:	7823      	ldrb	r3, [r4, #0]
 80175dc:	f3bf 8f5b 	dmb	ish
 80175e0:	07db      	lsls	r3, r3, #31
 80175e2:	d40b      	bmi.n	80175fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80175e4:	4620      	mov	r0, r4
 80175e6:	f004 fe86 	bl	801c2f6 <__cxa_guard_acquire>
 80175ea:	b138      	cbz	r0, 80175fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80175ec:	4620      	mov	r0, r4
 80175ee:	f004 fe8e 	bl	801c30e <__cxa_guard_release>
 80175f2:	4a06      	ldr	r2, [pc, #24]	; (801760c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80175f4:	4909      	ldr	r1, [pc, #36]	; (801761c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80175f6:	480a      	ldr	r0, [pc, #40]	; (8017620 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80175f8:	f004 fe76 	bl	801c2e8 <__aeabi_atexit>
 80175fc:	4b05      	ldr	r3, [pc, #20]	; (8017614 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80175fe:	652b      	str	r3, [r5, #80]	; 0x50
 8017600:	4b07      	ldr	r3, [pc, #28]	; (8017620 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8017602:	656b      	str	r3, [r5, #84]	; 0x54
 8017604:	bd38      	pop	{r3, r4, r5, pc}
 8017606:	bf00      	nop
 8017608:	2400ba1c 	.word	0x2400ba1c
 801760c:	24000000 	.word	0x24000000
 8017610:	08015d65 	.word	0x08015d65
 8017614:	24000068 	.word	0x24000068
 8017618:	2400ba20 	.word	0x2400ba20
 801761c:	08015d63 	.word	0x08015d63
 8017620:	2400006c 	.word	0x2400006c

08017624 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8017624:	b538      	push	{r3, r4, r5, lr}
 8017626:	4c15      	ldr	r4, [pc, #84]	; (801767c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8017628:	4605      	mov	r5, r0
 801762a:	7823      	ldrb	r3, [r4, #0]
 801762c:	f3bf 8f5b 	dmb	ish
 8017630:	07da      	lsls	r2, r3, #31
 8017632:	d40b      	bmi.n	801764c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8017634:	4620      	mov	r0, r4
 8017636:	f004 fe5e 	bl	801c2f6 <__cxa_guard_acquire>
 801763a:	b138      	cbz	r0, 801764c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801763c:	4620      	mov	r0, r4
 801763e:	f004 fe66 	bl	801c30e <__cxa_guard_release>
 8017642:	4a0f      	ldr	r2, [pc, #60]	; (8017680 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8017644:	490f      	ldr	r1, [pc, #60]	; (8017684 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8017646:	4810      	ldr	r0, [pc, #64]	; (8017688 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017648:	f004 fe4e 	bl	801c2e8 <__aeabi_atexit>
 801764c:	4c0f      	ldr	r4, [pc, #60]	; (801768c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801764e:	7823      	ldrb	r3, [r4, #0]
 8017650:	f3bf 8f5b 	dmb	ish
 8017654:	07db      	lsls	r3, r3, #31
 8017656:	d40b      	bmi.n	8017670 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017658:	4620      	mov	r0, r4
 801765a:	f004 fe4c 	bl	801c2f6 <__cxa_guard_acquire>
 801765e:	b138      	cbz	r0, 8017670 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017660:	4620      	mov	r0, r4
 8017662:	f004 fe54 	bl	801c30e <__cxa_guard_release>
 8017666:	4a06      	ldr	r2, [pc, #24]	; (8017680 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8017668:	4909      	ldr	r1, [pc, #36]	; (8017690 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801766a:	480a      	ldr	r0, [pc, #40]	; (8017694 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801766c:	f004 fe3c 	bl	801c2e8 <__aeabi_atexit>
 8017670:	4b05      	ldr	r3, [pc, #20]	; (8017688 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017672:	64ab      	str	r3, [r5, #72]	; 0x48
 8017674:	4b07      	ldr	r3, [pc, #28]	; (8017694 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8017676:	64eb      	str	r3, [r5, #76]	; 0x4c
 8017678:	bd38      	pop	{r3, r4, r5, pc}
 801767a:	bf00      	nop
 801767c:	2400ba0c 	.word	0x2400ba0c
 8017680:	24000000 	.word	0x24000000
 8017684:	08015d69 	.word	0x08015d69
 8017688:	24000058 	.word	0x24000058
 801768c:	2400ba10 	.word	0x2400ba10
 8017690:	08015d67 	.word	0x08015d67
 8017694:	2400005c 	.word	0x2400005c

08017698 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8017698:	b510      	push	{r4, lr}
 801769a:	4604      	mov	r4, r0
 801769c:	f7ff ff88 	bl	80175b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80176a0:	4620      	mov	r0, r4
 80176a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176a6:	f7ff bfbd 	b.w	8017624 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080176aa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80176aa:	b510      	push	{r4, lr}
 80176ac:	4604      	mov	r4, r0
 80176ae:	f7ff fff3 	bl	8017698 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80176b2:	4620      	mov	r0, r4
 80176b4:	f7ff ff72 	bl	801759c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80176b8:	4620      	mov	r0, r4
 80176ba:	f7ff fe73 	bl	80173a4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80176be:	4620      	mov	r0, r4
 80176c0:	f7ff fdf2 	bl	80172a8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80176c4:	4620      	mov	r0, r4
 80176c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176ca:	f7ff bee9 	b.w	80174a0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

080176ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80176ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176d2:	b087      	sub	sp, #28
 80176d4:	788d      	ldrb	r5, [r1, #2]
 80176d6:	f891 9000 	ldrb.w	r9, [r1]
 80176da:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80176de:	9501      	str	r5, [sp, #4]
 80176e0:	784d      	ldrb	r5, [r1, #1]
 80176e2:	9203      	str	r2, [sp, #12]
 80176e4:	9502      	str	r5, [sp, #8]
 80176e6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80176ea:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80176ee:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80176f2:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 80176f6:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80176fa:	fb06 0708 	mla	r7, r6, r8, r0
 80176fe:	2e00      	cmp	r6, #0
 8017700:	eb02 0a07 	add.w	sl, r2, r7
 8017704:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8017708:	9d01      	ldr	r5, [sp, #4]
 801770a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801770e:	ea45 0509 	orr.w	r5, r5, r9
 8017712:	9505      	str	r5, [sp, #20]
 8017714:	f2c0 80b2 	blt.w	801787c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8017718:	45b3      	cmp	fp, r6
 801771a:	f340 80af 	ble.w	801787c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801771e:	2800      	cmp	r0, #0
 8017720:	f2c0 80aa 	blt.w	8017878 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8017724:	4580      	cmp	r8, r0
 8017726:	f340 80a7 	ble.w	8017878 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801772a:	9a03      	ldr	r2, [sp, #12]
 801772c:	5dd7      	ldrb	r7, [r2, r7]
 801772e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017732:	441f      	add	r7, r3
 8017734:	1c42      	adds	r2, r0, #1
 8017736:	f100 80a4 	bmi.w	8017882 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801773a:	4590      	cmp	r8, r2
 801773c:	f340 80a1 	ble.w	8017882 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8017740:	2c00      	cmp	r4, #0
 8017742:	f000 809e 	beq.w	8017882 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8017746:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801774a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801774e:	441d      	add	r5, r3
 8017750:	3601      	adds	r6, #1
 8017752:	f100 809a 	bmi.w	801788a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8017756:	45b3      	cmp	fp, r6
 8017758:	f340 8097 	ble.w	801788a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801775c:	f1bc 0f00 	cmp.w	ip, #0
 8017760:	f000 8093 	beq.w	801788a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8017764:	2800      	cmp	r0, #0
 8017766:	f2c0 808e 	blt.w	8017886 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801776a:	4580      	cmp	r8, r0
 801776c:	f340 808b 	ble.w	8017886 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8017770:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8017774:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017778:	441e      	add	r6, r3
 801777a:	3001      	adds	r0, #1
 801777c:	f100 8088 	bmi.w	8017890 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8017780:	4580      	cmp	r8, r0
 8017782:	f340 8085 	ble.w	8017890 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8017786:	2c00      	cmp	r4, #0
 8017788:	f000 8082 	beq.w	8017890 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801778c:	44d0      	add	r8, sl
 801778e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017792:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017796:	4413      	add	r3, r2
 8017798:	b2a4      	uxth	r4, r4
 801779a:	f895 a000 	ldrb.w	sl, [r5]
 801779e:	fa1f fc8c 	uxth.w	ip, ip
 80177a2:	fb04 fb0c 	mul.w	fp, r4, ip
 80177a6:	0124      	lsls	r4, r4, #4
 80177a8:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80177ac:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 80177b0:	eba4 040b 	sub.w	r4, r4, fp
 80177b4:	fa1f f08c 	uxth.w	r0, ip
 80177b8:	b2a2      	uxth	r2, r4
 80177ba:	783c      	ldrb	r4, [r7, #0]
 80177bc:	eba8 0800 	sub.w	r8, r8, r0
 80177c0:	fa1f fc8e 	uxth.w	ip, lr
 80177c4:	fb02 fa0a 	mul.w	sl, r2, sl
 80177c8:	ea6f 0e0e 	mvn.w	lr, lr
 80177cc:	fa1f f888 	uxth.w	r8, r8
 80177d0:	fa5f fe8e 	uxtb.w	lr, lr
 80177d4:	fb08 aa04 	mla	sl, r8, r4, sl
 80177d8:	7834      	ldrb	r4, [r6, #0]
 80177da:	fb19 f90e 	smulbb	r9, r9, lr
 80177de:	fb00 aa04 	mla	sl, r0, r4, sl
 80177e2:	781c      	ldrb	r4, [r3, #0]
 80177e4:	fb0b a404 	mla	r4, fp, r4, sl
 80177e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80177ec:	fb04 990c 	mla	r9, r4, ip, r9
 80177f0:	fa1f f989 	uxth.w	r9, r9
 80177f4:	f109 0401 	add.w	r4, r9, #1
 80177f8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80177fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017800:	f881 9000 	strb.w	r9, [r1]
 8017804:	f895 9001 	ldrb.w	r9, [r5, #1]
 8017808:	787c      	ldrb	r4, [r7, #1]
 801780a:	fb02 f909 	mul.w	r9, r2, r9
 801780e:	fb08 9904 	mla	r9, r8, r4, r9
 8017812:	7874      	ldrb	r4, [r6, #1]
 8017814:	fb00 9904 	mla	r9, r0, r4, r9
 8017818:	785c      	ldrb	r4, [r3, #1]
 801781a:	fb0b 9404 	mla	r4, fp, r4, r9
 801781e:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8017822:	9c02      	ldr	r4, [sp, #8]
 8017824:	fb14 f90e 	smulbb	r9, r4, lr
 8017828:	fb0a 940c 	mla	r4, sl, ip, r9
 801782c:	b2a4      	uxth	r4, r4
 801782e:	f104 0901 	add.w	r9, r4, #1
 8017832:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8017836:	1224      	asrs	r4, r4, #8
 8017838:	704c      	strb	r4, [r1, #1]
 801783a:	78ad      	ldrb	r5, [r5, #2]
 801783c:	78bc      	ldrb	r4, [r7, #2]
 801783e:	436a      	muls	r2, r5
 8017840:	789b      	ldrb	r3, [r3, #2]
 8017842:	fb08 2204 	mla	r2, r8, r4, r2
 8017846:	78b4      	ldrb	r4, [r6, #2]
 8017848:	fb00 2004 	mla	r0, r0, r4, r2
 801784c:	fb0b 0b03 	mla	fp, fp, r3, r0
 8017850:	9b01      	ldr	r3, [sp, #4]
 8017852:	fb13 fe0e 	smulbb	lr, r3, lr
 8017856:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801785a:	fb0b ec0c 	mla	ip, fp, ip, lr
 801785e:	fa1f fc8c 	uxth.w	ip, ip
 8017862:	f10c 0e01 	add.w	lr, ip, #1
 8017866:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801786a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801786e:	f881 c002 	strb.w	ip, [r1, #2]
 8017872:	b007      	add	sp, #28
 8017874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017878:	af05      	add	r7, sp, #20
 801787a:	e75b      	b.n	8017734 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801787c:	ad05      	add	r5, sp, #20
 801787e:	462f      	mov	r7, r5
 8017880:	e766      	b.n	8017750 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8017882:	ad05      	add	r5, sp, #20
 8017884:	e764      	b.n	8017750 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8017886:	ae05      	add	r6, sp, #20
 8017888:	e777      	b.n	801777a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801788a:	ab05      	add	r3, sp, #20
 801788c:	461e      	mov	r6, r3
 801788e:	e783      	b.n	8017798 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8017890:	ab05      	add	r3, sp, #20
 8017892:	e781      	b.n	8017798 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08017894 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017898:	b093      	sub	sp, #76	; 0x4c
 801789a:	9210      	str	r2, [sp, #64]	; 0x40
 801789c:	9309      	str	r3, [sp, #36]	; 0x24
 801789e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80178a0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80178a4:	9011      	str	r0, [sp, #68]	; 0x44
 80178a6:	930e      	str	r3, [sp, #56]	; 0x38
 80178a8:	6850      	ldr	r0, [r2, #4]
 80178aa:	910d      	str	r1, [sp, #52]	; 0x34
 80178ac:	6812      	ldr	r2, [r2, #0]
 80178ae:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80178b2:	fb00 1303 	mla	r3, r0, r3, r1
 80178b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80178ba:	18d3      	adds	r3, r2, r3
 80178bc:	930a      	str	r3, [sp, #40]	; 0x28
 80178be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	930c      	str	r3, [sp, #48]	; 0x30
 80178c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80178c6:	685c      	ldr	r4, [r3, #4]
 80178c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178ca:	3404      	adds	r4, #4
 80178cc:	43db      	mvns	r3, r3
 80178ce:	b2db      	uxtb	r3, r3
 80178d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80178d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	dc03      	bgt.n	80178e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80178d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178da:	2b00      	cmp	r3, #0
 80178dc:	f340 8250 	ble.w	8017d80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80178e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80178e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80178e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80178ea:	1e48      	subs	r0, r1, #1
 80178ec:	1e55      	subs	r5, r2, #1
 80178ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	f340 80ee 	ble.w	8017ad2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80178f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80178f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80178fa:	1436      	asrs	r6, r6, #16
 80178fc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017900:	d406      	bmi.n	8017910 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017902:	4286      	cmp	r6, r0
 8017904:	da04      	bge.n	8017910 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017906:	2b00      	cmp	r3, #0
 8017908:	db02      	blt.n	8017910 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801790a:	42ab      	cmp	r3, r5
 801790c:	f2c0 80e2 	blt.w	8017ad4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8017910:	3601      	adds	r6, #1
 8017912:	f100 80cf 	bmi.w	8017ab4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8017916:	42b1      	cmp	r1, r6
 8017918:	f2c0 80cc 	blt.w	8017ab4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801791c:	3301      	adds	r3, #1
 801791e:	f100 80c9 	bmi.w	8017ab4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8017922:	429a      	cmp	r2, r3
 8017924:	f2c0 80c6 	blt.w	8017ab4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8017928:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801792c:	f1bb 0f00 	cmp.w	fp, #0
 8017930:	f340 80f1 	ble.w	8017b16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8017934:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017936:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017938:	9824      	ldr	r0, [sp, #144]	; 0x90
 801793a:	141d      	asrs	r5, r3, #16
 801793c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801793e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017942:	68c7      	ldr	r7, [r0, #12]
 8017944:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017946:	1418      	asrs	r0, r3, #16
 8017948:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801794c:	6892      	ldr	r2, [r2, #8]
 801794e:	f100 8137 	bmi.w	8017bc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8017952:	f102 3cff 	add.w	ip, r2, #4294967295
 8017956:	4560      	cmp	r0, ip
 8017958:	f280 8132 	bge.w	8017bc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801795c:	2d00      	cmp	r5, #0
 801795e:	f2c0 812f 	blt.w	8017bc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8017962:	f107 3cff 	add.w	ip, r7, #4294967295
 8017966:	4565      	cmp	r5, ip
 8017968:	f280 812a 	bge.w	8017bc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801796c:	b212      	sxth	r2, r2
 801796e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017970:	fb05 0002 	mla	r0, r5, r2, r0
 8017974:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017976:	f817 c000 	ldrb.w	ip, [r7, r0]
 801797a:	4405      	add	r5, r0
 801797c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017980:	eb04 0e0c 	add.w	lr, r4, ip
 8017984:	f1b8 0f00 	cmp.w	r8, #0
 8017988:	f000 810c 	beq.w	8017ba4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801798c:	786f      	ldrb	r7, [r5, #1]
 801798e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017992:	4427      	add	r7, r4
 8017994:	2900      	cmp	r1, #0
 8017996:	f000 810d 	beq.w	8017bb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801799a:	18a8      	adds	r0, r5, r2
 801799c:	5caa      	ldrb	r2, [r5, r2]
 801799e:	7840      	ldrb	r0, [r0, #1]
 80179a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80179a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80179a8:	4422      	add	r2, r4
 80179aa:	4420      	add	r0, r4
 80179ac:	fa1f f388 	uxth.w	r3, r8
 80179b0:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80179b4:	b289      	uxth	r1, r1
 80179b6:	f897 c000 	ldrb.w	ip, [r7]
 80179ba:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80179be:	fb03 f901 	mul.w	r9, r3, r1
 80179c2:	011b      	lsls	r3, r3, #4
 80179c4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80179c8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80179cc:	eba3 0309 	sub.w	r3, r3, r9
 80179d0:	b289      	uxth	r1, r1
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	eba8 0801 	sub.w	r8, r8, r1
 80179d8:	fb03 fc0c 	mul.w	ip, r3, ip
 80179dc:	fa1f f888 	uxth.w	r8, r8
 80179e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80179e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179e4:	fb08 cc0a 	mla	ip, r8, sl, ip
 80179e8:	f892 a000 	ldrb.w	sl, [r2]
 80179ec:	fb01 cc0a 	mla	ip, r1, sl, ip
 80179f0:	f890 a000 	ldrb.w	sl, [r0]
 80179f4:	fb09 cc0a 	mla	ip, r9, sl, ip
 80179f8:	f896 a000 	ldrb.w	sl, [r6]
 80179fc:	fb1a fa03 	smulbb	sl, sl, r3
 8017a00:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a06:	fb0c ac05 	mla	ip, ip, r5, sl
 8017a0a:	fa1f fc8c 	uxth.w	ip, ip
 8017a0e:	f10c 0a01 	add.w	sl, ip, #1
 8017a12:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8017a16:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017a1a:	f886 a000 	strb.w	sl, [r6]
 8017a1e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8017a22:	f89e a001 	ldrb.w	sl, [lr, #1]
 8017a26:	fb03 fc0c 	mul.w	ip, r3, ip
 8017a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a2c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8017a30:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017a34:	fb01 cc0a 	mla	ip, r1, sl, ip
 8017a38:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017a3c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8017a40:	f896 a001 	ldrb.w	sl, [r6, #1]
 8017a44:	fb1a fa03 	smulbb	sl, sl, r3
 8017a48:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a4e:	fb0c ac05 	mla	ip, ip, r5, sl
 8017a52:	fa1f fc8c 	uxth.w	ip, ip
 8017a56:	f10c 0a01 	add.w	sl, ip, #1
 8017a5a:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8017a5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017a62:	f886 c001 	strb.w	ip, [r6, #1]
 8017a66:	78bf      	ldrb	r7, [r7, #2]
 8017a68:	f89e c002 	ldrb.w	ip, [lr, #2]
 8017a6c:	437b      	muls	r3, r7
 8017a6e:	fb08 330c 	mla	r3, r8, ip, r3
 8017a72:	f892 c002 	ldrb.w	ip, [r2, #2]
 8017a76:	7882      	ldrb	r2, [r0, #2]
 8017a78:	fb01 310c 	mla	r1, r1, ip, r3
 8017a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a7e:	fb09 1902 	mla	r9, r9, r2, r1
 8017a82:	78b1      	ldrb	r1, [r6, #2]
 8017a84:	fb11 f103 	smulbb	r1, r1, r3
 8017a88:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017a8c:	fb09 1505 	mla	r5, r9, r5, r1
 8017a90:	b2ad      	uxth	r5, r5
 8017a92:	1c6b      	adds	r3, r5, #1
 8017a94:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8017a98:	122d      	asrs	r5, r5, #8
 8017a9a:	70b5      	strb	r5, [r6, #2]
 8017a9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a9e:	3603      	adds	r6, #3
 8017aa0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017aa6:	4413      	add	r3, r2
 8017aa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017aaa:	931d      	str	r3, [sp, #116]	; 0x74
 8017aac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017aae:	4413      	add	r3, r2
 8017ab0:	931e      	str	r3, [sp, #120]	; 0x78
 8017ab2:	e73b      	b.n	801792c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ab6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8017ab8:	4433      	add	r3, r6
 8017aba:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8017abc:	931d      	str	r3, [sp, #116]	; 0x74
 8017abe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017ac0:	4433      	add	r3, r6
 8017ac2:	931e      	str	r3, [sp, #120]	; 0x78
 8017ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ac6:	3b01      	subs	r3, #1
 8017ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8017aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017acc:	3303      	adds	r3, #3
 8017ace:	930a      	str	r3, [sp, #40]	; 0x28
 8017ad0:	e70d      	b.n	80178ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017ad2:	d028      	beq.n	8017b26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8017ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ad6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8017ad8:	3b01      	subs	r3, #1
 8017ada:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017adc:	fb00 5003 	mla	r0, r0, r3, r5
 8017ae0:	1400      	asrs	r0, r0, #16
 8017ae2:	f53f af21 	bmi.w	8017928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017ae6:	3901      	subs	r1, #1
 8017ae8:	4288      	cmp	r0, r1
 8017aea:	f6bf af1d 	bge.w	8017928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017aee:	9920      	ldr	r1, [sp, #128]	; 0x80
 8017af0:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017af2:	fb01 0303 	mla	r3, r1, r3, r0
 8017af6:	141b      	asrs	r3, r3, #16
 8017af8:	f53f af16 	bmi.w	8017928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017afc:	3a01      	subs	r2, #1
 8017afe:	4293      	cmp	r3, r2
 8017b00:	f6bf af12 	bge.w	8017928 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b06:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017b0a:	1cdf      	adds	r7, r3, #3
 8017b0c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8017b10:	f1b9 0f00 	cmp.w	r9, #0
 8017b14:	dc73      	bgt.n	8017bfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8017b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b22:	441a      	add	r2, r3
 8017b24:	920a      	str	r2, [sp, #40]	; 0x28
 8017b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	f340 8129 	ble.w	8017d80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8017b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017b32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017b34:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017b38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017b3c:	eef0 6a62 	vmov.f32	s13, s5
 8017b40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017b44:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017b48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017b4c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8017b50:	eef0 6a43 	vmov.f32	s13, s6
 8017b54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017b58:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8017b5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b60:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b64:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b74:	ee12 2a90 	vmov	r2, s5
 8017b78:	eef0 2a47 	vmov.f32	s5, s14
 8017b7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b80:	ee13 2a10 	vmov	r2, s6
 8017b84:	931f      	str	r3, [sp, #124]	; 0x7c
 8017b86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017b88:	eeb0 3a67 	vmov.f32	s6, s15
 8017b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b90:	9320      	str	r3, [sp, #128]	; 0x80
 8017b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017b96:	3b01      	subs	r3, #1
 8017b98:	930d      	str	r3, [sp, #52]	; 0x34
 8017b9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017b9c:	bf08      	it	eq
 8017b9e:	4613      	moveq	r3, r2
 8017ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ba2:	e696      	b.n	80178d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017ba4:	b149      	cbz	r1, 8017bba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8017ba6:	5caa      	ldrb	r2, [r5, r2]
 8017ba8:	4670      	mov	r0, lr
 8017baa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017bae:	4422      	add	r2, r4
 8017bb0:	4677      	mov	r7, lr
 8017bb2:	e6fb      	b.n	80179ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8017bb4:	4670      	mov	r0, lr
 8017bb6:	4672      	mov	r2, lr
 8017bb8:	e6f8      	b.n	80179ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8017bba:	4670      	mov	r0, lr
 8017bbc:	4672      	mov	r2, lr
 8017bbe:	e7f7      	b.n	8017bb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8017bc0:	f110 0c01 	adds.w	ip, r0, #1
 8017bc4:	f53f af6a 	bmi.w	8017a9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017bc8:	4562      	cmp	r2, ip
 8017bca:	f6ff af67 	blt.w	8017a9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017bce:	f115 0c01 	adds.w	ip, r5, #1
 8017bd2:	f53f af63 	bmi.w	8017a9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017bd6:	4567      	cmp	r7, ip
 8017bd8:	f6ff af60 	blt.w	8017a9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bde:	b23f      	sxth	r7, r7
 8017be0:	b212      	sxth	r2, r2
 8017be2:	9002      	str	r0, [sp, #8]
 8017be4:	9701      	str	r7, [sp, #4]
 8017be6:	9200      	str	r2, [sp, #0]
 8017be8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017bec:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8017bf0:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8017bf4:	4623      	mov	r3, r4
 8017bf6:	4631      	mov	r1, r6
 8017bf8:	f7ff fd69 	bl	80176ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8017bfc:	e74e      	b.n	8017a9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017bfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017c00:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017c02:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017c06:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017c08:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017c0a:	1400      	asrs	r0, r0, #16
 8017c0c:	142d      	asrs	r5, r5, #16
 8017c0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c10:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017c14:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017c18:	fb02 5000 	mla	r0, r2, r0, r5
 8017c1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017c1e:	f815 e000 	ldrb.w	lr, [r5, r0]
 8017c22:	eb05 0c00 	add.w	ip, r5, r0
 8017c26:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017c2a:	eb04 060e 	add.w	r6, r4, lr
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	f000 8097 	beq.w	8017d62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8017c34:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8017c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c3c:	4425      	add	r5, r4
 8017c3e:	2900      	cmp	r1, #0
 8017c40:	f000 8098 	beq.w	8017d74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8017c44:	eb0c 0002 	add.w	r0, ip, r2
 8017c48:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017c4c:	7840      	ldrb	r0, [r0, #1]
 8017c4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017c56:	4422      	add	r2, r4
 8017c58:	4420      	add	r0, r4
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8017c60:	b289      	uxth	r1, r1
 8017c62:	f895 e000 	ldrb.w	lr, [r5]
 8017c66:	3703      	adds	r7, #3
 8017c68:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c6c:	fb03 f801 	mul.w	r8, r3, r1
 8017c70:	011b      	lsls	r3, r3, #4
 8017c72:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8017c76:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017c7a:	eba3 0308 	sub.w	r3, r3, r8
 8017c7e:	b289      	uxth	r1, r1
 8017c80:	b29b      	uxth	r3, r3
 8017c82:	ebac 0c01 	sub.w	ip, ip, r1
 8017c86:	fb03 fe0e 	mul.w	lr, r3, lr
 8017c8a:	fa1f fc8c 	uxth.w	ip, ip
 8017c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c92:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017c96:	f892 b000 	ldrb.w	fp, [r2]
 8017c9a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017c9e:	f890 b000 	ldrb.w	fp, [r0]
 8017ca2:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017ca6:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8017caa:	fb1b fb03 	smulbb	fp, fp, r3
 8017cae:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cb4:	fb0e be0a 	mla	lr, lr, sl, fp
 8017cb8:	fa1f fe8e 	uxth.w	lr, lr
 8017cbc:	f10e 0b01 	add.w	fp, lr, #1
 8017cc0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017cc4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017cc8:	f807 ec06 	strb.w	lr, [r7, #-6]
 8017ccc:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017cd0:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017cd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8017cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cda:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017cde:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017ce2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017ce6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017cea:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017cee:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8017cf2:	fb1b fb03 	smulbb	fp, fp, r3
 8017cf6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cfc:	fb0e be0a 	mla	lr, lr, sl, fp
 8017d00:	fa1f fe8e 	uxth.w	lr, lr
 8017d04:	f10e 0b01 	add.w	fp, lr, #1
 8017d08:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017d0c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017d10:	f807 ec05 	strb.w	lr, [r7, #-5]
 8017d14:	78ad      	ldrb	r5, [r5, #2]
 8017d16:	78b6      	ldrb	r6, [r6, #2]
 8017d18:	436b      	muls	r3, r5
 8017d1a:	7895      	ldrb	r5, [r2, #2]
 8017d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017d1e:	fb0c 3306 	mla	r3, ip, r6, r3
 8017d22:	fb01 3305 	mla	r3, r1, r5, r3
 8017d26:	7885      	ldrb	r5, [r0, #2]
 8017d28:	fb08 3805 	mla	r8, r8, r5, r3
 8017d2c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8017d30:	fb13 f302 	smulbb	r3, r3, r2
 8017d34:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8017d38:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d3a:	fb08 380a 	mla	r8, r8, sl, r3
 8017d3e:	fa1f f888 	uxth.w	r8, r8
 8017d42:	f108 0301 	add.w	r3, r8, #1
 8017d46:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8017d4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d4c:	4413      	add	r3, r2
 8017d4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017d50:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017d54:	931d      	str	r3, [sp, #116]	; 0x74
 8017d56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d58:	f807 8c04 	strb.w	r8, [r7, #-4]
 8017d5c:	4413      	add	r3, r2
 8017d5e:	931e      	str	r3, [sp, #120]	; 0x78
 8017d60:	e6d6      	b.n	8017b10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8017d62:	b151      	cbz	r1, 8017d7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017d64:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017d68:	4630      	mov	r0, r6
 8017d6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d6e:	4422      	add	r2, r4
 8017d70:	4635      	mov	r5, r6
 8017d72:	e772      	b.n	8017c5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8017d74:	4630      	mov	r0, r6
 8017d76:	4632      	mov	r2, r6
 8017d78:	e76f      	b.n	8017c5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8017d7a:	4630      	mov	r0, r6
 8017d7c:	4632      	mov	r2, r6
 8017d7e:	e7f7      	b.n	8017d70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8017d80:	b013      	add	sp, #76	; 0x4c
 8017d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d86 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017d86:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d8a:	784c      	ldrb	r4, [r1, #1]
 8017d8c:	f891 a002 	ldrb.w	sl, [r1, #2]
 8017d90:	0224      	lsls	r4, r4, #8
 8017d92:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017d96:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8017d9a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017d9e:	f891 a000 	ldrb.w	sl, [r1]
 8017da2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8017da6:	ea44 040a 	orr.w	r4, r4, sl
 8017daa:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8017dae:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8017db2:	9401      	str	r4, [sp, #4]
 8017db4:	fb05 c70e 	mla	r7, r5, lr, ip
 8017db8:	2d00      	cmp	r5, #0
 8017dba:	eb02 0807 	add.w	r8, r2, r7
 8017dbe:	db72      	blt.n	8017ea6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8017dc0:	45a9      	cmp	r9, r5
 8017dc2:	dd70      	ble.n	8017ea6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8017dc4:	f1bc 0f00 	cmp.w	ip, #0
 8017dc8:	db6b      	blt.n	8017ea2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8017dca:	45e6      	cmp	lr, ip
 8017dcc:	dd69      	ble.n	8017ea2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8017dce:	5dd7      	ldrb	r7, [r2, r7]
 8017dd0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017dd4:	441f      	add	r7, r3
 8017dd6:	f11c 0201 	adds.w	r2, ip, #1
 8017dda:	d467      	bmi.n	8017eac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8017ddc:	4596      	cmp	lr, r2
 8017dde:	dd65      	ble.n	8017eac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8017de0:	2800      	cmp	r0, #0
 8017de2:	d063      	beq.n	8017eac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8017de4:	f898 4001 	ldrb.w	r4, [r8, #1]
 8017de8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017dec:	441c      	add	r4, r3
 8017dee:	3501      	adds	r5, #1
 8017df0:	d460      	bmi.n	8017eb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017df2:	45a9      	cmp	r9, r5
 8017df4:	dd5e      	ble.n	8017eb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017df6:	2e00      	cmp	r6, #0
 8017df8:	d05c      	beq.n	8017eb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017dfa:	f1bc 0f00 	cmp.w	ip, #0
 8017dfe:	db57      	blt.n	8017eb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8017e00:	45e6      	cmp	lr, ip
 8017e02:	dd55      	ble.n	8017eb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8017e04:	f818 500e 	ldrb.w	r5, [r8, lr]
 8017e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e0c:	441d      	add	r5, r3
 8017e0e:	f11c 0201 	adds.w	r2, ip, #1
 8017e12:	d452      	bmi.n	8017eba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017e14:	4596      	cmp	lr, r2
 8017e16:	dd50      	ble.n	8017eba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017e18:	2800      	cmp	r0, #0
 8017e1a:	d04e      	beq.n	8017eba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017e1c:	44c6      	add	lr, r8
 8017e1e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017e22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e26:	4413      	add	r3, r2
 8017e28:	b280      	uxth	r0, r0
 8017e2a:	f897 8000 	ldrb.w	r8, [r7]
 8017e2e:	b2b2      	uxth	r2, r6
 8017e30:	fb00 f602 	mul.w	r6, r0, r2
 8017e34:	0100      	lsls	r0, r0, #4
 8017e36:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8017e3a:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8017e3e:	1b80      	subs	r0, r0, r6
 8017e40:	fa1f fc82 	uxth.w	ip, r2
 8017e44:	b282      	uxth	r2, r0
 8017e46:	7820      	ldrb	r0, [r4, #0]
 8017e48:	ebae 0e0c 	sub.w	lr, lr, ip
 8017e4c:	4350      	muls	r0, r2
 8017e4e:	fa1f fe8e 	uxth.w	lr, lr
 8017e52:	fb0e 0808 	mla	r8, lr, r8, r0
 8017e56:	7828      	ldrb	r0, [r5, #0]
 8017e58:	fb0c 8800 	mla	r8, ip, r0, r8
 8017e5c:	7818      	ldrb	r0, [r3, #0]
 8017e5e:	fb06 8000 	mla	r0, r6, r0, r8
 8017e62:	1200      	asrs	r0, r0, #8
 8017e64:	7008      	strb	r0, [r1, #0]
 8017e66:	7860      	ldrb	r0, [r4, #1]
 8017e68:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017e6c:	4350      	muls	r0, r2
 8017e6e:	fb0e 0808 	mla	r8, lr, r8, r0
 8017e72:	7868      	ldrb	r0, [r5, #1]
 8017e74:	fb0c 8800 	mla	r8, ip, r0, r8
 8017e78:	7858      	ldrb	r0, [r3, #1]
 8017e7a:	fb06 8000 	mla	r0, r6, r0, r8
 8017e7e:	1200      	asrs	r0, r0, #8
 8017e80:	7048      	strb	r0, [r1, #1]
 8017e82:	78a0      	ldrb	r0, [r4, #2]
 8017e84:	78bf      	ldrb	r7, [r7, #2]
 8017e86:	4350      	muls	r0, r2
 8017e88:	78aa      	ldrb	r2, [r5, #2]
 8017e8a:	fb0e 0007 	mla	r0, lr, r7, r0
 8017e8e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8017e92:	789a      	ldrb	r2, [r3, #2]
 8017e94:	fb06 c202 	mla	r2, r6, r2, ip
 8017e98:	1212      	asrs	r2, r2, #8
 8017e9a:	708a      	strb	r2, [r1, #2]
 8017e9c:	b002      	add	sp, #8
 8017e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ea2:	af01      	add	r7, sp, #4
 8017ea4:	e797      	b.n	8017dd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8017ea6:	ac01      	add	r4, sp, #4
 8017ea8:	4627      	mov	r7, r4
 8017eaa:	e7a0      	b.n	8017dee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8017eac:	ac01      	add	r4, sp, #4
 8017eae:	e79e      	b.n	8017dee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8017eb0:	ad01      	add	r5, sp, #4
 8017eb2:	e7ac      	b.n	8017e0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8017eb4:	ab01      	add	r3, sp, #4
 8017eb6:	461d      	mov	r5, r3
 8017eb8:	e7b6      	b.n	8017e28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8017eba:	ab01      	add	r3, sp, #4
 8017ebc:	e7b4      	b.n	8017e28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08017ebe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec2:	b08d      	sub	sp, #52	; 0x34
 8017ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017ec8:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8017ecc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017ece:	900b      	str	r0, [sp, #44]	; 0x2c
 8017ed0:	9306      	str	r3, [sp, #24]
 8017ed2:	6850      	ldr	r0, [r2, #4]
 8017ed4:	6812      	ldr	r2, [r2, #0]
 8017ed6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017ed8:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8017edc:	fb00 1303 	mla	r3, r0, r3, r1
 8017ee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ee4:	18d3      	adds	r3, r2, r3
 8017ee6:	9307      	str	r3, [sp, #28]
 8017ee8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	9308      	str	r3, [sp, #32]
 8017eee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017ef0:	685d      	ldr	r5, [r3, #4]
 8017ef2:	3504      	adds	r5, #4
 8017ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	dc03      	bgt.n	8017f02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8017efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	f340 81e6 	ble.w	80182ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8017f02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017f04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017f08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017f0c:	1e48      	subs	r0, r1, #1
 8017f0e:	1e56      	subs	r6, r2, #1
 8017f10:	9b06      	ldr	r3, [sp, #24]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	f340 80bd 	ble.w	8018092 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017f18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017f1a:	1427      	asrs	r7, r4, #16
 8017f1c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017f20:	d406      	bmi.n	8017f30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017f22:	4287      	cmp	r7, r0
 8017f24:	da04      	bge.n	8017f30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	db02      	blt.n	8017f30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017f2a:	42b3      	cmp	r3, r6
 8017f2c:	f2c0 80b2 	blt.w	8018094 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8017f30:	3701      	adds	r7, #1
 8017f32:	f100 80a1 	bmi.w	8018078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017f36:	42b9      	cmp	r1, r7
 8017f38:	f2c0 809e 	blt.w	8018078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	f100 809b 	bmi.w	8018078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017f42:	429a      	cmp	r2, r3
 8017f44:	f2c0 8098 	blt.w	8018078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017f48:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8017f4c:	f1bb 0f00 	cmp.w	fp, #0
 8017f50:	f340 80bf 	ble.w	80180d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017f54:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017f56:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017f58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017f5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017f5e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017f62:	1420      	asrs	r0, r4, #16
 8017f64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017f66:	ea4f 4723 	mov.w	r7, r3, asr #16
 8017f6a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017f6e:	6892      	ldr	r2, [r2, #8]
 8017f70:	f100 8103 	bmi.w	801817a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f74:	f102 3eff 	add.w	lr, r2, #4294967295
 8017f78:	4570      	cmp	r0, lr
 8017f7a:	f280 80fe 	bge.w	801817a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f7e:	2f00      	cmp	r7, #0
 8017f80:	f2c0 80fb 	blt.w	801817a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f84:	f10c 3eff 	add.w	lr, ip, #4294967295
 8017f88:	4577      	cmp	r7, lr
 8017f8a:	f280 80f6 	bge.w	801817a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f8e:	b212      	sxth	r2, r2
 8017f90:	fb07 0002 	mla	r0, r7, r2, r0
 8017f94:	9f08      	ldr	r7, [sp, #32]
 8017f96:	f817 8000 	ldrb.w	r8, [r7, r0]
 8017f9a:	eb07 0e00 	add.w	lr, r7, r0
 8017f9e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017fa2:	eb05 0c08 	add.w	ip, r5, r8
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	f000 80d8 	beq.w	801815c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017fac:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8017fb0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017fb4:	442f      	add	r7, r5
 8017fb6:	2900      	cmp	r1, #0
 8017fb8:	f000 80d9 	beq.w	801816e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017fbc:	eb0e 0002 	add.w	r0, lr, r2
 8017fc0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017fc4:	7840      	ldrb	r0, [r0, #1]
 8017fc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017fca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017fce:	442a      	add	r2, r5
 8017fd0:	4428      	add	r0, r5
 8017fd2:	b29b      	uxth	r3, r3
 8017fd4:	f815 a008 	ldrb.w	sl, [r5, r8]
 8017fd8:	b289      	uxth	r1, r1
 8017fda:	f897 8000 	ldrb.w	r8, [r7]
 8017fde:	fb03 f901 	mul.w	r9, r3, r1
 8017fe2:	011b      	lsls	r3, r3, #4
 8017fe4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017fe8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017fec:	eba3 0309 	sub.w	r3, r3, r9
 8017ff0:	b289      	uxth	r1, r1
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	ebae 0e01 	sub.w	lr, lr, r1
 8017ff8:	fb03 f808 	mul.w	r8, r3, r8
 8017ffc:	fa1f fe8e 	uxth.w	lr, lr
 8018000:	fb0e 880a 	mla	r8, lr, sl, r8
 8018004:	f892 a000 	ldrb.w	sl, [r2]
 8018008:	fb01 880a 	mla	r8, r1, sl, r8
 801800c:	f890 a000 	ldrb.w	sl, [r0]
 8018010:	fb09 880a 	mla	r8, r9, sl, r8
 8018014:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018018:	f886 8000 	strb.w	r8, [r6]
 801801c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018020:	f89c a001 	ldrb.w	sl, [ip, #1]
 8018024:	fb03 f808 	mul.w	r8, r3, r8
 8018028:	fb0e 880a 	mla	r8, lr, sl, r8
 801802c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8018030:	fb01 880a 	mla	r8, r1, sl, r8
 8018034:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018038:	fb09 880a 	mla	r8, r9, sl, r8
 801803c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018040:	f886 8001 	strb.w	r8, [r6, #1]
 8018044:	78bf      	ldrb	r7, [r7, #2]
 8018046:	f89c c002 	ldrb.w	ip, [ip, #2]
 801804a:	437b      	muls	r3, r7
 801804c:	7892      	ldrb	r2, [r2, #2]
 801804e:	fb0e 330c 	mla	r3, lr, ip, r3
 8018052:	fb01 3102 	mla	r1, r1, r2, r3
 8018056:	7882      	ldrb	r2, [r0, #2]
 8018058:	fb09 1902 	mla	r9, r9, r2, r1
 801805c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018060:	f886 9002 	strb.w	r9, [r6, #2]
 8018064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018066:	3603      	adds	r6, #3
 8018068:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801806a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801806e:	441c      	add	r4, r3
 8018070:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018072:	4413      	add	r3, r2
 8018074:	9318      	str	r3, [sp, #96]	; 0x60
 8018076:	e769      	b.n	8017f4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018078:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801807a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801807c:	441c      	add	r4, r3
 801807e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018080:	443b      	add	r3, r7
 8018082:	9318      	str	r3, [sp, #96]	; 0x60
 8018084:	9b06      	ldr	r3, [sp, #24]
 8018086:	3b01      	subs	r3, #1
 8018088:	9306      	str	r3, [sp, #24]
 801808a:	9b07      	ldr	r3, [sp, #28]
 801808c:	3303      	adds	r3, #3
 801808e:	9307      	str	r3, [sp, #28]
 8018090:	e73e      	b.n	8017f10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018092:	d026      	beq.n	80180e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8018094:	9b06      	ldr	r3, [sp, #24]
 8018096:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018098:	3b01      	subs	r3, #1
 801809a:	fb00 4003 	mla	r0, r0, r3, r4
 801809e:	1400      	asrs	r0, r0, #16
 80180a0:	f53f af52 	bmi.w	8017f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80180a4:	3901      	subs	r1, #1
 80180a6:	4288      	cmp	r0, r1
 80180a8:	f6bf af4e 	bge.w	8017f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80180ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80180ae:	9818      	ldr	r0, [sp, #96]	; 0x60
 80180b0:	fb01 0303 	mla	r3, r1, r3, r0
 80180b4:	141b      	asrs	r3, r3, #16
 80180b6:	f53f af47 	bmi.w	8017f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80180ba:	3a01      	subs	r2, #1
 80180bc:	4293      	cmp	r3, r2
 80180be:	f6bf af43 	bge.w	8017f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80180c2:	9b07      	ldr	r3, [sp, #28]
 80180c4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80180c8:	f103 0803 	add.w	r8, r3, #3
 80180cc:	f1ba 0f00 	cmp.w	sl, #0
 80180d0:	dc71      	bgt.n	80181b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80180d2:	9b06      	ldr	r3, [sp, #24]
 80180d4:	9a07      	ldr	r2, [sp, #28]
 80180d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80180de:	441a      	add	r2, r3
 80180e0:	9207      	str	r2, [sp, #28]
 80180e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	f340 80f2 	ble.w	80182ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80180ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80180ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80180f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80180f4:	eeb0 6a62 	vmov.f32	s12, s5
 80180f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80180fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018100:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018104:	ee16 4a10 	vmov	r4, s12
 8018108:	eeb0 6a43 	vmov.f32	s12, s6
 801810c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018110:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8018114:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018118:	ee61 7a27 	vmul.f32	s15, s2, s15
 801811c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018120:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018124:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018128:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801812c:	ee12 2a90 	vmov	r2, s5
 8018130:	eef0 2a47 	vmov.f32	s5, s14
 8018134:	fb92 f3f3 	sdiv	r3, r2, r3
 8018138:	ee13 2a10 	vmov	r2, s6
 801813c:	9319      	str	r3, [sp, #100]	; 0x64
 801813e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018140:	eeb0 3a67 	vmov.f32	s6, s15
 8018144:	fb92 f3f3 	sdiv	r3, r2, r3
 8018148:	931a      	str	r3, [sp, #104]	; 0x68
 801814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801814c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801814e:	3b01      	subs	r3, #1
 8018150:	9309      	str	r3, [sp, #36]	; 0x24
 8018152:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018154:	bf08      	it	eq
 8018156:	4613      	moveq	r3, r2
 8018158:	9306      	str	r3, [sp, #24]
 801815a:	e6cb      	b.n	8017ef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801815c:	b151      	cbz	r1, 8018174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801815e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8018162:	4660      	mov	r0, ip
 8018164:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018168:	442a      	add	r2, r5
 801816a:	4667      	mov	r7, ip
 801816c:	e731      	b.n	8017fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801816e:	4660      	mov	r0, ip
 8018170:	4662      	mov	r2, ip
 8018172:	e72e      	b.n	8017fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8018174:	4660      	mov	r0, ip
 8018176:	4662      	mov	r2, ip
 8018178:	e7f7      	b.n	801816a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801817a:	f110 0e01 	adds.w	lr, r0, #1
 801817e:	f53f af71 	bmi.w	8018064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018182:	4572      	cmp	r2, lr
 8018184:	f6ff af6e 	blt.w	8018064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018188:	f117 0e01 	adds.w	lr, r7, #1
 801818c:	f53f af6a 	bmi.w	8018064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018190:	45f4      	cmp	ip, lr
 8018192:	f6ff af67 	blt.w	8018064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018196:	b212      	sxth	r2, r2
 8018198:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801819c:	fa0f f38c 	sxth.w	r3, ip
 80181a0:	9200      	str	r2, [sp, #0]
 80181a2:	4631      	mov	r1, r6
 80181a4:	9a08      	ldr	r2, [sp, #32]
 80181a6:	9301      	str	r3, [sp, #4]
 80181a8:	462b      	mov	r3, r5
 80181aa:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80181ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80181b0:	f7ff fde9 	bl	8017d86 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80181b4:	e756      	b.n	8018064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80181b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80181b8:	1426      	asrs	r6, r4, #16
 80181ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 80181bc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80181c0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80181c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80181c6:	1400      	asrs	r0, r0, #16
 80181c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80181cc:	fb02 6000 	mla	r0, r2, r0, r6
 80181d0:	9e08      	ldr	r6, [sp, #32]
 80181d2:	f816 e000 	ldrb.w	lr, [r6, r0]
 80181d6:	eb06 0c00 	add.w	ip, r6, r0
 80181da:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80181de:	eb05 070e 	add.w	r7, r5, lr
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d064      	beq.n	80182b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80181e6:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80181ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80181ee:	442e      	add	r6, r5
 80181f0:	2900      	cmp	r1, #0
 80181f2:	d066      	beq.n	80182c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80181f4:	eb0c 0002 	add.w	r0, ip, r2
 80181f8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80181fc:	7840      	ldrb	r0, [r0, #1]
 80181fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018202:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018206:	442a      	add	r2, r5
 8018208:	4428      	add	r0, r5
 801820a:	b29b      	uxth	r3, r3
 801820c:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8018210:	b289      	uxth	r1, r1
 8018212:	f896 e000 	ldrb.w	lr, [r6]
 8018216:	f108 0803 	add.w	r8, r8, #3
 801821a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801821e:	fb03 f901 	mul.w	r9, r3, r1
 8018222:	011b      	lsls	r3, r3, #4
 8018224:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018228:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801822c:	eba3 0309 	sub.w	r3, r3, r9
 8018230:	b289      	uxth	r1, r1
 8018232:	b29b      	uxth	r3, r3
 8018234:	ebac 0c01 	sub.w	ip, ip, r1
 8018238:	fb03 fe0e 	mul.w	lr, r3, lr
 801823c:	fa1f fc8c 	uxth.w	ip, ip
 8018240:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018244:	f892 b000 	ldrb.w	fp, [r2]
 8018248:	fb01 ee0b 	mla	lr, r1, fp, lr
 801824c:	f890 b000 	ldrb.w	fp, [r0]
 8018250:	fb09 ee0b 	mla	lr, r9, fp, lr
 8018254:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018258:	f808 ec06 	strb.w	lr, [r8, #-6]
 801825c:	f896 e001 	ldrb.w	lr, [r6, #1]
 8018260:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018264:	fb03 fe0e 	mul.w	lr, r3, lr
 8018268:	fb0c ee0b 	mla	lr, ip, fp, lr
 801826c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018270:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018274:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018278:	fb09 ee0b 	mla	lr, r9, fp, lr
 801827c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018280:	f808 ec05 	strb.w	lr, [r8, #-5]
 8018284:	78b6      	ldrb	r6, [r6, #2]
 8018286:	78bf      	ldrb	r7, [r7, #2]
 8018288:	4373      	muls	r3, r6
 801828a:	7896      	ldrb	r6, [r2, #2]
 801828c:	7882      	ldrb	r2, [r0, #2]
 801828e:	fb0c 3307 	mla	r3, ip, r7, r3
 8018292:	fb01 3306 	mla	r3, r1, r6, r3
 8018296:	fb09 3902 	mla	r9, r9, r2, r3
 801829a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801829c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801829e:	441c      	add	r4, r3
 80182a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80182a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80182a6:	4413      	add	r3, r2
 80182a8:	f808 9c04 	strb.w	r9, [r8, #-4]
 80182ac:	9318      	str	r3, [sp, #96]	; 0x60
 80182ae:	e70d      	b.n	80180cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80182b0:	b151      	cbz	r1, 80182c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80182b2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80182b6:	4638      	mov	r0, r7
 80182b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80182bc:	442a      	add	r2, r5
 80182be:	463e      	mov	r6, r7
 80182c0:	e7a3      	b.n	801820a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80182c2:	4638      	mov	r0, r7
 80182c4:	463a      	mov	r2, r7
 80182c6:	e7a0      	b.n	801820a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80182c8:	4638      	mov	r0, r7
 80182ca:	463a      	mov	r2, r7
 80182cc:	e7f7      	b.n	80182be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80182ce:	b00d      	add	sp, #52	; 0x34
 80182d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182d4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80182d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80182dc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80182e0:	2d00      	cmp	r5, #0
 80182e2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80182e6:	fb05 700c 	mla	r0, r5, ip, r7
 80182ea:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80182ee:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 80182f2:	eb02 0800 	add.w	r8, r2, r0
 80182f6:	f2c0 8118 	blt.w	801852a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80182fa:	45a9      	cmp	r9, r5
 80182fc:	f340 8115 	ble.w	801852a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8018300:	2f00      	cmp	r7, #0
 8018302:	f2c0 8110 	blt.w	8018526 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8018306:	45bc      	cmp	ip, r7
 8018308:	f340 810d 	ble.w	8018526 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801830c:	5c12      	ldrb	r2, [r2, r0]
 801830e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018312:	1c7a      	adds	r2, r7, #1
 8018314:	f100 810c 	bmi.w	8018530 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8018318:	4594      	cmp	ip, r2
 801831a:	f340 8109 	ble.w	8018530 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801831e:	2c00      	cmp	r4, #0
 8018320:	f000 8108 	beq.w	8018534 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8018324:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018328:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801832c:	3501      	adds	r5, #1
 801832e:	f100 8105 	bmi.w	801853c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8018332:	45a9      	cmp	r9, r5
 8018334:	f340 8102 	ble.w	801853c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8018338:	f1be 0f00 	cmp.w	lr, #0
 801833c:	f000 8101 	beq.w	8018542 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8018340:	2f00      	cmp	r7, #0
 8018342:	f2c0 80f9 	blt.w	8018538 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8018346:	45bc      	cmp	ip, r7
 8018348:	f340 80f6 	ble.w	8018538 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801834c:	f818 200c 	ldrb.w	r2, [r8, ip]
 8018350:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018354:	3701      	adds	r7, #1
 8018356:	f100 80f7 	bmi.w	8018548 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801835a:	45bc      	cmp	ip, r7
 801835c:	f340 80f4 	ble.w	8018548 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8018360:	2c00      	cmp	r4, #0
 8018362:	f000 80f3 	beq.w	801854c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8018366:	44c4      	add	ip, r8
 8018368:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801836c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018370:	fa1f fc84 	uxth.w	ip, r4
 8018374:	fa1f f48e 	uxth.w	r4, lr
 8018378:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801837c:	fb04 fe0c 	mul.w	lr, r4, ip
 8018380:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8018384:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8018388:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801838c:	ebac 070e 	sub.w	r7, ip, lr
 8018390:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8018394:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8018398:	b2a4      	uxth	r4, r4
 801839a:	b2bf      	uxth	r7, r7
 801839c:	1b1b      	subs	r3, r3, r4
 801839e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80183a2:	fb07 fc0a 	mul.w	ip, r7, sl
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	fb03 cc0b 	mla	ip, r3, fp, ip
 80183ac:	9300      	str	r3, [sp, #0]
 80183ae:	fb04 cc09 	mla	ip, r4, r9, ip
 80183b2:	fb0e cc08 	mla	ip, lr, r8, ip
 80183b6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80183ba:	9301      	str	r3, [sp, #4]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	f000 80af 	beq.w	8018520 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80183c2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80183c6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80183ca:	fb0b fc0c 	mul.w	ip, fp, ip
 80183ce:	fb0b f606 	mul.w	r6, fp, r6
 80183d2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80183d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80183da:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80183de:	44dc      	add	ip, fp
 80183e0:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80183e4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80183e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80183ec:	fb0a fb0b 	mul.w	fp, sl, fp
 80183f0:	fb0a fa00 	mul.w	sl, sl, r0
 80183f4:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80183f8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80183fc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018400:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8018404:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8018408:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801840c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018410:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018414:	0a36      	lsrs	r6, r6, #8
 8018416:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801841a:	44dc      	add	ip, fp
 801841c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8018420:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8018424:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018428:	fb09 fb0b 	mul.w	fp, r9, fp
 801842c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018430:	fb09 f905 	mul.w	r9, r9, r5
 8018434:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8018438:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801843c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8018440:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018444:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018448:	fb0c fc07 	mul.w	ip, ip, r7
 801844c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8018450:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8018454:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018458:	4458      	add	r0, fp
 801845a:	fb08 f505 	mul.w	r5, r8, r5
 801845e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018462:	fb08 f802 	mul.w	r8, r8, r2
 8018466:	0a00      	lsrs	r0, r0, #8
 8018468:	0a2a      	lsrs	r2, r5, #8
 801846a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801846e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018472:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018476:	4415      	add	r5, r2
 8018478:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801847c:	0a2d      	lsrs	r5, r5, #8
 801847e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018482:	9a00      	ldr	r2, [sp, #0]
 8018484:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018488:	fb03 cc02 	mla	ip, r3, r2, ip
 801848c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018490:	9b01      	ldr	r3, [sp, #4]
 8018492:	fb05 c50e 	mla	r5, r5, lr, ip
 8018496:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801849a:	fb00 5004 	mla	r0, r0, r4, r5
 801849e:	0a00      	lsrs	r0, r0, #8
 80184a0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80184a4:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80184a8:	4378      	muls	r0, r7
 80184aa:	fb02 0006 	mla	r0, r2, r6, r0
 80184ae:	fb0e 0e08 	mla	lr, lr, r8, r0
 80184b2:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80184b6:	fb04 e000 	mla	r0, r4, r0, lr
 80184ba:	0a00      	lsrs	r0, r0, #8
 80184bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80184c0:	4328      	orrs	r0, r5
 80184c2:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80184c6:	b2ad      	uxth	r5, r5
 80184c8:	b2c4      	uxtb	r4, r0
 80184ca:	436b      	muls	r3, r5
 80184cc:	fb14 f405 	smulbb	r4, r4, r5
 80184d0:	1c5a      	adds	r2, r3, #1
 80184d2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80184d6:	780b      	ldrb	r3, [r1, #0]
 80184d8:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80184dc:	b2d2      	uxtb	r2, r2
 80184de:	fb03 4302 	mla	r3, r3, r2, r4
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	1c5c      	adds	r4, r3, #1
 80184e6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80184ea:	784c      	ldrb	r4, [r1, #1]
 80184ec:	fb14 f402 	smulbb	r4, r4, r2
 80184f0:	121b      	asrs	r3, r3, #8
 80184f2:	700b      	strb	r3, [r1, #0]
 80184f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80184f8:	fb03 4305 	mla	r3, r3, r5, r4
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	1c5c      	adds	r4, r3, #1
 8018500:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8018504:	0c04      	lsrs	r4, r0, #16
 8018506:	7888      	ldrb	r0, [r1, #2]
 8018508:	121b      	asrs	r3, r3, #8
 801850a:	fb10 f002 	smulbb	r0, r0, r2
 801850e:	704b      	strb	r3, [r1, #1]
 8018510:	fb04 0005 	mla	r0, r4, r5, r0
 8018514:	b280      	uxth	r0, r0
 8018516:	1c43      	adds	r3, r0, #1
 8018518:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801851c:	1200      	asrs	r0, r0, #8
 801851e:	7088      	strb	r0, [r1, #2]
 8018520:	b003      	add	sp, #12
 8018522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018526:	2600      	movs	r6, #0
 8018528:	e6f3      	b.n	8018312 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801852a:	2000      	movs	r0, #0
 801852c:	4606      	mov	r6, r0
 801852e:	e6fd      	b.n	801832c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8018530:	2000      	movs	r0, #0
 8018532:	e6fb      	b.n	801832c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8018534:	4620      	mov	r0, r4
 8018536:	e6f9      	b.n	801832c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8018538:	2500      	movs	r5, #0
 801853a:	e70b      	b.n	8018354 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801853c:	2200      	movs	r2, #0
 801853e:	4615      	mov	r5, r2
 8018540:	e716      	b.n	8018370 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8018542:	4672      	mov	r2, lr
 8018544:	4675      	mov	r5, lr
 8018546:	e713      	b.n	8018370 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8018548:	2200      	movs	r2, #0
 801854a:	e711      	b.n	8018370 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801854c:	4622      	mov	r2, r4
 801854e:	e70f      	b.n	8018370 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08018550 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018554:	b09f      	sub	sp, #124	; 0x7c
 8018556:	921b      	str	r2, [sp, #108]	; 0x6c
 8018558:	9309      	str	r3, [sp, #36]	; 0x24
 801855a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801855c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8018560:	901d      	str	r0, [sp, #116]	; 0x74
 8018562:	931c      	str	r3, [sp, #112]	; 0x70
 8018564:	6850      	ldr	r0, [r2, #4]
 8018566:	9119      	str	r1, [sp, #100]	; 0x64
 8018568:	6812      	ldr	r2, [r2, #0]
 801856a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801856c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8018570:	fb00 1303 	mla	r3, r0, r3, r1
 8018574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018578:	18d3      	adds	r3, r2, r3
 801857a:	930c      	str	r3, [sp, #48]	; 0x30
 801857c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	9312      	str	r3, [sp, #72]	; 0x48
 8018582:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018584:	685e      	ldr	r6, [r3, #4]
 8018586:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801858a:	3604      	adds	r6, #4
 801858c:	930d      	str	r3, [sp, #52]	; 0x34
 801858e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018590:	2b00      	cmp	r3, #0
 8018592:	dc03      	bgt.n	801859c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018596:	2b00      	cmp	r3, #0
 8018598:	f340 8378 	ble.w	8018c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801859c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801859e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80185a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80185a6:	1e48      	subs	r0, r1, #1
 80185a8:	1e57      	subs	r7, r2, #1
 80185aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	f340 818c 	ble.w	80188ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80185b2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80185b4:	142b      	asrs	r3, r5, #16
 80185b6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80185ba:	d406      	bmi.n	80185ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80185bc:	4584      	cmp	ip, r0
 80185be:	da04      	bge.n	80185ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	db02      	blt.n	80185ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80185c4:	42bb      	cmp	r3, r7
 80185c6:	f2c0 8181 	blt.w	80188cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80185ca:	f11c 0c01 	adds.w	ip, ip, #1
 80185ce:	f100 816f 	bmi.w	80188b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80185d2:	4561      	cmp	r1, ip
 80185d4:	f2c0 816c 	blt.w	80188b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80185d8:	3301      	adds	r3, #1
 80185da:	f100 8169 	bmi.w	80188b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80185de:	429a      	cmp	r2, r3
 80185e0:	f2c0 8166 	blt.w	80188b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80185e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80185e8:	931a      	str	r3, [sp, #104]	; 0x68
 80185ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	f340 818c 	ble.w	801890a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80185f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80185f4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80185f8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80185fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018600:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018602:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8018606:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018608:	141b      	asrs	r3, r3, #16
 801860a:	f100 81d0 	bmi.w	80189ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801860e:	f100 38ff 	add.w	r8, r0, #4294967295
 8018612:	4543      	cmp	r3, r8
 8018614:	f280 81cb 	bge.w	80189ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8018618:	f1bc 0f00 	cmp.w	ip, #0
 801861c:	f2c0 81c7 	blt.w	80189ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8018620:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018624:	45c4      	cmp	ip, r8
 8018626:	f280 81c2 	bge.w	80189ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801862a:	b200      	sxth	r0, r0
 801862c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801862e:	fb0c 3300 	mla	r3, ip, r0, r3
 8018632:	eb04 0803 	add.w	r8, r4, r3
 8018636:	5ce3      	ldrb	r3, [r4, r3]
 8018638:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801863c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018640:	2a00      	cmp	r2, #0
 8018642:	f000 81a9 	beq.w	8018998 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8018646:	f898 c001 	ldrb.w	ip, [r8, #1]
 801864a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801864e:	940e      	str	r4, [sp, #56]	; 0x38
 8018650:	0e24      	lsrs	r4, r4, #24
 8018652:	9415      	str	r4, [sp, #84]	; 0x54
 8018654:	b179      	cbz	r1, 8018676 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018656:	eb08 0c00 	add.w	ip, r8, r0
 801865a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801865e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018662:	900a      	str	r0, [sp, #40]	; 0x28
 8018664:	0e00      	lsrs	r0, r0, #24
 8018666:	9013      	str	r0, [sp, #76]	; 0x4c
 8018668:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801866c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018670:	900f      	str	r0, [sp, #60]	; 0x3c
 8018672:	0e00      	lsrs	r0, r0, #24
 8018674:	9016      	str	r0, [sp, #88]	; 0x58
 8018676:	b292      	uxth	r2, r2
 8018678:	9815      	ldr	r0, [sp, #84]	; 0x54
 801867a:	b289      	uxth	r1, r1
 801867c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801867e:	fb02 f901 	mul.w	r9, r2, r1
 8018682:	0112      	lsls	r2, r2, #4
 8018684:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018688:	eba2 0809 	sub.w	r8, r2, r9
 801868c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018690:	b289      	uxth	r1, r1
 8018692:	fa1f f888 	uxth.w	r8, r8
 8018696:	1a52      	subs	r2, r2, r1
 8018698:	fb08 f000 	mul.w	r0, r8, r0
 801869c:	b292      	uxth	r2, r2
 801869e:	fb02 000e 	mla	r0, r2, lr, r0
 80186a2:	fb01 0004 	mla	r0, r1, r4, r0
 80186a6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80186a8:	fb09 0004 	mla	r0, r9, r4, r0
 80186ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80186b0:	2800      	cmp	r0, #0
 80186b2:	f000 80f2 	beq.w	801889a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80186b6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80186ba:	d01b      	beq.n	80186f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80186bc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80186c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80186c4:	fb0e fa0a 	mul.w	sl, lr, sl
 80186c8:	fb0e fe03 	mul.w	lr, lr, r3
 80186cc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80186d0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80186d4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80186d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80186dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80186e0:	4453      	add	r3, sl
 80186e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186e6:	0a1b      	lsrs	r3, r3, #8
 80186e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80186ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80186f0:	ea43 030c 	orr.w	r3, r3, ip
 80186f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80186f6:	2cff      	cmp	r4, #255	; 0xff
 80186f8:	d021      	beq.n	801873e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80186fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80186fc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018700:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018702:	fb04 fb0b 	mul.w	fp, r4, fp
 8018706:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018708:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801870c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801870e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018712:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018716:	fb04 fa0a 	mul.w	sl, r4, sl
 801871a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801871e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018722:	44de      	add	lr, fp
 8018724:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018728:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801872c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018730:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018734:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018738:	ea4e 040a 	orr.w	r4, lr, sl
 801873c:	940e      	str	r4, [sp, #56]	; 0x38
 801873e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018740:	2cff      	cmp	r4, #255	; 0xff
 8018742:	d021      	beq.n	8018788 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8018744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018746:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801874a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801874c:	fb04 fb0b 	mul.w	fp, r4, fp
 8018750:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018752:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018756:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018758:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801875c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018760:	fb04 fa0a 	mul.w	sl, r4, sl
 8018764:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018768:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801876c:	44de      	add	lr, fp
 801876e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018772:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018776:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801877a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801877e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018782:	ea4e 040a 	orr.w	r4, lr, sl
 8018786:	940a      	str	r4, [sp, #40]	; 0x28
 8018788:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801878a:	2cff      	cmp	r4, #255	; 0xff
 801878c:	d021      	beq.n	80187d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801878e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018790:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018794:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018796:	fb04 fb0b 	mul.w	fp, r4, fp
 801879a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801879c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80187a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80187a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80187a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80187aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80187ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80187b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80187b6:	44de      	add	lr, fp
 80187b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80187bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80187c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80187c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80187c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80187cc:	ea4e 040a 	orr.w	r4, lr, sl
 80187d0:	940f      	str	r4, [sp, #60]	; 0x3c
 80187d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80187d4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80187d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80187dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80187e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80187e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80187e6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80187ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80187ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80187f0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80187f4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80187f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80187fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80187fe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018802:	fb08 f80e 	mul.w	r8, r8, lr
 8018806:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801880a:	fb02 8303 	mla	r3, r2, r3, r8
 801880e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018810:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018814:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801881a:	fb01 330a 	mla	r3, r1, sl, r3
 801881e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8018822:	fb09 3901 	mla	r9, r9, r1, r3
 8018826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018828:	990d      	ldr	r1, [sp, #52]	; 0x34
 801882a:	4343      	muls	r3, r0
 801882c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018830:	1c58      	adds	r0, r3, #1
 8018832:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018836:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801883a:	ea4c 0c09 	orr.w	ip, ip, r9
 801883e:	783b      	ldrb	r3, [r7, #0]
 8018840:	fa5f f28c 	uxtb.w	r2, ip
 8018844:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8018848:	fb12 f201 	smulbb	r2, r2, r1
 801884c:	b2c0      	uxtb	r0, r0
 801884e:	fb03 2300 	mla	r3, r3, r0, r2
 8018852:	b29b      	uxth	r3, r3
 8018854:	1c5a      	adds	r2, r3, #1
 8018856:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801885a:	787a      	ldrb	r2, [r7, #1]
 801885c:	fb12 f200 	smulbb	r2, r2, r0
 8018860:	121b      	asrs	r3, r3, #8
 8018862:	703b      	strb	r3, [r7, #0]
 8018864:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018868:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801886c:	fb03 2301 	mla	r3, r3, r1, r2
 8018870:	b29b      	uxth	r3, r3
 8018872:	1c5a      	adds	r2, r3, #1
 8018874:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018878:	121b      	asrs	r3, r3, #8
 801887a:	707b      	strb	r3, [r7, #1]
 801887c:	78bb      	ldrb	r3, [r7, #2]
 801887e:	fb13 f000 	smulbb	r0, r3, r0
 8018882:	fb0c 0c01 	mla	ip, ip, r1, r0
 8018886:	fa1f fc8c 	uxth.w	ip, ip
 801888a:	f10c 0301 	add.w	r3, ip, #1
 801888e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8018892:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018896:	f887 c002 	strb.w	ip, [r7, #2]
 801889a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801889c:	3703      	adds	r7, #3
 801889e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80188a0:	441a      	add	r2, r3
 80188a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80188a4:	441d      	add	r5, r3
 80188a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80188a8:	9229      	str	r2, [sp, #164]	; 0xa4
 80188aa:	3b01      	subs	r3, #1
 80188ac:	931a      	str	r3, [sp, #104]	; 0x68
 80188ae:	e69c      	b.n	80185ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80188b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80188b2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80188b4:	441c      	add	r4, r3
 80188b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80188b8:	441d      	add	r5, r3
 80188ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188bc:	9429      	str	r4, [sp, #164]	; 0xa4
 80188be:	3b01      	subs	r3, #1
 80188c0:	9309      	str	r3, [sp, #36]	; 0x24
 80188c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188c4:	3303      	adds	r3, #3
 80188c6:	930c      	str	r3, [sp, #48]	; 0x30
 80188c8:	e66f      	b.n	80185aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80188ca:	d026      	beq.n	801891a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80188cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ce:	982b      	ldr	r0, [sp, #172]	; 0xac
 80188d0:	3b01      	subs	r3, #1
 80188d2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80188d4:	fb00 4003 	mla	r0, r0, r3, r4
 80188d8:	1400      	asrs	r0, r0, #16
 80188da:	f53f ae83 	bmi.w	80185e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80188de:	3901      	subs	r1, #1
 80188e0:	4288      	cmp	r0, r1
 80188e2:	f6bf ae7f 	bge.w	80185e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80188e6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80188e8:	fb01 5303 	mla	r3, r1, r3, r5
 80188ec:	141b      	asrs	r3, r3, #16
 80188ee:	f53f ae79 	bmi.w	80185e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80188f2:	3a01      	subs	r2, #1
 80188f4:	4293      	cmp	r3, r2
 80188f6:	f6bf ae75 	bge.w	80185e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80188fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188fc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8018900:	f103 0e03 	add.w	lr, r3, #3
 8018904:	f1bb 0f00 	cmp.w	fp, #0
 8018908:	dc71      	bgt.n	80189ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801890a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801890c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018912:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018916:	4423      	add	r3, r4
 8018918:	930c      	str	r3, [sp, #48]	; 0x30
 801891a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801891c:	2b00      	cmp	r3, #0
 801891e:	f340 81b5 	ble.w	8018c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8018922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018926:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018928:	ee30 0a04 	vadd.f32	s0, s0, s8
 801892c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018930:	eef0 6a62 	vmov.f32	s13, s5
 8018934:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018938:	ee31 1a05 	vadd.f32	s2, s2, s10
 801893c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018940:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8018944:	eef0 6a43 	vmov.f32	s13, s6
 8018948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801894c:	ee16 5a90 	vmov	r5, s13
 8018950:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018954:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018958:	ee77 2a62 	vsub.f32	s5, s14, s5
 801895c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018960:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018964:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018968:	ee12 2a90 	vmov	r2, s5
 801896c:	eef0 2a47 	vmov.f32	s5, s14
 8018970:	fb92 f3f3 	sdiv	r3, r2, r3
 8018974:	ee13 2a10 	vmov	r2, s6
 8018978:	932b      	str	r3, [sp, #172]	; 0xac
 801897a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801897c:	eeb0 3a67 	vmov.f32	s6, s15
 8018980:	fb92 f3f3 	sdiv	r3, r2, r3
 8018984:	932c      	str	r3, [sp, #176]	; 0xb0
 8018986:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018988:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801898a:	3b01      	subs	r3, #1
 801898c:	9319      	str	r3, [sp, #100]	; 0x64
 801898e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018990:	bf08      	it	eq
 8018992:	4613      	moveq	r3, r2
 8018994:	9309      	str	r3, [sp, #36]	; 0x24
 8018996:	e5fa      	b.n	801858e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018998:	2900      	cmp	r1, #0
 801899a:	f43f ae6c 	beq.w	8018676 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801899e:	f818 0000 	ldrb.w	r0, [r8, r0]
 80189a2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80189a6:	900a      	str	r0, [sp, #40]	; 0x28
 80189a8:	0e00      	lsrs	r0, r0, #24
 80189aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80189ac:	e663      	b.n	8018676 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80189ae:	f113 0801 	adds.w	r8, r3, #1
 80189b2:	f53f af72 	bmi.w	801889a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80189b6:	4540      	cmp	r0, r8
 80189b8:	f6ff af6f 	blt.w	801889a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80189bc:	f11c 0801 	adds.w	r8, ip, #1
 80189c0:	f53f af6b 	bmi.w	801889a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80189c4:	45c6      	cmp	lr, r8
 80189c6:	f6ff af68 	blt.w	801889a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80189ca:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80189cc:	b200      	sxth	r0, r0
 80189ce:	9302      	str	r3, [sp, #8]
 80189d0:	fa0f f38e 	sxth.w	r3, lr
 80189d4:	9000      	str	r0, [sp, #0]
 80189d6:	9301      	str	r3, [sp, #4]
 80189d8:	4633      	mov	r3, r6
 80189da:	981d      	ldr	r0, [sp, #116]	; 0x74
 80189dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80189e0:	e9cd c203 	strd	ip, r2, [sp, #12]
 80189e4:	4639      	mov	r1, r7
 80189e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80189e8:	f7ff fc74 	bl	80182d4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80189ec:	e755      	b.n	801889a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80189ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80189f0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80189f4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80189f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80189fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80189fc:	1427      	asrs	r7, r4, #16
 80189fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018a00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018a04:	142b      	asrs	r3, r5, #16
 8018a06:	fb01 7303 	mla	r3, r1, r3, r7
 8018a0a:	18e7      	adds	r7, r4, r3
 8018a0c:	5ce3      	ldrb	r3, [r4, r3]
 8018a0e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018a12:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018a16:	2a00      	cmp	r2, #0
 8018a18:	f000 812e 	beq.w	8018c78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8018a1c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018a20:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018a24:	9410      	str	r4, [sp, #64]	; 0x40
 8018a26:	0e24      	lsrs	r4, r4, #24
 8018a28:	9417      	str	r4, [sp, #92]	; 0x5c
 8018a2a:	b170      	cbz	r0, 8018a4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8018a2c:	eb07 0801 	add.w	r8, r7, r1
 8018a30:	5c79      	ldrb	r1, [r7, r1]
 8018a32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018a36:	910b      	str	r1, [sp, #44]	; 0x2c
 8018a38:	0e09      	lsrs	r1, r1, #24
 8018a3a:	9114      	str	r1, [sp, #80]	; 0x50
 8018a3c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018a40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018a44:	9111      	str	r1, [sp, #68]	; 0x44
 8018a46:	0e09      	lsrs	r1, r1, #24
 8018a48:	9118      	str	r1, [sp, #96]	; 0x60
 8018a4a:	b292      	uxth	r2, r2
 8018a4c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018a4e:	b280      	uxth	r0, r0
 8018a50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018a52:	fb02 f900 	mul.w	r9, r2, r0
 8018a56:	0112      	lsls	r2, r2, #4
 8018a58:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018a5c:	eba2 0809 	sub.w	r8, r2, r9
 8018a60:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018a64:	b280      	uxth	r0, r0
 8018a66:	fa1f f888 	uxth.w	r8, r8
 8018a6a:	1a12      	subs	r2, r2, r0
 8018a6c:	fb08 f101 	mul.w	r1, r8, r1
 8018a70:	b292      	uxth	r2, r2
 8018a72:	fb02 110c 	mla	r1, r2, ip, r1
 8018a76:	fb00 1104 	mla	r1, r0, r4, r1
 8018a7a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018a7c:	fb09 1104 	mla	r1, r9, r4, r1
 8018a80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018a84:	2900      	cmp	r1, #0
 8018a86:	f000 80ec 	beq.w	8018c62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8018a8a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018a8e:	d019      	beq.n	8018ac4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8018a90:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018a94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018a98:	fb0c fa0a 	mul.w	sl, ip, sl
 8018a9c:	fb0c fc03 	mul.w	ip, ip, r3
 8018aa0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018aa4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018aa8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018aac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018ab0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018ab4:	4453      	add	r3, sl
 8018ab6:	0a3f      	lsrs	r7, r7, #8
 8018ab8:	0a1b      	lsrs	r3, r3, #8
 8018aba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018abe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018ac2:	433b      	orrs	r3, r7
 8018ac4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018ac6:	2cff      	cmp	r4, #255	; 0xff
 8018ac8:	d020      	beq.n	8018b0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8018aca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018acc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018ad0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018ad2:	4367      	muls	r7, r4
 8018ad4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018ad6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018ada:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018ade:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018ae0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018ae4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018ae8:	fb04 fa0a 	mul.w	sl, r4, sl
 8018aec:	44bc      	add	ip, r7
 8018aee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018af2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018af6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018afa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018afe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018b02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018b06:	ea4c 040a 	orr.w	r4, ip, sl
 8018b0a:	9410      	str	r4, [sp, #64]	; 0x40
 8018b0c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018b0e:	2cff      	cmp	r4, #255	; 0xff
 8018b10:	d020      	beq.n	8018b54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8018b12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018b14:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018b18:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018b1a:	4367      	muls	r7, r4
 8018b1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018b1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018b22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018b26:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018b28:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018b2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018b30:	fb04 fa0a 	mul.w	sl, r4, sl
 8018b34:	44bc      	add	ip, r7
 8018b36:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018b3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018b3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018b42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018b46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018b4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018b4e:	ea4c 040a 	orr.w	r4, ip, sl
 8018b52:	940b      	str	r4, [sp, #44]	; 0x2c
 8018b54:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018b56:	2cff      	cmp	r4, #255	; 0xff
 8018b58:	d020      	beq.n	8018b9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8018b5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018b5c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018b60:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018b62:	4367      	muls	r7, r4
 8018b64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018b66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018b6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018b6e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018b70:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018b74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018b78:	fb04 fa0a 	mul.w	sl, r4, sl
 8018b7c:	44bc      	add	ip, r7
 8018b7e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018b82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018b86:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018b8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018b8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018b92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018b96:	ea4c 040a 	orr.w	r4, ip, sl
 8018b9a:	9411      	str	r4, [sp, #68]	; 0x44
 8018b9c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018b9e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018ba2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ba6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018baa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018bac:	fb08 f707 	mul.w	r7, r8, r7
 8018bb0:	fb02 770c 	mla	r7, r2, ip, r7
 8018bb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018bb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018bba:	fb00 770c 	mla	r7, r0, ip, r7
 8018bbe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018bc2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018bc4:	fb09 770c 	mla	r7, r9, ip, r7
 8018bc8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8018bcc:	fb08 f80c 	mul.w	r8, r8, ip
 8018bd0:	0a3f      	lsrs	r7, r7, #8
 8018bd2:	fb02 8303 	mla	r3, r2, r3, r8
 8018bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018bd8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018bdc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018be0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018be2:	fb00 330a 	mla	r3, r0, sl, r3
 8018be6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018bea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018bec:	fb09 3c0c 	mla	ip, r9, ip, r3
 8018bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018bf6:	434b      	muls	r3, r1
 8018bf8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018bfc:	1c59      	adds	r1, r3, #1
 8018bfe:	ea47 070c 	orr.w	r7, r7, ip
 8018c02:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018c06:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018c0a:	b2fa      	uxtb	r2, r7
 8018c0c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8018c10:	fb12 f200 	smulbb	r2, r2, r0
 8018c14:	b2c9      	uxtb	r1, r1
 8018c16:	fb03 2301 	mla	r3, r3, r1, r2
 8018c1a:	b29b      	uxth	r3, r3
 8018c1c:	1c5a      	adds	r2, r3, #1
 8018c1e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018c22:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018c26:	fb12 f201 	smulbb	r2, r2, r1
 8018c2a:	121b      	asrs	r3, r3, #8
 8018c2c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8018c30:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8018c34:	0c3f      	lsrs	r7, r7, #16
 8018c36:	fb03 2300 	mla	r3, r3, r0, r2
 8018c3a:	b29b      	uxth	r3, r3
 8018c3c:	1c5a      	adds	r2, r3, #1
 8018c3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018c42:	121b      	asrs	r3, r3, #8
 8018c44:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018c48:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018c4c:	fb13 f101 	smulbb	r1, r3, r1
 8018c50:	fb07 1700 	mla	r7, r7, r0, r1
 8018c54:	b2bf      	uxth	r7, r7
 8018c56:	1c7b      	adds	r3, r7, #1
 8018c58:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018c5c:	123f      	asrs	r7, r7, #8
 8018c5e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8018c62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018c64:	f10e 0e03 	add.w	lr, lr, #3
 8018c68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018c6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018c6e:	441a      	add	r2, r3
 8018c70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018c72:	9229      	str	r2, [sp, #164]	; 0xa4
 8018c74:	441d      	add	r5, r3
 8018c76:	e645      	b.n	8018904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	f43f aee6 	beq.w	8018a4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8018c7e:	5c79      	ldrb	r1, [r7, r1]
 8018c80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018c84:	910b      	str	r1, [sp, #44]	; 0x2c
 8018c86:	0e09      	lsrs	r1, r1, #24
 8018c88:	9114      	str	r1, [sp, #80]	; 0x50
 8018c8a:	e6de      	b.n	8018a4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8018c8c:	b01f      	add	sp, #124	; 0x7c
 8018c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c92 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8018c92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c96:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8018c9a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8018c9e:	2d00      	cmp	r5, #0
 8018ca0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8018ca4:	fb05 700e 	mla	r0, r5, lr, r7
 8018ca8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8018cac:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8018cb0:	eb02 0800 	add.w	r8, r2, r0
 8018cb4:	f2c0 8105 	blt.w	8018ec2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8018cb8:	45a9      	cmp	r9, r5
 8018cba:	f340 8102 	ble.w	8018ec2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8018cbe:	2f00      	cmp	r7, #0
 8018cc0:	f2c0 80fd 	blt.w	8018ebe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8018cc4:	45be      	cmp	lr, r7
 8018cc6:	f340 80fa 	ble.w	8018ebe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8018cca:	5c12      	ldrb	r2, [r2, r0]
 8018ccc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018cd0:	1c7a      	adds	r2, r7, #1
 8018cd2:	f100 80f9 	bmi.w	8018ec8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8018cd6:	4596      	cmp	lr, r2
 8018cd8:	f340 80f6 	ble.w	8018ec8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8018cdc:	2c00      	cmp	r4, #0
 8018cde:	f000 80f5 	beq.w	8018ecc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8018ce2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018ce6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018cea:	3501      	adds	r5, #1
 8018cec:	f100 80f2 	bmi.w	8018ed4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8018cf0:	45a9      	cmp	r9, r5
 8018cf2:	f340 80ef 	ble.w	8018ed4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8018cf6:	f1bc 0f00 	cmp.w	ip, #0
 8018cfa:	f000 80ee 	beq.w	8018eda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8018cfe:	2f00      	cmp	r7, #0
 8018d00:	f2c0 80e6 	blt.w	8018ed0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8018d04:	45be      	cmp	lr, r7
 8018d06:	f340 80e3 	ble.w	8018ed0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8018d0a:	f818 200e 	ldrb.w	r2, [r8, lr]
 8018d0e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018d12:	3701      	adds	r7, #1
 8018d14:	f100 80e4 	bmi.w	8018ee0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8018d18:	45be      	cmp	lr, r7
 8018d1a:	f340 80e1 	ble.w	8018ee0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8018d1e:	2c00      	cmp	r4, #0
 8018d20:	f000 80e0 	beq.w	8018ee4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8018d24:	44c6      	add	lr, r8
 8018d26:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8018d2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018d2e:	b2a3      	uxth	r3, r4
 8018d30:	fa1f fc8c 	uxth.w	ip, ip
 8018d34:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8018d38:	fb0c fe03 	mul.w	lr, ip, r3
 8018d3c:	011b      	lsls	r3, r3, #4
 8018d3e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8018d42:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8018d46:	eba3 070e 	sub.w	r7, r3, lr
 8018d4a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018d4e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8018d52:	fa1f f48c 	uxth.w	r4, ip
 8018d56:	b2bf      	uxth	r7, r7
 8018d58:	1b1b      	subs	r3, r3, r4
 8018d5a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8018d5e:	fb07 fc0a 	mul.w	ip, r7, sl
 8018d62:	b29b      	uxth	r3, r3
 8018d64:	fb03 cc0b 	mla	ip, r3, fp, ip
 8018d68:	9300      	str	r3, [sp, #0]
 8018d6a:	fb04 cc09 	mla	ip, r4, r9, ip
 8018d6e:	fb0e cc08 	mla	ip, lr, r8, ip
 8018d72:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018d76:	9301      	str	r3, [sp, #4]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 809d 	beq.w	8018eb8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8018d7e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8018d82:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018d86:	fb0b fc0c 	mul.w	ip, fp, ip
 8018d8a:	fb0b f606 	mul.w	r6, fp, r6
 8018d8e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8018d92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018d96:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8018d9a:	44dc      	add	ip, fp
 8018d9c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8018da0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018da4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018da8:	fb0a fb0b 	mul.w	fp, sl, fp
 8018dac:	fb0a fa00 	mul.w	sl, sl, r0
 8018db0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8018db4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8018db8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018dbc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8018dc0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8018dc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018dc8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018dcc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018dd0:	0a36      	lsrs	r6, r6, #8
 8018dd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018dd6:	44dc      	add	ip, fp
 8018dd8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8018ddc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8018de0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018de4:	fb09 fb0b 	mul.w	fp, r9, fp
 8018de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018dec:	fb09 f905 	mul.w	r9, r9, r5
 8018df0:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8018df4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018df8:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8018dfc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018e00:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018e04:	fb0c fc07 	mul.w	ip, ip, r7
 8018e08:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8018e0c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8018e10:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018e14:	4458      	add	r0, fp
 8018e16:	fb08 f505 	mul.w	r5, r8, r5
 8018e1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018e1e:	fb08 f802 	mul.w	r8, r8, r2
 8018e22:	0a00      	lsrs	r0, r0, #8
 8018e24:	0a2a      	lsrs	r2, r5, #8
 8018e26:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8018e2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018e2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018e32:	4415      	add	r5, r2
 8018e34:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8018e38:	0a2d      	lsrs	r5, r5, #8
 8018e3a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018e3e:	9a00      	ldr	r2, [sp, #0]
 8018e40:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018e44:	fb03 cc02 	mla	ip, r3, r2, ip
 8018e48:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018e4c:	9b01      	ldr	r3, [sp, #4]
 8018e4e:	fb05 c50e 	mla	r5, r5, lr, ip
 8018e52:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018e56:	43db      	mvns	r3, r3
 8018e58:	fb00 5004 	mla	r0, r0, r4, r5
 8018e5c:	b2db      	uxtb	r3, r3
 8018e5e:	0a00      	lsrs	r0, r0, #8
 8018e60:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8018e64:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8018e68:	4378      	muls	r0, r7
 8018e6a:	fb02 0006 	mla	r0, r2, r6, r0
 8018e6e:	780a      	ldrb	r2, [r1, #0]
 8018e70:	fb0e 0e08 	mla	lr, lr, r8, r0
 8018e74:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8018e78:	fb04 e000 	mla	r0, r4, r0, lr
 8018e7c:	fb02 f403 	mul.w	r4, r2, r3
 8018e80:	0a00      	lsrs	r0, r0, #8
 8018e82:	1c62      	adds	r2, r4, #1
 8018e84:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018e88:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018e8c:	4328      	orrs	r0, r5
 8018e8e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018e92:	700a      	strb	r2, [r1, #0]
 8018e94:	784a      	ldrb	r2, [r1, #1]
 8018e96:	435a      	muls	r2, r3
 8018e98:	1c54      	adds	r4, r2, #1
 8018e9a:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8018e9e:	0a02      	lsrs	r2, r0, #8
 8018ea0:	0c00      	lsrs	r0, r0, #16
 8018ea2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018ea6:	704a      	strb	r2, [r1, #1]
 8018ea8:	788a      	ldrb	r2, [r1, #2]
 8018eaa:	4353      	muls	r3, r2
 8018eac:	1c5a      	adds	r2, r3, #1
 8018eae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018eb2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018eb6:	7088      	strb	r0, [r1, #2]
 8018eb8:	b003      	add	sp, #12
 8018eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ebe:	2600      	movs	r6, #0
 8018ec0:	e706      	b.n	8018cd0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8018ec2:	2000      	movs	r0, #0
 8018ec4:	4606      	mov	r6, r0
 8018ec6:	e710      	b.n	8018cea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018ec8:	2000      	movs	r0, #0
 8018eca:	e70e      	b.n	8018cea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018ecc:	4620      	mov	r0, r4
 8018ece:	e70c      	b.n	8018cea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018ed0:	2500      	movs	r5, #0
 8018ed2:	e71e      	b.n	8018d12 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	4615      	mov	r5, r2
 8018ed8:	e729      	b.n	8018d2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018eda:	4662      	mov	r2, ip
 8018edc:	4665      	mov	r5, ip
 8018ede:	e726      	b.n	8018d2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	e724      	b.n	8018d2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018ee4:	4622      	mov	r2, r4
 8018ee6:	e722      	b.n	8018d2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08018ee8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eec:	b09b      	sub	sp, #108	; 0x6c
 8018eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018ef2:	9218      	str	r2, [sp, #96]	; 0x60
 8018ef4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018ef6:	9019      	str	r0, [sp, #100]	; 0x64
 8018ef8:	9116      	str	r1, [sp, #88]	; 0x58
 8018efa:	6850      	ldr	r0, [r2, #4]
 8018efc:	9307      	str	r3, [sp, #28]
 8018efe:	6812      	ldr	r2, [r2, #0]
 8018f00:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8018f02:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8018f06:	fb00 1303 	mla	r3, r0, r3, r1
 8018f0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f0e:	18d3      	adds	r3, r2, r3
 8018f10:	930a      	str	r3, [sp, #40]	; 0x28
 8018f12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8018f18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f1a:	685e      	ldr	r6, [r3, #4]
 8018f1c:	3604      	adds	r6, #4
 8018f1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	dc03      	bgt.n	8018f2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018f24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	f340 834f 	ble.w	80195ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8018f2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f2e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018f32:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018f36:	1e48      	subs	r0, r1, #1
 8018f38:	1e57      	subs	r7, r2, #1
 8018f3a:	9b07      	ldr	r3, [sp, #28]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	f340 8178 	ble.w	8019232 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018f42:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8018f44:	142b      	asrs	r3, r5, #16
 8018f46:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018f4a:	d406      	bmi.n	8018f5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018f4c:	4584      	cmp	ip, r0
 8018f4e:	da04      	bge.n	8018f5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	db02      	blt.n	8018f5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018f54:	42bb      	cmp	r3, r7
 8018f56:	f2c0 816d 	blt.w	8019234 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018f5a:	f11c 0c01 	adds.w	ip, ip, #1
 8018f5e:	f100 815b 	bmi.w	8019218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f62:	4561      	cmp	r1, ip
 8018f64:	f2c0 8158 	blt.w	8019218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f68:	3301      	adds	r3, #1
 8018f6a:	f100 8155 	bmi.w	8019218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	f2c0 8152 	blt.w	8019218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f74:	9b07      	ldr	r3, [sp, #28]
 8018f76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018f78:	9317      	str	r3, [sp, #92]	; 0x5c
 8018f7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	f340 8178 	ble.w	8019272 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018f82:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018f84:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018f88:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018f8c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018f90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f92:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018f96:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018f98:	141b      	asrs	r3, r3, #16
 8018f9a:	f100 81ba 	bmi.w	8019312 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018f9e:	f101 38ff 	add.w	r8, r1, #4294967295
 8018fa2:	4543      	cmp	r3, r8
 8018fa4:	f280 81b5 	bge.w	8019312 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018fa8:	f1bc 0f00 	cmp.w	ip, #0
 8018fac:	f2c0 81b1 	blt.w	8019312 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018fb0:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018fb4:	45c4      	cmp	ip, r8
 8018fb6:	f280 81ac 	bge.w	8019312 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018fba:	b209      	sxth	r1, r1
 8018fbc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018fbe:	fb0c 3301 	mla	r3, ip, r1, r3
 8018fc2:	eb04 0803 	add.w	r8, r4, r3
 8018fc6:	5ce3      	ldrb	r3, [r4, r3]
 8018fc8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018fcc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018fd0:	2a00      	cmp	r2, #0
 8018fd2:	f000 8193 	beq.w	80192fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8018fd6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018fda:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8018fde:	940b      	str	r4, [sp, #44]	; 0x2c
 8018fe0:	0e24      	lsrs	r4, r4, #24
 8018fe2:	9412      	str	r4, [sp, #72]	; 0x48
 8018fe4:	b178      	cbz	r0, 8019006 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018fe6:	eb08 0c01 	add.w	ip, r8, r1
 8018fea:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018fee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018ff2:	9108      	str	r1, [sp, #32]
 8018ff4:	0e09      	lsrs	r1, r1, #24
 8018ff6:	9110      	str	r1, [sp, #64]	; 0x40
 8018ff8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018ffc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019000:	910c      	str	r1, [sp, #48]	; 0x30
 8019002:	0e09      	lsrs	r1, r1, #24
 8019004:	9113      	str	r1, [sp, #76]	; 0x4c
 8019006:	b292      	uxth	r2, r2
 8019008:	9912      	ldr	r1, [sp, #72]	; 0x48
 801900a:	b280      	uxth	r0, r0
 801900c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801900e:	fb02 f900 	mul.w	r9, r2, r0
 8019012:	0112      	lsls	r2, r2, #4
 8019014:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019018:	eba2 0809 	sub.w	r8, r2, r9
 801901c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019020:	b280      	uxth	r0, r0
 8019022:	fa1f f888 	uxth.w	r8, r8
 8019026:	1a12      	subs	r2, r2, r0
 8019028:	fb08 f101 	mul.w	r1, r8, r1
 801902c:	b292      	uxth	r2, r2
 801902e:	fb02 110e 	mla	r1, r2, lr, r1
 8019032:	fb00 1104 	mla	r1, r0, r4, r1
 8019036:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019038:	fb09 1104 	mla	r1, r9, r4, r1
 801903c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019040:	2900      	cmp	r1, #0
 8019042:	f000 80de 	beq.w	8019202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019046:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801904a:	d01b      	beq.n	8019084 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801904c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019050:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019054:	fb0e fa0a 	mul.w	sl, lr, sl
 8019058:	fb0e fe03 	mul.w	lr, lr, r3
 801905c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019060:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019064:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019068:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801906c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019070:	4453      	add	r3, sl
 8019072:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019076:	0a1b      	lsrs	r3, r3, #8
 8019078:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801907c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019080:	ea43 030c 	orr.w	r3, r3, ip
 8019084:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019086:	2cff      	cmp	r4, #255	; 0xff
 8019088:	d021      	beq.n	80190ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801908a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801908c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019090:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019092:	fb04 fb0b 	mul.w	fp, r4, fp
 8019096:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019098:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801909c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801909e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80190a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80190a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80190aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80190ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80190b2:	44de      	add	lr, fp
 80190b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80190b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80190bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80190c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80190c8:	ea4e 040a 	orr.w	r4, lr, sl
 80190cc:	940b      	str	r4, [sp, #44]	; 0x2c
 80190ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80190d0:	2cff      	cmp	r4, #255	; 0xff
 80190d2:	d021      	beq.n	8019118 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80190d4:	9c08      	ldr	r4, [sp, #32]
 80190d6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80190da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80190dc:	fb04 fb0b 	mul.w	fp, r4, fp
 80190e0:	9c08      	ldr	r4, [sp, #32]
 80190e2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80190e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80190e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80190ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80190f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80190f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80190f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80190fc:	44de      	add	lr, fp
 80190fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019102:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019106:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801910a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801910e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019112:	ea4e 040a 	orr.w	r4, lr, sl
 8019116:	9408      	str	r4, [sp, #32]
 8019118:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801911a:	2cff      	cmp	r4, #255	; 0xff
 801911c:	d021      	beq.n	8019162 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801911e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019120:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019124:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019126:	fb04 fb0b 	mul.w	fp, r4, fp
 801912a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801912c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019130:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019132:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019136:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801913a:	fb04 fa0a 	mul.w	sl, r4, sl
 801913e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019142:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019146:	44de      	add	lr, fp
 8019148:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801914c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019150:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019154:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019158:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801915c:	ea4e 040a 	orr.w	r4, lr, sl
 8019160:	940c      	str	r4, [sp, #48]	; 0x30
 8019162:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019164:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019168:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801916c:	43c9      	mvns	r1, r1
 801916e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019172:	9c08      	ldr	r4, [sp, #32]
 8019174:	b2c9      	uxtb	r1, r1
 8019176:	fb08 fc0c 	mul.w	ip, r8, ip
 801917a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801917e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019182:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019184:	fb00 cc0e 	mla	ip, r0, lr, ip
 8019188:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801918c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801918e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019192:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019196:	fb08 f80e 	mul.w	r8, r8, lr
 801919a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801919e:	fb02 8303 	mla	r3, r2, r3, r8
 80191a2:	9a08      	ldr	r2, [sp, #32]
 80191a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80191a8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80191ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191ae:	fb00 330a 	mla	r3, r0, sl, r3
 80191b2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80191b6:	fb09 3900 	mla	r9, r9, r0, r3
 80191ba:	783b      	ldrb	r3, [r7, #0]
 80191bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80191c0:	fb03 f201 	mul.w	r2, r3, r1
 80191c4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80191c8:	1c53      	adds	r3, r2, #1
 80191ca:	ea4c 0c09 	orr.w	ip, ip, r9
 80191ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80191d2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80191d6:	703b      	strb	r3, [r7, #0]
 80191d8:	787b      	ldrb	r3, [r7, #1]
 80191da:	434b      	muls	r3, r1
 80191dc:	1c5a      	adds	r2, r3, #1
 80191de:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80191e2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80191e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80191ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80191ee:	707b      	strb	r3, [r7, #1]
 80191f0:	78bb      	ldrb	r3, [r7, #2]
 80191f2:	4359      	muls	r1, r3
 80191f4:	1c4b      	adds	r3, r1, #1
 80191f6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80191fa:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80191fe:	f887 c002 	strb.w	ip, [r7, #2]
 8019202:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019204:	3703      	adds	r7, #3
 8019206:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8019208:	441a      	add	r2, r3
 801920a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801920c:	441d      	add	r5, r3
 801920e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019210:	9225      	str	r2, [sp, #148]	; 0x94
 8019212:	3b01      	subs	r3, #1
 8019214:	9317      	str	r3, [sp, #92]	; 0x5c
 8019216:	e6b0      	b.n	8018f7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019218:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801921a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801921c:	441c      	add	r4, r3
 801921e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019220:	441d      	add	r5, r3
 8019222:	9b07      	ldr	r3, [sp, #28]
 8019224:	9425      	str	r4, [sp, #148]	; 0x94
 8019226:	3b01      	subs	r3, #1
 8019228:	9307      	str	r3, [sp, #28]
 801922a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801922c:	3303      	adds	r3, #3
 801922e:	930a      	str	r3, [sp, #40]	; 0x28
 8019230:	e683      	b.n	8018f3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019232:	d026      	beq.n	8019282 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8019234:	9b07      	ldr	r3, [sp, #28]
 8019236:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019238:	3b01      	subs	r3, #1
 801923a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801923c:	fb00 4003 	mla	r0, r0, r3, r4
 8019240:	1400      	asrs	r0, r0, #16
 8019242:	f53f ae97 	bmi.w	8018f74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019246:	3901      	subs	r1, #1
 8019248:	4288      	cmp	r0, r1
 801924a:	f6bf ae93 	bge.w	8018f74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801924e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019250:	fb01 5303 	mla	r3, r1, r3, r5
 8019254:	141b      	asrs	r3, r3, #16
 8019256:	f53f ae8d 	bmi.w	8018f74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801925a:	3a01      	subs	r2, #1
 801925c:	4293      	cmp	r3, r2
 801925e:	f6bf ae89 	bge.w	8018f74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019264:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019268:	f103 0e03 	add.w	lr, r3, #3
 801926c:	f1bb 0f00 	cmp.w	fp, #0
 8019270:	dc6d      	bgt.n	801934e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8019272:	9b07      	ldr	r3, [sp, #28]
 8019274:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801927a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801927e:	4423      	add	r3, r4
 8019280:	930a      	str	r3, [sp, #40]	; 0x28
 8019282:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019284:	2b00      	cmp	r3, #0
 8019286:	f340 81a0 	ble.w	80195ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801928a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801928e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019290:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019294:	eeb0 6a62 	vmov.f32	s12, s5
 8019298:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801929c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80192a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192a4:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80192a8:	eeb0 6a43 	vmov.f32	s12, s6
 80192ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192b0:	ee16 5a10 	vmov	r5, s12
 80192b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80192b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80192bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80192c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80192c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80192c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80192cc:	ee12 2a90 	vmov	r2, s5
 80192d0:	eef0 2a47 	vmov.f32	s5, s14
 80192d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80192d8:	ee13 2a10 	vmov	r2, s6
 80192dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80192de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80192e0:	eeb0 3a67 	vmov.f32	s6, s15
 80192e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80192e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80192ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80192ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80192ee:	3b01      	subs	r3, #1
 80192f0:	9316      	str	r3, [sp, #88]	; 0x58
 80192f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80192f4:	bf08      	it	eq
 80192f6:	4613      	moveq	r3, r2
 80192f8:	9307      	str	r3, [sp, #28]
 80192fa:	e610      	b.n	8018f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80192fc:	2800      	cmp	r0, #0
 80192fe:	f43f ae82 	beq.w	8019006 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019302:	f818 1001 	ldrb.w	r1, [r8, r1]
 8019306:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801930a:	9108      	str	r1, [sp, #32]
 801930c:	0e09      	lsrs	r1, r1, #24
 801930e:	9110      	str	r1, [sp, #64]	; 0x40
 8019310:	e679      	b.n	8019006 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019312:	f113 0801 	adds.w	r8, r3, #1
 8019316:	f53f af74 	bmi.w	8019202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801931a:	4541      	cmp	r1, r8
 801931c:	f6ff af71 	blt.w	8019202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019320:	f11c 0801 	adds.w	r8, ip, #1
 8019324:	f53f af6d 	bmi.w	8019202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019328:	45c6      	cmp	lr, r8
 801932a:	f6ff af6a 	blt.w	8019202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801932e:	b209      	sxth	r1, r1
 8019330:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8019334:	fa0f f38e 	sxth.w	r3, lr
 8019338:	9100      	str	r1, [sp, #0]
 801933a:	4639      	mov	r1, r7
 801933c:	9301      	str	r3, [sp, #4]
 801933e:	4633      	mov	r3, r6
 8019340:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8019344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019346:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019348:	f7ff fca3 	bl	8018c92 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801934c:	e759      	b.n	8019202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801934e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019350:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8019354:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8019356:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801935a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801935c:	1427      	asrs	r7, r4, #16
 801935e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019360:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019364:	142b      	asrs	r3, r5, #16
 8019366:	fb01 7303 	mla	r3, r1, r3, r7
 801936a:	18e7      	adds	r7, r4, r3
 801936c:	5ce3      	ldrb	r3, [r4, r3]
 801936e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019372:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019376:	2a00      	cmp	r2, #0
 8019378:	f000 811d 	beq.w	80195b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801937c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019380:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8019384:	940d      	str	r4, [sp, #52]	; 0x34
 8019386:	0e24      	lsrs	r4, r4, #24
 8019388:	9414      	str	r4, [sp, #80]	; 0x50
 801938a:	b170      	cbz	r0, 80193aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801938c:	eb07 0801 	add.w	r8, r7, r1
 8019390:	5c79      	ldrb	r1, [r7, r1]
 8019392:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019396:	9109      	str	r1, [sp, #36]	; 0x24
 8019398:	0e09      	lsrs	r1, r1, #24
 801939a:	9111      	str	r1, [sp, #68]	; 0x44
 801939c:	f898 1001 	ldrb.w	r1, [r8, #1]
 80193a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80193a4:	910e      	str	r1, [sp, #56]	; 0x38
 80193a6:	0e09      	lsrs	r1, r1, #24
 80193a8:	9115      	str	r1, [sp, #84]	; 0x54
 80193aa:	b292      	uxth	r2, r2
 80193ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80193ae:	b280      	uxth	r0, r0
 80193b0:	fb02 f900 	mul.w	r9, r2, r0
 80193b4:	0112      	lsls	r2, r2, #4
 80193b6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80193ba:	eba2 0809 	sub.w	r8, r2, r9
 80193be:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80193c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80193c4:	b280      	uxth	r0, r0
 80193c6:	fa1f f888 	uxth.w	r8, r8
 80193ca:	1a09      	subs	r1, r1, r0
 80193cc:	fb08 f202 	mul.w	r2, r8, r2
 80193d0:	b289      	uxth	r1, r1
 80193d2:	fb01 220c 	mla	r2, r1, ip, r2
 80193d6:	fb00 2204 	mla	r2, r0, r4, r2
 80193da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80193dc:	fb09 2204 	mla	r2, r9, r4, r2
 80193e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80193e4:	2a00      	cmp	r2, #0
 80193e6:	f000 80db 	beq.w	80195a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80193ea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80193ee:	d019      	beq.n	8019424 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80193f0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80193f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80193f8:	fb0c fa0a 	mul.w	sl, ip, sl
 80193fc:	fb0c fc03 	mul.w	ip, ip, r3
 8019400:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019404:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019408:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801940c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019410:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019414:	4453      	add	r3, sl
 8019416:	0a3f      	lsrs	r7, r7, #8
 8019418:	0a1b      	lsrs	r3, r3, #8
 801941a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801941e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019422:	433b      	orrs	r3, r7
 8019424:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019426:	2cff      	cmp	r4, #255	; 0xff
 8019428:	d020      	beq.n	801946c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801942a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801942c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019430:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019432:	4367      	muls	r7, r4
 8019434:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019436:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801943a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801943e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019440:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019444:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019448:	fb04 fa0a 	mul.w	sl, r4, sl
 801944c:	44bc      	add	ip, r7
 801944e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019452:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019456:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801945a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801945e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019462:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019466:	ea4c 040a 	orr.w	r4, ip, sl
 801946a:	940d      	str	r4, [sp, #52]	; 0x34
 801946c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801946e:	2cff      	cmp	r4, #255	; 0xff
 8019470:	d020      	beq.n	80194b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8019472:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019474:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019478:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801947a:	4367      	muls	r7, r4
 801947c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801947e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019482:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019486:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019488:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801948c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019490:	fb04 fa0a 	mul.w	sl, r4, sl
 8019494:	44bc      	add	ip, r7
 8019496:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801949a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801949e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80194a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80194a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80194aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80194ae:	ea4c 040a 	orr.w	r4, ip, sl
 80194b2:	9409      	str	r4, [sp, #36]	; 0x24
 80194b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80194b6:	2cff      	cmp	r4, #255	; 0xff
 80194b8:	d020      	beq.n	80194fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80194ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80194bc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80194c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80194c2:	4367      	muls	r7, r4
 80194c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80194c6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80194ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80194ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80194d0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80194d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80194d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80194dc:	44bc      	add	ip, r7
 80194de:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80194e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80194e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80194ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80194ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80194f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80194f6:	ea4c 040a 	orr.w	r4, ip, sl
 80194fa:	940e      	str	r4, [sp, #56]	; 0x38
 80194fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80194fe:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019506:	43d2      	mvns	r2, r2
 8019508:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801950c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801950e:	b2d2      	uxtb	r2, r2
 8019510:	fb08 f707 	mul.w	r7, r8, r7
 8019514:	fb01 770c 	mla	r7, r1, ip, r7
 8019518:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801951c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801951e:	fb00 770c 	mla	r7, r0, ip, r7
 8019522:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019526:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019528:	fb09 770c 	mla	r7, r9, ip, r7
 801952c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019530:	fb08 f80c 	mul.w	r8, r8, ip
 8019534:	0a3f      	lsrs	r7, r7, #8
 8019536:	fb01 8303 	mla	r3, r1, r3, r8
 801953a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801953c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019540:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8019544:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019546:	fb00 330a 	mla	r3, r0, sl, r3
 801954a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801954e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8019552:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019556:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801955a:	fb03 f102 	mul.w	r1, r3, r2
 801955e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019562:	1c4b      	adds	r3, r1, #1
 8019564:	ea47 070c 	orr.w	r7, r7, ip
 8019568:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801956c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8019570:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019574:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8019578:	4353      	muls	r3, r2
 801957a:	1c59      	adds	r1, r3, #1
 801957c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019580:	0a3b      	lsrs	r3, r7, #8
 8019582:	0c3f      	lsrs	r7, r7, #16
 8019584:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019588:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801958c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019590:	435a      	muls	r2, r3
 8019592:	1c53      	adds	r3, r2, #1
 8019594:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019598:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801959c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80195a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80195a2:	f10e 0e03 	add.w	lr, lr, #3
 80195a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80195a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80195ac:	441a      	add	r2, r3
 80195ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80195b0:	9225      	str	r2, [sp, #148]	; 0x94
 80195b2:	441d      	add	r5, r3
 80195b4:	e65a      	b.n	801926c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80195b6:	2800      	cmp	r0, #0
 80195b8:	f43f aef7 	beq.w	80193aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80195bc:	5c79      	ldrb	r1, [r7, r1]
 80195be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80195c2:	9109      	str	r1, [sp, #36]	; 0x24
 80195c4:	0e09      	lsrs	r1, r1, #24
 80195c6:	9111      	str	r1, [sp, #68]	; 0x44
 80195c8:	e6ef      	b.n	80193aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80195ca:	b01b      	add	sp, #108	; 0x6c
 80195cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080195d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80195d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195d4:	b08d      	sub	sp, #52	; 0x34
 80195d6:	468b      	mov	fp, r1
 80195d8:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 80195dc:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80195e0:	fb0c 5703 	mla	r7, ip, r3, r5
 80195e4:	f1bc 0f00 	cmp.w	ip, #0
 80195e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80195ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80195ee:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80195f2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80195f6:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 80195fa:	eb02 0607 	add.w	r6, r2, r7
 80195fe:	f89b 4000 	ldrb.w	r4, [fp]
 8019602:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8019606:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801960a:	f2c0 80c1 	blt.w	8019790 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801960e:	45e6      	cmp	lr, ip
 8019610:	f340 80be 	ble.w	8019790 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8019614:	2d00      	cmp	r5, #0
 8019616:	f2c0 80b7 	blt.w	8019788 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801961a:	42ab      	cmp	r3, r5
 801961c:	f340 80b4 	ble.w	8019788 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8019620:	5dd2      	ldrb	r2, [r2, r7]
 8019622:	9205      	str	r2, [sp, #20]
 8019624:	7872      	ldrb	r2, [r6, #1]
 8019626:	9206      	str	r2, [sp, #24]
 8019628:	78b2      	ldrb	r2, [r6, #2]
 801962a:	9207      	str	r2, [sp, #28]
 801962c:	1c6a      	adds	r2, r5, #1
 801962e:	f100 80b6 	bmi.w	801979e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8019632:	4293      	cmp	r3, r2
 8019634:	f340 80b3 	ble.w	801979e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8019638:	f1b8 0f00 	cmp.w	r8, #0
 801963c:	f000 80af 	beq.w	801979e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8019640:	78f2      	ldrb	r2, [r6, #3]
 8019642:	9201      	str	r2, [sp, #4]
 8019644:	7932      	ldrb	r2, [r6, #4]
 8019646:	9202      	str	r2, [sp, #8]
 8019648:	7972      	ldrb	r2, [r6, #5]
 801964a:	9203      	str	r2, [sp, #12]
 801964c:	f11c 0c01 	adds.w	ip, ip, #1
 8019650:	f100 80ad 	bmi.w	80197ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8019654:	45e6      	cmp	lr, ip
 8019656:	f340 80aa 	ble.w	80197ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801965a:	f1ba 0f00 	cmp.w	sl, #0
 801965e:	f000 80a6 	beq.w	80197ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8019662:	2d00      	cmp	r5, #0
 8019664:	f2c0 809f 	blt.w	80197a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8019668:	42ab      	cmp	r3, r5
 801966a:	f340 809c 	ble.w	80197a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801966e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019672:	f816 9002 	ldrb.w	r9, [r6, r2]
 8019676:	2203      	movs	r2, #3
 8019678:	fb03 6c02 	mla	ip, r3, r2, r6
 801967c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8019680:	f89c e002 	ldrb.w	lr, [ip, #2]
 8019684:	9704      	str	r7, [sp, #16]
 8019686:	3501      	adds	r5, #1
 8019688:	f100 8098 	bmi.w	80197bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801968c:	42ab      	cmp	r3, r5
 801968e:	f340 8095 	ble.w	80197bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8019692:	f1b8 0f00 	cmp.w	r8, #0
 8019696:	f000 8091 	beq.w	80197bc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801969a:	f04f 0c03 	mov.w	ip, #3
 801969e:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80196a2:	5cb5      	ldrb	r5, [r6, r2]
 80196a4:	fb03 620c 	mla	r2, r3, ip, r6
 80196a8:	fb03 630c 	mla	r3, r3, ip, r6
 80196ac:	7912      	ldrb	r2, [r2, #4]
 80196ae:	795e      	ldrb	r6, [r3, #5]
 80196b0:	fa1f f388 	uxth.w	r3, r8
 80196b4:	fa1f fc8a 	uxth.w	ip, sl
 80196b8:	fb03 f70c 	mul.w	r7, r3, ip
 80196bc:	011b      	lsls	r3, r3, #4
 80196be:	9708      	str	r7, [sp, #32]
 80196c0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80196c4:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 80196c8:	1bdb      	subs	r3, r3, r7
 80196ca:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80196ce:	fa1f fc8c 	uxth.w	ip, ip
 80196d2:	b29b      	uxth	r3, r3
 80196d4:	9709      	str	r7, [sp, #36]	; 0x24
 80196d6:	ebaa 0a0c 	sub.w	sl, sl, ip
 80196da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80196dc:	930a      	str	r3, [sp, #40]	; 0x28
 80196de:	fa1f fa8a 	uxth.w	sl, sl
 80196e2:	ea6f 0807 	mvn.w	r8, r7
 80196e6:	9f01      	ldr	r7, [sp, #4]
 80196e8:	435f      	muls	r7, r3
 80196ea:	9b05      	ldr	r3, [sp, #20]
 80196ec:	fa5f f888 	uxtb.w	r8, r8
 80196f0:	fb0a 7703 	mla	r7, sl, r3, r7
 80196f4:	9b08      	ldr	r3, [sp, #32]
 80196f6:	fb14 f408 	smulbb	r4, r4, r8
 80196fa:	fb0c 7709 	mla	r7, ip, r9, r7
 80196fe:	fb10 f008 	smulbb	r0, r0, r8
 8019702:	fb11 f108 	smulbb	r1, r1, r8
 8019706:	fb03 7705 	mla	r7, r3, r5, r7
 801970a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801970c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8019710:	fb07 4703 	mla	r7, r7, r3, r4
 8019714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019716:	b2bf      	uxth	r7, r7
 8019718:	1c7c      	adds	r4, r7, #1
 801971a:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801971e:	1224      	asrs	r4, r4, #8
 8019720:	f88b 4000 	strb.w	r4, [fp]
 8019724:	9c02      	ldr	r4, [sp, #8]
 8019726:	435c      	muls	r4, r3
 8019728:	9b06      	ldr	r3, [sp, #24]
 801972a:	fb0a 4403 	mla	r4, sl, r3, r4
 801972e:	9b04      	ldr	r3, [sp, #16]
 8019730:	fb0c 4403 	mla	r4, ip, r3, r4
 8019734:	9b08      	ldr	r3, [sp, #32]
 8019736:	fb03 4402 	mla	r4, r3, r2, r4
 801973a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801973c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801973e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019742:	fb04 0403 	mla	r4, r4, r3, r0
 8019746:	9b03      	ldr	r3, [sp, #12]
 8019748:	435a      	muls	r2, r3
 801974a:	b2a4      	uxth	r4, r4
 801974c:	4613      	mov	r3, r2
 801974e:	9a07      	ldr	r2, [sp, #28]
 8019750:	1c60      	adds	r0, r4, #1
 8019752:	fb0a 3a02 	mla	sl, sl, r2, r3
 8019756:	9b08      	ldr	r3, [sp, #32]
 8019758:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801975c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8019760:	1224      	asrs	r4, r4, #8
 8019762:	fb03 c606 	mla	r6, r3, r6, ip
 8019766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019768:	f88b 4001 	strb.w	r4, [fp, #1]
 801976c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019770:	fb06 1103 	mla	r1, r6, r3, r1
 8019774:	b289      	uxth	r1, r1
 8019776:	1c4e      	adds	r6, r1, #1
 8019778:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801977c:	1209      	asrs	r1, r1, #8
 801977e:	f88b 1002 	strb.w	r1, [fp, #2]
 8019782:	b00d      	add	sp, #52	; 0x34
 8019784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019788:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801978c:	9405      	str	r4, [sp, #20]
 801978e:	e74d      	b.n	801962c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8019790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019794:	9401      	str	r4, [sp, #4]
 8019796:	9405      	str	r4, [sp, #20]
 8019798:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801979c:	e756      	b.n	801964c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801979e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80197a2:	9401      	str	r4, [sp, #4]
 80197a4:	e752      	b.n	801964c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80197a6:	468e      	mov	lr, r1
 80197a8:	9004      	str	r0, [sp, #16]
 80197aa:	46a1      	mov	r9, r4
 80197ac:	e76b      	b.n	8019686 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80197ae:	460e      	mov	r6, r1
 80197b0:	4602      	mov	r2, r0
 80197b2:	4625      	mov	r5, r4
 80197b4:	468e      	mov	lr, r1
 80197b6:	9004      	str	r0, [sp, #16]
 80197b8:	46a1      	mov	r9, r4
 80197ba:	e779      	b.n	80196b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80197bc:	460e      	mov	r6, r1
 80197be:	4602      	mov	r2, r0
 80197c0:	4625      	mov	r5, r4
 80197c2:	e775      	b.n	80196b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080197c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80197c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c8:	b09f      	sub	sp, #124	; 0x7c
 80197ca:	920e      	str	r2, [sp, #56]	; 0x38
 80197cc:	9307      	str	r3, [sp, #28]
 80197ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80197d0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80197d4:	901d      	str	r0, [sp, #116]	; 0x74
 80197d6:	930c      	str	r3, [sp, #48]	; 0x30
 80197d8:	6850      	ldr	r0, [r2, #4]
 80197da:	910b      	str	r1, [sp, #44]	; 0x2c
 80197dc:	6812      	ldr	r2, [r2, #0]
 80197de:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80197e2:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 80197e6:	fb00 1303 	mla	r3, r0, r3, r1
 80197ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197ee:	18d3      	adds	r3, r2, r3
 80197f0:	9308      	str	r3, [sp, #32]
 80197f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	930a      	str	r3, [sp, #40]	; 0x28
 80197f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197fa:	43db      	mvns	r3, r3
 80197fc:	b2db      	uxtb	r3, r3
 80197fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019802:	2b00      	cmp	r3, #0
 8019804:	dc03      	bgt.n	801980e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019808:	2b00      	cmp	r3, #0
 801980a:	f340 81f5 	ble.w	8019bf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801980e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019810:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019814:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019818:	1e48      	subs	r0, r1, #1
 801981a:	1e54      	subs	r4, r2, #1
 801981c:	9b07      	ldr	r3, [sp, #28]
 801981e:	2b00      	cmp	r3, #0
 8019820:	f340 80d5 	ble.w	80199ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8019824:	ea5f 452a 	movs.w	r5, sl, asr #16
 8019828:	ea4f 4328 	mov.w	r3, r8, asr #16
 801982c:	d406      	bmi.n	801983c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801982e:	4285      	cmp	r5, r0
 8019830:	da04      	bge.n	801983c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019832:	2b00      	cmp	r3, #0
 8019834:	db02      	blt.n	801983c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019836:	42a3      	cmp	r3, r4
 8019838:	f2c0 80ca 	blt.w	80199d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801983c:	3501      	adds	r5, #1
 801983e:	f100 80bb 	bmi.w	80199b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8019842:	42a9      	cmp	r1, r5
 8019844:	f2c0 80b8 	blt.w	80199b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8019848:	3301      	adds	r3, #1
 801984a:	f100 80b5 	bmi.w	80199b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801984e:	429a      	cmp	r2, r3
 8019850:	f2c0 80b2 	blt.w	80199b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8019854:	9b07      	ldr	r3, [sp, #28]
 8019856:	9d08      	ldr	r5, [sp, #32]
 8019858:	930d      	str	r3, [sp, #52]	; 0x34
 801985a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801985c:	2b00      	cmp	r3, #0
 801985e:	f340 80d6 	ble.w	8019a0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8019862:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8019864:	ea4f 4428 	mov.w	r4, r8, asr #16
 8019868:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801986a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801986e:	68c6      	ldr	r6, [r0, #12]
 8019870:	ea5f 402a 	movs.w	r0, sl, asr #16
 8019874:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8019878:	689b      	ldr	r3, [r3, #8]
 801987a:	f100 810f 	bmi.w	8019a9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801987e:	1e5f      	subs	r7, r3, #1
 8019880:	42b8      	cmp	r0, r7
 8019882:	f280 810b 	bge.w	8019a9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8019886:	2c00      	cmp	r4, #0
 8019888:	f2c0 8108 	blt.w	8019a9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801988c:	1e77      	subs	r7, r6, #1
 801988e:	42bc      	cmp	r4, r7
 8019890:	f280 8104 	bge.w	8019a9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8019894:	b21b      	sxth	r3, r3
 8019896:	fb04 0003 	mla	r0, r4, r3, r0
 801989a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801989c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80198a0:	1826      	adds	r6, r4, r0
 80198a2:	5c24      	ldrb	r4, [r4, r0]
 80198a4:	78b7      	ldrb	r7, [r6, #2]
 80198a6:	7870      	ldrb	r0, [r6, #1]
 80198a8:	970f      	str	r7, [sp, #60]	; 0x3c
 80198aa:	7977      	ldrb	r7, [r6, #5]
 80198ac:	f896 e003 	ldrb.w	lr, [r6, #3]
 80198b0:	f896 c004 	ldrb.w	ip, [r6, #4]
 80198b4:	9710      	str	r7, [sp, #64]	; 0x40
 80198b6:	b1c9      	cbz	r1, 80198ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80198b8:	f04f 0b03 	mov.w	fp, #3
 80198bc:	f06f 0904 	mvn.w	r9, #4
 80198c0:	3605      	adds	r6, #5
 80198c2:	fb13 930b 	smlabb	r3, r3, fp, r9
 80198c6:	eb06 0b03 	add.w	fp, r6, r3
 80198ca:	5cf3      	ldrb	r3, [r6, r3]
 80198cc:	9311      	str	r3, [sp, #68]	; 0x44
 80198ce:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80198d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80198d4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80198d8:	9315      	str	r3, [sp, #84]	; 0x54
 80198da:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80198de:	9312      	str	r3, [sp, #72]	; 0x48
 80198e0:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80198e4:	9314      	str	r3, [sp, #80]	; 0x50
 80198e6:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80198ea:	9316      	str	r3, [sp, #88]	; 0x58
 80198ec:	b292      	uxth	r2, r2
 80198ee:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80198f0:	b289      	uxth	r1, r1
 80198f2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80198f6:	fb02 f601 	mul.w	r6, r2, r1
 80198fa:	0112      	lsls	r2, r2, #4
 80198fc:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8019900:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8019904:	1b92      	subs	r2, r2, r6
 8019906:	b289      	uxth	r1, r1
 8019908:	b292      	uxth	r2, r2
 801990a:	eba9 0901 	sub.w	r9, r9, r1
 801990e:	fb02 fe0e 	mul.w	lr, r2, lr
 8019912:	fa1f f989 	uxth.w	r9, r9
 8019916:	fb02 fc0c 	mul.w	ip, r2, ip
 801991a:	fb09 e404 	mla	r4, r9, r4, lr
 801991e:	f895 e000 	ldrb.w	lr, [r5]
 8019922:	fb09 c000 	mla	r0, r9, r0, ip
 8019926:	fb01 4407 	mla	r4, r1, r7, r4
 801992a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801992c:	fb06 4407 	mla	r4, r6, r7, r4
 8019930:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019932:	fb1e fe07 	smulbb	lr, lr, r7
 8019936:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801993a:	fb04 e403 	mla	r4, r4, r3, lr
 801993e:	b2a4      	uxth	r4, r4
 8019940:	f104 0e01 	add.w	lr, r4, #1
 8019944:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8019948:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801994a:	fb01 0004 	mla	r0, r1, r4, r0
 801994e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019950:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019954:	fb06 0004 	mla	r0, r6, r4, r0
 8019958:	786c      	ldrb	r4, [r5, #1]
 801995a:	f885 e000 	strb.w	lr, [r5]
 801995e:	fb14 f407 	smulbb	r4, r4, r7
 8019962:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019966:	fb00 4003 	mla	r0, r0, r3, r4
 801996a:	b280      	uxth	r0, r0
 801996c:	1c44      	adds	r4, r0, #1
 801996e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8019972:	1200      	asrs	r0, r0, #8
 8019974:	7068      	strb	r0, [r5, #1]
 8019976:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019978:	4342      	muls	r2, r0
 801997a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801997c:	fb09 2200 	mla	r2, r9, r0, r2
 8019980:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019982:	fb01 2100 	mla	r1, r1, r0, r2
 8019986:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019988:	fb06 1602 	mla	r6, r6, r2, r1
 801998c:	78a9      	ldrb	r1, [r5, #2]
 801998e:	fb11 f107 	smulbb	r1, r1, r7
 8019992:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019996:	fb06 1303 	mla	r3, r6, r3, r1
 801999a:	b29b      	uxth	r3, r3
 801999c:	1c5e      	adds	r6, r3, #1
 801999e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80199a2:	121b      	asrs	r3, r3, #8
 80199a4:	70ab      	strb	r3, [r5, #2]
 80199a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80199a8:	3503      	adds	r5, #3
 80199aa:	449a      	add	sl, r3
 80199ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80199ae:	4498      	add	r8, r3
 80199b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199b2:	3b01      	subs	r3, #1
 80199b4:	930d      	str	r3, [sp, #52]	; 0x34
 80199b6:	e750      	b.n	801985a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80199b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80199ba:	449a      	add	sl, r3
 80199bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80199be:	4498      	add	r8, r3
 80199c0:	9b07      	ldr	r3, [sp, #28]
 80199c2:	3b01      	subs	r3, #1
 80199c4:	9307      	str	r3, [sp, #28]
 80199c6:	9b08      	ldr	r3, [sp, #32]
 80199c8:	3303      	adds	r3, #3
 80199ca:	9308      	str	r3, [sp, #32]
 80199cc:	e726      	b.n	801981c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80199ce:	d026      	beq.n	8019a1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80199d0:	9b07      	ldr	r3, [sp, #28]
 80199d2:	982b      	ldr	r0, [sp, #172]	; 0xac
 80199d4:	3b01      	subs	r3, #1
 80199d6:	fb00 a003 	mla	r0, r0, r3, sl
 80199da:	1400      	asrs	r0, r0, #16
 80199dc:	f53f af3a 	bmi.w	8019854 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80199e0:	3901      	subs	r1, #1
 80199e2:	4288      	cmp	r0, r1
 80199e4:	f6bf af36 	bge.w	8019854 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80199e8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80199ea:	fb01 8303 	mla	r3, r1, r3, r8
 80199ee:	141b      	asrs	r3, r3, #16
 80199f0:	f53f af30 	bmi.w	8019854 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80199f4:	3a01      	subs	r2, #1
 80199f6:	4293      	cmp	r3, r2
 80199f8:	f6bf af2c 	bge.w	8019854 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80199fc:	9b08      	ldr	r3, [sp, #32]
 80199fe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019a02:	1cdd      	adds	r5, r3, #3
 8019a04:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8019a08:	f1bc 0f00 	cmp.w	ip, #0
 8019a0c:	dc5f      	bgt.n	8019ace <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8019a0e:	9b07      	ldr	r3, [sp, #28]
 8019a10:	9a08      	ldr	r2, [sp, #32]
 8019a12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a1a:	441a      	add	r2, r3
 8019a1c:	9208      	str	r2, [sp, #32]
 8019a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	f340 80e9 	ble.w	8019bf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8019a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019a30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019a34:	eef0 6a62 	vmov.f32	s13, s5
 8019a38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019a3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a44:	ee16 aa90 	vmov	sl, s13
 8019a48:	eef0 6a43 	vmov.f32	s13, s6
 8019a4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a50:	ee16 8a90 	vmov	r8, s13
 8019a54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a58:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a6c:	ee12 2a90 	vmov	r2, s5
 8019a70:	eef0 2a47 	vmov.f32	s5, s14
 8019a74:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a78:	ee13 2a10 	vmov	r2, s6
 8019a7c:	932b      	str	r3, [sp, #172]	; 0xac
 8019a7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a80:	eeb0 3a67 	vmov.f32	s6, s15
 8019a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a88:	932c      	str	r3, [sp, #176]	; 0xb0
 8019a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019a8e:	3b01      	subs	r3, #1
 8019a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a94:	bf08      	it	eq
 8019a96:	4613      	moveq	r3, r2
 8019a98:	9307      	str	r3, [sp, #28]
 8019a9a:	e6b1      	b.n	8019800 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019a9c:	1c47      	adds	r7, r0, #1
 8019a9e:	d482      	bmi.n	80199a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019aa0:	42bb      	cmp	r3, r7
 8019aa2:	db80      	blt.n	80199a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019aa4:	1c67      	adds	r7, r4, #1
 8019aa6:	f53f af7e 	bmi.w	80199a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019aaa:	42be      	cmp	r6, r7
 8019aac:	f6ff af7b 	blt.w	80199a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019ab0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019ab2:	b236      	sxth	r6, r6
 8019ab4:	9001      	str	r0, [sp, #4]
 8019ab6:	b21b      	sxth	r3, r3
 8019ab8:	9600      	str	r6, [sp, #0]
 8019aba:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019abc:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8019ac0:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8019ac4:	4629      	mov	r1, r5
 8019ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ac8:	f7ff fd82 	bl	80195d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8019acc:	e76b      	b.n	80199a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019ace:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8019ad0:	ea4f 402a 	mov.w	r0, sl, asr #16
 8019ad4:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8019ad8:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8019adc:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8019ae0:	ea4f 4128 	mov.w	r1, r8, asr #16
 8019ae4:	fb07 0101 	mla	r1, r7, r1, r0
 8019ae8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019aea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019aee:	1844      	adds	r4, r0, r1
 8019af0:	5c40      	ldrb	r0, [r0, r1]
 8019af2:	78a6      	ldrb	r6, [r4, #2]
 8019af4:	7861      	ldrb	r1, [r4, #1]
 8019af6:	960f      	str	r6, [sp, #60]	; 0x3c
 8019af8:	78e6      	ldrb	r6, [r4, #3]
 8019afa:	910d      	str	r1, [sp, #52]	; 0x34
 8019afc:	9610      	str	r6, [sp, #64]	; 0x40
 8019afe:	f894 9004 	ldrb.w	r9, [r4, #4]
 8019b02:	f894 b005 	ldrb.w	fp, [r4, #5]
 8019b06:	b192      	cbz	r2, 8019b2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8019b08:	f06f 0604 	mvn.w	r6, #4
 8019b0c:	2103      	movs	r1, #3
 8019b0e:	3405      	adds	r4, #5
 8019b10:	fb17 6701 	smlabb	r7, r7, r1, r6
 8019b14:	19e6      	adds	r6, r4, r7
 8019b16:	5de4      	ldrb	r4, [r4, r7]
 8019b18:	9417      	str	r4, [sp, #92]	; 0x5c
 8019b1a:	7874      	ldrb	r4, [r6, #1]
 8019b1c:	9419      	str	r4, [sp, #100]	; 0x64
 8019b1e:	78b4      	ldrb	r4, [r6, #2]
 8019b20:	941b      	str	r4, [sp, #108]	; 0x6c
 8019b22:	78f4      	ldrb	r4, [r6, #3]
 8019b24:	9418      	str	r4, [sp, #96]	; 0x60
 8019b26:	7934      	ldrb	r4, [r6, #4]
 8019b28:	941a      	str	r4, [sp, #104]	; 0x68
 8019b2a:	7974      	ldrb	r4, [r6, #5]
 8019b2c:	941c      	str	r4, [sp, #112]	; 0x70
 8019b2e:	b29b      	uxth	r3, r3
 8019b30:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019b32:	b292      	uxth	r2, r2
 8019b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b36:	3503      	adds	r5, #3
 8019b38:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019b3c:	fb03 f402 	mul.w	r4, r3, r2
 8019b40:	011b      	lsls	r3, r3, #4
 8019b42:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8019b46:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8019b4a:	1b1b      	subs	r3, r3, r4
 8019b4c:	b292      	uxth	r2, r2
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	1ab6      	subs	r6, r6, r2
 8019b52:	435f      	muls	r7, r3
 8019b54:	b2b6      	uxth	r6, r6
 8019b56:	fb03 f909 	mul.w	r9, r3, r9
 8019b5a:	fb03 fb0b 	mul.w	fp, r3, fp
 8019b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b60:	fb06 7000 	mla	r0, r6, r0, r7
 8019b64:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019b66:	fb06 bb03 	mla	fp, r6, r3, fp
 8019b6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019b6c:	fb02 0007 	mla	r0, r2, r7, r0
 8019b70:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8019b72:	fb02 bb03 	mla	fp, r2, r3, fp
 8019b76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019b78:	fb04 0007 	mla	r0, r4, r7, r0
 8019b7c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8019b80:	fb17 f701 	smulbb	r7, r7, r1
 8019b84:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019b88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019b8a:	fb00 700e 	mla	r0, r0, lr, r7
 8019b8e:	fb06 9101 	mla	r1, r6, r1, r9
 8019b92:	b280      	uxth	r0, r0
 8019b94:	1c47      	adds	r7, r0, #1
 8019b96:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8019b9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019b9c:	1200      	asrs	r0, r0, #8
 8019b9e:	f805 0c06 	strb.w	r0, [r5, #-6]
 8019ba2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019ba4:	fb02 1100 	mla	r1, r2, r0, r1
 8019ba8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8019baa:	fb04 1100 	mla	r1, r4, r0, r1
 8019bae:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8019bb2:	fb04 b403 	mla	r4, r4, r3, fp
 8019bb6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8019bba:	fb10 f007 	smulbb	r0, r0, r7
 8019bbe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019bc2:	fb13 f307 	smulbb	r3, r3, r7
 8019bc6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019bca:	fb01 010e 	mla	r1, r1, lr, r0
 8019bce:	fb04 340e 	mla	r4, r4, lr, r3
 8019bd2:	b289      	uxth	r1, r1
 8019bd4:	b2a4      	uxth	r4, r4
 8019bd6:	1c48      	adds	r0, r1, #1
 8019bd8:	1c63      	adds	r3, r4, #1
 8019bda:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8019bde:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8019be2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019be4:	1209      	asrs	r1, r1, #8
 8019be6:	1224      	asrs	r4, r4, #8
 8019be8:	449a      	add	sl, r3
 8019bea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019bec:	f805 1c05 	strb.w	r1, [r5, #-5]
 8019bf0:	f805 4c04 	strb.w	r4, [r5, #-4]
 8019bf4:	4498      	add	r8, r3
 8019bf6:	e707      	b.n	8019a08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019bf8:	b01f      	add	sp, #124	; 0x7c
 8019bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019bfe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8019bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c02:	b087      	sub	sp, #28
 8019c04:	780d      	ldrb	r5, [r1, #0]
 8019c06:	784c      	ldrb	r4, [r1, #1]
 8019c08:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8019c0c:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8019c10:	9004      	str	r0, [sp, #16]
 8019c12:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8019c16:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8019c1a:	9005      	str	r0, [sp, #20]
 8019c1c:	fb06 bc03 	mla	ip, r6, r3, fp
 8019c20:	2e00      	cmp	r6, #0
 8019c22:	7888      	ldrb	r0, [r1, #2]
 8019c24:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019c28:	eb02 090c 	add.w	r9, r2, ip
 8019c2c:	f2c0 8084 	blt.w	8019d38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8019c30:	42b7      	cmp	r7, r6
 8019c32:	f340 8081 	ble.w	8019d38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8019c36:	f1bb 0f00 	cmp.w	fp, #0
 8019c3a:	db79      	blt.n	8019d30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8019c3c:	455b      	cmp	r3, fp
 8019c3e:	dd77      	ble.n	8019d30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8019c40:	f812 200c 	ldrb.w	r2, [r2, ip]
 8019c44:	9201      	str	r2, [sp, #4]
 8019c46:	f899 2001 	ldrb.w	r2, [r9, #1]
 8019c4a:	9202      	str	r2, [sp, #8]
 8019c4c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8019c50:	9203      	str	r2, [sp, #12]
 8019c52:	f11b 0201 	adds.w	r2, fp, #1
 8019c56:	d476      	bmi.n	8019d46 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019c58:	4293      	cmp	r3, r2
 8019c5a:	dd74      	ble.n	8019d46 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019c5c:	9a04      	ldr	r2, [sp, #16]
 8019c5e:	2a00      	cmp	r2, #0
 8019c60:	d071      	beq.n	8019d46 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019c62:	f899 8003 	ldrb.w	r8, [r9, #3]
 8019c66:	f899 c004 	ldrb.w	ip, [r9, #4]
 8019c6a:	f899 a005 	ldrb.w	sl, [r9, #5]
 8019c6e:	3601      	adds	r6, #1
 8019c70:	d471      	bmi.n	8019d56 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019c72:	42b7      	cmp	r7, r6
 8019c74:	dd6f      	ble.n	8019d56 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019c76:	9a05      	ldr	r2, [sp, #20]
 8019c78:	2a00      	cmp	r2, #0
 8019c7a:	d06c      	beq.n	8019d56 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019c7c:	f1bb 0f00 	cmp.w	fp, #0
 8019c80:	db65      	blt.n	8019d4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8019c82:	455b      	cmp	r3, fp
 8019c84:	dd63      	ble.n	8019d4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8019c86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019c8a:	f819 e002 	ldrb.w	lr, [r9, r2]
 8019c8e:	2203      	movs	r2, #3
 8019c90:	fb03 9602 	mla	r6, r3, r2, r9
 8019c94:	7877      	ldrb	r7, [r6, #1]
 8019c96:	78b6      	ldrb	r6, [r6, #2]
 8019c98:	f11b 0b01 	adds.w	fp, fp, #1
 8019c9c:	d40c      	bmi.n	8019cb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019c9e:	455b      	cmp	r3, fp
 8019ca0:	dd0a      	ble.n	8019cb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019ca2:	9a04      	ldr	r2, [sp, #16]
 8019ca4:	b142      	cbz	r2, 8019cb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019ca6:	2203      	movs	r2, #3
 8019ca8:	fb13 2002 	smlabb	r0, r3, r2, r2
 8019cac:	f819 5000 	ldrb.w	r5, [r9, r0]
 8019cb0:	fb03 9002 	mla	r0, r3, r2, r9
 8019cb4:	7904      	ldrb	r4, [r0, #4]
 8019cb6:	7940      	ldrb	r0, [r0, #5]
 8019cb8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019cbc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019cc0:	fb03 fb02 	mul.w	fp, r3, r2
 8019cc4:	011b      	lsls	r3, r3, #4
 8019cc6:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8019cca:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8019cce:	eba3 030b 	sub.w	r3, r3, fp
 8019cd2:	b292      	uxth	r2, r2
 8019cd4:	b29b      	uxth	r3, r3
 8019cd6:	eba9 0902 	sub.w	r9, r9, r2
 8019cda:	9304      	str	r3, [sp, #16]
 8019cdc:	fa1f f989 	uxth.w	r9, r9
 8019ce0:	fb03 f808 	mul.w	r8, r3, r8
 8019ce4:	9b01      	ldr	r3, [sp, #4]
 8019ce6:	fb09 8803 	mla	r8, r9, r3, r8
 8019cea:	9b04      	ldr	r3, [sp, #16]
 8019cec:	fb03 fc0c 	mul.w	ip, r3, ip
 8019cf0:	9b02      	ldr	r3, [sp, #8]
 8019cf2:	fb02 880e 	mla	r8, r2, lr, r8
 8019cf6:	fb09 cc03 	mla	ip, r9, r3, ip
 8019cfa:	9b04      	ldr	r3, [sp, #16]
 8019cfc:	fb0b 8805 	mla	r8, fp, r5, r8
 8019d00:	fb02 c707 	mla	r7, r2, r7, ip
 8019d04:	fb03 f30a 	mul.w	r3, r3, sl
 8019d08:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019d0c:	fb0b 7404 	mla	r4, fp, r4, r7
 8019d10:	f881 8000 	strb.w	r8, [r1]
 8019d14:	1224      	asrs	r4, r4, #8
 8019d16:	704c      	strb	r4, [r1, #1]
 8019d18:	9c03      	ldr	r4, [sp, #12]
 8019d1a:	fb09 3904 	mla	r9, r9, r4, r3
 8019d1e:	fb02 9206 	mla	r2, r2, r6, r9
 8019d22:	fb0b 2000 	mla	r0, fp, r0, r2
 8019d26:	1200      	asrs	r0, r0, #8
 8019d28:	7088      	strb	r0, [r1, #2]
 8019d2a:	b007      	add	sp, #28
 8019d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d30:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8019d34:	9501      	str	r5, [sp, #4]
 8019d36:	e78c      	b.n	8019c52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8019d38:	4682      	mov	sl, r0
 8019d3a:	46a4      	mov	ip, r4
 8019d3c:	46a8      	mov	r8, r5
 8019d3e:	9501      	str	r5, [sp, #4]
 8019d40:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8019d44:	e793      	b.n	8019c6e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8019d46:	4682      	mov	sl, r0
 8019d48:	46a4      	mov	ip, r4
 8019d4a:	46a8      	mov	r8, r5
 8019d4c:	e78f      	b.n	8019c6e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8019d4e:	4606      	mov	r6, r0
 8019d50:	4627      	mov	r7, r4
 8019d52:	46ae      	mov	lr, r5
 8019d54:	e7a0      	b.n	8019c98 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8019d56:	4606      	mov	r6, r0
 8019d58:	4627      	mov	r7, r4
 8019d5a:	46ae      	mov	lr, r5
 8019d5c:	e7ac      	b.n	8019cb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08019d5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d62:	b09b      	sub	sp, #108	; 0x6c
 8019d64:	920b      	str	r2, [sp, #44]	; 0x2c
 8019d66:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019d68:	9019      	str	r0, [sp, #100]	; 0x64
 8019d6a:	9109      	str	r1, [sp, #36]	; 0x24
 8019d6c:	6850      	ldr	r0, [r2, #4]
 8019d6e:	9306      	str	r3, [sp, #24]
 8019d70:	6812      	ldr	r2, [r2, #0]
 8019d72:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019d76:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8019d7a:	fb00 1303 	mla	r3, r0, r3, r1
 8019d7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d82:	18d3      	adds	r3, r2, r3
 8019d84:	9307      	str	r3, [sp, #28]
 8019d86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	9308      	str	r3, [sp, #32]
 8019d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	dc03      	bgt.n	8019d9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	f340 81ab 	ble.w	801a0f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019d9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019d9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019da0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019da4:	1e48      	subs	r0, r1, #1
 8019da6:	1e55      	subs	r5, r2, #1
 8019da8:	9b06      	ldr	r3, [sp, #24]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	f340 80b1 	ble.w	8019f12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019db0:	ea5f 462b 	movs.w	r6, fp, asr #16
 8019db4:	ea4f 4324 	mov.w	r3, r4, asr #16
 8019db8:	d406      	bmi.n	8019dc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019dba:	4286      	cmp	r6, r0
 8019dbc:	da04      	bge.n	8019dc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	db02      	blt.n	8019dc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019dc2:	42ab      	cmp	r3, r5
 8019dc4:	f2c0 80a6 	blt.w	8019f14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8019dc8:	3601      	adds	r6, #1
 8019dca:	f100 8097 	bmi.w	8019efc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019dce:	42b1      	cmp	r1, r6
 8019dd0:	f2c0 8094 	blt.w	8019efc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019dd4:	3301      	adds	r3, #1
 8019dd6:	f100 8091 	bmi.w	8019efc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	f2c0 808e 	blt.w	8019efc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019de0:	9b06      	ldr	r3, [sp, #24]
 8019de2:	9e07      	ldr	r6, [sp, #28]
 8019de4:	930a      	str	r3, [sp, #40]	; 0x28
 8019de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	f340 80b0 	ble.w	8019f4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019dee:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019df0:	1425      	asrs	r5, r4, #16
 8019df2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019df4:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8019df8:	68c7      	ldr	r7, [r0, #12]
 8019dfa:	ea5f 402b 	movs.w	r0, fp, asr #16
 8019dfe:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019e02:	689b      	ldr	r3, [r3, #8]
 8019e04:	f100 80ea 	bmi.w	8019fdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019e08:	f103 3cff 	add.w	ip, r3, #4294967295
 8019e0c:	4560      	cmp	r0, ip
 8019e0e:	f280 80e5 	bge.w	8019fdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019e12:	2d00      	cmp	r5, #0
 8019e14:	f2c0 80e2 	blt.w	8019fdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8019e1c:	4565      	cmp	r5, ip
 8019e1e:	f280 80dd 	bge.w	8019fdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019e22:	b21b      	sxth	r3, r3
 8019e24:	fb05 0003 	mla	r0, r5, r3, r0
 8019e28:	9d08      	ldr	r5, [sp, #32]
 8019e2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019e2e:	182f      	adds	r7, r5, r0
 8019e30:	5c2d      	ldrb	r5, [r5, r0]
 8019e32:	7878      	ldrb	r0, [r7, #1]
 8019e34:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019e38:	900c      	str	r0, [sp, #48]	; 0x30
 8019e3a:	f897 9003 	ldrb.w	r9, [r7, #3]
 8019e3e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019e42:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019e46:	b1c9      	cbz	r1, 8019e7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019e48:	f04f 0c03 	mov.w	ip, #3
 8019e4c:	f06f 0004 	mvn.w	r0, #4
 8019e50:	3705      	adds	r7, #5
 8019e52:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019e56:	eb07 0c03 	add.w	ip, r7, r3
 8019e5a:	5cfb      	ldrb	r3, [r7, r3]
 8019e5c:	930d      	str	r3, [sp, #52]	; 0x34
 8019e5e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8019e64:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019e68:	9311      	str	r3, [sp, #68]	; 0x44
 8019e6a:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8019e6e:	930e      	str	r3, [sp, #56]	; 0x38
 8019e70:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8019e74:	9310      	str	r3, [sp, #64]	; 0x40
 8019e76:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8019e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8019e7c:	b292      	uxth	r2, r2
 8019e7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019e80:	b289      	uxth	r1, r1
 8019e82:	fb02 f301 	mul.w	r3, r2, r1
 8019e86:	0112      	lsls	r2, r2, #4
 8019e88:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8019e8c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8019e90:	1ad2      	subs	r2, r2, r3
 8019e92:	b289      	uxth	r1, r1
 8019e94:	b292      	uxth	r2, r2
 8019e96:	1a7f      	subs	r7, r7, r1
 8019e98:	fb02 f909 	mul.w	r9, r2, r9
 8019e9c:	b2bf      	uxth	r7, r7
 8019e9e:	fb02 f808 	mul.w	r8, r2, r8
 8019ea2:	fb02 fa0a 	mul.w	sl, r2, sl
 8019ea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019ea8:	fb07 9905 	mla	r9, r7, r5, r9
 8019eac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019eae:	fb07 8800 	mla	r8, r7, r0, r8
 8019eb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019eb4:	fb07 aa0e 	mla	sl, r7, lr, sl
 8019eb8:	fb01 9905 	mla	r9, r1, r5, r9
 8019ebc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019ebe:	fb01 8800 	mla	r8, r1, r0, r8
 8019ec2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019ec4:	fb01 a102 	mla	r1, r1, r2, sl
 8019ec8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019eca:	fb03 9905 	mla	r9, r3, r5, r9
 8019ece:	fb03 8800 	mla	r8, r3, r0, r8
 8019ed2:	fb03 1302 	mla	r3, r3, r2, r1
 8019ed6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019eda:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019ede:	121b      	asrs	r3, r3, #8
 8019ee0:	f886 9000 	strb.w	r9, [r6]
 8019ee4:	f886 8001 	strb.w	r8, [r6, #1]
 8019ee8:	70b3      	strb	r3, [r6, #2]
 8019eea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019eec:	3603      	adds	r6, #3
 8019eee:	449b      	add	fp, r3
 8019ef0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019ef2:	441c      	add	r4, r3
 8019ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ef6:	3b01      	subs	r3, #1
 8019ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8019efa:	e774      	b.n	8019de6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8019efc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019efe:	449b      	add	fp, r3
 8019f00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f02:	441c      	add	r4, r3
 8019f04:	9b06      	ldr	r3, [sp, #24]
 8019f06:	3b01      	subs	r3, #1
 8019f08:	9306      	str	r3, [sp, #24]
 8019f0a:	9b07      	ldr	r3, [sp, #28]
 8019f0c:	3303      	adds	r3, #3
 8019f0e:	9307      	str	r3, [sp, #28]
 8019f10:	e74a      	b.n	8019da8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019f12:	d024      	beq.n	8019f5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019f14:	9b06      	ldr	r3, [sp, #24]
 8019f16:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019f18:	3b01      	subs	r3, #1
 8019f1a:	fb00 b003 	mla	r0, r0, r3, fp
 8019f1e:	1400      	asrs	r0, r0, #16
 8019f20:	f53f af5e 	bmi.w	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019f24:	3901      	subs	r1, #1
 8019f26:	4288      	cmp	r0, r1
 8019f28:	f6bf af5a 	bge.w	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019f2c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019f2e:	fb01 4303 	mla	r3, r1, r3, r4
 8019f32:	141b      	asrs	r3, r3, #16
 8019f34:	f53f af54 	bmi.w	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019f38:	3a01      	subs	r2, #1
 8019f3a:	4293      	cmp	r3, r2
 8019f3c:	f6bf af50 	bge.w	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019f40:	9b07      	ldr	r3, [sp, #28]
 8019f42:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019f46:	1cde      	adds	r6, r3, #3
 8019f48:	f1be 0f00 	cmp.w	lr, #0
 8019f4c:	dc5f      	bgt.n	801a00e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019f4e:	9b06      	ldr	r3, [sp, #24]
 8019f50:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019f54:	9b07      	ldr	r3, [sp, #28]
 8019f56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019f5a:	4423      	add	r3, r4
 8019f5c:	9307      	str	r3, [sp, #28]
 8019f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	f340 80c5 	ble.w	801a0f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f74:	eef0 6a62 	vmov.f32	s13, s5
 8019f78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f84:	ee16 ba90 	vmov	fp, s13
 8019f88:	eef0 6a43 	vmov.f32	s13, s6
 8019f8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f90:	ee16 4a90 	vmov	r4, s13
 8019f94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019fa0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019fa4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019fa8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019fac:	ee12 2a90 	vmov	r2, s5
 8019fb0:	eef0 2a47 	vmov.f32	s5, s14
 8019fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fb8:	ee13 2a10 	vmov	r2, s6
 8019fbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8019fbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019fc0:	eeb0 3a67 	vmov.f32	s6, s15
 8019fc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8019fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019fce:	3b01      	subs	r3, #1
 8019fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8019fd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019fd4:	bf08      	it	eq
 8019fd6:	4613      	moveq	r3, r2
 8019fd8:	9306      	str	r3, [sp, #24]
 8019fda:	e6d7      	b.n	8019d8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019fdc:	f110 0c01 	adds.w	ip, r0, #1
 8019fe0:	d483      	bmi.n	8019eea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019fe2:	4563      	cmp	r3, ip
 8019fe4:	db81      	blt.n	8019eea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019fe6:	f115 0c01 	adds.w	ip, r5, #1
 8019fea:	f53f af7e 	bmi.w	8019eea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019fee:	4567      	cmp	r7, ip
 8019ff0:	f6ff af7b 	blt.w	8019eea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019ff4:	b23f      	sxth	r7, r7
 8019ff6:	b21b      	sxth	r3, r3
 8019ff8:	9700      	str	r7, [sp, #0]
 8019ffa:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8019ffe:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801a002:	9a08      	ldr	r2, [sp, #32]
 801a004:	4631      	mov	r1, r6
 801a006:	9819      	ldr	r0, [sp, #100]	; 0x64
 801a008:	f7ff fdf9 	bl	8019bfe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801a00c:	e76d      	b.n	8019eea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801a00e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a010:	ea4f 402b 	mov.w	r0, fp, asr #16
 801a014:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801a018:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801a01c:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801a020:	1421      	asrs	r1, r4, #16
 801a022:	930a      	str	r3, [sp, #40]	; 0x28
 801a024:	fb0c 0101 	mla	r1, ip, r1, r0
 801a028:	9808      	ldr	r0, [sp, #32]
 801a02a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a02e:	1845      	adds	r5, r0, r1
 801a030:	5c40      	ldrb	r0, [r0, r1]
 801a032:	796f      	ldrb	r7, [r5, #5]
 801a034:	7869      	ldrb	r1, [r5, #1]
 801a036:	f895 8002 	ldrb.w	r8, [r5, #2]
 801a03a:	f895 a003 	ldrb.w	sl, [r5, #3]
 801a03e:	f895 9004 	ldrb.w	r9, [r5, #4]
 801a042:	970c      	str	r7, [sp, #48]	; 0x30
 801a044:	b1a2      	cbz	r2, 801a070 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801a046:	2703      	movs	r7, #3
 801a048:	f06f 0304 	mvn.w	r3, #4
 801a04c:	3505      	adds	r5, #5
 801a04e:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801a052:	eb05 070c 	add.w	r7, r5, ip
 801a056:	f815 500c 	ldrb.w	r5, [r5, ip]
 801a05a:	9513      	str	r5, [sp, #76]	; 0x4c
 801a05c:	787d      	ldrb	r5, [r7, #1]
 801a05e:	9515      	str	r5, [sp, #84]	; 0x54
 801a060:	78bd      	ldrb	r5, [r7, #2]
 801a062:	9517      	str	r5, [sp, #92]	; 0x5c
 801a064:	78fd      	ldrb	r5, [r7, #3]
 801a066:	9514      	str	r5, [sp, #80]	; 0x50
 801a068:	793d      	ldrb	r5, [r7, #4]
 801a06a:	9516      	str	r5, [sp, #88]	; 0x58
 801a06c:	797d      	ldrb	r5, [r7, #5]
 801a06e:	9518      	str	r5, [sp, #96]	; 0x60
 801a070:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a074:	b292      	uxth	r2, r2
 801a076:	3603      	adds	r6, #3
 801a078:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a07c:	fb03 f502 	mul.w	r5, r3, r2
 801a080:	011b      	lsls	r3, r3, #4
 801a082:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801a086:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801a08a:	1b5b      	subs	r3, r3, r5
 801a08c:	b292      	uxth	r2, r2
 801a08e:	b29b      	uxth	r3, r3
 801a090:	1abf      	subs	r7, r7, r2
 801a092:	fb03 f909 	mul.w	r9, r3, r9
 801a096:	b2bf      	uxth	r7, r7
 801a098:	fb03 fa0a 	mul.w	sl, r3, sl
 801a09c:	fb07 9901 	mla	r9, r7, r1, r9
 801a0a0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a0a2:	fb07 aa00 	mla	sl, r7, r0, sl
 801a0a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a0a8:	fb02 9901 	mla	r9, r2, r1, r9
 801a0ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a0ae:	fb02 aa00 	mla	sl, r2, r0, sl
 801a0b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a0b4:	fb05 9901 	mla	r9, r5, r1, r9
 801a0b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a0ba:	fb05 aa00 	mla	sl, r5, r0, sl
 801a0be:	434b      	muls	r3, r1
 801a0c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a0c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a0c6:	fb07 3308 	mla	r3, r7, r8, r3
 801a0ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a0ce:	f806 ac06 	strb.w	sl, [r6, #-6]
 801a0d2:	fb02 3201 	mla	r2, r2, r1, r3
 801a0d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a0d8:	f806 9c05 	strb.w	r9, [r6, #-5]
 801a0dc:	fb05 2503 	mla	r5, r5, r3, r2
 801a0e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a0e2:	122d      	asrs	r5, r5, #8
 801a0e4:	449b      	add	fp, r3
 801a0e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a0e8:	f806 5c04 	strb.w	r5, [r6, #-4]
 801a0ec:	441c      	add	r4, r3
 801a0ee:	e72b      	b.n	8019f48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801a0f0:	b01b      	add	sp, #108	; 0x6c
 801a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801a0f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0fa:	b087      	sub	sp, #28
 801a0fc:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801a100:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801a104:	fb05 7003 	mla	r0, r5, r3, r7
 801a108:	2d00      	cmp	r5, #0
 801a10a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801a10e:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801a112:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801a116:	f2c0 811f 	blt.w	801a358 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801a11a:	45a8      	cmp	r8, r5
 801a11c:	f340 811c 	ble.w	801a358 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801a120:	2f00      	cmp	r7, #0
 801a122:	f2c0 8117 	blt.w	801a354 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801a126:	42bb      	cmp	r3, r7
 801a128:	f340 8114 	ble.w	801a354 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801a12c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801a130:	1c7a      	adds	r2, r7, #1
 801a132:	f100 8114 	bmi.w	801a35e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801a136:	4293      	cmp	r3, r2
 801a138:	f340 8111 	ble.w	801a35e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801a13c:	2c00      	cmp	r4, #0
 801a13e:	f000 8110 	beq.w	801a362 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801a142:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801a146:	3501      	adds	r5, #1
 801a148:	f100 810f 	bmi.w	801a36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801a14c:	45a8      	cmp	r8, r5
 801a14e:	f340 810c 	ble.w	801a36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801a152:	f1be 0f00 	cmp.w	lr, #0
 801a156:	f000 810b 	beq.w	801a370 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801a15a:	2f00      	cmp	r7, #0
 801a15c:	f2c0 8103 	blt.w	801a366 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801a160:	42bb      	cmp	r3, r7
 801a162:	f340 8100 	ble.w	801a366 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801a166:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801a16a:	3701      	adds	r7, #1
 801a16c:	f100 8103 	bmi.w	801a376 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801a170:	42bb      	cmp	r3, r7
 801a172:	f340 8100 	ble.w	801a376 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801a176:	2c00      	cmp	r4, #0
 801a178:	f000 80ff 	beq.w	801a37a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801a17c:	3301      	adds	r3, #1
 801a17e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a182:	fa1f fc84 	uxth.w	ip, r4
 801a186:	fa1f fe8e 	uxth.w	lr, lr
 801a18a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a18e:	fb0c f90e 	mul.w	r9, ip, lr
 801a192:	0e13      	lsrs	r3, r2, #24
 801a194:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a198:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801a19c:	9302      	str	r3, [sp, #8]
 801a19e:	ebac 0709 	sub.w	r7, ip, r9
 801a1a2:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801a1a6:	fa1f f48e 	uxth.w	r4, lr
 801a1aa:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801a1ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a1b2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801a1b6:	fb0a fe0e 	mul.w	lr, sl, lr
 801a1ba:	1b1b      	subs	r3, r3, r4
 801a1bc:	fb0a f606 	mul.w	r6, sl, r6
 801a1c0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801a1c4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a1c8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a1cc:	b29b      	uxth	r3, r3
 801a1ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a1d2:	b2bf      	uxth	r7, r7
 801a1d4:	9301      	str	r3, [sp, #4]
 801a1d6:	44e6      	add	lr, ip
 801a1d8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801a1dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a1e0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a1e4:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801a1e8:	9303      	str	r3, [sp, #12]
 801a1ea:	0a33      	lsrs	r3, r6, #8
 801a1ec:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801a1f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a1f4:	9304      	str	r3, [sp, #16]
 801a1f6:	fb0b f606 	mul.w	r6, fp, r6
 801a1fa:	fb0b f000 	mul.w	r0, fp, r0
 801a1fe:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801a202:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a206:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a20a:	44b6      	add	lr, r6
 801a20c:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801a210:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801a214:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801a218:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801a21c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a220:	fb08 f606 	mul.w	r6, r8, r6
 801a224:	0a03      	lsrs	r3, r0, #8
 801a226:	fb08 f505 	mul.w	r5, r8, r5
 801a22a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a22e:	0a30      	lsrs	r0, r6, #8
 801a230:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a234:	9305      	str	r3, [sp, #20]
 801a236:	0e13      	lsrs	r3, r2, #24
 801a238:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a23c:	fb0e fe07 	mul.w	lr, lr, r7
 801a240:	4430      	add	r0, r6
 801a242:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801a246:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a24a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801a24e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a252:	0a00      	lsrs	r0, r0, #8
 801a254:	435e      	muls	r6, r3
 801a256:	0a2d      	lsrs	r5, r5, #8
 801a258:	435a      	muls	r2, r3
 801a25a:	9b03      	ldr	r3, [sp, #12]
 801a25c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801a260:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a264:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a268:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a26c:	44b4      	add	ip, r6
 801a26e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801a272:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a276:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801a27a:	9e01      	ldr	r6, [sp, #4]
 801a27c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a280:	fb03 ee06 	mla	lr, r3, r6, lr
 801a284:	9b04      	ldr	r3, [sp, #16]
 801a286:	0a12      	lsrs	r2, r2, #8
 801a288:	fb0c ee09 	mla	lr, ip, r9, lr
 801a28c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801a290:	9b05      	ldr	r3, [sp, #20]
 801a292:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a296:	fb00 ee04 	mla	lr, r0, r4, lr
 801a29a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a29e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801a2a2:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801a2a6:	9b01      	ldr	r3, [sp, #4]
 801a2a8:	fb07 fe0e 	mul.w	lr, r7, lr
 801a2ac:	fb07 f70b 	mul.w	r7, r7, fp
 801a2b0:	fb03 ee06 	mla	lr, r3, r6, lr
 801a2b4:	fb03 730a 	mla	r3, r3, sl, r7
 801a2b8:	fb09 e202 	mla	r2, r9, r2, lr
 801a2bc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801a2c0:	fb04 2e0e 	mla	lr, r4, lr, r2
 801a2c4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801a2c8:	fb04 3408 	mla	r4, r4, r8, r3
 801a2cc:	9b02      	ldr	r3, [sp, #8]
 801a2ce:	b292      	uxth	r2, r2
 801a2d0:	fb09 4903 	mla	r9, r9, r3, r4
 801a2d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a2d8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a2dc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a2e0:	fb09 f902 	mul.w	r9, r9, r2
 801a2e4:	ea40 0e0e 	orr.w	lr, r0, lr
 801a2e8:	f109 0301 	add.w	r3, r9, #1
 801a2ec:	fa5f f08e 	uxtb.w	r0, lr
 801a2f0:	fb10 f002 	smulbb	r0, r0, r2
 801a2f4:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801a2f8:	780b      	ldrb	r3, [r1, #0]
 801a2fa:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801a2fe:	fa5f f989 	uxtb.w	r9, r9
 801a302:	fb03 0309 	mla	r3, r3, r9, r0
 801a306:	b29b      	uxth	r3, r3
 801a308:	1c58      	adds	r0, r3, #1
 801a30a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a30e:	7848      	ldrb	r0, [r1, #1]
 801a310:	fb10 f009 	smulbb	r0, r0, r9
 801a314:	121b      	asrs	r3, r3, #8
 801a316:	700b      	strb	r3, [r1, #0]
 801a318:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801a31c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a320:	fb03 0302 	mla	r3, r3, r2, r0
 801a324:	b29b      	uxth	r3, r3
 801a326:	1c58      	adds	r0, r3, #1
 801a328:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a32c:	121b      	asrs	r3, r3, #8
 801a32e:	704b      	strb	r3, [r1, #1]
 801a330:	788b      	ldrb	r3, [r1, #2]
 801a332:	fb13 f909 	smulbb	r9, r3, r9
 801a336:	fb0e 9e02 	mla	lr, lr, r2, r9
 801a33a:	fa1f fe8e 	uxth.w	lr, lr
 801a33e:	f10e 0301 	add.w	r3, lr, #1
 801a342:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801a346:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a34a:	f881 e002 	strb.w	lr, [r1, #2]
 801a34e:	b007      	add	sp, #28
 801a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a354:	2600      	movs	r6, #0
 801a356:	e6eb      	b.n	801a130 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801a358:	2000      	movs	r0, #0
 801a35a:	4606      	mov	r6, r0
 801a35c:	e6f3      	b.n	801a146 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801a35e:	2000      	movs	r0, #0
 801a360:	e6f1      	b.n	801a146 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801a362:	4620      	mov	r0, r4
 801a364:	e6ef      	b.n	801a146 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801a366:	2500      	movs	r5, #0
 801a368:	e6ff      	b.n	801a16a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801a36a:	2200      	movs	r2, #0
 801a36c:	4615      	mov	r5, r2
 801a36e:	e708      	b.n	801a182 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801a370:	4672      	mov	r2, lr
 801a372:	4675      	mov	r5, lr
 801a374:	e705      	b.n	801a182 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801a376:	2200      	movs	r2, #0
 801a378:	e703      	b.n	801a182 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801a37a:	4622      	mov	r2, r4
 801a37c:	e701      	b.n	801a182 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801a37e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a37e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a382:	b09d      	sub	sp, #116	; 0x74
 801a384:	9219      	str	r2, [sp, #100]	; 0x64
 801a386:	9307      	str	r3, [sp, #28]
 801a388:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a38a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801a38e:	901b      	str	r0, [sp, #108]	; 0x6c
 801a390:	931a      	str	r3, [sp, #104]	; 0x68
 801a392:	6850      	ldr	r0, [r2, #4]
 801a394:	9117      	str	r1, [sp, #92]	; 0x5c
 801a396:	6812      	ldr	r2, [r2, #0]
 801a398:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801a39c:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801a3a0:	fb00 1303 	mla	r3, r0, r3, r1
 801a3a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3a8:	18d3      	adds	r3, r2, r3
 801a3aa:	930a      	str	r3, [sp, #40]	; 0x28
 801a3ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	9310      	str	r3, [sp, #64]	; 0x40
 801a3b2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801a3b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	dc03      	bgt.n	801a3c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a3be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	f340 8368 	ble.w	801aa96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a3c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a3c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a3cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a3d0:	1e48      	subs	r0, r1, #1
 801a3d2:	1e57      	subs	r7, r2, #1
 801a3d4:	9b07      	ldr	r3, [sp, #28]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	f340 8187 	ble.w	801a6ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801a3dc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a3e0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a3e4:	d406      	bmi.n	801a3f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a3e6:	4584      	cmp	ip, r0
 801a3e8:	da04      	bge.n	801a3f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	db02      	blt.n	801a3f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a3ee:	42bb      	cmp	r3, r7
 801a3f0:	f2c0 817c 	blt.w	801a6ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a3f4:	f11c 0c01 	adds.w	ip, ip, #1
 801a3f8:	f100 816c 	bmi.w	801a6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a3fc:	4561      	cmp	r1, ip
 801a3fe:	f2c0 8169 	blt.w	801a6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a402:	3301      	adds	r3, #1
 801a404:	f100 8166 	bmi.w	801a6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a408:	429a      	cmp	r2, r3
 801a40a:	f2c0 8163 	blt.w	801a6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a40e:	9b07      	ldr	r3, [sp, #28]
 801a410:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a412:	9318      	str	r3, [sp, #96]	; 0x60
 801a414:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a416:	2b00      	cmp	r3, #0
 801a418:	f340 8186 	ble.w	801a728 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801a41c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a41e:	142a      	asrs	r2, r5, #16
 801a420:	ea4f 4026 	mov.w	r0, r6, asr #16
 801a424:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a428:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801a42c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801a430:	f100 81cb 	bmi.w	801a7ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a434:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a438:	4542      	cmp	r2, r8
 801a43a:	f280 81c6 	bge.w	801a7ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a43e:	2800      	cmp	r0, #0
 801a440:	f2c0 81c3 	blt.w	801a7ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a444:	f103 38ff 	add.w	r8, r3, #4294967295
 801a448:	4540      	cmp	r0, r8
 801a44a:	f280 81be 	bge.w	801a7ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a44e:	fa0f f38e 	sxth.w	r3, lr
 801a452:	fb00 2203 	mla	r2, r0, r3, r2
 801a456:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a458:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801a45c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801a460:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a464:	2900      	cmp	r1, #0
 801a466:	f000 81a6 	beq.w	801a7b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801a46a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a46e:	900c      	str	r0, [sp, #48]	; 0x30
 801a470:	0e00      	lsrs	r0, r0, #24
 801a472:	9013      	str	r0, [sp, #76]	; 0x4c
 801a474:	f1bc 0f00 	cmp.w	ip, #0
 801a478:	d00f      	beq.n	801a49a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a47a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a47e:	3b01      	subs	r3, #1
 801a480:	009b      	lsls	r3, r3, #2
 801a482:	3304      	adds	r3, #4
 801a484:	eb08 0003 	add.w	r0, r8, r3
 801a488:	f858 3003 	ldr.w	r3, [r8, r3]
 801a48c:	9308      	str	r3, [sp, #32]
 801a48e:	0e1b      	lsrs	r3, r3, #24
 801a490:	9311      	str	r3, [sp, #68]	; 0x44
 801a492:	6843      	ldr	r3, [r0, #4]
 801a494:	930d      	str	r3, [sp, #52]	; 0x34
 801a496:	0e1b      	lsrs	r3, r3, #24
 801a498:	9314      	str	r3, [sp, #80]	; 0x50
 801a49a:	b289      	uxth	r1, r1
 801a49c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a49e:	fa1f fc8c 	uxth.w	ip, ip
 801a4a2:	0108      	lsls	r0, r1, #4
 801a4a4:	fb01 f90c 	mul.w	r9, r1, ip
 801a4a8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a4ac:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801a4b0:	eba0 0809 	sub.w	r8, r0, r9
 801a4b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a4b6:	fa1f f18c 	uxth.w	r1, ip
 801a4ba:	fa1f f888 	uxth.w	r8, r8
 801a4be:	1a5b      	subs	r3, r3, r1
 801a4c0:	fb08 f000 	mul.w	r0, r8, r0
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	fb03 000e 	mla	r0, r3, lr, r0
 801a4ca:	fb01 0004 	mla	r0, r1, r4, r0
 801a4ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a4d0:	fb09 0004 	mla	r0, r9, r4, r0
 801a4d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a4d8:	2800      	cmp	r0, #0
 801a4da:	f000 80f2 	beq.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a4de:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a4e2:	d01b      	beq.n	801a51c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801a4e4:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801a4e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a4ec:	fb0e fa0a 	mul.w	sl, lr, sl
 801a4f0:	fb0e fe02 	mul.w	lr, lr, r2
 801a4f4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801a4f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a4fc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a500:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a504:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a508:	4452      	add	r2, sl
 801a50a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a50e:	0a12      	lsrs	r2, r2, #8
 801a510:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a514:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a518:	ea42 020c 	orr.w	r2, r2, ip
 801a51c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a51e:	2cff      	cmp	r4, #255	; 0xff
 801a520:	d021      	beq.n	801a566 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a522:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a524:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a528:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a52a:	fb04 fb0b 	mul.w	fp, r4, fp
 801a52e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a530:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a534:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a536:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a53a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a53e:	fb04 fa0a 	mul.w	sl, r4, sl
 801a542:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a546:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a54a:	44de      	add	lr, fp
 801a54c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a550:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a554:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a558:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a55c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a560:	ea4e 040a 	orr.w	r4, lr, sl
 801a564:	940c      	str	r4, [sp, #48]	; 0x30
 801a566:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a568:	2cff      	cmp	r4, #255	; 0xff
 801a56a:	d021      	beq.n	801a5b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801a56c:	9c08      	ldr	r4, [sp, #32]
 801a56e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a572:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a574:	fb04 fb0b 	mul.w	fp, r4, fp
 801a578:	9c08      	ldr	r4, [sp, #32]
 801a57a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a57e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a580:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a584:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a588:	fb04 fa0a 	mul.w	sl, r4, sl
 801a58c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a590:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a594:	44de      	add	lr, fp
 801a596:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a59a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a59e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a5a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5aa:	ea4e 040a 	orr.w	r4, lr, sl
 801a5ae:	9408      	str	r4, [sp, #32]
 801a5b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a5b2:	2cff      	cmp	r4, #255	; 0xff
 801a5b4:	d021      	beq.n	801a5fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a5b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a5b8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a5bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a5be:	fb04 fb0b 	mul.w	fp, r4, fp
 801a5c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a5c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a5c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a5ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a5ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a5d2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a5da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a5de:	44de      	add	lr, fp
 801a5e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a5e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a5e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a5f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5f4:	ea4e 040a 	orr.w	r4, lr, sl
 801a5f8:	940d      	str	r4, [sp, #52]	; 0x34
 801a5fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a5fc:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a600:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a604:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a608:	9c08      	ldr	r4, [sp, #32]
 801a60a:	fb08 fc0c 	mul.w	ip, r8, ip
 801a60e:	fb03 cc0e 	mla	ip, r3, lr, ip
 801a612:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a616:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a618:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a61c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a620:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a622:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a626:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a62a:	fb08 f80e 	mul.w	r8, r8, lr
 801a62e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a632:	fb03 8202 	mla	r2, r3, r2, r8
 801a636:	9b08      	ldr	r3, [sp, #32]
 801a638:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a63c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801a640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a642:	fb01 220a 	mla	r2, r1, sl, r2
 801a646:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801a64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a64c:	fb09 2901 	mla	r9, r9, r1, r2
 801a650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a652:	4343      	muls	r3, r0
 801a654:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a658:	1c58      	adds	r0, r3, #1
 801a65a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a65e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a662:	783b      	ldrb	r3, [r7, #0]
 801a664:	ea4c 0c09 	orr.w	ip, ip, r9
 801a668:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a66c:	fa5f f28c 	uxtb.w	r2, ip
 801a670:	b2c0      	uxtb	r0, r0
 801a672:	fb12 f201 	smulbb	r2, r2, r1
 801a676:	fb03 2300 	mla	r3, r3, r0, r2
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	1c5a      	adds	r2, r3, #1
 801a67e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a682:	787a      	ldrb	r2, [r7, #1]
 801a684:	fb12 f200 	smulbb	r2, r2, r0
 801a688:	121b      	asrs	r3, r3, #8
 801a68a:	703b      	strb	r3, [r7, #0]
 801a68c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a690:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a694:	fb03 2301 	mla	r3, r3, r1, r2
 801a698:	b29b      	uxth	r3, r3
 801a69a:	1c5a      	adds	r2, r3, #1
 801a69c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a6a0:	121b      	asrs	r3, r3, #8
 801a6a2:	707b      	strb	r3, [r7, #1]
 801a6a4:	78bb      	ldrb	r3, [r7, #2]
 801a6a6:	fb13 f000 	smulbb	r0, r3, r0
 801a6aa:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a6ae:	fa1f fc8c 	uxth.w	ip, ip
 801a6b2:	f10c 0301 	add.w	r3, ip, #1
 801a6b6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a6ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a6be:	f887 c002 	strb.w	ip, [r7, #2]
 801a6c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a6c4:	3703      	adds	r7, #3
 801a6c6:	441d      	add	r5, r3
 801a6c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a6ca:	441e      	add	r6, r3
 801a6cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a6ce:	3b01      	subs	r3, #1
 801a6d0:	9318      	str	r3, [sp, #96]	; 0x60
 801a6d2:	e69f      	b.n	801a414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a6d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a6d6:	441d      	add	r5, r3
 801a6d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a6da:	441e      	add	r6, r3
 801a6dc:	9b07      	ldr	r3, [sp, #28]
 801a6de:	3b01      	subs	r3, #1
 801a6e0:	9307      	str	r3, [sp, #28]
 801a6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6e4:	3303      	adds	r3, #3
 801a6e6:	930a      	str	r3, [sp, #40]	; 0x28
 801a6e8:	e674      	b.n	801a3d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801a6ea:	d025      	beq.n	801a738 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801a6ec:	9b07      	ldr	r3, [sp, #28]
 801a6ee:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801a6f0:	3b01      	subs	r3, #1
 801a6f2:	fb00 5003 	mla	r0, r0, r3, r5
 801a6f6:	1400      	asrs	r0, r0, #16
 801a6f8:	f53f ae89 	bmi.w	801a40e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a6fc:	3901      	subs	r1, #1
 801a6fe:	4288      	cmp	r0, r1
 801a700:	f6bf ae85 	bge.w	801a40e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a704:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a706:	fb01 6303 	mla	r3, r1, r3, r6
 801a70a:	141b      	asrs	r3, r3, #16
 801a70c:	f53f ae7f 	bmi.w	801a40e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a710:	3a01      	subs	r2, #1
 801a712:	4293      	cmp	r3, r2
 801a714:	f6bf ae7b 	bge.w	801a40e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a71a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a71e:	f103 0e03 	add.w	lr, r3, #3
 801a722:	f1bb 0f00 	cmp.w	fp, #0
 801a726:	dc6e      	bgt.n	801a806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801a728:	9b07      	ldr	r3, [sp, #28]
 801a72a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a730:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a734:	4423      	add	r3, r4
 801a736:	930a      	str	r3, [sp, #40]	; 0x28
 801a738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	f340 81ab 	ble.w	801aa96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a744:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a746:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a74a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a74e:	eef0 6a62 	vmov.f32	s13, s5
 801a752:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a756:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a75a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a75e:	ee16 5a90 	vmov	r5, s13
 801a762:	eef0 6a43 	vmov.f32	s13, s6
 801a766:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a76a:	ee16 6a90 	vmov	r6, s13
 801a76e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a772:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a776:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a77a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a77e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a782:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a786:	ee12 2a90 	vmov	r2, s5
 801a78a:	eef0 2a47 	vmov.f32	s5, s14
 801a78e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a792:	ee13 2a10 	vmov	r2, s6
 801a796:	9329      	str	r3, [sp, #164]	; 0xa4
 801a798:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a79a:	eeb0 3a67 	vmov.f32	s6, s15
 801a79e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7a2:	932a      	str	r3, [sp, #168]	; 0xa8
 801a7a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a7a8:	3b01      	subs	r3, #1
 801a7aa:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a7ae:	bf08      	it	eq
 801a7b0:	4613      	moveq	r3, r2
 801a7b2:	9307      	str	r3, [sp, #28]
 801a7b4:	e600      	b.n	801a3b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a7b6:	f1bc 0f00 	cmp.w	ip, #0
 801a7ba:	f43f ae6e 	beq.w	801a49a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a7be:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801a7c2:	9308      	str	r3, [sp, #32]
 801a7c4:	0e1b      	lsrs	r3, r3, #24
 801a7c6:	9311      	str	r3, [sp, #68]	; 0x44
 801a7c8:	e667      	b.n	801a49a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a7ca:	f112 0801 	adds.w	r8, r2, #1
 801a7ce:	f53f af78 	bmi.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a7d2:	45c6      	cmp	lr, r8
 801a7d4:	f6ff af75 	blt.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a7d8:	f110 0801 	adds.w	r8, r0, #1
 801a7dc:	f53f af71 	bmi.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a7e0:	4543      	cmp	r3, r8
 801a7e2:	f6ff af6e 	blt.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a7e6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801a7e8:	b21b      	sxth	r3, r3
 801a7ea:	9201      	str	r2, [sp, #4]
 801a7ec:	9300      	str	r3, [sp, #0]
 801a7ee:	fa0f f38e 	sxth.w	r3, lr
 801a7f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a7f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a7f8:	e9cd c404 	strd	ip, r4, [sp, #16]
 801a7fc:	4639      	mov	r1, r7
 801a7fe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a800:	f7ff fc79 	bl	801a0f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801a804:	e75d      	b.n	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a806:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a808:	142f      	asrs	r7, r5, #16
 801a80a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a80c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a810:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801a814:	1433      	asrs	r3, r6, #16
 801a816:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a81a:	fb02 7303 	mla	r3, r2, r3, r7
 801a81e:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801a822:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a826:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a82a:	2900      	cmp	r1, #0
 801a82c:	f000 812a 	beq.w	801aa84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801a830:	687c      	ldr	r4, [r7, #4]
 801a832:	940e      	str	r4, [sp, #56]	; 0x38
 801a834:	0e24      	lsrs	r4, r4, #24
 801a836:	9415      	str	r4, [sp, #84]	; 0x54
 801a838:	b178      	cbz	r0, 801a85a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a83a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801a83e:	3a01      	subs	r2, #1
 801a840:	0092      	lsls	r2, r2, #2
 801a842:	3204      	adds	r2, #4
 801a844:	eb07 0802 	add.w	r8, r7, r2
 801a848:	58ba      	ldr	r2, [r7, r2]
 801a84a:	9209      	str	r2, [sp, #36]	; 0x24
 801a84c:	0e12      	lsrs	r2, r2, #24
 801a84e:	9212      	str	r2, [sp, #72]	; 0x48
 801a850:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a854:	920f      	str	r2, [sp, #60]	; 0x3c
 801a856:	0e12      	lsrs	r2, r2, #24
 801a858:	9216      	str	r2, [sp, #88]	; 0x58
 801a85a:	b289      	uxth	r1, r1
 801a85c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a85e:	b280      	uxth	r0, r0
 801a860:	fb01 f900 	mul.w	r9, r1, r0
 801a864:	0109      	lsls	r1, r1, #4
 801a866:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a86a:	eba1 0809 	sub.w	r8, r1, r9
 801a86e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801a872:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a874:	b280      	uxth	r0, r0
 801a876:	fa1f f888 	uxth.w	r8, r8
 801a87a:	1a12      	subs	r2, r2, r0
 801a87c:	fb08 f101 	mul.w	r1, r8, r1
 801a880:	b292      	uxth	r2, r2
 801a882:	fb02 110c 	mla	r1, r2, ip, r1
 801a886:	fb00 1104 	mla	r1, r0, r4, r1
 801a88a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a88c:	fb09 1104 	mla	r1, r9, r4, r1
 801a890:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a894:	2900      	cmp	r1, #0
 801a896:	f000 80ec 	beq.w	801aa72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801a89a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a89e:	d019      	beq.n	801a8d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801a8a0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a8a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8a8:	fb0c fa0a 	mul.w	sl, ip, sl
 801a8ac:	fb0c fc03 	mul.w	ip, ip, r3
 801a8b0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a8b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a8b8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a8bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8c0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a8c4:	4453      	add	r3, sl
 801a8c6:	0a3f      	lsrs	r7, r7, #8
 801a8c8:	0a1b      	lsrs	r3, r3, #8
 801a8ca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a8ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8d2:	433b      	orrs	r3, r7
 801a8d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a8d6:	2cff      	cmp	r4, #255	; 0xff
 801a8d8:	d020      	beq.n	801a91c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801a8da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a8dc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a8e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a8e2:	4367      	muls	r7, r4
 801a8e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a8e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a8ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a8ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a8f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a8f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a8fc:	44bc      	add	ip, r7
 801a8fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a902:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a906:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a90a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a90e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a912:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a916:	ea4c 040a 	orr.w	r4, ip, sl
 801a91a:	940e      	str	r4, [sp, #56]	; 0x38
 801a91c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a91e:	2cff      	cmp	r4, #255	; 0xff
 801a920:	d020      	beq.n	801a964 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801a922:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a924:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a928:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a92a:	4367      	muls	r7, r4
 801a92c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a92e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a932:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a936:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a938:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a93c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a940:	fb04 fa0a 	mul.w	sl, r4, sl
 801a944:	44bc      	add	ip, r7
 801a946:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a94a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a94e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a952:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a956:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a95a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a95e:	ea4c 040a 	orr.w	r4, ip, sl
 801a962:	9409      	str	r4, [sp, #36]	; 0x24
 801a964:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a966:	2cff      	cmp	r4, #255	; 0xff
 801a968:	d020      	beq.n	801a9ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801a96a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a96c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a970:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a972:	4367      	muls	r7, r4
 801a974:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a976:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a97a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a97e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a980:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a984:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a988:	fb04 fa0a 	mul.w	sl, r4, sl
 801a98c:	44bc      	add	ip, r7
 801a98e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a992:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a996:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a99a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a99e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a9a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a9a6:	ea4c 040a 	orr.w	r4, ip, sl
 801a9aa:	940f      	str	r4, [sp, #60]	; 0x3c
 801a9ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a9ae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a9b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a9b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a9ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a9bc:	fb08 f707 	mul.w	r7, r8, r7
 801a9c0:	fb02 770c 	mla	r7, r2, ip, r7
 801a9c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a9c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a9ca:	fb00 770c 	mla	r7, r0, ip, r7
 801a9ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a9d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a9d4:	fb09 770c 	mla	r7, r9, ip, r7
 801a9d8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a9dc:	fb08 f80c 	mul.w	r8, r8, ip
 801a9e0:	0a3f      	lsrs	r7, r7, #8
 801a9e2:	fb02 8303 	mla	r3, r2, r3, r8
 801a9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9e8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a9ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a9f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a9f2:	fb00 330a 	mla	r3, r0, sl, r3
 801a9f6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a9fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a9fc:	fb09 3c0c 	mla	ip, r9, ip, r3
 801aa00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa06:	434b      	muls	r3, r1
 801aa08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801aa0c:	1c59      	adds	r1, r3, #1
 801aa0e:	ea47 070c 	orr.w	r7, r7, ip
 801aa12:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801aa16:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801aa1a:	b2fa      	uxtb	r2, r7
 801aa1c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801aa20:	fb12 f200 	smulbb	r2, r2, r0
 801aa24:	b2c9      	uxtb	r1, r1
 801aa26:	fb03 2301 	mla	r3, r3, r1, r2
 801aa2a:	b29b      	uxth	r3, r3
 801aa2c:	1c5a      	adds	r2, r3, #1
 801aa2e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801aa32:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801aa36:	fb12 f201 	smulbb	r2, r2, r1
 801aa3a:	121b      	asrs	r3, r3, #8
 801aa3c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801aa40:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801aa44:	0c3f      	lsrs	r7, r7, #16
 801aa46:	fb03 2300 	mla	r3, r3, r0, r2
 801aa4a:	b29b      	uxth	r3, r3
 801aa4c:	1c5a      	adds	r2, r3, #1
 801aa4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801aa52:	121b      	asrs	r3, r3, #8
 801aa54:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801aa58:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801aa5c:	fb13 f101 	smulbb	r1, r3, r1
 801aa60:	fb07 1700 	mla	r7, r7, r0, r1
 801aa64:	b2bf      	uxth	r7, r7
 801aa66:	1c79      	adds	r1, r7, #1
 801aa68:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801aa6c:	123f      	asrs	r7, r7, #8
 801aa6e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801aa72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aa74:	f10e 0e03 	add.w	lr, lr, #3
 801aa78:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aa7c:	441d      	add	r5, r3
 801aa7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aa80:	441e      	add	r6, r3
 801aa82:	e64e      	b.n	801a722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801aa84:	2800      	cmp	r0, #0
 801aa86:	f43f aee8 	beq.w	801a85a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801aa8a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801aa8e:	9209      	str	r2, [sp, #36]	; 0x24
 801aa90:	0e12      	lsrs	r2, r2, #24
 801aa92:	9212      	str	r2, [sp, #72]	; 0x48
 801aa94:	e6e1      	b.n	801a85a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801aa96:	b01d      	add	sp, #116	; 0x74
 801aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaa0:	b087      	sub	sp, #28
 801aaa2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801aaa6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801aaaa:	fb05 7003 	mla	r0, r5, r3, r7
 801aaae:	2d00      	cmp	r5, #0
 801aab0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801aab4:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801aab8:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801aabc:	f2c0 810a 	blt.w	801acd4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801aac0:	45a8      	cmp	r8, r5
 801aac2:	f340 8107 	ble.w	801acd4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801aac6:	2f00      	cmp	r7, #0
 801aac8:	f2c0 8102 	blt.w	801acd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801aacc:	42bb      	cmp	r3, r7
 801aace:	f340 80ff 	ble.w	801acd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801aad2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801aad6:	1c7a      	adds	r2, r7, #1
 801aad8:	f100 80ff 	bmi.w	801acda <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801aadc:	4293      	cmp	r3, r2
 801aade:	f340 80fc 	ble.w	801acda <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801aae2:	2c00      	cmp	r4, #0
 801aae4:	f000 80fb 	beq.w	801acde <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801aae8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801aaec:	3501      	adds	r5, #1
 801aaee:	f100 80fa 	bmi.w	801ace6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801aaf2:	45a8      	cmp	r8, r5
 801aaf4:	f340 80f7 	ble.w	801ace6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801aaf8:	f1be 0f00 	cmp.w	lr, #0
 801aafc:	f000 80f6 	beq.w	801acec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801ab00:	2f00      	cmp	r7, #0
 801ab02:	f2c0 80ee 	blt.w	801ace2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ab06:	42bb      	cmp	r3, r7
 801ab08:	f340 80eb 	ble.w	801ace2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ab0c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801ab10:	3701      	adds	r7, #1
 801ab12:	f100 80ee 	bmi.w	801acf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ab16:	42bb      	cmp	r3, r7
 801ab18:	f340 80eb 	ble.w	801acf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ab1c:	2c00      	cmp	r4, #0
 801ab1e:	f000 80ea 	beq.w	801acf6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801ab22:	3301      	adds	r3, #1
 801ab24:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ab28:	fa1f fc84 	uxth.w	ip, r4
 801ab2c:	fa1f fe8e 	uxth.w	lr, lr
 801ab30:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ab34:	fb0c f90e 	mul.w	r9, ip, lr
 801ab38:	0e13      	lsrs	r3, r2, #24
 801ab3a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ab3e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ab42:	9302      	str	r3, [sp, #8]
 801ab44:	ebac 0709 	sub.w	r7, ip, r9
 801ab48:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ab4c:	fa1f f48e 	uxth.w	r4, lr
 801ab50:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801ab54:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ab58:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ab5c:	fb0a fe0e 	mul.w	lr, sl, lr
 801ab60:	1b1b      	subs	r3, r3, r4
 801ab62:	fb0a f606 	mul.w	r6, sl, r6
 801ab66:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ab6a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ab6e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ab72:	b29b      	uxth	r3, r3
 801ab74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab78:	b2bf      	uxth	r7, r7
 801ab7a:	9301      	str	r3, [sp, #4]
 801ab7c:	44e6      	add	lr, ip
 801ab7e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ab82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab86:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ab8a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801ab8e:	9303      	str	r3, [sp, #12]
 801ab90:	0a33      	lsrs	r3, r6, #8
 801ab92:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801ab96:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ab9a:	9304      	str	r3, [sp, #16]
 801ab9c:	fb0b f606 	mul.w	r6, fp, r6
 801aba0:	fb0b f000 	mul.w	r0, fp, r0
 801aba4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801aba8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801abac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abb0:	44b6      	add	lr, r6
 801abb2:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801abb6:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801abba:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801abbe:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801abc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801abc6:	fb08 f606 	mul.w	r6, r8, r6
 801abca:	0a03      	lsrs	r3, r0, #8
 801abcc:	fb08 f505 	mul.w	r5, r8, r5
 801abd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abd4:	0a30      	lsrs	r0, r6, #8
 801abd6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801abda:	9305      	str	r3, [sp, #20]
 801abdc:	0e13      	lsrs	r3, r2, #24
 801abde:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801abe2:	fb0e fe07 	mul.w	lr, lr, r7
 801abe6:	4430      	add	r0, r6
 801abe8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801abec:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801abf0:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801abf4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801abf8:	0a00      	lsrs	r0, r0, #8
 801abfa:	435e      	muls	r6, r3
 801abfc:	0a2d      	lsrs	r5, r5, #8
 801abfe:	435a      	muls	r2, r3
 801ac00:	9b03      	ldr	r3, [sp, #12]
 801ac02:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ac06:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ac0a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ac0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac12:	44b4      	add	ip, r6
 801ac14:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801ac18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac1c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ac20:	9e01      	ldr	r6, [sp, #4]
 801ac22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac26:	fb03 ee06 	mla	lr, r3, r6, lr
 801ac2a:	9b04      	ldr	r3, [sp, #16]
 801ac2c:	0a12      	lsrs	r2, r2, #8
 801ac2e:	fb0c ee09 	mla	lr, ip, r9, lr
 801ac32:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801ac36:	9b05      	ldr	r3, [sp, #20]
 801ac38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ac3c:	fb00 ee04 	mla	lr, r0, r4, lr
 801ac40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac44:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801ac48:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801ac4c:	9b01      	ldr	r3, [sp, #4]
 801ac4e:	fb07 fe0e 	mul.w	lr, r7, lr
 801ac52:	fb07 f70b 	mul.w	r7, r7, fp
 801ac56:	fb03 ee06 	mla	lr, r3, r6, lr
 801ac5a:	fb03 730a 	mla	r3, r3, sl, r7
 801ac5e:	fb09 e202 	mla	r2, r9, r2, lr
 801ac62:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801ac66:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ac6a:	fb04 3408 	mla	r4, r4, r8, r3
 801ac6e:	9b02      	ldr	r3, [sp, #8]
 801ac70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac74:	fb09 4903 	mla	r9, r9, r3, r4
 801ac78:	780b      	ldrb	r3, [r1, #0]
 801ac7a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ac7e:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801ac82:	ea40 0e0e 	orr.w	lr, r0, lr
 801ac86:	fa5f f989 	uxtb.w	r9, r9
 801ac8a:	fb03 f209 	mul.w	r2, r3, r9
 801ac8e:	1c53      	adds	r3, r2, #1
 801ac90:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ac94:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ac98:	700b      	strb	r3, [r1, #0]
 801ac9a:	784b      	ldrb	r3, [r1, #1]
 801ac9c:	fb03 f309 	mul.w	r3, r3, r9
 801aca0:	1c5a      	adds	r2, r3, #1
 801aca2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801aca6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801acaa:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801acae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801acb2:	704b      	strb	r3, [r1, #1]
 801acb4:	788b      	ldrb	r3, [r1, #2]
 801acb6:	fb03 f909 	mul.w	r9, r3, r9
 801acba:	f109 0301 	add.w	r3, r9, #1
 801acbe:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801acc2:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801acc6:	f881 e002 	strb.w	lr, [r1, #2]
 801acca:	b007      	add	sp, #28
 801accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acd0:	2600      	movs	r6, #0
 801acd2:	e700      	b.n	801aad6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801acd4:	2000      	movs	r0, #0
 801acd6:	4606      	mov	r6, r0
 801acd8:	e708      	b.n	801aaec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801acda:	2000      	movs	r0, #0
 801acdc:	e706      	b.n	801aaec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801acde:	4620      	mov	r0, r4
 801ace0:	e704      	b.n	801aaec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ace2:	2500      	movs	r5, #0
 801ace4:	e714      	b.n	801ab10 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801ace6:	2200      	movs	r2, #0
 801ace8:	4615      	mov	r5, r2
 801acea:	e71d      	b.n	801ab28 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801acec:	4672      	mov	r2, lr
 801acee:	4675      	mov	r5, lr
 801acf0:	e71a      	b.n	801ab28 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801acf2:	2200      	movs	r2, #0
 801acf4:	e718      	b.n	801ab28 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801acf6:	4622      	mov	r2, r4
 801acf8:	e716      	b.n	801ab28 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801acfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801acfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acfe:	b099      	sub	sp, #100	; 0x64
 801ad00:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801ad04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ad06:	9017      	str	r0, [sp, #92]	; 0x5c
 801ad08:	9306      	str	r3, [sp, #24]
 801ad0a:	6850      	ldr	r0, [r2, #4]
 801ad0c:	6812      	ldr	r2, [r2, #0]
 801ad0e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ad12:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801ad16:	fb00 1303 	mla	r3, r0, r3, r1
 801ad1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad1e:	18d3      	adds	r3, r2, r3
 801ad20:	9309      	str	r3, [sp, #36]	; 0x24
 801ad22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	930e      	str	r3, [sp, #56]	; 0x38
 801ad28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	dc03      	bgt.n	801ad36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ad2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	f340 8360 	ble.w	801b3f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ad36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ad3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ad40:	1e48      	subs	r0, r1, #1
 801ad42:	1e57      	subs	r7, r2, #1
 801ad44:	9b06      	ldr	r3, [sp, #24]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	f340 817b 	ble.w	801b042 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801ad4c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ad50:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ad54:	d406      	bmi.n	801ad64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ad56:	4584      	cmp	ip, r0
 801ad58:	da04      	bge.n	801ad64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	db02      	blt.n	801ad64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ad5e:	42bb      	cmp	r3, r7
 801ad60:	f2c0 8170 	blt.w	801b044 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ad64:	f11c 0c01 	adds.w	ip, ip, #1
 801ad68:	f100 8160 	bmi.w	801b02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad6c:	4561      	cmp	r1, ip
 801ad6e:	f2c0 815d 	blt.w	801b02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad72:	3301      	adds	r3, #1
 801ad74:	f100 815a 	bmi.w	801b02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	f2c0 8157 	blt.w	801b02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad7e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ad82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ad84:	f1b8 0f00 	cmp.w	r8, #0
 801ad88:	f340 8179 	ble.w	801b07e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ad8c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ad8e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ad92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad94:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ad98:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ad9c:	142a      	asrs	r2, r5, #16
 801ad9e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ada2:	689b      	ldr	r3, [r3, #8]
 801ada4:	f100 81be 	bmi.w	801b124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ada8:	f103 39ff 	add.w	r9, r3, #4294967295
 801adac:	454a      	cmp	r2, r9
 801adae:	f280 81b9 	bge.w	801b124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801adb2:	f1bc 0f00 	cmp.w	ip, #0
 801adb6:	f2c0 81b5 	blt.w	801b124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801adba:	f10e 39ff 	add.w	r9, lr, #4294967295
 801adbe:	45cc      	cmp	ip, r9
 801adc0:	f280 81b0 	bge.w	801b124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801adc4:	b21b      	sxth	r3, r3
 801adc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801adc8:	fb0c 2203 	mla	r2, ip, r3, r2
 801adcc:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801add0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801add4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801add8:	2900      	cmp	r1, #0
 801adda:	f000 8197 	beq.w	801b10c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801adde:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ade2:	940a      	str	r4, [sp, #40]	; 0x28
 801ade4:	0e24      	lsrs	r4, r4, #24
 801ade6:	9411      	str	r4, [sp, #68]	; 0x44
 801ade8:	b180      	cbz	r0, 801ae0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801adea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801adee:	3b01      	subs	r3, #1
 801adf0:	009b      	lsls	r3, r3, #2
 801adf2:	3304      	adds	r3, #4
 801adf4:	eb09 0c03 	add.w	ip, r9, r3
 801adf8:	f859 3003 	ldr.w	r3, [r9, r3]
 801adfc:	9307      	str	r3, [sp, #28]
 801adfe:	0e1b      	lsrs	r3, r3, #24
 801ae00:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae02:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ae06:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae08:	0e1b      	lsrs	r3, r3, #24
 801ae0a:	9312      	str	r3, [sp, #72]	; 0x48
 801ae0c:	b289      	uxth	r1, r1
 801ae0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ae10:	b280      	uxth	r0, r0
 801ae12:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ae14:	fb01 fa00 	mul.w	sl, r1, r0
 801ae18:	0109      	lsls	r1, r1, #4
 801ae1a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ae1e:	eba1 090a 	sub.w	r9, r1, sl
 801ae22:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801ae26:	b280      	uxth	r0, r0
 801ae28:	fa1f f989 	uxth.w	r9, r9
 801ae2c:	1a09      	subs	r1, r1, r0
 801ae2e:	fb09 f303 	mul.w	r3, r9, r3
 801ae32:	b289      	uxth	r1, r1
 801ae34:	fb01 330e 	mla	r3, r1, lr, r3
 801ae38:	fb00 3304 	mla	r3, r0, r4, r3
 801ae3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ae3e:	fb0a 3304 	mla	r3, sl, r4, r3
 801ae42:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	f000 80e8 	beq.w	801b01c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ae4c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ae50:	d01b      	beq.n	801ae8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ae52:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801ae56:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ae5a:	fb0e fb0b 	mul.w	fp, lr, fp
 801ae5e:	fb0e fe02 	mul.w	lr, lr, r2
 801ae62:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ae66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ae6a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ae6e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ae72:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ae76:	445a      	add	r2, fp
 801ae78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ae7c:	0a12      	lsrs	r2, r2, #8
 801ae7e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ae82:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ae86:	ea42 020c 	orr.w	r2, r2, ip
 801ae8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae8c:	2cff      	cmp	r4, #255	; 0xff
 801ae8e:	d021      	beq.n	801aed4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801ae90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ae92:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ae96:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae98:	fb04 fc0c 	mul.w	ip, r4, ip
 801ae9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ae9e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801aea2:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801aea6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aea8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801aeac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aeb0:	fb04 fb0b 	mul.w	fp, r4, fp
 801aeb4:	44e6      	add	lr, ip
 801aeb6:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801aeba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aebe:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801aec2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aec6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801aeca:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801aece:	ea4e 040b 	orr.w	r4, lr, fp
 801aed2:	940a      	str	r4, [sp, #40]	; 0x28
 801aed4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aed6:	2cff      	cmp	r4, #255	; 0xff
 801aed8:	d021      	beq.n	801af1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801aeda:	9c07      	ldr	r4, [sp, #28]
 801aedc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801aee0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aee2:	fb04 fc0c 	mul.w	ip, r4, ip
 801aee6:	9c07      	ldr	r4, [sp, #28]
 801aee8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801aeec:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801aef0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aef2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801aef6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aefa:	fb04 fb0b 	mul.w	fp, r4, fp
 801aefe:	44e6      	add	lr, ip
 801af00:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801af04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af08:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801af0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af10:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801af14:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801af18:	ea4e 040b 	orr.w	r4, lr, fp
 801af1c:	9407      	str	r4, [sp, #28]
 801af1e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801af20:	2cff      	cmp	r4, #255	; 0xff
 801af22:	d021      	beq.n	801af68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801af24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af26:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801af2c:	fb04 fc0c 	mul.w	ip, r4, ip
 801af30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af32:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801af36:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801af3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801af3c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801af40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af44:	fb04 fb0b 	mul.w	fp, r4, fp
 801af48:	44e6      	add	lr, ip
 801af4a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801af4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af52:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801af56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af5a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801af5e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801af62:	ea4e 040b 	orr.w	r4, lr, fp
 801af66:	940b      	str	r4, [sp, #44]	; 0x2c
 801af68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801af6a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801af6e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801af72:	2bff      	cmp	r3, #255	; 0xff
 801af74:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af78:	9c07      	ldr	r4, [sp, #28]
 801af7a:	fb09 fc0c 	mul.w	ip, r9, ip
 801af7e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801af82:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801af86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af88:	fb00 cc0e 	mla	ip, r0, lr, ip
 801af8c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801af90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801af92:	fb0a cc0e 	mla	ip, sl, lr, ip
 801af96:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801af9a:	fb09 f90e 	mul.w	r9, r9, lr
 801af9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801afa2:	fb01 9202 	mla	r2, r1, r2, r9
 801afa6:	9907      	ldr	r1, [sp, #28]
 801afa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801afac:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801afb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801afb2:	fb00 220b 	mla	r2, r0, fp, r2
 801afb6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801afba:	fb0a 2a00 	mla	sl, sl, r0, r2
 801afbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801afc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801afc6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801afca:	fa5f f08c 	uxtb.w	r0, ip
 801afce:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801afd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801afd6:	f000 80a2 	beq.w	801b11e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801afda:	43db      	mvns	r3, r3
 801afdc:	783a      	ldrb	r2, [r7, #0]
 801afde:	f897 a002 	ldrb.w	sl, [r7, #2]
 801afe2:	b2db      	uxtb	r3, r3
 801afe4:	fb02 fe03 	mul.w	lr, r2, r3
 801afe8:	fb0a fa03 	mul.w	sl, sl, r3
 801afec:	f10e 0201 	add.w	r2, lr, #1
 801aff0:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801aff4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801aff8:	703a      	strb	r2, [r7, #0]
 801affa:	787a      	ldrb	r2, [r7, #1]
 801affc:	fb02 f003 	mul.w	r0, r2, r3
 801b000:	f10a 0301 	add.w	r3, sl, #1
 801b004:	1c42      	adds	r2, r0, #1
 801b006:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801b00a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801b00e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b012:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b016:	707a      	strb	r2, [r7, #1]
 801b018:	f887 c002 	strb.w	ip, [r7, #2]
 801b01c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b01e:	3703      	adds	r7, #3
 801b020:	f108 38ff 	add.w	r8, r8, #4294967295
 801b024:	441d      	add	r5, r3
 801b026:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b028:	441e      	add	r6, r3
 801b02a:	e6ab      	b.n	801ad84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b02c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b02e:	441d      	add	r5, r3
 801b030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b032:	441e      	add	r6, r3
 801b034:	9b06      	ldr	r3, [sp, #24]
 801b036:	3b01      	subs	r3, #1
 801b038:	9306      	str	r3, [sp, #24]
 801b03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b03c:	3303      	adds	r3, #3
 801b03e:	9309      	str	r3, [sp, #36]	; 0x24
 801b040:	e680      	b.n	801ad44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b042:	d024      	beq.n	801b08e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801b044:	9b06      	ldr	r3, [sp, #24]
 801b046:	9825      	ldr	r0, [sp, #148]	; 0x94
 801b048:	3b01      	subs	r3, #1
 801b04a:	fb00 5003 	mla	r0, r0, r3, r5
 801b04e:	1400      	asrs	r0, r0, #16
 801b050:	f53f ae95 	bmi.w	801ad7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b054:	3901      	subs	r1, #1
 801b056:	4288      	cmp	r0, r1
 801b058:	f6bf ae91 	bge.w	801ad7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b05c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801b05e:	fb01 6303 	mla	r3, r1, r3, r6
 801b062:	141b      	asrs	r3, r3, #16
 801b064:	f53f ae8b 	bmi.w	801ad7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b068:	3a01      	subs	r2, #1
 801b06a:	4293      	cmp	r3, r2
 801b06c:	f6bf ae87 	bge.w	801ad7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b072:	f8dd b018 	ldr.w	fp, [sp, #24]
 801b076:	1cdf      	adds	r7, r3, #3
 801b078:	f1bb 0f00 	cmp.w	fp, #0
 801b07c:	dc6e      	bgt.n	801b15c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801b07e:	9b06      	ldr	r3, [sp, #24]
 801b080:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b086:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b08a:	4423      	add	r3, r4
 801b08c:	9309      	str	r3, [sp, #36]	; 0x24
 801b08e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b090:	2b00      	cmp	r3, #0
 801b092:	f340 81b0 	ble.w	801b3f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801b096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b09a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b09c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0a4:	eef0 6a62 	vmov.f32	s13, s5
 801b0a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0b4:	ee16 5a90 	vmov	r5, s13
 801b0b8:	eef0 6a43 	vmov.f32	s13, s6
 801b0bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0c0:	ee16 6a90 	vmov	r6, s13
 801b0c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0dc:	ee12 2a90 	vmov	r2, s5
 801b0e0:	eef0 2a47 	vmov.f32	s5, s14
 801b0e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0e8:	ee13 2a10 	vmov	r2, s6
 801b0ec:	9325      	str	r3, [sp, #148]	; 0x94
 801b0ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b0f0:	eeb0 3a67 	vmov.f32	s6, s15
 801b0f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0f8:	9326      	str	r3, [sp, #152]	; 0x98
 801b0fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b0fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b0fe:	3b01      	subs	r3, #1
 801b100:	9315      	str	r3, [sp, #84]	; 0x54
 801b102:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b104:	bf08      	it	eq
 801b106:	4613      	moveq	r3, r2
 801b108:	9306      	str	r3, [sp, #24]
 801b10a:	e60d      	b.n	801ad28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b10c:	2800      	cmp	r0, #0
 801b10e:	f43f ae7d 	beq.w	801ae0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801b112:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b116:	9307      	str	r3, [sp, #28]
 801b118:	0e1b      	lsrs	r3, r3, #24
 801b11a:	930f      	str	r3, [sp, #60]	; 0x3c
 801b11c:	e676      	b.n	801ae0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801b11e:	7038      	strb	r0, [r7, #0]
 801b120:	7079      	strb	r1, [r7, #1]
 801b122:	e779      	b.n	801b018 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b124:	f112 0901 	adds.w	r9, r2, #1
 801b128:	f53f af78 	bmi.w	801b01c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b12c:	454b      	cmp	r3, r9
 801b12e:	f6ff af75 	blt.w	801b01c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b132:	f11c 0901 	adds.w	r9, ip, #1
 801b136:	f53f af71 	bmi.w	801b01c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b13a:	45ce      	cmp	lr, r9
 801b13c:	f6ff af6e 	blt.w	801b01c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b140:	b21b      	sxth	r3, r3
 801b142:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801b146:	fa0f f28e 	sxth.w	r2, lr
 801b14a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801b14e:	9200      	str	r2, [sp, #0]
 801b150:	4639      	mov	r1, r7
 801b152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b154:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b156:	f7ff fca1 	bl	801aa9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801b15a:	e75f      	b.n	801b01c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b15c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b15e:	1429      	asrs	r1, r5, #16
 801b160:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b162:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b166:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801b16a:	1433      	asrs	r3, r6, #16
 801b16c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b170:	fb0c 1303 	mla	r3, ip, r3, r1
 801b174:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b176:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801b17a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b17e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b182:	2a00      	cmp	r2, #0
 801b184:	f000 8129 	beq.w	801b3da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801b188:	684c      	ldr	r4, [r1, #4]
 801b18a:	940c      	str	r4, [sp, #48]	; 0x30
 801b18c:	0e24      	lsrs	r4, r4, #24
 801b18e:	9413      	str	r4, [sp, #76]	; 0x4c
 801b190:	b198      	cbz	r0, 801b1ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801b192:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801b196:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b19a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801b19e:	f10c 0c04 	add.w	ip, ip, #4
 801b1a2:	eb01 080c 	add.w	r8, r1, ip
 801b1a6:	f851 100c 	ldr.w	r1, [r1, ip]
 801b1aa:	9108      	str	r1, [sp, #32]
 801b1ac:	0e09      	lsrs	r1, r1, #24
 801b1ae:	9110      	str	r1, [sp, #64]	; 0x40
 801b1b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b1b4:	910d      	str	r1, [sp, #52]	; 0x34
 801b1b6:	0e09      	lsrs	r1, r1, #24
 801b1b8:	9114      	str	r1, [sp, #80]	; 0x50
 801b1ba:	b292      	uxth	r2, r2
 801b1bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b1be:	b280      	uxth	r0, r0
 801b1c0:	fb02 f900 	mul.w	r9, r2, r0
 801b1c4:	0112      	lsls	r2, r2, #4
 801b1c6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b1ca:	eba2 0809 	sub.w	r8, r2, r9
 801b1ce:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801b1d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b1d4:	b280      	uxth	r0, r0
 801b1d6:	fa1f f888 	uxth.w	r8, r8
 801b1da:	1a09      	subs	r1, r1, r0
 801b1dc:	fb08 f202 	mul.w	r2, r8, r2
 801b1e0:	b289      	uxth	r1, r1
 801b1e2:	fb01 220e 	mla	r2, r1, lr, r2
 801b1e6:	fb00 2204 	mla	r2, r0, r4, r2
 801b1ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b1ec:	fb09 2204 	mla	r2, r9, r4, r2
 801b1f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b1f4:	2a00      	cmp	r2, #0
 801b1f6:	f000 80e8 	beq.w	801b3ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801b1fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b1fe:	d01b      	beq.n	801b238 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801b200:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b204:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b208:	fb0e fa0a 	mul.w	sl, lr, sl
 801b20c:	fb0e fe03 	mul.w	lr, lr, r3
 801b210:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b214:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b218:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b21c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b220:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b224:	4453      	add	r3, sl
 801b226:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b22a:	0a1b      	lsrs	r3, r3, #8
 801b22c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b230:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b234:	ea43 030c 	orr.w	r3, r3, ip
 801b238:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b23a:	2cff      	cmp	r4, #255	; 0xff
 801b23c:	d021      	beq.n	801b282 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801b23e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b240:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b244:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b246:	fb04 fc0c 	mul.w	ip, r4, ip
 801b24a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b24c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b250:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b254:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b256:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b25a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b25e:	fb04 fa0a 	mul.w	sl, r4, sl
 801b262:	44e6      	add	lr, ip
 801b264:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b268:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b26c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b270:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b274:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b278:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b27c:	ea4e 040a 	orr.w	r4, lr, sl
 801b280:	940c      	str	r4, [sp, #48]	; 0x30
 801b282:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b284:	2cff      	cmp	r4, #255	; 0xff
 801b286:	d021      	beq.n	801b2cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801b288:	9c08      	ldr	r4, [sp, #32]
 801b28a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b28e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b290:	fb04 fc0c 	mul.w	ip, r4, ip
 801b294:	9c08      	ldr	r4, [sp, #32]
 801b296:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b29a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b29c:	fb04 fa0e 	mul.w	sl, r4, lr
 801b2a0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b2a4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b2a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b2ac:	44e6      	add	lr, ip
 801b2ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b2b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b2b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b2ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b2be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b2c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b2c6:	ea4e 040a 	orr.w	r4, lr, sl
 801b2ca:	9408      	str	r4, [sp, #32]
 801b2cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b2ce:	2cff      	cmp	r4, #255	; 0xff
 801b2d0:	d021      	beq.n	801b316 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801b2d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b2d4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b2d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b2da:	fb04 fc0c 	mul.w	ip, r4, ip
 801b2de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b2e0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b2e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b2e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b2ea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b2ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b2f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801b2f6:	44e6      	add	lr, ip
 801b2f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b2fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b300:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b304:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b308:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b30c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b310:	ea4e 040a 	orr.w	r4, lr, sl
 801b314:	940d      	str	r4, [sp, #52]	; 0x34
 801b316:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b318:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b31c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b320:	2aff      	cmp	r2, #255	; 0xff
 801b322:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b326:	9c08      	ldr	r4, [sp, #32]
 801b328:	fb08 fc0c 	mul.w	ip, r8, ip
 801b32c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b330:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b334:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b336:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b33a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b33e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b340:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b344:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b348:	fb08 f80e 	mul.w	r8, r8, lr
 801b34c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b350:	fb01 8303 	mla	r3, r1, r3, r8
 801b354:	9908      	ldr	r1, [sp, #32]
 801b356:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b35a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b35e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b360:	fb00 330a 	mla	r3, r0, sl, r3
 801b364:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801b368:	fb09 3e0e 	mla	lr, r9, lr, r3
 801b36c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b370:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b374:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b378:	fa5f f08c 	uxtb.w	r0, ip
 801b37c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801b380:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b384:	d032      	beq.n	801b3ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801b386:	43d2      	mvns	r2, r2
 801b388:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801b38c:	b2d2      	uxtb	r2, r2
 801b38e:	fb0e fe02 	mul.w	lr, lr, r2
 801b392:	f10e 0301 	add.w	r3, lr, #1
 801b396:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801b39a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b39e:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801b3a2:	4350      	muls	r0, r2
 801b3a4:	f807 3c03 	strb.w	r3, [r7, #-3]
 801b3a8:	1c43      	adds	r3, r0, #1
 801b3aa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b3ae:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b3b2:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801b3b6:	4353      	muls	r3, r2
 801b3b8:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b3bc:	1c5a      	adds	r2, r3, #1
 801b3be:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b3c2:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801b3c6:	f807 cc01 	strb.w	ip, [r7, #-1]
 801b3ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b3cc:	3703      	adds	r7, #3
 801b3ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b3d2:	441d      	add	r5, r3
 801b3d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b3d6:	441e      	add	r6, r3
 801b3d8:	e64e      	b.n	801b078 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801b3da:	2800      	cmp	r0, #0
 801b3dc:	f43f aeed 	beq.w	801b1ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801b3e0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b3e4:	9108      	str	r1, [sp, #32]
 801b3e6:	0e09      	lsrs	r1, r1, #24
 801b3e8:	9110      	str	r1, [sp, #64]	; 0x40
 801b3ea:	e6e6      	b.n	801b1ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801b3ec:	f807 0c03 	strb.w	r0, [r7, #-3]
 801b3f0:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b3f4:	e7e7      	b.n	801b3c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801b3f6:	b019      	add	sp, #100	; 0x64
 801b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b400:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801b404:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b408:	2c00      	cmp	r4, #0
 801b40a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b40e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801b412:	fb00 4e03 	mla	lr, r0, r3, r4
 801b416:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801b41a:	f2c0 80b8 	blt.w	801b58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b41e:	45a1      	cmp	r9, r4
 801b420:	f340 80b5 	ble.w	801b58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b424:	2800      	cmp	r0, #0
 801b426:	f2c0 80b2 	blt.w	801b58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b42a:	4580      	cmp	r8, r0
 801b42c:	f340 80af 	ble.w	801b58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b430:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801b434:	f01e 0f01 	tst.w	lr, #1
 801b438:	5d56      	ldrb	r6, [r2, r5]
 801b43a:	bf0c      	ite	eq
 801b43c:	f006 060f 	andeq.w	r6, r6, #15
 801b440:	1136      	asrne	r6, r6, #4
 801b442:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b446:	b2f6      	uxtb	r6, r6
 801b448:	f114 0a01 	adds.w	sl, r4, #1
 801b44c:	f100 80a1 	bmi.w	801b592 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b450:	45d1      	cmp	r9, sl
 801b452:	f340 809e 	ble.w	801b592 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b456:	2800      	cmp	r0, #0
 801b458:	f2c0 809b 	blt.w	801b592 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b45c:	4580      	cmp	r8, r0
 801b45e:	f340 8098 	ble.w	801b592 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b462:	2f00      	cmp	r7, #0
 801b464:	f000 8097 	beq.w	801b596 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801b468:	f10e 0b01 	add.w	fp, lr, #1
 801b46c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801b470:	f01b 0f01 	tst.w	fp, #1
 801b474:	5d55      	ldrb	r5, [r2, r5]
 801b476:	bf0c      	ite	eq
 801b478:	f005 050f 	andeq.w	r5, r5, #15
 801b47c:	112d      	asrne	r5, r5, #4
 801b47e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801b482:	b2ed      	uxtb	r5, r5
 801b484:	f1bc 0f00 	cmp.w	ip, #0
 801b488:	f000 8089 	beq.w	801b59e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801b48c:	2c00      	cmp	r4, #0
 801b48e:	f100 0001 	add.w	r0, r0, #1
 801b492:	f2c0 8082 	blt.w	801b59a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b496:	45a1      	cmp	r9, r4
 801b498:	dd7f      	ble.n	801b59a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b49a:	2800      	cmp	r0, #0
 801b49c:	db7d      	blt.n	801b59a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b49e:	4580      	cmp	r8, r0
 801b4a0:	dd7b      	ble.n	801b59a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b4a2:	eb03 0b0e 	add.w	fp, r3, lr
 801b4a6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b4aa:	f01b 0f01 	tst.w	fp, #1
 801b4ae:	5d14      	ldrb	r4, [r2, r4]
 801b4b0:	bf0c      	ite	eq
 801b4b2:	f004 040f 	andeq.w	r4, r4, #15
 801b4b6:	1124      	asrne	r4, r4, #4
 801b4b8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b4bc:	b2e4      	uxtb	r4, r4
 801b4be:	f1ba 0f00 	cmp.w	sl, #0
 801b4c2:	db6f      	blt.n	801b5a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b4c4:	45d1      	cmp	r9, sl
 801b4c6:	dd6d      	ble.n	801b5a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b4c8:	2800      	cmp	r0, #0
 801b4ca:	db6b      	blt.n	801b5a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b4cc:	4580      	cmp	r8, r0
 801b4ce:	dd69      	ble.n	801b5a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b4d0:	2f00      	cmp	r7, #0
 801b4d2:	d069      	beq.n	801b5a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801b4d4:	3301      	adds	r3, #1
 801b4d6:	449e      	add	lr, r3
 801b4d8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b4dc:	f01e 0f01 	tst.w	lr, #1
 801b4e0:	5cd0      	ldrb	r0, [r2, r3]
 801b4e2:	bf0c      	ite	eq
 801b4e4:	f000 000f 	andeq.w	r0, r0, #15
 801b4e8:	1100      	asrne	r0, r0, #4
 801b4ea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b4ee:	b2c3      	uxtb	r3, r0
 801b4f0:	b2ba      	uxth	r2, r7
 801b4f2:	fa1f fc8c 	uxth.w	ip, ip
 801b4f6:	fb02 f00c 	mul.w	r0, r2, ip
 801b4fa:	0112      	lsls	r2, r2, #4
 801b4fc:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801b500:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b504:	1a12      	subs	r2, r2, r0
 801b506:	fa1f fc8c 	uxth.w	ip, ip
 801b50a:	b292      	uxth	r2, r2
 801b50c:	eba7 070c 	sub.w	r7, r7, ip
 801b510:	436a      	muls	r2, r5
 801b512:	b2bf      	uxth	r7, r7
 801b514:	fb06 2207 	mla	r2, r6, r7, r2
 801b518:	fb0c 2404 	mla	r4, ip, r4, r2
 801b51c:	fb00 4303 	mla	r3, r0, r3, r4
 801b520:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b524:	b38b      	cbz	r3, 801b58a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801b526:	4a21      	ldr	r2, [pc, #132]	; (801b5ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801b528:	6814      	ldr	r4, [r2, #0]
 801b52a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801b52e:	b2e5      	uxtb	r5, r4
 801b530:	4353      	muls	r3, r2
 801b532:	1c5a      	adds	r2, r3, #1
 801b534:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b538:	1212      	asrs	r2, r2, #8
 801b53a:	b290      	uxth	r0, r2
 801b53c:	43d2      	mvns	r2, r2
 801b53e:	fb15 f500 	smulbb	r5, r5, r0
 801b542:	b2d3      	uxtb	r3, r2
 801b544:	780a      	ldrb	r2, [r1, #0]
 801b546:	fb02 5203 	mla	r2, r2, r3, r5
 801b54a:	b292      	uxth	r2, r2
 801b54c:	1c55      	adds	r5, r2, #1
 801b54e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b552:	784d      	ldrb	r5, [r1, #1]
 801b554:	fb15 f503 	smulbb	r5, r5, r3
 801b558:	1212      	asrs	r2, r2, #8
 801b55a:	700a      	strb	r2, [r1, #0]
 801b55c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801b560:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b564:	fb02 5200 	mla	r2, r2, r0, r5
 801b568:	b292      	uxth	r2, r2
 801b56a:	1c55      	adds	r5, r2, #1
 801b56c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b570:	1212      	asrs	r2, r2, #8
 801b572:	704a      	strb	r2, [r1, #1]
 801b574:	788a      	ldrb	r2, [r1, #2]
 801b576:	fb12 f303 	smulbb	r3, r2, r3
 801b57a:	fb04 3300 	mla	r3, r4, r0, r3
 801b57e:	b29b      	uxth	r3, r3
 801b580:	1c5a      	adds	r2, r3, #1
 801b582:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b586:	121b      	asrs	r3, r3, #8
 801b588:	708b      	strb	r3, [r1, #2]
 801b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b58e:	2600      	movs	r6, #0
 801b590:	e75a      	b.n	801b448 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801b592:	2500      	movs	r5, #0
 801b594:	e776      	b.n	801b484 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801b596:	463d      	mov	r5, r7
 801b598:	e774      	b.n	801b484 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801b59a:	2400      	movs	r4, #0
 801b59c:	e78f      	b.n	801b4be <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801b59e:	4663      	mov	r3, ip
 801b5a0:	4664      	mov	r4, ip
 801b5a2:	e7a5      	b.n	801b4f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	e7a3      	b.n	801b4f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801b5a8:	463b      	mov	r3, r7
 801b5aa:	e7a1      	b.n	801b4f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801b5ac:	2400b988 	.word	0x2400b988

0801b5b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b4:	b097      	sub	sp, #92	; 0x5c
 801b5b6:	9214      	str	r2, [sp, #80]	; 0x50
 801b5b8:	9309      	str	r3, [sp, #36]	; 0x24
 801b5ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801b5bc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801b5c0:	9015      	str	r0, [sp, #84]	; 0x54
 801b5c2:	910c      	str	r1, [sp, #48]	; 0x30
 801b5c4:	6850      	ldr	r0, [r2, #4]
 801b5c6:	930e      	str	r3, [sp, #56]	; 0x38
 801b5c8:	6812      	ldr	r2, [r2, #0]
 801b5ca:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801b5ce:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801b5d2:	fb00 1303 	mla	r3, r0, r3, r1
 801b5d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5da:	eb02 0a03 	add.w	sl, r2, r3
 801b5de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5e0:	689b      	ldr	r3, [r3, #8]
 801b5e2:	3301      	adds	r3, #1
 801b5e4:	f023 0301 	bic.w	r3, r3, #1
 801b5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 801b5ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5ec:	681f      	ldr	r7, [r3, #0]
 801b5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	dc03      	bgt.n	801b5fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b5f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	f340 8247 	ble.w	801ba8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801b5fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b602:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b606:	1e48      	subs	r0, r1, #1
 801b608:	f102 3cff 	add.w	ip, r2, #4294967295
 801b60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b60e:	2b00      	cmp	r3, #0
 801b610:	f340 80e5 	ble.w	801b7de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801b614:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801b618:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b61c:	d406      	bmi.n	801b62c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b61e:	4586      	cmp	lr, r0
 801b620:	da04      	bge.n	801b62c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b622:	2b00      	cmp	r3, #0
 801b624:	db02      	blt.n	801b62c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b626:	4563      	cmp	r3, ip
 801b628:	f2c0 80da 	blt.w	801b7e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b62c:	f11e 0e01 	adds.w	lr, lr, #1
 801b630:	f100 80cb 	bmi.w	801b7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b634:	4571      	cmp	r1, lr
 801b636:	f2c0 80c8 	blt.w	801b7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b63a:	3301      	adds	r3, #1
 801b63c:	f100 80c5 	bmi.w	801b7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b640:	429a      	cmp	r2, r3
 801b642:	f2c0 80c2 	blt.w	801b7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b648:	46d0      	mov	r8, sl
 801b64a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b64e:	930d      	str	r3, [sp, #52]	; 0x34
 801b650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b652:	2b00      	cmp	r3, #0
 801b654:	f340 80e3 	ble.w	801b81e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801b658:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b65a:	1430      	asrs	r0, r6, #16
 801b65c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b660:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b664:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b668:	142b      	asrs	r3, r5, #16
 801b66a:	f100 812e 	bmi.w	801b8ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b66e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801b672:	455b      	cmp	r3, fp
 801b674:	f280 8129 	bge.w	801b8ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b678:	2800      	cmp	r0, #0
 801b67a:	f2c0 8126 	blt.w	801b8ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b67e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801b682:	4558      	cmp	r0, fp
 801b684:	f280 8121 	bge.w	801b8ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b688:	fb00 3309 	mla	r3, r0, r9, r3
 801b68c:	0858      	lsrs	r0, r3, #1
 801b68e:	07dc      	lsls	r4, r3, #31
 801b690:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b694:	bf54      	ite	pl
 801b696:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b69a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b69e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b6a2:	fa5f fc8c 	uxtb.w	ip, ip
 801b6a6:	2a00      	cmp	r2, #0
 801b6a8:	f000 80fe 	beq.w	801b8a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801b6ac:	1c58      	adds	r0, r3, #1
 801b6ae:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b6b2:	07c0      	lsls	r0, r0, #31
 801b6b4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b6b8:	bf54      	ite	pl
 801b6ba:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b6be:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b6c2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b6c6:	fa5f f08e 	uxtb.w	r0, lr
 801b6ca:	9010      	str	r0, [sp, #64]	; 0x40
 801b6cc:	b1d9      	cbz	r1, 801b706 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b6ce:	444b      	add	r3, r9
 801b6d0:	0858      	lsrs	r0, r3, #1
 801b6d2:	07dc      	lsls	r4, r3, #31
 801b6d4:	f103 0301 	add.w	r3, r3, #1
 801b6d8:	5c38      	ldrb	r0, [r7, r0]
 801b6da:	bf54      	ite	pl
 801b6dc:	f000 000f 	andpl.w	r0, r0, #15
 801b6e0:	1100      	asrmi	r0, r0, #4
 801b6e2:	07dc      	lsls	r4, r3, #31
 801b6e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b6e8:	b2c0      	uxtb	r0, r0
 801b6ea:	900a      	str	r0, [sp, #40]	; 0x28
 801b6ec:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801b6f0:	f817 e000 	ldrb.w	lr, [r7, r0]
 801b6f4:	bf54      	ite	pl
 801b6f6:	f00e 030f 	andpl.w	r3, lr, #15
 801b6fa:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801b6fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b702:	b2db      	uxtb	r3, r3
 801b704:	9311      	str	r3, [sp, #68]	; 0x44
 801b706:	b292      	uxth	r2, r2
 801b708:	b289      	uxth	r1, r1
 801b70a:	0113      	lsls	r3, r2, #4
 801b70c:	fb02 f001 	mul.w	r0, r2, r1
 801b710:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b712:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b716:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801b71a:	1a1b      	subs	r3, r3, r0
 801b71c:	b289      	uxth	r1, r1
 801b71e:	b29b      	uxth	r3, r3
 801b720:	ebae 0e01 	sub.w	lr, lr, r1
 801b724:	4353      	muls	r3, r2
 801b726:	fa1f fe8e 	uxth.w	lr, lr
 801b72a:	fb0c 320e 	mla	r2, ip, lr, r3
 801b72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b730:	fb01 2203 	mla	r2, r1, r3, r2
 801b734:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b736:	fb00 2203 	mla	r2, r0, r3, r2
 801b73a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b73e:	2a00      	cmp	r2, #0
 801b740:	d039      	beq.n	801b7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b742:	4bc7      	ldr	r3, [pc, #796]	; (801ba60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801b744:	6819      	ldr	r1, [r3, #0]
 801b746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b748:	fa5f fc81 	uxtb.w	ip, r1
 801b74c:	435a      	muls	r2, r3
 801b74e:	1c53      	adds	r3, r2, #1
 801b750:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b754:	1212      	asrs	r2, r2, #8
 801b756:	b290      	uxth	r0, r2
 801b758:	43d2      	mvns	r2, r2
 801b75a:	fb1c fc00 	smulbb	ip, ip, r0
 801b75e:	b2d3      	uxtb	r3, r2
 801b760:	f898 2000 	ldrb.w	r2, [r8]
 801b764:	fb02 c203 	mla	r2, r2, r3, ip
 801b768:	b292      	uxth	r2, r2
 801b76a:	f102 0c01 	add.w	ip, r2, #1
 801b76e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b772:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b776:	fb1c fc03 	smulbb	ip, ip, r3
 801b77a:	1212      	asrs	r2, r2, #8
 801b77c:	f888 2000 	strb.w	r2, [r8]
 801b780:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801b784:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801b788:	fb02 c200 	mla	r2, r2, r0, ip
 801b78c:	b292      	uxth	r2, r2
 801b78e:	f102 0c01 	add.w	ip, r2, #1
 801b792:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b796:	1212      	asrs	r2, r2, #8
 801b798:	f888 2001 	strb.w	r2, [r8, #1]
 801b79c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b7a0:	fb12 f303 	smulbb	r3, r2, r3
 801b7a4:	fb01 3300 	mla	r3, r1, r0, r3
 801b7a8:	b29b      	uxth	r3, r3
 801b7aa:	1c5a      	adds	r2, r3, #1
 801b7ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b7b0:	121b      	asrs	r3, r3, #8
 801b7b2:	f888 3002 	strb.w	r3, [r8, #2]
 801b7b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b7b8:	f108 0803 	add.w	r8, r8, #3
 801b7bc:	441d      	add	r5, r3
 801b7be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b7c0:	441e      	add	r6, r3
 801b7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7c4:	3b01      	subs	r3, #1
 801b7c6:	930d      	str	r3, [sp, #52]	; 0x34
 801b7c8:	e742      	b.n	801b650 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b7ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b7cc:	f10a 0a03 	add.w	sl, sl, #3
 801b7d0:	441d      	add	r5, r3
 801b7d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b7d4:	441e      	add	r6, r3
 801b7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7d8:	3b01      	subs	r3, #1
 801b7da:	9309      	str	r3, [sp, #36]	; 0x24
 801b7dc:	e716      	b.n	801b60c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b7de:	d024      	beq.n	801b82a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801b7e4:	3b01      	subs	r3, #1
 801b7e6:	fb00 5003 	mla	r0, r0, r3, r5
 801b7ea:	1400      	asrs	r0, r0, #16
 801b7ec:	f53f af2b 	bmi.w	801b646 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b7f0:	3901      	subs	r1, #1
 801b7f2:	4288      	cmp	r0, r1
 801b7f4:	f6bf af27 	bge.w	801b646 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b7f8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801b7fa:	fb01 6303 	mla	r3, r1, r3, r6
 801b7fe:	141b      	asrs	r3, r3, #16
 801b800:	f53f af21 	bmi.w	801b646 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b804:	3a01      	subs	r2, #1
 801b806:	4293      	cmp	r3, r2
 801b808:	f6bf af1d 	bge.w	801b646 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b80c:	f10a 0e03 	add.w	lr, sl, #3
 801b810:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b814:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b818:	f1b8 0f00 	cmp.w	r8, #0
 801b81c:	dc76      	bgt.n	801b90c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801b81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b820:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b824:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b828:	44a2      	add	sl, r4
 801b82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	f340 812c 	ble.w	801ba8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801b832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b836:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b838:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b83c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b840:	eef0 6a62 	vmov.f32	s13, s5
 801b844:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b848:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b84c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b850:	ee16 5a90 	vmov	r5, s13
 801b854:	eef0 6a43 	vmov.f32	s13, s6
 801b858:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b85c:	ee16 6a90 	vmov	r6, s13
 801b860:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b864:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b868:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b86c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b870:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b874:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b878:	ee12 2a90 	vmov	r2, s5
 801b87c:	eef0 2a47 	vmov.f32	s5, s14
 801b880:	fb92 f3f3 	sdiv	r3, r2, r3
 801b884:	ee13 2a10 	vmov	r2, s6
 801b888:	9323      	str	r3, [sp, #140]	; 0x8c
 801b88a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b88c:	eeb0 3a67 	vmov.f32	s6, s15
 801b890:	fb92 f3f3 	sdiv	r3, r2, r3
 801b894:	9324      	str	r3, [sp, #144]	; 0x90
 801b896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b898:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b89a:	3b01      	subs	r3, #1
 801b89c:	930c      	str	r3, [sp, #48]	; 0x30
 801b89e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b8a0:	bf08      	it	eq
 801b8a2:	4613      	moveq	r3, r2
 801b8a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b8a6:	e6a2      	b.n	801b5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b8a8:	2900      	cmp	r1, #0
 801b8aa:	f43f af2c 	beq.w	801b706 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b8ae:	eb09 0003 	add.w	r0, r9, r3
 801b8b2:	0843      	lsrs	r3, r0, #1
 801b8b4:	07c0      	lsls	r0, r0, #31
 801b8b6:	5cfb      	ldrb	r3, [r7, r3]
 801b8b8:	bf54      	ite	pl
 801b8ba:	f003 030f 	andpl.w	r3, r3, #15
 801b8be:	111b      	asrmi	r3, r3, #4
 801b8c0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b8c4:	b2db      	uxtb	r3, r3
 801b8c6:	930a      	str	r3, [sp, #40]	; 0x28
 801b8c8:	e71d      	b.n	801b706 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b8ca:	f113 0b01 	adds.w	fp, r3, #1
 801b8ce:	f53f af72 	bmi.w	801b7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b8d2:	45dc      	cmp	ip, fp
 801b8d4:	f6ff af6f 	blt.w	801b7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b8d8:	f110 0b01 	adds.w	fp, r0, #1
 801b8dc:	f53f af6b 	bmi.w	801b7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b8e0:	45de      	cmp	lr, fp
 801b8e2:	f6ff af68 	blt.w	801b7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b8e6:	9302      	str	r3, [sp, #8]
 801b8e8:	fa0f f38e 	sxth.w	r3, lr
 801b8ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b8ee:	9301      	str	r3, [sp, #4]
 801b8f0:	fa0f f38c 	sxth.w	r3, ip
 801b8f4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b8f8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b8fc:	9300      	str	r3, [sp, #0]
 801b8fe:	463a      	mov	r2, r7
 801b900:	464b      	mov	r3, r9
 801b902:	4641      	mov	r1, r8
 801b904:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b906:	f7ff fd79 	bl	801b3fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801b90a:	e754      	b.n	801b7b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b90c:	142a      	asrs	r2, r5, #16
 801b90e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b912:	1433      	asrs	r3, r6, #16
 801b914:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b918:	fb09 2303 	mla	r3, r9, r3, r2
 801b91c:	085a      	lsrs	r2, r3, #1
 801b91e:	07dc      	lsls	r4, r3, #31
 801b920:	5cba      	ldrb	r2, [r7, r2]
 801b922:	bf54      	ite	pl
 801b924:	f002 020f 	andpl.w	r2, r2, #15
 801b928:	1112      	asrmi	r2, r2, #4
 801b92a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b92e:	b2d2      	uxtb	r2, r2
 801b930:	2900      	cmp	r1, #0
 801b932:	f000 8097 	beq.w	801ba64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b936:	f103 0b01 	add.w	fp, r3, #1
 801b93a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801b93e:	f01b 0f01 	tst.w	fp, #1
 801b942:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b946:	bf0c      	ite	eq
 801b948:	f00c 0c0f 	andeq.w	ip, ip, #15
 801b94c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801b950:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b954:	fa5f f48c 	uxtb.w	r4, ip
 801b958:	9412      	str	r4, [sp, #72]	; 0x48
 801b95a:	b300      	cbz	r0, 801b99e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801b95c:	444b      	add	r3, r9
 801b95e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b962:	07dc      	lsls	r4, r3, #31
 801b964:	f103 0301 	add.w	r3, r3, #1
 801b968:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b96c:	bf54      	ite	pl
 801b96e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b972:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b976:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b97a:	fa5f f48c 	uxtb.w	r4, ip
 801b97e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b982:	940b      	str	r4, [sp, #44]	; 0x2c
 801b984:	07dc      	lsls	r4, r3, #31
 801b986:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b98a:	bf54      	ite	pl
 801b98c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b990:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b994:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b998:	fa5f f38c 	uxtb.w	r3, ip
 801b99c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b99e:	b289      	uxth	r1, r1
 801b9a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b9a2:	b280      	uxth	r0, r0
 801b9a4:	fb01 f300 	mul.w	r3, r1, r0
 801b9a8:	0109      	lsls	r1, r1, #4
 801b9aa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801b9ae:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801b9b2:	1ac9      	subs	r1, r1, r3
 801b9b4:	b280      	uxth	r0, r0
 801b9b6:	b289      	uxth	r1, r1
 801b9b8:	ebac 0c00 	sub.w	ip, ip, r0
 801b9bc:	4361      	muls	r1, r4
 801b9be:	fa1f fc8c 	uxth.w	ip, ip
 801b9c2:	fb02 120c 	mla	r2, r2, ip, r1
 801b9c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b9c8:	fb00 2001 	mla	r0, r0, r1, r2
 801b9cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9ce:	fb03 0302 	mla	r3, r3, r2, r0
 801b9d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d039      	beq.n	801ba4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b9da:	4a21      	ldr	r2, [pc, #132]	; (801ba60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801b9dc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b9e0:	6810      	ldr	r0, [r2, #0]
 801b9e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b9e4:	fa5f fc80 	uxtb.w	ip, r0
 801b9e8:	4353      	muls	r3, r2
 801b9ea:	1c5a      	adds	r2, r3, #1
 801b9ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b9f0:	121b      	asrs	r3, r3, #8
 801b9f2:	b29a      	uxth	r2, r3
 801b9f4:	43db      	mvns	r3, r3
 801b9f6:	fb1c fc02 	smulbb	ip, ip, r2
 801b9fa:	b2db      	uxtb	r3, r3
 801b9fc:	fb01 c103 	mla	r1, r1, r3, ip
 801ba00:	b289      	uxth	r1, r1
 801ba02:	f101 0c01 	add.w	ip, r1, #1
 801ba06:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801ba0a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801ba0e:	fb1c fc03 	smulbb	ip, ip, r3
 801ba12:	1209      	asrs	r1, r1, #8
 801ba14:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801ba18:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801ba1c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801ba20:	fb01 c102 	mla	r1, r1, r2, ip
 801ba24:	b289      	uxth	r1, r1
 801ba26:	f101 0c01 	add.w	ip, r1, #1
 801ba2a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801ba2e:	1209      	asrs	r1, r1, #8
 801ba30:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801ba34:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ba38:	fb11 f303 	smulbb	r3, r1, r3
 801ba3c:	fb00 3002 	mla	r0, r0, r2, r3
 801ba40:	b280      	uxth	r0, r0
 801ba42:	1c42      	adds	r2, r0, #1
 801ba44:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ba48:	1200      	asrs	r0, r0, #8
 801ba4a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801ba4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ba50:	f10e 0e03 	add.w	lr, lr, #3
 801ba54:	f108 38ff 	add.w	r8, r8, #4294967295
 801ba58:	441d      	add	r5, r3
 801ba5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ba5c:	441e      	add	r6, r3
 801ba5e:	e6db      	b.n	801b818 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801ba60:	2400b988 	.word	0x2400b988
 801ba64:	2800      	cmp	r0, #0
 801ba66:	d09a      	beq.n	801b99e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ba68:	444b      	add	r3, r9
 801ba6a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ba6e:	07db      	lsls	r3, r3, #31
 801ba70:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ba74:	bf54      	ite	pl
 801ba76:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ba7a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ba7e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ba82:	fa5f f38c 	uxtb.w	r3, ip
 801ba86:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba88:	e789      	b.n	801b99e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ba8a:	b017      	add	sp, #92	; 0x5c
 801ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba90 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba94:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801ba98:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ba9c:	2d00      	cmp	r5, #0
 801ba9e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801baa2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801baa6:	fb04 5e03 	mla	lr, r4, r3, r5
 801baaa:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801baae:	f2c0 80b1 	blt.w	801bc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801bab2:	45a9      	cmp	r9, r5
 801bab4:	f340 80ae 	ble.w	801bc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801bab8:	2c00      	cmp	r4, #0
 801baba:	f2c0 80ab 	blt.w	801bc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801babe:	45a0      	cmp	r8, r4
 801bac0:	f340 80a8 	ble.w	801bc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801bac4:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801bac8:	f01e 0f01 	tst.w	lr, #1
 801bacc:	5d97      	ldrb	r7, [r2, r6]
 801bace:	bf0c      	ite	eq
 801bad0:	f007 070f 	andeq.w	r7, r7, #15
 801bad4:	113f      	asrne	r7, r7, #4
 801bad6:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801bada:	b2ff      	uxtb	r7, r7
 801badc:	f115 0a01 	adds.w	sl, r5, #1
 801bae0:	f100 809a 	bmi.w	801bc18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801bae4:	45d1      	cmp	r9, sl
 801bae6:	f340 8097 	ble.w	801bc18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801baea:	2c00      	cmp	r4, #0
 801baec:	f2c0 8094 	blt.w	801bc18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801baf0:	45a0      	cmp	r8, r4
 801baf2:	f340 8091 	ble.w	801bc18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801baf6:	2800      	cmp	r0, #0
 801baf8:	f000 8090 	beq.w	801bc1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801bafc:	f10e 0b01 	add.w	fp, lr, #1
 801bb00:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801bb04:	f01b 0f01 	tst.w	fp, #1
 801bb08:	5d96      	ldrb	r6, [r2, r6]
 801bb0a:	bf0c      	ite	eq
 801bb0c:	f006 060f 	andeq.w	r6, r6, #15
 801bb10:	1136      	asrne	r6, r6, #4
 801bb12:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801bb16:	b2f6      	uxtb	r6, r6
 801bb18:	f1bc 0f00 	cmp.w	ip, #0
 801bb1c:	f000 8082 	beq.w	801bc24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801bb20:	2d00      	cmp	r5, #0
 801bb22:	f104 0401 	add.w	r4, r4, #1
 801bb26:	db7b      	blt.n	801bc20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bb28:	45a9      	cmp	r9, r5
 801bb2a:	dd79      	ble.n	801bc20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bb2c:	2c00      	cmp	r4, #0
 801bb2e:	db77      	blt.n	801bc20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bb30:	45a0      	cmp	r8, r4
 801bb32:	dd75      	ble.n	801bc20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bb34:	eb03 0b0e 	add.w	fp, r3, lr
 801bb38:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801bb3c:	f01b 0f01 	tst.w	fp, #1
 801bb40:	5d55      	ldrb	r5, [r2, r5]
 801bb42:	bf0c      	ite	eq
 801bb44:	f005 050f 	andeq.w	r5, r5, #15
 801bb48:	112d      	asrne	r5, r5, #4
 801bb4a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801bb4e:	b2ed      	uxtb	r5, r5
 801bb50:	f1ba 0f00 	cmp.w	sl, #0
 801bb54:	db69      	blt.n	801bc2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801bb56:	45d1      	cmp	r9, sl
 801bb58:	dd67      	ble.n	801bc2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801bb5a:	2c00      	cmp	r4, #0
 801bb5c:	db65      	blt.n	801bc2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801bb5e:	45a0      	cmp	r8, r4
 801bb60:	dd63      	ble.n	801bc2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801bb62:	2800      	cmp	r0, #0
 801bb64:	d063      	beq.n	801bc2e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801bb66:	3301      	adds	r3, #1
 801bb68:	449e      	add	lr, r3
 801bb6a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801bb6e:	f01e 0f01 	tst.w	lr, #1
 801bb72:	5cd4      	ldrb	r4, [r2, r3]
 801bb74:	bf0c      	ite	eq
 801bb76:	f004 040f 	andeq.w	r4, r4, #15
 801bb7a:	1124      	asrne	r4, r4, #4
 801bb7c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801bb80:	b2e3      	uxtb	r3, r4
 801bb82:	b282      	uxth	r2, r0
 801bb84:	fa1f fc8c 	uxth.w	ip, ip
 801bb88:	fb02 f40c 	mul.w	r4, r2, ip
 801bb8c:	0112      	lsls	r2, r2, #4
 801bb8e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801bb92:	fa1f f08c 	uxth.w	r0, ip
 801bb96:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801bb9a:	1b12      	subs	r2, r2, r4
 801bb9c:	ebac 0c00 	sub.w	ip, ip, r0
 801bba0:	b292      	uxth	r2, r2
 801bba2:	fa1f fc8c 	uxth.w	ip, ip
 801bba6:	4372      	muls	r2, r6
 801bba8:	fb07 220c 	mla	r2, r7, ip, r2
 801bbac:	fb00 2005 	mla	r0, r0, r5, r2
 801bbb0:	fb04 0303 	mla	r3, r4, r3, r0
 801bbb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bbb8:	b353      	cbz	r3, 801bc10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801bbba:	4a1e      	ldr	r2, [pc, #120]	; (801bc34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801bbbc:	7808      	ldrb	r0, [r1, #0]
 801bbbe:	6814      	ldr	r4, [r2, #0]
 801bbc0:	b29a      	uxth	r2, r3
 801bbc2:	43db      	mvns	r3, r3
 801bbc4:	b2e5      	uxtb	r5, r4
 801bbc6:	b2db      	uxtb	r3, r3
 801bbc8:	fb15 f502 	smulbb	r5, r5, r2
 801bbcc:	fb00 5003 	mla	r0, r0, r3, r5
 801bbd0:	b280      	uxth	r0, r0
 801bbd2:	1c45      	adds	r5, r0, #1
 801bbd4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801bbd8:	784d      	ldrb	r5, [r1, #1]
 801bbda:	fb15 f503 	smulbb	r5, r5, r3
 801bbde:	1200      	asrs	r0, r0, #8
 801bbe0:	7008      	strb	r0, [r1, #0]
 801bbe2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801bbe6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801bbea:	fb00 5002 	mla	r0, r0, r2, r5
 801bbee:	b280      	uxth	r0, r0
 801bbf0:	1c45      	adds	r5, r0, #1
 801bbf2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801bbf6:	1200      	asrs	r0, r0, #8
 801bbf8:	7048      	strb	r0, [r1, #1]
 801bbfa:	7888      	ldrb	r0, [r1, #2]
 801bbfc:	fb10 f303 	smulbb	r3, r0, r3
 801bc00:	fb04 3202 	mla	r2, r4, r2, r3
 801bc04:	b292      	uxth	r2, r2
 801bc06:	1c53      	adds	r3, r2, #1
 801bc08:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801bc0c:	1212      	asrs	r2, r2, #8
 801bc0e:	708a      	strb	r2, [r1, #2]
 801bc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc14:	2700      	movs	r7, #0
 801bc16:	e761      	b.n	801badc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801bc18:	2600      	movs	r6, #0
 801bc1a:	e77d      	b.n	801bb18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801bc1c:	4606      	mov	r6, r0
 801bc1e:	e77b      	b.n	801bb18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801bc20:	2500      	movs	r5, #0
 801bc22:	e795      	b.n	801bb50 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801bc24:	4663      	mov	r3, ip
 801bc26:	4665      	mov	r5, ip
 801bc28:	e7ab      	b.n	801bb82 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	e7a9      	b.n	801bb82 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801bc2e:	4603      	mov	r3, r0
 801bc30:	e7a7      	b.n	801bb82 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801bc32:	bf00      	nop
 801bc34:	2400b988 	.word	0x2400b988

0801bc38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc3c:	b093      	sub	sp, #76	; 0x4c
 801bc3e:	461c      	mov	r4, r3
 801bc40:	920c      	str	r2, [sp, #48]	; 0x30
 801bc42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bc44:	9011      	str	r0, [sp, #68]	; 0x44
 801bc46:	9107      	str	r1, [sp, #28]
 801bc48:	6850      	ldr	r0, [r2, #4]
 801bc4a:	6812      	ldr	r2, [r2, #0]
 801bc4c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801bc50:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801bc54:	fb00 1303 	mla	r3, r0, r3, r1
 801bc58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc5c:	eb02 0b03 	add.w	fp, r2, r3
 801bc60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc62:	689b      	ldr	r3, [r3, #8]
 801bc64:	3301      	adds	r3, #1
 801bc66:	f023 0301 	bic.w	r3, r3, #1
 801bc6a:	9309      	str	r3, [sp, #36]	; 0x24
 801bc6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc6e:	f8d3 8000 	ldr.w	r8, [r3]
 801bc72:	9b07      	ldr	r3, [sp, #28]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	dc03      	bgt.n	801bc80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	f340 822b 	ble.w	801c0d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801bc80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bc86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bc8a:	1e48      	subs	r0, r1, #1
 801bc8c:	1e57      	subs	r7, r2, #1
 801bc8e:	2c00      	cmp	r4, #0
 801bc90:	f340 80d7 	ble.w	801be42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801bc94:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bc98:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bc9c:	d406      	bmi.n	801bcac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bc9e:	4584      	cmp	ip, r0
 801bca0:	da04      	bge.n	801bcac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	db02      	blt.n	801bcac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bca6:	42bb      	cmp	r3, r7
 801bca8:	f2c0 80cc 	blt.w	801be44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801bcac:	f11c 0c01 	adds.w	ip, ip, #1
 801bcb0:	f100 80bf 	bmi.w	801be32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bcb4:	4561      	cmp	r1, ip
 801bcb6:	f2c0 80bc 	blt.w	801be32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bcba:	3301      	adds	r3, #1
 801bcbc:	f100 80b9 	bmi.w	801be32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bcc0:	429a      	cmp	r2, r3
 801bcc2:	f2c0 80b6 	blt.w	801be32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bcc6:	46a2      	mov	sl, r4
 801bcc8:	465f      	mov	r7, fp
 801bcca:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801bcce:	f1ba 0f00 	cmp.w	sl, #0
 801bcd2:	f340 80d4 	ble.w	801be7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801bcd6:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801bcda:	1430      	asrs	r0, r6, #16
 801bcdc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801bce0:	9308      	str	r3, [sp, #32]
 801bce2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bce4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801bce8:	142b      	asrs	r3, r5, #16
 801bcea:	f100 8124 	bmi.w	801bf36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bcee:	f10c 32ff 	add.w	r2, ip, #4294967295
 801bcf2:	4293      	cmp	r3, r2
 801bcf4:	f280 811f 	bge.w	801bf36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bcf8:	2800      	cmp	r0, #0
 801bcfa:	f2c0 811c 	blt.w	801bf36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bcfe:	f10e 32ff 	add.w	r2, lr, #4294967295
 801bd02:	4290      	cmp	r0, r2
 801bd04:	f280 8117 	bge.w	801bf36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bd08:	fb00 3309 	mla	r3, r0, r9, r3
 801bd0c:	0858      	lsrs	r0, r3, #1
 801bd0e:	07da      	lsls	r2, r3, #31
 801bd10:	9a08      	ldr	r2, [sp, #32]
 801bd12:	f818 c000 	ldrb.w	ip, [r8, r0]
 801bd16:	bf54      	ite	pl
 801bd18:	f00c 0c0f 	andpl.w	ip, ip, #15
 801bd1c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801bd20:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801bd24:	fa5f fc8c 	uxtb.w	ip, ip
 801bd28:	2a00      	cmp	r2, #0
 801bd2a:	f000 80ed 	beq.w	801bf08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801bd2e:	1c58      	adds	r0, r3, #1
 801bd30:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801bd34:	07c0      	lsls	r0, r0, #31
 801bd36:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801bd3a:	bf54      	ite	pl
 801bd3c:	f00e 0e0f 	andpl.w	lr, lr, #15
 801bd40:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801bd44:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801bd48:	fa5f fe8e 	uxtb.w	lr, lr
 801bd4c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801bd50:	b1c9      	cbz	r1, 801bd86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bd52:	444b      	add	r3, r9
 801bd54:	0858      	lsrs	r0, r3, #1
 801bd56:	07da      	lsls	r2, r3, #31
 801bd58:	f818 0000 	ldrb.w	r0, [r8, r0]
 801bd5c:	bf54      	ite	pl
 801bd5e:	f000 000f 	andpl.w	r0, r0, #15
 801bd62:	1100      	asrmi	r0, r0, #4
 801bd64:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801bd68:	b2c0      	uxtb	r0, r0
 801bd6a:	900a      	str	r0, [sp, #40]	; 0x28
 801bd6c:	1c58      	adds	r0, r3, #1
 801bd6e:	0843      	lsrs	r3, r0, #1
 801bd70:	07c2      	lsls	r2, r0, #31
 801bd72:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bd76:	bf54      	ite	pl
 801bd78:	f003 030f 	andpl.w	r3, r3, #15
 801bd7c:	111b      	asrmi	r3, r3, #4
 801bd7e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bd82:	b2db      	uxtb	r3, r3
 801bd84:	930e      	str	r3, [sp, #56]	; 0x38
 801bd86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bd8a:	b289      	uxth	r1, r1
 801bd8c:	fb02 f301 	mul.w	r3, r2, r1
 801bd90:	0112      	lsls	r2, r2, #4
 801bd92:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801bd96:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801bd9a:	1ad2      	subs	r2, r2, r3
 801bd9c:	b289      	uxth	r1, r1
 801bd9e:	b292      	uxth	r2, r2
 801bda0:	1a40      	subs	r0, r0, r1
 801bda2:	fa1f fe80 	uxth.w	lr, r0
 801bda6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bda8:	4342      	muls	r2, r0
 801bdaa:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801bdae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bdb0:	fb01 c102 	mla	r1, r1, r2, ip
 801bdb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bdb6:	fb03 1302 	mla	r3, r3, r2, r1
 801bdba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bdbe:	b383      	cbz	r3, 801be22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bdc0:	4ac6      	ldr	r2, [pc, #792]	; (801c0dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801bdc2:	2bff      	cmp	r3, #255	; 0xff
 801bdc4:	6812      	ldr	r2, [r2, #0]
 801bdc6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801bdca:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801bdce:	b2d2      	uxtb	r2, r2
 801bdd0:	f000 80ac 	beq.w	801bf2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801bdd4:	b299      	uxth	r1, r3
 801bdd6:	43db      	mvns	r3, r3
 801bdd8:	f897 c000 	ldrb.w	ip, [r7]
 801bddc:	fb12 f201 	smulbb	r2, r2, r1
 801bde0:	b2db      	uxtb	r3, r3
 801bde2:	fb10 f001 	smulbb	r0, r0, r1
 801bde6:	fb0c 2203 	mla	r2, ip, r3, r2
 801bdea:	fb1e f101 	smulbb	r1, lr, r1
 801bdee:	b292      	uxth	r2, r2
 801bdf0:	f102 0c01 	add.w	ip, r2, #1
 801bdf4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801bdf8:	1212      	asrs	r2, r2, #8
 801bdfa:	703a      	strb	r2, [r7, #0]
 801bdfc:	787a      	ldrb	r2, [r7, #1]
 801bdfe:	fb02 0003 	mla	r0, r2, r3, r0
 801be02:	b280      	uxth	r0, r0
 801be04:	1c42      	adds	r2, r0, #1
 801be06:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801be0a:	78ba      	ldrb	r2, [r7, #2]
 801be0c:	fb02 1303 	mla	r3, r2, r3, r1
 801be10:	1200      	asrs	r0, r0, #8
 801be12:	b29b      	uxth	r3, r3
 801be14:	7078      	strb	r0, [r7, #1]
 801be16:	f103 0e01 	add.w	lr, r3, #1
 801be1a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801be1e:	121b      	asrs	r3, r3, #8
 801be20:	70bb      	strb	r3, [r7, #2]
 801be22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801be24:	3703      	adds	r7, #3
 801be26:	f10a 3aff 	add.w	sl, sl, #4294967295
 801be2a:	441d      	add	r5, r3
 801be2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801be2e:	441e      	add	r6, r3
 801be30:	e74d      	b.n	801bcce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801be32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801be34:	3c01      	subs	r4, #1
 801be36:	f10b 0b03 	add.w	fp, fp, #3
 801be3a:	441d      	add	r5, r3
 801be3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801be3e:	441e      	add	r6, r3
 801be40:	e725      	b.n	801bc8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801be42:	d021      	beq.n	801be88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801be44:	1e63      	subs	r3, r4, #1
 801be46:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801be48:	fb00 5003 	mla	r0, r0, r3, r5
 801be4c:	1400      	asrs	r0, r0, #16
 801be4e:	f53f af3a 	bmi.w	801bcc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801be52:	3901      	subs	r1, #1
 801be54:	4288      	cmp	r0, r1
 801be56:	f6bf af36 	bge.w	801bcc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801be5a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801be5c:	fb01 6303 	mla	r3, r1, r3, r6
 801be60:	141b      	asrs	r3, r3, #16
 801be62:	f53f af30 	bmi.w	801bcc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801be66:	3a01      	subs	r2, #1
 801be68:	4293      	cmp	r3, r2
 801be6a:	f6bf af2c 	bge.w	801bcc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801be6e:	f10b 0c03 	add.w	ip, fp, #3
 801be72:	46a6      	mov	lr, r4
 801be74:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801be78:	f1be 0f00 	cmp.w	lr, #0
 801be7c:	dc79      	bgt.n	801bf72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801be7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801be82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be86:	44a3      	add	fp, r4
 801be88:	9b07      	ldr	r3, [sp, #28]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	f340 8123 	ble.w	801c0d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801be90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801be96:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be9e:	eef0 6a62 	vmov.f32	s13, s5
 801bea2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bea6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801beaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801beae:	ee16 5a90 	vmov	r5, s13
 801beb2:	eef0 6a43 	vmov.f32	s13, s6
 801beb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801beba:	ee16 6a90 	vmov	r6, s13
 801bebe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bec2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bec6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801beca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bece:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bed2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bed6:	ee12 2a90 	vmov	r2, s5
 801beda:	eef0 2a47 	vmov.f32	s5, s14
 801bede:	fb92 f3f3 	sdiv	r3, r2, r3
 801bee2:	ee13 2a10 	vmov	r2, s6
 801bee6:	931f      	str	r3, [sp, #124]	; 0x7c
 801bee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801beea:	eeb0 3a67 	vmov.f32	s6, s15
 801beee:	fb92 f3f3 	sdiv	r3, r2, r3
 801bef2:	9320      	str	r3, [sp, #128]	; 0x80
 801bef4:	9b07      	ldr	r3, [sp, #28]
 801bef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bef8:	3b01      	subs	r3, #1
 801befa:	9307      	str	r3, [sp, #28]
 801befc:	bf08      	it	eq
 801befe:	4614      	moveq	r4, r2
 801bf00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bf02:	bf18      	it	ne
 801bf04:	461c      	movne	r4, r3
 801bf06:	e6b4      	b.n	801bc72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bf08:	2900      	cmp	r1, #0
 801bf0a:	f43f af3c 	beq.w	801bd86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bf0e:	eb09 0003 	add.w	r0, r9, r3
 801bf12:	0843      	lsrs	r3, r0, #1
 801bf14:	07c0      	lsls	r0, r0, #31
 801bf16:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bf1a:	bf54      	ite	pl
 801bf1c:	f003 030f 	andpl.w	r3, r3, #15
 801bf20:	111b      	asrmi	r3, r3, #4
 801bf22:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bf26:	b2db      	uxtb	r3, r3
 801bf28:	930a      	str	r3, [sp, #40]	; 0x28
 801bf2a:	e72c      	b.n	801bd86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bf2c:	703a      	strb	r2, [r7, #0]
 801bf2e:	7078      	strb	r0, [r7, #1]
 801bf30:	f887 e002 	strb.w	lr, [r7, #2]
 801bf34:	e775      	b.n	801be22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bf36:	1c5a      	adds	r2, r3, #1
 801bf38:	f53f af73 	bmi.w	801be22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bf3c:	4594      	cmp	ip, r2
 801bf3e:	f6ff af70 	blt.w	801be22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bf42:	1c42      	adds	r2, r0, #1
 801bf44:	f53f af6d 	bmi.w	801be22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bf48:	4596      	cmp	lr, r2
 801bf4a:	f6ff af6a 	blt.w	801be22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bf4e:	9302      	str	r3, [sp, #8]
 801bf50:	fa0f f38e 	sxth.w	r3, lr
 801bf54:	9a08      	ldr	r2, [sp, #32]
 801bf56:	9301      	str	r3, [sp, #4]
 801bf58:	fa0f f38c 	sxth.w	r3, ip
 801bf5c:	9105      	str	r1, [sp, #20]
 801bf5e:	4639      	mov	r1, r7
 801bf60:	9300      	str	r3, [sp, #0]
 801bf62:	464b      	mov	r3, r9
 801bf64:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801bf68:	4642      	mov	r2, r8
 801bf6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bf6c:	f7ff fd90 	bl	801ba90 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801bf70:	e757      	b.n	801be22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bf72:	142a      	asrs	r2, r5, #16
 801bf74:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bf78:	1433      	asrs	r3, r6, #16
 801bf7a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801bf7e:	fb09 2303 	mla	r3, r9, r3, r2
 801bf82:	085a      	lsrs	r2, r3, #1
 801bf84:	07d9      	lsls	r1, r3, #31
 801bf86:	f818 2002 	ldrb.w	r2, [r8, r2]
 801bf8a:	bf54      	ite	pl
 801bf8c:	f002 020f 	andpl.w	r2, r2, #15
 801bf90:	1112      	asrmi	r2, r2, #4
 801bf92:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bf96:	b2d2      	uxtb	r2, r2
 801bf98:	2800      	cmp	r0, #0
 801bf9a:	f000 8085 	beq.w	801c0a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bf9e:	f103 0a01 	add.w	sl, r3, #1
 801bfa2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801bfa6:	f01a 0f01 	tst.w	sl, #1
 801bfaa:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bfae:	bf0c      	ite	eq
 801bfb0:	f001 010f 	andeq.w	r1, r1, #15
 801bfb4:	1109      	asrne	r1, r1, #4
 801bfb6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bfba:	b2c9      	uxtb	r1, r1
 801bfbc:	910f      	str	r1, [sp, #60]	; 0x3c
 801bfbe:	b1df      	cbz	r7, 801bff8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801bfc0:	444b      	add	r3, r9
 801bfc2:	0859      	lsrs	r1, r3, #1
 801bfc4:	f013 0f01 	tst.w	r3, #1
 801bfc8:	f103 0301 	add.w	r3, r3, #1
 801bfcc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bfd0:	bf0c      	ite	eq
 801bfd2:	f001 010f 	andeq.w	r1, r1, #15
 801bfd6:	1109      	asrne	r1, r1, #4
 801bfd8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bfdc:	b2c9      	uxtb	r1, r1
 801bfde:	910b      	str	r1, [sp, #44]	; 0x2c
 801bfe0:	0859      	lsrs	r1, r3, #1
 801bfe2:	07db      	lsls	r3, r3, #31
 801bfe4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bfe8:	bf54      	ite	pl
 801bfea:	f001 010f 	andpl.w	r1, r1, #15
 801bfee:	1109      	asrmi	r1, r1, #4
 801bff0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bff4:	b2c9      	uxtb	r1, r1
 801bff6:	9110      	str	r1, [sp, #64]	; 0x40
 801bff8:	b280      	uxth	r0, r0
 801bffa:	b2bf      	uxth	r7, r7
 801bffc:	fb00 f307 	mul.w	r3, r0, r7
 801c000:	0100      	lsls	r0, r0, #4
 801c002:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801c006:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801c00a:	1ac0      	subs	r0, r0, r3
 801c00c:	b2bf      	uxth	r7, r7
 801c00e:	b280      	uxth	r0, r0
 801c010:	1bc9      	subs	r1, r1, r7
 801c012:	fa1f fa81 	uxth.w	sl, r1
 801c016:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c018:	4348      	muls	r0, r1
 801c01a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c01c:	fb02 020a 	mla	r2, r2, sl, r0
 801c020:	fb07 2701 	mla	r7, r7, r1, r2
 801c024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c026:	fb03 7302 	mla	r3, r3, r2, r7
 801c02a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c02e:	b393      	cbz	r3, 801c096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c030:	4a2a      	ldr	r2, [pc, #168]	; (801c0dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801c032:	2bff      	cmp	r3, #255	; 0xff
 801c034:	6811      	ldr	r1, [r2, #0]
 801c036:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801c03a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801c03e:	b2c9      	uxtb	r1, r1
 801c040:	d042      	beq.n	801c0c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801c042:	b298      	uxth	r0, r3
 801c044:	43db      	mvns	r3, r3
 801c046:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801c04a:	fb11 f100 	smulbb	r1, r1, r0
 801c04e:	b2db      	uxtb	r3, r3
 801c050:	fb17 f700 	smulbb	r7, r7, r0
 801c054:	fb02 1103 	mla	r1, r2, r3, r1
 801c058:	fb1a f000 	smulbb	r0, sl, r0
 801c05c:	b289      	uxth	r1, r1
 801c05e:	1c4a      	adds	r2, r1, #1
 801c060:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c064:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801c068:	fb02 7703 	mla	r7, r2, r3, r7
 801c06c:	1209      	asrs	r1, r1, #8
 801c06e:	b2bf      	uxth	r7, r7
 801c070:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801c074:	1c7a      	adds	r2, r7, #1
 801c076:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c07a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801c07e:	fb02 0303 	mla	r3, r2, r3, r0
 801c082:	123f      	asrs	r7, r7, #8
 801c084:	b29b      	uxth	r3, r3
 801c086:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801c08a:	1c5a      	adds	r2, r3, #1
 801c08c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c090:	121b      	asrs	r3, r3, #8
 801c092:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801c096:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c098:	f10c 0c03 	add.w	ip, ip, #3
 801c09c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c0a0:	441d      	add	r5, r3
 801c0a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c0a4:	441e      	add	r6, r3
 801c0a6:	e6e7      	b.n	801be78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801c0a8:	2f00      	cmp	r7, #0
 801c0aa:	d0a5      	beq.n	801bff8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801c0ac:	444b      	add	r3, r9
 801c0ae:	0859      	lsrs	r1, r3, #1
 801c0b0:	07db      	lsls	r3, r3, #31
 801c0b2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c0b6:	bf54      	ite	pl
 801c0b8:	f001 010f 	andpl.w	r1, r1, #15
 801c0bc:	1109      	asrmi	r1, r1, #4
 801c0be:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801c0c2:	b2c9      	uxtb	r1, r1
 801c0c4:	910b      	str	r1, [sp, #44]	; 0x2c
 801c0c6:	e797      	b.n	801bff8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801c0c8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801c0cc:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801c0d0:	f80c ac01 	strb.w	sl, [ip, #-1]
 801c0d4:	e7df      	b.n	801c096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c0d6:	b013      	add	sp, #76	; 0x4c
 801c0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0dc:	2400b988 	.word	0x2400b988

0801c0e0 <CRC_Lock>:
 801c0e0:	4a20      	ldr	r2, [pc, #128]	; (801c164 <CRC_Lock+0x84>)
 801c0e2:	b530      	push	{r4, r5, lr}
 801c0e4:	6813      	ldr	r3, [r2, #0]
 801c0e6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801c0ea:	f24c 2540 	movw	r5, #49728	; 0xc240
 801c0ee:	f023 0301 	bic.w	r3, r3, #1
 801c0f2:	6013      	str	r3, [r2, #0]
 801c0f4:	4b1c      	ldr	r3, [pc, #112]	; (801c168 <CRC_Lock+0x88>)
 801c0f6:	681a      	ldr	r2, [r3, #0]
 801c0f8:	4022      	ands	r2, r4
 801c0fa:	42aa      	cmp	r2, r5
 801c0fc:	d005      	beq.n	801c10a <CRC_Lock+0x2a>
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	f24c 2270 	movw	r2, #49776	; 0xc270
 801c104:	4023      	ands	r3, r4
 801c106:	4293      	cmp	r3, r2
 801c108:	d124      	bne.n	801c154 <CRC_Lock+0x74>
 801c10a:	4b18      	ldr	r3, [pc, #96]	; (801c16c <CRC_Lock+0x8c>)
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	bb0b      	cbnz	r3, 801c154 <CRC_Lock+0x74>
 801c110:	4b17      	ldr	r3, [pc, #92]	; (801c170 <CRC_Lock+0x90>)
 801c112:	681a      	ldr	r2, [r3, #0]
 801c114:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801c118:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c11c:	d00d      	beq.n	801c13a <CRC_Lock+0x5a>
 801c11e:	681a      	ldr	r2, [r3, #0]
 801c120:	f240 4483 	movw	r4, #1155	; 0x483
 801c124:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801c128:	42a2      	cmp	r2, r4
 801c12a:	d006      	beq.n	801c13a <CRC_Lock+0x5a>
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	f240 4285 	movw	r2, #1157	; 0x485
 801c132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c136:	4293      	cmp	r3, r2
 801c138:	d10c      	bne.n	801c154 <CRC_Lock+0x74>
 801c13a:	4b0e      	ldr	r3, [pc, #56]	; (801c174 <CRC_Lock+0x94>)
 801c13c:	2201      	movs	r2, #1
 801c13e:	601a      	str	r2, [r3, #0]
 801c140:	681a      	ldr	r2, [r3, #0]
 801c142:	2a00      	cmp	r2, #0
 801c144:	d1fc      	bne.n	801c140 <CRC_Lock+0x60>
 801c146:	4b0c      	ldr	r3, [pc, #48]	; (801c178 <CRC_Lock+0x98>)
 801c148:	6018      	str	r0, [r3, #0]
 801c14a:	6818      	ldr	r0, [r3, #0]
 801c14c:	1a43      	subs	r3, r0, r1
 801c14e:	4258      	negs	r0, r3
 801c150:	4158      	adcs	r0, r3
 801c152:	bd30      	pop	{r4, r5, pc}
 801c154:	4b09      	ldr	r3, [pc, #36]	; (801c17c <CRC_Lock+0x9c>)
 801c156:	2201      	movs	r2, #1
 801c158:	601a      	str	r2, [r3, #0]
 801c15a:	681a      	ldr	r2, [r3, #0]
 801c15c:	2a00      	cmp	r2, #0
 801c15e:	d1fc      	bne.n	801c15a <CRC_Lock+0x7a>
 801c160:	4b07      	ldr	r3, [pc, #28]	; (801c180 <CRC_Lock+0xa0>)
 801c162:	e7f1      	b.n	801c148 <CRC_Lock+0x68>
 801c164:	e0002000 	.word	0xe0002000
 801c168:	e000ed00 	.word	0xe000ed00
 801c16c:	e0042000 	.word	0xe0042000
 801c170:	5c001000 	.word	0x5c001000
 801c174:	58024c08 	.word	0x58024c08
 801c178:	58024c00 	.word	0x58024c00
 801c17c:	40023008 	.word	0x40023008
 801c180:	40023000 	.word	0x40023000

0801c184 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801c184:	6101      	str	r1, [r0, #16]
 801c186:	4770      	bx	lr

0801c188 <_ZN8touchgfx8Gestures4tickEv>:
 801c188:	7b83      	ldrb	r3, [r0, #14]
 801c18a:	b14b      	cbz	r3, 801c1a0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801c18c:	8903      	ldrh	r3, [r0, #8]
 801c18e:	3301      	adds	r3, #1
 801c190:	b29b      	uxth	r3, r3
 801c192:	2b07      	cmp	r3, #7
 801c194:	8103      	strh	r3, [r0, #8]
 801c196:	bf81      	itttt	hi
 801c198:	2300      	movhi	r3, #0
 801c19a:	8143      	strhhi	r3, [r0, #10]
 801c19c:	8183      	strhhi	r3, [r0, #12]
 801c19e:	7383      	strbhi	r3, [r0, #14]
 801c1a0:	4770      	bx	lr
	...

0801c1a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801c1a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c1a8:	4698      	mov	r8, r3
 801c1aa:	8883      	ldrh	r3, [r0, #4]
 801c1ac:	4604      	mov	r4, r0
 801c1ae:	4617      	mov	r7, r2
 801c1b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c1b4:	eba8 0303 	sub.w	r3, r8, r3
 801c1b8:	4a19      	ldr	r2, [pc, #100]	; (801c220 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801c1ba:	460e      	mov	r6, r1
 801c1bc:	b21b      	sxth	r3, r3
 801c1be:	88c1      	ldrh	r1, [r0, #6]
 801c1c0:	9200      	str	r2, [sp, #0]
 801c1c2:	2000      	movs	r0, #0
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	8aa2      	ldrh	r2, [r4, #20]
 801c1c8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801c1cc:	bfb8      	it	lt
 801c1ce:	425b      	neglt	r3, r3
 801c1d0:	f88d 0004 	strb.w	r0, [sp, #4]
 801c1d4:	f8ad 1008 	strh.w	r1, [sp, #8]
 801c1d8:	b21b      	sxth	r3, r3
 801c1da:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c1de:	f8ad 500c 	strh.w	r5, [sp, #12]
 801c1e2:	4293      	cmp	r3, r2
 801c1e4:	dc07      	bgt.n	801c1f6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801c1e6:	1a69      	subs	r1, r5, r1
 801c1e8:	b209      	sxth	r1, r1
 801c1ea:	2900      	cmp	r1, #0
 801c1ec:	bfb8      	it	lt
 801c1ee:	4249      	neglt	r1, r1
 801c1f0:	b209      	sxth	r1, r1
 801c1f2:	428a      	cmp	r2, r1
 801c1f4:	da10      	bge.n	801c218 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801c1f6:	6920      	ldr	r0, [r4, #16]
 801c1f8:	4669      	mov	r1, sp
 801c1fa:	eba8 0606 	sub.w	r6, r8, r6
 801c1fe:	1bef      	subs	r7, r5, r7
 801c200:	6803      	ldr	r3, [r0, #0]
 801c202:	685b      	ldr	r3, [r3, #4]
 801c204:	4798      	blx	r3
 801c206:	2300      	movs	r3, #0
 801c208:	2001      	movs	r0, #1
 801c20a:	8166      	strh	r6, [r4, #10]
 801c20c:	8123      	strh	r3, [r4, #8]
 801c20e:	81a7      	strh	r7, [r4, #12]
 801c210:	f8a4 8004 	strh.w	r8, [r4, #4]
 801c214:	80e5      	strh	r5, [r4, #6]
 801c216:	73a0      	strb	r0, [r4, #14]
 801c218:	b004      	add	sp, #16
 801c21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c21e:	bf00      	nop
 801c220:	0801f32c 	.word	0x0801f32c

0801c224 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801c224:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c226:	461e      	mov	r6, r3
 801c228:	1e4b      	subs	r3, r1, #1
 801c22a:	b085      	sub	sp, #20
 801c22c:	4604      	mov	r4, r0
 801c22e:	2b01      	cmp	r3, #1
 801c230:	460d      	mov	r5, r1
 801c232:	4617      	mov	r7, r2
 801c234:	d84b      	bhi.n	801c2ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801c236:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c23a:	1cd3      	adds	r3, r2, #3
 801c23c:	b29b      	uxth	r3, r3
 801c23e:	2b06      	cmp	r3, #6
 801c240:	d916      	bls.n	801c270 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801c242:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801c2e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c246:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c24a:	f8cd c004 	str.w	ip, [sp, #4]
 801c24e:	f04f 0c00 	mov.w	ip, #0
 801c252:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c256:	6900      	ldr	r0, [r0, #16]
 801c258:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c25c:	a901      	add	r1, sp, #4
 801c25e:	f88d c008 	strb.w	ip, [sp, #8]
 801c262:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c266:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c26a:	6803      	ldr	r3, [r0, #0]
 801c26c:	689b      	ldr	r3, [r3, #8]
 801c26e:	4798      	blx	r3
 801c270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c274:	1cd3      	adds	r3, r2, #3
 801c276:	b29b      	uxth	r3, r3
 801c278:	2b06      	cmp	r3, #6
 801c27a:	d916      	bls.n	801c2aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c27c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801c2e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c280:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c284:	f8cd c004 	str.w	ip, [sp, #4]
 801c288:	f04f 0c01 	mov.w	ip, #1
 801c28c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c290:	6920      	ldr	r0, [r4, #16]
 801c292:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c296:	a901      	add	r1, sp, #4
 801c298:	f88d c008 	strb.w	ip, [sp, #8]
 801c29c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c2a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c2a4:	6803      	ldr	r3, [r0, #0]
 801c2a6:	689b      	ldr	r3, [r3, #8]
 801c2a8:	4798      	blx	r3
 801c2aa:	4b0d      	ldr	r3, [pc, #52]	; (801c2e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801c2ac:	a901      	add	r1, sp, #4
 801c2ae:	6920      	ldr	r0, [r4, #16]
 801c2b0:	9301      	str	r3, [sp, #4]
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	f88d 5008 	strb.w	r5, [sp, #8]
 801c2b8:	f8ad 700a 	strh.w	r7, [sp, #10]
 801c2bc:	f8ad 600c 	strh.w	r6, [sp, #12]
 801c2c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c2c4:	6803      	ldr	r3, [r0, #0]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	4798      	blx	r3
 801c2ca:	b005      	add	sp, #20
 801c2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2ce:	2900      	cmp	r1, #0
 801c2d0:	d1eb      	bne.n	801c2aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c2d2:	80a2      	strh	r2, [r4, #4]
 801c2d4:	80c6      	strh	r6, [r0, #6]
 801c2d6:	60a1      	str	r1, [r4, #8]
 801c2d8:	81a1      	strh	r1, [r4, #12]
 801c2da:	73a1      	strb	r1, [r4, #14]
 801c2dc:	e7e5      	b.n	801c2aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c2de:	bf00      	nop
 801c2e0:	0801f318 	.word	0x0801f318
 801c2e4:	0801f340 	.word	0x0801f340

0801c2e8 <__aeabi_atexit>:
 801c2e8:	460b      	mov	r3, r1
 801c2ea:	4601      	mov	r1, r0
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	f000 b853 	b.w	801c398 <__cxa_atexit>

0801c2f2 <_ZdlPvj>:
 801c2f2:	f000 b812 	b.w	801c31a <_ZdlPv>

0801c2f6 <__cxa_guard_acquire>:
 801c2f6:	6803      	ldr	r3, [r0, #0]
 801c2f8:	07db      	lsls	r3, r3, #31
 801c2fa:	d406      	bmi.n	801c30a <__cxa_guard_acquire+0x14>
 801c2fc:	7843      	ldrb	r3, [r0, #1]
 801c2fe:	b103      	cbz	r3, 801c302 <__cxa_guard_acquire+0xc>
 801c300:	deff      	udf	#255	; 0xff
 801c302:	2301      	movs	r3, #1
 801c304:	7043      	strb	r3, [r0, #1]
 801c306:	4618      	mov	r0, r3
 801c308:	4770      	bx	lr
 801c30a:	2000      	movs	r0, #0
 801c30c:	4770      	bx	lr

0801c30e <__cxa_guard_release>:
 801c30e:	2301      	movs	r3, #1
 801c310:	6003      	str	r3, [r0, #0]
 801c312:	4770      	bx	lr

0801c314 <__cxa_pure_virtual>:
 801c314:	b508      	push	{r3, lr}
 801c316:	f000 f80f 	bl	801c338 <_ZSt9terminatev>

0801c31a <_ZdlPv>:
 801c31a:	f000 b989 	b.w	801c630 <free>

0801c31e <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c31e:	b508      	push	{r3, lr}
 801c320:	4780      	blx	r0
 801c322:	f000 f80e 	bl	801c342 <abort>
	...

0801c328 <_ZSt13get_terminatev>:
 801c328:	4b02      	ldr	r3, [pc, #8]	; (801c334 <_ZSt13get_terminatev+0xc>)
 801c32a:	6818      	ldr	r0, [r3, #0]
 801c32c:	f3bf 8f5b 	dmb	ish
 801c330:	4770      	bx	lr
 801c332:	bf00      	nop
 801c334:	240000a8 	.word	0x240000a8

0801c338 <_ZSt9terminatev>:
 801c338:	b508      	push	{r3, lr}
 801c33a:	f7ff fff5 	bl	801c328 <_ZSt13get_terminatev>
 801c33e:	f7ff ffee 	bl	801c31e <_ZN10__cxxabiv111__terminateEPFvvE>

0801c342 <abort>:
 801c342:	b508      	push	{r3, lr}
 801c344:	2006      	movs	r0, #6
 801c346:	f000 fe11 	bl	801cf6c <raise>
 801c34a:	2001      	movs	r0, #1
 801c34c:	f7e6 fb9a 	bl	8002a84 <_exit>

0801c350 <__assert_func>:
 801c350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c352:	4614      	mov	r4, r2
 801c354:	461a      	mov	r2, r3
 801c356:	4b09      	ldr	r3, [pc, #36]	; (801c37c <__assert_func+0x2c>)
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	4605      	mov	r5, r0
 801c35c:	68d8      	ldr	r0, [r3, #12]
 801c35e:	b14c      	cbz	r4, 801c374 <__assert_func+0x24>
 801c360:	4b07      	ldr	r3, [pc, #28]	; (801c380 <__assert_func+0x30>)
 801c362:	9100      	str	r1, [sp, #0]
 801c364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c368:	4906      	ldr	r1, [pc, #24]	; (801c384 <__assert_func+0x34>)
 801c36a:	462b      	mov	r3, r5
 801c36c:	f000 f8fe 	bl	801c56c <fiprintf>
 801c370:	f7ff ffe7 	bl	801c342 <abort>
 801c374:	4b04      	ldr	r3, [pc, #16]	; (801c388 <__assert_func+0x38>)
 801c376:	461c      	mov	r4, r3
 801c378:	e7f3      	b.n	801c362 <__assert_func+0x12>
 801c37a:	bf00      	nop
 801c37c:	240000ac 	.word	0x240000ac
 801c380:	0801f568 	.word	0x0801f568
 801c384:	0801f575 	.word	0x0801f575
 801c388:	0801f5a3 	.word	0x0801f5a3

0801c38c <atexit>:
 801c38c:	2300      	movs	r3, #0
 801c38e:	4601      	mov	r1, r0
 801c390:	461a      	mov	r2, r3
 801c392:	4618      	mov	r0, r3
 801c394:	f000 bfa4 	b.w	801d2e0 <__register_exitproc>

0801c398 <__cxa_atexit>:
 801c398:	b510      	push	{r4, lr}
 801c39a:	4c05      	ldr	r4, [pc, #20]	; (801c3b0 <__cxa_atexit+0x18>)
 801c39c:	4613      	mov	r3, r2
 801c39e:	b12c      	cbz	r4, 801c3ac <__cxa_atexit+0x14>
 801c3a0:	460a      	mov	r2, r1
 801c3a2:	4601      	mov	r1, r0
 801c3a4:	2002      	movs	r0, #2
 801c3a6:	f000 ff9b 	bl	801d2e0 <__register_exitproc>
 801c3aa:	bd10      	pop	{r4, pc}
 801c3ac:	4620      	mov	r0, r4
 801c3ae:	e7fc      	b.n	801c3aa <__cxa_atexit+0x12>
 801c3b0:	0801d2e1 	.word	0x0801d2e1

0801c3b4 <__errno>:
 801c3b4:	4b01      	ldr	r3, [pc, #4]	; (801c3bc <__errno+0x8>)
 801c3b6:	6818      	ldr	r0, [r3, #0]
 801c3b8:	4770      	bx	lr
 801c3ba:	bf00      	nop
 801c3bc:	240000ac 	.word	0x240000ac

0801c3c0 <std>:
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	b510      	push	{r4, lr}
 801c3c4:	4604      	mov	r4, r0
 801c3c6:	e9c0 3300 	strd	r3, r3, [r0]
 801c3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c3ce:	6083      	str	r3, [r0, #8]
 801c3d0:	8181      	strh	r1, [r0, #12]
 801c3d2:	6643      	str	r3, [r0, #100]	; 0x64
 801c3d4:	81c2      	strh	r2, [r0, #14]
 801c3d6:	6183      	str	r3, [r0, #24]
 801c3d8:	4619      	mov	r1, r3
 801c3da:	2208      	movs	r2, #8
 801c3dc:	305c      	adds	r0, #92	; 0x5c
 801c3de:	f000 f94d 	bl	801c67c <memset>
 801c3e2:	4b05      	ldr	r3, [pc, #20]	; (801c3f8 <std+0x38>)
 801c3e4:	6263      	str	r3, [r4, #36]	; 0x24
 801c3e6:	4b05      	ldr	r3, [pc, #20]	; (801c3fc <std+0x3c>)
 801c3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 801c3ea:	4b05      	ldr	r3, [pc, #20]	; (801c400 <std+0x40>)
 801c3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c3ee:	4b05      	ldr	r3, [pc, #20]	; (801c404 <std+0x44>)
 801c3f0:	6224      	str	r4, [r4, #32]
 801c3f2:	6323      	str	r3, [r4, #48]	; 0x30
 801c3f4:	bd10      	pop	{r4, pc}
 801c3f6:	bf00      	nop
 801c3f8:	0801cfe5 	.word	0x0801cfe5
 801c3fc:	0801d007 	.word	0x0801d007
 801c400:	0801d03f 	.word	0x0801d03f
 801c404:	0801d063 	.word	0x0801d063

0801c408 <_cleanup_r>:
 801c408:	4901      	ldr	r1, [pc, #4]	; (801c410 <_cleanup_r+0x8>)
 801c40a:	f000 b8c1 	b.w	801c590 <_fwalk_reent>
 801c40e:	bf00      	nop
 801c410:	0801d4d1 	.word	0x0801d4d1

0801c414 <__sfmoreglue>:
 801c414:	b570      	push	{r4, r5, r6, lr}
 801c416:	2268      	movs	r2, #104	; 0x68
 801c418:	1e4d      	subs	r5, r1, #1
 801c41a:	4355      	muls	r5, r2
 801c41c:	460e      	mov	r6, r1
 801c41e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c422:	f000 f99f 	bl	801c764 <_malloc_r>
 801c426:	4604      	mov	r4, r0
 801c428:	b140      	cbz	r0, 801c43c <__sfmoreglue+0x28>
 801c42a:	2100      	movs	r1, #0
 801c42c:	e9c0 1600 	strd	r1, r6, [r0]
 801c430:	300c      	adds	r0, #12
 801c432:	60a0      	str	r0, [r4, #8]
 801c434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c438:	f000 f920 	bl	801c67c <memset>
 801c43c:	4620      	mov	r0, r4
 801c43e:	bd70      	pop	{r4, r5, r6, pc}

0801c440 <__sfp_lock_acquire>:
 801c440:	4801      	ldr	r0, [pc, #4]	; (801c448 <__sfp_lock_acquire+0x8>)
 801c442:	f000 b8ea 	b.w	801c61a <__retarget_lock_acquire_recursive>
 801c446:	bf00      	nop
 801c448:	2400ba5e 	.word	0x2400ba5e

0801c44c <__sfp_lock_release>:
 801c44c:	4801      	ldr	r0, [pc, #4]	; (801c454 <__sfp_lock_release+0x8>)
 801c44e:	f000 b8e6 	b.w	801c61e <__retarget_lock_release_recursive>
 801c452:	bf00      	nop
 801c454:	2400ba5e 	.word	0x2400ba5e

0801c458 <__sinit_lock_acquire>:
 801c458:	4801      	ldr	r0, [pc, #4]	; (801c460 <__sinit_lock_acquire+0x8>)
 801c45a:	f000 b8de 	b.w	801c61a <__retarget_lock_acquire_recursive>
 801c45e:	bf00      	nop
 801c460:	2400ba5f 	.word	0x2400ba5f

0801c464 <__sinit_lock_release>:
 801c464:	4801      	ldr	r0, [pc, #4]	; (801c46c <__sinit_lock_release+0x8>)
 801c466:	f000 b8da 	b.w	801c61e <__retarget_lock_release_recursive>
 801c46a:	bf00      	nop
 801c46c:	2400ba5f 	.word	0x2400ba5f

0801c470 <__sinit>:
 801c470:	b510      	push	{r4, lr}
 801c472:	4604      	mov	r4, r0
 801c474:	f7ff fff0 	bl	801c458 <__sinit_lock_acquire>
 801c478:	69a3      	ldr	r3, [r4, #24]
 801c47a:	b11b      	cbz	r3, 801c484 <__sinit+0x14>
 801c47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c480:	f7ff bff0 	b.w	801c464 <__sinit_lock_release>
 801c484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c488:	6523      	str	r3, [r4, #80]	; 0x50
 801c48a:	4b13      	ldr	r3, [pc, #76]	; (801c4d8 <__sinit+0x68>)
 801c48c:	4a13      	ldr	r2, [pc, #76]	; (801c4dc <__sinit+0x6c>)
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	62a2      	str	r2, [r4, #40]	; 0x28
 801c492:	42a3      	cmp	r3, r4
 801c494:	bf04      	itt	eq
 801c496:	2301      	moveq	r3, #1
 801c498:	61a3      	streq	r3, [r4, #24]
 801c49a:	4620      	mov	r0, r4
 801c49c:	f000 f820 	bl	801c4e0 <__sfp>
 801c4a0:	6060      	str	r0, [r4, #4]
 801c4a2:	4620      	mov	r0, r4
 801c4a4:	f000 f81c 	bl	801c4e0 <__sfp>
 801c4a8:	60a0      	str	r0, [r4, #8]
 801c4aa:	4620      	mov	r0, r4
 801c4ac:	f000 f818 	bl	801c4e0 <__sfp>
 801c4b0:	2200      	movs	r2, #0
 801c4b2:	60e0      	str	r0, [r4, #12]
 801c4b4:	2104      	movs	r1, #4
 801c4b6:	6860      	ldr	r0, [r4, #4]
 801c4b8:	f7ff ff82 	bl	801c3c0 <std>
 801c4bc:	68a0      	ldr	r0, [r4, #8]
 801c4be:	2201      	movs	r2, #1
 801c4c0:	2109      	movs	r1, #9
 801c4c2:	f7ff ff7d 	bl	801c3c0 <std>
 801c4c6:	68e0      	ldr	r0, [r4, #12]
 801c4c8:	2202      	movs	r2, #2
 801c4ca:	2112      	movs	r1, #18
 801c4cc:	f7ff ff78 	bl	801c3c0 <std>
 801c4d0:	2301      	movs	r3, #1
 801c4d2:	61a3      	str	r3, [r4, #24]
 801c4d4:	e7d2      	b.n	801c47c <__sinit+0xc>
 801c4d6:	bf00      	nop
 801c4d8:	0801f604 	.word	0x0801f604
 801c4dc:	0801c409 	.word	0x0801c409

0801c4e0 <__sfp>:
 801c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4e2:	4607      	mov	r7, r0
 801c4e4:	f7ff ffac 	bl	801c440 <__sfp_lock_acquire>
 801c4e8:	4b1e      	ldr	r3, [pc, #120]	; (801c564 <__sfp+0x84>)
 801c4ea:	681e      	ldr	r6, [r3, #0]
 801c4ec:	69b3      	ldr	r3, [r6, #24]
 801c4ee:	b913      	cbnz	r3, 801c4f6 <__sfp+0x16>
 801c4f0:	4630      	mov	r0, r6
 801c4f2:	f7ff ffbd 	bl	801c470 <__sinit>
 801c4f6:	3648      	adds	r6, #72	; 0x48
 801c4f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c4fc:	3b01      	subs	r3, #1
 801c4fe:	d503      	bpl.n	801c508 <__sfp+0x28>
 801c500:	6833      	ldr	r3, [r6, #0]
 801c502:	b30b      	cbz	r3, 801c548 <__sfp+0x68>
 801c504:	6836      	ldr	r6, [r6, #0]
 801c506:	e7f7      	b.n	801c4f8 <__sfp+0x18>
 801c508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c50c:	b9d5      	cbnz	r5, 801c544 <__sfp+0x64>
 801c50e:	4b16      	ldr	r3, [pc, #88]	; (801c568 <__sfp+0x88>)
 801c510:	60e3      	str	r3, [r4, #12]
 801c512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c516:	6665      	str	r5, [r4, #100]	; 0x64
 801c518:	f000 f87e 	bl	801c618 <__retarget_lock_init_recursive>
 801c51c:	f7ff ff96 	bl	801c44c <__sfp_lock_release>
 801c520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c528:	6025      	str	r5, [r4, #0]
 801c52a:	61a5      	str	r5, [r4, #24]
 801c52c:	2208      	movs	r2, #8
 801c52e:	4629      	mov	r1, r5
 801c530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c534:	f000 f8a2 	bl	801c67c <memset>
 801c538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c53c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c540:	4620      	mov	r0, r4
 801c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c544:	3468      	adds	r4, #104	; 0x68
 801c546:	e7d9      	b.n	801c4fc <__sfp+0x1c>
 801c548:	2104      	movs	r1, #4
 801c54a:	4638      	mov	r0, r7
 801c54c:	f7ff ff62 	bl	801c414 <__sfmoreglue>
 801c550:	4604      	mov	r4, r0
 801c552:	6030      	str	r0, [r6, #0]
 801c554:	2800      	cmp	r0, #0
 801c556:	d1d5      	bne.n	801c504 <__sfp+0x24>
 801c558:	f7ff ff78 	bl	801c44c <__sfp_lock_release>
 801c55c:	230c      	movs	r3, #12
 801c55e:	603b      	str	r3, [r7, #0]
 801c560:	e7ee      	b.n	801c540 <__sfp+0x60>
 801c562:	bf00      	nop
 801c564:	0801f604 	.word	0x0801f604
 801c568:	ffff0001 	.word	0xffff0001

0801c56c <fiprintf>:
 801c56c:	b40e      	push	{r1, r2, r3}
 801c56e:	b503      	push	{r0, r1, lr}
 801c570:	4601      	mov	r1, r0
 801c572:	ab03      	add	r3, sp, #12
 801c574:	4805      	ldr	r0, [pc, #20]	; (801c58c <fiprintf+0x20>)
 801c576:	f853 2b04 	ldr.w	r2, [r3], #4
 801c57a:	6800      	ldr	r0, [r0, #0]
 801c57c:	9301      	str	r3, [sp, #4]
 801c57e:	f000 f98f 	bl	801c8a0 <_vfiprintf_r>
 801c582:	b002      	add	sp, #8
 801c584:	f85d eb04 	ldr.w	lr, [sp], #4
 801c588:	b003      	add	sp, #12
 801c58a:	4770      	bx	lr
 801c58c:	240000ac 	.word	0x240000ac

0801c590 <_fwalk_reent>:
 801c590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c594:	4606      	mov	r6, r0
 801c596:	4688      	mov	r8, r1
 801c598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c59c:	2700      	movs	r7, #0
 801c59e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c5a2:	f1b9 0901 	subs.w	r9, r9, #1
 801c5a6:	d505      	bpl.n	801c5b4 <_fwalk_reent+0x24>
 801c5a8:	6824      	ldr	r4, [r4, #0]
 801c5aa:	2c00      	cmp	r4, #0
 801c5ac:	d1f7      	bne.n	801c59e <_fwalk_reent+0xe>
 801c5ae:	4638      	mov	r0, r7
 801c5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c5b4:	89ab      	ldrh	r3, [r5, #12]
 801c5b6:	2b01      	cmp	r3, #1
 801c5b8:	d907      	bls.n	801c5ca <_fwalk_reent+0x3a>
 801c5ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c5be:	3301      	adds	r3, #1
 801c5c0:	d003      	beq.n	801c5ca <_fwalk_reent+0x3a>
 801c5c2:	4629      	mov	r1, r5
 801c5c4:	4630      	mov	r0, r6
 801c5c6:	47c0      	blx	r8
 801c5c8:	4307      	orrs	r7, r0
 801c5ca:	3568      	adds	r5, #104	; 0x68
 801c5cc:	e7e9      	b.n	801c5a2 <_fwalk_reent+0x12>
	...

0801c5d0 <__libc_init_array>:
 801c5d0:	b570      	push	{r4, r5, r6, lr}
 801c5d2:	4d0d      	ldr	r5, [pc, #52]	; (801c608 <__libc_init_array+0x38>)
 801c5d4:	4c0d      	ldr	r4, [pc, #52]	; (801c60c <__libc_init_array+0x3c>)
 801c5d6:	1b64      	subs	r4, r4, r5
 801c5d8:	10a4      	asrs	r4, r4, #2
 801c5da:	2600      	movs	r6, #0
 801c5dc:	42a6      	cmp	r6, r4
 801c5de:	d109      	bne.n	801c5f4 <__libc_init_array+0x24>
 801c5e0:	4d0b      	ldr	r5, [pc, #44]	; (801c610 <__libc_init_array+0x40>)
 801c5e2:	4c0c      	ldr	r4, [pc, #48]	; (801c614 <__libc_init_array+0x44>)
 801c5e4:	f001 fa14 	bl	801da10 <_init>
 801c5e8:	1b64      	subs	r4, r4, r5
 801c5ea:	10a4      	asrs	r4, r4, #2
 801c5ec:	2600      	movs	r6, #0
 801c5ee:	42a6      	cmp	r6, r4
 801c5f0:	d105      	bne.n	801c5fe <__libc_init_array+0x2e>
 801c5f2:	bd70      	pop	{r4, r5, r6, pc}
 801c5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801c5f8:	4798      	blx	r3
 801c5fa:	3601      	adds	r6, #1
 801c5fc:	e7ee      	b.n	801c5dc <__libc_init_array+0xc>
 801c5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801c602:	4798      	blx	r3
 801c604:	3601      	adds	r6, #1
 801c606:	e7f2      	b.n	801c5ee <__libc_init_array+0x1e>
 801c608:	0801f658 	.word	0x0801f658
 801c60c:	0801f658 	.word	0x0801f658
 801c610:	0801f658 	.word	0x0801f658
 801c614:	0801f66c 	.word	0x0801f66c

0801c618 <__retarget_lock_init_recursive>:
 801c618:	4770      	bx	lr

0801c61a <__retarget_lock_acquire_recursive>:
 801c61a:	4770      	bx	lr

0801c61c <__retarget_lock_release>:
 801c61c:	4770      	bx	lr

0801c61e <__retarget_lock_release_recursive>:
 801c61e:	4770      	bx	lr

0801c620 <malloc>:
 801c620:	4b02      	ldr	r3, [pc, #8]	; (801c62c <malloc+0xc>)
 801c622:	4601      	mov	r1, r0
 801c624:	6818      	ldr	r0, [r3, #0]
 801c626:	f000 b89d 	b.w	801c764 <_malloc_r>
 801c62a:	bf00      	nop
 801c62c:	240000ac 	.word	0x240000ac

0801c630 <free>:
 801c630:	4b02      	ldr	r3, [pc, #8]	; (801c63c <free+0xc>)
 801c632:	4601      	mov	r1, r0
 801c634:	6818      	ldr	r0, [r3, #0]
 801c636:	f000 b829 	b.w	801c68c <_free_r>
 801c63a:	bf00      	nop
 801c63c:	240000ac 	.word	0x240000ac

0801c640 <memcmp>:
 801c640:	b510      	push	{r4, lr}
 801c642:	3901      	subs	r1, #1
 801c644:	4402      	add	r2, r0
 801c646:	4290      	cmp	r0, r2
 801c648:	d101      	bne.n	801c64e <memcmp+0xe>
 801c64a:	2000      	movs	r0, #0
 801c64c:	e005      	b.n	801c65a <memcmp+0x1a>
 801c64e:	7803      	ldrb	r3, [r0, #0]
 801c650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c654:	42a3      	cmp	r3, r4
 801c656:	d001      	beq.n	801c65c <memcmp+0x1c>
 801c658:	1b18      	subs	r0, r3, r4
 801c65a:	bd10      	pop	{r4, pc}
 801c65c:	3001      	adds	r0, #1
 801c65e:	e7f2      	b.n	801c646 <memcmp+0x6>

0801c660 <memcpy>:
 801c660:	440a      	add	r2, r1
 801c662:	4291      	cmp	r1, r2
 801c664:	f100 33ff 	add.w	r3, r0, #4294967295
 801c668:	d100      	bne.n	801c66c <memcpy+0xc>
 801c66a:	4770      	bx	lr
 801c66c:	b510      	push	{r4, lr}
 801c66e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c672:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c676:	4291      	cmp	r1, r2
 801c678:	d1f9      	bne.n	801c66e <memcpy+0xe>
 801c67a:	bd10      	pop	{r4, pc}

0801c67c <memset>:
 801c67c:	4402      	add	r2, r0
 801c67e:	4603      	mov	r3, r0
 801c680:	4293      	cmp	r3, r2
 801c682:	d100      	bne.n	801c686 <memset+0xa>
 801c684:	4770      	bx	lr
 801c686:	f803 1b01 	strb.w	r1, [r3], #1
 801c68a:	e7f9      	b.n	801c680 <memset+0x4>

0801c68c <_free_r>:
 801c68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c68e:	2900      	cmp	r1, #0
 801c690:	d044      	beq.n	801c71c <_free_r+0x90>
 801c692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c696:	9001      	str	r0, [sp, #4]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	f1a1 0404 	sub.w	r4, r1, #4
 801c69e:	bfb8      	it	lt
 801c6a0:	18e4      	addlt	r4, r4, r3
 801c6a2:	f000 ffe3 	bl	801d66c <__malloc_lock>
 801c6a6:	4a1e      	ldr	r2, [pc, #120]	; (801c720 <_free_r+0x94>)
 801c6a8:	9801      	ldr	r0, [sp, #4]
 801c6aa:	6813      	ldr	r3, [r2, #0]
 801c6ac:	b933      	cbnz	r3, 801c6bc <_free_r+0x30>
 801c6ae:	6063      	str	r3, [r4, #4]
 801c6b0:	6014      	str	r4, [r2, #0]
 801c6b2:	b003      	add	sp, #12
 801c6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c6b8:	f000 bfde 	b.w	801d678 <__malloc_unlock>
 801c6bc:	42a3      	cmp	r3, r4
 801c6be:	d908      	bls.n	801c6d2 <_free_r+0x46>
 801c6c0:	6825      	ldr	r5, [r4, #0]
 801c6c2:	1961      	adds	r1, r4, r5
 801c6c4:	428b      	cmp	r3, r1
 801c6c6:	bf01      	itttt	eq
 801c6c8:	6819      	ldreq	r1, [r3, #0]
 801c6ca:	685b      	ldreq	r3, [r3, #4]
 801c6cc:	1949      	addeq	r1, r1, r5
 801c6ce:	6021      	streq	r1, [r4, #0]
 801c6d0:	e7ed      	b.n	801c6ae <_free_r+0x22>
 801c6d2:	461a      	mov	r2, r3
 801c6d4:	685b      	ldr	r3, [r3, #4]
 801c6d6:	b10b      	cbz	r3, 801c6dc <_free_r+0x50>
 801c6d8:	42a3      	cmp	r3, r4
 801c6da:	d9fa      	bls.n	801c6d2 <_free_r+0x46>
 801c6dc:	6811      	ldr	r1, [r2, #0]
 801c6de:	1855      	adds	r5, r2, r1
 801c6e0:	42a5      	cmp	r5, r4
 801c6e2:	d10b      	bne.n	801c6fc <_free_r+0x70>
 801c6e4:	6824      	ldr	r4, [r4, #0]
 801c6e6:	4421      	add	r1, r4
 801c6e8:	1854      	adds	r4, r2, r1
 801c6ea:	42a3      	cmp	r3, r4
 801c6ec:	6011      	str	r1, [r2, #0]
 801c6ee:	d1e0      	bne.n	801c6b2 <_free_r+0x26>
 801c6f0:	681c      	ldr	r4, [r3, #0]
 801c6f2:	685b      	ldr	r3, [r3, #4]
 801c6f4:	6053      	str	r3, [r2, #4]
 801c6f6:	4421      	add	r1, r4
 801c6f8:	6011      	str	r1, [r2, #0]
 801c6fa:	e7da      	b.n	801c6b2 <_free_r+0x26>
 801c6fc:	d902      	bls.n	801c704 <_free_r+0x78>
 801c6fe:	230c      	movs	r3, #12
 801c700:	6003      	str	r3, [r0, #0]
 801c702:	e7d6      	b.n	801c6b2 <_free_r+0x26>
 801c704:	6825      	ldr	r5, [r4, #0]
 801c706:	1961      	adds	r1, r4, r5
 801c708:	428b      	cmp	r3, r1
 801c70a:	bf04      	itt	eq
 801c70c:	6819      	ldreq	r1, [r3, #0]
 801c70e:	685b      	ldreq	r3, [r3, #4]
 801c710:	6063      	str	r3, [r4, #4]
 801c712:	bf04      	itt	eq
 801c714:	1949      	addeq	r1, r1, r5
 801c716:	6021      	streq	r1, [r4, #0]
 801c718:	6054      	str	r4, [r2, #4]
 801c71a:	e7ca      	b.n	801c6b2 <_free_r+0x26>
 801c71c:	b003      	add	sp, #12
 801c71e:	bd30      	pop	{r4, r5, pc}
 801c720:	2400ba60 	.word	0x2400ba60

0801c724 <sbrk_aligned>:
 801c724:	b570      	push	{r4, r5, r6, lr}
 801c726:	4e0e      	ldr	r6, [pc, #56]	; (801c760 <sbrk_aligned+0x3c>)
 801c728:	460c      	mov	r4, r1
 801c72a:	6831      	ldr	r1, [r6, #0]
 801c72c:	4605      	mov	r5, r0
 801c72e:	b911      	cbnz	r1, 801c736 <sbrk_aligned+0x12>
 801c730:	f000 fbe4 	bl	801cefc <_sbrk_r>
 801c734:	6030      	str	r0, [r6, #0]
 801c736:	4621      	mov	r1, r4
 801c738:	4628      	mov	r0, r5
 801c73a:	f000 fbdf 	bl	801cefc <_sbrk_r>
 801c73e:	1c43      	adds	r3, r0, #1
 801c740:	d00a      	beq.n	801c758 <sbrk_aligned+0x34>
 801c742:	1cc4      	adds	r4, r0, #3
 801c744:	f024 0403 	bic.w	r4, r4, #3
 801c748:	42a0      	cmp	r0, r4
 801c74a:	d007      	beq.n	801c75c <sbrk_aligned+0x38>
 801c74c:	1a21      	subs	r1, r4, r0
 801c74e:	4628      	mov	r0, r5
 801c750:	f000 fbd4 	bl	801cefc <_sbrk_r>
 801c754:	3001      	adds	r0, #1
 801c756:	d101      	bne.n	801c75c <sbrk_aligned+0x38>
 801c758:	f04f 34ff 	mov.w	r4, #4294967295
 801c75c:	4620      	mov	r0, r4
 801c75e:	bd70      	pop	{r4, r5, r6, pc}
 801c760:	2400ba64 	.word	0x2400ba64

0801c764 <_malloc_r>:
 801c764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c768:	1ccd      	adds	r5, r1, #3
 801c76a:	f025 0503 	bic.w	r5, r5, #3
 801c76e:	3508      	adds	r5, #8
 801c770:	2d0c      	cmp	r5, #12
 801c772:	bf38      	it	cc
 801c774:	250c      	movcc	r5, #12
 801c776:	2d00      	cmp	r5, #0
 801c778:	4607      	mov	r7, r0
 801c77a:	db01      	blt.n	801c780 <_malloc_r+0x1c>
 801c77c:	42a9      	cmp	r1, r5
 801c77e:	d905      	bls.n	801c78c <_malloc_r+0x28>
 801c780:	230c      	movs	r3, #12
 801c782:	603b      	str	r3, [r7, #0]
 801c784:	2600      	movs	r6, #0
 801c786:	4630      	mov	r0, r6
 801c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c78c:	4e2e      	ldr	r6, [pc, #184]	; (801c848 <_malloc_r+0xe4>)
 801c78e:	f000 ff6d 	bl	801d66c <__malloc_lock>
 801c792:	6833      	ldr	r3, [r6, #0]
 801c794:	461c      	mov	r4, r3
 801c796:	bb34      	cbnz	r4, 801c7e6 <_malloc_r+0x82>
 801c798:	4629      	mov	r1, r5
 801c79a:	4638      	mov	r0, r7
 801c79c:	f7ff ffc2 	bl	801c724 <sbrk_aligned>
 801c7a0:	1c43      	adds	r3, r0, #1
 801c7a2:	4604      	mov	r4, r0
 801c7a4:	d14d      	bne.n	801c842 <_malloc_r+0xde>
 801c7a6:	6834      	ldr	r4, [r6, #0]
 801c7a8:	4626      	mov	r6, r4
 801c7aa:	2e00      	cmp	r6, #0
 801c7ac:	d140      	bne.n	801c830 <_malloc_r+0xcc>
 801c7ae:	6823      	ldr	r3, [r4, #0]
 801c7b0:	4631      	mov	r1, r6
 801c7b2:	4638      	mov	r0, r7
 801c7b4:	eb04 0803 	add.w	r8, r4, r3
 801c7b8:	f000 fba0 	bl	801cefc <_sbrk_r>
 801c7bc:	4580      	cmp	r8, r0
 801c7be:	d13a      	bne.n	801c836 <_malloc_r+0xd2>
 801c7c0:	6821      	ldr	r1, [r4, #0]
 801c7c2:	3503      	adds	r5, #3
 801c7c4:	1a6d      	subs	r5, r5, r1
 801c7c6:	f025 0503 	bic.w	r5, r5, #3
 801c7ca:	3508      	adds	r5, #8
 801c7cc:	2d0c      	cmp	r5, #12
 801c7ce:	bf38      	it	cc
 801c7d0:	250c      	movcc	r5, #12
 801c7d2:	4629      	mov	r1, r5
 801c7d4:	4638      	mov	r0, r7
 801c7d6:	f7ff ffa5 	bl	801c724 <sbrk_aligned>
 801c7da:	3001      	adds	r0, #1
 801c7dc:	d02b      	beq.n	801c836 <_malloc_r+0xd2>
 801c7de:	6823      	ldr	r3, [r4, #0]
 801c7e0:	442b      	add	r3, r5
 801c7e2:	6023      	str	r3, [r4, #0]
 801c7e4:	e00e      	b.n	801c804 <_malloc_r+0xa0>
 801c7e6:	6822      	ldr	r2, [r4, #0]
 801c7e8:	1b52      	subs	r2, r2, r5
 801c7ea:	d41e      	bmi.n	801c82a <_malloc_r+0xc6>
 801c7ec:	2a0b      	cmp	r2, #11
 801c7ee:	d916      	bls.n	801c81e <_malloc_r+0xba>
 801c7f0:	1961      	adds	r1, r4, r5
 801c7f2:	42a3      	cmp	r3, r4
 801c7f4:	6025      	str	r5, [r4, #0]
 801c7f6:	bf18      	it	ne
 801c7f8:	6059      	strne	r1, [r3, #4]
 801c7fa:	6863      	ldr	r3, [r4, #4]
 801c7fc:	bf08      	it	eq
 801c7fe:	6031      	streq	r1, [r6, #0]
 801c800:	5162      	str	r2, [r4, r5]
 801c802:	604b      	str	r3, [r1, #4]
 801c804:	4638      	mov	r0, r7
 801c806:	f104 060b 	add.w	r6, r4, #11
 801c80a:	f000 ff35 	bl	801d678 <__malloc_unlock>
 801c80e:	f026 0607 	bic.w	r6, r6, #7
 801c812:	1d23      	adds	r3, r4, #4
 801c814:	1af2      	subs	r2, r6, r3
 801c816:	d0b6      	beq.n	801c786 <_malloc_r+0x22>
 801c818:	1b9b      	subs	r3, r3, r6
 801c81a:	50a3      	str	r3, [r4, r2]
 801c81c:	e7b3      	b.n	801c786 <_malloc_r+0x22>
 801c81e:	6862      	ldr	r2, [r4, #4]
 801c820:	42a3      	cmp	r3, r4
 801c822:	bf0c      	ite	eq
 801c824:	6032      	streq	r2, [r6, #0]
 801c826:	605a      	strne	r2, [r3, #4]
 801c828:	e7ec      	b.n	801c804 <_malloc_r+0xa0>
 801c82a:	4623      	mov	r3, r4
 801c82c:	6864      	ldr	r4, [r4, #4]
 801c82e:	e7b2      	b.n	801c796 <_malloc_r+0x32>
 801c830:	4634      	mov	r4, r6
 801c832:	6876      	ldr	r6, [r6, #4]
 801c834:	e7b9      	b.n	801c7aa <_malloc_r+0x46>
 801c836:	230c      	movs	r3, #12
 801c838:	603b      	str	r3, [r7, #0]
 801c83a:	4638      	mov	r0, r7
 801c83c:	f000 ff1c 	bl	801d678 <__malloc_unlock>
 801c840:	e7a1      	b.n	801c786 <_malloc_r+0x22>
 801c842:	6025      	str	r5, [r4, #0]
 801c844:	e7de      	b.n	801c804 <_malloc_r+0xa0>
 801c846:	bf00      	nop
 801c848:	2400ba60 	.word	0x2400ba60

0801c84c <__sfputc_r>:
 801c84c:	6893      	ldr	r3, [r2, #8]
 801c84e:	3b01      	subs	r3, #1
 801c850:	2b00      	cmp	r3, #0
 801c852:	b410      	push	{r4}
 801c854:	6093      	str	r3, [r2, #8]
 801c856:	da08      	bge.n	801c86a <__sfputc_r+0x1e>
 801c858:	6994      	ldr	r4, [r2, #24]
 801c85a:	42a3      	cmp	r3, r4
 801c85c:	db01      	blt.n	801c862 <__sfputc_r+0x16>
 801c85e:	290a      	cmp	r1, #10
 801c860:	d103      	bne.n	801c86a <__sfputc_r+0x1e>
 801c862:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c866:	f000 bc69 	b.w	801d13c <__swbuf_r>
 801c86a:	6813      	ldr	r3, [r2, #0]
 801c86c:	1c58      	adds	r0, r3, #1
 801c86e:	6010      	str	r0, [r2, #0]
 801c870:	7019      	strb	r1, [r3, #0]
 801c872:	4608      	mov	r0, r1
 801c874:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c878:	4770      	bx	lr

0801c87a <__sfputs_r>:
 801c87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c87c:	4606      	mov	r6, r0
 801c87e:	460f      	mov	r7, r1
 801c880:	4614      	mov	r4, r2
 801c882:	18d5      	adds	r5, r2, r3
 801c884:	42ac      	cmp	r4, r5
 801c886:	d101      	bne.n	801c88c <__sfputs_r+0x12>
 801c888:	2000      	movs	r0, #0
 801c88a:	e007      	b.n	801c89c <__sfputs_r+0x22>
 801c88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c890:	463a      	mov	r2, r7
 801c892:	4630      	mov	r0, r6
 801c894:	f7ff ffda 	bl	801c84c <__sfputc_r>
 801c898:	1c43      	adds	r3, r0, #1
 801c89a:	d1f3      	bne.n	801c884 <__sfputs_r+0xa>
 801c89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c8a0 <_vfiprintf_r>:
 801c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a4:	460d      	mov	r5, r1
 801c8a6:	b09d      	sub	sp, #116	; 0x74
 801c8a8:	4614      	mov	r4, r2
 801c8aa:	4698      	mov	r8, r3
 801c8ac:	4606      	mov	r6, r0
 801c8ae:	b118      	cbz	r0, 801c8b8 <_vfiprintf_r+0x18>
 801c8b0:	6983      	ldr	r3, [r0, #24]
 801c8b2:	b90b      	cbnz	r3, 801c8b8 <_vfiprintf_r+0x18>
 801c8b4:	f7ff fddc 	bl	801c470 <__sinit>
 801c8b8:	4b89      	ldr	r3, [pc, #548]	; (801cae0 <_vfiprintf_r+0x240>)
 801c8ba:	429d      	cmp	r5, r3
 801c8bc:	d11b      	bne.n	801c8f6 <_vfiprintf_r+0x56>
 801c8be:	6875      	ldr	r5, [r6, #4]
 801c8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c8c2:	07d9      	lsls	r1, r3, #31
 801c8c4:	d405      	bmi.n	801c8d2 <_vfiprintf_r+0x32>
 801c8c6:	89ab      	ldrh	r3, [r5, #12]
 801c8c8:	059a      	lsls	r2, r3, #22
 801c8ca:	d402      	bmi.n	801c8d2 <_vfiprintf_r+0x32>
 801c8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c8ce:	f7ff fea4 	bl	801c61a <__retarget_lock_acquire_recursive>
 801c8d2:	89ab      	ldrh	r3, [r5, #12]
 801c8d4:	071b      	lsls	r3, r3, #28
 801c8d6:	d501      	bpl.n	801c8dc <_vfiprintf_r+0x3c>
 801c8d8:	692b      	ldr	r3, [r5, #16]
 801c8da:	b9eb      	cbnz	r3, 801c918 <_vfiprintf_r+0x78>
 801c8dc:	4629      	mov	r1, r5
 801c8de:	4630      	mov	r0, r6
 801c8e0:	f000 fc90 	bl	801d204 <__swsetup_r>
 801c8e4:	b1c0      	cbz	r0, 801c918 <_vfiprintf_r+0x78>
 801c8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c8e8:	07dc      	lsls	r4, r3, #31
 801c8ea:	d50e      	bpl.n	801c90a <_vfiprintf_r+0x6a>
 801c8ec:	f04f 30ff 	mov.w	r0, #4294967295
 801c8f0:	b01d      	add	sp, #116	; 0x74
 801c8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8f6:	4b7b      	ldr	r3, [pc, #492]	; (801cae4 <_vfiprintf_r+0x244>)
 801c8f8:	429d      	cmp	r5, r3
 801c8fa:	d101      	bne.n	801c900 <_vfiprintf_r+0x60>
 801c8fc:	68b5      	ldr	r5, [r6, #8]
 801c8fe:	e7df      	b.n	801c8c0 <_vfiprintf_r+0x20>
 801c900:	4b79      	ldr	r3, [pc, #484]	; (801cae8 <_vfiprintf_r+0x248>)
 801c902:	429d      	cmp	r5, r3
 801c904:	bf08      	it	eq
 801c906:	68f5      	ldreq	r5, [r6, #12]
 801c908:	e7da      	b.n	801c8c0 <_vfiprintf_r+0x20>
 801c90a:	89ab      	ldrh	r3, [r5, #12]
 801c90c:	0598      	lsls	r0, r3, #22
 801c90e:	d4ed      	bmi.n	801c8ec <_vfiprintf_r+0x4c>
 801c910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c912:	f7ff fe84 	bl	801c61e <__retarget_lock_release_recursive>
 801c916:	e7e9      	b.n	801c8ec <_vfiprintf_r+0x4c>
 801c918:	2300      	movs	r3, #0
 801c91a:	9309      	str	r3, [sp, #36]	; 0x24
 801c91c:	2320      	movs	r3, #32
 801c91e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c922:	f8cd 800c 	str.w	r8, [sp, #12]
 801c926:	2330      	movs	r3, #48	; 0x30
 801c928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801caec <_vfiprintf_r+0x24c>
 801c92c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c930:	f04f 0901 	mov.w	r9, #1
 801c934:	4623      	mov	r3, r4
 801c936:	469a      	mov	sl, r3
 801c938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c93c:	b10a      	cbz	r2, 801c942 <_vfiprintf_r+0xa2>
 801c93e:	2a25      	cmp	r2, #37	; 0x25
 801c940:	d1f9      	bne.n	801c936 <_vfiprintf_r+0x96>
 801c942:	ebba 0b04 	subs.w	fp, sl, r4
 801c946:	d00b      	beq.n	801c960 <_vfiprintf_r+0xc0>
 801c948:	465b      	mov	r3, fp
 801c94a:	4622      	mov	r2, r4
 801c94c:	4629      	mov	r1, r5
 801c94e:	4630      	mov	r0, r6
 801c950:	f7ff ff93 	bl	801c87a <__sfputs_r>
 801c954:	3001      	adds	r0, #1
 801c956:	f000 80aa 	beq.w	801caae <_vfiprintf_r+0x20e>
 801c95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c95c:	445a      	add	r2, fp
 801c95e:	9209      	str	r2, [sp, #36]	; 0x24
 801c960:	f89a 3000 	ldrb.w	r3, [sl]
 801c964:	2b00      	cmp	r3, #0
 801c966:	f000 80a2 	beq.w	801caae <_vfiprintf_r+0x20e>
 801c96a:	2300      	movs	r3, #0
 801c96c:	f04f 32ff 	mov.w	r2, #4294967295
 801c970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c974:	f10a 0a01 	add.w	sl, sl, #1
 801c978:	9304      	str	r3, [sp, #16]
 801c97a:	9307      	str	r3, [sp, #28]
 801c97c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c980:	931a      	str	r3, [sp, #104]	; 0x68
 801c982:	4654      	mov	r4, sl
 801c984:	2205      	movs	r2, #5
 801c986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c98a:	4858      	ldr	r0, [pc, #352]	; (801caec <_vfiprintf_r+0x24c>)
 801c98c:	f7e3 fcc8 	bl	8000320 <memchr>
 801c990:	9a04      	ldr	r2, [sp, #16]
 801c992:	b9d8      	cbnz	r0, 801c9cc <_vfiprintf_r+0x12c>
 801c994:	06d1      	lsls	r1, r2, #27
 801c996:	bf44      	itt	mi
 801c998:	2320      	movmi	r3, #32
 801c99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c99e:	0713      	lsls	r3, r2, #28
 801c9a0:	bf44      	itt	mi
 801c9a2:	232b      	movmi	r3, #43	; 0x2b
 801c9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c9a8:	f89a 3000 	ldrb.w	r3, [sl]
 801c9ac:	2b2a      	cmp	r3, #42	; 0x2a
 801c9ae:	d015      	beq.n	801c9dc <_vfiprintf_r+0x13c>
 801c9b0:	9a07      	ldr	r2, [sp, #28]
 801c9b2:	4654      	mov	r4, sl
 801c9b4:	2000      	movs	r0, #0
 801c9b6:	f04f 0c0a 	mov.w	ip, #10
 801c9ba:	4621      	mov	r1, r4
 801c9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c9c0:	3b30      	subs	r3, #48	; 0x30
 801c9c2:	2b09      	cmp	r3, #9
 801c9c4:	d94e      	bls.n	801ca64 <_vfiprintf_r+0x1c4>
 801c9c6:	b1b0      	cbz	r0, 801c9f6 <_vfiprintf_r+0x156>
 801c9c8:	9207      	str	r2, [sp, #28]
 801c9ca:	e014      	b.n	801c9f6 <_vfiprintf_r+0x156>
 801c9cc:	eba0 0308 	sub.w	r3, r0, r8
 801c9d0:	fa09 f303 	lsl.w	r3, r9, r3
 801c9d4:	4313      	orrs	r3, r2
 801c9d6:	9304      	str	r3, [sp, #16]
 801c9d8:	46a2      	mov	sl, r4
 801c9da:	e7d2      	b.n	801c982 <_vfiprintf_r+0xe2>
 801c9dc:	9b03      	ldr	r3, [sp, #12]
 801c9de:	1d19      	adds	r1, r3, #4
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	9103      	str	r1, [sp, #12]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	bfbb      	ittet	lt
 801c9e8:	425b      	neglt	r3, r3
 801c9ea:	f042 0202 	orrlt.w	r2, r2, #2
 801c9ee:	9307      	strge	r3, [sp, #28]
 801c9f0:	9307      	strlt	r3, [sp, #28]
 801c9f2:	bfb8      	it	lt
 801c9f4:	9204      	strlt	r2, [sp, #16]
 801c9f6:	7823      	ldrb	r3, [r4, #0]
 801c9f8:	2b2e      	cmp	r3, #46	; 0x2e
 801c9fa:	d10c      	bne.n	801ca16 <_vfiprintf_r+0x176>
 801c9fc:	7863      	ldrb	r3, [r4, #1]
 801c9fe:	2b2a      	cmp	r3, #42	; 0x2a
 801ca00:	d135      	bne.n	801ca6e <_vfiprintf_r+0x1ce>
 801ca02:	9b03      	ldr	r3, [sp, #12]
 801ca04:	1d1a      	adds	r2, r3, #4
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	9203      	str	r2, [sp, #12]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	bfb8      	it	lt
 801ca0e:	f04f 33ff 	movlt.w	r3, #4294967295
 801ca12:	3402      	adds	r4, #2
 801ca14:	9305      	str	r3, [sp, #20]
 801ca16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801cafc <_vfiprintf_r+0x25c>
 801ca1a:	7821      	ldrb	r1, [r4, #0]
 801ca1c:	2203      	movs	r2, #3
 801ca1e:	4650      	mov	r0, sl
 801ca20:	f7e3 fc7e 	bl	8000320 <memchr>
 801ca24:	b140      	cbz	r0, 801ca38 <_vfiprintf_r+0x198>
 801ca26:	2340      	movs	r3, #64	; 0x40
 801ca28:	eba0 000a 	sub.w	r0, r0, sl
 801ca2c:	fa03 f000 	lsl.w	r0, r3, r0
 801ca30:	9b04      	ldr	r3, [sp, #16]
 801ca32:	4303      	orrs	r3, r0
 801ca34:	3401      	adds	r4, #1
 801ca36:	9304      	str	r3, [sp, #16]
 801ca38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca3c:	482c      	ldr	r0, [pc, #176]	; (801caf0 <_vfiprintf_r+0x250>)
 801ca3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ca42:	2206      	movs	r2, #6
 801ca44:	f7e3 fc6c 	bl	8000320 <memchr>
 801ca48:	2800      	cmp	r0, #0
 801ca4a:	d03f      	beq.n	801cacc <_vfiprintf_r+0x22c>
 801ca4c:	4b29      	ldr	r3, [pc, #164]	; (801caf4 <_vfiprintf_r+0x254>)
 801ca4e:	bb1b      	cbnz	r3, 801ca98 <_vfiprintf_r+0x1f8>
 801ca50:	9b03      	ldr	r3, [sp, #12]
 801ca52:	3307      	adds	r3, #7
 801ca54:	f023 0307 	bic.w	r3, r3, #7
 801ca58:	3308      	adds	r3, #8
 801ca5a:	9303      	str	r3, [sp, #12]
 801ca5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca5e:	443b      	add	r3, r7
 801ca60:	9309      	str	r3, [sp, #36]	; 0x24
 801ca62:	e767      	b.n	801c934 <_vfiprintf_r+0x94>
 801ca64:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca68:	460c      	mov	r4, r1
 801ca6a:	2001      	movs	r0, #1
 801ca6c:	e7a5      	b.n	801c9ba <_vfiprintf_r+0x11a>
 801ca6e:	2300      	movs	r3, #0
 801ca70:	3401      	adds	r4, #1
 801ca72:	9305      	str	r3, [sp, #20]
 801ca74:	4619      	mov	r1, r3
 801ca76:	f04f 0c0a 	mov.w	ip, #10
 801ca7a:	4620      	mov	r0, r4
 801ca7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ca80:	3a30      	subs	r2, #48	; 0x30
 801ca82:	2a09      	cmp	r2, #9
 801ca84:	d903      	bls.n	801ca8e <_vfiprintf_r+0x1ee>
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d0c5      	beq.n	801ca16 <_vfiprintf_r+0x176>
 801ca8a:	9105      	str	r1, [sp, #20]
 801ca8c:	e7c3      	b.n	801ca16 <_vfiprintf_r+0x176>
 801ca8e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca92:	4604      	mov	r4, r0
 801ca94:	2301      	movs	r3, #1
 801ca96:	e7f0      	b.n	801ca7a <_vfiprintf_r+0x1da>
 801ca98:	ab03      	add	r3, sp, #12
 801ca9a:	9300      	str	r3, [sp, #0]
 801ca9c:	462a      	mov	r2, r5
 801ca9e:	4b16      	ldr	r3, [pc, #88]	; (801caf8 <_vfiprintf_r+0x258>)
 801caa0:	a904      	add	r1, sp, #16
 801caa2:	4630      	mov	r0, r6
 801caa4:	f3af 8000 	nop.w
 801caa8:	4607      	mov	r7, r0
 801caaa:	1c78      	adds	r0, r7, #1
 801caac:	d1d6      	bne.n	801ca5c <_vfiprintf_r+0x1bc>
 801caae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cab0:	07d9      	lsls	r1, r3, #31
 801cab2:	d405      	bmi.n	801cac0 <_vfiprintf_r+0x220>
 801cab4:	89ab      	ldrh	r3, [r5, #12]
 801cab6:	059a      	lsls	r2, r3, #22
 801cab8:	d402      	bmi.n	801cac0 <_vfiprintf_r+0x220>
 801caba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cabc:	f7ff fdaf 	bl	801c61e <__retarget_lock_release_recursive>
 801cac0:	89ab      	ldrh	r3, [r5, #12]
 801cac2:	065b      	lsls	r3, r3, #25
 801cac4:	f53f af12 	bmi.w	801c8ec <_vfiprintf_r+0x4c>
 801cac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801caca:	e711      	b.n	801c8f0 <_vfiprintf_r+0x50>
 801cacc:	ab03      	add	r3, sp, #12
 801cace:	9300      	str	r3, [sp, #0]
 801cad0:	462a      	mov	r2, r5
 801cad2:	4b09      	ldr	r3, [pc, #36]	; (801caf8 <_vfiprintf_r+0x258>)
 801cad4:	a904      	add	r1, sp, #16
 801cad6:	4630      	mov	r0, r6
 801cad8:	f000 f880 	bl	801cbdc <_printf_i>
 801cadc:	e7e4      	b.n	801caa8 <_vfiprintf_r+0x208>
 801cade:	bf00      	nop
 801cae0:	0801f5c4 	.word	0x0801f5c4
 801cae4:	0801f5e4 	.word	0x0801f5e4
 801cae8:	0801f5a4 	.word	0x0801f5a4
 801caec:	0801f608 	.word	0x0801f608
 801caf0:	0801f612 	.word	0x0801f612
 801caf4:	00000000 	.word	0x00000000
 801caf8:	0801c87b 	.word	0x0801c87b
 801cafc:	0801f60e 	.word	0x0801f60e

0801cb00 <_printf_common>:
 801cb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb04:	4616      	mov	r6, r2
 801cb06:	4699      	mov	r9, r3
 801cb08:	688a      	ldr	r2, [r1, #8]
 801cb0a:	690b      	ldr	r3, [r1, #16]
 801cb0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cb10:	4293      	cmp	r3, r2
 801cb12:	bfb8      	it	lt
 801cb14:	4613      	movlt	r3, r2
 801cb16:	6033      	str	r3, [r6, #0]
 801cb18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cb1c:	4607      	mov	r7, r0
 801cb1e:	460c      	mov	r4, r1
 801cb20:	b10a      	cbz	r2, 801cb26 <_printf_common+0x26>
 801cb22:	3301      	adds	r3, #1
 801cb24:	6033      	str	r3, [r6, #0]
 801cb26:	6823      	ldr	r3, [r4, #0]
 801cb28:	0699      	lsls	r1, r3, #26
 801cb2a:	bf42      	ittt	mi
 801cb2c:	6833      	ldrmi	r3, [r6, #0]
 801cb2e:	3302      	addmi	r3, #2
 801cb30:	6033      	strmi	r3, [r6, #0]
 801cb32:	6825      	ldr	r5, [r4, #0]
 801cb34:	f015 0506 	ands.w	r5, r5, #6
 801cb38:	d106      	bne.n	801cb48 <_printf_common+0x48>
 801cb3a:	f104 0a19 	add.w	sl, r4, #25
 801cb3e:	68e3      	ldr	r3, [r4, #12]
 801cb40:	6832      	ldr	r2, [r6, #0]
 801cb42:	1a9b      	subs	r3, r3, r2
 801cb44:	42ab      	cmp	r3, r5
 801cb46:	dc26      	bgt.n	801cb96 <_printf_common+0x96>
 801cb48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cb4c:	1e13      	subs	r3, r2, #0
 801cb4e:	6822      	ldr	r2, [r4, #0]
 801cb50:	bf18      	it	ne
 801cb52:	2301      	movne	r3, #1
 801cb54:	0692      	lsls	r2, r2, #26
 801cb56:	d42b      	bmi.n	801cbb0 <_printf_common+0xb0>
 801cb58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cb5c:	4649      	mov	r1, r9
 801cb5e:	4638      	mov	r0, r7
 801cb60:	47c0      	blx	r8
 801cb62:	3001      	adds	r0, #1
 801cb64:	d01e      	beq.n	801cba4 <_printf_common+0xa4>
 801cb66:	6823      	ldr	r3, [r4, #0]
 801cb68:	68e5      	ldr	r5, [r4, #12]
 801cb6a:	6832      	ldr	r2, [r6, #0]
 801cb6c:	f003 0306 	and.w	r3, r3, #6
 801cb70:	2b04      	cmp	r3, #4
 801cb72:	bf08      	it	eq
 801cb74:	1aad      	subeq	r5, r5, r2
 801cb76:	68a3      	ldr	r3, [r4, #8]
 801cb78:	6922      	ldr	r2, [r4, #16]
 801cb7a:	bf0c      	ite	eq
 801cb7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cb80:	2500      	movne	r5, #0
 801cb82:	4293      	cmp	r3, r2
 801cb84:	bfc4      	itt	gt
 801cb86:	1a9b      	subgt	r3, r3, r2
 801cb88:	18ed      	addgt	r5, r5, r3
 801cb8a:	2600      	movs	r6, #0
 801cb8c:	341a      	adds	r4, #26
 801cb8e:	42b5      	cmp	r5, r6
 801cb90:	d11a      	bne.n	801cbc8 <_printf_common+0xc8>
 801cb92:	2000      	movs	r0, #0
 801cb94:	e008      	b.n	801cba8 <_printf_common+0xa8>
 801cb96:	2301      	movs	r3, #1
 801cb98:	4652      	mov	r2, sl
 801cb9a:	4649      	mov	r1, r9
 801cb9c:	4638      	mov	r0, r7
 801cb9e:	47c0      	blx	r8
 801cba0:	3001      	adds	r0, #1
 801cba2:	d103      	bne.n	801cbac <_printf_common+0xac>
 801cba4:	f04f 30ff 	mov.w	r0, #4294967295
 801cba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbac:	3501      	adds	r5, #1
 801cbae:	e7c6      	b.n	801cb3e <_printf_common+0x3e>
 801cbb0:	18e1      	adds	r1, r4, r3
 801cbb2:	1c5a      	adds	r2, r3, #1
 801cbb4:	2030      	movs	r0, #48	; 0x30
 801cbb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cbba:	4422      	add	r2, r4
 801cbbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cbc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cbc4:	3302      	adds	r3, #2
 801cbc6:	e7c7      	b.n	801cb58 <_printf_common+0x58>
 801cbc8:	2301      	movs	r3, #1
 801cbca:	4622      	mov	r2, r4
 801cbcc:	4649      	mov	r1, r9
 801cbce:	4638      	mov	r0, r7
 801cbd0:	47c0      	blx	r8
 801cbd2:	3001      	adds	r0, #1
 801cbd4:	d0e6      	beq.n	801cba4 <_printf_common+0xa4>
 801cbd6:	3601      	adds	r6, #1
 801cbd8:	e7d9      	b.n	801cb8e <_printf_common+0x8e>
	...

0801cbdc <_printf_i>:
 801cbdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cbe0:	7e0f      	ldrb	r7, [r1, #24]
 801cbe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cbe4:	2f78      	cmp	r7, #120	; 0x78
 801cbe6:	4691      	mov	r9, r2
 801cbe8:	4680      	mov	r8, r0
 801cbea:	460c      	mov	r4, r1
 801cbec:	469a      	mov	sl, r3
 801cbee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cbf2:	d807      	bhi.n	801cc04 <_printf_i+0x28>
 801cbf4:	2f62      	cmp	r7, #98	; 0x62
 801cbf6:	d80a      	bhi.n	801cc0e <_printf_i+0x32>
 801cbf8:	2f00      	cmp	r7, #0
 801cbfa:	f000 80d8 	beq.w	801cdae <_printf_i+0x1d2>
 801cbfe:	2f58      	cmp	r7, #88	; 0x58
 801cc00:	f000 80a3 	beq.w	801cd4a <_printf_i+0x16e>
 801cc04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cc08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cc0c:	e03a      	b.n	801cc84 <_printf_i+0xa8>
 801cc0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cc12:	2b15      	cmp	r3, #21
 801cc14:	d8f6      	bhi.n	801cc04 <_printf_i+0x28>
 801cc16:	a101      	add	r1, pc, #4	; (adr r1, 801cc1c <_printf_i+0x40>)
 801cc18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cc1c:	0801cc75 	.word	0x0801cc75
 801cc20:	0801cc89 	.word	0x0801cc89
 801cc24:	0801cc05 	.word	0x0801cc05
 801cc28:	0801cc05 	.word	0x0801cc05
 801cc2c:	0801cc05 	.word	0x0801cc05
 801cc30:	0801cc05 	.word	0x0801cc05
 801cc34:	0801cc89 	.word	0x0801cc89
 801cc38:	0801cc05 	.word	0x0801cc05
 801cc3c:	0801cc05 	.word	0x0801cc05
 801cc40:	0801cc05 	.word	0x0801cc05
 801cc44:	0801cc05 	.word	0x0801cc05
 801cc48:	0801cd95 	.word	0x0801cd95
 801cc4c:	0801ccb9 	.word	0x0801ccb9
 801cc50:	0801cd77 	.word	0x0801cd77
 801cc54:	0801cc05 	.word	0x0801cc05
 801cc58:	0801cc05 	.word	0x0801cc05
 801cc5c:	0801cdb7 	.word	0x0801cdb7
 801cc60:	0801cc05 	.word	0x0801cc05
 801cc64:	0801ccb9 	.word	0x0801ccb9
 801cc68:	0801cc05 	.word	0x0801cc05
 801cc6c:	0801cc05 	.word	0x0801cc05
 801cc70:	0801cd7f 	.word	0x0801cd7f
 801cc74:	682b      	ldr	r3, [r5, #0]
 801cc76:	1d1a      	adds	r2, r3, #4
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	602a      	str	r2, [r5, #0]
 801cc7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cc80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cc84:	2301      	movs	r3, #1
 801cc86:	e0a3      	b.n	801cdd0 <_printf_i+0x1f4>
 801cc88:	6820      	ldr	r0, [r4, #0]
 801cc8a:	6829      	ldr	r1, [r5, #0]
 801cc8c:	0606      	lsls	r6, r0, #24
 801cc8e:	f101 0304 	add.w	r3, r1, #4
 801cc92:	d50a      	bpl.n	801ccaa <_printf_i+0xce>
 801cc94:	680e      	ldr	r6, [r1, #0]
 801cc96:	602b      	str	r3, [r5, #0]
 801cc98:	2e00      	cmp	r6, #0
 801cc9a:	da03      	bge.n	801cca4 <_printf_i+0xc8>
 801cc9c:	232d      	movs	r3, #45	; 0x2d
 801cc9e:	4276      	negs	r6, r6
 801cca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cca4:	485e      	ldr	r0, [pc, #376]	; (801ce20 <_printf_i+0x244>)
 801cca6:	230a      	movs	r3, #10
 801cca8:	e019      	b.n	801ccde <_printf_i+0x102>
 801ccaa:	680e      	ldr	r6, [r1, #0]
 801ccac:	602b      	str	r3, [r5, #0]
 801ccae:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ccb2:	bf18      	it	ne
 801ccb4:	b236      	sxthne	r6, r6
 801ccb6:	e7ef      	b.n	801cc98 <_printf_i+0xbc>
 801ccb8:	682b      	ldr	r3, [r5, #0]
 801ccba:	6820      	ldr	r0, [r4, #0]
 801ccbc:	1d19      	adds	r1, r3, #4
 801ccbe:	6029      	str	r1, [r5, #0]
 801ccc0:	0601      	lsls	r1, r0, #24
 801ccc2:	d501      	bpl.n	801ccc8 <_printf_i+0xec>
 801ccc4:	681e      	ldr	r6, [r3, #0]
 801ccc6:	e002      	b.n	801ccce <_printf_i+0xf2>
 801ccc8:	0646      	lsls	r6, r0, #25
 801ccca:	d5fb      	bpl.n	801ccc4 <_printf_i+0xe8>
 801cccc:	881e      	ldrh	r6, [r3, #0]
 801ccce:	4854      	ldr	r0, [pc, #336]	; (801ce20 <_printf_i+0x244>)
 801ccd0:	2f6f      	cmp	r7, #111	; 0x6f
 801ccd2:	bf0c      	ite	eq
 801ccd4:	2308      	moveq	r3, #8
 801ccd6:	230a      	movne	r3, #10
 801ccd8:	2100      	movs	r1, #0
 801ccda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ccde:	6865      	ldr	r5, [r4, #4]
 801cce0:	60a5      	str	r5, [r4, #8]
 801cce2:	2d00      	cmp	r5, #0
 801cce4:	bfa2      	ittt	ge
 801cce6:	6821      	ldrge	r1, [r4, #0]
 801cce8:	f021 0104 	bicge.w	r1, r1, #4
 801ccec:	6021      	strge	r1, [r4, #0]
 801ccee:	b90e      	cbnz	r6, 801ccf4 <_printf_i+0x118>
 801ccf0:	2d00      	cmp	r5, #0
 801ccf2:	d04d      	beq.n	801cd90 <_printf_i+0x1b4>
 801ccf4:	4615      	mov	r5, r2
 801ccf6:	fbb6 f1f3 	udiv	r1, r6, r3
 801ccfa:	fb03 6711 	mls	r7, r3, r1, r6
 801ccfe:	5dc7      	ldrb	r7, [r0, r7]
 801cd00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cd04:	4637      	mov	r7, r6
 801cd06:	42bb      	cmp	r3, r7
 801cd08:	460e      	mov	r6, r1
 801cd0a:	d9f4      	bls.n	801ccf6 <_printf_i+0x11a>
 801cd0c:	2b08      	cmp	r3, #8
 801cd0e:	d10b      	bne.n	801cd28 <_printf_i+0x14c>
 801cd10:	6823      	ldr	r3, [r4, #0]
 801cd12:	07de      	lsls	r6, r3, #31
 801cd14:	d508      	bpl.n	801cd28 <_printf_i+0x14c>
 801cd16:	6923      	ldr	r3, [r4, #16]
 801cd18:	6861      	ldr	r1, [r4, #4]
 801cd1a:	4299      	cmp	r1, r3
 801cd1c:	bfde      	ittt	le
 801cd1e:	2330      	movle	r3, #48	; 0x30
 801cd20:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cd24:	f105 35ff 	addle.w	r5, r5, #4294967295
 801cd28:	1b52      	subs	r2, r2, r5
 801cd2a:	6122      	str	r2, [r4, #16]
 801cd2c:	f8cd a000 	str.w	sl, [sp]
 801cd30:	464b      	mov	r3, r9
 801cd32:	aa03      	add	r2, sp, #12
 801cd34:	4621      	mov	r1, r4
 801cd36:	4640      	mov	r0, r8
 801cd38:	f7ff fee2 	bl	801cb00 <_printf_common>
 801cd3c:	3001      	adds	r0, #1
 801cd3e:	d14c      	bne.n	801cdda <_printf_i+0x1fe>
 801cd40:	f04f 30ff 	mov.w	r0, #4294967295
 801cd44:	b004      	add	sp, #16
 801cd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd4a:	4835      	ldr	r0, [pc, #212]	; (801ce20 <_printf_i+0x244>)
 801cd4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801cd50:	6829      	ldr	r1, [r5, #0]
 801cd52:	6823      	ldr	r3, [r4, #0]
 801cd54:	f851 6b04 	ldr.w	r6, [r1], #4
 801cd58:	6029      	str	r1, [r5, #0]
 801cd5a:	061d      	lsls	r5, r3, #24
 801cd5c:	d514      	bpl.n	801cd88 <_printf_i+0x1ac>
 801cd5e:	07df      	lsls	r7, r3, #31
 801cd60:	bf44      	itt	mi
 801cd62:	f043 0320 	orrmi.w	r3, r3, #32
 801cd66:	6023      	strmi	r3, [r4, #0]
 801cd68:	b91e      	cbnz	r6, 801cd72 <_printf_i+0x196>
 801cd6a:	6823      	ldr	r3, [r4, #0]
 801cd6c:	f023 0320 	bic.w	r3, r3, #32
 801cd70:	6023      	str	r3, [r4, #0]
 801cd72:	2310      	movs	r3, #16
 801cd74:	e7b0      	b.n	801ccd8 <_printf_i+0xfc>
 801cd76:	6823      	ldr	r3, [r4, #0]
 801cd78:	f043 0320 	orr.w	r3, r3, #32
 801cd7c:	6023      	str	r3, [r4, #0]
 801cd7e:	2378      	movs	r3, #120	; 0x78
 801cd80:	4828      	ldr	r0, [pc, #160]	; (801ce24 <_printf_i+0x248>)
 801cd82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801cd86:	e7e3      	b.n	801cd50 <_printf_i+0x174>
 801cd88:	0659      	lsls	r1, r3, #25
 801cd8a:	bf48      	it	mi
 801cd8c:	b2b6      	uxthmi	r6, r6
 801cd8e:	e7e6      	b.n	801cd5e <_printf_i+0x182>
 801cd90:	4615      	mov	r5, r2
 801cd92:	e7bb      	b.n	801cd0c <_printf_i+0x130>
 801cd94:	682b      	ldr	r3, [r5, #0]
 801cd96:	6826      	ldr	r6, [r4, #0]
 801cd98:	6961      	ldr	r1, [r4, #20]
 801cd9a:	1d18      	adds	r0, r3, #4
 801cd9c:	6028      	str	r0, [r5, #0]
 801cd9e:	0635      	lsls	r5, r6, #24
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	d501      	bpl.n	801cda8 <_printf_i+0x1cc>
 801cda4:	6019      	str	r1, [r3, #0]
 801cda6:	e002      	b.n	801cdae <_printf_i+0x1d2>
 801cda8:	0670      	lsls	r0, r6, #25
 801cdaa:	d5fb      	bpl.n	801cda4 <_printf_i+0x1c8>
 801cdac:	8019      	strh	r1, [r3, #0]
 801cdae:	2300      	movs	r3, #0
 801cdb0:	6123      	str	r3, [r4, #16]
 801cdb2:	4615      	mov	r5, r2
 801cdb4:	e7ba      	b.n	801cd2c <_printf_i+0x150>
 801cdb6:	682b      	ldr	r3, [r5, #0]
 801cdb8:	1d1a      	adds	r2, r3, #4
 801cdba:	602a      	str	r2, [r5, #0]
 801cdbc:	681d      	ldr	r5, [r3, #0]
 801cdbe:	6862      	ldr	r2, [r4, #4]
 801cdc0:	2100      	movs	r1, #0
 801cdc2:	4628      	mov	r0, r5
 801cdc4:	f7e3 faac 	bl	8000320 <memchr>
 801cdc8:	b108      	cbz	r0, 801cdce <_printf_i+0x1f2>
 801cdca:	1b40      	subs	r0, r0, r5
 801cdcc:	6060      	str	r0, [r4, #4]
 801cdce:	6863      	ldr	r3, [r4, #4]
 801cdd0:	6123      	str	r3, [r4, #16]
 801cdd2:	2300      	movs	r3, #0
 801cdd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cdd8:	e7a8      	b.n	801cd2c <_printf_i+0x150>
 801cdda:	6923      	ldr	r3, [r4, #16]
 801cddc:	462a      	mov	r2, r5
 801cdde:	4649      	mov	r1, r9
 801cde0:	4640      	mov	r0, r8
 801cde2:	47d0      	blx	sl
 801cde4:	3001      	adds	r0, #1
 801cde6:	d0ab      	beq.n	801cd40 <_printf_i+0x164>
 801cde8:	6823      	ldr	r3, [r4, #0]
 801cdea:	079b      	lsls	r3, r3, #30
 801cdec:	d413      	bmi.n	801ce16 <_printf_i+0x23a>
 801cdee:	68e0      	ldr	r0, [r4, #12]
 801cdf0:	9b03      	ldr	r3, [sp, #12]
 801cdf2:	4298      	cmp	r0, r3
 801cdf4:	bfb8      	it	lt
 801cdf6:	4618      	movlt	r0, r3
 801cdf8:	e7a4      	b.n	801cd44 <_printf_i+0x168>
 801cdfa:	2301      	movs	r3, #1
 801cdfc:	4632      	mov	r2, r6
 801cdfe:	4649      	mov	r1, r9
 801ce00:	4640      	mov	r0, r8
 801ce02:	47d0      	blx	sl
 801ce04:	3001      	adds	r0, #1
 801ce06:	d09b      	beq.n	801cd40 <_printf_i+0x164>
 801ce08:	3501      	adds	r5, #1
 801ce0a:	68e3      	ldr	r3, [r4, #12]
 801ce0c:	9903      	ldr	r1, [sp, #12]
 801ce0e:	1a5b      	subs	r3, r3, r1
 801ce10:	42ab      	cmp	r3, r5
 801ce12:	dcf2      	bgt.n	801cdfa <_printf_i+0x21e>
 801ce14:	e7eb      	b.n	801cdee <_printf_i+0x212>
 801ce16:	2500      	movs	r5, #0
 801ce18:	f104 0619 	add.w	r6, r4, #25
 801ce1c:	e7f5      	b.n	801ce0a <_printf_i+0x22e>
 801ce1e:	bf00      	nop
 801ce20:	0801f619 	.word	0x0801f619
 801ce24:	0801f62a 	.word	0x0801f62a

0801ce28 <cleanup_glue>:
 801ce28:	b538      	push	{r3, r4, r5, lr}
 801ce2a:	460c      	mov	r4, r1
 801ce2c:	6809      	ldr	r1, [r1, #0]
 801ce2e:	4605      	mov	r5, r0
 801ce30:	b109      	cbz	r1, 801ce36 <cleanup_glue+0xe>
 801ce32:	f7ff fff9 	bl	801ce28 <cleanup_glue>
 801ce36:	4621      	mov	r1, r4
 801ce38:	4628      	mov	r0, r5
 801ce3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce3e:	f7ff bc25 	b.w	801c68c <_free_r>
	...

0801ce44 <_reclaim_reent>:
 801ce44:	4b2c      	ldr	r3, [pc, #176]	; (801cef8 <_reclaim_reent+0xb4>)
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	4283      	cmp	r3, r0
 801ce4a:	b570      	push	{r4, r5, r6, lr}
 801ce4c:	4604      	mov	r4, r0
 801ce4e:	d051      	beq.n	801cef4 <_reclaim_reent+0xb0>
 801ce50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ce52:	b143      	cbz	r3, 801ce66 <_reclaim_reent+0x22>
 801ce54:	68db      	ldr	r3, [r3, #12]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d14a      	bne.n	801cef0 <_reclaim_reent+0xac>
 801ce5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ce5c:	6819      	ldr	r1, [r3, #0]
 801ce5e:	b111      	cbz	r1, 801ce66 <_reclaim_reent+0x22>
 801ce60:	4620      	mov	r0, r4
 801ce62:	f7ff fc13 	bl	801c68c <_free_r>
 801ce66:	6961      	ldr	r1, [r4, #20]
 801ce68:	b111      	cbz	r1, 801ce70 <_reclaim_reent+0x2c>
 801ce6a:	4620      	mov	r0, r4
 801ce6c:	f7ff fc0e 	bl	801c68c <_free_r>
 801ce70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ce72:	b111      	cbz	r1, 801ce7a <_reclaim_reent+0x36>
 801ce74:	4620      	mov	r0, r4
 801ce76:	f7ff fc09 	bl	801c68c <_free_r>
 801ce7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ce7c:	b111      	cbz	r1, 801ce84 <_reclaim_reent+0x40>
 801ce7e:	4620      	mov	r0, r4
 801ce80:	f7ff fc04 	bl	801c68c <_free_r>
 801ce84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ce86:	b111      	cbz	r1, 801ce8e <_reclaim_reent+0x4a>
 801ce88:	4620      	mov	r0, r4
 801ce8a:	f7ff fbff 	bl	801c68c <_free_r>
 801ce8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ce90:	b111      	cbz	r1, 801ce98 <_reclaim_reent+0x54>
 801ce92:	4620      	mov	r0, r4
 801ce94:	f7ff fbfa 	bl	801c68c <_free_r>
 801ce98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ce9a:	b111      	cbz	r1, 801cea2 <_reclaim_reent+0x5e>
 801ce9c:	4620      	mov	r0, r4
 801ce9e:	f7ff fbf5 	bl	801c68c <_free_r>
 801cea2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cea4:	b111      	cbz	r1, 801ceac <_reclaim_reent+0x68>
 801cea6:	4620      	mov	r0, r4
 801cea8:	f7ff fbf0 	bl	801c68c <_free_r>
 801ceac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ceae:	b111      	cbz	r1, 801ceb6 <_reclaim_reent+0x72>
 801ceb0:	4620      	mov	r0, r4
 801ceb2:	f7ff fbeb 	bl	801c68c <_free_r>
 801ceb6:	69a3      	ldr	r3, [r4, #24]
 801ceb8:	b1e3      	cbz	r3, 801cef4 <_reclaim_reent+0xb0>
 801ceba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cebc:	4620      	mov	r0, r4
 801cebe:	4798      	blx	r3
 801cec0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801cec2:	b1b9      	cbz	r1, 801cef4 <_reclaim_reent+0xb0>
 801cec4:	4620      	mov	r0, r4
 801cec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ceca:	f7ff bfad 	b.w	801ce28 <cleanup_glue>
 801cece:	5949      	ldr	r1, [r1, r5]
 801ced0:	b941      	cbnz	r1, 801cee4 <_reclaim_reent+0xa0>
 801ced2:	3504      	adds	r5, #4
 801ced4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ced6:	2d80      	cmp	r5, #128	; 0x80
 801ced8:	68d9      	ldr	r1, [r3, #12]
 801ceda:	d1f8      	bne.n	801cece <_reclaim_reent+0x8a>
 801cedc:	4620      	mov	r0, r4
 801cede:	f7ff fbd5 	bl	801c68c <_free_r>
 801cee2:	e7ba      	b.n	801ce5a <_reclaim_reent+0x16>
 801cee4:	680e      	ldr	r6, [r1, #0]
 801cee6:	4620      	mov	r0, r4
 801cee8:	f7ff fbd0 	bl	801c68c <_free_r>
 801ceec:	4631      	mov	r1, r6
 801ceee:	e7ef      	b.n	801ced0 <_reclaim_reent+0x8c>
 801cef0:	2500      	movs	r5, #0
 801cef2:	e7ef      	b.n	801ced4 <_reclaim_reent+0x90>
 801cef4:	bd70      	pop	{r4, r5, r6, pc}
 801cef6:	bf00      	nop
 801cef8:	240000ac 	.word	0x240000ac

0801cefc <_sbrk_r>:
 801cefc:	b538      	push	{r3, r4, r5, lr}
 801cefe:	4d06      	ldr	r5, [pc, #24]	; (801cf18 <_sbrk_r+0x1c>)
 801cf00:	2300      	movs	r3, #0
 801cf02:	4604      	mov	r4, r0
 801cf04:	4608      	mov	r0, r1
 801cf06:	602b      	str	r3, [r5, #0]
 801cf08:	f7e5 fdec 	bl	8002ae4 <_sbrk>
 801cf0c:	1c43      	adds	r3, r0, #1
 801cf0e:	d102      	bne.n	801cf16 <_sbrk_r+0x1a>
 801cf10:	682b      	ldr	r3, [r5, #0]
 801cf12:	b103      	cbz	r3, 801cf16 <_sbrk_r+0x1a>
 801cf14:	6023      	str	r3, [r4, #0]
 801cf16:	bd38      	pop	{r3, r4, r5, pc}
 801cf18:	2400bb70 	.word	0x2400bb70

0801cf1c <_raise_r>:
 801cf1c:	291f      	cmp	r1, #31
 801cf1e:	b538      	push	{r3, r4, r5, lr}
 801cf20:	4604      	mov	r4, r0
 801cf22:	460d      	mov	r5, r1
 801cf24:	d904      	bls.n	801cf30 <_raise_r+0x14>
 801cf26:	2316      	movs	r3, #22
 801cf28:	6003      	str	r3, [r0, #0]
 801cf2a:	f04f 30ff 	mov.w	r0, #4294967295
 801cf2e:	bd38      	pop	{r3, r4, r5, pc}
 801cf30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cf32:	b112      	cbz	r2, 801cf3a <_raise_r+0x1e>
 801cf34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cf38:	b94b      	cbnz	r3, 801cf4e <_raise_r+0x32>
 801cf3a:	4620      	mov	r0, r4
 801cf3c:	f000 f830 	bl	801cfa0 <_getpid_r>
 801cf40:	462a      	mov	r2, r5
 801cf42:	4601      	mov	r1, r0
 801cf44:	4620      	mov	r0, r4
 801cf46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf4a:	f000 b817 	b.w	801cf7c <_kill_r>
 801cf4e:	2b01      	cmp	r3, #1
 801cf50:	d00a      	beq.n	801cf68 <_raise_r+0x4c>
 801cf52:	1c59      	adds	r1, r3, #1
 801cf54:	d103      	bne.n	801cf5e <_raise_r+0x42>
 801cf56:	2316      	movs	r3, #22
 801cf58:	6003      	str	r3, [r0, #0]
 801cf5a:	2001      	movs	r0, #1
 801cf5c:	e7e7      	b.n	801cf2e <_raise_r+0x12>
 801cf5e:	2400      	movs	r4, #0
 801cf60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cf64:	4628      	mov	r0, r5
 801cf66:	4798      	blx	r3
 801cf68:	2000      	movs	r0, #0
 801cf6a:	e7e0      	b.n	801cf2e <_raise_r+0x12>

0801cf6c <raise>:
 801cf6c:	4b02      	ldr	r3, [pc, #8]	; (801cf78 <raise+0xc>)
 801cf6e:	4601      	mov	r1, r0
 801cf70:	6818      	ldr	r0, [r3, #0]
 801cf72:	f7ff bfd3 	b.w	801cf1c <_raise_r>
 801cf76:	bf00      	nop
 801cf78:	240000ac 	.word	0x240000ac

0801cf7c <_kill_r>:
 801cf7c:	b538      	push	{r3, r4, r5, lr}
 801cf7e:	4d07      	ldr	r5, [pc, #28]	; (801cf9c <_kill_r+0x20>)
 801cf80:	2300      	movs	r3, #0
 801cf82:	4604      	mov	r4, r0
 801cf84:	4608      	mov	r0, r1
 801cf86:	4611      	mov	r1, r2
 801cf88:	602b      	str	r3, [r5, #0]
 801cf8a:	f7e5 fd73 	bl	8002a74 <_kill>
 801cf8e:	1c43      	adds	r3, r0, #1
 801cf90:	d102      	bne.n	801cf98 <_kill_r+0x1c>
 801cf92:	682b      	ldr	r3, [r5, #0]
 801cf94:	b103      	cbz	r3, 801cf98 <_kill_r+0x1c>
 801cf96:	6023      	str	r3, [r4, #0]
 801cf98:	bd38      	pop	{r3, r4, r5, pc}
 801cf9a:	bf00      	nop
 801cf9c:	2400bb70 	.word	0x2400bb70

0801cfa0 <_getpid_r>:
 801cfa0:	f7e5 bd66 	b.w	8002a70 <_getpid>

0801cfa4 <siprintf>:
 801cfa4:	b40e      	push	{r1, r2, r3}
 801cfa6:	b500      	push	{lr}
 801cfa8:	b09c      	sub	sp, #112	; 0x70
 801cfaa:	ab1d      	add	r3, sp, #116	; 0x74
 801cfac:	9002      	str	r0, [sp, #8]
 801cfae:	9006      	str	r0, [sp, #24]
 801cfb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cfb4:	4809      	ldr	r0, [pc, #36]	; (801cfdc <siprintf+0x38>)
 801cfb6:	9107      	str	r1, [sp, #28]
 801cfb8:	9104      	str	r1, [sp, #16]
 801cfba:	4909      	ldr	r1, [pc, #36]	; (801cfe0 <siprintf+0x3c>)
 801cfbc:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfc0:	9105      	str	r1, [sp, #20]
 801cfc2:	6800      	ldr	r0, [r0, #0]
 801cfc4:	9301      	str	r3, [sp, #4]
 801cfc6:	a902      	add	r1, sp, #8
 801cfc8:	f000 fbe6 	bl	801d798 <_svfiprintf_r>
 801cfcc:	9b02      	ldr	r3, [sp, #8]
 801cfce:	2200      	movs	r2, #0
 801cfd0:	701a      	strb	r2, [r3, #0]
 801cfd2:	b01c      	add	sp, #112	; 0x70
 801cfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 801cfd8:	b003      	add	sp, #12
 801cfda:	4770      	bx	lr
 801cfdc:	240000ac 	.word	0x240000ac
 801cfe0:	ffff0208 	.word	0xffff0208

0801cfe4 <__sread>:
 801cfe4:	b510      	push	{r4, lr}
 801cfe6:	460c      	mov	r4, r1
 801cfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfec:	f000 fcd4 	bl	801d998 <_read_r>
 801cff0:	2800      	cmp	r0, #0
 801cff2:	bfab      	itete	ge
 801cff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cff6:	89a3      	ldrhlt	r3, [r4, #12]
 801cff8:	181b      	addge	r3, r3, r0
 801cffa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cffe:	bfac      	ite	ge
 801d000:	6563      	strge	r3, [r4, #84]	; 0x54
 801d002:	81a3      	strhlt	r3, [r4, #12]
 801d004:	bd10      	pop	{r4, pc}

0801d006 <__swrite>:
 801d006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d00a:	461f      	mov	r7, r3
 801d00c:	898b      	ldrh	r3, [r1, #12]
 801d00e:	05db      	lsls	r3, r3, #23
 801d010:	4605      	mov	r5, r0
 801d012:	460c      	mov	r4, r1
 801d014:	4616      	mov	r6, r2
 801d016:	d505      	bpl.n	801d024 <__swrite+0x1e>
 801d018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d01c:	2302      	movs	r3, #2
 801d01e:	2200      	movs	r2, #0
 801d020:	f000 fa92 	bl	801d548 <_lseek_r>
 801d024:	89a3      	ldrh	r3, [r4, #12]
 801d026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d02a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d02e:	81a3      	strh	r3, [r4, #12]
 801d030:	4632      	mov	r2, r6
 801d032:	463b      	mov	r3, r7
 801d034:	4628      	mov	r0, r5
 801d036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d03a:	f000 b8d1 	b.w	801d1e0 <_write_r>

0801d03e <__sseek>:
 801d03e:	b510      	push	{r4, lr}
 801d040:	460c      	mov	r4, r1
 801d042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d046:	f000 fa7f 	bl	801d548 <_lseek_r>
 801d04a:	1c43      	adds	r3, r0, #1
 801d04c:	89a3      	ldrh	r3, [r4, #12]
 801d04e:	bf15      	itete	ne
 801d050:	6560      	strne	r0, [r4, #84]	; 0x54
 801d052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d05a:	81a3      	strheq	r3, [r4, #12]
 801d05c:	bf18      	it	ne
 801d05e:	81a3      	strhne	r3, [r4, #12]
 801d060:	bd10      	pop	{r4, pc}

0801d062 <__sclose>:
 801d062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d066:	f000 b99d 	b.w	801d3a4 <_close_r>

0801d06a <strncmp>:
 801d06a:	b510      	push	{r4, lr}
 801d06c:	b17a      	cbz	r2, 801d08e <strncmp+0x24>
 801d06e:	4603      	mov	r3, r0
 801d070:	3901      	subs	r1, #1
 801d072:	1884      	adds	r4, r0, r2
 801d074:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d078:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d07c:	4290      	cmp	r0, r2
 801d07e:	d101      	bne.n	801d084 <strncmp+0x1a>
 801d080:	42a3      	cmp	r3, r4
 801d082:	d101      	bne.n	801d088 <strncmp+0x1e>
 801d084:	1a80      	subs	r0, r0, r2
 801d086:	bd10      	pop	{r4, pc}
 801d088:	2800      	cmp	r0, #0
 801d08a:	d1f3      	bne.n	801d074 <strncmp+0xa>
 801d08c:	e7fa      	b.n	801d084 <strncmp+0x1a>
 801d08e:	4610      	mov	r0, r2
 801d090:	e7f9      	b.n	801d086 <strncmp+0x1c>

0801d092 <strncpy>:
 801d092:	b510      	push	{r4, lr}
 801d094:	3901      	subs	r1, #1
 801d096:	4603      	mov	r3, r0
 801d098:	b132      	cbz	r2, 801d0a8 <strncpy+0x16>
 801d09a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d09e:	f803 4b01 	strb.w	r4, [r3], #1
 801d0a2:	3a01      	subs	r2, #1
 801d0a4:	2c00      	cmp	r4, #0
 801d0a6:	d1f7      	bne.n	801d098 <strncpy+0x6>
 801d0a8:	441a      	add	r2, r3
 801d0aa:	2100      	movs	r1, #0
 801d0ac:	4293      	cmp	r3, r2
 801d0ae:	d100      	bne.n	801d0b2 <strncpy+0x20>
 801d0b0:	bd10      	pop	{r4, pc}
 801d0b2:	f803 1b01 	strb.w	r1, [r3], #1
 801d0b6:	e7f9      	b.n	801d0ac <strncpy+0x1a>

0801d0b8 <strstr>:
 801d0b8:	780a      	ldrb	r2, [r1, #0]
 801d0ba:	b570      	push	{r4, r5, r6, lr}
 801d0bc:	b96a      	cbnz	r2, 801d0da <strstr+0x22>
 801d0be:	bd70      	pop	{r4, r5, r6, pc}
 801d0c0:	429a      	cmp	r2, r3
 801d0c2:	d109      	bne.n	801d0d8 <strstr+0x20>
 801d0c4:	460c      	mov	r4, r1
 801d0c6:	4605      	mov	r5, r0
 801d0c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d0f6      	beq.n	801d0be <strstr+0x6>
 801d0d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d0d4:	429e      	cmp	r6, r3
 801d0d6:	d0f7      	beq.n	801d0c8 <strstr+0x10>
 801d0d8:	3001      	adds	r0, #1
 801d0da:	7803      	ldrb	r3, [r0, #0]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d1ef      	bne.n	801d0c0 <strstr+0x8>
 801d0e0:	4618      	mov	r0, r3
 801d0e2:	e7ec      	b.n	801d0be <strstr+0x6>

0801d0e4 <__strtok_r>:
 801d0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0e6:	b908      	cbnz	r0, 801d0ec <__strtok_r+0x8>
 801d0e8:	6810      	ldr	r0, [r2, #0]
 801d0ea:	b188      	cbz	r0, 801d110 <__strtok_r+0x2c>
 801d0ec:	4604      	mov	r4, r0
 801d0ee:	4620      	mov	r0, r4
 801d0f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d0f4:	460f      	mov	r7, r1
 801d0f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d0fa:	b91e      	cbnz	r6, 801d104 <__strtok_r+0x20>
 801d0fc:	b965      	cbnz	r5, 801d118 <__strtok_r+0x34>
 801d0fe:	6015      	str	r5, [r2, #0]
 801d100:	4628      	mov	r0, r5
 801d102:	e005      	b.n	801d110 <__strtok_r+0x2c>
 801d104:	42b5      	cmp	r5, r6
 801d106:	d1f6      	bne.n	801d0f6 <__strtok_r+0x12>
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d1f0      	bne.n	801d0ee <__strtok_r+0xa>
 801d10c:	6014      	str	r4, [r2, #0]
 801d10e:	7003      	strb	r3, [r0, #0]
 801d110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d112:	461c      	mov	r4, r3
 801d114:	e00c      	b.n	801d130 <__strtok_r+0x4c>
 801d116:	b915      	cbnz	r5, 801d11e <__strtok_r+0x3a>
 801d118:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d11c:	460e      	mov	r6, r1
 801d11e:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d122:	42ab      	cmp	r3, r5
 801d124:	d1f7      	bne.n	801d116 <__strtok_r+0x32>
 801d126:	2b00      	cmp	r3, #0
 801d128:	d0f3      	beq.n	801d112 <__strtok_r+0x2e>
 801d12a:	2300      	movs	r3, #0
 801d12c:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d130:	6014      	str	r4, [r2, #0]
 801d132:	e7ed      	b.n	801d110 <__strtok_r+0x2c>

0801d134 <strtok_r>:
 801d134:	2301      	movs	r3, #1
 801d136:	f7ff bfd5 	b.w	801d0e4 <__strtok_r>
	...

0801d13c <__swbuf_r>:
 801d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d13e:	460e      	mov	r6, r1
 801d140:	4614      	mov	r4, r2
 801d142:	4605      	mov	r5, r0
 801d144:	b118      	cbz	r0, 801d14e <__swbuf_r+0x12>
 801d146:	6983      	ldr	r3, [r0, #24]
 801d148:	b90b      	cbnz	r3, 801d14e <__swbuf_r+0x12>
 801d14a:	f7ff f991 	bl	801c470 <__sinit>
 801d14e:	4b21      	ldr	r3, [pc, #132]	; (801d1d4 <__swbuf_r+0x98>)
 801d150:	429c      	cmp	r4, r3
 801d152:	d12b      	bne.n	801d1ac <__swbuf_r+0x70>
 801d154:	686c      	ldr	r4, [r5, #4]
 801d156:	69a3      	ldr	r3, [r4, #24]
 801d158:	60a3      	str	r3, [r4, #8]
 801d15a:	89a3      	ldrh	r3, [r4, #12]
 801d15c:	071a      	lsls	r2, r3, #28
 801d15e:	d52f      	bpl.n	801d1c0 <__swbuf_r+0x84>
 801d160:	6923      	ldr	r3, [r4, #16]
 801d162:	b36b      	cbz	r3, 801d1c0 <__swbuf_r+0x84>
 801d164:	6923      	ldr	r3, [r4, #16]
 801d166:	6820      	ldr	r0, [r4, #0]
 801d168:	1ac0      	subs	r0, r0, r3
 801d16a:	6963      	ldr	r3, [r4, #20]
 801d16c:	b2f6      	uxtb	r6, r6
 801d16e:	4283      	cmp	r3, r0
 801d170:	4637      	mov	r7, r6
 801d172:	dc04      	bgt.n	801d17e <__swbuf_r+0x42>
 801d174:	4621      	mov	r1, r4
 801d176:	4628      	mov	r0, r5
 801d178:	f000 f9aa 	bl	801d4d0 <_fflush_r>
 801d17c:	bb30      	cbnz	r0, 801d1cc <__swbuf_r+0x90>
 801d17e:	68a3      	ldr	r3, [r4, #8]
 801d180:	3b01      	subs	r3, #1
 801d182:	60a3      	str	r3, [r4, #8]
 801d184:	6823      	ldr	r3, [r4, #0]
 801d186:	1c5a      	adds	r2, r3, #1
 801d188:	6022      	str	r2, [r4, #0]
 801d18a:	701e      	strb	r6, [r3, #0]
 801d18c:	6963      	ldr	r3, [r4, #20]
 801d18e:	3001      	adds	r0, #1
 801d190:	4283      	cmp	r3, r0
 801d192:	d004      	beq.n	801d19e <__swbuf_r+0x62>
 801d194:	89a3      	ldrh	r3, [r4, #12]
 801d196:	07db      	lsls	r3, r3, #31
 801d198:	d506      	bpl.n	801d1a8 <__swbuf_r+0x6c>
 801d19a:	2e0a      	cmp	r6, #10
 801d19c:	d104      	bne.n	801d1a8 <__swbuf_r+0x6c>
 801d19e:	4621      	mov	r1, r4
 801d1a0:	4628      	mov	r0, r5
 801d1a2:	f000 f995 	bl	801d4d0 <_fflush_r>
 801d1a6:	b988      	cbnz	r0, 801d1cc <__swbuf_r+0x90>
 801d1a8:	4638      	mov	r0, r7
 801d1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ac:	4b0a      	ldr	r3, [pc, #40]	; (801d1d8 <__swbuf_r+0x9c>)
 801d1ae:	429c      	cmp	r4, r3
 801d1b0:	d101      	bne.n	801d1b6 <__swbuf_r+0x7a>
 801d1b2:	68ac      	ldr	r4, [r5, #8]
 801d1b4:	e7cf      	b.n	801d156 <__swbuf_r+0x1a>
 801d1b6:	4b09      	ldr	r3, [pc, #36]	; (801d1dc <__swbuf_r+0xa0>)
 801d1b8:	429c      	cmp	r4, r3
 801d1ba:	bf08      	it	eq
 801d1bc:	68ec      	ldreq	r4, [r5, #12]
 801d1be:	e7ca      	b.n	801d156 <__swbuf_r+0x1a>
 801d1c0:	4621      	mov	r1, r4
 801d1c2:	4628      	mov	r0, r5
 801d1c4:	f000 f81e 	bl	801d204 <__swsetup_r>
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d0cb      	beq.n	801d164 <__swbuf_r+0x28>
 801d1cc:	f04f 37ff 	mov.w	r7, #4294967295
 801d1d0:	e7ea      	b.n	801d1a8 <__swbuf_r+0x6c>
 801d1d2:	bf00      	nop
 801d1d4:	0801f5c4 	.word	0x0801f5c4
 801d1d8:	0801f5e4 	.word	0x0801f5e4
 801d1dc:	0801f5a4 	.word	0x0801f5a4

0801d1e0 <_write_r>:
 801d1e0:	b538      	push	{r3, r4, r5, lr}
 801d1e2:	4d07      	ldr	r5, [pc, #28]	; (801d200 <_write_r+0x20>)
 801d1e4:	4604      	mov	r4, r0
 801d1e6:	4608      	mov	r0, r1
 801d1e8:	4611      	mov	r1, r2
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	602a      	str	r2, [r5, #0]
 801d1ee:	461a      	mov	r2, r3
 801d1f0:	f7e5 fc5e 	bl	8002ab0 <_write>
 801d1f4:	1c43      	adds	r3, r0, #1
 801d1f6:	d102      	bne.n	801d1fe <_write_r+0x1e>
 801d1f8:	682b      	ldr	r3, [r5, #0]
 801d1fa:	b103      	cbz	r3, 801d1fe <_write_r+0x1e>
 801d1fc:	6023      	str	r3, [r4, #0]
 801d1fe:	bd38      	pop	{r3, r4, r5, pc}
 801d200:	2400bb70 	.word	0x2400bb70

0801d204 <__swsetup_r>:
 801d204:	4b32      	ldr	r3, [pc, #200]	; (801d2d0 <__swsetup_r+0xcc>)
 801d206:	b570      	push	{r4, r5, r6, lr}
 801d208:	681d      	ldr	r5, [r3, #0]
 801d20a:	4606      	mov	r6, r0
 801d20c:	460c      	mov	r4, r1
 801d20e:	b125      	cbz	r5, 801d21a <__swsetup_r+0x16>
 801d210:	69ab      	ldr	r3, [r5, #24]
 801d212:	b913      	cbnz	r3, 801d21a <__swsetup_r+0x16>
 801d214:	4628      	mov	r0, r5
 801d216:	f7ff f92b 	bl	801c470 <__sinit>
 801d21a:	4b2e      	ldr	r3, [pc, #184]	; (801d2d4 <__swsetup_r+0xd0>)
 801d21c:	429c      	cmp	r4, r3
 801d21e:	d10f      	bne.n	801d240 <__swsetup_r+0x3c>
 801d220:	686c      	ldr	r4, [r5, #4]
 801d222:	89a3      	ldrh	r3, [r4, #12]
 801d224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d228:	0719      	lsls	r1, r3, #28
 801d22a:	d42c      	bmi.n	801d286 <__swsetup_r+0x82>
 801d22c:	06dd      	lsls	r5, r3, #27
 801d22e:	d411      	bmi.n	801d254 <__swsetup_r+0x50>
 801d230:	2309      	movs	r3, #9
 801d232:	6033      	str	r3, [r6, #0]
 801d234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d238:	81a3      	strh	r3, [r4, #12]
 801d23a:	f04f 30ff 	mov.w	r0, #4294967295
 801d23e:	e03e      	b.n	801d2be <__swsetup_r+0xba>
 801d240:	4b25      	ldr	r3, [pc, #148]	; (801d2d8 <__swsetup_r+0xd4>)
 801d242:	429c      	cmp	r4, r3
 801d244:	d101      	bne.n	801d24a <__swsetup_r+0x46>
 801d246:	68ac      	ldr	r4, [r5, #8]
 801d248:	e7eb      	b.n	801d222 <__swsetup_r+0x1e>
 801d24a:	4b24      	ldr	r3, [pc, #144]	; (801d2dc <__swsetup_r+0xd8>)
 801d24c:	429c      	cmp	r4, r3
 801d24e:	bf08      	it	eq
 801d250:	68ec      	ldreq	r4, [r5, #12]
 801d252:	e7e6      	b.n	801d222 <__swsetup_r+0x1e>
 801d254:	0758      	lsls	r0, r3, #29
 801d256:	d512      	bpl.n	801d27e <__swsetup_r+0x7a>
 801d258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d25a:	b141      	cbz	r1, 801d26e <__swsetup_r+0x6a>
 801d25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d260:	4299      	cmp	r1, r3
 801d262:	d002      	beq.n	801d26a <__swsetup_r+0x66>
 801d264:	4630      	mov	r0, r6
 801d266:	f7ff fa11 	bl	801c68c <_free_r>
 801d26a:	2300      	movs	r3, #0
 801d26c:	6363      	str	r3, [r4, #52]	; 0x34
 801d26e:	89a3      	ldrh	r3, [r4, #12]
 801d270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d274:	81a3      	strh	r3, [r4, #12]
 801d276:	2300      	movs	r3, #0
 801d278:	6063      	str	r3, [r4, #4]
 801d27a:	6923      	ldr	r3, [r4, #16]
 801d27c:	6023      	str	r3, [r4, #0]
 801d27e:	89a3      	ldrh	r3, [r4, #12]
 801d280:	f043 0308 	orr.w	r3, r3, #8
 801d284:	81a3      	strh	r3, [r4, #12]
 801d286:	6923      	ldr	r3, [r4, #16]
 801d288:	b94b      	cbnz	r3, 801d29e <__swsetup_r+0x9a>
 801d28a:	89a3      	ldrh	r3, [r4, #12]
 801d28c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d294:	d003      	beq.n	801d29e <__swsetup_r+0x9a>
 801d296:	4621      	mov	r1, r4
 801d298:	4630      	mov	r0, r6
 801d29a:	f000 f98d 	bl	801d5b8 <__smakebuf_r>
 801d29e:	89a0      	ldrh	r0, [r4, #12]
 801d2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d2a4:	f010 0301 	ands.w	r3, r0, #1
 801d2a8:	d00a      	beq.n	801d2c0 <__swsetup_r+0xbc>
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	60a3      	str	r3, [r4, #8]
 801d2ae:	6963      	ldr	r3, [r4, #20]
 801d2b0:	425b      	negs	r3, r3
 801d2b2:	61a3      	str	r3, [r4, #24]
 801d2b4:	6923      	ldr	r3, [r4, #16]
 801d2b6:	b943      	cbnz	r3, 801d2ca <__swsetup_r+0xc6>
 801d2b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d2bc:	d1ba      	bne.n	801d234 <__swsetup_r+0x30>
 801d2be:	bd70      	pop	{r4, r5, r6, pc}
 801d2c0:	0781      	lsls	r1, r0, #30
 801d2c2:	bf58      	it	pl
 801d2c4:	6963      	ldrpl	r3, [r4, #20]
 801d2c6:	60a3      	str	r3, [r4, #8]
 801d2c8:	e7f4      	b.n	801d2b4 <__swsetup_r+0xb0>
 801d2ca:	2000      	movs	r0, #0
 801d2cc:	e7f7      	b.n	801d2be <__swsetup_r+0xba>
 801d2ce:	bf00      	nop
 801d2d0:	240000ac 	.word	0x240000ac
 801d2d4:	0801f5c4 	.word	0x0801f5c4
 801d2d8:	0801f5e4 	.word	0x0801f5e4
 801d2dc:	0801f5a4 	.word	0x0801f5a4

0801d2e0 <__register_exitproc>:
 801d2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801d3a0 <__register_exitproc+0xc0>
 801d2e8:	4606      	mov	r6, r0
 801d2ea:	f8d8 0000 	ldr.w	r0, [r8]
 801d2ee:	461f      	mov	r7, r3
 801d2f0:	460d      	mov	r5, r1
 801d2f2:	4691      	mov	r9, r2
 801d2f4:	f7ff f991 	bl	801c61a <__retarget_lock_acquire_recursive>
 801d2f8:	4b25      	ldr	r3, [pc, #148]	; (801d390 <__register_exitproc+0xb0>)
 801d2fa:	681c      	ldr	r4, [r3, #0]
 801d2fc:	b934      	cbnz	r4, 801d30c <__register_exitproc+0x2c>
 801d2fe:	4c25      	ldr	r4, [pc, #148]	; (801d394 <__register_exitproc+0xb4>)
 801d300:	601c      	str	r4, [r3, #0]
 801d302:	4b25      	ldr	r3, [pc, #148]	; (801d398 <__register_exitproc+0xb8>)
 801d304:	b113      	cbz	r3, 801d30c <__register_exitproc+0x2c>
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801d30c:	6863      	ldr	r3, [r4, #4]
 801d30e:	2b1f      	cmp	r3, #31
 801d310:	dd07      	ble.n	801d322 <__register_exitproc+0x42>
 801d312:	f8d8 0000 	ldr.w	r0, [r8]
 801d316:	f7ff f982 	bl	801c61e <__retarget_lock_release_recursive>
 801d31a:	f04f 30ff 	mov.w	r0, #4294967295
 801d31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d322:	b34e      	cbz	r6, 801d378 <__register_exitproc+0x98>
 801d324:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801d328:	b988      	cbnz	r0, 801d34e <__register_exitproc+0x6e>
 801d32a:	4b1c      	ldr	r3, [pc, #112]	; (801d39c <__register_exitproc+0xbc>)
 801d32c:	b923      	cbnz	r3, 801d338 <__register_exitproc+0x58>
 801d32e:	f8d8 0000 	ldr.w	r0, [r8]
 801d332:	f7ff f973 	bl	801c61c <__retarget_lock_release>
 801d336:	e7f0      	b.n	801d31a <__register_exitproc+0x3a>
 801d338:	f44f 7084 	mov.w	r0, #264	; 0x108
 801d33c:	f7ff f970 	bl	801c620 <malloc>
 801d340:	2800      	cmp	r0, #0
 801d342:	d0f4      	beq.n	801d32e <__register_exitproc+0x4e>
 801d344:	2300      	movs	r3, #0
 801d346:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801d34a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801d34e:	6863      	ldr	r3, [r4, #4]
 801d350:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801d354:	2201      	movs	r2, #1
 801d356:	409a      	lsls	r2, r3
 801d358:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801d35c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801d360:	4313      	orrs	r3, r2
 801d362:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801d366:	2e02      	cmp	r6, #2
 801d368:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801d36c:	bf02      	ittt	eq
 801d36e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801d372:	4313      	orreq	r3, r2
 801d374:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801d378:	6863      	ldr	r3, [r4, #4]
 801d37a:	f8d8 0000 	ldr.w	r0, [r8]
 801d37e:	1c5a      	adds	r2, r3, #1
 801d380:	3302      	adds	r3, #2
 801d382:	6062      	str	r2, [r4, #4]
 801d384:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801d388:	f7ff f949 	bl	801c61e <__retarget_lock_release_recursive>
 801d38c:	2000      	movs	r0, #0
 801d38e:	e7c6      	b.n	801d31e <__register_exitproc+0x3e>
 801d390:	2400bc00 	.word	0x2400bc00
 801d394:	2400bb74 	.word	0x2400bb74
 801d398:	0801f63c 	.word	0x0801f63c
 801d39c:	0801c621 	.word	0x0801c621
 801d3a0:	24000110 	.word	0x24000110

0801d3a4 <_close_r>:
 801d3a4:	b538      	push	{r3, r4, r5, lr}
 801d3a6:	4d06      	ldr	r5, [pc, #24]	; (801d3c0 <_close_r+0x1c>)
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	4604      	mov	r4, r0
 801d3ac:	4608      	mov	r0, r1
 801d3ae:	602b      	str	r3, [r5, #0]
 801d3b0:	f7e5 fb8c 	bl	8002acc <_close>
 801d3b4:	1c43      	adds	r3, r0, #1
 801d3b6:	d102      	bne.n	801d3be <_close_r+0x1a>
 801d3b8:	682b      	ldr	r3, [r5, #0]
 801d3ba:	b103      	cbz	r3, 801d3be <_close_r+0x1a>
 801d3bc:	6023      	str	r3, [r4, #0]
 801d3be:	bd38      	pop	{r3, r4, r5, pc}
 801d3c0:	2400bb70 	.word	0x2400bb70

0801d3c4 <__sflush_r>:
 801d3c4:	898a      	ldrh	r2, [r1, #12]
 801d3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ca:	4605      	mov	r5, r0
 801d3cc:	0710      	lsls	r0, r2, #28
 801d3ce:	460c      	mov	r4, r1
 801d3d0:	d458      	bmi.n	801d484 <__sflush_r+0xc0>
 801d3d2:	684b      	ldr	r3, [r1, #4]
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	dc05      	bgt.n	801d3e4 <__sflush_r+0x20>
 801d3d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	dc02      	bgt.n	801d3e4 <__sflush_r+0x20>
 801d3de:	2000      	movs	r0, #0
 801d3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d3e6:	2e00      	cmp	r6, #0
 801d3e8:	d0f9      	beq.n	801d3de <__sflush_r+0x1a>
 801d3ea:	2300      	movs	r3, #0
 801d3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d3f0:	682f      	ldr	r7, [r5, #0]
 801d3f2:	602b      	str	r3, [r5, #0]
 801d3f4:	d032      	beq.n	801d45c <__sflush_r+0x98>
 801d3f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d3f8:	89a3      	ldrh	r3, [r4, #12]
 801d3fa:	075a      	lsls	r2, r3, #29
 801d3fc:	d505      	bpl.n	801d40a <__sflush_r+0x46>
 801d3fe:	6863      	ldr	r3, [r4, #4]
 801d400:	1ac0      	subs	r0, r0, r3
 801d402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d404:	b10b      	cbz	r3, 801d40a <__sflush_r+0x46>
 801d406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d408:	1ac0      	subs	r0, r0, r3
 801d40a:	2300      	movs	r3, #0
 801d40c:	4602      	mov	r2, r0
 801d40e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d410:	6a21      	ldr	r1, [r4, #32]
 801d412:	4628      	mov	r0, r5
 801d414:	47b0      	blx	r6
 801d416:	1c43      	adds	r3, r0, #1
 801d418:	89a3      	ldrh	r3, [r4, #12]
 801d41a:	d106      	bne.n	801d42a <__sflush_r+0x66>
 801d41c:	6829      	ldr	r1, [r5, #0]
 801d41e:	291d      	cmp	r1, #29
 801d420:	d82c      	bhi.n	801d47c <__sflush_r+0xb8>
 801d422:	4a2a      	ldr	r2, [pc, #168]	; (801d4cc <__sflush_r+0x108>)
 801d424:	40ca      	lsrs	r2, r1
 801d426:	07d6      	lsls	r6, r2, #31
 801d428:	d528      	bpl.n	801d47c <__sflush_r+0xb8>
 801d42a:	2200      	movs	r2, #0
 801d42c:	6062      	str	r2, [r4, #4]
 801d42e:	04d9      	lsls	r1, r3, #19
 801d430:	6922      	ldr	r2, [r4, #16]
 801d432:	6022      	str	r2, [r4, #0]
 801d434:	d504      	bpl.n	801d440 <__sflush_r+0x7c>
 801d436:	1c42      	adds	r2, r0, #1
 801d438:	d101      	bne.n	801d43e <__sflush_r+0x7a>
 801d43a:	682b      	ldr	r3, [r5, #0]
 801d43c:	b903      	cbnz	r3, 801d440 <__sflush_r+0x7c>
 801d43e:	6560      	str	r0, [r4, #84]	; 0x54
 801d440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d442:	602f      	str	r7, [r5, #0]
 801d444:	2900      	cmp	r1, #0
 801d446:	d0ca      	beq.n	801d3de <__sflush_r+0x1a>
 801d448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d44c:	4299      	cmp	r1, r3
 801d44e:	d002      	beq.n	801d456 <__sflush_r+0x92>
 801d450:	4628      	mov	r0, r5
 801d452:	f7ff f91b 	bl	801c68c <_free_r>
 801d456:	2000      	movs	r0, #0
 801d458:	6360      	str	r0, [r4, #52]	; 0x34
 801d45a:	e7c1      	b.n	801d3e0 <__sflush_r+0x1c>
 801d45c:	6a21      	ldr	r1, [r4, #32]
 801d45e:	2301      	movs	r3, #1
 801d460:	4628      	mov	r0, r5
 801d462:	47b0      	blx	r6
 801d464:	1c41      	adds	r1, r0, #1
 801d466:	d1c7      	bne.n	801d3f8 <__sflush_r+0x34>
 801d468:	682b      	ldr	r3, [r5, #0]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d0c4      	beq.n	801d3f8 <__sflush_r+0x34>
 801d46e:	2b1d      	cmp	r3, #29
 801d470:	d001      	beq.n	801d476 <__sflush_r+0xb2>
 801d472:	2b16      	cmp	r3, #22
 801d474:	d101      	bne.n	801d47a <__sflush_r+0xb6>
 801d476:	602f      	str	r7, [r5, #0]
 801d478:	e7b1      	b.n	801d3de <__sflush_r+0x1a>
 801d47a:	89a3      	ldrh	r3, [r4, #12]
 801d47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d480:	81a3      	strh	r3, [r4, #12]
 801d482:	e7ad      	b.n	801d3e0 <__sflush_r+0x1c>
 801d484:	690f      	ldr	r7, [r1, #16]
 801d486:	2f00      	cmp	r7, #0
 801d488:	d0a9      	beq.n	801d3de <__sflush_r+0x1a>
 801d48a:	0793      	lsls	r3, r2, #30
 801d48c:	680e      	ldr	r6, [r1, #0]
 801d48e:	bf08      	it	eq
 801d490:	694b      	ldreq	r3, [r1, #20]
 801d492:	600f      	str	r7, [r1, #0]
 801d494:	bf18      	it	ne
 801d496:	2300      	movne	r3, #0
 801d498:	eba6 0807 	sub.w	r8, r6, r7
 801d49c:	608b      	str	r3, [r1, #8]
 801d49e:	f1b8 0f00 	cmp.w	r8, #0
 801d4a2:	dd9c      	ble.n	801d3de <__sflush_r+0x1a>
 801d4a4:	6a21      	ldr	r1, [r4, #32]
 801d4a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d4a8:	4643      	mov	r3, r8
 801d4aa:	463a      	mov	r2, r7
 801d4ac:	4628      	mov	r0, r5
 801d4ae:	47b0      	blx	r6
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	dc06      	bgt.n	801d4c2 <__sflush_r+0xfe>
 801d4b4:	89a3      	ldrh	r3, [r4, #12]
 801d4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d4ba:	81a3      	strh	r3, [r4, #12]
 801d4bc:	f04f 30ff 	mov.w	r0, #4294967295
 801d4c0:	e78e      	b.n	801d3e0 <__sflush_r+0x1c>
 801d4c2:	4407      	add	r7, r0
 801d4c4:	eba8 0800 	sub.w	r8, r8, r0
 801d4c8:	e7e9      	b.n	801d49e <__sflush_r+0xda>
 801d4ca:	bf00      	nop
 801d4cc:	20400001 	.word	0x20400001

0801d4d0 <_fflush_r>:
 801d4d0:	b538      	push	{r3, r4, r5, lr}
 801d4d2:	690b      	ldr	r3, [r1, #16]
 801d4d4:	4605      	mov	r5, r0
 801d4d6:	460c      	mov	r4, r1
 801d4d8:	b913      	cbnz	r3, 801d4e0 <_fflush_r+0x10>
 801d4da:	2500      	movs	r5, #0
 801d4dc:	4628      	mov	r0, r5
 801d4de:	bd38      	pop	{r3, r4, r5, pc}
 801d4e0:	b118      	cbz	r0, 801d4ea <_fflush_r+0x1a>
 801d4e2:	6983      	ldr	r3, [r0, #24]
 801d4e4:	b90b      	cbnz	r3, 801d4ea <_fflush_r+0x1a>
 801d4e6:	f7fe ffc3 	bl	801c470 <__sinit>
 801d4ea:	4b14      	ldr	r3, [pc, #80]	; (801d53c <_fflush_r+0x6c>)
 801d4ec:	429c      	cmp	r4, r3
 801d4ee:	d11b      	bne.n	801d528 <_fflush_r+0x58>
 801d4f0:	686c      	ldr	r4, [r5, #4]
 801d4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d0ef      	beq.n	801d4da <_fflush_r+0xa>
 801d4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d4fc:	07d0      	lsls	r0, r2, #31
 801d4fe:	d404      	bmi.n	801d50a <_fflush_r+0x3a>
 801d500:	0599      	lsls	r1, r3, #22
 801d502:	d402      	bmi.n	801d50a <_fflush_r+0x3a>
 801d504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d506:	f7ff f888 	bl	801c61a <__retarget_lock_acquire_recursive>
 801d50a:	4628      	mov	r0, r5
 801d50c:	4621      	mov	r1, r4
 801d50e:	f7ff ff59 	bl	801d3c4 <__sflush_r>
 801d512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d514:	07da      	lsls	r2, r3, #31
 801d516:	4605      	mov	r5, r0
 801d518:	d4e0      	bmi.n	801d4dc <_fflush_r+0xc>
 801d51a:	89a3      	ldrh	r3, [r4, #12]
 801d51c:	059b      	lsls	r3, r3, #22
 801d51e:	d4dd      	bmi.n	801d4dc <_fflush_r+0xc>
 801d520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d522:	f7ff f87c 	bl	801c61e <__retarget_lock_release_recursive>
 801d526:	e7d9      	b.n	801d4dc <_fflush_r+0xc>
 801d528:	4b05      	ldr	r3, [pc, #20]	; (801d540 <_fflush_r+0x70>)
 801d52a:	429c      	cmp	r4, r3
 801d52c:	d101      	bne.n	801d532 <_fflush_r+0x62>
 801d52e:	68ac      	ldr	r4, [r5, #8]
 801d530:	e7df      	b.n	801d4f2 <_fflush_r+0x22>
 801d532:	4b04      	ldr	r3, [pc, #16]	; (801d544 <_fflush_r+0x74>)
 801d534:	429c      	cmp	r4, r3
 801d536:	bf08      	it	eq
 801d538:	68ec      	ldreq	r4, [r5, #12]
 801d53a:	e7da      	b.n	801d4f2 <_fflush_r+0x22>
 801d53c:	0801f5c4 	.word	0x0801f5c4
 801d540:	0801f5e4 	.word	0x0801f5e4
 801d544:	0801f5a4 	.word	0x0801f5a4

0801d548 <_lseek_r>:
 801d548:	b538      	push	{r3, r4, r5, lr}
 801d54a:	4d07      	ldr	r5, [pc, #28]	; (801d568 <_lseek_r+0x20>)
 801d54c:	4604      	mov	r4, r0
 801d54e:	4608      	mov	r0, r1
 801d550:	4611      	mov	r1, r2
 801d552:	2200      	movs	r2, #0
 801d554:	602a      	str	r2, [r5, #0]
 801d556:	461a      	mov	r2, r3
 801d558:	f7e5 fac2 	bl	8002ae0 <_lseek>
 801d55c:	1c43      	adds	r3, r0, #1
 801d55e:	d102      	bne.n	801d566 <_lseek_r+0x1e>
 801d560:	682b      	ldr	r3, [r5, #0]
 801d562:	b103      	cbz	r3, 801d566 <_lseek_r+0x1e>
 801d564:	6023      	str	r3, [r4, #0]
 801d566:	bd38      	pop	{r3, r4, r5, pc}
 801d568:	2400bb70 	.word	0x2400bb70

0801d56c <__swhatbuf_r>:
 801d56c:	b570      	push	{r4, r5, r6, lr}
 801d56e:	460e      	mov	r6, r1
 801d570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d574:	2900      	cmp	r1, #0
 801d576:	b096      	sub	sp, #88	; 0x58
 801d578:	4614      	mov	r4, r2
 801d57a:	461d      	mov	r5, r3
 801d57c:	da08      	bge.n	801d590 <__swhatbuf_r+0x24>
 801d57e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d582:	2200      	movs	r2, #0
 801d584:	602a      	str	r2, [r5, #0]
 801d586:	061a      	lsls	r2, r3, #24
 801d588:	d410      	bmi.n	801d5ac <__swhatbuf_r+0x40>
 801d58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d58e:	e00e      	b.n	801d5ae <__swhatbuf_r+0x42>
 801d590:	466a      	mov	r2, sp
 801d592:	f000 fa13 	bl	801d9bc <_fstat_r>
 801d596:	2800      	cmp	r0, #0
 801d598:	dbf1      	blt.n	801d57e <__swhatbuf_r+0x12>
 801d59a:	9a01      	ldr	r2, [sp, #4]
 801d59c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d5a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d5a4:	425a      	negs	r2, r3
 801d5a6:	415a      	adcs	r2, r3
 801d5a8:	602a      	str	r2, [r5, #0]
 801d5aa:	e7ee      	b.n	801d58a <__swhatbuf_r+0x1e>
 801d5ac:	2340      	movs	r3, #64	; 0x40
 801d5ae:	2000      	movs	r0, #0
 801d5b0:	6023      	str	r3, [r4, #0]
 801d5b2:	b016      	add	sp, #88	; 0x58
 801d5b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d5b8 <__smakebuf_r>:
 801d5b8:	898b      	ldrh	r3, [r1, #12]
 801d5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d5bc:	079d      	lsls	r5, r3, #30
 801d5be:	4606      	mov	r6, r0
 801d5c0:	460c      	mov	r4, r1
 801d5c2:	d507      	bpl.n	801d5d4 <__smakebuf_r+0x1c>
 801d5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d5c8:	6023      	str	r3, [r4, #0]
 801d5ca:	6123      	str	r3, [r4, #16]
 801d5cc:	2301      	movs	r3, #1
 801d5ce:	6163      	str	r3, [r4, #20]
 801d5d0:	b002      	add	sp, #8
 801d5d2:	bd70      	pop	{r4, r5, r6, pc}
 801d5d4:	ab01      	add	r3, sp, #4
 801d5d6:	466a      	mov	r2, sp
 801d5d8:	f7ff ffc8 	bl	801d56c <__swhatbuf_r>
 801d5dc:	9900      	ldr	r1, [sp, #0]
 801d5de:	4605      	mov	r5, r0
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	f7ff f8bf 	bl	801c764 <_malloc_r>
 801d5e6:	b948      	cbnz	r0, 801d5fc <__smakebuf_r+0x44>
 801d5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5ec:	059a      	lsls	r2, r3, #22
 801d5ee:	d4ef      	bmi.n	801d5d0 <__smakebuf_r+0x18>
 801d5f0:	f023 0303 	bic.w	r3, r3, #3
 801d5f4:	f043 0302 	orr.w	r3, r3, #2
 801d5f8:	81a3      	strh	r3, [r4, #12]
 801d5fa:	e7e3      	b.n	801d5c4 <__smakebuf_r+0xc>
 801d5fc:	4b0d      	ldr	r3, [pc, #52]	; (801d634 <__smakebuf_r+0x7c>)
 801d5fe:	62b3      	str	r3, [r6, #40]	; 0x28
 801d600:	89a3      	ldrh	r3, [r4, #12]
 801d602:	6020      	str	r0, [r4, #0]
 801d604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d608:	81a3      	strh	r3, [r4, #12]
 801d60a:	9b00      	ldr	r3, [sp, #0]
 801d60c:	6163      	str	r3, [r4, #20]
 801d60e:	9b01      	ldr	r3, [sp, #4]
 801d610:	6120      	str	r0, [r4, #16]
 801d612:	b15b      	cbz	r3, 801d62c <__smakebuf_r+0x74>
 801d614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d618:	4630      	mov	r0, r6
 801d61a:	f000 f9e1 	bl	801d9e0 <_isatty_r>
 801d61e:	b128      	cbz	r0, 801d62c <__smakebuf_r+0x74>
 801d620:	89a3      	ldrh	r3, [r4, #12]
 801d622:	f023 0303 	bic.w	r3, r3, #3
 801d626:	f043 0301 	orr.w	r3, r3, #1
 801d62a:	81a3      	strh	r3, [r4, #12]
 801d62c:	89a0      	ldrh	r0, [r4, #12]
 801d62e:	4305      	orrs	r5, r0
 801d630:	81a5      	strh	r5, [r4, #12]
 801d632:	e7cd      	b.n	801d5d0 <__smakebuf_r+0x18>
 801d634:	0801c409 	.word	0x0801c409

0801d638 <memmove>:
 801d638:	4288      	cmp	r0, r1
 801d63a:	b510      	push	{r4, lr}
 801d63c:	eb01 0402 	add.w	r4, r1, r2
 801d640:	d902      	bls.n	801d648 <memmove+0x10>
 801d642:	4284      	cmp	r4, r0
 801d644:	4623      	mov	r3, r4
 801d646:	d807      	bhi.n	801d658 <memmove+0x20>
 801d648:	1e43      	subs	r3, r0, #1
 801d64a:	42a1      	cmp	r1, r4
 801d64c:	d008      	beq.n	801d660 <memmove+0x28>
 801d64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d652:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d656:	e7f8      	b.n	801d64a <memmove+0x12>
 801d658:	4402      	add	r2, r0
 801d65a:	4601      	mov	r1, r0
 801d65c:	428a      	cmp	r2, r1
 801d65e:	d100      	bne.n	801d662 <memmove+0x2a>
 801d660:	bd10      	pop	{r4, pc}
 801d662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d66a:	e7f7      	b.n	801d65c <memmove+0x24>

0801d66c <__malloc_lock>:
 801d66c:	4801      	ldr	r0, [pc, #4]	; (801d674 <__malloc_lock+0x8>)
 801d66e:	f7fe bfd4 	b.w	801c61a <__retarget_lock_acquire_recursive>
 801d672:	bf00      	nop
 801d674:	2400ba5d 	.word	0x2400ba5d

0801d678 <__malloc_unlock>:
 801d678:	4801      	ldr	r0, [pc, #4]	; (801d680 <__malloc_unlock+0x8>)
 801d67a:	f7fe bfd0 	b.w	801c61e <__retarget_lock_release_recursive>
 801d67e:	bf00      	nop
 801d680:	2400ba5d 	.word	0x2400ba5d

0801d684 <_realloc_r>:
 801d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d688:	4680      	mov	r8, r0
 801d68a:	4614      	mov	r4, r2
 801d68c:	460e      	mov	r6, r1
 801d68e:	b921      	cbnz	r1, 801d69a <_realloc_r+0x16>
 801d690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d694:	4611      	mov	r1, r2
 801d696:	f7ff b865 	b.w	801c764 <_malloc_r>
 801d69a:	b92a      	cbnz	r2, 801d6a8 <_realloc_r+0x24>
 801d69c:	f7fe fff6 	bl	801c68c <_free_r>
 801d6a0:	4625      	mov	r5, r4
 801d6a2:	4628      	mov	r0, r5
 801d6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6a8:	f000 f9aa 	bl	801da00 <_malloc_usable_size_r>
 801d6ac:	4284      	cmp	r4, r0
 801d6ae:	4607      	mov	r7, r0
 801d6b0:	d802      	bhi.n	801d6b8 <_realloc_r+0x34>
 801d6b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d6b6:	d812      	bhi.n	801d6de <_realloc_r+0x5a>
 801d6b8:	4621      	mov	r1, r4
 801d6ba:	4640      	mov	r0, r8
 801d6bc:	f7ff f852 	bl	801c764 <_malloc_r>
 801d6c0:	4605      	mov	r5, r0
 801d6c2:	2800      	cmp	r0, #0
 801d6c4:	d0ed      	beq.n	801d6a2 <_realloc_r+0x1e>
 801d6c6:	42bc      	cmp	r4, r7
 801d6c8:	4622      	mov	r2, r4
 801d6ca:	4631      	mov	r1, r6
 801d6cc:	bf28      	it	cs
 801d6ce:	463a      	movcs	r2, r7
 801d6d0:	f7fe ffc6 	bl	801c660 <memcpy>
 801d6d4:	4631      	mov	r1, r6
 801d6d6:	4640      	mov	r0, r8
 801d6d8:	f7fe ffd8 	bl	801c68c <_free_r>
 801d6dc:	e7e1      	b.n	801d6a2 <_realloc_r+0x1e>
 801d6de:	4635      	mov	r5, r6
 801d6e0:	e7df      	b.n	801d6a2 <_realloc_r+0x1e>

0801d6e2 <__ssputs_r>:
 801d6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6e6:	688e      	ldr	r6, [r1, #8]
 801d6e8:	429e      	cmp	r6, r3
 801d6ea:	4682      	mov	sl, r0
 801d6ec:	460c      	mov	r4, r1
 801d6ee:	4690      	mov	r8, r2
 801d6f0:	461f      	mov	r7, r3
 801d6f2:	d838      	bhi.n	801d766 <__ssputs_r+0x84>
 801d6f4:	898a      	ldrh	r2, [r1, #12]
 801d6f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d6fa:	d032      	beq.n	801d762 <__ssputs_r+0x80>
 801d6fc:	6825      	ldr	r5, [r4, #0]
 801d6fe:	6909      	ldr	r1, [r1, #16]
 801d700:	eba5 0901 	sub.w	r9, r5, r1
 801d704:	6965      	ldr	r5, [r4, #20]
 801d706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d70a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d70e:	3301      	adds	r3, #1
 801d710:	444b      	add	r3, r9
 801d712:	106d      	asrs	r5, r5, #1
 801d714:	429d      	cmp	r5, r3
 801d716:	bf38      	it	cc
 801d718:	461d      	movcc	r5, r3
 801d71a:	0553      	lsls	r3, r2, #21
 801d71c:	d531      	bpl.n	801d782 <__ssputs_r+0xa0>
 801d71e:	4629      	mov	r1, r5
 801d720:	f7ff f820 	bl	801c764 <_malloc_r>
 801d724:	4606      	mov	r6, r0
 801d726:	b950      	cbnz	r0, 801d73e <__ssputs_r+0x5c>
 801d728:	230c      	movs	r3, #12
 801d72a:	f8ca 3000 	str.w	r3, [sl]
 801d72e:	89a3      	ldrh	r3, [r4, #12]
 801d730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d734:	81a3      	strh	r3, [r4, #12]
 801d736:	f04f 30ff 	mov.w	r0, #4294967295
 801d73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d73e:	6921      	ldr	r1, [r4, #16]
 801d740:	464a      	mov	r2, r9
 801d742:	f7fe ff8d 	bl	801c660 <memcpy>
 801d746:	89a3      	ldrh	r3, [r4, #12]
 801d748:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d750:	81a3      	strh	r3, [r4, #12]
 801d752:	6126      	str	r6, [r4, #16]
 801d754:	6165      	str	r5, [r4, #20]
 801d756:	444e      	add	r6, r9
 801d758:	eba5 0509 	sub.w	r5, r5, r9
 801d75c:	6026      	str	r6, [r4, #0]
 801d75e:	60a5      	str	r5, [r4, #8]
 801d760:	463e      	mov	r6, r7
 801d762:	42be      	cmp	r6, r7
 801d764:	d900      	bls.n	801d768 <__ssputs_r+0x86>
 801d766:	463e      	mov	r6, r7
 801d768:	6820      	ldr	r0, [r4, #0]
 801d76a:	4632      	mov	r2, r6
 801d76c:	4641      	mov	r1, r8
 801d76e:	f7ff ff63 	bl	801d638 <memmove>
 801d772:	68a3      	ldr	r3, [r4, #8]
 801d774:	1b9b      	subs	r3, r3, r6
 801d776:	60a3      	str	r3, [r4, #8]
 801d778:	6823      	ldr	r3, [r4, #0]
 801d77a:	4433      	add	r3, r6
 801d77c:	6023      	str	r3, [r4, #0]
 801d77e:	2000      	movs	r0, #0
 801d780:	e7db      	b.n	801d73a <__ssputs_r+0x58>
 801d782:	462a      	mov	r2, r5
 801d784:	f7ff ff7e 	bl	801d684 <_realloc_r>
 801d788:	4606      	mov	r6, r0
 801d78a:	2800      	cmp	r0, #0
 801d78c:	d1e1      	bne.n	801d752 <__ssputs_r+0x70>
 801d78e:	6921      	ldr	r1, [r4, #16]
 801d790:	4650      	mov	r0, sl
 801d792:	f7fe ff7b 	bl	801c68c <_free_r>
 801d796:	e7c7      	b.n	801d728 <__ssputs_r+0x46>

0801d798 <_svfiprintf_r>:
 801d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d79c:	4698      	mov	r8, r3
 801d79e:	898b      	ldrh	r3, [r1, #12]
 801d7a0:	061b      	lsls	r3, r3, #24
 801d7a2:	b09d      	sub	sp, #116	; 0x74
 801d7a4:	4607      	mov	r7, r0
 801d7a6:	460d      	mov	r5, r1
 801d7a8:	4614      	mov	r4, r2
 801d7aa:	d50e      	bpl.n	801d7ca <_svfiprintf_r+0x32>
 801d7ac:	690b      	ldr	r3, [r1, #16]
 801d7ae:	b963      	cbnz	r3, 801d7ca <_svfiprintf_r+0x32>
 801d7b0:	2140      	movs	r1, #64	; 0x40
 801d7b2:	f7fe ffd7 	bl	801c764 <_malloc_r>
 801d7b6:	6028      	str	r0, [r5, #0]
 801d7b8:	6128      	str	r0, [r5, #16]
 801d7ba:	b920      	cbnz	r0, 801d7c6 <_svfiprintf_r+0x2e>
 801d7bc:	230c      	movs	r3, #12
 801d7be:	603b      	str	r3, [r7, #0]
 801d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d7c4:	e0d1      	b.n	801d96a <_svfiprintf_r+0x1d2>
 801d7c6:	2340      	movs	r3, #64	; 0x40
 801d7c8:	616b      	str	r3, [r5, #20]
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	9309      	str	r3, [sp, #36]	; 0x24
 801d7ce:	2320      	movs	r3, #32
 801d7d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d7d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7d8:	2330      	movs	r3, #48	; 0x30
 801d7da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d984 <_svfiprintf_r+0x1ec>
 801d7de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d7e2:	f04f 0901 	mov.w	r9, #1
 801d7e6:	4623      	mov	r3, r4
 801d7e8:	469a      	mov	sl, r3
 801d7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7ee:	b10a      	cbz	r2, 801d7f4 <_svfiprintf_r+0x5c>
 801d7f0:	2a25      	cmp	r2, #37	; 0x25
 801d7f2:	d1f9      	bne.n	801d7e8 <_svfiprintf_r+0x50>
 801d7f4:	ebba 0b04 	subs.w	fp, sl, r4
 801d7f8:	d00b      	beq.n	801d812 <_svfiprintf_r+0x7a>
 801d7fa:	465b      	mov	r3, fp
 801d7fc:	4622      	mov	r2, r4
 801d7fe:	4629      	mov	r1, r5
 801d800:	4638      	mov	r0, r7
 801d802:	f7ff ff6e 	bl	801d6e2 <__ssputs_r>
 801d806:	3001      	adds	r0, #1
 801d808:	f000 80aa 	beq.w	801d960 <_svfiprintf_r+0x1c8>
 801d80c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d80e:	445a      	add	r2, fp
 801d810:	9209      	str	r2, [sp, #36]	; 0x24
 801d812:	f89a 3000 	ldrb.w	r3, [sl]
 801d816:	2b00      	cmp	r3, #0
 801d818:	f000 80a2 	beq.w	801d960 <_svfiprintf_r+0x1c8>
 801d81c:	2300      	movs	r3, #0
 801d81e:	f04f 32ff 	mov.w	r2, #4294967295
 801d822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d826:	f10a 0a01 	add.w	sl, sl, #1
 801d82a:	9304      	str	r3, [sp, #16]
 801d82c:	9307      	str	r3, [sp, #28]
 801d82e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d832:	931a      	str	r3, [sp, #104]	; 0x68
 801d834:	4654      	mov	r4, sl
 801d836:	2205      	movs	r2, #5
 801d838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d83c:	4851      	ldr	r0, [pc, #324]	; (801d984 <_svfiprintf_r+0x1ec>)
 801d83e:	f7e2 fd6f 	bl	8000320 <memchr>
 801d842:	9a04      	ldr	r2, [sp, #16]
 801d844:	b9d8      	cbnz	r0, 801d87e <_svfiprintf_r+0xe6>
 801d846:	06d0      	lsls	r0, r2, #27
 801d848:	bf44      	itt	mi
 801d84a:	2320      	movmi	r3, #32
 801d84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d850:	0711      	lsls	r1, r2, #28
 801d852:	bf44      	itt	mi
 801d854:	232b      	movmi	r3, #43	; 0x2b
 801d856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d85a:	f89a 3000 	ldrb.w	r3, [sl]
 801d85e:	2b2a      	cmp	r3, #42	; 0x2a
 801d860:	d015      	beq.n	801d88e <_svfiprintf_r+0xf6>
 801d862:	9a07      	ldr	r2, [sp, #28]
 801d864:	4654      	mov	r4, sl
 801d866:	2000      	movs	r0, #0
 801d868:	f04f 0c0a 	mov.w	ip, #10
 801d86c:	4621      	mov	r1, r4
 801d86e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d872:	3b30      	subs	r3, #48	; 0x30
 801d874:	2b09      	cmp	r3, #9
 801d876:	d94e      	bls.n	801d916 <_svfiprintf_r+0x17e>
 801d878:	b1b0      	cbz	r0, 801d8a8 <_svfiprintf_r+0x110>
 801d87a:	9207      	str	r2, [sp, #28]
 801d87c:	e014      	b.n	801d8a8 <_svfiprintf_r+0x110>
 801d87e:	eba0 0308 	sub.w	r3, r0, r8
 801d882:	fa09 f303 	lsl.w	r3, r9, r3
 801d886:	4313      	orrs	r3, r2
 801d888:	9304      	str	r3, [sp, #16]
 801d88a:	46a2      	mov	sl, r4
 801d88c:	e7d2      	b.n	801d834 <_svfiprintf_r+0x9c>
 801d88e:	9b03      	ldr	r3, [sp, #12]
 801d890:	1d19      	adds	r1, r3, #4
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	9103      	str	r1, [sp, #12]
 801d896:	2b00      	cmp	r3, #0
 801d898:	bfbb      	ittet	lt
 801d89a:	425b      	neglt	r3, r3
 801d89c:	f042 0202 	orrlt.w	r2, r2, #2
 801d8a0:	9307      	strge	r3, [sp, #28]
 801d8a2:	9307      	strlt	r3, [sp, #28]
 801d8a4:	bfb8      	it	lt
 801d8a6:	9204      	strlt	r2, [sp, #16]
 801d8a8:	7823      	ldrb	r3, [r4, #0]
 801d8aa:	2b2e      	cmp	r3, #46	; 0x2e
 801d8ac:	d10c      	bne.n	801d8c8 <_svfiprintf_r+0x130>
 801d8ae:	7863      	ldrb	r3, [r4, #1]
 801d8b0:	2b2a      	cmp	r3, #42	; 0x2a
 801d8b2:	d135      	bne.n	801d920 <_svfiprintf_r+0x188>
 801d8b4:	9b03      	ldr	r3, [sp, #12]
 801d8b6:	1d1a      	adds	r2, r3, #4
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	9203      	str	r2, [sp, #12]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	bfb8      	it	lt
 801d8c0:	f04f 33ff 	movlt.w	r3, #4294967295
 801d8c4:	3402      	adds	r4, #2
 801d8c6:	9305      	str	r3, [sp, #20]
 801d8c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d994 <_svfiprintf_r+0x1fc>
 801d8cc:	7821      	ldrb	r1, [r4, #0]
 801d8ce:	2203      	movs	r2, #3
 801d8d0:	4650      	mov	r0, sl
 801d8d2:	f7e2 fd25 	bl	8000320 <memchr>
 801d8d6:	b140      	cbz	r0, 801d8ea <_svfiprintf_r+0x152>
 801d8d8:	2340      	movs	r3, #64	; 0x40
 801d8da:	eba0 000a 	sub.w	r0, r0, sl
 801d8de:	fa03 f000 	lsl.w	r0, r3, r0
 801d8e2:	9b04      	ldr	r3, [sp, #16]
 801d8e4:	4303      	orrs	r3, r0
 801d8e6:	3401      	adds	r4, #1
 801d8e8:	9304      	str	r3, [sp, #16]
 801d8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8ee:	4826      	ldr	r0, [pc, #152]	; (801d988 <_svfiprintf_r+0x1f0>)
 801d8f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d8f4:	2206      	movs	r2, #6
 801d8f6:	f7e2 fd13 	bl	8000320 <memchr>
 801d8fa:	2800      	cmp	r0, #0
 801d8fc:	d038      	beq.n	801d970 <_svfiprintf_r+0x1d8>
 801d8fe:	4b23      	ldr	r3, [pc, #140]	; (801d98c <_svfiprintf_r+0x1f4>)
 801d900:	bb1b      	cbnz	r3, 801d94a <_svfiprintf_r+0x1b2>
 801d902:	9b03      	ldr	r3, [sp, #12]
 801d904:	3307      	adds	r3, #7
 801d906:	f023 0307 	bic.w	r3, r3, #7
 801d90a:	3308      	adds	r3, #8
 801d90c:	9303      	str	r3, [sp, #12]
 801d90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d910:	4433      	add	r3, r6
 801d912:	9309      	str	r3, [sp, #36]	; 0x24
 801d914:	e767      	b.n	801d7e6 <_svfiprintf_r+0x4e>
 801d916:	fb0c 3202 	mla	r2, ip, r2, r3
 801d91a:	460c      	mov	r4, r1
 801d91c:	2001      	movs	r0, #1
 801d91e:	e7a5      	b.n	801d86c <_svfiprintf_r+0xd4>
 801d920:	2300      	movs	r3, #0
 801d922:	3401      	adds	r4, #1
 801d924:	9305      	str	r3, [sp, #20]
 801d926:	4619      	mov	r1, r3
 801d928:	f04f 0c0a 	mov.w	ip, #10
 801d92c:	4620      	mov	r0, r4
 801d92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d932:	3a30      	subs	r2, #48	; 0x30
 801d934:	2a09      	cmp	r2, #9
 801d936:	d903      	bls.n	801d940 <_svfiprintf_r+0x1a8>
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d0c5      	beq.n	801d8c8 <_svfiprintf_r+0x130>
 801d93c:	9105      	str	r1, [sp, #20]
 801d93e:	e7c3      	b.n	801d8c8 <_svfiprintf_r+0x130>
 801d940:	fb0c 2101 	mla	r1, ip, r1, r2
 801d944:	4604      	mov	r4, r0
 801d946:	2301      	movs	r3, #1
 801d948:	e7f0      	b.n	801d92c <_svfiprintf_r+0x194>
 801d94a:	ab03      	add	r3, sp, #12
 801d94c:	9300      	str	r3, [sp, #0]
 801d94e:	462a      	mov	r2, r5
 801d950:	4b0f      	ldr	r3, [pc, #60]	; (801d990 <_svfiprintf_r+0x1f8>)
 801d952:	a904      	add	r1, sp, #16
 801d954:	4638      	mov	r0, r7
 801d956:	f3af 8000 	nop.w
 801d95a:	1c42      	adds	r2, r0, #1
 801d95c:	4606      	mov	r6, r0
 801d95e:	d1d6      	bne.n	801d90e <_svfiprintf_r+0x176>
 801d960:	89ab      	ldrh	r3, [r5, #12]
 801d962:	065b      	lsls	r3, r3, #25
 801d964:	f53f af2c 	bmi.w	801d7c0 <_svfiprintf_r+0x28>
 801d968:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d96a:	b01d      	add	sp, #116	; 0x74
 801d96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d970:	ab03      	add	r3, sp, #12
 801d972:	9300      	str	r3, [sp, #0]
 801d974:	462a      	mov	r2, r5
 801d976:	4b06      	ldr	r3, [pc, #24]	; (801d990 <_svfiprintf_r+0x1f8>)
 801d978:	a904      	add	r1, sp, #16
 801d97a:	4638      	mov	r0, r7
 801d97c:	f7ff f92e 	bl	801cbdc <_printf_i>
 801d980:	e7eb      	b.n	801d95a <_svfiprintf_r+0x1c2>
 801d982:	bf00      	nop
 801d984:	0801f608 	.word	0x0801f608
 801d988:	0801f612 	.word	0x0801f612
 801d98c:	00000000 	.word	0x00000000
 801d990:	0801d6e3 	.word	0x0801d6e3
 801d994:	0801f60e 	.word	0x0801f60e

0801d998 <_read_r>:
 801d998:	b538      	push	{r3, r4, r5, lr}
 801d99a:	4d07      	ldr	r5, [pc, #28]	; (801d9b8 <_read_r+0x20>)
 801d99c:	4604      	mov	r4, r0
 801d99e:	4608      	mov	r0, r1
 801d9a0:	4611      	mov	r1, r2
 801d9a2:	2200      	movs	r2, #0
 801d9a4:	602a      	str	r2, [r5, #0]
 801d9a6:	461a      	mov	r2, r3
 801d9a8:	f7e5 f872 	bl	8002a90 <_read>
 801d9ac:	1c43      	adds	r3, r0, #1
 801d9ae:	d102      	bne.n	801d9b6 <_read_r+0x1e>
 801d9b0:	682b      	ldr	r3, [r5, #0]
 801d9b2:	b103      	cbz	r3, 801d9b6 <_read_r+0x1e>
 801d9b4:	6023      	str	r3, [r4, #0]
 801d9b6:	bd38      	pop	{r3, r4, r5, pc}
 801d9b8:	2400bb70 	.word	0x2400bb70

0801d9bc <_fstat_r>:
 801d9bc:	b538      	push	{r3, r4, r5, lr}
 801d9be:	4d07      	ldr	r5, [pc, #28]	; (801d9dc <_fstat_r+0x20>)
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	4608      	mov	r0, r1
 801d9c6:	4611      	mov	r1, r2
 801d9c8:	602b      	str	r3, [r5, #0]
 801d9ca:	f7e5 f882 	bl	8002ad2 <_fstat>
 801d9ce:	1c43      	adds	r3, r0, #1
 801d9d0:	d102      	bne.n	801d9d8 <_fstat_r+0x1c>
 801d9d2:	682b      	ldr	r3, [r5, #0]
 801d9d4:	b103      	cbz	r3, 801d9d8 <_fstat_r+0x1c>
 801d9d6:	6023      	str	r3, [r4, #0]
 801d9d8:	bd38      	pop	{r3, r4, r5, pc}
 801d9da:	bf00      	nop
 801d9dc:	2400bb70 	.word	0x2400bb70

0801d9e0 <_isatty_r>:
 801d9e0:	b538      	push	{r3, r4, r5, lr}
 801d9e2:	4d06      	ldr	r5, [pc, #24]	; (801d9fc <_isatty_r+0x1c>)
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	4604      	mov	r4, r0
 801d9e8:	4608      	mov	r0, r1
 801d9ea:	602b      	str	r3, [r5, #0]
 801d9ec:	f7e5 f876 	bl	8002adc <_isatty>
 801d9f0:	1c43      	adds	r3, r0, #1
 801d9f2:	d102      	bne.n	801d9fa <_isatty_r+0x1a>
 801d9f4:	682b      	ldr	r3, [r5, #0]
 801d9f6:	b103      	cbz	r3, 801d9fa <_isatty_r+0x1a>
 801d9f8:	6023      	str	r3, [r4, #0]
 801d9fa:	bd38      	pop	{r3, r4, r5, pc}
 801d9fc:	2400bb70 	.word	0x2400bb70

0801da00 <_malloc_usable_size_r>:
 801da00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da04:	1f18      	subs	r0, r3, #4
 801da06:	2b00      	cmp	r3, #0
 801da08:	bfbc      	itt	lt
 801da0a:	580b      	ldrlt	r3, [r1, r0]
 801da0c:	18c0      	addlt	r0, r0, r3
 801da0e:	4770      	bx	lr

0801da10 <_init>:
 801da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da12:	bf00      	nop
 801da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da16:	bc08      	pop	{r3}
 801da18:	469e      	mov	lr, r3
 801da1a:	4770      	bx	lr

0801da1c <_fini>:
 801da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da1e:	bf00      	nop
 801da20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da22:	bc08      	pop	{r3}
 801da24:	469e      	mov	lr, r3
 801da26:	4770      	bx	lr
